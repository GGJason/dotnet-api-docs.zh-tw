<Type Name="Queryable" FullName="System.Linq.Queryable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a8423ce1903ddbaaeae227c8258f59898b6fd30b" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58749885" /></Metadata><TypeSignature Language="C#" Value="public static class Queryable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Queryable extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Queryable" />
  <TypeSignature Language="VB.NET" Value="Public Module Queryable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Queryable abstract sealed" />
  <TypeSignature Language="F#" Value="type Queryable = class" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Queryable</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="a43ad-101">提供一組 <see langword="static" /> (在 Visual Basic 中為 <see langword="Shared" />) 方法，用於查詢實作 <see cref="T:System.Linq.IQueryable`1" /> 的資料結構。</span><span class="sxs-lookup"><span data-stu-id="a43ad-101">Provides a set of <see langword="static" /> (<see langword="Shared" /> in Visual Basic) methods for querying data structures that implement <see cref="T:System.Linq.IQueryable`1" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-102">中的一組方法宣告<xref:System.Linq.Queryable>查詢的資料來源實作類別提供的標準查詢運算子實作<xref:System.Linq.IQueryable%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-102">The set of methods declared in the <xref:System.Linq.Queryable> class provides an implementation of the standard query operators for querying data sources that implement <xref:System.Linq.IQueryable%601>.</span></span> <span data-ttu-id="a43ad-103">標準查詢運算子會遵循的一般用途方法[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]模式，並讓您透過任何表示周遊、 篩選和投射作業。以.NET 為基礎的程式設計語言。</span><span class="sxs-lookup"><span data-stu-id="a43ad-103">The standard query operators are general purpose methods that follow the [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] pattern and enable you to express traversal, filter, and projection operations over data in any .NET-based programming language.</span></span>  
  
 <span data-ttu-id="a43ad-104">此類別中方法大多會定義為延伸的延伸模組方法<xref:System.Linq.IQueryable%601>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-104">The majority of the methods in this class are defined as extension methods that extend the <xref:System.Linq.IQueryable%601> type.</span></span> <span data-ttu-id="a43ad-105">這表示它們可以實作任何物件上呼叫和執行個體方法一樣<xref:System.Linq.IQueryable%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-105">This means they can be called like an instance method on any object that implements <xref:System.Linq.IQueryable%601>.</span></span> <span data-ttu-id="a43ad-106">這些方法來擴充<xref:System.Linq.IQueryable%601>不會執行任何直接查詢。</span><span class="sxs-lookup"><span data-stu-id="a43ad-106">These methods that extend <xref:System.Linq.IQueryable%601> do not perform any querying directly.</span></span> <span data-ttu-id="a43ad-107">相反地，其功能是建置<xref:System.Linq.Expressions.Expression>物件，即表示累計查詢的運算式樹狀架構。</span><span class="sxs-lookup"><span data-stu-id="a43ad-107">Instead, their functionality is to build an <xref:System.Linq.Expressions.Expression> object, which is an expression tree that represents the cumulative query.</span></span> <span data-ttu-id="a43ad-108">方法接著會將新的運算式樹狀架構傳遞給其中一個<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法或<xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29>方法的輸入<xref:System.Linq.IQueryable%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-108">The methods then pass the new expression tree to either the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method or the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the input <xref:System.Linq.IQueryable%601>.</span></span> <span data-ttu-id="a43ad-109">呼叫的方法取決於是否<xref:System.Linq.Queryable>方法會傳回單一值，在此情況下<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>呼叫時，或可列舉結果，在此情況下<xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29>呼叫。</span><span class="sxs-lookup"><span data-stu-id="a43ad-109">The method that is called depends on whether the <xref:System.Linq.Queryable> method returns a singleton value, in which case <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> is called, or has enumerable results, in which case <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> is called.</span></span>  
  
 <span data-ttu-id="a43ad-110">目標資料上執行實際的查詢藉由實作類別<xref:System.Linq.IQueryable%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-110">The actual query execution on the target data is performed by a class that implements <xref:System.Linq.IQueryable%601>.</span></span> <span data-ttu-id="a43ad-111">任何預期<xref:System.Linq.IQueryable%601>實作是執行運算式樹狀架構所建構的結果<xref:System.Linq.Queryable>標準查詢運算子方法就相當於呼叫對應方法的結果<xref:System.Linq.Enumerable>類別，如果資料來源是<xref:System.Collections.Generic.IEnumerable%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-111">The expectation of any <xref:System.Linq.IQueryable%601> implementation is that the result of executing an expression tree that was constructed by a <xref:System.Linq.Queryable> standard query operator method is equivalent to the result of calling the corresponding method in the <xref:System.Linq.Enumerable> class, if the data source were an <xref:System.Collections.Generic.IEnumerable%601>.</span></span>  
  
 <span data-ttu-id="a43ad-112">除了運作的標準查詢運算子方法<xref:System.Linq.IQueryable%601>物件，這個類別也包含一個方法中， <xref:System.Linq.Queryable.AsQueryable%2A>，哪一個型別<xref:System.Collections.IEnumerable>物件做為<xref:System.Linq.IQueryable>物件。</span><span class="sxs-lookup"><span data-stu-id="a43ad-112">In addition to the standard query operator methods that operate on <xref:System.Linq.IQueryable%601> objects, this class also contains a method, <xref:System.Linq.Queryable.AsQueryable%2A>, which types <xref:System.Collections.IEnumerable> objects as <xref:System.Linq.IQueryable> objects.</span></span>  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/a73c4aec-5d15-4e98-b962-1274021ea93d"><span data-ttu-id="a43ad-113">Language-Integrated Query (LINQ)</span><span class="sxs-lookup"><span data-stu-id="a43ad-113">Language-Integrated Query (LINQ)</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/24cda21e-8af8-4632-b519-c404a839b9b2"><span data-ttu-id="a43ad-114">標準查詢運算子概觀</span><span class="sxs-lookup"><span data-stu-id="a43ad-114">Standard Query Operators Overview</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/fb1d3ed8-d5b0-4211-a71f-dd271529294b"><span data-ttu-id="a43ad-115">運算式樹狀架構</span><span class="sxs-lookup"><span data-stu-id="a43ad-115">Expression Trees</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655"><span data-ttu-id="a43ad-116">LINQ to SQL</span><span class="sxs-lookup"><span data-stu-id="a43ad-116">LINQ to SQL</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Aggregate&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Aggregate&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TSource,TSource&gt;&gt; func);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Aggregate&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`3&lt;!!TSource, !!TSource, !!TSource&gt;&gt; func) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Aggregate(Of TSource) (source As IQueryable(Of TSource), func As Expression(Of Func(Of TSource, TSource, TSource))) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Aggregate(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, TSource, TSource&gt; ^&gt; ^ func);" />
      <MemberSignature Language="F#" Value="static member Aggregate : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, 'Source, 'Source&gt;&gt; -&gt; 'Source" Usage="System.Linq.Queryable.Aggregate (source, func)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="func" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TSource,TSource&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-117"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-117">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-118">所要彙總的序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-118">A sequence to aggregate over.</span></span></param>
        <param name="func"><span data-ttu-id="a43ad-119">要套用到每個項目的累加函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-119">An accumulator function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="a43ad-120">將累加函式套用到序列上。</span><span class="sxs-lookup"><span data-stu-id="a43ad-120">Applies an accumulator function over a sequence.</span></span></summary>
        <returns><span data-ttu-id="a43ad-121">最終累積值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-121">The final accumulator value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-122">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-122">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-123">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-123">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-124"><xref:System.Linq.Queryable.Aggregate%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Aggregate%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-124">The <xref:System.Linq.Queryable.Aggregate%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Aggregate%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-125">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-125">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-126">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Aggregate%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-126">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Aggregate%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-127">預期的行為是指定的函式， `func`，套用至每個來源序列和累積的值會傳回值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-127">The expected behavior is that the specified function, `func`, is applied to each value in the source sequence and the accumulated value is returned.</span></span> <span data-ttu-id="a43ad-128">中的第一個值`source`作為累積的值，對應中的第一個參數的初始值`func`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-128">The first value in `source` is used as the seed value for the accumulated value, which corresponds to the first parameter in `func`.</span></span>  
  
 <span data-ttu-id="a43ad-129">若要簡化常見的彙總作業，一組標準查詢運算子，也包含兩個計數的方法：<xref:System.Linq.Queryable.Count%2A>並<xref:System.Linq.Queryable.LongCount%2A>，和四個數值彙總方法，也就是<xref:System.Linq.Queryable.Max%2A>， <xref:System.Linq.Queryable.Min%2A>， <xref:System.Linq.Queryable.Sum%2A>，和<xref:System.Linq.Queryable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="a43ad-129">To simplify common aggregation operations, the set of standard query operators also includes two counting methods, <xref:System.Linq.Queryable.Count%2A> and <xref:System.Linq.Queryable.LongCount%2A>, and four numeric aggregation methods, namely <xref:System.Linq.Queryable.Max%2A>, <xref:System.Linq.Queryable.Min%2A>, <xref:System.Linq.Queryable.Sum%2A>, and <xref:System.Linq.Queryable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-130">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Aggregate%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%7D%29>建置一個句子，從字串的陣列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-130">The following code example demonstrates how to use <xref:System.Linq.Queryable.Aggregate%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%7D%29> to build a sentence from an array of strings.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#1)]
 [!code-vb[System.Linq.Queryable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-131"><paramref name="source" /> 或 <paramref name="func" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-131"><paramref name="source" /> or <paramref name="func" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a43ad-132"><paramref name="source" /> 沒有包含任何項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-132"><paramref name="source" /> contains no elements.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Aggregate&lt;TSource,TAccumulate&gt;">
      <MemberSignature Language="C#" Value="public static TAccumulate Aggregate&lt;TSource,TAccumulate&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, TAccumulate seed, System.Linq.Expressions.Expression&lt;Func&lt;TAccumulate,TSource,TAccumulate&gt;&gt; func);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TAccumulate Aggregate&lt;TSource, TAccumulate&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, !!TAccumulate seed, class System.Linq.Expressions.Expression`1&lt;class System.Func`3&lt;!!TAccumulate, !!TSource, !!TAccumulate&gt;&gt; func) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Aggregate(Of TSource, TAccumulate) (source As IQueryable(Of TSource), seed As TAccumulate, func As Expression(Of Func(Of TAccumulate, TSource, TAccumulate))) As TAccumulate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TAccumulate&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TAccumulate Aggregate(System::Linq::IQueryable&lt;TSource&gt; ^ source, TAccumulate seed, System::Linq::Expressions::Expression&lt;Func&lt;TAccumulate, TSource, TAccumulate&gt; ^&gt; ^ func);" />
      <MemberSignature Language="F#" Value="static member Aggregate : System.Linq.IQueryable&lt;'Source&gt; * 'Accumulate * System.Linq.Expressions.Expression&lt;Func&lt;'Accumulate, 'Source, 'Accumulate&gt;&gt; -&gt; 'Accumulate" Usage="System.Linq.Queryable.Aggregate (source, seed, func)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TAccumulate</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TAccumulate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="seed" Type="TAccumulate" />
        <Parameter Name="func" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TAccumulate,TSource,TAccumulate&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-133"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-133">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TAccumulate"><span data-ttu-id="a43ad-134">累積值的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-134">The type of the accumulator value.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-135">所要彙總的序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-135">A sequence to aggregate over.</span></span></param>
        <param name="seed"><span data-ttu-id="a43ad-136">初始累積值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-136">The initial accumulator value.</span></span></param>
        <param name="func"><span data-ttu-id="a43ad-137">要在每個項目上叫用的累加函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-137">An accumulator function to invoke on each element.</span></span></param>
        <summary><span data-ttu-id="a43ad-138">將累加函式套用到序列上。</span><span class="sxs-lookup"><span data-stu-id="a43ad-138">Applies an accumulator function over a sequence.</span></span> <span data-ttu-id="a43ad-139">使用指定的初始值做為初始累加值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-139">The specified seed value is used as the initial accumulator value.</span></span></summary>
        <returns><span data-ttu-id="a43ad-140">最終累積值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-140">The final accumulator value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-141">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-141">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-142">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-142">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-143"><xref:System.Linq.Queryable.Aggregate%60%602%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Aggregate%60%602%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-143">The <xref:System.Linq.Queryable.Aggregate%60%602%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Aggregate%60%602%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-144">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-144">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-145">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Aggregate%60%602%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-145">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Aggregate%60%602%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-146">預期的行為是指定的函式， `func`，套用至每個來源序列和累積的值會傳回值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-146">The expected behavior is that the specified function, `func`, is applied to each value in the source sequence and the accumulated value is returned.</span></span> <span data-ttu-id="a43ad-147">`seed`參數會作為種子值的累積的值，對應中的第一個參數`func`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-147">The `seed` parameter is used as the seed value for the accumulated value, which corresponds to the first parameter in `func`.</span></span>  
  
 <span data-ttu-id="a43ad-148">若要簡化常見的彙總作業，一組標準查詢運算子，也包含兩個計數的方法：<xref:System.Linq.Queryable.Count%2A>並<xref:System.Linq.Queryable.LongCount%2A>，和四個數值彙總方法，也就是<xref:System.Linq.Queryable.Max%2A>， <xref:System.Linq.Queryable.Min%2A>， <xref:System.Linq.Queryable.Sum%2A>，和<xref:System.Linq.Queryable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="a43ad-148">To simplify common aggregation operations, the set of standard query operators also includes two counting methods, <xref:System.Linq.Queryable.Count%2A> and <xref:System.Linq.Queryable.LongCount%2A>, and four numeric aggregation methods, namely <xref:System.Linq.Queryable.Max%2A>, <xref:System.Linq.Queryable.Min%2A>, <xref:System.Linq.Queryable.Sum%2A>, and <xref:System.Linq.Queryable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-149">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Aggregate%60%602%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%29>種子值提供給函式時套用的累加函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-149">The following code example demonstrates how to use <xref:System.Linq.Queryable.Aggregate%60%602%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%29> to apply an accumulator function when a seed value is provided to the function.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#2)]
 [!code-vb[System.Linq.Queryable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-150"><paramref name="source" /> 或 <paramref name="func" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-150"><paramref name="source" /> or <paramref name="func" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Aggregate&lt;TSource,TAccumulate,TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Aggregate&lt;TSource,TAccumulate,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, TAccumulate seed, System.Linq.Expressions.Expression&lt;Func&lt;TAccumulate,TSource,TAccumulate&gt;&gt; func, System.Linq.Expressions.Expression&lt;Func&lt;TAccumulate,TResult&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Aggregate&lt;TSource, TAccumulate, TResult&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, !!TAccumulate seed, class System.Linq.Expressions.Expression`1&lt;class System.Func`3&lt;!!TAccumulate, !!TSource, !!TAccumulate&gt;&gt; func, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TAccumulate, !!TResult&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Aggregate(Of TSource, TAccumulate, TResult) (source As IQueryable(Of TSource), seed As TAccumulate, func As Expression(Of Func(Of TAccumulate, TSource, TAccumulate)), selector As Expression(Of Func(Of TAccumulate, TResult))) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TAccumulate, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TResult Aggregate(System::Linq::IQueryable&lt;TSource&gt; ^ source, TAccumulate seed, System::Linq::Expressions::Expression&lt;Func&lt;TAccumulate, TSource, TAccumulate&gt; ^&gt; ^ func, System::Linq::Expressions::Expression&lt;Func&lt;TAccumulate, TResult&gt; ^&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Aggregate : System.Linq.IQueryable&lt;'Source&gt; * 'Accumulate * System.Linq.Expressions.Expression&lt;Func&lt;'Accumulate, 'Source, 'Accumulate&gt;&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Accumulate, 'Result&gt;&gt; -&gt; 'Result" Usage="System.Linq.Queryable.Aggregate (source, seed, func, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TAccumulate" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="seed" Type="TAccumulate" />
        <Parameter Name="func" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TAccumulate,TSource,TAccumulate&gt;&gt;" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TAccumulate,TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-151"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-151">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TAccumulate"><span data-ttu-id="a43ad-152">累積值的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-152">The type of the accumulator value.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="a43ad-153">結果值的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-153">The type of the resulting value.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-154">所要彙總的序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-154">A sequence to aggregate over.</span></span></param>
        <param name="seed"><span data-ttu-id="a43ad-155">初始累積值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-155">The initial accumulator value.</span></span></param>
        <param name="func"><span data-ttu-id="a43ad-156">要在每個項目上叫用的累加函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-156">An accumulator function to invoke on each element.</span></span></param>
        <param name="selector"><span data-ttu-id="a43ad-157">用來將最終累加值轉換成結果值的函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-157">A function to transform the final accumulator value into the result value.</span></span></param>
        <summary><span data-ttu-id="a43ad-158">將累加函式套用到序列上。</span><span class="sxs-lookup"><span data-stu-id="a43ad-158">Applies an accumulator function over a sequence.</span></span> <span data-ttu-id="a43ad-159">使用指定的值做為初始累加值，並使用指定的函式來選取結果值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-159">The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.</span></span></summary>
        <returns><span data-ttu-id="a43ad-160">轉換後的最終累加值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-160">The transformed final accumulator value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-161">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-161">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-162">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-162">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-163"><xref:System.Linq.Queryable.Aggregate%60%603%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Aggregate%60%603%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-163">The <xref:System.Linq.Queryable.Aggregate%60%603%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Aggregate%60%603%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-164">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-164">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-165">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Aggregate%60%603%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-165">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Aggregate%60%603%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-166">預期的行為是指定的函式， `func`，套用至每個來源序列和累積的值會傳回值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-166">The expected behavior is that the specified function, `func`, is applied to each value in the source sequence and the accumulated value is returned.</span></span> <span data-ttu-id="a43ad-167">`seed`參數會作為種子值的累積的值，對應中的第一個參數`func`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-167">The `seed` parameter is used as the seed value for the accumulated value, which corresponds to the first parameter in `func`.</span></span> <span data-ttu-id="a43ad-168">最終累積的值會傳遞至`selector`來取得結果值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-168">The final accumulated value is passed to `selector` to obtain the result value.</span></span>  
  
 <span data-ttu-id="a43ad-169">若要簡化常見的彙總作業，一組標準查詢運算子，也包含兩個計數的方法：<xref:System.Linq.Queryable.Count%2A>並<xref:System.Linq.Queryable.LongCount%2A>，和四個數值彙總方法，也就是<xref:System.Linq.Queryable.Max%2A>， <xref:System.Linq.Queryable.Min%2A>， <xref:System.Linq.Queryable.Sum%2A>，和<xref:System.Linq.Queryable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="a43ad-169">To simplify common aggregation operations, the set of standard query operators also includes two counting methods, <xref:System.Linq.Queryable.Count%2A> and <xref:System.Linq.Queryable.LongCount%2A>, and four numeric aggregation methods, namely <xref:System.Linq.Queryable.Max%2A>, <xref:System.Linq.Queryable.Min%2A>, <xref:System.Linq.Queryable.Sum%2A>, and <xref:System.Linq.Queryable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-170">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Aggregate%60%603%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%29>来套用的累加函式和結果選取器。</span><span class="sxs-lookup"><span data-stu-id="a43ad-170">The following code example demonstrates how to use <xref:System.Linq.Queryable.Aggregate%60%603%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%29> to apply an accumulator function and a result selector.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#3)]
 [!code-vb[System.Linq.Queryable#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-171"><paramref name="source" />、<paramref name="func" /> 或 <paramref name="selector" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-171"><paramref name="source" /> or <paramref name="func" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="All&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool All&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool All&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function All(Of TSource) (source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean))) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool All(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, bool&gt; ^&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member All : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, bool&gt;&gt; -&gt; bool" Usage="System.Linq.Queryable.All (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-172"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-172">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-173">要測試其項目是否符合條件的序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-173">A sequence whose elements to test for a condition.</span></span></param>
        <param name="predicate"><span data-ttu-id="a43ad-174">用來測試每個項目是否符合條件的函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-174">A function to test each element for a condition.</span></span></param>
        <summary><span data-ttu-id="a43ad-175">判斷序列的所有項目是否全都符合條件。</span><span class="sxs-lookup"><span data-stu-id="a43ad-175">Determines whether all the elements of a sequence satisfy a condition.</span></span></summary>
        <returns><span data-ttu-id="a43ad-176">如果來源序列的每個項目都通過以指定之述詞 (Predicate) 進行的測試，或序列是空的，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-176"><see langword="true" /> if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-177">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-177">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-178">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-178">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-179"><xref:System.Linq.Queryable.All%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.All%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-179">The <xref:System.Linq.Queryable.All%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.All%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-180">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-180">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-181">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.All%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29>取決於實作`source`參數的型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-181">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.All%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the `source` parameter's type.</span></span> <span data-ttu-id="a43ad-182">預期的行為是，它會判斷如果要將所有中的項目`source`滿足的條件`predicate`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-182">The expected behavior is that it determines if all the elements in `source` satisfy the condition in `predicate`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-183">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.All%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29>來判斷序列中的所有項目是否全都符合條件。</span><span class="sxs-lookup"><span data-stu-id="a43ad-183">The following code example demonstrates how to use <xref:System.Linq.Queryable.All%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> to determine whether all the elements in a sequence satisfy a condition.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#4)]
 [!code-vb[System.Linq.Queryable#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#4)]  
  
 <span data-ttu-id="a43ad-184">布林值，<xref:System.Linq.Queryable.All%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29>方法傳回的述詞通常會用於`where`子句 (`Where`子句在 Visual Basic 中的) 或直接呼叫<xref:System.Linq.Queryable.Where%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-184">The Boolean value that the <xref:System.Linq.Queryable.All%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method returns is typically used in the predicate of a `where` clause (`Where` clause in Visual Basic) or a direct call to the <xref:System.Linq.Queryable.Where%2A> method.</span></span> <span data-ttu-id="a43ad-185">下列範例示範這個用法`All`方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-185">The following example demonstrates this use of the `All` method.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#134](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#134)]
 [!code-vb[System.Linq.Queryable#134](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#134)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-186"><paramref name="source" /> 或 <paramref name="predicate" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-186"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Any&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a43ad-187">判斷 <see cref="T:System.Linq.IQueryable`1" /> 序列的任何項目是否存在或符合條件。</span><span class="sxs-lookup"><span data-stu-id="a43ad-187">Determines whether any element of an <see cref="T:System.Linq.IQueryable`1" /> sequence exists or satisfies a condition.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Any&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool Any&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Any&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Any(Of TSource) (source As IQueryable(Of TSource)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Any(System::Linq::IQueryable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Any : System.Linq.IQueryable&lt;'Source&gt; -&gt; bool" Usage="System.Linq.Queryable.Any source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-188"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-188">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-189">要檢查是否為空白的序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-189">A sequence to check for being empty.</span></span></param>
        <summary><span data-ttu-id="a43ad-190">判斷序列是否包含任何項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-190">Determines whether a sequence contains any elements.</span></span></summary>
        <returns><span data-ttu-id="a43ad-191">如果來源序列包含任何項目，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-191"><see langword="true" /> if the source sequence contains any elements; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-192"><xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-192">The <xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-193">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-193">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-194">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-194">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-195">預期的行為是，它會判斷如果`source`包含任何項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-195">The expected behavior is that it determines if `source` contains any elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-196">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>來判斷序列是否包含任何項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-196">The following code example demonstrates how to use <xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> to determine whether a sequence contains any elements.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#5)]
 [!code-vb[System.Linq.Queryable#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#5)]  
  
 <span data-ttu-id="a43ad-197">布林值，<xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>方法傳回的述詞通常會用於`where`子句 (`Where`子句在 Visual Basic 中的) 或直接呼叫<xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29>方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-197">The Boolean value that the <xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method returns is typically used in the predicate of a `where` clause (`Where` clause in Visual Basic) or a direct call to the <xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method.</span></span> <span data-ttu-id="a43ad-198">下列範例示範這個用法`Any`方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-198">The following example demonstrates this use of the `Any` method.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#135](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#135)]
 [!code-vb[System.Linq.Queryable#135](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#135)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-199"><paramref name="source" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-199"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Any&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool Any&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Any&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Any(Of TSource) (source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean))) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Any(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, bool&gt; ^&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member Any : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, bool&gt;&gt; -&gt; bool" Usage="System.Linq.Queryable.Any (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-200"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-200">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-201">要測試其項目是否符合條件的序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-201">A sequence whose elements to test for a condition.</span></span></param>
        <param name="predicate"><span data-ttu-id="a43ad-202">用來測試每個項目是否符合條件的函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-202">A function to test each element for a condition.</span></span></param>
        <summary><span data-ttu-id="a43ad-203">判斷序列的任何項目是否符合條件。</span><span class="sxs-lookup"><span data-stu-id="a43ad-203">Determines whether any element of a sequence satisfies a condition.</span></span></summary>
        <returns><span data-ttu-id="a43ad-204">如果來源序列中的任何項目通過以指定之述詞進行的測試，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-204"><see langword="true" /> if any elements in the source sequence pass the test in the specified predicate; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-205">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-205">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-206">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-206">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-207"><xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-207">The <xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-208">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-208">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-209">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-209">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-210">預期的行為是，它會決定如果有任何項目的`source`滿足所指定的條件`predicate`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-210">The expected behavior is that it determines if any of the elements of `source` satisfy the condition specified by `predicate`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-211">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29>來判斷序列中的任何項目是否符合條件。</span><span class="sxs-lookup"><span data-stu-id="a43ad-211">The following code example demonstrates how to use <xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> to determine whether any element in a sequence satisfies a condition.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#6)]
 [!code-vb[System.Linq.Queryable#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-212"><paramref name="source" /> 或 <paramref name="predicate" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-212"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Append&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; Append&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, TSource element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TSource&gt; Append&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, !!TSource element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Append``1(System.Linq.IQueryable{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Append(Of TSource) (source As IQueryable(Of TSource), element As TSource) As IQueryable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable&lt;TSource&gt; ^ Append(System::Linq::IQueryable&lt;TSource&gt; ^ source, TSource element);" />
      <MemberSignature Language="F#" Value="static member Append : System.Linq.IQueryable&lt;'Source&gt; * 'Source -&gt; System.Linq.IQueryable&lt;'Source&gt;" Usage="System.Linq.Queryable.Append (source, element)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="element" Type="TSource" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">To be added.</typeparam>
        <param name="source">To be added.</param>
        <param name="element">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsQueryable">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable AsQueryable (this System.Collections.IEnumerable source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable AsQueryable(class System.Collections.IEnumerable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsQueryable (source As IEnumerable) As IQueryable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable ^ AsQueryable(System::Collections::IEnumerable ^ source);" />
      <MemberSignature Language="F#" Value="static member AsQueryable : System.Collections.IEnumerable -&gt; System.Linq.IQueryable" Usage="System.Linq.Queryable.AsQueryable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.IEnumerable" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="a43ad-213">所要轉換的序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-213">A sequence to convert.</span></span></param>
        <summary><span data-ttu-id="a43ad-214">將 <see cref="T:System.Collections.IEnumerable" /> 轉換成 <see cref="T:System.Linq.IQueryable" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-214">Converts an <see cref="T:System.Collections.IEnumerable" /> to an <see cref="T:System.Linq.IQueryable" />.</span></span></summary>
        <returns><span data-ttu-id="a43ad-215">代表輸入序列的 <see cref="T:System.Linq.IQueryable" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-215">An <see cref="T:System.Linq.IQueryable" /> that represents the input sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-216">如果類型`source`會實作<xref:System.Linq.IQueryable%601>，<xref:System.Linq.Queryable.AsQueryable%28System.Collections.IEnumerable%29>會直接傳回。</span><span class="sxs-lookup"><span data-stu-id="a43ad-216">If the type of `source` implements <xref:System.Linq.IQueryable%601>, <xref:System.Linq.Queryable.AsQueryable%28System.Collections.IEnumerable%29> returns it directly.</span></span> <span data-ttu-id="a43ad-217">否則，它會傳回<xref:System.Linq.IQueryable%601>藉由呼叫的對等查詢運算子方法，在執行查詢<xref:System.Linq.Enumerable>而不是在<xref:System.Linq.Queryable>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-217">Otherwise, it returns an <xref:System.Linq.IQueryable%601> that executes queries by calling the equivalent query operator methods in <xref:System.Linq.Enumerable> instead of those in <xref:System.Linq.Queryable>.</span></span>  
  
 <span data-ttu-id="a43ad-218">這個方法會假設`source`會實作<xref:System.Collections.Generic.IEnumerable%601>某些`T`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-218">This method assumes that `source` implements <xref:System.Collections.Generic.IEnumerable%601> for some `T`.</span></span> <span data-ttu-id="a43ad-219">在執行階段，則結果會是型別<xref:System.Linq.IQueryable%601>而言，同一個`T`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-219">At runtime, the result is of type <xref:System.Linq.IQueryable%601> for the same `T`.</span></span> <span data-ttu-id="a43ad-220">此方法相當實用動態案例中，當您無法以靜態方式知道的型別`T`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-220">This method is useful in dynamic scenarios when you do not statically know the type of `T`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a43ad-221"><paramref name="source" /> 不會針對某些 <paramref name="T" /> 實作 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-221"><paramref name="source" /> does not implement <see cref="T:System.Collections.Generic.IEnumerable`1" /> for some <paramref name="T" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-222"><paramref name="source" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-222"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AsQueryable&lt;TElement&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TElement&gt; AsQueryable&lt;TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TElement&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TElement&gt; AsQueryable&lt;TElement&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TElement&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsQueryable(Of TElement) (source As IEnumerable(Of TElement)) As IQueryable(Of TElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TElement&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable&lt;TElement&gt; ^ AsQueryable(System::Collections::Generic::IEnumerable&lt;TElement&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member AsQueryable : seq&lt;'Element&gt; -&gt; System.Linq.IQueryable&lt;'Element&gt;" Usage="System.Linq.Queryable.AsQueryable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TElement&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TElement"><span data-ttu-id="a43ad-223"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-223">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-224">所要轉換的序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-224">A sequence to convert.</span></span></param>
        <summary><span data-ttu-id="a43ad-225">將泛型 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 轉換成泛型 <see cref="T:System.Linq.IQueryable`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-225">Converts a generic <see cref="T:System.Collections.Generic.IEnumerable`1" /> to a generic <see cref="T:System.Linq.IQueryable`1" />.</span></span></summary>
        <returns><span data-ttu-id="a43ad-226">代表輸入序列的 <see cref="T:System.Linq.IQueryable`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-226">An <see cref="T:System.Linq.IQueryable`1" /> that represents the input sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-227">如果類型`source`會實作<xref:System.Linq.IQueryable%601>，<xref:System.Linq.Queryable.AsQueryable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>會直接傳回。</span><span class="sxs-lookup"><span data-stu-id="a43ad-227">If the type of `source` implements <xref:System.Linq.IQueryable%601>, <xref:System.Linq.Queryable.AsQueryable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> returns it directly.</span></span> <span data-ttu-id="a43ad-228">否則，它會傳回<xref:System.Linq.IQueryable%601>藉由呼叫的對等查詢運算子方法，在執行查詢<xref:System.Linq.Enumerable>而不是在<xref:System.Linq.Queryable>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-228">Otherwise, it returns an <xref:System.Linq.IQueryable%601> that executes queries by calling the equivalent query operator methods in <xref:System.Linq.Enumerable> instead of those in <xref:System.Linq.Queryable>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-229">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.AsQueryable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>要轉換<xref:System.Collections.Generic.IEnumerable%601>至<xref:System.Linq.IQueryable%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-229">The following code example demonstrates how to use <xref:System.Linq.Queryable.AsQueryable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to convert an <xref:System.Collections.Generic.IEnumerable%601> to an <xref:System.Linq.IQueryable%601>.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#125](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#125)]
 [!code-vb[System.Linq.Queryable#125](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#125)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-230"><paramref name="source" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-230"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Average">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a43ad-231">計算數值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-231">Computes the average of a sequence of numeric values.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static decimal Average (this System.Linq.IQueryable&lt;decimal&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Average(class System.Linq.IQueryable`1&lt;valuetype System.Decimal&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IQueryable(Of Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Average(System::Linq::IQueryable&lt;System::Decimal&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : System.Linq.IQueryable&lt;decimal&gt; -&gt; decimal" Usage="System.Linq.Queryable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Decimal&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="a43ad-232">要計算平均值的 <see cref="T:System.Decimal" /> 值序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-232">A sequence of <see cref="T:System.Decimal" /> values to calculate the average of.</span></span></param>
        <summary><span data-ttu-id="a43ad-233">計算 <see cref="T:System.Decimal" /> 值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-233">Computes the average of a sequence of <see cref="T:System.Decimal" /> values.</span></span></summary>
        <returns><span data-ttu-id="a43ad-234">值序列的平均。</span><span class="sxs-lookup"><span data-stu-id="a43ad-234">The average of the sequence of values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-235"><xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Decimal%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Decimal%7D%29>本身。</span><span class="sxs-lookup"><span data-stu-id="a43ad-235">The <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Decimal%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Decimal%7D%29> itself.</span></span> <span data-ttu-id="a43ad-236">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-236">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-237">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Decimal%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-237">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Decimal%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-238">預期的行為是，它會計算中值的平均值`source`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-238">The expected behavior is that it calculates the average of the values in `source`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-239">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29>來計算的值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-239">The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29> to calculate the average of a sequence of values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Queryable#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#8)]
 [!code-vb[System.Linq.Queryable#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-240"><paramref name="source" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-240"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a43ad-241"><paramref name="source" /> 沒有包含任何項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-241"><paramref name="source" /> contains no elements.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static double Average (this System.Linq.IQueryable&lt;double&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average(class System.Linq.IQueryable`1&lt;float64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IQueryable(Of Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Average(System::Linq::IQueryable&lt;double&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : System.Linq.IQueryable&lt;double&gt; -&gt; double" Usage="System.Linq.Queryable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Double&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="a43ad-242">要計算平均值的 <see cref="T:System.Double" /> 值序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-242">A sequence of <see cref="T:System.Double" /> values to calculate the average of.</span></span></param>
        <summary><span data-ttu-id="a43ad-243">計算 <see cref="T:System.Double" /> 值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-243">Computes the average of a sequence of <see cref="T:System.Double" /> values.</span></span></summary>
        <returns><span data-ttu-id="a43ad-244">值序列的平均。</span><span class="sxs-lookup"><span data-stu-id="a43ad-244">The average of the sequence of values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-245"><xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Double%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Double%7D%29>本身。</span><span class="sxs-lookup"><span data-stu-id="a43ad-245">The <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Double%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Double%7D%29> itself.</span></span> <span data-ttu-id="a43ad-246">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-246">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-247">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Double%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-247">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Double%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-248">預期的行為是，它會計算中值的平均值`source`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-248">The expected behavior is that it calculates the average of the values in `source`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-249">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29>來計算的值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-249">The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29> to calculate the average of a sequence of values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Queryable#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#8)]
 [!code-vb[System.Linq.Queryable#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-250"><paramref name="source" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-250"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a43ad-251"><paramref name="source" /> 沒有包含任何項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-251"><paramref name="source" /> contains no elements.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static double Average (this System.Linq.IQueryable&lt;int&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average(class System.Linq.IQueryable`1&lt;int32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IQueryable(Of Integer)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Average(System::Linq::IQueryable&lt;int&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : System.Linq.IQueryable&lt;int&gt; -&gt; double" Usage="System.Linq.Queryable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Int32&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="a43ad-252">要計算平均值的 <see cref="T:System.Int32" /> 值序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-252">A sequence of <see cref="T:System.Int32" /> values to calculate the average of.</span></span></param>
        <summary><span data-ttu-id="a43ad-253">計算 <see cref="T:System.Int32" /> 值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-253">Computes the average of a sequence of <see cref="T:System.Int32" /> values.</span></span></summary>
        <returns><span data-ttu-id="a43ad-254">值序列的平均。</span><span class="sxs-lookup"><span data-stu-id="a43ad-254">The average of the sequence of values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-255"><xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29>本身。</span><span class="sxs-lookup"><span data-stu-id="a43ad-255">The <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29> itself.</span></span> <span data-ttu-id="a43ad-256">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-256">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-257">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-257">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-258">預期的行為是，它會計算中值的平均值`source`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-258">The expected behavior is that it calculates the average of the values in `source`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-259">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29>來計算的值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-259">The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29> to calculate the average of a sequence of values.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#8)]
 [!code-vb[System.Linq.Queryable#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-260"><paramref name="source" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-260"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a43ad-261"><paramref name="source" /> 沒有包含任何項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-261"><paramref name="source" /> contains no elements.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static double Average (this System.Linq.IQueryable&lt;long&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average(class System.Linq.IQueryable`1&lt;int64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IQueryable(Of Long)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Average(System::Linq::IQueryable&lt;long&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : System.Linq.IQueryable&lt;int64&gt; -&gt; double" Usage="System.Linq.Queryable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Int64&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="a43ad-262">要計算平均值的 <see cref="T:System.Int64" /> 值序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-262">A sequence of <see cref="T:System.Int64" /> values to calculate the average of.</span></span></param>
        <summary><span data-ttu-id="a43ad-263">計算 <see cref="T:System.Int64" /> 值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-263">Computes the average of a sequence of <see cref="T:System.Int64" /> values.</span></span></summary>
        <returns><span data-ttu-id="a43ad-264">值序列的平均。</span><span class="sxs-lookup"><span data-stu-id="a43ad-264">The average of the sequence of values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-265"><xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int64%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int64%7D%29>本身。</span><span class="sxs-lookup"><span data-stu-id="a43ad-265">The <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int64%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int64%7D%29> itself.</span></span> <span data-ttu-id="a43ad-266">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-266">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-267">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int64%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-267">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int64%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-268">預期的行為是，它會計算中值的平均值`source`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-268">The expected behavior is that it calculates the average of the values in `source`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-269">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29>來計算的值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-269">The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29> to calculate the average of a sequence of values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Queryable#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#8)]
 [!code-vb[System.Linq.Queryable#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-270"><paramref name="source" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-270"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a43ad-271"><paramref name="source" /> 沒有包含任何項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-271"><paramref name="source" /> contains no elements.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Average (this System.Linq.IQueryable&lt;Nullable&lt;decimal&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Average(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IQueryable(Of Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Average(System::Linq::IQueryable&lt;Nullable&lt;System::Decimal&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : System.Linq.IQueryable&lt;Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Queryable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="a43ad-272">要計算其平均值的可為 Null 之 <see cref="T:System.Decimal" /> 值的序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-272">A sequence of nullable <see cref="T:System.Decimal" /> values to calculate the average of.</span></span></param>
        <summary><span data-ttu-id="a43ad-273">計算可為 Null 之 <see cref="T:System.Decimal" /> 值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-273">Computes the average of a sequence of nullable <see cref="T:System.Decimal" /> values.</span></span></summary>
        <returns><span data-ttu-id="a43ad-274">值序列的平均值，或者，如果來源序列是空的或只包含 <see langword="null" /> 值，則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-274">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only <see langword="null" /> values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-275"><xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29>本身。</span><span class="sxs-lookup"><span data-stu-id="a43ad-275">The <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> itself.</span></span> <span data-ttu-id="a43ad-276">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-276">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-277">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-277">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-278">預期的行為是，它會計算中值的平均值`source`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-278">The expected behavior is that it calculates the average of the values in `source`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-279">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29>來計算的值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-279">The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> to calculate the average of a sequence of values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Queryable#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#12)]
 [!code-vb[System.Linq.Queryable#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-280"><paramref name="source" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-280"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average (this System.Linq.IQueryable&lt;Nullable&lt;double&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IQueryable(Of Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Average(System::Linq::IQueryable&lt;Nullable&lt;double&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : System.Linq.IQueryable&lt;Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Queryable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="a43ad-281">要計算其平均值的可為 Null 之 <see cref="T:System.Double" /> 值的序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-281">A sequence of nullable <see cref="T:System.Double" /> values to calculate the average of.</span></span></param>
        <summary><span data-ttu-id="a43ad-282">計算可為 Null 之 <see cref="T:System.Double" /> 值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-282">Computes the average of a sequence of nullable <see cref="T:System.Double" /> values.</span></span></summary>
        <returns><span data-ttu-id="a43ad-283">值序列的平均值，或者，如果來源序列是空的或只包含 <see langword="null" /> 值，則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-283">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only <see langword="null" /> values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-284"><xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29>本身。</span><span class="sxs-lookup"><span data-stu-id="a43ad-284">The <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> itself.</span></span> <span data-ttu-id="a43ad-285">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-285">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-286">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-286">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-287">預期的行為是，它會計算中值的平均值`source`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-287">The expected behavior is that it calculates the average of the values in `source`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-288">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29>來計算的值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-288">The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> to calculate the average of a sequence of values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Queryable#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#12)]
 [!code-vb[System.Linq.Queryable#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-289"><paramref name="source" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-289"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average (this System.Linq.IQueryable&lt;Nullable&lt;int&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IQueryable(Of Nullable(Of Integer))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Average(System::Linq::IQueryable&lt;Nullable&lt;int&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : System.Linq.IQueryable&lt;Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Queryable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="a43ad-290">要計算其平均值的可為 Null 之 <see cref="T:System.Int32" /> 值的序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-290">A sequence of nullable <see cref="T:System.Int32" /> values to calculate the average of.</span></span></param>
        <summary><span data-ttu-id="a43ad-291">計算可為 Null 之 <see cref="T:System.Int32" /> 值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-291">Computes the average of a sequence of nullable <see cref="T:System.Int32" /> values.</span></span></summary>
        <returns><span data-ttu-id="a43ad-292">值序列的平均值，或者，如果來源序列是空的或只包含 <see langword="null" /> 值，則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-292">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only <see langword="null" /> values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-293"><xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29>本身。</span><span class="sxs-lookup"><span data-stu-id="a43ad-293">The <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> itself.</span></span> <span data-ttu-id="a43ad-294">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-294">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-295">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-295">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-296">預期的行為是，它會計算中值的平均值`source`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-296">The expected behavior is that it calculates the average of the values in `source`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-297">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29>來計算的值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-297">The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> to calculate the average of a sequence of values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Queryable#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#12)]
 [!code-vb[System.Linq.Queryable#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-298"><paramref name="source" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-298"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average (this System.Linq.IQueryable&lt;Nullable&lt;long&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IQueryable(Of Nullable(Of Long))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Average(System::Linq::IQueryable&lt;Nullable&lt;long&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : System.Linq.IQueryable&lt;Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Queryable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="a43ad-299">要計算其平均值的可為 Null 之 <see cref="T:System.Int64" /> 值的序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-299">A sequence of nullable <see cref="T:System.Int64" /> values to calculate the average of.</span></span></param>
        <summary><span data-ttu-id="a43ad-300">計算可為 Null 之 <see cref="T:System.Int64" /> 值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-300">Computes the average of a sequence of nullable <see cref="T:System.Int64" /> values.</span></span></summary>
        <returns><span data-ttu-id="a43ad-301">值序列的平均值，或者，如果來源序列是空的或只包含 <see langword="null" /> 值，則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-301">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only <see langword="null" /> values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-302"><xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29>本身。</span><span class="sxs-lookup"><span data-stu-id="a43ad-302">The <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> itself.</span></span> <span data-ttu-id="a43ad-303">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-303">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-304">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-304">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-305">預期的行為是，它會計算中值的平均值`source`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-305">The expected behavior is that it calculates the average of the values in `source`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-306">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29>來計算的值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-306">The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> to calculate the average of a sequence of values.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#12)]
 [!code-vb[System.Linq.Queryable#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-307"><paramref name="source" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-307"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Average (this System.Linq.IQueryable&lt;Nullable&lt;float&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Average(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IQueryable(Of Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Average(System::Linq::IQueryable&lt;Nullable&lt;float&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : System.Linq.IQueryable&lt;Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Queryable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="a43ad-308">要計算其平均值的可為 Null 之 <see cref="T:System.Single" /> 值的序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-308">A sequence of nullable <see cref="T:System.Single" /> values to calculate the average of.</span></span></param>
        <summary><span data-ttu-id="a43ad-309">計算可為 Null 之 <see cref="T:System.Single" /> 值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-309">Computes the average of a sequence of nullable <see cref="T:System.Single" /> values.</span></span></summary>
        <returns><span data-ttu-id="a43ad-310">值序列的平均值，或者，如果來源序列是空的或只包含 <see langword="null" /> 值，則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-310">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only <see langword="null" /> values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-311"><xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29>本身。</span><span class="sxs-lookup"><span data-stu-id="a43ad-311">The <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> itself.</span></span> <span data-ttu-id="a43ad-312">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-312">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-313">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-313">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-314">預期的行為是，它會計算中值的平均值`source`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-314">The expected behavior is that it calculates the average of the values in `source`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-315">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29>來計算的值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-315">The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> to calculate the average of a sequence of values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Queryable#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#12)]
 [!code-vb[System.Linq.Queryable#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-316"><paramref name="source" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-316"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static float Average (this System.Linq.IQueryable&lt;float&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Average(class System.Linq.IQueryable`1&lt;float32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IQueryable(Of Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Average(System::Linq::IQueryable&lt;float&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : System.Linq.IQueryable&lt;single&gt; -&gt; single" Usage="System.Linq.Queryable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Single&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="a43ad-317">要計算平均值的 <see cref="T:System.Single" /> 值序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-317">A sequence of <see cref="T:System.Single" /> values to calculate the average of.</span></span></param>
        <summary><span data-ttu-id="a43ad-318">計算 <see cref="T:System.Single" /> 值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-318">Computes the average of a sequence of <see cref="T:System.Single" /> values.</span></span></summary>
        <returns><span data-ttu-id="a43ad-319">值序列的平均。</span><span class="sxs-lookup"><span data-stu-id="a43ad-319">The average of the sequence of values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-320"><xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Single%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Single%7D%29>本身。</span><span class="sxs-lookup"><span data-stu-id="a43ad-320">The <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Single%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Single%7D%29> itself.</span></span> <span data-ttu-id="a43ad-321">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-321">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-322">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Single%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-322">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Single%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-323">預期的行為是，它會計算中值的平均值`source`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-323">The expected behavior is that it calculates the average of the values in `source`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-324">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29>來計算的值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-324">The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29> to calculate the average of a sequence of values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Queryable#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#8)]
 [!code-vb[System.Linq.Queryable#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-325"><paramref name="source" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-325"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a43ad-326"><paramref name="source" /> 沒有包含任何項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-326"><paramref name="source" /> contains no elements.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static decimal Average&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,decimal&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Average&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Decimal&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Decimal))) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Average(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, System::Decimal&gt; ^&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, decimal&gt;&gt; -&gt; decimal" Usage="System.Linq.Queryable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Decimal&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-327"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-327">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-328">用來計算平均值的值序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-328">A sequence of values that are used to calculate an average.</span></span></param>
        <param name="selector"><span data-ttu-id="a43ad-329">要套用到每個項目的投影函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-329">A projection function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="a43ad-330">計算在輸入序列中各項目上叫用投影函式後所取得之 <see cref="T:System.Decimal" /> 值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-330">Computes the average of a sequence of <see cref="T:System.Decimal" /> values that is obtained by invoking a projection function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="a43ad-331">值序列的平均。</span><span class="sxs-lookup"><span data-stu-id="a43ad-331">The average of the sequence of values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-332">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-332">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-333">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-333">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-334"><xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-334">The <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-335">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-335">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-336">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-336">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-337">預期的行為是，它會計算中值的平均值`source`叫用後`selector`上每個值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-337">The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-338">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29>來計算平均值<xref:System.String>類型的值序列中長度<xref:System.String>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-338">The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> to calculate the average <xref:System.String> length in a sequence of values of type <xref:System.String>.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Queryable#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#18)]
 [!code-vb[System.Linq.Queryable#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-339"><paramref name="source" /> 或 <paramref name="selector" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-339"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a43ad-340"><paramref name="source" /> 沒有包含任何項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-340"><paramref name="source" /> contains no elements.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static double Average&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,double&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, float64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Double))) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Average(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, double&gt; ^&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, double&gt;&gt; -&gt; double" Usage="System.Linq.Queryable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Double&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-341"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-341">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-342">要計算平均值的值序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-342">A sequence of values to calculate the average of.</span></span></param>
        <param name="selector"><span data-ttu-id="a43ad-343">要套用到每個項目的投影函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-343">A projection function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="a43ad-344">計算在輸入序列中各項目上叫用投影函式後所取得之 <see cref="T:System.Double" /> 值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-344">Computes the average of a sequence of <see cref="T:System.Double" /> values that is obtained by invoking a projection function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="a43ad-345">值序列的平均。</span><span class="sxs-lookup"><span data-stu-id="a43ad-345">The average of the sequence of values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-346">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-346">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-347">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-347">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-348"><xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-348">The <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-349">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-349">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-350">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-350">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-351">預期的行為是，它會計算中值的平均值`source`叫用後`selector`上每個值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-351">The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-352">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29>來計算平均值<xref:System.String>類型的值序列中長度<xref:System.String>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-352">The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> to calculate the average <xref:System.String> length in a sequence of values of type <xref:System.String>.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Queryable#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#18)]
 [!code-vb[System.Linq.Queryable#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-353"><paramref name="source" /> 或 <paramref name="selector" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-353"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a43ad-354"><paramref name="source" /> 沒有包含任何項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-354"><paramref name="source" /> contains no elements.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static double Average&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,int&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, int32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Integer))) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Average(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, int&gt; ^&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, int&gt;&gt; -&gt; double" Usage="System.Linq.Queryable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Int32&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-355"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-355">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-356">要計算平均值的值序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-356">A sequence of values to calculate the average of.</span></span></param>
        <param name="selector"><span data-ttu-id="a43ad-357">要套用到每個項目的投影函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-357">A projection function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="a43ad-358">計算在輸入序列中各項目上叫用投影函式後所取得之 <see cref="T:System.Int32" /> 值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-358">Computes the average of a sequence of <see cref="T:System.Int32" /> values that is obtained by invoking a projection function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="a43ad-359">值序列的平均。</span><span class="sxs-lookup"><span data-stu-id="a43ad-359">The average of the sequence of values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-360">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-360">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-361">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-361">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-362"><xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-362">The <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-363">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-363">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-364">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-364">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-365">預期的行為是，它會計算中值的平均值`source`叫用後`selector`上每個值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-365">The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-366">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29>來計算平均值<xref:System.String>類型的值序列中長度<xref:System.String>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-366">The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> to calculate the average <xref:System.String> length in a sequence of values of type <xref:System.String>.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#18)]
 [!code-vb[System.Linq.Queryable#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-367"><paramref name="source" /> 或 <paramref name="selector" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-367"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a43ad-368"><paramref name="source" /> 沒有包含任何項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-368"><paramref name="source" /> contains no elements.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static double Average&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,long&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, int64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Long))) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Average(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, long&gt; ^&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, int64&gt;&gt; -&gt; double" Usage="System.Linq.Queryable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Int64&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-369"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-369">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-370">要計算平均值的值序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-370">A sequence of values to calculate the average of.</span></span></param>
        <param name="selector"><span data-ttu-id="a43ad-371">要套用到每個項目的投影函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-371">A projection function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="a43ad-372">計算在輸入序列中各項目上叫用投影函式後所取得之 <see cref="T:System.Int64" /> 值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-372">Computes the average of a sequence of <see cref="T:System.Int64" /> values that is obtained by invoking a projection function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="a43ad-373">值序列的平均。</span><span class="sxs-lookup"><span data-stu-id="a43ad-373">The average of the sequence of values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-374">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-374">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-375">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-375">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-376"><xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-376">The <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-377">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-377">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-378">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-378">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-379">預期的行為是，它會計算中值的平均值`source`叫用後`selector`上每個值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-379">The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-380">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29>來計算平均值<xref:System.String>類型的值序列中長度<xref:System.String>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-380">The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> to calculate the average <xref:System.String> length in a sequence of values of type <xref:System.String>.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Queryable#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#18)]
 [!code-vb[System.Linq.Queryable#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-381"><paramref name="source" /> 或 <paramref name="selector" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-381"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a43ad-382"><paramref name="source" /> 沒有包含任何項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-382"><paramref name="source" /> contains no elements.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Average&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;decimal&gt;&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Average&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Nullable(Of Decimal)))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Average(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, Nullable&lt;System::Decimal&gt;&gt; ^&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;decimal&gt;&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Queryable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-383"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-383">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-384">要計算平均值的值序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-384">A sequence of values to calculate the average of.</span></span></param>
        <param name="selector"><span data-ttu-id="a43ad-385">要套用到每個項目的投影函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-385">A projection function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="a43ad-386">計算在輸入序列中各項目上叫用投影函式後所取得可為 Null 之 <see cref="T:System.Decimal" /> 值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-386">Computes the average of a sequence of nullable <see cref="T:System.Decimal" /> values that is obtained by invoking a projection function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="a43ad-387">值序列的平均值；如果 <paramref name="source" /> 序列是空的或是只包含 <see langword="null" /> 值，則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-387">The average of the sequence of values, or <see langword="null" /> if the <paramref name="source" /> sequence is empty or contains only <see langword="null" /> values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-388">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-388">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-389">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-389">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-390"><xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-390">The <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-391">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-391">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-392">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-392">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-393">預期的行為是，它會計算中值的平均值`source`叫用後`selector`上每個值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-393">The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-394">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29>來計算平均值<xref:System.String>類型的值序列中長度<xref:System.String>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-394">The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> to calculate the average <xref:System.String> length in a sequence of values of type <xref:System.String>.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Queryable#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#18)]
 [!code-vb[System.Linq.Queryable#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-395"><paramref name="source" /> 或 <paramref name="selector" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-395"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;double&gt;&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float64&gt;&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Nullable(Of Double)))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Average(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, Nullable&lt;double&gt;&gt; ^&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;double&gt;&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Queryable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-396"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-396">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-397">要計算平均值的值序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-397">A sequence of values to calculate the average of.</span></span></param>
        <param name="selector"><span data-ttu-id="a43ad-398">要套用到每個項目的投影函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-398">A projection function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="a43ad-399">計算在輸入序列中各項目上叫用投影函式後所取得可為 Null 之 <see cref="T:System.Double" /> 值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-399">Computes the average of a sequence of nullable <see cref="T:System.Double" /> values that is obtained by invoking a projection function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="a43ad-400">值序列的平均值；如果 <paramref name="source" /> 序列是空的或是只包含 <see langword="null" /> 值，則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-400">The average of the sequence of values, or <see langword="null" /> if the <paramref name="source" /> sequence is empty or contains only <see langword="null" /> values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-401">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-401">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-402">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-402">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-403"><xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-403">The <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-404">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-404">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-405">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-405">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-406">預期的行為是，它會計算中值的平均值`source`叫用後`selector`上每個值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-406">The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-407">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29>來計算平均值<xref:System.String>類型的值序列中長度<xref:System.String>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-407">The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> to calculate the average <xref:System.String> length in a sequence of values of type <xref:System.String>.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Queryable#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#18)]
 [!code-vb[System.Linq.Queryable#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-408"><paramref name="source" /> 或 <paramref name="selector" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-408"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;int&gt;&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int32&gt;&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Nullable(Of Integer)))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Average(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, Nullable&lt;int&gt;&gt; ^&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;int&gt;&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Queryable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-409"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-409">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-410">要計算平均值的值序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-410">A sequence of values to calculate the average of.</span></span></param>
        <param name="selector"><span data-ttu-id="a43ad-411">要套用到每個項目的投影函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-411">A projection function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="a43ad-412">計算在輸入序列中各項目上叫用投影函式後所取得可為 Null 之 <see cref="T:System.Int32" /> 值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-412">Computes the average of a sequence of nullable <see cref="T:System.Int32" /> values that is obtained by invoking a projection function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="a43ad-413">值序列的平均值；如果 <paramref name="source" /> 序列是空的或是只包含 <see langword="null" /> 值，則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-413">The average of the sequence of values, or <see langword="null" /> if the <paramref name="source" /> sequence is empty or contains only <see langword="null" /> values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-414">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-414">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-415">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-415">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-416"><xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-416">The <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-417">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-417">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-418">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-418">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-419">預期的行為是，它會計算中值的平均值`source`叫用後`selector`上每個值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-419">The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-420">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29>來計算平均值<xref:System.String>類型的值序列中長度<xref:System.String>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-420">The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> to calculate the average <xref:System.String> length in a sequence of values of type <xref:System.String>.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Queryable#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#18)]
 [!code-vb[System.Linq.Queryable#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-421"><paramref name="source" /> 或 <paramref name="selector" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-421"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;long&gt;&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int64&gt;&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Nullable(Of Long)))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Average(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, Nullable&lt;long&gt;&gt; ^&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;int64&gt;&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Queryable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-422"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-422">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-423">要計算平均值的值序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-423">A sequence of values to calculate the average of.</span></span></param>
        <param name="selector"><span data-ttu-id="a43ad-424">要套用到每個項目的投影函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-424">A projection function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="a43ad-425">計算在輸入序列中各項目上叫用投影函式後所取得可為 Null 之 <see cref="T:System.Int64" /> 值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-425">Computes the average of a sequence of nullable <see cref="T:System.Int64" /> values that is obtained by invoking a projection function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="a43ad-426">值序列的平均值；如果 <paramref name="source" /> 序列是空的或是只包含 <see langword="null" /> 值，則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-426">The average of the sequence of values, or <see langword="null" /> if the <paramref name="source" /> sequence is empty or contains only <see langword="null" /> values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-427">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-427">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-428">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-428">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-429"><xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-429">The <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-430">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-430">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-431">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-431">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-432">預期的行為是，它會計算中值的平均值`source`叫用後`selector`上每個值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-432">The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-433">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29>來計算平均值<xref:System.String>類型的值序列中長度<xref:System.String>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-433">The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> to calculate the average <xref:System.String> length in a sequence of values of type <xref:System.String>.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Queryable#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#18)]
 [!code-vb[System.Linq.Queryable#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-434"><paramref name="source" /> 或 <paramref name="selector" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-434"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Average&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;float&gt;&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Average&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float32&gt;&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Nullable(Of Single)))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Average(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, Nullable&lt;float&gt;&gt; ^&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;single&gt;&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Queryable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-435"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-435">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-436">要計算平均值的值序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-436">A sequence of values to calculate the average of.</span></span></param>
        <param name="selector"><span data-ttu-id="a43ad-437">要套用到每個項目的投影函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-437">A projection function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="a43ad-438">計算在輸入序列中各項目上叫用投影函式後所取得可為 Null 之 <see cref="T:System.Single" /> 值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-438">Computes the average of a sequence of nullable <see cref="T:System.Single" /> values that is obtained by invoking a projection function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="a43ad-439">值序列的平均值；如果 <paramref name="source" /> 序列是空的或是只包含 <see langword="null" /> 值，則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-439">The average of the sequence of values, or <see langword="null" /> if the <paramref name="source" /> sequence is empty or contains only <see langword="null" /> values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-440">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-440">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-441">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-441">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-442"><xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-442">The <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-443">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-443">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-444">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-444">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-445">預期的行為是，它會計算中值的平均值`source`叫用後`selector`上每個值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-445">The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-446">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29>來計算平均值<xref:System.String>類型的值序列中長度<xref:System.String>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-446">The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> to calculate the average <xref:System.String> length in a sequence of values of type <xref:System.String>.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Queryable#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#18)]
 [!code-vb[System.Linq.Queryable#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-447"><paramref name="source" /> 或 <paramref name="selector" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-447"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static float Average&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,float&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Average&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, float32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Single))) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Average(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, float&gt; ^&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, single&gt;&gt; -&gt; single" Usage="System.Linq.Queryable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Single&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-448"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-448">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-449">要計算平均值的值序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-449">A sequence of values to calculate the average of.</span></span></param>
        <param name="selector"><span data-ttu-id="a43ad-450">要套用到每個項目的投影函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-450">A projection function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="a43ad-451">計算在輸入序列中各項目上叫用投影函式後所取得之 <see cref="T:System.Single" /> 值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-451">Computes the average of a sequence of <see cref="T:System.Single" /> values that is obtained by invoking a projection function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="a43ad-452">值序列的平均。</span><span class="sxs-lookup"><span data-stu-id="a43ad-452">The average of the sequence of values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-453">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-453">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-454">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-454">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-455"><xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-455">The <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-456">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-456">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-457">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-457">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-458">預期的行為是，它會計算中值的平均值`source`叫用後`selector`上每個值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-458">The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-459">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29>來計算平均值<xref:System.String>類型的值序列中長度<xref:System.String>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-459">The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> to calculate the average <xref:System.String> length in a sequence of values of type <xref:System.String>.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Queryable#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#18)]
 [!code-vb[System.Linq.Queryable#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-460"><paramref name="source" /> 或 <paramref name="selector" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-460"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a43ad-461"><paramref name="source" /> 沒有包含任何項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-461"><paramref name="source" /> contains no elements.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Cast&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TResult&gt; Cast&lt;TResult&gt; (this System.Linq.IQueryable source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TResult&gt; Cast&lt;TResult&gt;(class System.Linq.IQueryable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Cast``1(System.Linq.IQueryable)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Cast(Of TResult) (source As IQueryable) As IQueryable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable&lt;TResult&gt; ^ Cast(System::Linq::IQueryable ^ source);" />
      <MemberSignature Language="F#" Value="static member Cast : System.Linq.IQueryable -&gt; System.Linq.IQueryable&lt;'Result&gt;" Usage="System.Linq.Queryable.Cast source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="a43ad-462">要將 <paramref name="source" /> 之項目轉換成的型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-462">The type to convert the elements of <paramref name="source" /> to.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-463">包含要轉換之項目的 <see cref="T:System.Linq.IQueryable" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-463">The <see cref="T:System.Linq.IQueryable" /> that contains the elements to be converted.</span></span></param>
        <summary><span data-ttu-id="a43ad-464">將 <see cref="T:System.Linq.IQueryable" /> 的項目轉換為指定的型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-464">Converts the elements of an <see cref="T:System.Linq.IQueryable" /> to the specified type.</span></span></summary>
        <returns><span data-ttu-id="a43ad-465"><see cref="T:System.Linq.IQueryable`1" />，包含已轉換成指定之型別的每個來源序列項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-465">An <see cref="T:System.Linq.IQueryable`1" /> that contains each element of the source sequence converted to the specified type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-466"><xref:System.Linq.Queryable.Cast%60%601%28System.Linq.IQueryable%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Cast%60%601%28System.Linq.IQueryable%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-466">The <xref:System.Linq.Queryable.Cast%60%601%28System.Linq.IQueryable%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Cast%60%601%28System.Linq.IQueryable%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-467">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-467">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-468">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Cast%60%601%28System.Linq.IQueryable%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-468">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Cast%60%601%28System.Linq.IQueryable%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-469">預期的行為是，它會將轉換中的值`source`輸入`TResult`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-469">The expected behavior is that it converts the values in `source` to type `TResult`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-470">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Cast%60%601%28System.Linq.IQueryable%29>，將輸入序列中的物件<xref:System.String>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-470">The following code example demonstrates how to use <xref:System.Linq.Queryable.Cast%60%601%28System.Linq.IQueryable%29> to convert objects in a sequence to type <xref:System.String>.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#19)]
 [!code-vb[System.Linq.Queryable#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-471"><paramref name="source" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-471"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="a43ad-472">無法將序列中的項目轉換為型別 <paramref name="TResult" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-472">An element in the sequence cannot be cast to type <paramref name="TResult" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Concat&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; Concat&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source1, System.Collections.Generic.IEnumerable&lt;TSource&gt; source2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TSource&gt; Concat&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source1, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Concat(Of TSource) (source1 As IQueryable(Of TSource), source2 As IEnumerable(Of TSource)) As IQueryable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable&lt;TSource&gt; ^ Concat(System::Linq::IQueryable&lt;TSource&gt; ^ source1, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source2);" />
      <MemberSignature Language="F#" Value="static member Concat : System.Linq.IQueryable&lt;'Source&gt; * seq&lt;'Source&gt; -&gt; System.Linq.IQueryable&lt;'Source&gt;" Usage="System.Linq.Queryable.Concat (source1, source2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source1" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="source2" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-473">輸入序列之項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-473">The type of the elements of the input sequences.</span></span></typeparam>
        <param name="source1"><span data-ttu-id="a43ad-474">要串連的第一個序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-474">The first sequence to concatenate.</span></span></param>
        <param name="source2"><span data-ttu-id="a43ad-475">要串連到第一個序列的序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-475">The sequence to concatenate to the first sequence.</span></span></param>
        <summary><span data-ttu-id="a43ad-476">串連兩個序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-476">Concatenates two sequences.</span></span></summary>
        <returns><span data-ttu-id="a43ad-477"><see cref="T:System.Linq.IQueryable`1" />，其中包含兩個輸入序列的串連項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-477">An <see cref="T:System.Linq.IQueryable`1" /> that contains the concatenated elements of the two input sequences.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-478"><xref:System.Linq.Queryable.Concat%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Concat%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-478">The <xref:System.Linq.Queryable.Concat%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Concat%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-479">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source1`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-479">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source1` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-480">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Concat%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29>之型別的實作而定`source1`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-480">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Concat%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> depends on the implementation of the type of the `source1` parameter.</span></span> <span data-ttu-id="a43ad-481">預期的行為是中的項目`source2`串連的`source1`來建立新的順序。</span><span class="sxs-lookup"><span data-stu-id="a43ad-481">The expected behavior is that the elements in `source2` are concatenated to those of `source1` to create a new sequence.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-482">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Concat%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29>來串連兩個序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-482">The following code example demonstrates how to use <xref:System.Linq.Queryable.Concat%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> to concatenate two sequences.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#20)]
 [!code-vb[System.Linq.Queryable#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-483"><paramref name="source1" /> 或 <paramref name="source2" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-483"><paramref name="source1" /> or <paramref name="source2" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Contains&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a43ad-484">判斷 <see cref="T:System.Linq.IQueryable`1" /> 是否包含指定的項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-484">Determines whether an <see cref="T:System.Linq.IQueryable`1" /> contains a specified element.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Contains&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool Contains&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, TSource item);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Contains&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, !!TSource item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Contains(Of TSource) (source As IQueryable(Of TSource), item As TSource) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Contains(System::Linq::IQueryable&lt;TSource&gt; ^ source, TSource item);" />
      <MemberSignature Language="F#" Value="static member Contains : System.Linq.IQueryable&lt;'Source&gt; * 'Source -&gt; bool" Usage="System.Linq.Queryable.Contains (source, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="item" Type="TSource" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-485"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-485">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-486">要在其中尋找 <paramref name="item" /> 的 <see cref="T:System.Linq.IQueryable`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-486">An <see cref="T:System.Linq.IQueryable`1" /> in which to locate <paramref name="item" />.</span></span></param>
        <param name="item"><span data-ttu-id="a43ad-487">要在序列中尋找的物件。</span><span class="sxs-lookup"><span data-stu-id="a43ad-487">The object to locate in the sequence.</span></span></param>
        <summary><span data-ttu-id="a43ad-488">使用預設的相等比較子 (Comparer) 來判斷序列是否包含指定的項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-488">Determines whether a sequence contains a specified element by using the default equality comparer.</span></span></summary>
        <returns><span data-ttu-id="a43ad-489">如果輸入序列包含具有指定值的項目，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-489"><see langword="true" /> if the input sequence contains an element that has the specified value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-490"><xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-490">The <xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-491">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-491">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-492">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-492">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-493">預期的行為是，它會判斷如果`source`包含`item`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-493">The expected behavior is that it determines if `source` contains `item`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-494">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29>來判斷序列是否包含特定項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-494">The following code example demonstrates how to use <xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> to determine whether a sequence contains a specific element.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#21)]
 [!code-vb[System.Linq.Queryable#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-495"><paramref name="source" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-495"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Contains&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool Contains&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, TSource item, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Contains&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, !!TSource item, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Contains(Of TSource) (source As IQueryable(Of TSource), item As TSource, comparer As IEqualityComparer(Of TSource)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Contains(System::Linq::IQueryable&lt;TSource&gt; ^ source, TSource item, System::Collections::Generic::IEqualityComparer&lt;TSource&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Contains : System.Linq.IQueryable&lt;'Source&gt; * 'Source * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; bool" Usage="System.Linq.Queryable.Contains (source, item, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="item" Type="TSource" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-496"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-496">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-497">要在其中尋找 <paramref name="item" /> 的 <see cref="T:System.Linq.IQueryable`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-497">An <see cref="T:System.Linq.IQueryable`1" /> in which to locate <paramref name="item" />.</span></span></param>
        <param name="item"><span data-ttu-id="a43ad-498">要在序列中尋找的物件。</span><span class="sxs-lookup"><span data-stu-id="a43ad-498">The object to locate in the sequence.</span></span></param>
        <param name="comparer"><span data-ttu-id="a43ad-499">用來比較值的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-499">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span></span></param>
        <summary><span data-ttu-id="a43ad-500">使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 來判斷序列是否包含指定的項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-500">Determines whether a sequence contains a specified element by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</span></span></summary>
        <returns><span data-ttu-id="a43ad-501">如果輸入序列包含具有指定值的項目，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-501"><see langword="true" /> if the input sequence contains an element that has the specified value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-502"><xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-502">The <xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-503">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-503">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-504">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-504">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-505">預期的行為是，它會判斷如果`source`包含`item`使用`comparer`來比較值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-505">The expected behavior is that it determines if `source` contains `item` by using `comparer` to compare values.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-506"><paramref name="source" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-506"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Count&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a43ad-507">傳回序列中的項目數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-507">Returns the number of elements in a sequence.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Count&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static int Count&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Count&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Count(Of TSource) (source As IQueryable(Of TSource)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Count(System::Linq::IQueryable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Count : System.Linq.IQueryable&lt;'Source&gt; -&gt; int" Usage="System.Linq.Queryable.Count source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-508"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-508">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-509">包含要計算之項目的 <see cref="T:System.Linq.IQueryable`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-509">The <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.</span></span></param>
        <summary><span data-ttu-id="a43ad-510">傳回序列中的項目數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-510">Returns the number of elements in a sequence.</span></span></summary>
        <returns><span data-ttu-id="a43ad-511">輸入序列中的項目數目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-511">The number of elements in the input sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-512"><xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-512">The <xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-513">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-513">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-514">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-514">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-515">預期的行為是，它會計算中的項目數`source`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-515">The expected behavior is that it counts the number of items in `source`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-516">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>計算序列中的項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-516">The following code example demonstrates how to use <xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> to count the elements in a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#22)]
 [!code-vb[System.Linq.Queryable#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-517"><paramref name="source" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-517"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="a43ad-518"><paramref name="source" /> 中的項目數目大於 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-518">The number of elements in <paramref name="source" /> is larger than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Count&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static int Count&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Count&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Count(Of TSource) (source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean))) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Count(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, bool&gt; ^&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member Count : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, bool&gt;&gt; -&gt; int" Usage="System.Linq.Queryable.Count (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-519"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-519">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-520">包含要計算之項目的 <see cref="T:System.Linq.IQueryable`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-520">An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.</span></span></param>
        <param name="predicate"><span data-ttu-id="a43ad-521">用來測試每個項目是否符合條件的函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-521">A function to test each element for a condition.</span></span></param>
        <summary><span data-ttu-id="a43ad-522">傳回指定之序列中符合條件的項目數目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-522">Returns the number of elements in the specified sequence that satisfies a condition.</span></span></summary>
        <returns><span data-ttu-id="a43ad-523">序列中符合述詞函式之條件的項目數目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-523">The number of elements in the sequence that satisfies the condition in the predicate function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-524">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-524">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-525">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-525">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-526"><xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-526">The <xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-527">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-527">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-528">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-528">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-529">預期的行為是，它會計算中的項目數`source`符合所指定的條件`predicate`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-529">The expected behavior is that it counts the number of items in `source` that satisfy the condition specified by `predicate`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-530">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29>計算序列中符合條件的項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-530">The following code example demonstrates how to use <xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> to count the elements in a sequence that satisfy a condition.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#23)]
 [!code-vb[System.Linq.Queryable#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-531"><paramref name="source" /> 或 <paramref name="predicate" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-531"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="a43ad-532"><paramref name="source" /> 中的項目數目大於 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-532">The number of elements in <paramref name="source" /> is larger than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DefaultIfEmpty&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a43ad-533">傳回序列中的項目；如果序列是空的，則傳回預設值單一集合。</span><span class="sxs-lookup"><span data-stu-id="a43ad-533">Returns the elements in a sequence or a default valued singleton collection if the sequence is empty.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DefaultIfEmpty&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; DefaultIfEmpty&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TSource&gt; DefaultIfEmpty&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DefaultIfEmpty(Of TSource) (source As IQueryable(Of TSource)) As IQueryable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable&lt;TSource&gt; ^ DefaultIfEmpty(System::Linq::IQueryable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member DefaultIfEmpty : System.Linq.IQueryable&lt;'Source&gt; -&gt; System.Linq.IQueryable&lt;'Source&gt;" Usage="System.Linq.Queryable.DefaultIfEmpty source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-534"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-534">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-535">在空白時，要傳回預設值的 <see cref="T:System.Linq.IQueryable`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-535">The <see cref="T:System.Linq.IQueryable`1" /> to return a default value for if empty.</span></span></param>
        <summary><span data-ttu-id="a43ad-536">傳回指定之序列的項目；如果序列是空的，則傳回單一集合中型別參數的預設值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-536">Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.</span></span></summary>
        <returns><span data-ttu-id="a43ad-537">如果 <paramref name="TSource" /> 是空的，則為包含 <see langword="default" />(<paramref name="source" />) 的 <see cref="T:System.Linq.IQueryable`1" />，否則為 <paramref name="source" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-537">An <see cref="T:System.Linq.IQueryable`1" /> that contains <see langword="default" />(<paramref name="TSource" />) if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-538"><xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-538">The <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-539">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-539">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-540">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-540">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-541">預期的行為是，它會傳回`source`如果不是空的。</span><span class="sxs-lookup"><span data-stu-id="a43ad-541">The expected behavior is that it returns `source` if it is not empty.</span></span> <span data-ttu-id="a43ad-542">否則，它會傳回<xref:System.Linq.IQueryable%601>，其中包含`default(TSource)`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-542">Otherwise, it returns an <xref:System.Linq.IQueryable%601> that contains `default(TSource)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-543">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>提供預設值，如果來源序列是空的。</span><span class="sxs-lookup"><span data-stu-id="a43ad-543">The following code examples demonstrate how to use <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> to provide a default value in case the source sequence is empty.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#24)]
 [!code-vb[System.Linq.Queryable#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-544"><paramref name="source" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-544"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefaultIfEmpty&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; DefaultIfEmpty&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, TSource defaultValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TSource&gt; DefaultIfEmpty&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, !!TSource defaultValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DefaultIfEmpty(Of TSource) (source As IQueryable(Of TSource), defaultValue As TSource) As IQueryable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable&lt;TSource&gt; ^ DefaultIfEmpty(System::Linq::IQueryable&lt;TSource&gt; ^ source, TSource defaultValue);" />
      <MemberSignature Language="F#" Value="static member DefaultIfEmpty : System.Linq.IQueryable&lt;'Source&gt; * 'Source -&gt; System.Linq.IQueryable&lt;'Source&gt;" Usage="System.Linq.Queryable.DefaultIfEmpty (source, defaultValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="defaultValue" Type="TSource" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-545"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-545">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-546">在空白時，要傳回指定之值的 <see cref="T:System.Linq.IQueryable`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-546">The <see cref="T:System.Linq.IQueryable`1" /> to return the specified value for if empty.</span></span></param>
        <param name="defaultValue"><span data-ttu-id="a43ad-547">在序列空白時所要傳回的值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-547">The value to return if the sequence is empty.</span></span></param>
        <summary><span data-ttu-id="a43ad-548">傳回指定之序列的項目；如果序列是空的，則傳回單一集合中型別參數的預設值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-548">Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.</span></span></summary>
        <returns><span data-ttu-id="a43ad-549">如果 <paramref name="defaultValue" /> 是空的，則為包含 <paramref name="source" /> 的 <see cref="T:System.Linq.IQueryable`1" />，否則為 <paramref name="source" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-549">An <see cref="T:System.Linq.IQueryable`1" /> that contains <paramref name="defaultValue" /> if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-550"><xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-550">The <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-551">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-551">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-552">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-552">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-553">預期的行為是，它會傳回`source`如果不是空的。</span><span class="sxs-lookup"><span data-stu-id="a43ad-553">The expected behavior is that it returns `source` if it is not empty.</span></span> <span data-ttu-id="a43ad-554">否則，它會傳回<xref:System.Linq.IQueryable%601>，其中包含`defaultValue`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-554">Otherwise, it returns an <xref:System.Linq.IQueryable%601> that contains `defaultValue`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-555">下列程式碼範例顯示它是可呼叫的情況<xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29>在[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]查詢。</span><span class="sxs-lookup"><span data-stu-id="a43ad-555">The following code example shows a situation in which it is useful to call <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> in a [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] query.</span></span> <span data-ttu-id="a43ad-556">預設值會傳遞至<xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29>在此範例中。</span><span class="sxs-lookup"><span data-stu-id="a43ad-556">A default value is passed to <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> in this example.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#25)]
 [!code-vb[System.Linq.Queryable#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-557"><paramref name="source" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-557"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Distinct&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a43ad-558">從序列傳回獨特的項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-558">Returns distinct elements from a sequence.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Distinct&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; Distinct&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TSource&gt; Distinct&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Distinct(Of TSource) (source As IQueryable(Of TSource)) As IQueryable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable&lt;TSource&gt; ^ Distinct(System::Linq::IQueryable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Distinct : System.Linq.IQueryable&lt;'Source&gt; -&gt; System.Linq.IQueryable&lt;'Source&gt;" Usage="System.Linq.Queryable.Distinct source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-559"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-559">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-560">要從中移除重複項目的 <see cref="T:System.Linq.IQueryable`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-560">The <see cref="T:System.Linq.IQueryable`1" /> to remove duplicates from.</span></span></param>
        <summary><span data-ttu-id="a43ad-561">使用預設的相等比較子來比較值，以便從序列傳回獨特的項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-561">Returns distinct elements from a sequence by using the default equality comparer to compare values.</span></span></summary>
        <returns><span data-ttu-id="a43ad-562"><see cref="T:System.Linq.IQueryable`1" />，其中包含來自 <paramref name="source" /> 的獨特項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-562">An <see cref="T:System.Linq.IQueryable`1" /> that contains distinct elements from <paramref name="source" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-563"><xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-563">The <xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-564">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-564">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-565">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-565">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-566">預期的行為是傳回的未排序的序列中的唯一項目`source`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-566">The expected behavior is that it returns an unordered sequence of the unique items in `source`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-567">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>從序列傳回獨特的項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-567">The following code example demonstrates how to use <xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> to return distinct elements from a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#27](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#27)]
 [!code-vb[System.Linq.Queryable#27](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#27)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-568"><paramref name="source" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-568"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Distinct&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; Distinct&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TSource&gt; Distinct&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Distinct(Of TSource) (source As IQueryable(Of TSource), comparer As IEqualityComparer(Of TSource)) As IQueryable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable&lt;TSource&gt; ^ Distinct(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Collections::Generic::IEqualityComparer&lt;TSource&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Distinct : System.Linq.IQueryable&lt;'Source&gt; * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; System.Linq.IQueryable&lt;'Source&gt;" Usage="System.Linq.Queryable.Distinct (source, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-569"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-569">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-570">要從中移除重複項目的 <see cref="T:System.Linq.IQueryable`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-570">The <see cref="T:System.Linq.IQueryable`1" /> to remove duplicates from.</span></span></param>
        <param name="comparer"><span data-ttu-id="a43ad-571">用來比較值的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-571">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span></span></param>
        <summary><span data-ttu-id="a43ad-572">使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 來比較值，以便從序列傳回獨特的項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-572">Returns distinct elements from a sequence by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span></span></summary>
        <returns><span data-ttu-id="a43ad-573"><see cref="T:System.Linq.IQueryable`1" />，其中包含來自 <paramref name="source" /> 的獨特項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-573">An <see cref="T:System.Linq.IQueryable`1" /> that contains distinct elements from <paramref name="source" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-574"><xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-574">The <xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-575">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-575">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-576">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-576">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-577">預期的行為是傳回的未排序的序列中的唯一項目`source`使用`comparer`來比較值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-577">The expected behavior is that it returns an unordered sequence of the unique items in `source` by using `comparer` to compare values.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-578"><paramref name="source" /> 或 <paramref name="comparer" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-578"><paramref name="source" /> or <paramref name="comparer" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ElementAt&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource ElementAt&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource ElementAt&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ElementAt(Of TSource) (source As IQueryable(Of TSource), index As Integer) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource ElementAt(System::Linq::IQueryable&lt;TSource&gt; ^ source, int index);" />
      <MemberSignature Language="F#" Value="static member ElementAt : System.Linq.IQueryable&lt;'Source&gt; * int -&gt; 'Source" Usage="System.Linq.Queryable.ElementAt (source, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-579"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-579">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-580">傳回項目的 <see cref="T:System.Linq.IQueryable`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-580">An <see cref="T:System.Linq.IQueryable`1" /> to return an element from.</span></span></param>
        <param name="index"><span data-ttu-id="a43ad-581">要擷取的項目之以零為起始索引。</span><span class="sxs-lookup"><span data-stu-id="a43ad-581">The zero-based index of the element to retrieve.</span></span></param>
        <summary><span data-ttu-id="a43ad-582">傳回位於序列中指定索引處的項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-582">Returns the element at a specified index in a sequence.</span></span></summary>
        <returns><span data-ttu-id="a43ad-583">位於 <paramref name="source" /> 中指定之位置的項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-583">The element at the specified position in <paramref name="source" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-584"><xref:System.Linq.Queryable.ElementAt%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.ElementAt%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-584">The <xref:System.Linq.Queryable.ElementAt%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.ElementAt%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-585">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-585">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-586">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.ElementAt%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-586">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.ElementAt%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-587">預期的行為是，它會傳回位置的項目`index`在`source`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-587">The expected behavior is that it returns the item at position `index` in `source`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-588">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.ElementAt%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29>傳回序列中的特定位置的項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-588">The following code example demonstrates how to use <xref:System.Linq.Queryable.ElementAt%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> to return an element at a specific position in a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#28](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#28)]
 [!code-vb[System.Linq.Queryable#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-589"><paramref name="source" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-589"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="a43ad-590"><paramref name="index" /> 小於零。</span><span class="sxs-lookup"><span data-stu-id="a43ad-590"><paramref name="index" /> is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ElementAtOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource ElementAtOrDefault&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource ElementAtOrDefault&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ElementAtOrDefault(Of TSource) (source As IQueryable(Of TSource), index As Integer) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource ElementAtOrDefault(System::Linq::IQueryable&lt;TSource&gt; ^ source, int index);" />
      <MemberSignature Language="F#" Value="static member ElementAtOrDefault : System.Linq.IQueryable&lt;'Source&gt; * int -&gt; 'Source" Usage="System.Linq.Queryable.ElementAtOrDefault (source, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-591"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-591">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-592">傳回項目的 <see cref="T:System.Linq.IQueryable`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-592">An <see cref="T:System.Linq.IQueryable`1" /> to return an element from.</span></span></param>
        <param name="index"><span data-ttu-id="a43ad-593">要擷取的項目之以零為起始索引。</span><span class="sxs-lookup"><span data-stu-id="a43ad-593">The zero-based index of the element to retrieve.</span></span></param>
        <summary><span data-ttu-id="a43ad-594">傳回位於序列中指定索引處的元素；如果索引超出範圍，則傳回預設值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-594">Returns the element at a specified index in a sequence or a default value if the index is out of range.</span></span></summary>
        <returns><span data-ttu-id="a43ad-595">如果 <paramref name="index" /> 超出 <paramref name="source" /> 的範圍，則為 <c>default</c>(<paramref name="TSource" />)；否則為位於 <paramref name="source" /> 中指定索引處的項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-595"><c>default</c>(<paramref name="TSource" />) if <paramref name="index" /> is outside the bounds of <paramref name="source" />; otherwise, the element at the specified position in <paramref name="source" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-596"><xref:System.Linq.Queryable.ElementAtOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.ElementAtOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-596">The <xref:System.Linq.Queryable.ElementAtOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.ElementAtOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-597">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-597">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-598">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.ElementAtOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-598">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.ElementAtOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-599">預期的行為是，它會傳回位置的項目`index`中`source`，或`default(TSource)`如果`index`超出範圍`source`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-599">The expected behavior is that it returns the item at position `index` in `source`, or `default(TSource)` if `index` is outside the bounds of `source`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-600">下列程式碼範例將示範如何使用 <xref:System.Linq.Queryable.ElementAtOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-600">The following code example demonstrates how to use <xref:System.Linq.Queryable.ElementAtOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29>.</span></span> <span data-ttu-id="a43ad-601">此範例中使用值`index`來源序列的界限之外。</span><span class="sxs-lookup"><span data-stu-id="a43ad-601">This example uses a value for `index` that is outside the bounds of the source sequence.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#29](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#29)]
 [!code-vb[System.Linq.Queryable#29](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-602"><paramref name="source" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-602"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Except&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a43ad-603">產生兩個序列的差異。</span><span class="sxs-lookup"><span data-stu-id="a43ad-603">Produces the set difference of two sequences.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Except&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; Except&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source1, System.Collections.Generic.IEnumerable&lt;TSource&gt; source2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TSource&gt; Except&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source1, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Except(Of TSource) (source1 As IQueryable(Of TSource), source2 As IEnumerable(Of TSource)) As IQueryable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable&lt;TSource&gt; ^ Except(System::Linq::IQueryable&lt;TSource&gt; ^ source1, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source2);" />
      <MemberSignature Language="F#" Value="static member Except : System.Linq.IQueryable&lt;'Source&gt; * seq&lt;'Source&gt; -&gt; System.Linq.IQueryable&lt;'Source&gt;" Usage="System.Linq.Queryable.Except (source1, source2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source1" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="source2" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-604">輸入序列之項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-604">The type of the elements of the input sequences.</span></span></typeparam>
        <param name="source1"><span data-ttu-id="a43ad-605"><see cref="T:System.Linq.IQueryable`1" />，其項目若未同時存在 <paramref name="source2" /> 中，便會傳回這些項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-605">An <see cref="T:System.Linq.IQueryable`1" /> whose elements that are not also in <paramref name="source2" /> will be returned.</span></span></param>
        <param name="source2"><span data-ttu-id="a43ad-606"><see cref="T:System.Collections.Generic.IEnumerable`1" />，其項目若同時出現在第一個序列中，則不會出現在傳回的序列中。</span><span class="sxs-lookup"><span data-stu-id="a43ad-606">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that also occur in the first sequence will not appear in the returned sequence.</span></span></param>
        <summary><span data-ttu-id="a43ad-607">使用預設相等比較子來比較值，以便產生兩個序列的差異。</span><span class="sxs-lookup"><span data-stu-id="a43ad-607">Produces the set difference of two sequences by using the default equality comparer to compare values.</span></span></summary>
        <returns><span data-ttu-id="a43ad-608"><see cref="T:System.Linq.IQueryable`1" />，其中包含兩個序列的差異。</span><span class="sxs-lookup"><span data-stu-id="a43ad-608">An <see cref="T:System.Linq.IQueryable`1" /> that contains the set difference of the two sequences.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-609"><xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-609">The <xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-610">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source1`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-610">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the`source1` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-611">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29>之型別的實作而定`source1`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-611">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> depends on the implementation of the type of  the `source1` parameter.</span></span> <span data-ttu-id="a43ad-612">預期的行為是中的所有項目`source1`會傳回除了且也在`source2`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-612">The expected behavior is that all the elements in `source1` are returned except for those that are also in `source2`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-613">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29>返回第一個來源序列中才會出現這些項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-613">The following code example demonstrates how to use <xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> to return those elements that only appear in the first source sequence.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#34](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#34)]
 [!code-vb[System.Linq.Queryable#34](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-614"><paramref name="source1" /> 或 <paramref name="source2" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-614"><paramref name="source1" /> or <paramref name="source2" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Except&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; Except&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source1, System.Collections.Generic.IEnumerable&lt;TSource&gt; source2, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TSource&gt; Except&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source1, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source2, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Except(Of TSource) (source1 As IQueryable(Of TSource), source2 As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As IQueryable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable&lt;TSource&gt; ^ Except(System::Linq::IQueryable&lt;TSource&gt; ^ source1, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source2, System::Collections::Generic::IEqualityComparer&lt;TSource&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Except : System.Linq.IQueryable&lt;'Source&gt; * seq&lt;'Source&gt; * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; System.Linq.IQueryable&lt;'Source&gt;" Usage="System.Linq.Queryable.Except (source1, source2, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source1" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="source2" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-615">輸入序列之項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-615">The type of the elements of the input sequences.</span></span></typeparam>
        <param name="source1"><span data-ttu-id="a43ad-616"><see cref="T:System.Linq.IQueryable`1" />，其項目若未同時存在 <paramref name="source2" /> 中，便會傳回這些項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-616">An <see cref="T:System.Linq.IQueryable`1" /> whose elements that are not also in <paramref name="source2" /> will be returned.</span></span></param>
        <param name="source2"><span data-ttu-id="a43ad-617"><see cref="T:System.Collections.Generic.IEnumerable`1" />，其項目若同時出現在第一個序列中，則不會出現在傳回的序列中。</span><span class="sxs-lookup"><span data-stu-id="a43ad-617">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that also occur in the first sequence will not appear in the returned sequence.</span></span></param>
        <param name="comparer"><span data-ttu-id="a43ad-618">用來比較值的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-618">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span></span></param>
        <summary><span data-ttu-id="a43ad-619">使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 來比較值，以便產生兩個序列的差異。</span><span class="sxs-lookup"><span data-stu-id="a43ad-619">Produces the set difference of two sequences by using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span></span></summary>
        <returns><span data-ttu-id="a43ad-620"><see cref="T:System.Linq.IQueryable`1" />，其中包含兩個序列的差異。</span><span class="sxs-lookup"><span data-stu-id="a43ad-620">An <see cref="T:System.Linq.IQueryable`1" /> that contains the set difference of the two sequences.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-621"><xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-621">The <xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-622">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source1`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-622">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the`source1` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-623">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29>之型別的實作而定`source1`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-623">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> depends on the implementation of the type of the `source1` parameter.</span></span> <span data-ttu-id="a43ad-624">預期的行為是中的所有項目`source1`除外中也會傳回`source2`，和`comparer`用來比較值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-624">The expected behavior is that all the elements in `source1` are returned except for those that are also in `source2`, and `comparer` is used to compare values.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-625"><paramref name="source1" /> 或 <paramref name="source2" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-625"><paramref name="source1" /> or <paramref name="source2" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="First&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a43ad-626">傳回序列的第一個項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-626">Returns the first element of a sequence.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="First&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource First&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource First&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function First(Of TSource) (source As IQueryable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource First(System::Linq::IQueryable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member First : System.Linq.IQueryable&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Queryable.First source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-627"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-627">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-628">要傳回第一個項目的 <see cref="T:System.Linq.IQueryable`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-628">The <see cref="T:System.Linq.IQueryable`1" /> to return the first element of.</span></span></param>
        <summary><span data-ttu-id="a43ad-629">傳回序列的第一個項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-629">Returns the first element of a sequence.</span></span></summary>
        <returns><span data-ttu-id="a43ad-630"><paramref name="source" /> 中的第一個項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-630">The first element in <paramref name="source" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-631"><xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-631">The <xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-632">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-632">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-633">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-633">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-634">預期的行為是，它會傳回第一個元素`source`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-634">The expected behavior is that it returns the first element in `source`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-635">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>傳回序列中的第一個項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-635">The following code example demonstrates how to use <xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> to return the first element in a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#35](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#35)]
 [!code-vb[System.Linq.Queryable#35](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-636"><paramref name="source" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-636"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a43ad-637">來源序列為空。</span><span class="sxs-lookup"><span data-stu-id="a43ad-637">The source sequence is empty.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="First&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource First&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource First&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function First(Of TSource) (source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean))) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource First(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, bool&gt; ^&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member First : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, bool&gt;&gt; -&gt; 'Source" Usage="System.Linq.Queryable.First (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-638"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-638">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-639">傳回項目的 <see cref="T:System.Linq.IQueryable`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-639">An <see cref="T:System.Linq.IQueryable`1" /> to return an element from.</span></span></param>
        <param name="predicate"><span data-ttu-id="a43ad-640">用來測試每個項目是否符合條件的函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-640">A function to test each element for a condition.</span></span></param>
        <summary><span data-ttu-id="a43ad-641">傳回序列中符合指定之條件的第一個項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-641">Returns the first element of a sequence that satisfies a specified condition.</span></span></summary>
        <returns><span data-ttu-id="a43ad-642"><paramref name="source" /> 中通過 <paramref name="predicate" /> 之測試的第一個項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-642">The first element in <paramref name="source" /> that passes the test in <paramref name="predicate" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-643">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-643">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-644">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-644">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-645"><xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-645">The <xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-646">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-646">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-647">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-647">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-648">預期的行為是，它會傳回第一個元素`source`，可滿足所指定的條件`predicate`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-648">The expected behavior is that it returns the first element in `source` that satisfies the condition specified by `predicate`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-649">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29>傳回序列中符合條件的第一個元素。</span><span class="sxs-lookup"><span data-stu-id="a43ad-649">The following code example demonstrates how to use <xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> to return the first element of a sequence that satisfies a condition.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#36](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#36)]
 [!code-vb[System.Linq.Queryable#36](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#36)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-650"><paramref name="source" /> 或 <paramref name="predicate" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-650"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a43ad-651">沒有任何項目符合 <paramref name="predicate" /> 的條件。</span><span class="sxs-lookup"><span data-stu-id="a43ad-651">No element satisfies the condition in <paramref name="predicate" />.</span></span>  
  
<span data-ttu-id="a43ad-652">-或-</span><span class="sxs-lookup"><span data-stu-id="a43ad-652">-or-</span></span> 
<span data-ttu-id="a43ad-653">來源序列為空。</span><span class="sxs-lookup"><span data-stu-id="a43ad-653">The source sequence is empty.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FirstOrDefault&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a43ad-654">傳回序列的第一個項目；如果找不到任何項目，則傳回預設值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-654">Returns the first element of a sequence, or a default value if no element is found.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FirstOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource FirstOrDefault&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource FirstOrDefault&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FirstOrDefault(Of TSource) (source As IQueryable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource FirstOrDefault(System::Linq::IQueryable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member FirstOrDefault : System.Linq.IQueryable&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Queryable.FirstOrDefault source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-655"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-655">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-656">要傳回第一個項目的 <see cref="T:System.Linq.IQueryable`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-656">The <see cref="T:System.Linq.IQueryable`1" /> to return the first element of.</span></span></param>
        <summary><span data-ttu-id="a43ad-657">傳回序列的第一個元素；如果序列中沒有包含任何元素，則傳回預設值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-657">Returns the first element of a sequence, or a default value if the sequence contains no elements.</span></span></summary>
        <returns><span data-ttu-id="a43ad-658">如果 <paramref name="source" /> 是空的，則為 <c>default</c>(<paramref name="TSource" />)；否則為 <paramref name="source" /> 中的第一個項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-658"><c>default</c>(<paramref name="TSource" />) if <paramref name="source" /> is empty; otherwise, the first element in <paramref name="source" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-659"><xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-659">The <xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-660">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-660">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-661">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-661">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-662">預期的行為是，它會傳回第一個元素`source`，或預設值，如果`source`是空的。</span><span class="sxs-lookup"><span data-stu-id="a43ad-662">The expected behavior is that it returns the first element in `source`, or a default value if `source` is empty.</span></span>  
  
 <span data-ttu-id="a43ad-663"><xref:System.Linq.Queryable.FirstOrDefault%2A>方法不會提供方法來指定要傳回的預設值`source`是空的。</span><span class="sxs-lookup"><span data-stu-id="a43ad-663">The <xref:System.Linq.Queryable.FirstOrDefault%2A> method does not provide a way to specify the default value to return if `source` is empty.</span></span> <span data-ttu-id="a43ad-664">如果您想要指定預設值以外`default(TSource)`，使用<xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29>範例 > 一節中所述的方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-664">If you want to specify a default value other than `default(TSource)`, use the <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> method as described in the Example section.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-665">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>空序列上。</span><span class="sxs-lookup"><span data-stu-id="a43ad-665">The following code example demonstrates how to use <xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> on an empty sequence.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#37](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#37)]
 [!code-vb[System.Linq.Queryable#37](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#37)]  
  
 <span data-ttu-id="a43ad-666">有時值`default(TSource)`不是您想要使用如果集合不包含任何元素的預設值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-666">Sometimes the value of `default(TSource)` is not the default value that you want to use if the collection contains no elements.</span></span> <span data-ttu-id="a43ad-667">除了檢查不必要的預設值的結果，並將它如有必要變更，您可以使用<xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29>方法，以指定您想要使用這個集合是空的預設值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-667">Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> method to specify the default value that you want to use if the collection is empty.</span></span> <span data-ttu-id="a43ad-668">然後，呼叫<xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>取得第一個項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-668">Then, call <xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> to obtain the first element.</span></span> <span data-ttu-id="a43ad-669">下列程式碼範例會使用這兩種技術以取得預設值為 1，如果數字月份的集合是空的。</span><span class="sxs-lookup"><span data-stu-id="a43ad-669">The following code example uses both techniques to obtain a default value of 1 if a collection of numeric months is empty.</span></span> <span data-ttu-id="a43ad-670">整數，預設值為 0，這未對應至任何月份，因為預設值必須被指定為 1。</span><span class="sxs-lookup"><span data-stu-id="a43ad-670">Because the default value for an integer is 0, which does not correspond to any month, the default value must be specified as 1 instead.</span></span> <span data-ttu-id="a43ad-671">查詢完成後，便會檢查第一次的結果變數，不必要的預設值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-671">The first result variable is checked for the unwanted default value after the query is completed.</span></span> <span data-ttu-id="a43ad-672">第二個結果變數藉由呼叫取得<xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29>指定預設值為 1。</span><span class="sxs-lookup"><span data-stu-id="a43ad-672">The second result variable is obtained by calling <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> to specify a default value of 1.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#131](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#131)]
 [!code-vb[System.Linq.Queryable#131](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#131)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-673"><paramref name="source" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-673"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="FirstOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource FirstOrDefault&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource FirstOrDefault&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FirstOrDefault(Of TSource) (source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean))) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource FirstOrDefault(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, bool&gt; ^&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member FirstOrDefault : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, bool&gt;&gt; -&gt; 'Source" Usage="System.Linq.Queryable.FirstOrDefault (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-674"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-674">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-675">傳回項目的 <see cref="T:System.Linq.IQueryable`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-675">An <see cref="T:System.Linq.IQueryable`1" /> to return an element from.</span></span></param>
        <param name="predicate"><span data-ttu-id="a43ad-676">用來測試每個項目是否符合條件的函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-676">A function to test each element for a condition.</span></span></param>
        <summary><span data-ttu-id="a43ad-677">傳回序列中符合指定之條件的第一個項目；如果找不到這類項目，則傳回預設值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-677">Returns the first element of a sequence that satisfies a specified condition or a default value if no such element is found.</span></span></summary>
        <returns><span data-ttu-id="a43ad-678">如果 <paramref name="source" /> 是空的，或是沒有任何項目通過 <paramref name="predicate" /> 所指定的測試，則為 <c>default</c>(<paramref name="TSource" />)；否則為 <paramref name="source" /> 中通過 <paramref name="predicate" /> 指定之測試的第一個項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-678"><c>default</c>(<paramref name="TSource" />) if <paramref name="source" /> is empty or if no element passes the test specified by <paramref name="predicate" />; otherwise, the first element in <paramref name="source" /> that passes the test specified by <paramref name="predicate" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-679">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-679">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-680">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-680">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-681"><xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-681">The <xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-682">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-682">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-683">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-683">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-684">預期的行為是，它會傳回第一個元素`source`符合的條件`predicate`，或如果沒有任何項目符合條件的預設值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-684">The expected behavior is that it returns the first element in `source` that satisfies the condition in `predicate`, or a default value if no element satisfies the condition.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-685">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29>傳遞述詞中。</span><span class="sxs-lookup"><span data-stu-id="a43ad-685">The following code example demonstrates how to use <xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> by passing in a predicate.</span></span> <span data-ttu-id="a43ad-686">在第二個查詢中，沒有任何項目中符合條件的順序。</span><span class="sxs-lookup"><span data-stu-id="a43ad-686">In the second query, there is no element in the sequence that satisfies the condition.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#38](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#38)]
 [!code-vb[System.Linq.Queryable#38](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-687"><paramref name="source" /> 或 <paramref name="predicate" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-687"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GroupBy&lt;TSource,TKey&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a43ad-688">群組序列的項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-688">Groups the elements of a sequence.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GroupBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt; GroupBy&lt;TSource,TKey&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;class System.Linq.IGrouping`2&lt;!!TKey, !!TSource&gt;&gt; GroupBy&lt;TSource, TKey&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TKey&gt;&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey) (source As IQueryable(Of TSource), keySelector As Expression(Of Func(Of TSource, TKey))) As IQueryable(Of IGrouping(Of TKey, TSource))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable&lt;System::Linq::IGrouping&lt;TKey, TSource&gt; ^&gt; ^ GroupBy(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, TKey&gt; ^&gt; ^ keySelector);" />
      <MemberSignature Language="F#" Value="static member GroupBy : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, 'Key&gt;&gt; -&gt; System.Linq.IQueryable&lt;System.Linq.IGrouping&lt;'Key, 'Source&gt;&gt;" Usage="System.Linq.Queryable.GroupBy (source, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TKey&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-689"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-689">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="a43ad-690"><paramref name="keySelector" /> 中表示之函式所傳回索引鍵的型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-690">The type of the key returned by the function represented in <paramref name="keySelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-691">要群組其項目的 <see cref="T:System.Linq.IQueryable`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-691">An <see cref="T:System.Linq.IQueryable`1" /> whose elements to group.</span></span></param>
        <param name="keySelector"><span data-ttu-id="a43ad-692">用來擷取各項目之索引鍵的函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-692">A function to extract the key for each element.</span></span></param>
        <summary><span data-ttu-id="a43ad-693">依據指定的索引鍵選擇器函式來群組序列的項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-693">Groups the elements of a sequence according to a specified key selector function.</span></span></summary>
        <returns><span data-ttu-id="a43ad-694">C# 中的 <c>IQueryable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</c> 或 Visual Basic 中的 <c>IQueryable(Of IGrouping(Of TKey, TSource))</c>，其中每個 <see cref="T:System.Linq.IGrouping`2" /> 物件都包含一序列的物件和一個索引鍵。</span><span class="sxs-lookup"><span data-stu-id="a43ad-694">An <c>IQueryable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</c> in C# or <c>IQueryable(Of IGrouping(Of TKey, TSource))</c> in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> object contains a sequence of objects and a key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-695">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-695">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-696">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-696">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-697"><xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-697">The <xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-698">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-698">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-699">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-699">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-700">預期的行為是它的項目分組`source`藉由叫用的鍵值`keySelector`每個項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-700">The expected behavior is that it groups the elements of `source` by a key value that is obtained by invoking `keySelector` on each element.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-701">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29>來分組序列的項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-701">The following code example demonstrates how to use <xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> to group the elements of a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#14)]
 [!code-vb[System.Linq.Queryable#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-702"><paramref name="source" /> 或 <paramref name="keySelector" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-702"><paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt; GroupBy&lt;TSource,TKey&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;class System.Linq.IGrouping`2&lt;!!TKey, !!TSource&gt;&gt; GroupBy&lt;TSource, TKey&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TKey&gt;&gt; keySelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey) (source As IQueryable(Of TSource), keySelector As Expression(Of Func(Of TSource, TKey)), comparer As IEqualityComparer(Of TKey)) As IQueryable(Of IGrouping(Of TKey, TSource))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable&lt;System::Linq::IGrouping&lt;TKey, TSource&gt; ^&gt; ^ GroupBy(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, TKey&gt; ^&gt; ^ keySelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member GroupBy : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, 'Key&gt;&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Linq.IQueryable&lt;System.Linq.IGrouping&lt;'Key, 'Source&gt;&gt;" Usage="System.Linq.Queryable.GroupBy (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TKey&gt;&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-703"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-703">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="a43ad-704"><paramref name="keySelector" /> 中表示之函式所傳回索引鍵的型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-704">The type of the key returned by the function represented in <paramref name="keySelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-705">要群組其項目的 <see cref="T:System.Linq.IQueryable`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-705">An <see cref="T:System.Linq.IQueryable`1" /> whose elements to group.</span></span></param>
        <param name="keySelector"><span data-ttu-id="a43ad-706">用來擷取各項目之索引鍵的函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-706">A function to extract the key for each element.</span></span></param>
        <param name="comparer"><span data-ttu-id="a43ad-707">用來比較金鑰的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-707">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span></span></param>
        <summary><span data-ttu-id="a43ad-708">依據指定的索引鍵選取器函式來群組序列的項目，並使用指定的比較子來比較索引鍵。</span><span class="sxs-lookup"><span data-stu-id="a43ad-708">Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.</span></span></summary>
        <returns><span data-ttu-id="a43ad-709">C# 中的 <c>IQueryable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</c> 或 Visual Basic 中的 <c>IQueryable(Of IGrouping(Of TKey, TSource))</c>，其中每個 <see cref="T:System.Linq.IGrouping`2" /> 都包含一序列的物件和一個索引鍵。</span><span class="sxs-lookup"><span data-stu-id="a43ad-709">An <c>IQueryable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</c> in C# or <c>IQueryable(Of IGrouping(Of TKey, TSource))</c> in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> contains a sequence of objects and a key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-710">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-710">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-711">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-711">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-712"><xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-712">The <xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-713">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-713">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-714">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-714">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-715">預期的行為是該群組的項目`source`依索引鍵的值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-715">The expected behavior is that it groups the elements of `source` by a key value.</span></span> <span data-ttu-id="a43ad-716">索引鍵的值藉由叫用`keySelector`每個項目，並藉由比較索引鍵值`comparer`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-716">The key value is obtained by invoking `keySelector` on each element, and key values are compared by using `comparer`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-717"><paramref name="source" />、<paramref name="keySelector" /> 或 <paramref name="comparer" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-717"><paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="comparer" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt; GroupBy&lt;TSource,TKey,TElement&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TElement&gt;&gt; elementSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;class System.Linq.IGrouping`2&lt;!!TKey, !!TElement&gt;&gt; GroupBy&lt;TSource, TKey, TElement&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TKey&gt;&gt; keySelector, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TElement&gt;&gt; elementSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey, TElement) (source As IQueryable(Of TSource), keySelector As Expression(Of Func(Of TSource, TKey)), elementSelector As Expression(Of Func(Of TSource, TElement))) As IQueryable(Of IGrouping(Of TKey, TElement))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable&lt;System::Linq::IGrouping&lt;TKey, TElement&gt; ^&gt; ^ GroupBy(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, TKey&gt; ^&gt; ^ keySelector, System::Linq::Expressions::Expression&lt;Func&lt;TSource, TElement&gt; ^&gt; ^ elementSelector);" />
      <MemberSignature Language="F#" Value="static member GroupBy : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, 'Key&gt;&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, 'Element&gt;&gt; -&gt; System.Linq.IQueryable&lt;System.Linq.IGrouping&lt;'Key, 'Element&gt;&gt;" Usage="System.Linq.Queryable.GroupBy (source, keySelector, elementSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TKey&gt;&gt;" />
        <Parameter Name="elementSelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TElement&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-718"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-718">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="a43ad-719"><paramref name="keySelector" /> 中表示之函式所傳回索引鍵的型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-719">The type of the key returned by the function represented in <paramref name="keySelector" />.</span></span></typeparam>
        <typeparam name="TElement"><span data-ttu-id="a43ad-720">每個 <see cref="T:System.Linq.IGrouping`2" /> 中的項目型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-720">The type of the elements in each <see cref="T:System.Linq.IGrouping`2" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-721">要群組其項目的 <see cref="T:System.Linq.IQueryable`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-721">An <see cref="T:System.Linq.IQueryable`1" /> whose elements to group.</span></span></param>
        <param name="keySelector"><span data-ttu-id="a43ad-722">用來擷取各項目之索引鍵的函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-722">A function to extract the key for each element.</span></span></param>
        <param name="elementSelector"><span data-ttu-id="a43ad-723">用來將每個來源項目對應至 <see cref="T:System.Linq.IGrouping`2" /> 之項目的函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-723">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</span></span></param>
        <summary><span data-ttu-id="a43ad-724">依據指定的索引鍵選取器函式來群組序列的項目，並使用指定的函式來投影每個群組的項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-724">Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.</span></span></summary>
        <returns><span data-ttu-id="a43ad-725">C# 中的 <c>IQueryable&lt;IGrouping&lt;TKey, TElement&gt;&gt;</c> 或 Visual Basic 中的 <c>IQueryable(Of IGrouping(Of TKey, TElement))</c>，其中每個 <see cref="T:System.Linq.IGrouping`2" /> 都包含一連串 <paramref name="TElement" /> 類型的物件和一個索引鍵。</span><span class="sxs-lookup"><span data-stu-id="a43ad-725">An <c>IQueryable&lt;IGrouping&lt;TKey, TElement&gt;&gt;</c> in C# or <c>IQueryable(Of IGrouping(Of TKey, TElement))</c> in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> contains a sequence of objects of type <paramref name="TElement" /> and a key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-726">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-726">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-727">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-727">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-728"><xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-728">The <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-729">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-729">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-730">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-730">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-731">預期的行為是它的項目分組`source`藉由叫用的鍵值`keySelector`每個項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-731">The expected behavior is that it groups the elements of `source` by a key value that is obtained by invoking `keySelector` on each element.</span></span> <span data-ttu-id="a43ad-732">它會叫用`elementSelector`每個項目，以取得結果項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-732">It invokes `elementSelector` on each element to obtain a result element.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-733">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%29>來分組序列的項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-733">The following code example demonstrates how to use <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%29> to group the elements of a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#39](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#39)]
 [!code-vb[System.Linq.Queryable#39](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#39)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-734"><paramref name="source" />、<paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-734"><paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt; GroupBy&lt;TSource,TKey,TElement&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TElement&gt;&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;class System.Linq.IGrouping`2&lt;!!TKey, !!TElement&gt;&gt; GroupBy&lt;TSource, TKey, TElement&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TKey&gt;&gt; keySelector, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TElement&gt;&gt; elementSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey, TElement) (source As IQueryable(Of TSource), keySelector As Expression(Of Func(Of TSource, TKey)), elementSelector As Expression(Of Func(Of TSource, TElement)), comparer As IEqualityComparer(Of TKey)) As IQueryable(Of IGrouping(Of TKey, TElement))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable&lt;System::Linq::IGrouping&lt;TKey, TElement&gt; ^&gt; ^ GroupBy(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, TKey&gt; ^&gt; ^ keySelector, System::Linq::Expressions::Expression&lt;Func&lt;TSource, TElement&gt; ^&gt; ^ elementSelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member GroupBy : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, 'Key&gt;&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, 'Element&gt;&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Linq.IQueryable&lt;System.Linq.IGrouping&lt;'Key, 'Element&gt;&gt;" Usage="System.Linq.Queryable.GroupBy (source, keySelector, elementSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TKey&gt;&gt;" />
        <Parameter Name="elementSelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TElement&gt;&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-735"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-735">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="a43ad-736"><paramref name="keySelector" /> 中表示之函式所傳回索引鍵的型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-736">The type of the key returned by the function represented in <paramref name="keySelector" />.</span></span></typeparam>
        <typeparam name="TElement"><span data-ttu-id="a43ad-737">每個 <see cref="T:System.Linq.IGrouping`2" /> 中的項目型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-737">The type of the elements in each <see cref="T:System.Linq.IGrouping`2" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-738">要群組其項目的 <see cref="T:System.Linq.IQueryable`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-738">An <see cref="T:System.Linq.IQueryable`1" /> whose elements to group.</span></span></param>
        <param name="keySelector"><span data-ttu-id="a43ad-739">用來擷取各項目之索引鍵的函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-739">A function to extract the key for each element.</span></span></param>
        <param name="elementSelector"><span data-ttu-id="a43ad-740">用來將每個來源項目對應至 <see cref="T:System.Linq.IGrouping`2" /> 之項目的函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-740">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</span></span></param>
        <param name="comparer"><span data-ttu-id="a43ad-741">用來比較金鑰的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-741">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span></span></param>
        <summary><span data-ttu-id="a43ad-742">使用指定的函式來群組序列的項目並投影每個群組的項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-742">Groups the elements of a sequence and projects the elements for each group by using a specified function.</span></span> <span data-ttu-id="a43ad-743">索引鍵值是使用指定的比較子來進行比較。</span><span class="sxs-lookup"><span data-stu-id="a43ad-743">Key values are compared by using a specified comparer.</span></span></summary>
        <returns><span data-ttu-id="a43ad-744">C# 中的 <c>IQueryable&lt;IGrouping&lt;TKey, TElement&gt;&gt;</c> 或 Visual Basic 中的 <c>IQueryable(Of IGrouping(Of TKey, TElement))</c>，其中每個 <see cref="T:System.Linq.IGrouping`2" /> 都包含一連串 <paramref name="TElement" /> 類型的物件和一個索引鍵。</span><span class="sxs-lookup"><span data-stu-id="a43ad-744">An <c>IQueryable&lt;IGrouping&lt;TKey, TElement&gt;&gt;</c> in C# or <c>IQueryable(Of IGrouping(Of TKey, TElement))</c> in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> contains a sequence of objects of type <paramref name="TElement" /> and a key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-745">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-745">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-746">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-746">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-747"><xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-747">The <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-748">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-748">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-749">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-749">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-750">預期的行為是它的項目分組`source`藉由叫用的鍵值`keySelector`每個項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-750">The expected behavior is that it groups the elements of `source` by a key value that is obtained by invoking `keySelector` on each element.</span></span> <span data-ttu-id="a43ad-751">索引鍵的值進行比較使用`comparer`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-751">Key values are compared by using `comparer`.</span></span> <span data-ttu-id="a43ad-752">`elementSelector`參數會在每個項目，以取得結果項目上叫用。</span><span class="sxs-lookup"><span data-stu-id="a43ad-752">The `elementSelector` parameter is invoked on each element to obtain a result element.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-753"><paramref name="source" />、<paramref name="keySelector" />、<paramref name="elementSelector" /> 或 <paramref name="comparer" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-753"><paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> or <paramref name="comparer" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector, System.Linq.Expressions.Expression&lt;Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt;&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TResult&gt; GroupBy&lt;TSource, TKey, TResult&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TKey&gt;&gt; keySelector, class System.Linq.Expressions.Expression`1&lt;class System.Func`3&lt;!!TKey, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt;, !!TResult&gt;&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey, TResult) (source As IQueryable(Of TSource), keySelector As Expression(Of Func(Of TSource, TKey)), resultSelector As Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult))) As IQueryable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable&lt;TResult&gt; ^ GroupBy(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, TKey&gt; ^&gt; ^ keySelector, System::Linq::Expressions::Expression&lt;Func&lt;TKey, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^, TResult&gt; ^&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member GroupBy : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, 'Key&gt;&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Key, seq&lt;'Source&gt;, 'Result&gt;&gt; -&gt; System.Linq.IQueryable&lt;'Result&gt;" Usage="System.Linq.Queryable.GroupBy (source, keySelector, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TKey&gt;&gt;" />
        <Parameter Name="resultSelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-754"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-754">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="a43ad-755"><paramref name="keySelector" /> 中表示之函式所傳回索引鍵的型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-755">The type of the key returned by the function represented in <paramref name="keySelector" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="a43ad-756"><paramref name="resultSelector" /> 所傳回之結果值的型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-756">The type of the result value returned by <paramref name="resultSelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-757">要群組其項目的 <see cref="T:System.Linq.IQueryable`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-757">An <see cref="T:System.Linq.IQueryable`1" /> whose elements to group.</span></span></param>
        <param name="keySelector"><span data-ttu-id="a43ad-758">用來擷取各項目之索引鍵的函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-758">A function to extract the key for each element.</span></span></param>
        <param name="resultSelector"><span data-ttu-id="a43ad-759">用來從各個群組建立結果值的函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-759">A function to create a result value from each group.</span></span></param>
        <summary><span data-ttu-id="a43ad-760">依據指定的索引鍵選取器函式來群組序列的項目，並從每個群組及其索引鍵建立結果值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-760">Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</span></span></summary>
        <returns><span data-ttu-id="a43ad-761"><c>T:System.Linq.IQueryable\`1</c>，其具有 <paramref name="TResult" /> 的型別引數，而且其中每個項目都代表群組及其索引鍵的投影。</span><span class="sxs-lookup"><span data-stu-id="a43ad-761">An <c>T:System.Linq.IQueryable\`1</c> that has a type argument of <paramref name="TResult" /> and where each element represents a projection over a group and its key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-762">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-762">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-763">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-763">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-764"><xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-764">The <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-765">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-765">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-766">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-766">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-767">預期的行為是它的項目分組`source`藉由叫用的鍵值`keySelector`每個項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-767">The expected behavior is that it groups the elements of `source` by a key value that is obtained by invoking `keySelector` on each element.</span></span> <span data-ttu-id="a43ad-768">`resultSelector`參數用來從每個群組及其索引鍵取得結果值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-768">The `resultSelector` parameter is used to obtain a result value from each group and its key.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-769">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%29>分組序列的項目，以及專案的型別的結果序列`TResult`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-769">The following code example demonstrates how to use <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%29> to group the elements of a sequence and project a sequence of results of type `TResult`.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#15)]
 [!code-vb[System.Linq.Queryable#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-770"><paramref name="source" />、<paramref name="keySelector" /> 或 <paramref name="resultSelector" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-770"><paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector, System.Linq.Expressions.Expression&lt;Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt;&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TResult&gt; GroupBy&lt;TSource, TKey, TResult&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TKey&gt;&gt; keySelector, class System.Linq.Expressions.Expression`1&lt;class System.Func`3&lt;!!TKey, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt;, !!TResult&gt;&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey, TResult) (source As IQueryable(Of TSource), keySelector As Expression(Of Func(Of TSource, TKey)), resultSelector As Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)), comparer As IEqualityComparer(Of TKey)) As IQueryable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable&lt;TResult&gt; ^ GroupBy(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, TKey&gt; ^&gt; ^ keySelector, System::Linq::Expressions::Expression&lt;Func&lt;TKey, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^, TResult&gt; ^&gt; ^ resultSelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member GroupBy : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, 'Key&gt;&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Key, seq&lt;'Source&gt;, 'Result&gt;&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Linq.IQueryable&lt;'Result&gt;" Usage="System.Linq.Queryable.GroupBy (source, keySelector, resultSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TKey&gt;&gt;" />
        <Parameter Name="resultSelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt;&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-771"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-771">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="a43ad-772"><paramref name="keySelector" /> 中表示之函式所傳回索引鍵的型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-772">The type of the key returned by the function represented in <paramref name="keySelector" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="a43ad-773"><paramref name="resultSelector" /> 所傳回之結果值的型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-773">The type of the result value returned by <paramref name="resultSelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-774">要群組其項目的 <see cref="T:System.Linq.IQueryable`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-774">An <see cref="T:System.Linq.IQueryable`1" /> whose elements to group.</span></span></param>
        <param name="keySelector"><span data-ttu-id="a43ad-775">用來擷取各項目之索引鍵的函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-775">A function to extract the key for each element.</span></span></param>
        <param name="resultSelector"><span data-ttu-id="a43ad-776">用來從各個群組建立結果值的函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-776">A function to create a result value from each group.</span></span></param>
        <param name="comparer"><span data-ttu-id="a43ad-777">用來比較金鑰的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-777">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span></span></param>
        <summary><span data-ttu-id="a43ad-778">依據指定的索引鍵選取器函式來群組序列的項目，並從每個群組及其索引鍵建立結果值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-778">Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</span></span> <span data-ttu-id="a43ad-779">索引鍵是使用指定的比較子來進行比較。</span><span class="sxs-lookup"><span data-stu-id="a43ad-779">Keys are compared by using a specified comparer.</span></span></summary>
        <returns><span data-ttu-id="a43ad-780"><c>T:System.Linq.IQueryable\`1</c>，其具有 <paramref name="TResult" /> 的型別引數，而且其中每個項目都代表群組及其索引鍵的投影。</span><span class="sxs-lookup"><span data-stu-id="a43ad-780">An <c>T:System.Linq.IQueryable\`1</c> that has a type argument of <paramref name="TResult" /> and where each element represents a projection over a group and its key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-781">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-781">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-782">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-782">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-783"><xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-783">The <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-784">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-784">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-785">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-785">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-786">預期的行為是它的項目分組`source`由叫用所取得的索引鍵值`keySelector`每個項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-786">The expected behavior is that it groups the elements of `source` by key values that are obtained by invoking `keySelector` on each element.</span></span> <span data-ttu-id="a43ad-787">`comparer`參數用來比較索引鍵和`resultSelector`參數用來從每個群組及其索引鍵取得結果值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-787">The `comparer` parameter is used to compare keys and the `resultSelector` parameter is used to obtain a result value from each group and its key.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-788"><paramref name="source" />、<paramref name="keySelector" />、<paramref name="resultSelector" /> 或 <paramref name="comparer" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-788"><paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="resultSelector" /> or <paramref name="comparer" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey,TElement,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TElement,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TElement&gt;&gt; elementSelector, System.Linq.Expressions.Expression&lt;Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt;&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TResult&gt; GroupBy&lt;TSource, TKey, TElement, TResult&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TKey&gt;&gt; keySelector, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TElement&gt;&gt; elementSelector, class System.Linq.Expressions.Expression`1&lt;class System.Func`3&lt;!!TKey, class System.Collections.Generic.IEnumerable`1&lt;!!TElement&gt;, !!TResult&gt;&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey, TElement, TResult) (source As IQueryable(Of TSource), keySelector As Expression(Of Func(Of TSource, TKey)), elementSelector As Expression(Of Func(Of TSource, TElement)), resultSelector As Expression(Of Func(Of TKey, IEnumerable(Of TElement), TResult))) As IQueryable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable&lt;TResult&gt; ^ GroupBy(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, TKey&gt; ^&gt; ^ keySelector, System::Linq::Expressions::Expression&lt;Func&lt;TSource, TElement&gt; ^&gt; ^ elementSelector, System::Linq::Expressions::Expression&lt;Func&lt;TKey, System::Collections::Generic::IEnumerable&lt;TElement&gt; ^, TResult&gt; ^&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member GroupBy : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, 'Key&gt;&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, 'Element&gt;&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Key, seq&lt;'Element&gt;, 'Result&gt;&gt; -&gt; System.Linq.IQueryable&lt;'Result&gt;" Usage="System.Linq.Queryable.GroupBy (source, keySelector, elementSelector, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TKey&gt;&gt;" />
        <Parameter Name="elementSelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TElement&gt;&gt;" />
        <Parameter Name="resultSelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-789"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-789">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="a43ad-790"><paramref name="keySelector" /> 中表示之函式所傳回索引鍵的型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-790">The type of the key returned by the function represented in <paramref name="keySelector" />.</span></span></typeparam>
        <typeparam name="TElement"><span data-ttu-id="a43ad-791">每個 <see cref="T:System.Linq.IGrouping`2" /> 中的項目型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-791">The type of the elements in each <see cref="T:System.Linq.IGrouping`2" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="a43ad-792"><paramref name="resultSelector" /> 所傳回之結果值的型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-792">The type of the result value returned by <paramref name="resultSelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-793">要群組其項目的 <see cref="T:System.Linq.IQueryable`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-793">An <see cref="T:System.Linq.IQueryable`1" /> whose elements to group.</span></span></param>
        <param name="keySelector"><span data-ttu-id="a43ad-794">用來擷取各項目之索引鍵的函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-794">A function to extract the key for each element.</span></span></param>
        <param name="elementSelector"><span data-ttu-id="a43ad-795">用來將每個來源項目對應至 <see cref="T:System.Linq.IGrouping`2" /> 之項目的函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-795">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</span></span></param>
        <param name="resultSelector"><span data-ttu-id="a43ad-796">用來從各個群組建立結果值的函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-796">A function to create a result value from each group.</span></span></param>
        <summary><span data-ttu-id="a43ad-797">依據指定的索引鍵選取器函式來群組序列的項目，並從每個群組及其索引鍵建立結果值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-797">Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</span></span> <span data-ttu-id="a43ad-798">每個群組的項目都是利用指定的函式進行投影。</span><span class="sxs-lookup"><span data-stu-id="a43ad-798">The elements of each group are projected by using a specified function.</span></span></summary>
        <returns><span data-ttu-id="a43ad-799"><c>T:System.Linq.IQueryable\`1</c>，其具有 <paramref name="TResult" /> 的型別引數，而且其中每個項目都代表群組及其索引鍵的投影。</span><span class="sxs-lookup"><span data-stu-id="a43ad-799">An <c>T:System.Linq.IQueryable\`1</c> that has a type argument of <paramref name="TResult" /> and where each element represents a projection over a group and its key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-800">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-800">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-801">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-801">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-802"><xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-802">The <xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-803">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-803">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-804">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-804">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-805">預期的行為是它的項目分組`source`由叫用所取得的索引鍵值`keySelector`每個項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-805">The expected behavior is that it groups the elements of `source` by key values that are obtained by invoking `keySelector` on each element.</span></span> <span data-ttu-id="a43ad-806">`elementSelector`參數用來在專案的每個群組中，項目和`resultSelector`參數用來從每個群組及其索引鍵取得結果值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-806">The `elementSelector` parameter is used to project the elements of each group, and the `resultSelector` parameter is used to obtain a result value from each group and its key.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-807">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%29>分組序列的項目，以及專案的型別的結果序列`TResult`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-807">The following code example demonstrates how to use <xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%29> to group the elements of a sequence and project a sequence of results of type `TResult`.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#130](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#130)]
 [!code-vb[System.Linq.Queryable#130](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#130)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-808"><paramref name="source" />、<paramref name="keySelector" />、<paramref name="elementSelector" /> 或 <paramref name="resultSelector" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-808"><paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey,TElement,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TElement,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TElement&gt;&gt; elementSelector, System.Linq.Expressions.Expression&lt;Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt;&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TResult&gt; GroupBy&lt;TSource, TKey, TElement, TResult&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TKey&gt;&gt; keySelector, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TElement&gt;&gt; elementSelector, class System.Linq.Expressions.Expression`1&lt;class System.Func`3&lt;!!TKey, class System.Collections.Generic.IEnumerable`1&lt;!!TElement&gt;, !!TResult&gt;&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey, TElement, TResult) (source As IQueryable(Of TSource), keySelector As Expression(Of Func(Of TSource, TKey)), elementSelector As Expression(Of Func(Of TSource, TElement)), resultSelector As Expression(Of Func(Of TKey, IEnumerable(Of TElement), TResult)), comparer As IEqualityComparer(Of TKey)) As IQueryable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable&lt;TResult&gt; ^ GroupBy(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, TKey&gt; ^&gt; ^ keySelector, System::Linq::Expressions::Expression&lt;Func&lt;TSource, TElement&gt; ^&gt; ^ elementSelector, System::Linq::Expressions::Expression&lt;Func&lt;TKey, System::Collections::Generic::IEnumerable&lt;TElement&gt; ^, TResult&gt; ^&gt; ^ resultSelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member GroupBy : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, 'Key&gt;&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, 'Element&gt;&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Key, seq&lt;'Element&gt;, 'Result&gt;&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Linq.IQueryable&lt;'Result&gt;" Usage="System.Linq.Queryable.GroupBy (source, keySelector, elementSelector, resultSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TKey&gt;&gt;" />
        <Parameter Name="elementSelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TElement&gt;&gt;" />
        <Parameter Name="resultSelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt;&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-809"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-809">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="a43ad-810"><paramref name="keySelector" /> 中表示之函式所傳回索引鍵的型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-810">The type of the key returned by the function represented in <paramref name="keySelector" />.</span></span></typeparam>
        <typeparam name="TElement"><span data-ttu-id="a43ad-811">每個 <see cref="T:System.Linq.IGrouping`2" /> 中的項目型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-811">The type of the elements in each <see cref="T:System.Linq.IGrouping`2" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="a43ad-812"><paramref name="resultSelector" /> 所傳回之結果值的型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-812">The type of the result value returned by <paramref name="resultSelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-813">要群組其項目的 <see cref="T:System.Linq.IQueryable`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-813">An <see cref="T:System.Linq.IQueryable`1" /> whose elements to group.</span></span></param>
        <param name="keySelector"><span data-ttu-id="a43ad-814">用來擷取各項目之索引鍵的函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-814">A function to extract the key for each element.</span></span></param>
        <param name="elementSelector"><span data-ttu-id="a43ad-815">用來將每個來源項目對應至 <see cref="T:System.Linq.IGrouping`2" /> 之項目的函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-815">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</span></span></param>
        <param name="resultSelector"><span data-ttu-id="a43ad-816">用來從各個群組建立結果值的函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-816">A function to create a result value from each group.</span></span></param>
        <param name="comparer"><span data-ttu-id="a43ad-817">用來比較金鑰的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-817">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span></span></param>
        <summary><span data-ttu-id="a43ad-818">依據指定的索引鍵選取器函式來群組序列的項目，並從每個群組及其索引鍵建立結果值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-818">Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</span></span> <span data-ttu-id="a43ad-819">索引鍵是使用指定的比較子來進行比較，而每個群組的項目則都是利用指定的函式進行投影。</span><span class="sxs-lookup"><span data-stu-id="a43ad-819">Keys are compared by using a specified comparer and the elements of each group are projected by using a specified function.</span></span></summary>
        <returns><span data-ttu-id="a43ad-820"><c>T:System.Linq.IQueryable\`1</c>，其具有 <paramref name="TResult" /> 的型別引數，而且其中每個項目都代表群組及其索引鍵的投影。</span><span class="sxs-lookup"><span data-stu-id="a43ad-820">An <c>T:System.Linq.IQueryable\`1</c> that has a type argument of <paramref name="TResult" /> and where each element represents a projection over a group and its key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-821">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-821">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-822">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-822">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-823"><xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-823">The <xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-824">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-824">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-825">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-825">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-826">預期的行為是它的項目分組`source`由叫用所取得的索引鍵值`keySelector`每個項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-826">The expected behavior is that it groups the elements of `source` by key values that are obtained by invoking `keySelector` on each element.</span></span> <span data-ttu-id="a43ad-827">`comparer`參數用來比較索引鍵的值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-827">The `comparer` parameter is used to compare key values.</span></span> <span data-ttu-id="a43ad-828">`elementSelector`參數用來在專案的每個群組中，項目和`resultSelector`參數用來從每個群組及其索引鍵取得結果值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-828">The `elementSelector` parameter is used to project the elements of each group, and the `resultSelector` parameter is used to obtain a result value from each group and its key.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-829"><paramref name="source" />、<paramref name="keySelector" />、<paramref name="elementSelector" />、<paramref name="resultSelector" /> 或 <paramref name="comparer" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-829"><paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> or <paramref name="resultSelector" /> or <paramref name="comparer" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GroupJoin&lt;TOuter,TInner,TKey,TResult&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a43ad-830">根據索引鍵相等與否，將兩個序列的項目相互關聯，並群組產生的結果。</span><span class="sxs-lookup"><span data-stu-id="a43ad-830">Correlates the elements of two sequences based on key equality and groups the results.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GroupJoin&lt;TOuter,TInner,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TResult&gt; GroupJoin&lt;TOuter,TInner,TKey,TResult&gt; (this System.Linq.IQueryable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, System.Linq.Expressions.Expression&lt;Func&lt;TOuter,TKey&gt;&gt; outerKeySelector, System.Linq.Expressions.Expression&lt;Func&lt;TInner,TKey&gt;&gt; innerKeySelector, System.Linq.Expressions.Expression&lt;Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt;&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TResult&gt; GroupJoin&lt;TOuter, TInner, TKey, TResult&gt;(class System.Linq.IQueryable`1&lt;!!TOuter&gt; outer, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt; inner, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TOuter, !!TKey&gt;&gt; outerKeySelector, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TInner, !!TKey&gt;&gt; innerKeySelector, class System.Linq.Expressions.Expression`1&lt;class System.Func`3&lt;!!TOuter, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt;, !!TResult&gt;&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupJoin(Of TOuter, TInner, TKey, TResult) (outer As IQueryable(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Expression(Of Func(Of TOuter, TKey)), innerKeySelector As Expression(Of Func(Of TInner, TKey)), resultSelector As Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult))) As IQueryable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOuter, typename TInner, typename TKey, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable&lt;TResult&gt; ^ GroupJoin(System::Linq::IQueryable&lt;TOuter&gt; ^ outer, System::Collections::Generic::IEnumerable&lt;TInner&gt; ^ inner, System::Linq::Expressions::Expression&lt;Func&lt;TOuter, TKey&gt; ^&gt; ^ outerKeySelector, System::Linq::Expressions::Expression&lt;Func&lt;TInner, TKey&gt; ^&gt; ^ innerKeySelector, System::Linq::Expressions::Expression&lt;Func&lt;TOuter, System::Collections::Generic::IEnumerable&lt;TInner&gt; ^, TResult&gt; ^&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member GroupJoin : System.Linq.IQueryable&lt;'Outer&gt; * seq&lt;'Inner&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Outer, 'Key&gt;&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Inner, 'Key&gt;&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Outer, seq&lt;'Inner&gt;, 'Result&gt;&gt; -&gt; System.Linq.IQueryable&lt;'Result&gt;" Usage="System.Linq.Queryable.GroupJoin (outer, inner, outerKeySelector, innerKeySelector, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOuter" />
        <TypeParameter Name="TInner" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="outer" Type="System.Linq.IQueryable&lt;TOuter&gt;" RefType="this" />
        <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable&lt;TInner&gt;" />
        <Parameter Name="outerKeySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TOuter,TKey&gt;&gt;" />
        <Parameter Name="innerKeySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TInner,TKey&gt;&gt;" />
        <Parameter Name="resultSelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOuter"><span data-ttu-id="a43ad-831">第一個序列之項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-831">The type of the elements of the first sequence.</span></span></typeparam>
        <typeparam name="TInner"><span data-ttu-id="a43ad-832">第二個序列之項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-832">The type of the elements of the second sequence.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="a43ad-833">索引鍵選取器函式所傳回之索引鍵的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-833">The type of the keys returned by the key selector functions.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="a43ad-834">結果項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-834">The type of the result elements.</span></span></typeparam>
        <param name="outer"><span data-ttu-id="a43ad-835">要聯結的第一個序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-835">The first sequence to join.</span></span></param>
        <param name="inner"><span data-ttu-id="a43ad-836">要加入第一個序列的序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-836">The sequence to join to the first sequence.</span></span></param>
        <param name="outerKeySelector"><span data-ttu-id="a43ad-837">用來從第一個序列各個項目擷取聯結索引鍵的函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-837">A function to extract the join key from each element of the first sequence.</span></span></param>
        <param name="innerKeySelector"><span data-ttu-id="a43ad-838">用來從第二個序列各個項目擷取聯結索引鍵的函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-838">A function to extract the join key from each element of the second sequence.</span></span></param>
        <param name="resultSelector"><span data-ttu-id="a43ad-839">函式，用來從第一個序列的項目以及第二個序列的相符項目集合建立結果項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-839">A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</span></span></param>
        <summary><span data-ttu-id="a43ad-840">根據索引鍵相等與否，將兩個序列的項目相互關聯，並群組產生的結果。</span><span class="sxs-lookup"><span data-stu-id="a43ad-840">Correlates the elements of two sequences based on key equality and groups the results.</span></span> <span data-ttu-id="a43ad-841">預設的相等比較子是用於比較索引鍵。</span><span class="sxs-lookup"><span data-stu-id="a43ad-841">The default equality comparer is used to compare keys.</span></span></summary>
        <returns><span data-ttu-id="a43ad-842"><see cref="T:System.Linq.IQueryable`1" />，其中包含透過對兩個序列執行群組聯結所取得之型別 <paramref name="TResult" /> 的項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-842">An <see cref="T:System.Linq.IQueryable`1" /> that contains elements of type <paramref name="TResult" /> obtained by performing a grouped join on two sequences.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-843">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-843">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-844">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-844">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-845"><xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-845">The <xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-846">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`outer`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-846">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `outer` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-847">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%29>之型別的實作而定`outer`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-847">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%29> depends on the implementation of the type of the `outer` parameter.</span></span> <span data-ttu-id="a43ad-848">預期的行為是，`outerKeySelector`並`innerKeySelector`函數用來擷取索引鍵`outer`和`inner`分別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-848">The expected behavior is that the `outerKeySelector` and `innerKeySelector` functions are used to extract keys from `outer` and `inner`, respectively.</span></span> <span data-ttu-id="a43ad-849">這些金鑰會比較比對中的每個項目是否相等`outer`的零或多個項目和`inner`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-849">These keys are compared for equality to match each element in `outer` with zero or more elements from `inner`.</span></span> <span data-ttu-id="a43ad-850">則`resultSelector`函式會叫用投影的結果物件，從每個群組的相互關聯的項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-850">Then the `resultSelector` function is invoked to project a result object from each group of correlated elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-851">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%29>上兩個序列執行群組的聯結。</span><span class="sxs-lookup"><span data-stu-id="a43ad-851">The following code example demonstrates how to use <xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%29> to perform a grouped join on two sequences.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#40](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#40)]
 [!code-vb[System.Linq.Queryable#40](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#40)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-852"><paramref name="outer" />、<paramref name="inner" />、<paramref name="outerKeySelector" />、<paramref name="innerKeySelector" /> 或 <paramref name="resultSelector" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-852"><paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GroupJoin&lt;TOuter,TInner,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TResult&gt; GroupJoin&lt;TOuter,TInner,TKey,TResult&gt; (this System.Linq.IQueryable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, System.Linq.Expressions.Expression&lt;Func&lt;TOuter,TKey&gt;&gt; outerKeySelector, System.Linq.Expressions.Expression&lt;Func&lt;TInner,TKey&gt;&gt; innerKeySelector, System.Linq.Expressions.Expression&lt;Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt;&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TResult&gt; GroupJoin&lt;TOuter, TInner, TKey, TResult&gt;(class System.Linq.IQueryable`1&lt;!!TOuter&gt; outer, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt; inner, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TOuter, !!TKey&gt;&gt; outerKeySelector, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TInner, !!TKey&gt;&gt; innerKeySelector, class System.Linq.Expressions.Expression`1&lt;class System.Func`3&lt;!!TOuter, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt;, !!TResult&gt;&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupJoin(Of TOuter, TInner, TKey, TResult) (outer As IQueryable(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Expression(Of Func(Of TOuter, TKey)), innerKeySelector As Expression(Of Func(Of TInner, TKey)), resultSelector As Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult)), comparer As IEqualityComparer(Of TKey)) As IQueryable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOuter, typename TInner, typename TKey, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable&lt;TResult&gt; ^ GroupJoin(System::Linq::IQueryable&lt;TOuter&gt; ^ outer, System::Collections::Generic::IEnumerable&lt;TInner&gt; ^ inner, System::Linq::Expressions::Expression&lt;Func&lt;TOuter, TKey&gt; ^&gt; ^ outerKeySelector, System::Linq::Expressions::Expression&lt;Func&lt;TInner, TKey&gt; ^&gt; ^ innerKeySelector, System::Linq::Expressions::Expression&lt;Func&lt;TOuter, System::Collections::Generic::IEnumerable&lt;TInner&gt; ^, TResult&gt; ^&gt; ^ resultSelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member GroupJoin : System.Linq.IQueryable&lt;'Outer&gt; * seq&lt;'Inner&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Outer, 'Key&gt;&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Inner, 'Key&gt;&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Outer, seq&lt;'Inner&gt;, 'Result&gt;&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Linq.IQueryable&lt;'Result&gt;" Usage="System.Linq.Queryable.GroupJoin (outer, inner, outerKeySelector, innerKeySelector, resultSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOuter" />
        <TypeParameter Name="TInner" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="outer" Type="System.Linq.IQueryable&lt;TOuter&gt;" RefType="this" />
        <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable&lt;TInner&gt;" />
        <Parameter Name="outerKeySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TOuter,TKey&gt;&gt;" />
        <Parameter Name="innerKeySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TInner,TKey&gt;&gt;" />
        <Parameter Name="resultSelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt;&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOuter"><span data-ttu-id="a43ad-853">第一個序列之項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-853">The type of the elements of the first sequence.</span></span></typeparam>
        <typeparam name="TInner"><span data-ttu-id="a43ad-854">第二個序列之項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-854">The type of the elements of the second sequence.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="a43ad-855">索引鍵選取器函式所傳回之索引鍵的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-855">The type of the keys returned by the key selector functions.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="a43ad-856">結果項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-856">The type of the result elements.</span></span></typeparam>
        <param name="outer"><span data-ttu-id="a43ad-857">要聯結的第一個序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-857">The first sequence to join.</span></span></param>
        <param name="inner"><span data-ttu-id="a43ad-858">要加入第一個序列的序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-858">The sequence to join to the first sequence.</span></span></param>
        <param name="outerKeySelector"><span data-ttu-id="a43ad-859">用來從第一個序列各個項目擷取聯結索引鍵的函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-859">A function to extract the join key from each element of the first sequence.</span></span></param>
        <param name="innerKeySelector"><span data-ttu-id="a43ad-860">用來從第二個序列各個項目擷取聯結索引鍵的函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-860">A function to extract the join key from each element of the second sequence.</span></span></param>
        <param name="resultSelector"><span data-ttu-id="a43ad-861">函式，用來從第一個序列的項目以及第二個序列的相符項目集合建立結果項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-861">A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</span></span></param>
        <param name="comparer"><span data-ttu-id="a43ad-862">用來雜湊及比較索引鍵的比較子。</span><span class="sxs-lookup"><span data-stu-id="a43ad-862">A comparer to hash and compare keys.</span></span></param>
        <summary><span data-ttu-id="a43ad-863">根據索引鍵相等與否，將兩個序列的項目相互關聯，並群組產生的結果。</span><span class="sxs-lookup"><span data-stu-id="a43ad-863">Correlates the elements of two sequences based on key equality and groups the results.</span></span> <span data-ttu-id="a43ad-864">指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 是用於比較索引鍵。</span><span class="sxs-lookup"><span data-stu-id="a43ad-864">A specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> is used to compare keys.</span></span></summary>
        <returns><span data-ttu-id="a43ad-865"><see cref="T:System.Linq.IQueryable`1" />，其中包含透過對兩個序列執行群組聯結所取得之型別 <paramref name="TResult" /> 的項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-865">An <see cref="T:System.Linq.IQueryable`1" /> that contains elements of type <paramref name="TResult" /> obtained by performing a grouped join on two sequences.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-866">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-866">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-867">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-867">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-868"><xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-868">The <xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-869">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`outer`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-869">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `outer` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-870">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29>之型別的實作而定`outer`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-870">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29> depends on the implementation of the type of the `outer` parameter.</span></span> <span data-ttu-id="a43ad-871">預期的行為是，`outerKeySelector`並`innerKeySelector`函數用來擷取索引鍵`outer`和`inner`分別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-871">The expected behavior is that the `outerKeySelector` and `innerKeySelector` functions are used to extract keys from `outer` and `inner`, respectively.</span></span> <span data-ttu-id="a43ad-872">這些金鑰會使用比較是否相等`comparer`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-872">These keys are compared for equality by using `comparer`.</span></span> <span data-ttu-id="a43ad-873">比較的結果用來比對中的每個項目`outer`的零或多個項目和`inner`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-873">The outcome of the comparisons is used to match each element in `outer` with zero or more elements from `inner`.</span></span> <span data-ttu-id="a43ad-874">則`resultSelector`函式會叫用投影的結果物件，從每個群組的相互關聯的項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-874">Then the `resultSelector` function is invoked to project a result object from each group of correlated elements.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-875"><paramref name="outer" />、<paramref name="inner" />、<paramref name="outerKeySelector" />、<paramref name="innerKeySelector" /> 或 <paramref name="resultSelector" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-875"><paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Intersect&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a43ad-876">產生兩個序列的交集。</span><span class="sxs-lookup"><span data-stu-id="a43ad-876">Produces the set intersection of two sequences.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Intersect&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; Intersect&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source1, System.Collections.Generic.IEnumerable&lt;TSource&gt; source2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TSource&gt; Intersect&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source1, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Intersect(Of TSource) (source1 As IQueryable(Of TSource), source2 As IEnumerable(Of TSource)) As IQueryable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable&lt;TSource&gt; ^ Intersect(System::Linq::IQueryable&lt;TSource&gt; ^ source1, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source2);" />
      <MemberSignature Language="F#" Value="static member Intersect : System.Linq.IQueryable&lt;'Source&gt; * seq&lt;'Source&gt; -&gt; System.Linq.IQueryable&lt;'Source&gt;" Usage="System.Linq.Queryable.Intersect (source1, source2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source1" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="source2" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-877">輸入序列之項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-877">The type of the elements of the input sequences.</span></span></typeparam>
        <param name="source1"><span data-ttu-id="a43ad-878">傳回其獨特項目同時出現在 <paramref name="source2" /> 中的序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-878">A sequence whose distinct elements that also appear in <paramref name="source2" /> are returned.</span></span></param>
        <param name="source2"><span data-ttu-id="a43ad-879">傳回其獨特項目同時出現在第一個序列中的序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-879">A sequence whose distinct elements that also appear in the first sequence are returned.</span></span></param>
        <summary><span data-ttu-id="a43ad-880">使用預設相等比較子來比較值，以便產生兩個序列的交集。</span><span class="sxs-lookup"><span data-stu-id="a43ad-880">Produces the set intersection of two sequences by using the default equality comparer to compare values.</span></span></summary>
        <returns><span data-ttu-id="a43ad-881">包含兩個序列之交集的序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-881">A sequence that contains the set intersection of the two sequences.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-882"><xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-882">The <xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-883">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source1`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-883">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source1` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-884">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29>之型別的實作而定`source1`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-884">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> depends on the implementation of the type of the `source1` parameter.</span></span> <span data-ttu-id="a43ad-885">預期的行為是中的所有項目`source1`，這些也在`source2`會傳回。</span><span class="sxs-lookup"><span data-stu-id="a43ad-885">The expected behavior is that all the elements in `source1` that are also in `source2` are returned.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-886">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29>返回在兩個序列的每個出現的項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-886">The following code example demonstrates how to use <xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> to return the elements that appear in each of two sequences.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#41](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#41)]
 [!code-vb[System.Linq.Queryable#41](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-887"><paramref name="source1" /> 或 <paramref name="source2" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-887"><paramref name="source1" /> or <paramref name="source2" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Intersect&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; Intersect&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source1, System.Collections.Generic.IEnumerable&lt;TSource&gt; source2, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TSource&gt; Intersect&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source1, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source2, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Intersect(Of TSource) (source1 As IQueryable(Of TSource), source2 As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As IQueryable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable&lt;TSource&gt; ^ Intersect(System::Linq::IQueryable&lt;TSource&gt; ^ source1, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source2, System::Collections::Generic::IEqualityComparer&lt;TSource&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Intersect : System.Linq.IQueryable&lt;'Source&gt; * seq&lt;'Source&gt; * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; System.Linq.IQueryable&lt;'Source&gt;" Usage="System.Linq.Queryable.Intersect (source1, source2, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source1" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="source2" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-888">輸入序列之項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-888">The type of the elements of the input sequences.</span></span></typeparam>
        <param name="source1"><span data-ttu-id="a43ad-889">傳回其獨特項目同時出現在 <paramref name="source2" /> 中的 <see cref="T:System.Linq.IQueryable`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-889">An <see cref="T:System.Linq.IQueryable`1" /> whose distinct elements that also appear in <paramref name="source2" /> are returned.</span></span></param>
        <param name="source2"><span data-ttu-id="a43ad-890">傳回其獨特項目同時出現在第一個序列中的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-890">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in the first sequence are returned.</span></span></param>
        <param name="comparer"><span data-ttu-id="a43ad-891">用來比較值的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-891">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span></span></param>
        <summary><span data-ttu-id="a43ad-892">使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 來比較值，以便產生兩個序列的交集。</span><span class="sxs-lookup"><span data-stu-id="a43ad-892">Produces the set intersection of two sequences by using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span></span></summary>
        <returns><span data-ttu-id="a43ad-893"><see cref="T:System.Linq.IQueryable`1" />，其中包含兩個序列的交集。</span><span class="sxs-lookup"><span data-stu-id="a43ad-893">An <see cref="T:System.Linq.IQueryable`1" /> that contains the set intersection of the two sequences.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-894"><xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-894">The <xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-895">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source1`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-895">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source1` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-896">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29>之型別的實作而定`source1`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-896">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> depends on the implementation of the type of the `source1` parameter.</span></span> <span data-ttu-id="a43ad-897">預期的行為是中的所有項目`source1`，這些也在`source2`會傳回。</span><span class="sxs-lookup"><span data-stu-id="a43ad-897">The expected behavior is that all the elements in `source1` that are also in `source2` are returned.</span></span> <span data-ttu-id="a43ad-898">`comparer`參數用來比較項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-898">The `comparer` parameter is used to compare elements.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-899"><paramref name="source1" /> 或 <paramref name="source2" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-899"><paramref name="source1" /> or <paramref name="source2" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Join&lt;TOuter,TInner,TKey,TResult&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a43ad-900">根據相符索引鍵，將兩個序列的項目相互關聯。</span><span class="sxs-lookup"><span data-stu-id="a43ad-900">Correlates the elements of two sequences based on matching keys.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Join&lt;TOuter,TInner,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TResult&gt; Join&lt;TOuter,TInner,TKey,TResult&gt; (this System.Linq.IQueryable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, System.Linq.Expressions.Expression&lt;Func&lt;TOuter,TKey&gt;&gt; outerKeySelector, System.Linq.Expressions.Expression&lt;Func&lt;TInner,TKey&gt;&gt; innerKeySelector, System.Linq.Expressions.Expression&lt;Func&lt;TOuter,TInner,TResult&gt;&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TResult&gt; Join&lt;TOuter, TInner, TKey, TResult&gt;(class System.Linq.IQueryable`1&lt;!!TOuter&gt; outer, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt; inner, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TOuter, !!TKey&gt;&gt; outerKeySelector, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TInner, !!TKey&gt;&gt; innerKeySelector, class System.Linq.Expressions.Expression`1&lt;class System.Func`3&lt;!!TOuter, !!TInner, !!TResult&gt;&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Join(Of TOuter, TInner, TKey, TResult) (outer As IQueryable(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Expression(Of Func(Of TOuter, TKey)), innerKeySelector As Expression(Of Func(Of TInner, TKey)), resultSelector As Expression(Of Func(Of TOuter, TInner, TResult))) As IQueryable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOuter, typename TInner, typename TKey, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable&lt;TResult&gt; ^ Join(System::Linq::IQueryable&lt;TOuter&gt; ^ outer, System::Collections::Generic::IEnumerable&lt;TInner&gt; ^ inner, System::Linq::Expressions::Expression&lt;Func&lt;TOuter, TKey&gt; ^&gt; ^ outerKeySelector, System::Linq::Expressions::Expression&lt;Func&lt;TInner, TKey&gt; ^&gt; ^ innerKeySelector, System::Linq::Expressions::Expression&lt;Func&lt;TOuter, TInner, TResult&gt; ^&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member Join : System.Linq.IQueryable&lt;'Outer&gt; * seq&lt;'Inner&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Outer, 'Key&gt;&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Inner, 'Key&gt;&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Outer, 'Inner, 'Result&gt;&gt; -&gt; System.Linq.IQueryable&lt;'Result&gt;" Usage="System.Linq.Queryable.Join (outer, inner, outerKeySelector, innerKeySelector, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOuter" />
        <TypeParameter Name="TInner" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="outer" Type="System.Linq.IQueryable&lt;TOuter&gt;" RefType="this" />
        <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable&lt;TInner&gt;" />
        <Parameter Name="outerKeySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TOuter,TKey&gt;&gt;" />
        <Parameter Name="innerKeySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TInner,TKey&gt;&gt;" />
        <Parameter Name="resultSelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TOuter,TInner,TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOuter"><span data-ttu-id="a43ad-901">第一個序列之項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-901">The type of the elements of the first sequence.</span></span></typeparam>
        <typeparam name="TInner"><span data-ttu-id="a43ad-902">第二個序列之項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-902">The type of the elements of the second sequence.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="a43ad-903">索引鍵選取器函式所傳回之索引鍵的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-903">The type of the keys returned by the key selector functions.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="a43ad-904">結果項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-904">The type of the result elements.</span></span></typeparam>
        <param name="outer"><span data-ttu-id="a43ad-905">要聯結的第一個序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-905">The first sequence to join.</span></span></param>
        <param name="inner"><span data-ttu-id="a43ad-906">要加入第一個序列的序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-906">The sequence to join to the first sequence.</span></span></param>
        <param name="outerKeySelector"><span data-ttu-id="a43ad-907">用來從第一個序列各個項目擷取聯結索引鍵的函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-907">A function to extract the join key from each element of the first sequence.</span></span></param>
        <param name="innerKeySelector"><span data-ttu-id="a43ad-908">用來從第二個序列各個項目擷取聯結索引鍵的函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-908">A function to extract the join key from each element of the second sequence.</span></span></param>
        <param name="resultSelector"><span data-ttu-id="a43ad-909">用來從兩個相符項目建立結果項目的函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-909">A function to create a result element from two matching elements.</span></span></param>
        <summary><span data-ttu-id="a43ad-910">根據相符索引鍵，將兩個序列的項目相互關聯。</span><span class="sxs-lookup"><span data-stu-id="a43ad-910">Correlates the elements of two sequences based on matching keys.</span></span> <span data-ttu-id="a43ad-911">預設的相等比較子是用於比較索引鍵。</span><span class="sxs-lookup"><span data-stu-id="a43ad-911">The default equality comparer is used to compare keys.</span></span></summary>
        <returns><span data-ttu-id="a43ad-912"><see cref="T:System.Linq.IQueryable`1" />，其具有透過對兩個序列執行內部聯結所取得之型別 <paramref name="TResult" /> 的項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-912">An <see cref="T:System.Linq.IQueryable`1" /> that has elements of type <paramref name="TResult" /> obtained by performing an inner join on two sequences.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-913">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-913">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-914">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-914">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-915"><xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-915">The <xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-916">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`outer`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-916">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `outer` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-917">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%29>之型別的實作而定`outer`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-917">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%29> depends on the implementation of the type of the `outer` parameter.</span></span> <span data-ttu-id="a43ad-918">預期的行為是內部聯結。</span><span class="sxs-lookup"><span data-stu-id="a43ad-918">The expected behavior is that of an inner join.</span></span> <span data-ttu-id="a43ad-919">`outerKeySelector`並`innerKeySelector`函數用來擷取索引鍵`outer`和`inner`分別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-919">The `outerKeySelector` and `innerKeySelector` functions are used to extract keys from `outer` and `inner`, respectively.</span></span> <span data-ttu-id="a43ad-920">這些金鑰會比較比對每個序列的項目相等。</span><span class="sxs-lookup"><span data-stu-id="a43ad-920">These keys are compared for equality to match elements from each sequence.</span></span> <span data-ttu-id="a43ad-921">將成對項目會儲存在每個項目`inner`符合中的項目`outer`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-921">A pair of elements is stored for each element in `inner` that matches an element in `outer`.</span></span> <span data-ttu-id="a43ad-922">則`resultSelector`函式會叫用投影結果物件的每個配對的相符項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-922">Then the `resultSelector` function is invoked to project a result object from each pair of matching elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-923">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%29>執行一般的索引鍵為基礎的兩個序列的內部聯結。</span><span class="sxs-lookup"><span data-stu-id="a43ad-923">The following code example demonstrates how to use <xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%29> to perform an inner join of two sequences based on a common key.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#42](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#42)]
 [!code-vb[System.Linq.Queryable#42](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-924"><paramref name="outer" />、<paramref name="inner" />、<paramref name="outerKeySelector" />、<paramref name="innerKeySelector" /> 或 <paramref name="resultSelector" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-924"><paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Join&lt;TOuter,TInner,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TResult&gt; Join&lt;TOuter,TInner,TKey,TResult&gt; (this System.Linq.IQueryable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, System.Linq.Expressions.Expression&lt;Func&lt;TOuter,TKey&gt;&gt; outerKeySelector, System.Linq.Expressions.Expression&lt;Func&lt;TInner,TKey&gt;&gt; innerKeySelector, System.Linq.Expressions.Expression&lt;Func&lt;TOuter,TInner,TResult&gt;&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TResult&gt; Join&lt;TOuter, TInner, TKey, TResult&gt;(class System.Linq.IQueryable`1&lt;!!TOuter&gt; outer, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt; inner, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TOuter, !!TKey&gt;&gt; outerKeySelector, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TInner, !!TKey&gt;&gt; innerKeySelector, class System.Linq.Expressions.Expression`1&lt;class System.Func`3&lt;!!TOuter, !!TInner, !!TResult&gt;&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Join(Of TOuter, TInner, TKey, TResult) (outer As IQueryable(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Expression(Of Func(Of TOuter, TKey)), innerKeySelector As Expression(Of Func(Of TInner, TKey)), resultSelector As Expression(Of Func(Of TOuter, TInner, TResult)), comparer As IEqualityComparer(Of TKey)) As IQueryable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOuter, typename TInner, typename TKey, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable&lt;TResult&gt; ^ Join(System::Linq::IQueryable&lt;TOuter&gt; ^ outer, System::Collections::Generic::IEnumerable&lt;TInner&gt; ^ inner, System::Linq::Expressions::Expression&lt;Func&lt;TOuter, TKey&gt; ^&gt; ^ outerKeySelector, System::Linq::Expressions::Expression&lt;Func&lt;TInner, TKey&gt; ^&gt; ^ innerKeySelector, System::Linq::Expressions::Expression&lt;Func&lt;TOuter, TInner, TResult&gt; ^&gt; ^ resultSelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Join : System.Linq.IQueryable&lt;'Outer&gt; * seq&lt;'Inner&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Outer, 'Key&gt;&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Inner, 'Key&gt;&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Outer, 'Inner, 'Result&gt;&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Linq.IQueryable&lt;'Result&gt;" Usage="System.Linq.Queryable.Join (outer, inner, outerKeySelector, innerKeySelector, resultSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOuter" />
        <TypeParameter Name="TInner" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="outer" Type="System.Linq.IQueryable&lt;TOuter&gt;" RefType="this" />
        <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable&lt;TInner&gt;" />
        <Parameter Name="outerKeySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TOuter,TKey&gt;&gt;" />
        <Parameter Name="innerKeySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TInner,TKey&gt;&gt;" />
        <Parameter Name="resultSelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TOuter,TInner,TResult&gt;&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOuter"><span data-ttu-id="a43ad-925">第一個序列之項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-925">The type of the elements of the first sequence.</span></span></typeparam>
        <typeparam name="TInner"><span data-ttu-id="a43ad-926">第二個序列之項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-926">The type of the elements of the second sequence.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="a43ad-927">索引鍵選取器函式所傳回之索引鍵的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-927">The type of the keys returned by the key selector functions.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="a43ad-928">結果項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-928">The type of the result elements.</span></span></typeparam>
        <param name="outer"><span data-ttu-id="a43ad-929">要聯結的第一個序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-929">The first sequence to join.</span></span></param>
        <param name="inner"><span data-ttu-id="a43ad-930">要加入第一個序列的序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-930">The sequence to join to the first sequence.</span></span></param>
        <param name="outerKeySelector"><span data-ttu-id="a43ad-931">用來從第一個序列各個項目擷取聯結索引鍵的函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-931">A function to extract the join key from each element of the first sequence.</span></span></param>
        <param name="innerKeySelector"><span data-ttu-id="a43ad-932">用來從第二個序列各個項目擷取聯結索引鍵的函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-932">A function to extract the join key from each element of the second sequence.</span></span></param>
        <param name="resultSelector"><span data-ttu-id="a43ad-933">用來從兩個相符項目建立結果項目的函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-933">A function to create a result element from two matching elements.</span></span></param>
        <param name="comparer"><span data-ttu-id="a43ad-934">用來雜湊及比較索引鍵的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-934">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to hash and compare keys.</span></span></param>
        <summary><span data-ttu-id="a43ad-935">根據相符索引鍵，將兩個序列的項目相互關聯。</span><span class="sxs-lookup"><span data-stu-id="a43ad-935">Correlates the elements of two sequences based on matching keys.</span></span> <span data-ttu-id="a43ad-936">指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 是用於比較索引鍵。</span><span class="sxs-lookup"><span data-stu-id="a43ad-936">A specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> is used to compare keys.</span></span></summary>
        <returns><span data-ttu-id="a43ad-937"><see cref="T:System.Linq.IQueryable`1" />，其具有透過對兩個序列執行內部聯結所取得之型別 <paramref name="TResult" /> 的項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-937">An <see cref="T:System.Linq.IQueryable`1" /> that has elements of type <paramref name="TResult" /> obtained by performing an inner join on two sequences.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-938">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-938">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-939">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-939">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-940"><xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-940">The <xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-941">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`outer`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-941">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `outer` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-942">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29>之型別的實作而定`outer`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-942">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29> depends on the implementation of the type of the `outer` parameter.</span></span> <span data-ttu-id="a43ad-943">預期的行為是內部聯結。</span><span class="sxs-lookup"><span data-stu-id="a43ad-943">The expected behavior is that of an inner join.</span></span> <span data-ttu-id="a43ad-944">`outerKeySelector`並`innerKeySelector`函數用來擷取索引鍵`outer`和`inner`分別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-944">The `outerKeySelector` and `innerKeySelector` functions are used to extract keys from `outer` and `inner`, respectively.</span></span> <span data-ttu-id="a43ad-945">這些金鑰會使用比較是否相等`comparer`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-945">These keys are compared for equality by using `comparer`.</span></span> <span data-ttu-id="a43ad-946">比較的結果用來建立每個項目中相符的配對`inner`符合中的項目`outer`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-946">The outcome of the comparisons is used to create a matching pair for each element in `inner` that matches an element in `outer`.</span></span> <span data-ttu-id="a43ad-947">則`resultSelector`函式會叫用投影結果物件的每個配對的相符項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-947">Then the `resultSelector` function is invoked to project a result object from each pair of matching elements.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-948"><paramref name="outer" />、<paramref name="inner" />、<paramref name="outerKeySelector" />、<paramref name="innerKeySelector" /> 或 <paramref name="resultSelector" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-948"><paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Last&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a43ad-949">傳回序列中的最後一個項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-949">Returns the last element in a sequence.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Last&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Last&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Last&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Last(Of TSource) (source As IQueryable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Last(System::Linq::IQueryable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Last : System.Linq.IQueryable&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Queryable.Last source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-950"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-950">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-951">要傳回最後一個項目的 <see cref="T:System.Linq.IQueryable`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-951">An <see cref="T:System.Linq.IQueryable`1" /> to return the last element of.</span></span></param>
        <summary><span data-ttu-id="a43ad-952">傳回序列中的最後一個項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-952">Returns the last element in a sequence.</span></span></summary>
        <returns><span data-ttu-id="a43ad-953">位於 <paramref name="source" /> 中最後一個位置的值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-953">The value at the last position in <paramref name="source" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-954"><xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-954">The <xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-955">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-955">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-956">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-956">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-957">預期的行為是，它會傳回最後一個元素`source`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-957">The expected behavior is that it returns the last element in `source`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-958">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>傳回陣列的最後一個元素。</span><span class="sxs-lookup"><span data-stu-id="a43ad-958">The following code example demonstrates how to use <xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> to return the last element of an array.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#43](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#43)]
 [!code-vb[System.Linq.Queryable#43](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#43)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-959"><paramref name="source" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-959"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a43ad-960">來源序列為空。</span><span class="sxs-lookup"><span data-stu-id="a43ad-960">The source sequence is empty.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Last&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Last&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Last&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Last(Of TSource) (source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean))) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Last(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, bool&gt; ^&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member Last : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, bool&gt;&gt; -&gt; 'Source" Usage="System.Linq.Queryable.Last (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-961"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-961">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-962">傳回項目的 <see cref="T:System.Linq.IQueryable`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-962">An <see cref="T:System.Linq.IQueryable`1" /> to return an element from.</span></span></param>
        <param name="predicate"><span data-ttu-id="a43ad-963">用來測試每個項目是否符合條件的函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-963">A function to test each element for a condition.</span></span></param>
        <summary><span data-ttu-id="a43ad-964">傳回序列中符合指定之條件的最後一個元素。</span><span class="sxs-lookup"><span data-stu-id="a43ad-964">Returns the last element of a sequence that satisfies a specified condition.</span></span></summary>
        <returns><span data-ttu-id="a43ad-965"><paramref name="source" /> 中通過 <paramref name="predicate" /> 指定之測試的最後一個項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-965">The last element in <paramref name="source" /> that passes the test specified by <paramref name="predicate" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-966">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-966">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-967">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-967">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-968"><xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-968">The <xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-969">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-969">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-970">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-970">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-971">預期的行為是，它會傳回最後一個元素`source`，可滿足所指定的條件`predicate`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-971">The expected behavior is that it returns the last element in `source` that satisfies the condition specified by `predicate`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-972">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29>傳回陣列，符合條件的最後一個元素。</span><span class="sxs-lookup"><span data-stu-id="a43ad-972">The following code example demonstrates how to use <xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> to return the last element of an array that satisfies a condition.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#44](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#44)]
 [!code-vb[System.Linq.Queryable#44](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#44)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-973"><paramref name="source" /> 或 <paramref name="predicate" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-973"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a43ad-974">沒有任何項目符合 <paramref name="predicate" /> 的條件。</span><span class="sxs-lookup"><span data-stu-id="a43ad-974">No element satisfies the condition in <paramref name="predicate" />.</span></span>  
  
<span data-ttu-id="a43ad-975">-或-</span><span class="sxs-lookup"><span data-stu-id="a43ad-975">-or-</span></span> 
<span data-ttu-id="a43ad-976">來源序列為空。</span><span class="sxs-lookup"><span data-stu-id="a43ad-976">The source sequence is empty.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="LastOrDefault&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a43ad-977">傳回序列的最後一個項目；如果找不到任何項目，則傳回預設值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-977">Returns the last element of a sequence, or a default value if no element is found.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LastOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource LastOrDefault&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource LastOrDefault&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LastOrDefault(Of TSource) (source As IQueryable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource LastOrDefault(System::Linq::IQueryable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member LastOrDefault : System.Linq.IQueryable&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Queryable.LastOrDefault source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-978"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-978">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-979">要傳回最後一個項目的 <see cref="T:System.Linq.IQueryable`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-979">An <see cref="T:System.Linq.IQueryable`1" /> to return the last element of.</span></span></param>
        <summary><span data-ttu-id="a43ad-980">傳回序列中的最後一個項目；如果序列中沒有包含任何項目，則傳回預設值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-980">Returns the last element in a sequence, or a default value if the sequence contains no elements.</span></span></summary>
        <returns><span data-ttu-id="a43ad-981">如果 <paramref name="source" /> 是空的，則為 <c>default</c>(<paramref name="TSource" />)；否則為 <paramref name="source" /> 中的最後一個項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-981"><c>default</c>(<paramref name="TSource" />) if <paramref name="source" /> is empty; otherwise, the last element in <paramref name="source" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-982"><xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-982">The <xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-983">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-983">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-984">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-984">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-985">預期的行為是，它會傳回最後一個元素`source`，或預設值，如果`source`是空的。</span><span class="sxs-lookup"><span data-stu-id="a43ad-985">The expected behavior is that it returns the last element in `source`, or a default value if `source` is empty.</span></span>  
  
 <span data-ttu-id="a43ad-986"><xref:System.Linq.Queryable.LastOrDefault%2A>方法不會提供方法來指定預設值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-986">The <xref:System.Linq.Queryable.LastOrDefault%2A> method does not provide a way to specify a default value.</span></span> <span data-ttu-id="a43ad-987">如果您想要指定預設值以外`default(TSource)`，使用<xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29>範例 > 一節中所述的方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-987">If you want to specify a default value other than `default(TSource)`, use the <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> method as described in the Example section.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-988">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>上的空陣列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-988">The following code example demonstrates how to use <xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> on an empty array.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#45](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#45)]
 [!code-vb[System.Linq.Queryable#45](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#45)]  
  
 <span data-ttu-id="a43ad-989">有時值`default(TSource)`不是您想要使用如果集合不包含任何元素的預設值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-989">Sometimes the value of `default(TSource)` is not the default value that you want to use if the collection contains no elements.</span></span> <span data-ttu-id="a43ad-990">除了檢查不必要的預設值的結果，並將它如有必要變更，您可以使用<xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29>方法，以指定您想要使用這個集合是空的預設值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-990">Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> method to specify the default value that you want to use if the collection is empty.</span></span> <span data-ttu-id="a43ad-991">然後，呼叫<xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>取得最後一個項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-991">Then, call <xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> to obtain the last element.</span></span> <span data-ttu-id="a43ad-992">下列程式碼範例會使用這兩種技術以取得預設值為 1，如果數字的每月天數的集合是空的。</span><span class="sxs-lookup"><span data-stu-id="a43ad-992">The following code example uses both techniques to obtain a default value of 1 if a collection of numeric days of the month is empty.</span></span> <span data-ttu-id="a43ad-993">整數，預設值為 0，這未對應到任何一天的月份，因為預設值必須被指定為 1。</span><span class="sxs-lookup"><span data-stu-id="a43ad-993">Because the default value for an integer is 0, which does not correspond to any day of the month, the default value must be specified as 1 instead.</span></span> <span data-ttu-id="a43ad-994">查詢完成後，便會檢查第一次的結果變數，不必要的預設值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-994">The first result variable is checked for the unwanted default value after the query is completed.</span></span> <span data-ttu-id="a43ad-995">第二個結果變數藉由呼叫取得<xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29>指定預設值為 1。</span><span class="sxs-lookup"><span data-stu-id="a43ad-995">The second result variable is obtained by calling <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> to specify a default value of 1.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#132](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#132)]
 [!code-vb[System.Linq.Queryable#132](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#132)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-996"><paramref name="source" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-996"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LastOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource LastOrDefault&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource LastOrDefault&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LastOrDefault(Of TSource) (source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean))) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource LastOrDefault(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, bool&gt; ^&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member LastOrDefault : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, bool&gt;&gt; -&gt; 'Source" Usage="System.Linq.Queryable.LastOrDefault (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-997"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-997">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-998">傳回項目的 <see cref="T:System.Linq.IQueryable`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-998">An <see cref="T:System.Linq.IQueryable`1" /> to return an element from.</span></span></param>
        <param name="predicate"><span data-ttu-id="a43ad-999">用來測試每個項目是否符合條件的函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-999">A function to test each element for a condition.</span></span></param>
        <summary><span data-ttu-id="a43ad-1000">傳回序列中符合條件的最後一個元素；如果找不到這類元素，則傳回預設值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1000">Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1001">如果 <paramref name="source" /> 是空的，或是沒有任何項目通過述詞函式中的測試，則為 <c>default</c>(<paramref name="TSource" />)；否則為 <paramref name="source" /> 中通過述詞函式之測試的最後一個項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1001"><c>default</c>(<paramref name="TSource" />) if <paramref name="source" /> is empty or if no elements pass the test in the predicate function; otherwise, the last element of <paramref name="source" /> that passes the test in the predicate function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1002">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1002">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-1003">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1003">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-1004"><xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1004">The <xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1005">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1005">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-1006">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1006">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1007">預期的行為是，它會傳回最後一個元素`source`，可滿足所指定的條件`predicate`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1007">The expected behavior is that it returns the last element in `source` that satisfies the condition specified by `predicate`.</span></span> <span data-ttu-id="a43ad-1008">它會傳回預設值，如果沒有這類項目中的`source`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1008">It returns a default value if there is no such element in `source`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-1009">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29>傳遞述詞中。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1009">The following code example demonstrates how to use <xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> by passing in a predicate.</span></span> <span data-ttu-id="a43ad-1010">在第二個方法呼叫中，沒有任何項目中符合條件的順序。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1010">In the second call to the method, there is no element in the sequence that satisfies the condition.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#46](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#46)]
 [!code-vb[System.Linq.Queryable#46](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#46)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1011"><paramref name="source" /> 或 <paramref name="predicate" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1011"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="LongCount&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a43ad-1012">傳回代表序列中項目數目的 <see cref="T:System.Int64" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1012">Returns an <see cref="T:System.Int64" /> that represents the number of elements in sequence.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LongCount&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static long LongCount&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 LongCount&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LongCount(Of TSource) (source As IQueryable(Of TSource)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long LongCount(System::Linq::IQueryable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member LongCount : System.Linq.IQueryable&lt;'Source&gt; -&gt; int64" Usage="System.Linq.Queryable.LongCount source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-1013"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1013">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-1014">包含要計算之項目的 <see cref="T:System.Linq.IQueryable`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1014">An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.</span></span></param>
        <summary><span data-ttu-id="a43ad-1015">傳回代表序列中項目總數的 <see cref="T:System.Int64" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1015">Returns an <see cref="T:System.Int64" /> that represents the total number of elements in a sequence.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1016"><paramref name="source" /> 中的元素數目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1016">The number of elements in <paramref name="source" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1017"><xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1017">The <xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1018">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1018">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-1019">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1019">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1020">預期的行為是，它會計算中的項目數`source`，並傳回<xref:System.Int64>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1020">The expected behavior is that it counts the number of items in `source` and returns an <xref:System.Int64>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-1021">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>來計算陣列中的項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1021">The following code example demonstrates how to use <xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> to count the elements in an array.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#47](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#47)]
 [!code-vb[System.Linq.Queryable#47](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#47)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1022"><paramref name="source" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1022"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="a43ad-1023">項目數目超出 <see cref="F:System.Int64.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1023">The number of elements exceeds <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LongCount&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static long LongCount&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 LongCount&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LongCount(Of TSource) (source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean))) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long LongCount(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, bool&gt; ^&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member LongCount : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, bool&gt;&gt; -&gt; int64" Usage="System.Linq.Queryable.LongCount (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-1024"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1024">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-1025">包含要計算之項目的 <see cref="T:System.Linq.IQueryable`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1025">An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.</span></span></param>
        <param name="predicate"><span data-ttu-id="a43ad-1026">用來測試每個項目是否符合條件的函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1026">A function to test each element for a condition.</span></span></param>
        <summary><span data-ttu-id="a43ad-1027">傳回 <see cref="T:System.Int64" />，其代表序列中符合條件的項目數目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1027">Returns an <see cref="T:System.Int64" /> that represents the number of elements in a sequence that satisfy a condition.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1028"><paramref name="source" /> 中符合述詞函式之條件的項目數目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1028">The number of elements in <paramref name="source" /> that satisfy the condition in the predicate function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1029">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1029">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-1030">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1030">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-1031"><xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1031">The <xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1032">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1032">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-1033">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1033">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1034">預期的行為是，它會計算中的項目數`source`符合所指定的條件`predicate`，並傳回<xref:System.Int64>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1034">The expected behavior is that it counts the number of items in `source` that satisfy the condition specified by `predicate` and returns an <xref:System.Int64>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-1035">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29>計算陣列中滿足條件的項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1035">The following code example demonstrates how to use <xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> to count the elements in an array that satisfy a condition.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#48](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#48)]
 [!code-vb[System.Linq.Queryable#48](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#48)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1036"><paramref name="source" /> 或 <paramref name="predicate" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1036"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="a43ad-1037">符合的項目數目超出 <see cref="F:System.Int64.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1037">The number of matching elements exceeds <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Max&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Max&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IQueryable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Max(System::Linq::IQueryable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : System.Linq.IQueryable&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Queryable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-1038"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1038">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-1039">要判斷最大值的值序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1039">A sequence of values to determine the maximum of.</span></span></param>
        <summary><span data-ttu-id="a43ad-1040">傳回泛型 <see cref="T:System.Linq.IQueryable`1" /> 中的最大值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1040">Returns the maximum value in a generic <see cref="T:System.Linq.IQueryable`1" />.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1041">序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1041">The maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1042"><xref:System.Linq.Queryable.Max%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Max%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1042">The <xref:System.Linq.Queryable.Max%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Max%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1043">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1043">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-1044">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Max%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1044">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Max%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1045">預期的行為是傳回的最大的值，在`source`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1045">The expected behavior is that it returns the maximum value in `source`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-1046">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Max%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>來判斷序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1046">The following code example demonstrates how to use <xref:System.Linq.Queryable.Max%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#52](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#52)]
 [!code-vb[System.Linq.Queryable#52](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1047"><paramref name="source" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1047"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Max&lt;TSource,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TResult&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Max&lt;TSource, TResult&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TResult&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource, TResult) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, TResult))) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TResult Max(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, TResult&gt; ^&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, 'Result&gt;&gt; -&gt; 'Result" Usage="System.Linq.Queryable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-1048"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1048">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="a43ad-1049"><paramref name="selector" /> 表示之函式所傳回值的型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1049">The type of the value returned by the function represented by <paramref name="selector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-1050">要判斷最大值的值序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1050">A sequence of values to determine the maximum of.</span></span></param>
        <param name="selector"><span data-ttu-id="a43ad-1051">要套用到每個項目的投影函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1051">A projection function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="a43ad-1052">對泛型 <see cref="T:System.Linq.IQueryable`1" /> 的每個項目叫用投影函式，並傳回最大的結果值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1052">Invokes a projection function on each element of a generic <see cref="T:System.Linq.IQueryable`1" /> and returns the maximum resulting value.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1053">序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1053">The maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1054">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1054">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-1055">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1055">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-1056"><xref:System.Linq.Queryable.Max%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Max%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1056">The <xref:System.Linq.Queryable.Max%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Max%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1057">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1057">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-1058">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Max%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1058">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Max%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1059">預期的行為是，它會叫用`selector`中的每個項目`source`，並傳回最大值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1059">The expected behavior is that it invokes `selector` on each element in `source` and returns the maximum value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-1060">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Max%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29>判斷預測的值序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1060">The following code example demonstrates how to use <xref:System.Linq.Queryable.Max%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#58)]
 [!code-vb[System.Linq.Queryable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1061"><paramref name="source" /> 或 <paramref name="selector" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1061"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Min&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Min&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IQueryable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Min(System::Linq::IQueryable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : System.Linq.IQueryable&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Queryable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-1062"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1062">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-1063">要判斷最小值的值序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1063">A sequence of values to determine the minimum of.</span></span></param>
        <summary><span data-ttu-id="a43ad-1064">傳回泛型 <see cref="T:System.Linq.IQueryable`1" /> 的最小值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1064">Returns the minimum value of a generic <see cref="T:System.Linq.IQueryable`1" />.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1065">序列中的最小值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1065">The minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1066"><xref:System.Linq.Queryable.Min%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Min%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1066">The <xref:System.Linq.Queryable.Min%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Min%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1067">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1067">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-1068">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Min%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1068">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Min%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1069">預期的行為是傳回的最小的值，在`source`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1069">The expected behavior is that it returns the minimum value in `source`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-1070">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Min%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>來判斷序列中的最小值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1070">The following code example demonstrates how to use <xref:System.Linq.Queryable.Min%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#60](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#60)]
 [!code-vb[System.Linq.Queryable#60](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1071"><paramref name="source" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1071"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Min&lt;TSource,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TResult&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Min&lt;TSource, TResult&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TResult&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource, TResult) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, TResult))) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TResult Min(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, TResult&gt; ^&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, 'Result&gt;&gt; -&gt; 'Result" Usage="System.Linq.Queryable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-1072"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1072">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="a43ad-1073"><paramref name="selector" /> 表示之函式所傳回值的型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1073">The type of the value returned by the function represented by <paramref name="selector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-1074">要判斷最小值的值序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1074">A sequence of values to determine the minimum of.</span></span></param>
        <param name="selector"><span data-ttu-id="a43ad-1075">要套用到每個項目的投影函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1075">A projection function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="a43ad-1076">對泛型 <see cref="T:System.Linq.IQueryable`1" /> 的每個項目叫用投影函式，並傳回最小的結果值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1076">Invokes a projection function on each element of a generic <see cref="T:System.Linq.IQueryable`1" /> and returns the minimum resulting value.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1077">序列中的最小值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1077">The minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1078">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1078">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-1079">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1079">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-1080"><xref:System.Linq.Queryable.Min%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Min%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1080">The <xref:System.Linq.Queryable.Min%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Min%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1081">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1081">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-1082">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Min%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1082">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Min%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1083">預期的行為是，它會叫用`selector`中的每個項目`source`，並傳回最小值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1083">The expected behavior is that it invokes `selector` on each element in `source` and returns the minimum value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-1084">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Min%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29>判斷預測的值序列中的最小值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1084">The following code example demonstrates how to use <xref:System.Linq.Queryable.Min%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#68)]
 [!code-vb[System.Linq.Queryable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1085"><paramref name="source" /> 或 <paramref name="selector" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1085"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="OfType&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TResult&gt; OfType&lt;TResult&gt; (this System.Linq.IQueryable source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TResult&gt; OfType&lt;TResult&gt;(class System.Linq.IQueryable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.OfType``1(System.Linq.IQueryable)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OfType(Of TResult) (source As IQueryable) As IQueryable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable&lt;TResult&gt; ^ OfType(System::Linq::IQueryable ^ source);" />
      <MemberSignature Language="F#" Value="static member OfType : System.Linq.IQueryable -&gt; System.Linq.IQueryable&lt;'Result&gt;" Usage="System.Linq.Queryable.OfType source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="a43ad-1086">用來做為序列項目之篩選依據的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1086">The type to filter the elements of the sequence on.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-1087">要篩選其項目的 <see cref="T:System.Linq.IQueryable" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1087">An <see cref="T:System.Linq.IQueryable" /> whose elements to filter.</span></span></param>
        <summary><span data-ttu-id="a43ad-1088">根據指定的型別來篩選 <see cref="T:System.Linq.IQueryable" /> 的項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1088">Filters the elements of an <see cref="T:System.Linq.IQueryable" /> based on a specified type.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1089">集合，其中包含 <paramref name="source" /> 中型別為 <paramref name="TResult" /> 的項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1089">A collection that contains the elements from <paramref name="source" /> that have type <paramref name="TResult" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1090">`OfType`方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫`OfType`本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1090">The `OfType` method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling `OfType` itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1091">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1091">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-1092">因執行運算式樹狀架構表示呼叫的查詢行為`OfType`之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1092">The query behavior that occurs as a result of executing an expression tree that represents calling `OfType` depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1093">預期的行為是，它會篩選中的任何項目`source`不是型別的`TResult`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1093">The expected behavior is that it filters out any elements in `source` that are not of type `TResult`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-1094">下列程式碼範例示範如何使用`OfType`若要篩選掉不屬於類型的項目<xref:System.Reflection.PropertyInfo>型別的項目清單<xref:System.Reflection.MemberInfo>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1094">The following code example demonstrates how to use `OfType` to filter out elements that are not of type <xref:System.Reflection.PropertyInfo> from a list of elements of type <xref:System.Reflection.MemberInfo>.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#69](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#69)]
 [!code-vb[System.Linq.Queryable#69](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#69)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1095"><paramref name="source" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1095"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="OrderBy&lt;TSource,TKey&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a43ad-1096">依遞增順序排序序列中的項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1096">Sorts the elements of a sequence in ascending order.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OrderBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedQueryable&lt;TSource&gt; OrderBy&lt;TSource,TKey&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedQueryable`1&lt;!!TSource&gt; OrderBy&lt;TSource, TKey&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TKey&gt;&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OrderBy(Of TSource, TKey) (source As IQueryable(Of TSource), keySelector As Expression(Of Func(Of TSource, TKey))) As IOrderedQueryable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedQueryable&lt;TSource&gt; ^ OrderBy(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, TKey&gt; ^&gt; ^ keySelector);" />
      <MemberSignature Language="F#" Value="static member OrderBy : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, 'Key&gt;&gt; -&gt; System.Linq.IOrderedQueryable&lt;'Source&gt;" Usage="System.Linq.Queryable.OrderBy (source, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedQueryable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TKey&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-1097"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1097">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="a43ad-1098"><paramref name="keySelector" /> 表示之函式所傳回索引鍵的型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1098">The type of the key returned by the function that is represented by <paramref name="keySelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-1099">要排序的值序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1099">A sequence of values to order.</span></span></param>
        <param name="keySelector"><span data-ttu-id="a43ad-1100">用來從項目擷取索引鍵的函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1100">A function to extract a key from an element.</span></span></param>
        <summary><span data-ttu-id="a43ad-1101">依據索引鍵，按遞增順序排序序列中的項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1101">Sorts the elements of a sequence in ascending order according to a key.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1102">依據索引鍵排序其項目的 <see cref="T:System.Linq.IOrderedQueryable`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1102">An <see cref="T:System.Linq.IOrderedQueryable`1" /> whose elements are sorted according to a key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1103">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1103">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-1104">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1104">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-1105"><xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1105">The <xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1106">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1106">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1107">呼叫的結果<xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29>轉換為類型<xref:System.Linq.IOrderedQueryable%601>後傳回。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1107">The result of calling <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> is cast to type <xref:System.Linq.IOrderedQueryable%601> and returned.</span></span>  
  
 <span data-ttu-id="a43ad-1108">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1108">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1109">預期的行為是會排序的項目`source`藉由叫用的索引鍵為基礎`keySelector`各項目上`source`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1109">The expected behavior is that it sorts the elements of `source` based on the key obtained by invoking `keySelector` on each element of `source`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-1110">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29>來排序序列的項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1110">The following code example demonstrates how to use <xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> to sort the elements of a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#70](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#70)]
 [!code-vb[System.Linq.Queryable#70](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#70)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1111"><paramref name="source" /> 或 <paramref name="keySelector" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1111"><paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="OrderBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedQueryable&lt;TSource&gt; OrderBy&lt;TSource,TKey&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedQueryable`1&lt;!!TSource&gt; OrderBy&lt;TSource, TKey&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TKey&gt;&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OrderBy(Of TSource, TKey) (source As IQueryable(Of TSource), keySelector As Expression(Of Func(Of TSource, TKey)), comparer As IComparer(Of TKey)) As IOrderedQueryable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedQueryable&lt;TSource&gt; ^ OrderBy(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, TKey&gt; ^&gt; ^ keySelector, System::Collections::Generic::IComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member OrderBy : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, 'Key&gt;&gt; * System.Collections.Generic.IComparer&lt;'Key&gt; -&gt; System.Linq.IOrderedQueryable&lt;'Source&gt;" Usage="System.Linq.Queryable.OrderBy (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedQueryable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TKey&gt;&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-1112"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1112">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="a43ad-1113"><paramref name="keySelector" /> 表示之函式所傳回索引鍵的型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1113">The type of the key returned by the function that is represented by <paramref name="keySelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-1114">要排序的值序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1114">A sequence of values to order.</span></span></param>
        <param name="keySelector"><span data-ttu-id="a43ad-1115">用來從項目擷取索引鍵的函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1115">A function to extract a key from an element.</span></span></param>
        <param name="comparer"><span data-ttu-id="a43ad-1116">用來比較金鑰的 <see cref="T:System.Collections.Generic.IComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1116">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</span></span></param>
        <summary><span data-ttu-id="a43ad-1117">使用指定的比較子，依遞增順序排序序列中的項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1117">Sorts the elements of a sequence in ascending order by using a specified comparer.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1118">依據索引鍵排序其項目的 <see cref="T:System.Linq.IOrderedQueryable`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1118">An <see cref="T:System.Linq.IOrderedQueryable`1" /> whose elements are sorted according to a key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1119">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1119">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-1120">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1120">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-1121"><xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1121">The <xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1122">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1122">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1123">呼叫的結果<xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29>轉換為類型<xref:System.Linq.IOrderedQueryable%601>後傳回。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1123">The result of calling <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> is cast to type <xref:System.Linq.IOrderedQueryable%601> and returned.</span></span>  
  
 <span data-ttu-id="a43ad-1124">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1124">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1125">預期的行為是會排序的項目`source`藉由叫用的索引鍵為基礎`keySelector`各項目上`source`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1125">The expected behavior is that it sorts the elements of `source` based on the key obtained by invoking `keySelector` on each element of `source`.</span></span> <span data-ttu-id="a43ad-1126">`comparer`參數用來比較索引鍵。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1126">The `comparer` parameter is used to compare keys.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1127"><paramref name="source" />、<paramref name="keySelector" /> 或 <paramref name="comparer" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1127"><paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="comparer" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="OrderByDescending&lt;TSource,TKey&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a43ad-1128">依遞減順序排序序列中的項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1128">Sorts the elements of a sequence in descending order.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OrderByDescending&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedQueryable&lt;TSource&gt; OrderByDescending&lt;TSource,TKey&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedQueryable`1&lt;!!TSource&gt; OrderByDescending&lt;TSource, TKey&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TKey&gt;&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OrderByDescending(Of TSource, TKey) (source As IQueryable(Of TSource), keySelector As Expression(Of Func(Of TSource, TKey))) As IOrderedQueryable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedQueryable&lt;TSource&gt; ^ OrderByDescending(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, TKey&gt; ^&gt; ^ keySelector);" />
      <MemberSignature Language="F#" Value="static member OrderByDescending : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, 'Key&gt;&gt; -&gt; System.Linq.IOrderedQueryable&lt;'Source&gt;" Usage="System.Linq.Queryable.OrderByDescending (source, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedQueryable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TKey&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-1129"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1129">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="a43ad-1130"><paramref name="keySelector" /> 表示之函式所傳回索引鍵的型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1130">The type of the key returned by the function that is represented by <paramref name="keySelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-1131">要排序的值序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1131">A sequence of values to order.</span></span></param>
        <param name="keySelector"><span data-ttu-id="a43ad-1132">用來從項目擷取索引鍵的函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1132">A function to extract a key from an element.</span></span></param>
        <summary><span data-ttu-id="a43ad-1133">依據索引鍵，按遞減順序排序序列中的項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1133">Sorts the elements of a sequence in descending order according to a key.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1134">依據索引鍵按遞減順序排序其項目的 <see cref="T:System.Linq.IOrderedQueryable`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1134">An <see cref="T:System.Linq.IOrderedQueryable`1" /> whose elements are sorted in descending order according to a key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1135">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1135">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-1136">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1136">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-1137"><xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1137">The <xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1138">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1138">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1139">呼叫的結果<xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29>轉換為類型<xref:System.Linq.IOrderedQueryable%601>後傳回。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1139">The result of calling <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> is cast to type <xref:System.Linq.IOrderedQueryable%601> and returned.</span></span>  
  
 <span data-ttu-id="a43ad-1140">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1140">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1141">預期的行為是會排序的項目`source`依遞減順序，根據 藉由叫用的索引鍵`keySelector`各項目上`source`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1141">The expected behavior is that it sorts the elements of `source` in descending order, based on the key obtained by invoking `keySelector` on each element of `source`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1142"><paramref name="source" /> 或 <paramref name="keySelector" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1142"><paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="OrderByDescending&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedQueryable&lt;TSource&gt; OrderByDescending&lt;TSource,TKey&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedQueryable`1&lt;!!TSource&gt; OrderByDescending&lt;TSource, TKey&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TKey&gt;&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OrderByDescending(Of TSource, TKey) (source As IQueryable(Of TSource), keySelector As Expression(Of Func(Of TSource, TKey)), comparer As IComparer(Of TKey)) As IOrderedQueryable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedQueryable&lt;TSource&gt; ^ OrderByDescending(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, TKey&gt; ^&gt; ^ keySelector, System::Collections::Generic::IComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member OrderByDescending : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, 'Key&gt;&gt; * System.Collections.Generic.IComparer&lt;'Key&gt; -&gt; System.Linq.IOrderedQueryable&lt;'Source&gt;" Usage="System.Linq.Queryable.OrderByDescending (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedQueryable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TKey&gt;&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-1143"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1143">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="a43ad-1144"><paramref name="keySelector" /> 表示之函式所傳回索引鍵的型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1144">The type of the key returned by the function that is represented by <paramref name="keySelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-1145">要排序的值序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1145">A sequence of values to order.</span></span></param>
        <param name="keySelector"><span data-ttu-id="a43ad-1146">用來從項目擷取索引鍵的函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1146">A function to extract a key from an element.</span></span></param>
        <param name="comparer"><span data-ttu-id="a43ad-1147">用來比較金鑰的 <see cref="T:System.Collections.Generic.IComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1147">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</span></span></param>
        <summary><span data-ttu-id="a43ad-1148">使用指定的比較子，依遞減順序排序序列中的項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1148">Sorts the elements of a sequence in descending order by using a specified comparer.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1149">依據索引鍵按遞減順序排序其項目的 <see cref="T:System.Linq.IOrderedQueryable`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1149">An <see cref="T:System.Linq.IOrderedQueryable`1" /> whose elements are sorted in descending order according to a key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1150">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1150">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-1151">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1151">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-1152"><xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1152">The <xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1153">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1153">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1154">呼叫的結果<xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29>轉換為類型<xref:System.Linq.IOrderedQueryable%601>後傳回。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1154">The result of calling <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> is cast to type <xref:System.Linq.IOrderedQueryable%601> and returned.</span></span>  
  
 <span data-ttu-id="a43ad-1155">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1155">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1156">預期的行為是會排序的項目`source`依遞減順序，根據 藉由叫用的索引鍵`keySelector`各項目上`source`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1156">The expected behavior is that it sorts the elements of `source` in descending order, based on the key obtained by invoking `keySelector` on each element of `source`.</span></span> <span data-ttu-id="a43ad-1157">`comparer`參數用來比較索引鍵。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1157">The `comparer` parameter is used to compare keys.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-1158">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29>來排序序列中使用自訂比較子，依遞減順序的項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1158">The following code example demonstrates how to use <xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> to sort the elements of a sequence in descending order by using a custom comparer.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#71](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#71)]
 [!code-vb[System.Linq.Queryable#71](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#71)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1159"><paramref name="source" />、<paramref name="keySelector" /> 或 <paramref name="comparer" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1159"><paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="comparer" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Prepend&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; Prepend&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, TSource element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TSource&gt; Prepend&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, !!TSource element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Prepend``1(System.Linq.IQueryable{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Prepend(Of TSource) (source As IQueryable(Of TSource), element As TSource) As IQueryable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable&lt;TSource&gt; ^ Prepend(System::Linq::IQueryable&lt;TSource&gt; ^ source, TSource element);" />
      <MemberSignature Language="F#" Value="static member Prepend : System.Linq.IQueryable&lt;'Source&gt; * 'Source -&gt; System.Linq.IQueryable&lt;'Source&gt;" Usage="System.Linq.Queryable.Prepend (source, element)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="element" Type="TSource" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">To be added.</typeparam>
        <param name="source">To be added.</param>
        <param name="element">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reverse&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; Reverse&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TSource&gt; Reverse&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Reverse(Of TSource) (source As IQueryable(Of TSource)) As IQueryable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable&lt;TSource&gt; ^ Reverse(System::Linq::IQueryable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Reverse : System.Linq.IQueryable&lt;'Source&gt; -&gt; System.Linq.IQueryable&lt;'Source&gt;" Usage="System.Linq.Queryable.Reverse source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-1160"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1160">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-1161">要反轉方向的值序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1161">A sequence of values to reverse.</span></span></param>
        <summary><span data-ttu-id="a43ad-1162">反轉序列中項目的排序方向。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1162">Inverts the order of the elements in a sequence.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1163">其項目對應於輸入序列中反向排序之項目的 <see cref="T:System.Linq.IQueryable`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1163">An <see cref="T:System.Linq.IQueryable`1" /> whose elements correspond to those of the input sequence in reverse order.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1164"><xref:System.Linq.Queryable.Reverse%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Reverse%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1164">The <xref:System.Linq.Queryable.Reverse%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Reverse%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1165">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1165">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-1166">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Reverse%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1166">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Reverse%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1167">預期的行為是，它會反轉順序中的項目`source`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1167">The expected behavior is that it reverses the order of the elements in `source`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-1168">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Reverse%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>反轉陣列中項目的順序。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1168">The following code example demonstrates how to use <xref:System.Linq.Queryable.Reverse%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> to reverse the order of elements in an array.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#74](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#74)]
 [!code-vb[System.Linq.Queryable#74](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#74)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1169"><paramref name="source" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1169"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Select&lt;TSource,TResult&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a43ad-1170">將序列的每個元素規劃成一個新的表單。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1170">Projects each element of a sequence into a new form.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Select&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TResult&gt; Select&lt;TSource,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,int,TResult&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TResult&gt; Select&lt;TSource, TResult&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`3&lt;!!TSource, int32, !!TResult&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Select(Of TSource, TResult) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Integer, TResult))) As IQueryable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable&lt;TResult&gt; ^ Select(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, int, TResult&gt; ^&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Select : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, int, 'Result&gt;&gt; -&gt; System.Linq.IQueryable&lt;'Result&gt;" Usage="System.Linq.Queryable.Select (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Int32,TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-1171"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1171">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="a43ad-1172"><paramref name="selector" /> 表示之函式所傳回值的型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1172">The type of the value returned by the function represented by <paramref name="selector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-1173">要投影的值序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1173">A sequence of values to project.</span></span></param>
        <param name="selector"><span data-ttu-id="a43ad-1174">要套用到每個項目的投影函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1174">A projection function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="a43ad-1175">透過加入項目的索引，將序列的每個項目投影成新的表單。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1175">Projects each element of a sequence into a new form by incorporating the element's index.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1176"><see cref="T:System.Linq.IQueryable`1" />，其項目為在 <paramref name="source" /> 各個項目上叫用投影函式的結果。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1176">An <see cref="T:System.Linq.IQueryable`1" /> whose elements are the result of invoking a projection function on each element of <paramref name="source" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1177">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1177">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-1178">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1178">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-1179"><xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1179">The <xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1180">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1180">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-1181">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1181">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%7D%29> depend on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1182">預期的行為是，它會叫用`selector`的每個項目上`source`來投射成不同格式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1182">The expected behavior is that it invokes `selector` on each element of `source` to project it into a different form.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-1183">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%7D%29>專案透過一連串的值，並使用投影表單中的每個項目的索引。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1183">The following code example demonstrates how to use <xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%7D%29> to project over a sequence of values and use the index of each element in the projected form.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#76](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#76)]
 [!code-vb[System.Linq.Queryable#76](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#76)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1184"><paramref name="source" /> 或 <paramref name="selector" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1184"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Select&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TResult&gt; Select&lt;TSource,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TResult&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TResult&gt; Select&lt;TSource, TResult&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TResult&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Select(Of TSource, TResult) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, TResult))) As IQueryable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable&lt;TResult&gt; ^ Select(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, TResult&gt; ^&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Select : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, 'Result&gt;&gt; -&gt; System.Linq.IQueryable&lt;'Result&gt;" Usage="System.Linq.Queryable.Select (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-1185"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1185">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="a43ad-1186"><paramref name="selector" /> 表示之函式所傳回值的型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1186">The type of the value returned by the function represented by <paramref name="selector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-1187">要投影的值序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1187">A sequence of values to project.</span></span></param>
        <param name="selector"><span data-ttu-id="a43ad-1188">要套用到每個項目的投影函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1188">A projection function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="a43ad-1189">將序列的每個元素規劃成一個新的表單。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1189">Projects each element of a sequence into a new form.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1190"><see cref="T:System.Linq.IQueryable`1" />，其項目為在 <paramref name="source" /> 各個項目上叫用投影函式的結果。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1190">An <see cref="T:System.Linq.IQueryable`1" /> whose elements are the result of invoking a projection function on each element of <paramref name="source" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1191">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1191">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-1192">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1192">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-1193"><xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1193">The <xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1194">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1194">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-1195">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1195">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1196">預期的行為是，它會叫用`selector`的每個項目上`source`來投射成不同格式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1196">The expected behavior is that it invokes `selector` on each element of `source` to project it into a different form.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-1197">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29>專案透過一連串的值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1197">The following code example demonstrates how to use <xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> to project over a sequence of values.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#75](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#75)]
 [!code-vb[System.Linq.Queryable#75](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#75)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1198"><paramref name="source" /> 或 <paramref name="selector" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1198"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SelectMany&lt;TSource,TResult&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a43ad-1199">將序列的每個項目都投影成 <see cref="T:System.Collections.Generic.IEnumerable`1" />，並將產生的序列合併成一個型別為 <see cref="T:System.Linq.IQueryable`1" /> 的序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1199">Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" /> and combines the resulting sequences into one sequence of type <see cref="T:System.Linq.IQueryable`1" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SelectMany&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TResult&gt; SelectMany&lt;TSource,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TResult&gt; SelectMany&lt;TSource, TResult&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt;&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SelectMany(Of TSource, TResult) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, IEnumerable(Of TResult)))) As IQueryable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable&lt;TResult&gt; ^ SelectMany(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, System::Collections::Generic::IEnumerable&lt;TResult&gt; ^&gt; ^&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member SelectMany : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, seq&lt;'Result&gt;&gt;&gt; -&gt; System.Linq.IQueryable&lt;'Result&gt;" Usage="System.Linq.Queryable.SelectMany (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-1200"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1200">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="a43ad-1201"><paramref name="selector" /> 表示之函式所傳回序列之項目的型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1201">The type of the elements of the sequence returned by the function represented by <paramref name="selector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-1202">要投影的值序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1202">A sequence of values to project.</span></span></param>
        <param name="selector"><span data-ttu-id="a43ad-1203">要套用到每個項目的投影函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1203">A projection function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="a43ad-1204">將序列的每個項目都投影成 <see cref="T:System.Collections.Generic.IEnumerable`1" />，並將產生的序列合併成一個序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1204">Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" /> and combines the resulting sequences into one sequence.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1205"><see cref="T:System.Linq.IQueryable`1" />，其項目是對輸入序列中各個項目叫用一對多投影函式後所產生的結果。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1205">An <see cref="T:System.Linq.IQueryable`1" /> whose elements are the result of invoking a one-to-many projection function on each element of the input sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1206">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1206">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-1207">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1207">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-1208"><xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1208">The <xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1209">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1209">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-1210">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1210">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1211">預期的行為是，它會叫用`selector`的每個項目上`source`來投射成可列舉的格式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1211">The expected behavior is that it invokes `selector` on each element of `source` to project it into an enumerable form.</span></span> <span data-ttu-id="a43ad-1212">然後將可列舉的結果串連成單一的一維序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1212">It then concatenates the enumerable results into a single, one-dimensional sequence.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-1213">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29>對陣列進行反覆執行的一對多投影。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1213">The following code example demonstrates how to use <xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29> to perform a one-to-many projection over an array.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#77](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#77)]
 [!code-vb[System.Linq.Queryable#77](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#77)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1214"><paramref name="source" /> 或 <paramref name="selector" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1214"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SelectMany&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TResult&gt; SelectMany&lt;TSource,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,int,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TResult&gt; SelectMany&lt;TSource, TResult&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`3&lt;!!TSource, int32, class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt;&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SelectMany(Of TSource, TResult) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Integer, IEnumerable(Of TResult)))) As IQueryable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable&lt;TResult&gt; ^ SelectMany(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, int, System::Collections::Generic::IEnumerable&lt;TResult&gt; ^&gt; ^&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member SelectMany : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, int, seq&lt;'Result&gt;&gt;&gt; -&gt; System.Linq.IQueryable&lt;'Result&gt;" Usage="System.Linq.Queryable.SelectMany (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Int32,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-1215"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1215">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="a43ad-1216"><paramref name="selector" /> 表示之函式所傳回序列之項目的型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1216">The type of the elements of the sequence returned by the function represented by <paramref name="selector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-1217">要投影的值序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1217">A sequence of values to project.</span></span></param>
        <param name="selector"><span data-ttu-id="a43ad-1218">要套用到每個項目的投影函式；此函式的第二個參數代表來源項目的索引。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1218">A projection function to apply to each element; the second parameter of this function represents the index of the source element.</span></span></param>
        <summary><span data-ttu-id="a43ad-1219">將序列的每個項目都投影成 <see cref="T:System.Collections.Generic.IEnumerable`1" />，並將產生的序列合併成一個序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1219">Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" /> and combines the resulting sequences into one sequence.</span></span> <span data-ttu-id="a43ad-1220">各來源項目的索引是在該項目的投影表單中使用。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1220">The index of each source element is used in the projected form of that element.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1221"><see cref="T:System.Linq.IQueryable`1" />，其項目是對輸入序列中各個項目叫用一對多投影函式後所產生的結果。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1221">An <see cref="T:System.Linq.IQueryable`1" /> whose elements are the result of invoking a one-to-many projection function on each element of the input sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1222">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1222">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-1223">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1223">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-1224"><xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1224">The <xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1225">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1225">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-1226">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1226">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1227">預期的行為是，它會叫用`selector`的每個項目上`source`來投射成可列舉的格式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1227">The expected behavior is that it invokes `selector` on each element of `source` to project it into an enumerable form.</span></span> <span data-ttu-id="a43ad-1228">每個列舉的結果會合併來源項目的索引。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1228">Each enumerable result incorporates the index of the source element.</span></span> <span data-ttu-id="a43ad-1229">然後將可列舉的結果串連成單一的一維序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1229">It then concatenates the enumerable results into a single, one-dimensional sequence.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-1230">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29>對陣列進行反覆執行的一對多投影，並使用每個來源項目的索引。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1230">The following code example demonstrates how to use <xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29> to perform a one-to-many projection over an array and use the index of each source element.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#78](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#78)]
 [!code-vb[System.Linq.Queryable#78](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#78)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1231"><paramref name="source" /> 或 <paramref name="selector" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1231"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SelectMany&lt;TSource,TCollection,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TResult&gt; SelectMany&lt;TSource,TCollection,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt;&gt; collectionSelector, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TCollection,TResult&gt;&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TResult&gt; SelectMany&lt;TSource, TCollection, TResult&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, class System.Collections.Generic.IEnumerable`1&lt;!!TCollection&gt;&gt;&gt; collectionSelector, class System.Linq.Expressions.Expression`1&lt;class System.Func`3&lt;!!TSource, !!TCollection, !!TResult&gt;&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SelectMany(Of TSource, TCollection, TResult) (source As IQueryable(Of TSource), collectionSelector As Expression(Of Func(Of TSource, IEnumerable(Of TCollection))), resultSelector As Expression(Of Func(Of TSource, TCollection, TResult))) As IQueryable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TCollection, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable&lt;TResult&gt; ^ SelectMany(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, System::Collections::Generic::IEnumerable&lt;TCollection&gt; ^&gt; ^&gt; ^ collectionSelector, System::Linq::Expressions::Expression&lt;Func&lt;TSource, TCollection, TResult&gt; ^&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member SelectMany : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, seq&lt;'Collection&gt;&gt;&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, 'Collection, 'Result&gt;&gt; -&gt; System.Linq.IQueryable&lt;'Result&gt;" Usage="System.Linq.Queryable.SelectMany (source, collectionSelector, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TCollection" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="collectionSelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt;&gt;" />
        <Parameter Name="resultSelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TCollection,TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-1232"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1232">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TCollection"><span data-ttu-id="a43ad-1233"><paramref name="collectionSelector" /> 表示之函式所收集之中繼項目的型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1233">The type of the intermediate elements collected by the function represented by <paramref name="collectionSelector" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="a43ad-1234">產生的序列之項目型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1234">The type of the elements of the resulting sequence.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-1235">要投影的值序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1235">A sequence of values to project.</span></span></param>
        <param name="collectionSelector"><span data-ttu-id="a43ad-1236">要套用到輸入序列中各個項目的投影函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1236">A projection function to apply to each element of the input sequence.</span></span></param>
        <param name="resultSelector"><span data-ttu-id="a43ad-1237">要套用到各中繼序列之各個項目的投影函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1237">A projection function to apply to each element of each intermediate sequence.</span></span></param>
        <summary><span data-ttu-id="a43ad-1238">將序列的每個項目投影成 <see cref="T:System.Collections.Generic.IEnumerable`1" />，並在其中的每個項目上叫用結果選取器函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1238">Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" /> and invokes a result selector function on each element therein.</span></span> <span data-ttu-id="a43ad-1239">每個中繼序列產生的值都會合併成單一的一維序列，然後再傳回。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1239">The resulting values from each intermediate sequence are combined into a single, one-dimensional sequence and returned.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1240"><see cref="T:System.Linq.IQueryable`1" />，其項目是執行下列動作後所產生的結果：對 <paramref name="collectionSelector" /> 的各個項目叫用一對多投影函式 <paramref name="source" />，然後再將每個序列項目及其對應之 <paramref name="source" /> 項目對應到結果項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1240">An <see cref="T:System.Linq.IQueryable`1" /> whose elements are the result of invoking the one-to-many projection function <paramref name="collectionSelector" /> on each element of <paramref name="source" /> and then mapping each of those sequence elements and their corresponding <paramref name="source" /> element to a result element.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1241">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1241">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-1242">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1242">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-1243"><xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1243">The <xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1244">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1244">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-1245">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1245">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1246">預期的行為是，它會叫用`collectionSelector`的每個項目上`source`來投射成可列舉的格式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1246">The expected behavior is that it invokes `collectionSelector` on each element of `source` to project it into an enumerable form.</span></span> <span data-ttu-id="a43ad-1247">然後函式由`resultSelector`各中繼序列中的每個項目上叫用。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1247">Then the function represented by `resultSelector` is invoked on each element in each intermediate sequence.</span></span> <span data-ttu-id="a43ad-1248">產生的值會串連成單一的一維序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1248">The resulting values are concatenated into a single, one-dimensional sequence.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-1249">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29>對陣列進行反覆執行的一對多投影。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1249">The following code example demonstrates how to use <xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29> to perform a one-to-many projection over an array.</span></span> <span data-ttu-id="a43ad-1250">此範例使用結果選取器函式，以保留對應到各中繼序列的最後一個呼叫的範圍中的來源元素`Select`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1250">This example uses a result selector function to keep the source element that corresponds to each intermediate sequence in scope for the final call to `Select`.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#124](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#124)]
 [!code-vb[System.Linq.Queryable#124](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#124)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1251"><paramref name="source" />、<paramref name="collectionSelector" /> 或 <paramref name="resultSelector" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1251"><paramref name="source" /> or <paramref name="collectionSelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SelectMany&lt;TSource,TCollection,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TResult&gt; SelectMany&lt;TSource,TCollection,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,int,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt;&gt; collectionSelector, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TCollection,TResult&gt;&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TResult&gt; SelectMany&lt;TSource, TCollection, TResult&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`3&lt;!!TSource, int32, class System.Collections.Generic.IEnumerable`1&lt;!!TCollection&gt;&gt;&gt; collectionSelector, class System.Linq.Expressions.Expression`1&lt;class System.Func`3&lt;!!TSource, !!TCollection, !!TResult&gt;&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SelectMany(Of TSource, TCollection, TResult) (source As IQueryable(Of TSource), collectionSelector As Expression(Of Func(Of TSource, Integer, IEnumerable(Of TCollection))), resultSelector As Expression(Of Func(Of TSource, TCollection, TResult))) As IQueryable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TCollection, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable&lt;TResult&gt; ^ SelectMany(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, int, System::Collections::Generic::IEnumerable&lt;TCollection&gt; ^&gt; ^&gt; ^ collectionSelector, System::Linq::Expressions::Expression&lt;Func&lt;TSource, TCollection, TResult&gt; ^&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member SelectMany : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, int, seq&lt;'Collection&gt;&gt;&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, 'Collection, 'Result&gt;&gt; -&gt; System.Linq.IQueryable&lt;'Result&gt;" Usage="System.Linq.Queryable.SelectMany (source, collectionSelector, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TCollection" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="collectionSelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Int32,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt;&gt;" />
        <Parameter Name="resultSelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TCollection,TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-1252"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1252">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TCollection"><span data-ttu-id="a43ad-1253"><paramref name="collectionSelector" /> 表示之函式所收集之中繼項目的型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1253">The type of the intermediate elements collected by the function represented by <paramref name="collectionSelector" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="a43ad-1254">產生的序列之項目型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1254">The type of the elements of the resulting sequence.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-1255">要投影的值序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1255">A sequence of values to project.</span></span></param>
        <param name="collectionSelector"><span data-ttu-id="a43ad-1256">要套用到輸入序列每個項目的投影函式；此函式的第二個參數代表來源項目的索引。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1256">A projection function to apply to each element of the input sequence; the second parameter of this function represents the index of the source element.</span></span></param>
        <param name="resultSelector"><span data-ttu-id="a43ad-1257">要套用到各中繼序列之各個項目的投影函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1257">A projection function to apply to each element of each intermediate sequence.</span></span></param>
        <summary><span data-ttu-id="a43ad-1258">將序列的每個項目都投影成 <see cref="T:System.Collections.Generic.IEnumerable`1" />，以合併產生該項目之來源項目的索引。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1258">Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" /> that incorporates the index of the source element that produced it.</span></span> <span data-ttu-id="a43ad-1259">接著對各中繼序列的每個項目叫用結果選取器函式，然後將產生的值合併成單一的一維序列並傳回。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1259">A result selector function is invoked on each element of each intermediate sequence, and the resulting values are combined into a single, one-dimensional sequence and returned.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1260"><see cref="T:System.Linq.IQueryable`1" />，其項目是執行下列動作後所產生的結果：對 <paramref name="collectionSelector" /> 的各個項目叫用一對多投影函式 <paramref name="source" />，然後再將每個序列項目及其對應之 <paramref name="source" /> 項目對應到結果項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1260">An <see cref="T:System.Linq.IQueryable`1" /> whose elements are the result of invoking the one-to-many projection function <paramref name="collectionSelector" /> on each element of <paramref name="source" /> and then mapping each of those sequence elements and their corresponding <paramref name="source" /> element to a result element.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1261">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1261">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-1262">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1262">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-1263"><xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1263">The <xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1264">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1264">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-1265">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1265">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1266">預期的行為是，它會叫用`collectionSelector`的每個項目上`source`來投射成可列舉的格式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1266">The expected behavior is that it invokes `collectionSelector` on each element of `source` to project it into an enumerable form.</span></span> <span data-ttu-id="a43ad-1267">每個列舉的結果會合併來源項目的索引。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1267">Each enumerable result incorporates the source element's index.</span></span> <span data-ttu-id="a43ad-1268">然後函式由`resultSelector`各中繼序列中的每個項目上叫用。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1268">Then the function represented by `resultSelector` is invoked on each element in each intermediate sequence.</span></span> <span data-ttu-id="a43ad-1269">產生的值會串連成單一的一維序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1269">The resulting values are concatenated into a single, one-dimensional sequence.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1270"><paramref name="source" />、<paramref name="collectionSelector" /> 或 <paramref name="resultSelector" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1270"><paramref name="source" /> or <paramref name="collectionSelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SequenceEqual&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a43ad-1271">判斷兩個序列是否相等。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1271">Determines whether two sequences are equal.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SequenceEqual&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool SequenceEqual&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source1, System.Collections.Generic.IEnumerable&lt;TSource&gt; source2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SequenceEqual&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source1, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SequenceEqual(Of TSource) (source1 As IQueryable(Of TSource), source2 As IEnumerable(Of TSource)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool SequenceEqual(System::Linq::IQueryable&lt;TSource&gt; ^ source1, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source2);" />
      <MemberSignature Language="F#" Value="static member SequenceEqual : System.Linq.IQueryable&lt;'Source&gt; * seq&lt;'Source&gt; -&gt; bool" Usage="System.Linq.Queryable.SequenceEqual (source1, source2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source1" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="source2" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-1272">輸入序列之項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1272">The type of the elements of the input sequences.</span></span></typeparam>
        <param name="source1"><span data-ttu-id="a43ad-1273"><see cref="T:System.Linq.IQueryable`1" />，其項目要與 <paramref name="source2" /> 的項目比較。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1273">An <see cref="T:System.Linq.IQueryable`1" /> whose elements to compare to those of <paramref name="source2" />.</span></span></param>
        <param name="source2"><span data-ttu-id="a43ad-1274"><see cref="T:System.Collections.Generic.IEnumerable`1" />，其項目要與第一個序列的項目比較。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1274">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to compare to those of the first sequence.</span></span></param>
        <summary><span data-ttu-id="a43ad-1275">使用預設相等比較子來比較項目，以判斷兩個序列是否相等。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1275">Determines whether two sequences are equal by using the default equality comparer to compare elements.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1276">如果兩個來源序列的長度相同，而且其對應項目比較結果相同，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1276"><see langword="true" /> if the two source sequences are of equal length and their corresponding elements compare equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1277"><xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1277">The <xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1278">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source1`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1278">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source1` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-1279">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29>之型別的實作而定`source1`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1279">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> depends on the implementation of the type of the `source1` parameter.</span></span> <span data-ttu-id="a43ad-1280">預期的行為是，它就會判斷兩個來源序列是否相等。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1280">The expected behavior is that it determines if the two source sequences are equal.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-1281">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29>來判斷兩個序列是否相等。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1281">The following code example demonstrates how to use <xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> to determine whether two sequences are equal.</span></span> <span data-ttu-id="a43ad-1282">在此範例中的序列相等。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1282">In this example the sequences are equal.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#32](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#32)]
 [!code-vb[System.Linq.Queryable#32](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#32)]  
  
 <span data-ttu-id="a43ad-1283">下列程式碼範例會比較不相等的兩個序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1283">The following code example compares two sequences that are not equal.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#33](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#33)]
 [!code-vb[System.Linq.Queryable#33](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1284"><paramref name="source1" /> 或 <paramref name="source2" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1284"><paramref name="source1" /> or <paramref name="source2" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SequenceEqual&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool SequenceEqual&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source1, System.Collections.Generic.IEnumerable&lt;TSource&gt; source2, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SequenceEqual&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source1, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source2, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SequenceEqual(Of TSource) (source1 As IQueryable(Of TSource), source2 As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool SequenceEqual(System::Linq::IQueryable&lt;TSource&gt; ^ source1, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source2, System::Collections::Generic::IEqualityComparer&lt;TSource&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member SequenceEqual : System.Linq.IQueryable&lt;'Source&gt; * seq&lt;'Source&gt; * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; bool" Usage="System.Linq.Queryable.SequenceEqual (source1, source2, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source1" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="source2" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-1285">輸入序列之項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1285">The type of the elements of the input sequences.</span></span></typeparam>
        <param name="source1"><span data-ttu-id="a43ad-1286"><see cref="T:System.Linq.IQueryable`1" />，其項目要與 <paramref name="source2" /> 的項目比較。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1286">An <see cref="T:System.Linq.IQueryable`1" /> whose elements to compare to those of <paramref name="source2" />.</span></span></param>
        <param name="source2"><span data-ttu-id="a43ad-1287"><see cref="T:System.Collections.Generic.IEnumerable`1" />，其項目要與第一個序列的項目比較。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1287">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to compare to those of the first sequence.</span></span></param>
        <param name="comparer"><span data-ttu-id="a43ad-1288">用來比較項目的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1288">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to use to compare elements.</span></span></param>
        <summary><span data-ttu-id="a43ad-1289">使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 來比較項目，以判斷兩個序列是否相等。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1289">Determines whether two sequences are equal by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare elements.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1290">如果兩個來源序列的長度相同，而且其對應項目比較結果相同，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1290"><see langword="true" /> if the two source sequences are of equal length and their corresponding elements compare equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1291"><xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1291">The <xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1292">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source1`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1292">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source1` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-1293">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29>之型別的實作而定`source1`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1293">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> depends on the implementation of the type of the `source1` parameter.</span></span> <span data-ttu-id="a43ad-1294">預期的行為是，它就會判斷兩個來源序列是否相等使用`comparer`來比較項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1294">The expected behavior is that it determines if the two source sequences are equal by using `comparer` to compare elements.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1295"><paramref name="source1" /> 或 <paramref name="source2" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1295"><paramref name="source1" /> or <paramref name="source2" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Single&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a43ad-1296">傳回序列的單一特定項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1296">Returns a single, specific element of a sequence.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Single&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Single&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Single&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Single(Of TSource) (source As IQueryable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Single(System::Linq::IQueryable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Single : System.Linq.IQueryable&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Queryable.Single source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-1297"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1297">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-1298">要傳回單一項目的 <see cref="T:System.Linq.IQueryable`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1298">An <see cref="T:System.Linq.IQueryable`1" /> to return the single element of.</span></span></param>
        <summary><span data-ttu-id="a43ad-1299">傳回序列的唯一一個元素，如果序列中不是正好一個元素，則擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1299">Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1300">輸入序列的單一項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1300">The single element of the input sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1301"><xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1301">The <xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1302">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1302">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-1303">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1303">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1304">預期的行為是，它會傳回唯一項目中的`source`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1304">The expected behavior is that it returns the only element in `source`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-1305">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>選取唯一元素的陣列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1305">The following code example demonstrates how to use <xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> to select the only element of an array.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#79](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#79)]
 [!code-vb[System.Linq.Queryable#79](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#79)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1306"><paramref name="source" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1306"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a43ad-1307"><paramref name="source" /> 具有多個項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1307"><paramref name="source" /> has more than one element.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Single&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Single&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Single&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Single(Of TSource) (source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean))) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Single(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, bool&gt; ^&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member Single : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, bool&gt;&gt; -&gt; 'Source" Usage="System.Linq.Queryable.Single (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-1308"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1308">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-1309">要傳回單一項目的來源 <see cref="T:System.Linq.IQueryable`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1309">An <see cref="T:System.Linq.IQueryable`1" /> to return a single element from.</span></span></param>
        <param name="predicate"><span data-ttu-id="a43ad-1310">用來測試項目是否符合條件的函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1310">A function to test an element for a condition.</span></span></param>
        <summary><span data-ttu-id="a43ad-1311">傳回序列中符合指定之條件的唯一一個元素，如果有一個以上這類元素，則擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1311">Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1312">輸入序列中符合 <paramref name="predicate" /> 之條件的單一項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1312">The single element of the input sequence that satisfies the condition in <paramref name="predicate" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1313">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1313">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-1314">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1314">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-1315"><xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1315">The <xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1316">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1316">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-1317">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1317">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1318">預期的行為是，它會傳回唯一項目中的`source`，可滿足所指定的條件`predicate`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1318">The expected behavior is that it returns the only element in `source` that satisfies the condition specified by `predicate`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-1319">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29>選取陣列中符合條件的唯一項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1319">The following code example demonstrates how to use <xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> to select the only element of an array that satisfies a condition.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#81](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#81)]
 [!code-vb[System.Linq.Queryable#81](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#81)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1320"><paramref name="source" /> 或 <paramref name="predicate" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1320"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a43ad-1321">沒有任何項目符合 <paramref name="predicate" /> 的條件。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1321">No element satisfies the condition in <paramref name="predicate" />.</span></span>  
  
<span data-ttu-id="a43ad-1322">-或-</span><span class="sxs-lookup"><span data-stu-id="a43ad-1322">-or-</span></span> 
<span data-ttu-id="a43ad-1323">超過一個項目符合 <paramref name="predicate" /> 中的條件。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1323">More than one element satisfies the condition in <paramref name="predicate" />.</span></span>  
  
<span data-ttu-id="a43ad-1324">-或-</span><span class="sxs-lookup"><span data-stu-id="a43ad-1324">-or-</span></span> 
<span data-ttu-id="a43ad-1325">來源序列為空。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1325">The source sequence is empty.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SingleOrDefault&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a43ad-1326">傳回序列的單一特定項目；如果找不到任何項目，則傳回預設值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1326">Returns a single, specific element of a sequence, or a default value if no such element is found.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SingleOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource SingleOrDefault&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource SingleOrDefault&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SingleOrDefault(Of TSource) (source As IQueryable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource SingleOrDefault(System::Linq::IQueryable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member SingleOrDefault : System.Linq.IQueryable&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Queryable.SingleOrDefault source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-1327"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1327">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-1328">要傳回單一項目的 <see cref="T:System.Linq.IQueryable`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1328">An <see cref="T:System.Linq.IQueryable`1" /> to return the single element of.</span></span></param>
        <summary><span data-ttu-id="a43ad-1329">傳回序列的唯一一個項目，如果序列是空白，則為預設值，如果序列中有一個以上的項目，這個方法就會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1329">Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1330">輸入序列的單一項目，如果序列不包含任何項目，則為 <c>default</c>(<paramref name="TSource" />)。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1330">The single element of the input sequence, or <c>default</c>(<paramref name="TSource" />) if the sequence contains no elements.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1331"><xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1331">The <xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1332">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1332">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-1333">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1333">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1334">預期的行為是，它會傳回唯一項目中的`source`，或預設值，如果`source`是空的。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1334">The expected behavior is that it returns the only element in `source`, or a default value if `source` is empty.</span></span>  
  
 <span data-ttu-id="a43ad-1335"><xref:System.Linq.Queryable.SingleOrDefault%2A>方法不會提供方法來指定預設值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1335">The <xref:System.Linq.Queryable.SingleOrDefault%2A> method does not provide a way to specify a default value.</span></span> <span data-ttu-id="a43ad-1336">如果您想要指定預設值以外`default(TSource)`，使用<xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29>範例 > 一節中所述的方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1336">If you want to specify a default value other than `default(TSource)`, use the <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> method as described in the Example section.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-1337">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>選取唯一元素的陣列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1337">The following code example demonstrates how to use <xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> to select the only element of an array.</span></span> <span data-ttu-id="a43ad-1338">第二個查詢示範<xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>序列不包含只有一個項目時，會傳回預設值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1338">The second query demonstrates that <xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> returns a default value when the sequence does not contain exactly one element.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#83](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#83)]
 [!code-vb[System.Linq.Queryable#83](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#83)]  
  
 <span data-ttu-id="a43ad-1339">有時值`default(TSource)`不是您想要使用如果集合不包含任何元素的預設值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1339">Sometimes the value of `default(TSource)` is not the default value that you want to use if the collection contains no elements.</span></span> <span data-ttu-id="a43ad-1340">除了檢查不必要的預設值的結果，並將它如有必要變更，您可以使用<xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29>方法，以指定您想要使用這個集合是空的預設值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1340">Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> method to specify the default value that you want to use if the collection is empty.</span></span> <span data-ttu-id="a43ad-1341">然後，呼叫<xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%29>若要取得的項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1341">Then, call <xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> to obtain the element.</span></span> <span data-ttu-id="a43ad-1342">下列程式碼範例會使用這兩種技術以取得預設值為 1，如果頁面號碼的集合是空的。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1342">The following code example uses both techniques to obtain a default value of 1 if a collection of page numbers is empty.</span></span> <span data-ttu-id="a43ad-1343">整數，預設值為 0，這是通常是有效的頁面編號，因為預設值必須被指定為 1。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1343">Because the default value for an integer is 0, which is not usually a valid page number, the default value must be specified as 1 instead.</span></span> <span data-ttu-id="a43ad-1344">查詢完成後，便會檢查第一次的結果變數，不必要的預設值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1344">The first result variable is checked for the unwanted default value after the query is completed.</span></span> <span data-ttu-id="a43ad-1345">第二個結果變數藉由呼叫取得<xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29>指定預設值為 1。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1345">The second result variable is obtained by calling <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> to specify a default value of 1.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#133](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#133)]
 [!code-vb[System.Linq.Queryable#133](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#133)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1346"><paramref name="source" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1346"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a43ad-1347"><paramref name="source" /> 具有多個項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1347"><paramref name="source" /> has more than one element.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SingleOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource SingleOrDefault&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource SingleOrDefault&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SingleOrDefault(Of TSource) (source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean))) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource SingleOrDefault(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, bool&gt; ^&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member SingleOrDefault : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, bool&gt;&gt; -&gt; 'Source" Usage="System.Linq.Queryable.SingleOrDefault (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-1348"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1348">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-1349">要傳回單一項目的來源 <see cref="T:System.Linq.IQueryable`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1349">An <see cref="T:System.Linq.IQueryable`1" /> to return a single element from.</span></span></param>
        <param name="predicate"><span data-ttu-id="a43ad-1350">用來測試項目是否符合條件的函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1350">A function to test an element for a condition.</span></span></param>
        <summary><span data-ttu-id="a43ad-1351">傳回序列中符合指定之條件的唯一一個元素，如果沒有這類元素，則為預設值，如果有一個以上的元素符合條件，這個方法就會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1351">Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1352">輸入序列中符合 <paramref name="predicate" /> 條件的單一項目，如果找不到這類項目，則為 <c>default</c>(<paramref name="TSource" />)。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1352">The single element of the input sequence that satisfies the condition in <paramref name="predicate" />, or <c>default</c>(<paramref name="TSource" />) if no such element is found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1353">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1353">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-1354">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1354">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-1355"><xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1355">The <xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1356">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1356">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-1357">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1357">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1358">預期的行為是，它會傳回唯一項目中的`source`，可滿足所指定的條件`predicate`，則為預設值，如果沒有這類項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1358">The expected behavior is that it returns the only element in `source` that satisfies the condition specified by `predicate`, or a default value if no such element exists.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-1359">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29>選取陣列中符合條件的唯一項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1359">The following code example demonstrates how to use <xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> to select the only element of an array that satisfies a condition.</span></span> <span data-ttu-id="a43ad-1360">第二個查詢示範<xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29>序列不包含只有一個符合條件的項目時，會傳回預設值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1360">The second query demonstrates that <xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> returns a default value when the sequence does not contain exactly one element that satisfies the condition.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#85](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#85)]
 [!code-vb[System.Linq.Queryable#85](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#85)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1361"><paramref name="source" /> 或 <paramref name="predicate" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1361"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a43ad-1362">超過一個項目符合 <paramref name="predicate" /> 中的條件。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1362">More than one element satisfies the condition in <paramref name="predicate" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Skip&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; Skip&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TSource&gt; Skip&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Skip(Of TSource) (source As IQueryable(Of TSource), count As Integer) As IQueryable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable&lt;TSource&gt; ^ Skip(System::Linq::IQueryable&lt;TSource&gt; ^ source, int count);" />
      <MemberSignature Language="F#" Value="static member Skip : System.Linq.IQueryable&lt;'Source&gt; * int -&gt; System.Linq.IQueryable&lt;'Source&gt;" Usage="System.Linq.Queryable.Skip (source, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-1363"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1363">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-1364">傳回項目的 <see cref="T:System.Linq.IQueryable`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1364">An <see cref="T:System.Linq.IQueryable`1" /> to return elements from.</span></span></param>
        <param name="count"><span data-ttu-id="a43ad-1365">傳回其餘項目之前要略過的項目數目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1365">The number of elements to skip before returning the remaining elements.</span></span></param>
        <summary><span data-ttu-id="a43ad-1366">略過序列中指定的項目數目，然後傳回其餘項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1366">Bypasses a specified number of elements in a sequence and then returns the remaining elements.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1367"><see cref="T:System.Linq.IQueryable`1" />，其中包含出現在輸入序列中指定之索引後面的項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1367">An <see cref="T:System.Linq.IQueryable`1" /> that contains elements that occur after the specified index in the input sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1368"><xref:System.Linq.Queryable.Skip%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Skip%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1368">The <xref:System.Linq.Queryable.Skip%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Skip%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1369">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1369">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-1370">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Skip%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1370">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Skip%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1371">預期的行為是，它會略過第一個`count`中的項目`source`，並傳回其餘項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1371">The expected behavior is that it skips the first `count` elements in `source` and returns the remaining elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-1372">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Skip%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29>略過指定的已排序陣列中的元素數目，並傳回其餘項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1372">The following code example demonstrates how to use <xref:System.Linq.Queryable.Skip%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> to skip a specified number of elements in a sorted array and return the remaining elements.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#87](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#87)]
 [!code-vb[System.Linq.Queryable#87](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#87)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1373"><paramref name="source" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1373"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SkipLast&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; SkipLast&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TSource&gt; SkipLast&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.SkipLast``1(System.Linq.IQueryable{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SkipLast(Of TSource) (source As IQueryable(Of TSource), count As Integer) As IQueryable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable&lt;TSource&gt; ^ SkipLast(System::Linq::IQueryable&lt;TSource&gt; ^ source, int count);" />
      <MemberSignature Language="F#" Value="static member SkipLast : System.Linq.IQueryable&lt;'Source&gt; * int -&gt; System.Linq.IQueryable&lt;'Source&gt;" Usage="System.Linq.Queryable.SkipLast (source, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="count" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">To be added.</typeparam>
        <param name="source">To be added.</param>
        <param name="count">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SkipWhile&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a43ad-1374">只要指定的條件為 true，便略過序列中的項目，然後傳回其餘項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1374">Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SkipWhile&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; SkipWhile&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TSource&gt; SkipWhile&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SkipWhile(Of TSource) (source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean))) As IQueryable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable&lt;TSource&gt; ^ SkipWhile(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, bool&gt; ^&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member SkipWhile : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, bool&gt;&gt; -&gt; System.Linq.IQueryable&lt;'Source&gt;" Usage="System.Linq.Queryable.SkipWhile (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-1375"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1375">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-1376">傳回項目的 <see cref="T:System.Linq.IQueryable`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1376">An <see cref="T:System.Linq.IQueryable`1" /> to return elements from.</span></span></param>
        <param name="predicate"><span data-ttu-id="a43ad-1377">用來測試每個項目是否符合條件的函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1377">A function to test each element for a condition.</span></span></param>
        <summary><span data-ttu-id="a43ad-1378">只要指定的條件為 true，便略過序列中的項目，然後傳回其餘項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1378">Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1379"><see cref="T:System.Linq.IQueryable`1" />，其中包含的項目位於 <paramref name="source" />，而且是從沒有通過 <paramref name="predicate" /> 所指定之測試的線性系列中第一個項目開始。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1379">An <see cref="T:System.Linq.IQueryable`1" /> that contains elements from <paramref name="source" /> starting at the first element in the linear series that does not pass the test specified by <paramref name="predicate" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1380">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1380">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-1381">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1381">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-1382"><xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1382">The <xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1383">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1383">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-1384">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1384">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1385">預期的行為是，它會套用`predicate`每個項目的`source`直到它找到的項目`predicate`會傳回 false。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1385">The expected behavior is that it applies `predicate` to each element in `source` until it finds an element for which `predicate` returns false.</span></span> <span data-ttu-id="a43ad-1386">會傳回該項目與所有剩餘的項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1386">That element and all the remaining elements are returned.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-1387">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29>條件為 true 時，請略過陣列的項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1387">The following code example demonstrates how to use <xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> to skip elements of an array as long as a condition is true.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#88](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#88)]
 [!code-vb[System.Linq.Queryable#88](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#88)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1388"><paramref name="source" /> 或 <paramref name="predicate" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1388"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SkipWhile&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; SkipWhile&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,int,bool&gt;&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TSource&gt; SkipWhile&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`3&lt;!!TSource, int32, bool&gt;&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SkipWhile(Of TSource) (source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Integer, Boolean))) As IQueryable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable&lt;TSource&gt; ^ SkipWhile(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, int, bool&gt; ^&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member SkipWhile : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, int, bool&gt;&gt; -&gt; System.Linq.IQueryable&lt;'Source&gt;" Usage="System.Linq.Queryable.SkipWhile (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Int32,System.Boolean&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-1389"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1389">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-1390">傳回項目的 <see cref="T:System.Linq.IQueryable`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1390">An <see cref="T:System.Linq.IQueryable`1" /> to return elements from.</span></span></param>
        <param name="predicate"><span data-ttu-id="a43ad-1391">用來測試各項目是否符合條件的函式；此函式的第二個參數代表來源項目的索引。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1391">A function to test each element for a condition; the second parameter of this function represents the index of the source element.</span></span></param>
        <summary><span data-ttu-id="a43ad-1392">只要指定的條件為 true，便略過序列中的項目，然後傳回其餘項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1392">Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</span></span> <span data-ttu-id="a43ad-1393">項目的索引是用於述詞功能的邏輯中。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1393">The element's index is used in the logic of the predicate function.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1394"><see cref="T:System.Linq.IQueryable`1" />，其中包含的項目位於 <paramref name="source" />，而且是從沒有通過 <paramref name="predicate" /> 所指定之測試的線性系列中第一個項目開始。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1394">An <see cref="T:System.Linq.IQueryable`1" /> that contains elements from <paramref name="source" /> starting at the first element in the linear series that does not pass the test specified by <paramref name="predicate" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1395">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1395">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-1396">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1396">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-1397"><xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1397">The <xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1398">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1398">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-1399">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1399">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1400">預期的行為是，它會套用`predicate`每個項目的`source`直到它找到的項目`predicate`會傳回 false。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1400">The expected behavior is that it applies `predicate` to each element in `source` until it finds an element for which `predicate` returns false.</span></span> <span data-ttu-id="a43ad-1401">會傳回該項目與所有剩餘的項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1401">That element and all the remaining elements are returned.</span></span> <span data-ttu-id="a43ad-1402">每個來源項目的索引提供做為第二個引數`predicate`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1402">The index of each source element is provided as the second argument to `predicate`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-1403">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29>取決於項目的索引條件為 true 時，請略過陣列的項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1403">The following code example demonstrates how to use <xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29> to skip elements of an array as long as a condition that depends on the element's index is true.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#89](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#89)]
 [!code-vb[System.Linq.Queryable#89](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#89)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1404"><paramref name="source" /> 或 <paramref name="predicate" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1404"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Sum">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a43ad-1405">計算數值序列的總和。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1405">Computes the sum of a sequence of numeric values.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static decimal Sum (this System.Linq.IQueryable&lt;decimal&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Sum(class System.Linq.IQueryable`1&lt;valuetype System.Decimal&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IQueryable(Of Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Sum(System::Linq::IQueryable&lt;System::Decimal&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : System.Linq.IQueryable&lt;decimal&gt; -&gt; decimal" Usage="System.Linq.Queryable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Decimal&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="a43ad-1406">要計算總和的 <see cref="T:System.Decimal" /> 值序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1406">A sequence of <see cref="T:System.Decimal" /> values to calculate the sum of.</span></span></param>
        <summary><span data-ttu-id="a43ad-1407">計算 <see cref="T:System.Decimal" /> 值序列的總和。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1407">Computes the sum of a sequence of <see cref="T:System.Decimal" /> values.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1408">序列中值的總合。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1408">The sum of the values in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1409"><xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Decimal%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Decimal%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1409">The <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Decimal%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Decimal%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1410">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1410">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-1411">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Decimal%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1411">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Decimal%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1412">預期的行為是傳回的值總和`source`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1412">The expected behavior is that it returns the sum of the values in `source`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-1413">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29>加總的一連串的值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1413">The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Queryable#120](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#120)]
 [!code-vb[System.Linq.Queryable#120](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#120)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1414"><paramref name="source" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1414"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="a43ad-1415">總和大於 <see cref="F:System.Decimal.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1415">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static double Sum (this System.Linq.IQueryable&lt;double&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Sum(class System.Linq.IQueryable`1&lt;float64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IQueryable(Of Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Sum(System::Linq::IQueryable&lt;double&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : System.Linq.IQueryable&lt;double&gt; -&gt; double" Usage="System.Linq.Queryable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Double&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="a43ad-1416">要計算總和的 <see cref="T:System.Double" /> 值序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1416">A sequence of <see cref="T:System.Double" /> values to calculate the sum of.</span></span></param>
        <summary><span data-ttu-id="a43ad-1417">計算 <see cref="T:System.Double" /> 值序列的總和。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1417">Computes the sum of a sequence of <see cref="T:System.Double" /> values.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1418">序列中值的總合。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1418">The sum of the values in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1419"><xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Double%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Double%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1419">The <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Double%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Double%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1420">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1420">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-1421">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Double%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1421">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Double%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1422">預期的行為是傳回的值總和`source`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1422">The expected behavior is that it returns the sum of the values in `source`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-1423">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29>加總的一連串的值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1423">The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Queryable#120](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#120)]
 [!code-vb[System.Linq.Queryable#120](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#120)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1424"><paramref name="source" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1424"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static int Sum (this System.Linq.IQueryable&lt;int&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sum(class System.Linq.IQueryable`1&lt;int32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IQueryable(Of Integer)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Sum(System::Linq::IQueryable&lt;int&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : System.Linq.IQueryable&lt;int&gt; -&gt; int" Usage="System.Linq.Queryable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Int32&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="a43ad-1425">要計算總和的 <see cref="T:System.Int32" /> 值序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1425">A sequence of <see cref="T:System.Int32" /> values to calculate the sum of.</span></span></param>
        <summary><span data-ttu-id="a43ad-1426">計算 <see cref="T:System.Int32" /> 值序列的總和。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1426">Computes the sum of a sequence of <see cref="T:System.Int32" /> values.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1427">序列中值的總合。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1427">The sum of the values in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1428"><xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int32%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int32%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1428">The <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int32%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int32%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1429">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1429">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-1430">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int32%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1430">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int32%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1431">預期的行為是傳回的值總和`source`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1431">The expected behavior is that it returns the sum of the values in `source`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-1432">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29>加總的一連串的值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1432">The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Queryable#120](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#120)]
 [!code-vb[System.Linq.Queryable#120](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#120)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1433"><paramref name="source" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1433"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="a43ad-1434">總和大於 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1434">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static long Sum (this System.Linq.IQueryable&lt;long&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Sum(class System.Linq.IQueryable`1&lt;int64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IQueryable(Of Long)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long Sum(System::Linq::IQueryable&lt;long&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : System.Linq.IQueryable&lt;int64&gt; -&gt; int64" Usage="System.Linq.Queryable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Int64&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="a43ad-1435">要計算總和的 <see cref="T:System.Int64" /> 值序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1435">A sequence of <see cref="T:System.Int64" /> values to calculate the sum of.</span></span></param>
        <summary><span data-ttu-id="a43ad-1436">計算 <see cref="T:System.Int64" /> 值序列的總和。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1436">Computes the sum of a sequence of <see cref="T:System.Int64" /> values.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1437">序列中值的總合。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1437">The sum of the values in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1438"><xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int64%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int64%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1438">The <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int64%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int64%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1439">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1439">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-1440">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int64%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1440">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int64%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1441">預期的行為是傳回的值總和`source`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1441">The expected behavior is that it returns the sum of the values in `source`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-1442">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29>加總的一連串的值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1442">The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Queryable#120](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#120)]
 [!code-vb[System.Linq.Queryable#120](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#120)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1443"><paramref name="source" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1443"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="a43ad-1444">總和大於 <see cref="F:System.Int64.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1444">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Sum (this System.Linq.IQueryable&lt;Nullable&lt;decimal&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Sum(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IQueryable(Of Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Sum(System::Linq::IQueryable&lt;Nullable&lt;System::Decimal&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : System.Linq.IQueryable&lt;Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Queryable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="a43ad-1445">要計算總和之可為 Null 的 <see cref="T:System.Decimal" /> 值序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1445">A sequence of nullable <see cref="T:System.Decimal" /> values to calculate the sum of.</span></span></param>
        <summary><span data-ttu-id="a43ad-1446">計算可為 Null 之 <see cref="T:System.Decimal" /> 值序列的總和。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1446">Computes the sum of a sequence of nullable <see cref="T:System.Decimal" /> values.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1447">序列中值的總合。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1447">The sum of the values in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1448"><xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1448">The <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1449">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1449">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-1450">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1450">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1451">預期的行為是傳回的值總和`source`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1451">The expected behavior is that it returns the sum of the values in `source`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-1452">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29>加總的一連串的值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1452">The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Queryable#121](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#121)]
 [!code-vb[System.Linq.Queryable#121](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#121)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1453"><paramref name="source" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1453"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="a43ad-1454">總和大於 <see cref="F:System.Decimal.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1454">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Sum (this System.Linq.IQueryable&lt;Nullable&lt;double&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Sum(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IQueryable(Of Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Sum(System::Linq::IQueryable&lt;Nullable&lt;double&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : System.Linq.IQueryable&lt;Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Queryable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="a43ad-1455">要計算總和之可為 Null 的 <see cref="T:System.Double" /> 值序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1455">A sequence of nullable <see cref="T:System.Double" /> values to calculate the sum of.</span></span></param>
        <summary><span data-ttu-id="a43ad-1456">計算可為 Null 之 <see cref="T:System.Double" /> 值序列的總和。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1456">Computes the sum of a sequence of nullable <see cref="T:System.Double" /> values.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1457">序列中值的總合。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1457">The sum of the values in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1458"><xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1458">The <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1459">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1459">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-1460">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1460">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1461">預期的行為是傳回的值總和`source`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1461">The expected behavior is that it returns the sum of the values in `source`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-1462">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29>加總的一連串的值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1462">The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Queryable#121](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#121)]
 [!code-vb[System.Linq.Queryable#121](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#121)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1463"><paramref name="source" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1463"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Sum (this System.Linq.IQueryable&lt;Nullable&lt;int&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Sum(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IQueryable(Of Nullable(Of Integer))) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; Sum(System::Linq::IQueryable&lt;Nullable&lt;int&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : System.Linq.IQueryable&lt;Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;int&gt;" Usage="System.Linq.Queryable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="a43ad-1464">要計算總和之可為 Null 的 <see cref="T:System.Int32" /> 值序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1464">A sequence of nullable <see cref="T:System.Int32" /> values to calculate the sum of.</span></span></param>
        <summary><span data-ttu-id="a43ad-1465">計算可為 Null 之 <see cref="T:System.Int32" /> 值序列的總和。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1465">Computes the sum of a sequence of nullable <see cref="T:System.Int32" /> values.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1466">序列中值的總合。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1466">The sum of the values in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1467"><xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1467">The <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1468">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1468">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-1469">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1469">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1470">預期的行為是傳回的值總和`source`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1470">The expected behavior is that it returns the sum of the values in `source`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-1471">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29>加總的一連串的值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1471">The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Queryable#121](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#121)]
 [!code-vb[System.Linq.Queryable#121](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#121)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1472"><paramref name="source" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1472"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="a43ad-1473">總和大於 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1473">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Sum (this System.Linq.IQueryable&lt;Nullable&lt;long&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Sum(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IQueryable(Of Nullable(Of Long))) As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;long&gt; Sum(System::Linq::IQueryable&lt;Nullable&lt;long&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : System.Linq.IQueryable&lt;Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;int64&gt;" Usage="System.Linq.Queryable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="a43ad-1474">要計算總和之可為 Null 的 <see cref="T:System.Int64" /> 值序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1474">A sequence of nullable <see cref="T:System.Int64" /> values to calculate the sum of.</span></span></param>
        <summary><span data-ttu-id="a43ad-1475">計算可為 Null 之 <see cref="T:System.Int64" /> 值序列的總和。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1475">Computes the sum of a sequence of nullable <see cref="T:System.Int64" /> values.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1476">序列中值的總合。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1476">The sum of the values in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1477"><xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1477">The <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1478">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1478">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-1479">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1479">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1480">預期的行為是傳回的值總和`source`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1480">The expected behavior is that it returns the sum of the values in `source`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-1481">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29>加總的一連串的值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1481">The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Queryable#121](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#121)]
 [!code-vb[System.Linq.Queryable#121](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#121)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1482"><paramref name="source" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1482"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="a43ad-1483">總和大於 <see cref="F:System.Int64.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1483">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Sum (this System.Linq.IQueryable&lt;Nullable&lt;float&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Sum(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IQueryable(Of Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Sum(System::Linq::IQueryable&lt;Nullable&lt;float&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : System.Linq.IQueryable&lt;Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Queryable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="a43ad-1484">要計算總和之可為 Null 的 <see cref="T:System.Single" /> 值序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1484">A sequence of nullable <see cref="T:System.Single" /> values to calculate the sum of.</span></span></param>
        <summary><span data-ttu-id="a43ad-1485">計算可為 Null 之 <see cref="T:System.Single" /> 值序列的總和。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1485">Computes the sum of a sequence of nullable <see cref="T:System.Single" /> values.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1486">序列中值的總合。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1486">The sum of the values in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1487"><xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1487">The <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1488">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1488">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-1489">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1489">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1490">預期的行為是傳回的值總和`source`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1490">The expected behavior is that it returns the sum of the values in `source`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-1491">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29>加總的一連串的值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1491">The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> to sum the values of a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#121](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#121)]
 [!code-vb[System.Linq.Queryable#121](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#121)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1492"><paramref name="source" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1492"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static float Sum (this System.Linq.IQueryable&lt;float&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Sum(class System.Linq.IQueryable`1&lt;float32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IQueryable(Of Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Sum(System::Linq::IQueryable&lt;float&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : System.Linq.IQueryable&lt;single&gt; -&gt; single" Usage="System.Linq.Queryable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Single&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="a43ad-1493">要計算總和的 <see cref="T:System.Single" /> 值序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1493">A sequence of <see cref="T:System.Single" /> values to calculate the sum of.</span></span></param>
        <summary><span data-ttu-id="a43ad-1494">計算 <see cref="T:System.Single" /> 值序列的總和。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1494">Computes the sum of a sequence of <see cref="T:System.Single" /> values.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1495">序列中值的總合。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1495">The sum of the values in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1496"><xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1496">The <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1497">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1497">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-1498">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1498">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1499">預期的行為是傳回的值總和`source`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1499">The expected behavior is that it returns the sum of the values in `source`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-1500">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29>加總的一連串的值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1500">The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29> to sum the values of a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#120](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#120)]
 [!code-vb[System.Linq.Queryable#120](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#120)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1501"><paramref name="source" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1501"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static decimal Sum&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,decimal&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Sum&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Decimal&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Decimal))) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Sum(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, System::Decimal&gt; ^&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, decimal&gt;&gt; -&gt; decimal" Usage="System.Linq.Queryable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Decimal&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-1502"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1502">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-1503">型別 <paramref name="TSource" /> 的值序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1503">A sequence of values of type <paramref name="TSource" />.</span></span></param>
        <param name="selector"><span data-ttu-id="a43ad-1504">要套用到每個項目的投影函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1504">A projection function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="a43ad-1505">計算在輸入序列中各項目上叫用投影函式後所取得之 <see cref="T:System.Decimal" /> 值序列的總和。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1505">Computes the sum of the sequence of <see cref="T:System.Decimal" /> values that is obtained by invoking a projection function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1506">預計值的總合。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1506">The sum of the projected values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1507">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1507">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-1508">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1508">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-1509"><xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1509">The <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1510">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1510">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-1511">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1511">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1512">預期的行為是，它會叫用`selector`的每個項目上`source`，並傳回產生的值的總和。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1512">The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-1513">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29>加總的預計的值的序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1513">The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Queryable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#98)]
 [!code-vb[System.Linq.Queryable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1514"><paramref name="source" /> 或 <paramref name="selector" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1514"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="a43ad-1515">總和大於 <see cref="F:System.Decimal.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1515">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static double Sum&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,double&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Sum&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, float64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Double))) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Sum(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, double&gt; ^&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, double&gt;&gt; -&gt; double" Usage="System.Linq.Queryable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Double&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-1516"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1516">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-1517">型別 <paramref name="TSource" /> 的值序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1517">A sequence of values of type <paramref name="TSource" />.</span></span></param>
        <param name="selector"><span data-ttu-id="a43ad-1518">要套用到每個項目的投影函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1518">A projection function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="a43ad-1519">計算在輸入序列中各項目上叫用投影函式後所取得之 <see cref="T:System.Double" /> 值序列的總和。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1519">Computes the sum of the sequence of <see cref="T:System.Double" /> values that is obtained by invoking a projection function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1520">預計值的總合。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1520">The sum of the projected values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1521">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1521">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-1522">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1522">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-1523"><xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1523">The <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1524">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1524">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-1525">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29>取決於實作型別的他`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1525">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> depends on the implementation of the type of he `source` parameter.</span></span> <span data-ttu-id="a43ad-1526">預期的行為是，它會叫用`selector`的每個項目上`source`，並傳回產生的值的總和。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1526">The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-1527">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29>加總的預計的值的序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1527">The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Queryable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#98)]
 [!code-vb[System.Linq.Queryable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1528"><paramref name="source" /> 或 <paramref name="selector" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1528"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static int Sum&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,int&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sum&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, int32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Integer))) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Sum(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, int&gt; ^&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, int&gt;&gt; -&gt; int" Usage="System.Linq.Queryable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Int32&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-1529"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1529">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-1530">型別 <paramref name="TSource" /> 的值序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1530">A sequence of values of type <paramref name="TSource" />.</span></span></param>
        <param name="selector"><span data-ttu-id="a43ad-1531">要套用到每個項目的投影函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1531">A projection function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="a43ad-1532">計算在輸入序列中各項目上叫用投影函式後所取得之 <see cref="T:System.Int32" /> 值序列的總和。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1532">Computes the sum of the sequence of <see cref="T:System.Int32" /> values that is obtained by invoking a projection function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1533">預計值的總合。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1533">The sum of the projected values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1534">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1534">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-1535">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1535">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-1536"><xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1536">The <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1537">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1537">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-1538">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1538">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1539">預期的行為是，它會叫用`selector`的每個項目上`source`，並傳回產生的值的總和。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1539">The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-1540">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29>加總的預計的值的序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1540">The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Queryable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#98)]
 [!code-vb[System.Linq.Queryable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1541"><paramref name="source" /> 或 <paramref name="selector" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1541"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="a43ad-1542">總和大於 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1542">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static long Sum&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,long&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Sum&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, int64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Long))) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long Sum(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, long&gt; ^&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, int64&gt;&gt; -&gt; int64" Usage="System.Linq.Queryable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Int64&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-1543"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1543">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-1544">型別 <paramref name="TSource" /> 的值序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1544">A sequence of values of type <paramref name="TSource" />.</span></span></param>
        <param name="selector"><span data-ttu-id="a43ad-1545">要套用到每個項目的投影函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1545">A projection function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="a43ad-1546">計算在輸入序列中各項目上叫用投影函式後所取得之 <see cref="T:System.Int64" /> 值序列的總和。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1546">Computes the sum of the sequence of <see cref="T:System.Int64" /> values that is obtained by invoking a projection function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1547">預計值的總合。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1547">The sum of the projected values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1548">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1548">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-1549">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1549">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-1550"><xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1550">The <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1551">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1551">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-1552">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1552">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1553">預期的行為是，它會叫用`selector`的每個項目上`source`，並傳回產生的值的總和。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1553">The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-1554">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29>加總的預計的值的序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1554">The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Queryable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#98)]
 [!code-vb[System.Linq.Queryable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1555"><paramref name="source" /> 或 <paramref name="selector" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1555"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="a43ad-1556">總和大於 <see cref="F:System.Int64.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1556">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Sum&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;decimal&gt;&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Sum&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Nullable(Of Decimal)))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Sum(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, Nullable&lt;System::Decimal&gt;&gt; ^&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;decimal&gt;&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Queryable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-1557"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1557">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-1558">型別 <paramref name="TSource" /> 的值序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1558">A sequence of values of type <paramref name="TSource" />.</span></span></param>
        <param name="selector"><span data-ttu-id="a43ad-1559">要套用到每個項目的投影函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1559">A projection function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="a43ad-1560">計算在輸入序列中各項目上叫用投影函式後所取得可為 Null 之 <see cref="T:System.Decimal" /> 值序列的總和。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1560">Computes the sum of the sequence of nullable <see cref="T:System.Decimal" /> values that is obtained by invoking a projection function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1561">預計值的總合。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1561">The sum of the projected values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1562">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1562">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-1563">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1563">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-1564"><xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1564">The <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1565">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1565">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-1566">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1566">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1567">預期的行為是，它會叫用`selector`的每個項目上`source`，並傳回產生的值的總和。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1567">The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-1568">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29>加總的預計的值的序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1568">The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Queryable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#98)]
 [!code-vb[System.Linq.Queryable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1569"><paramref name="source" /> 或 <paramref name="selector" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1569"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="a43ad-1570">總和大於 <see cref="F:System.Decimal.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1570">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Sum&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;double&gt;&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Sum&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float64&gt;&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Nullable(Of Double)))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Sum(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, Nullable&lt;double&gt;&gt; ^&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;double&gt;&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Queryable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-1571"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1571">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-1572">型別 <paramref name="TSource" /> 的值序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1572">A sequence of values of type <paramref name="TSource" />.</span></span></param>
        <param name="selector"><span data-ttu-id="a43ad-1573">要套用到每個項目的投影函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1573">A projection function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="a43ad-1574">計算在輸入序列中各項目上叫用投影函式後所取得可為 Null 之 <see cref="T:System.Double" /> 值序列的總和。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1574">Computes the sum of the sequence of nullable <see cref="T:System.Double" /> values that is obtained by invoking a projection function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1575">預計值的總合。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1575">The sum of the projected values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1576">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1576">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-1577">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1577">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-1578"><xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1578">The <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1579">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1579">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-1580">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1580">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1581">預期的行為是，它會叫用`selector`的每個項目上`source`，並傳回產生的值的總和。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1581">The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-1582">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29>加總的預計的值的序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1582">The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Queryable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#98)]
 [!code-vb[System.Linq.Queryable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1583"><paramref name="source" /> 或 <paramref name="selector" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1583"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Sum&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;int&gt;&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Sum&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int32&gt;&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Nullable(Of Integer)))) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; Sum(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, Nullable&lt;int&gt;&gt; ^&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;int&gt;&gt;&gt; -&gt; Nullable&lt;int&gt;" Usage="System.Linq.Queryable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-1584"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1584">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-1585">型別 <paramref name="TSource" /> 的值序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1585">A sequence of values of type <paramref name="TSource" />.</span></span></param>
        <param name="selector"><span data-ttu-id="a43ad-1586">要套用到每個項目的投影函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1586">A projection function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="a43ad-1587">計算在輸入序列中各項目上叫用投影函式後所取得可為 Null 之 <see cref="T:System.Int32" /> 值序列的總和。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1587">Computes the sum of the sequence of nullable <see cref="T:System.Int32" /> values that is obtained by invoking a projection function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1588">預計值的總合。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1588">The sum of the projected values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1589">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1589">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-1590">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1590">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-1591"><xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1591">The <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1592">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1592">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-1593">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1593">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1594">預期的行為是，它會叫用`selector`的每個項目上`source`，並傳回產生的值的總和。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1594">The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-1595">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29>加總的預計的值的序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1595">The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Queryable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#98)]
 [!code-vb[System.Linq.Queryable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1596"><paramref name="source" /> 或 <paramref name="selector" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1596"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="a43ad-1597">總和大於 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1597">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Sum&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;long&gt;&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Sum&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int64&gt;&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Nullable(Of Long)))) As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;long&gt; Sum(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, Nullable&lt;long&gt;&gt; ^&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;int64&gt;&gt;&gt; -&gt; Nullable&lt;int64&gt;" Usage="System.Linq.Queryable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-1598"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1598">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-1599">型別 <paramref name="TSource" /> 的值序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1599">A sequence of values of type <paramref name="TSource" />.</span></span></param>
        <param name="selector"><span data-ttu-id="a43ad-1600">要套用到每個項目的投影函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1600">A projection function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="a43ad-1601">計算在輸入序列中各項目上叫用投影函式後所取得可為 Null 之 <see cref="T:System.Int64" /> 值序列的總和。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1601">Computes the sum of the sequence of nullable <see cref="T:System.Int64" /> values that is obtained by invoking a projection function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1602">預計值的總合。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1602">The sum of the projected values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1603">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1603">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-1604">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1604">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-1605"><xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1605">The <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1606">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1606">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-1607">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1607">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1608">預期的行為是，它會叫用`selector`的每個項目上`source`，並傳回產生的值的總和。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1608">The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-1609">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29>加總的預計的值的序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1609">The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Queryable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#98)]
 [!code-vb[System.Linq.Queryable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1610"><paramref name="source" /> 或 <paramref name="selector" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1610"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="a43ad-1611">總和大於 <see cref="F:System.Int64.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1611">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Sum&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;float&gt;&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Sum&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float32&gt;&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Nullable(Of Single)))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Sum(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, Nullable&lt;float&gt;&gt; ^&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, Nullable&lt;single&gt;&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Queryable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-1612"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1612">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-1613">型別 <paramref name="TSource" /> 的值序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1613">A sequence of values of type <paramref name="TSource" />.</span></span></param>
        <param name="selector"><span data-ttu-id="a43ad-1614">要套用到每個項目的投影函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1614">A projection function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="a43ad-1615">計算在輸入序列中各項目上叫用投影函式後所取得可為 Null 之 <see cref="T:System.Single" /> 值序列的總和。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1615">Computes the sum of the sequence of nullable <see cref="T:System.Single" /> values that is obtained by invoking a projection function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1616">預計值的總合。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1616">The sum of the projected values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1617">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1617">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-1618">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1618">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-1619"><xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1619">The <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1620">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1620">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-1621">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1621">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1622">預期的行為是，它會叫用`selector`的每個項目上`source`，並傳回產生的值的總和。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1622">The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-1623">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29>加總的預計的值的序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1623">The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Queryable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#98)]
 [!code-vb[System.Linq.Queryable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1624"><paramref name="source" /> 或 <paramref name="selector" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1624"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static float Sum&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,float&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Sum&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, float32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Single))) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Sum(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, float&gt; ^&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, single&gt;&gt; -&gt; single" Usage="System.Linq.Queryable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Single&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-1625"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1625">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-1626">型別 <paramref name="TSource" /> 的值序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1626">A sequence of values of type <paramref name="TSource" />.</span></span></param>
        <param name="selector"><span data-ttu-id="a43ad-1627">要套用到每個項目的投影函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1627">A projection function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="a43ad-1628">計算在輸入序列中各項目上叫用投影函式後所取得之 <see cref="T:System.Single" /> 值序列的總和。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1628">Computes the sum of the sequence of <see cref="T:System.Single" /> values that is obtained by invoking a projection function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1629">預計值的總合。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1629">The sum of the projected values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1630">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1630">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-1631">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1631">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-1632"><xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1632">The <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1633">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1633">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-1634">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1634">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1635">預期的行為是，它會叫用`selector`的每個項目上`source`，並傳回產生的值的總和。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1635">The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-1636">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29>加總的預計的值的序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1636">The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Queryable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#98)]
 [!code-vb[System.Linq.Queryable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1637"><paramref name="source" /> 或 <paramref name="selector" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1637"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Take&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; Take&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TSource&gt; Take&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Take(Of TSource) (source As IQueryable(Of TSource), count As Integer) As IQueryable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable&lt;TSource&gt; ^ Take(System::Linq::IQueryable&lt;TSource&gt; ^ source, int count);" />
      <MemberSignature Language="F#" Value="static member Take : System.Linq.IQueryable&lt;'Source&gt; * int -&gt; System.Linq.IQueryable&lt;'Source&gt;" Usage="System.Linq.Queryable.Take (source, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-1638"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1638">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-1639">傳回項目的序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1639">The sequence to return elements from.</span></span></param>
        <param name="count"><span data-ttu-id="a43ad-1640">要傳回的項目數目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1640">The number of elements to return.</span></span></param>
        <summary><span data-ttu-id="a43ad-1641">從序列開頭傳回指定的連續項目數目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1641">Returns a specified number of contiguous elements from the start of a sequence.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1642"><see cref="T:System.Linq.IQueryable`1" />，其中包含來自 <paramref name="source" /> 開頭的指定項目數目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1642">An <see cref="T:System.Linq.IQueryable`1" /> that contains the specified number of elements from the start of <paramref name="source" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1643"><xref:System.Linq.Queryable.Take%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Take%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1643">The <xref:System.Linq.Queryable.Take%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Take%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1644">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1644">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-1645">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Take%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1645">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Take%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1646">預期的行為是它會採用第一個`count`從開頭的項目`source`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1646">The expected behavior is that it takes the first `count` elements from the start of `source`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-1647">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Take%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29>從序列開頭傳回項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1647">The following code example demonstrates how to use <xref:System.Linq.Queryable.Take%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> to return elements from the start of a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#99](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#99)]
 [!code-vb[System.Linq.Queryable#99](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#99)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1648"><paramref name="source" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1648"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TakeLast&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; TakeLast&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TSource&gt; TakeLast&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.TakeLast``1(System.Linq.IQueryable{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TakeLast(Of TSource) (source As IQueryable(Of TSource), count As Integer) As IQueryable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable&lt;TSource&gt; ^ TakeLast(System::Linq::IQueryable&lt;TSource&gt; ^ source, int count);" />
      <MemberSignature Language="F#" Value="static member TakeLast : System.Linq.IQueryable&lt;'Source&gt; * int -&gt; System.Linq.IQueryable&lt;'Source&gt;" Usage="System.Linq.Queryable.TakeLast (source, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="count" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">To be added.</typeparam>
        <param name="source">To be added.</param>
        <param name="count">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TakeWhile&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a43ad-1649">只要指定的條件為 true，就會傳回序列中的項目，然後略過其餘項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1649">Returns elements from a sequence as long as a specified condition is true, and then skips the remaining elements.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TakeWhile&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; TakeWhile&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TSource&gt; TakeWhile&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TakeWhile(Of TSource) (source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean))) As IQueryable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable&lt;TSource&gt; ^ TakeWhile(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, bool&gt; ^&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member TakeWhile : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, bool&gt;&gt; -&gt; System.Linq.IQueryable&lt;'Source&gt;" Usage="System.Linq.Queryable.TakeWhile (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-1650"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1650">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-1651">傳回項目的序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1651">The sequence to return elements from.</span></span></param>
        <param name="predicate"><span data-ttu-id="a43ad-1652">用來測試每個項目是否符合條件的函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1652">A function to test each element for a condition.</span></span></param>
        <summary><span data-ttu-id="a43ad-1653">只要指定的條件為 true，就會傳回序列中的項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1653">Returns elements from a sequence as long as a specified condition is true.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1654"><see cref="T:System.Linq.IQueryable`1" />，其中包含輸入序列中的項目，而這些項目出現在已無法通過 <paramref name="predicate" /> 所指定之測試的項目前面。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1654">An <see cref="T:System.Linq.IQueryable`1" /> that contains elements from the input sequence occurring before the element at which the test specified by <paramref name="predicate" /> no longer passes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1655">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1655">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-1656">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1656">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-1657"><xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1657">The <xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1658">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1658">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-1659">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1659">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1660">預期的行為是，它會套用`predicate`每個項目的`source`直到它找到的項目`predicate`傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1660">The expected behavior is that it applies `predicate` to each element in `source` until it finds an element for which `predicate` returns `false`.</span></span> <span data-ttu-id="a43ad-1661">在該點前面，它會傳回所有項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1661">It returns all the elements up until that point.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-1662">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29>條件為 true 時，從序列開頭傳回項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1662">The following code example demonstrates how to use <xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> to return elements from the start of a sequence as long as a condition is true.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#100](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#100)]
 [!code-vb[System.Linq.Queryable#100](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#100)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1663"><paramref name="source" /> 或 <paramref name="predicate" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1663"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TakeWhile&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; TakeWhile&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,int,bool&gt;&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TSource&gt; TakeWhile&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`3&lt;!!TSource, int32, bool&gt;&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TakeWhile(Of TSource) (source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Integer, Boolean))) As IQueryable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable&lt;TSource&gt; ^ TakeWhile(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, int, bool&gt; ^&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member TakeWhile : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, int, bool&gt;&gt; -&gt; System.Linq.IQueryable&lt;'Source&gt;" Usage="System.Linq.Queryable.TakeWhile (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Int32,System.Boolean&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-1664"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1664">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-1665">傳回項目的序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1665">The sequence to return elements from.</span></span></param>
        <param name="predicate"><span data-ttu-id="a43ad-1666">用來測試各項目是否符合條件的函式；此函式的第二個參數代表來源序列中項目的索引。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1666">A function to test each element for a condition; the second parameter of the function represents the index of the element in the source sequence.</span></span></param>
        <summary><span data-ttu-id="a43ad-1667">只要指定的條件為 true，就會傳回序列中的項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1667">Returns elements from a sequence as long as a specified condition is true.</span></span> <span data-ttu-id="a43ad-1668">項目的索引是用於述詞功能的邏輯中。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1668">The element's index is used in the logic of the predicate function.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1669"><see cref="T:System.Linq.IQueryable`1" />，其中包含輸入序列中的項目，而這些項目出現在已無法通過 <paramref name="predicate" /> 所指定之測試的項目前面。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1669">An <see cref="T:System.Linq.IQueryable`1" /> that contains elements from the input sequence occurring before the element at which the test specified by <paramref name="predicate" /> no longer passes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1670">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1670">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-1671">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1671">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-1672"><xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1672">The <xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1673">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1673">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-1674">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1674">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1675">預期的行為是，它會套用`predicate`每個項目的`source`直到它找到的項目`predicate`傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1675">The expected behavior is that it applies `predicate` to each element in `source` until it finds an element for which `predicate` returns `false`.</span></span> <span data-ttu-id="a43ad-1676">在該點前面，它會傳回所有項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1676">It returns all the elements up until that point.</span></span> <span data-ttu-id="a43ad-1677">每個來源項目的索引提供做為第二個引數`predicate`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1677">The index of each source element is provided as the second argument to `predicate`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-1678">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29>從序列開頭傳回項目，只要使用的項目索引的條件為 true。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1678">The following code example demonstrates how to use <xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29> to return elements from the start of a sequence as long as a condition that uses the index of the element is true.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#101](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#101)]
 [!code-vb[System.Linq.Queryable#101](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#101)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1679"><paramref name="source" /> 或 <paramref name="predicate" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1679"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ThenBy&lt;TSource,TKey&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a43ad-1680">依遞增順序，執行序列中項目的後續排序作業。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1680">Performs a subsequent ordering of the elements in a sequence in ascending order.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ThenBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedQueryable&lt;TSource&gt; ThenBy&lt;TSource,TKey&gt; (this System.Linq.IOrderedQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedQueryable`1&lt;!!TSource&gt; ThenBy&lt;TSource, TKey&gt;(class System.Linq.IOrderedQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TKey&gt;&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ThenBy(Of TSource, TKey) (source As IOrderedQueryable(Of TSource), keySelector As Expression(Of Func(Of TSource, TKey))) As IOrderedQueryable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedQueryable&lt;TSource&gt; ^ ThenBy(System::Linq::IOrderedQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, TKey&gt; ^&gt; ^ keySelector);" />
      <MemberSignature Language="F#" Value="static member ThenBy : System.Linq.IOrderedQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, 'Key&gt;&gt; -&gt; System.Linq.IOrderedQueryable&lt;'Source&gt;" Usage="System.Linq.Queryable.ThenBy (source, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedQueryable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IOrderedQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TKey&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-1681"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1681">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="a43ad-1682"><paramref name="keySelector" /> 表示之函式所傳回索引鍵的型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1682">The type of the key returned by the function represented by <paramref name="keySelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-1683">包含要排序之項目的 <see cref="T:System.Linq.IOrderedQueryable`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1683">An <see cref="T:System.Linq.IOrderedQueryable`1" /> that contains elements to sort.</span></span></param>
        <param name="keySelector"><span data-ttu-id="a43ad-1684">用來從各個項目擷取索引鍵的函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1684">A function to extract a key from each element.</span></span></param>
        <summary><span data-ttu-id="a43ad-1685">依據索引鍵，按遞增順序執行序列中項目的後續排序作業。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1685">Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1686">依據索引鍵排序其項目的 <see cref="T:System.Linq.IOrderedQueryable`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1686">An <see cref="T:System.Linq.IOrderedQueryable`1" /> whose elements are sorted according to a key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1687">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1687">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-1688">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1688">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-1689"><xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1689">The <xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1690">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1690">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1691">呼叫的結果<xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29>轉換為類型<xref:System.Linq.IOrderedQueryable%601>後傳回。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1691">The result of calling <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> is cast to type <xref:System.Linq.IOrderedQueryable%601> and returned.</span></span>  
  
 <span data-ttu-id="a43ad-1692">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1692">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1693">預期的行為是，它會執行次要排序之項目的`source`藉由叫用的索引鍵為基礎`keySelector`各項目上`source`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1693">The expected behavior is that it performs a secondary sort of the elements of `source` based on the key obtained by invoking `keySelector` on each element of `source`.</span></span> <span data-ttu-id="a43ad-1694">所有先前建立的排序次序會保留。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1694">All previously established sort orders are preserved.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-1695">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29>執行次要排序序列中的項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1695">The following code example demonstrates how to use <xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> to perform a secondary ordering of the elements in a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#102](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#102)]
 [!code-vb[System.Linq.Queryable#102](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#102)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1696"><paramref name="source" /> 或 <paramref name="keySelector" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1696"><paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ThenBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedQueryable&lt;TSource&gt; ThenBy&lt;TSource,TKey&gt; (this System.Linq.IOrderedQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedQueryable`1&lt;!!TSource&gt; ThenBy&lt;TSource, TKey&gt;(class System.Linq.IOrderedQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TKey&gt;&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ThenBy(Of TSource, TKey) (source As IOrderedQueryable(Of TSource), keySelector As Expression(Of Func(Of TSource, TKey)), comparer As IComparer(Of TKey)) As IOrderedQueryable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedQueryable&lt;TSource&gt; ^ ThenBy(System::Linq::IOrderedQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, TKey&gt; ^&gt; ^ keySelector, System::Collections::Generic::IComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member ThenBy : System.Linq.IOrderedQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, 'Key&gt;&gt; * System.Collections.Generic.IComparer&lt;'Key&gt; -&gt; System.Linq.IOrderedQueryable&lt;'Source&gt;" Usage="System.Linq.Queryable.ThenBy (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedQueryable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IOrderedQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TKey&gt;&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-1697"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1697">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="a43ad-1698"><paramref name="keySelector" /> 表示之函式所傳回索引鍵的型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1698">The type of the key returned by the function represented by <paramref name="keySelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-1699">包含要排序之項目的 <see cref="T:System.Linq.IOrderedQueryable`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1699">An <see cref="T:System.Linq.IOrderedQueryable`1" /> that contains elements to sort.</span></span></param>
        <param name="keySelector"><span data-ttu-id="a43ad-1700">用來從各個項目擷取索引鍵的函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1700">A function to extract a key from each element.</span></span></param>
        <param name="comparer"><span data-ttu-id="a43ad-1701">用來比較金鑰的 <see cref="T:System.Collections.Generic.IComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1701">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</span></span></param>
        <summary><span data-ttu-id="a43ad-1702">使用指定的比較子，依遞增順序執行序列中項目的後續排序作業。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1702">Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1703">依據索引鍵排序其項目的 <see cref="T:System.Linq.IOrderedQueryable`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1703">An <see cref="T:System.Linq.IOrderedQueryable`1" /> whose elements are sorted according to a key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1704">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1704">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-1705">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1705">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-1706"><xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1706">The <xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1707">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1707">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1708">呼叫的結果<xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29>轉換為類型<xref:System.Linq.IOrderedQueryable%601>後傳回。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1708">The result of calling <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> is cast to type <xref:System.Linq.IOrderedQueryable%601> and returned.</span></span>  
  
 <span data-ttu-id="a43ad-1709">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1709">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1710">預期的行為是，它會執行次要排序之項目的`source`藉由叫用的索引鍵為基礎`keySelector`各項目上`source`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1710">The expected behavior is that it performs a secondary sort of the elements of `source` based on the key obtained by invoking `keySelector` on each element of `source`.</span></span> <span data-ttu-id="a43ad-1711">所有先前建立的排序次序會保留。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1711">All previously established sort orders are preserved.</span></span> <span data-ttu-id="a43ad-1712">`comparer`參數用來比較索引鍵的值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1712">The `comparer` parameter is used to compare key values.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1713"><paramref name="source" />、<paramref name="keySelector" /> 或 <paramref name="comparer" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1713"><paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="comparer" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ThenByDescending&lt;TSource,TKey&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a43ad-1714">依遞減順序，執行序列中項目的後續排序作業。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1714">Performs a subsequent ordering of the elements in a sequence in descending order.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ThenByDescending&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedQueryable&lt;TSource&gt; ThenByDescending&lt;TSource,TKey&gt; (this System.Linq.IOrderedQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedQueryable`1&lt;!!TSource&gt; ThenByDescending&lt;TSource, TKey&gt;(class System.Linq.IOrderedQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TKey&gt;&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ThenByDescending(Of TSource, TKey) (source As IOrderedQueryable(Of TSource), keySelector As Expression(Of Func(Of TSource, TKey))) As IOrderedQueryable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedQueryable&lt;TSource&gt; ^ ThenByDescending(System::Linq::IOrderedQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, TKey&gt; ^&gt; ^ keySelector);" />
      <MemberSignature Language="F#" Value="static member ThenByDescending : System.Linq.IOrderedQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, 'Key&gt;&gt; -&gt; System.Linq.IOrderedQueryable&lt;'Source&gt;" Usage="System.Linq.Queryable.ThenByDescending (source, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedQueryable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IOrderedQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TKey&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-1715"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1715">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="a43ad-1716"><paramref name="keySelector" /> 表示之函式所傳回索引鍵的型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1716">The type of the key returned by the function represented by <paramref name="keySelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-1717">包含要排序之項目的 <see cref="T:System.Linq.IOrderedQueryable`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1717">An <see cref="T:System.Linq.IOrderedQueryable`1" /> that contains elements to sort.</span></span></param>
        <param name="keySelector"><span data-ttu-id="a43ad-1718">用來從各個項目擷取索引鍵的函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1718">A function to extract a key from each element.</span></span></param>
        <summary><span data-ttu-id="a43ad-1719">依據索引鍵，按遞減順序執行序列中項目的後續排序作業。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1719">Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1720">依據索引鍵按遞減順序排序其項目的 <see cref="T:System.Linq.IOrderedQueryable`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1720">An <see cref="T:System.Linq.IOrderedQueryable`1" /> whose elements are sorted in descending order according to a key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1721">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1721">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-1722">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1722">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-1723"><xref:System.Linq.Queryable.ThenByDescending%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.ThenByDescending%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1723">The <xref:System.Linq.Queryable.ThenByDescending%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.ThenByDescending%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1724">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1724">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1725">呼叫的結果<xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29>轉換為類型<xref:System.Linq.IOrderedQueryable%601>後傳回。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1725">The result of calling <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> is cast to type <xref:System.Linq.IOrderedQueryable%601> and returned.</span></span>  
  
 <span data-ttu-id="a43ad-1726">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.ThenByDescending%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1726">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.ThenByDescending%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1727">預期的行為是，它會執行次要排序之項目的`source`依遞減順序，根據 藉由叫用的索引鍵`keySelector`各項目上`source`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1727">The expected behavior is that it performs a secondary sort of the elements of `source` in descending order, based on the key obtained by invoking `keySelector` on each element of `source`.</span></span> <span data-ttu-id="a43ad-1728">所有先前建立的排序次序會保留。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1728">All previously established sort orders are preserved.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1729"><paramref name="source" /> 或 <paramref name="keySelector" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1729"><paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ThenByDescending&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedQueryable&lt;TSource&gt; ThenByDescending&lt;TSource,TKey&gt; (this System.Linq.IOrderedQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedQueryable`1&lt;!!TSource&gt; ThenByDescending&lt;TSource, TKey&gt;(class System.Linq.IOrderedQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TKey&gt;&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ThenByDescending(Of TSource, TKey) (source As IOrderedQueryable(Of TSource), keySelector As Expression(Of Func(Of TSource, TKey)), comparer As IComparer(Of TKey)) As IOrderedQueryable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedQueryable&lt;TSource&gt; ^ ThenByDescending(System::Linq::IOrderedQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, TKey&gt; ^&gt; ^ keySelector, System::Collections::Generic::IComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member ThenByDescending : System.Linq.IOrderedQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, 'Key&gt;&gt; * System.Collections.Generic.IComparer&lt;'Key&gt; -&gt; System.Linq.IOrderedQueryable&lt;'Source&gt;" Usage="System.Linq.Queryable.ThenByDescending (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedQueryable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IOrderedQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TKey&gt;&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-1730"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1730">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="a43ad-1731"><paramref name="keySelector" /> 函式所傳回索引鍵的型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1731">The type of the key that is returned by the <paramref name="keySelector" /> function.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-1732">包含要排序之項目的 <see cref="T:System.Linq.IOrderedQueryable`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1732">An <see cref="T:System.Linq.IOrderedQueryable`1" /> that contains elements to sort.</span></span></param>
        <param name="keySelector"><span data-ttu-id="a43ad-1733">用來從各個項目擷取索引鍵的函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1733">A function to extract a key from each element.</span></span></param>
        <param name="comparer"><span data-ttu-id="a43ad-1734">用來比較金鑰的 <see cref="T:System.Collections.Generic.IComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1734">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</span></span></param>
        <summary><span data-ttu-id="a43ad-1735">使用指定的比較子，依遞減順序執行序列中項目的後續排序作業。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1735">Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1736">依據索引鍵按遞減順序排序其項目的集合。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1736">A collection whose elements are sorted in descending order according to a key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1737">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1737">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-1738">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1738">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-1739"><xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1739">The <xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1740">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1740">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1741">呼叫的結果<xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29>轉換為類型<xref:System.Linq.IOrderedQueryable%601>後傳回。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1741">The result of calling <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> is cast to type <xref:System.Linq.IOrderedQueryable%601> and returned.</span></span>  
  
 <span data-ttu-id="a43ad-1742">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1742">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1743">預期的行為是，它會執行次要排序之項目的`source`依遞減順序，根據 藉由叫用的索引鍵`keySelector`各項目上`source`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1743">The expected behavior is that it performs a secondary sort of the elements of `source` in descending order, based on the key obtained by invoking `keySelector` on each element of `source`.</span></span> <span data-ttu-id="a43ad-1744">所有先前建立的排序次序會保留。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1744">All previously established sort orders are preserved.</span></span> <span data-ttu-id="a43ad-1745">`comparer`參數用來比較索引鍵的值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1745">The `comparer` parameter is used to compare key values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-1746">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.ThenByDescending%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29>執行次要排序序列中使用自訂比較子，依遞減順序中的項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1746">The following code example demonstrates how to use <xref:System.Linq.Queryable.ThenByDescending%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> to perform a secondary ordering of the elements in a sequence in descending order by using a custom comparer.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#103](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#103)]
 [!code-vb[System.Linq.Queryable#103](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#103)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1747"><paramref name="source" />、<paramref name="keySelector" /> 或 <paramref name="comparer" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1747"><paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="comparer" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Union&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a43ad-1748">產生兩個序列的集合等位。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1748">Produces the set union of two sequences.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Union&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; Union&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source1, System.Collections.Generic.IEnumerable&lt;TSource&gt; source2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TSource&gt; Union&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source1, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Union(Of TSource) (source1 As IQueryable(Of TSource), source2 As IEnumerable(Of TSource)) As IQueryable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable&lt;TSource&gt; ^ Union(System::Linq::IQueryable&lt;TSource&gt; ^ source1, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source2);" />
      <MemberSignature Language="F#" Value="static member Union : System.Linq.IQueryable&lt;'Source&gt; * seq&lt;'Source&gt; -&gt; System.Linq.IQueryable&lt;'Source&gt;" Usage="System.Linq.Queryable.Union (source1, source2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source1" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="source2" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-1749">輸入序列之項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1749">The type of the elements of the input sequences.</span></span></typeparam>
        <param name="source1"><span data-ttu-id="a43ad-1750">序列，其獨特項目構成等位作業的第一個集合。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1750">A sequence whose distinct elements form the first set for the union operation.</span></span></param>
        <param name="source2"><span data-ttu-id="a43ad-1751">序列，其獨特項目構成等位作業的第二個集合。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1751">A sequence whose distinct elements form the second set for the union operation.</span></span></param>
        <summary><span data-ttu-id="a43ad-1752">使用預設相等比較值來比較值，以便產生兩個序列的集合等位。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1752">Produces the set union of two sequences by using the default equality comparer.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1753"><see cref="T:System.Linq.IQueryable`1" />，其中包含來自兩個輸入序列的項目，但不包括重複的項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1753">An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements from both input sequences, excluding duplicates.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1754"><xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1754">The <xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1755">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source1`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1755">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source1` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-1756">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29>之型別的實作而定`source1`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1756">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> depends on the implementation of the type of the `source1` parameter.</span></span> <span data-ttu-id="a43ad-1757">預期的行為是中的元素的集合等位`source1`和`source2`會傳回。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1757">The expected behavior is that the set union of the elements in `source1` and `source2` is returned.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-1758">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29>取得兩個序列的聯集。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1758">The following code example demonstrates how to use <xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> to obtain the set union of two sequences.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#109](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#109)]
 [!code-vb[System.Linq.Queryable#109](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#109)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1759"><paramref name="source1" /> 或 <paramref name="source2" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1759"><paramref name="source1" /> or <paramref name="source2" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Union&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; Union&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source1, System.Collections.Generic.IEnumerable&lt;TSource&gt; source2, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TSource&gt; Union&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source1, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source2, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Union(Of TSource) (source1 As IQueryable(Of TSource), source2 As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As IQueryable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable&lt;TSource&gt; ^ Union(System::Linq::IQueryable&lt;TSource&gt; ^ source1, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source2, System::Collections::Generic::IEqualityComparer&lt;TSource&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Union : System.Linq.IQueryable&lt;'Source&gt; * seq&lt;'Source&gt; * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; System.Linq.IQueryable&lt;'Source&gt;" Usage="System.Linq.Queryable.Union (source1, source2, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source1" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="source2" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-1760">輸入序列之項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1760">The type of the elements of the input sequences.</span></span></typeparam>
        <param name="source1"><span data-ttu-id="a43ad-1761">序列，其獨特項目構成等位作業的第一個集合。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1761">A sequence whose distinct elements form the first set for the union operation.</span></span></param>
        <param name="source2"><span data-ttu-id="a43ad-1762">序列，其獨特項目構成等位作業的第二個集合。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1762">A sequence whose distinct elements form the second set for the union operation.</span></span></param>
        <param name="comparer"><span data-ttu-id="a43ad-1763">用來比較值的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1763">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span></span></param>
        <summary><span data-ttu-id="a43ad-1764">使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 產生兩個序列的集合等位。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1764">Produces the set union of two sequences by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1765"><see cref="T:System.Linq.IQueryable`1" />，其中包含來自兩個輸入序列的項目，但不包括重複的項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1765">An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements from both input sequences, excluding duplicates.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1766"><xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1766">The <xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1767">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source1`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1767">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source1` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-1768">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29>之型別的實作而定`source1`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1768">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> depends on the implementation of the type of the `source1` parameter.</span></span> <span data-ttu-id="a43ad-1769">預期的行為是中的元素的集合等位`source1`和`source2`會傳回。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1769">The expected behavior is that the set union of the elements in `source1` and `source2` is returned.</span></span> <span data-ttu-id="a43ad-1770">`comparer`參數用來比較值。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1770">The `comparer` parameter is used to compare values.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1771"><paramref name="source1" /> 或 <paramref name="source2" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1771"><paramref name="source1" /> or <paramref name="source2" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Where&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a43ad-1772">根據述詞來篩選值序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1772">Filters a sequence of values based on a predicate.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Where&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; Where&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TSource&gt; Where&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Where(Of TSource) (source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean))) As IQueryable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable&lt;TSource&gt; ^ Where(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, bool&gt; ^&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member Where : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, bool&gt;&gt; -&gt; System.Linq.IQueryable&lt;'Source&gt;" Usage="System.Linq.Queryable.Where (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-1773"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1773">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-1774">要篩選的 <see cref="T:System.Linq.IQueryable`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1774">An <see cref="T:System.Linq.IQueryable`1" /> to filter.</span></span></param>
        <param name="predicate"><span data-ttu-id="a43ad-1775">用來測試每個項目是否符合條件的函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1775">A function to test each element for a condition.</span></span></param>
        <summary><span data-ttu-id="a43ad-1776">根據述詞來篩選值序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1776">Filters a sequence of values based on a predicate.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1777"><see cref="T:System.Linq.IQueryable`1" />，其中包含輸入序列中符合 <paramref name="predicate" /> 指定之條件的項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1777">An <see cref="T:System.Linq.IQueryable`1" /> that contains elements from the input sequence that satisfy the condition specified by <paramref name="predicate" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1778">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1778">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-1779">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1779">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-1780"><xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1780">The <xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1781">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1781">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-1782">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1782">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1783">預期的行為是傳回的項目`source`符合所指定的條件`predicate`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1783">The expected behavior is that it returns the elements from `source` that satisfy the condition specified by `predicate`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-1784">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29>來篩選序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1784">The following code example demonstrates how to use <xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> to filter a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#110](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#110)]
 [!code-vb[System.Linq.Queryable#110](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#110)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1785"><paramref name="source" /> 或 <paramref name="predicate" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1785"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Where&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; Where&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,int,bool&gt;&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TSource&gt; Where&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`3&lt;!!TSource, int32, bool&gt;&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Where(Of TSource) (source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Integer, Boolean))) As IQueryable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable&lt;TSource&gt; ^ Where(System::Linq::IQueryable&lt;TSource&gt; ^ source, System::Linq::Expressions::Expression&lt;Func&lt;TSource, int, bool&gt; ^&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member Where : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Source, int, bool&gt;&gt; -&gt; System.Linq.IQueryable&lt;'Source&gt;" Usage="System.Linq.Queryable.Where (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Int32,System.Boolean&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a43ad-1786"><paramref name="source" /> 項目的類型。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1786">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a43ad-1787">要篩選的 <see cref="T:System.Linq.IQueryable`1" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1787">An <see cref="T:System.Linq.IQueryable`1" /> to filter.</span></span></param>
        <param name="predicate"><span data-ttu-id="a43ad-1788">用來測試各項目是否符合條件的函式；此函式的第二個參數代表來源序列中項目的索引。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1788">A function to test each element for a condition; the second parameter of the function represents the index of the element in the source sequence.</span></span></param>
        <summary><span data-ttu-id="a43ad-1789">根據述詞來篩選值序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1789">Filters a sequence of values based on a predicate.</span></span> <span data-ttu-id="a43ad-1790">述詞函式的邏輯中使用各項目的索引。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1790">Each element's index is used in the logic of the predicate function.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1791"><see cref="T:System.Linq.IQueryable`1" />，其中包含輸入序列中符合 <paramref name="predicate" /> 指定之條件的項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1791">An <see cref="T:System.Linq.IQueryable`1" /> that contains elements from the input sequence that satisfy the condition specified by <paramref name="predicate" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1792">這個方法有至少一個參數的型別<xref:System.Linq.Expressions.Expression%601>的類型引數是其中一個<xref:System.Func%602>型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1792">This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types.</span></span> <span data-ttu-id="a43ad-1793">針對這些參數，您可以傳遞 lambda 運算式中，將會編譯為<xref:System.Linq.Expressions.Expression%601>。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1793">For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="a43ad-1794"><xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1794">The <xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1795">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1795">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-1796">因執行運算式樹狀架構表示呼叫的查詢行為<xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29>之型別的實作而定`source`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1796">The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter.</span></span> <span data-ttu-id="a43ad-1797">預期的行為是傳回的項目`source`符合所指定的條件`predicate`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1797">The expected behavior is that it returns the elements from `source` that satisfy the condition specified by `predicate`.</span></span> <span data-ttu-id="a43ad-1798">每個來源項目的索引提供做為第二個引數`predicate`。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1798">The index of each source element is provided as the second argument to `predicate`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-1799">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29>來篩選序列，根據述詞，其中包含每個項目的索引。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1799">The following code example demonstrates how to use <xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29> to filter a sequence based on a predicate that incorporates the index of each element.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#111](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#111)]
 [!code-vb[System.Linq.Queryable#111](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#111)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1800"><paramref name="source" /> 或 <paramref name="predicate" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1800"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Zip&lt;TFirst,TSecond,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TResult&gt; Zip&lt;TFirst,TSecond,TResult&gt; (this System.Linq.IQueryable&lt;TFirst&gt; source1, System.Collections.Generic.IEnumerable&lt;TSecond&gt; source2, System.Linq.Expressions.Expression&lt;Func&lt;TFirst,TSecond,TResult&gt;&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TResult&gt; Zip&lt;TFirst, TSecond, TResult&gt;(class System.Linq.IQueryable`1&lt;!!TFirst&gt; source1, class System.Collections.Generic.IEnumerable`1&lt;!!TSecond&gt; source2, class System.Linq.Expressions.Expression`1&lt;class System.Func`3&lt;!!TFirst, !!TSecond, !!TResult&gt;&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Zip(Of TFirst, TSecond, TResult) (source1 As IQueryable(Of TFirst), source2 As IEnumerable(Of TSecond), resultSelector As Expression(Of Func(Of TFirst, TSecond, TResult))) As IQueryable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TFirst, typename TSecond, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IQueryable&lt;TResult&gt; ^ Zip(System::Linq::IQueryable&lt;TFirst&gt; ^ source1, System::Collections::Generic::IEnumerable&lt;TSecond&gt; ^ source2, System::Linq::Expressions::Expression&lt;Func&lt;TFirst, TSecond, TResult&gt; ^&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member Zip : System.Linq.IQueryable&lt;'First&gt; * seq&lt;'Second&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'First, 'Second, 'Result&gt;&gt; -&gt; System.Linq.IQueryable&lt;'Result&gt;" Usage="System.Linq.Queryable.Zip (source1, source2, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Queryable</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TFirst" />
        <TypeParameter Name="TSecond" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source1" Type="System.Linq.IQueryable&lt;TFirst&gt;" RefType="this" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="source2" Type="System.Collections.Generic.IEnumerable&lt;TSecond&gt;" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="resultSelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TFirst,TSecond,TResult&gt;&gt;" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="TFirst"><span data-ttu-id="a43ad-1801">第一個輸入序列的項目型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1801">The type of the elements of the first input sequence.</span></span></typeparam>
        <typeparam name="TSecond"><span data-ttu-id="a43ad-1802">第二個輸入序列的項目型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1802">The type of the elements of the second input sequence.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="a43ad-1803">結果序列的項目型別。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1803">The type of the elements of the result sequence.</span></span></typeparam>
        <param name="source1"><span data-ttu-id="a43ad-1804">要合併的第一個序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1804">The first sequence to merge.</span></span></param>
        <param name="source2"><span data-ttu-id="a43ad-1805">要合併的第二個序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1805">The second sequence to merge.</span></span></param>
        <param name="resultSelector"><span data-ttu-id="a43ad-1806">指定如何從兩個序列合併項目的函式。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1806">A function that specifies how to merge the elements from the two sequences.</span></span></param>
        <summary><span data-ttu-id="a43ad-1807">使用指定的述詞函式來合併兩個序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1807">Merges two sequences by using the specified predicate function.</span></span></summary>
        <returns><span data-ttu-id="a43ad-1808"><see cref="T:System.Linq.IQueryable`1" />，其中包含兩個輸入序列的合併項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1808">An <see cref="T:System.Linq.IQueryable`1" /> that contains merged elements of two input sequences.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a43ad-1809"><xref:System.Linq.Queryable.Zip%2A>方法會產生<xref:System.Linq.Expressions.MethodCallExpression>，表示呼叫<xref:System.Linq.Queryable.Zip%2A>本身做為建構的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1809">The <xref:System.Linq.Queryable.Zip%2A> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Zip%2A> itself as a constructed generic method.</span></span> <span data-ttu-id="a43ad-1810">它接著會傳遞<xref:System.Linq.Expressions.MethodCallExpression>要<xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29>方法<xref:System.Linq.IQueryProvider>由<xref:System.Linq.IQueryable.Provider%2A>屬性`source1`參數。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1810">It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source1` parameter.</span></span>  
  
 <span data-ttu-id="a43ad-1811">方法會將合併的第一個序列的每個項目，與第二個序列中具有相同索引的項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1811">The method merges each element of the first sequence with an element that has the same index in the second sequence.</span></span> <span data-ttu-id="a43ad-1812">如果序列沒有相同數目的項目，方法，直到它到達結尾的其中一個，就會合併序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1812">If the sequences do not have the same number of elements, the method merges sequences until it reaches the end of one of them.</span></span> <span data-ttu-id="a43ad-1813">例如，如果一個序列具有三個項目，另一個有四個產生的序列必須只有三個項目。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1813">For example, if one sequence has three elements and the other one has four, the resulting sequence will have only three elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a43ad-1814">下列程式碼範例示範如何使用<xref:System.Linq.Queryable.Zip%2A>方法來合併兩個序列。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1814">The following code example demonstrates how to use the <xref:System.Linq.Queryable.Zip%2A> method to merge two sequences.</span></span>  
  
 [!code-csharp[System.Linq.Queryable#200](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#200)]
 [!code-vb[System.Linq.Queryable#200](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#200)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a43ad-1815"><paramref name="source1" /> 或 <paramref name="source2" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a43ad-1815"><paramref name="source1" /> or <paramref name="source2" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>