<Type Name="LifetimeContext" FullName="System.Composition.Hosting.Core.LifetimeContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="dd6cafc830b07f9b84eefa3cd9dca1fa777e3b41" /><Meta Name="ms.sourcegitcommit" Value="0d6aa6694f157a08fe52cd25b4d9d3dcf913e812" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="10/12/2018" /><Meta Name="ms.locfileid" Value="49141985" /></Metadata><TypeSignature Language="C#" Value="public sealed class LifetimeContext : System.Composition.CompositionContext, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LifetimeContext extends System.Composition.CompositionContext implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Composition.Hosting.Core.LifetimeContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LifetimeContext&#xA;Inherits CompositionContext&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class LifetimeContext sealed : System::Composition::CompositionContext, IDisposable" />
  <TypeSignature Language="F#" Value="type LifetimeContext = class&#xA;    inherit CompositionContext&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Composition.Hosting</AssemblyName>
    <AssemblyVersion>1.0.31.0</AssemblyVersion>
    <AssemblyVersion>1.0.32.0</AssemblyVersion>
    <AssemblyVersion>1.0.33.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Composition.CompositionContext</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="9dc38-101">代表在存留期樹狀中的節點。</span><span class="sxs-lookup"><span data-stu-id="9dc38-101">Represents a node in the lifetime tree.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
<span data-ttu-id="9dc38-102"><xref:System.Composition.Hosting.Core.LifetimeContext>物件是共用的共用組件的單位。</span><span class="sxs-lookup"><span data-stu-id="9dc38-102">The <xref:System.Composition.Hosting.Core.LifetimeContext> object is the unit of sharing for shared parts.</span></span> <span data-ttu-id="9dc38-103">它會控制繫結的組件的處置，而且可用來擷取執行個體，做為現有的撰寫作業的一部分，或作為新的撰寫作業的基礎。</span><span class="sxs-lookup"><span data-stu-id="9dc38-103">It controls the disposal of bound parts and can be used to retrieve instances, either as part of an existing composition operation or as the basis of a new composition operation.</span></span> <span data-ttu-id="9dc38-104">個別的存留期內容都可以包含會受限於特定的共用界限的組件標記。</span><span class="sxs-lookup"><span data-stu-id="9dc38-104">An individual lifetime context can be marked to contain parts that are constrained by particular sharing boundaries.</span></span>

<span data-ttu-id="9dc38-105">此物件包含兩個獨立的受保護的共用狀態的： 共用組件執行個體，並繫結組件執行個體。</span><span class="sxs-lookup"><span data-stu-id="9dc38-105">This object contains two pieces of independently protected shared state: shared part instances and bound part instances.</span></span> <span data-ttu-id="9dc38-106">共用組件執行個體是無鎖定 」、 「 可讀取，並不會導致問題如果在處置時加入。</span><span class="sxs-lookup"><span data-stu-id="9dc38-106">A shared part instance is lock-free, readable, and does not result in issues if it is added to during disposal.</span></span> <span data-ttu-id="9dc38-107">它受到鎖定本身。</span><span class="sxs-lookup"><span data-stu-id="9dc38-107">It is protected by being locked itself.</span></span> <span data-ttu-id="9dc38-108">啟用邏輯必然這個鎖定的情況下呼叫。</span><span class="sxs-lookup"><span data-stu-id="9dc38-108">Activation logic is unavoidably called under this lock.</span></span> <span data-ttu-id="9dc38-109">繫結的組件執行個體一律會受到鎖定<see langword="this" />，並應該永遠不會寫入至可供使用之後。</span><span class="sxs-lookup"><span data-stu-id="9dc38-109">A bound part instance is always protected by locking <see langword="this" />, and should never be written to after disposal.</span></span> <span data-ttu-id="9dc38-110">繫結的組件執行個體設定為<see langword="null" />中在鎖定下<xref:System.Composition.Hosting.Core.LifetimeContext.Dispose>方法。</span><span class="sxs-lookup"><span data-stu-id="9dc38-110">A bound part instance is set to <see langword="null" /> under a lock in the <xref:System.Composition.Hosting.Core.LifetimeContext.Dispose> method.</span></span> <span data-ttu-id="9dc38-111">如果允許寫入的繫結的組件執行個體之後，它會導致不釋放可處置的組件。</span><span class="sxs-lookup"><span data-stu-id="9dc38-111">If writing were allowed after disposal for a bound part instance, it would result in disposable parts not being released.</span></span> <span data-ttu-id="9dc38-112">繫結的組件上的 dispose 方法呼叫外部鎖定。</span><span class="sxs-lookup"><span data-stu-id="9dc38-112">The dispose method on a bound part is called outside of the lock.</span></span> 
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBoundInstance">
      <MemberSignature Language="C#" Value="public void AddBoundInstance (IDisposable instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddBoundInstance(class System.IDisposable instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Hosting.Core.LifetimeContext.AddBoundInstance(System.IDisposable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddBoundInstance (instance As IDisposable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBoundInstance(IDisposable ^ instance);" />
      <MemberSignature Language="F#" Value="member this.AddBoundInstance : IDisposable -&gt; unit" Usage="lifetimeContext.AddBoundInstance instance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Hosting</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.IDisposable" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="9dc38-113">組件。</span><span class="sxs-lookup"><span data-stu-id="9dc38-113">The part.</span></span></param>
        <summary><span data-ttu-id="9dc38-114">將可處置部分的存留期繫結至這個存留期內容。</span><span class="sxs-lookup"><span data-stu-id="9dc38-114">Binds the lifetime of a disposable part to this lifetime context.</span></span></summary>
        <remarks></remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9dc38-115">在已處置的物件上執行作業。</span><span class="sxs-lookup"><span data-stu-id="9dc38-115">The operation was performed on a disposed object.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AllocateSharingId">
      <MemberSignature Language="C#" Value="public static int AllocateSharingId ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 AllocateSharingId() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Hosting.Core.LifetimeContext.AllocateSharingId" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AllocateSharingId () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AllocateSharingId();" />
      <MemberSignature Language="F#" Value="static member AllocateSharingId : unit -&gt; int" Usage="System.Composition.Hosting.Core.LifetimeContext.AllocateSharingId " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Hosting</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9dc38-116">產生可以用來尋找共用組件執行個體的識別碼。</span><span class="sxs-lookup"><span data-stu-id="9dc38-116">Generates an identifier that can be used to locate shared part instances.</span></span></summary>
        <returns><span data-ttu-id="9dc38-117">新的唯一識別碼。</span><span class="sxs-lookup"><span data-stu-id="9dc38-117">A new unique identifier.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Hosting.Core.LifetimeContext.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="lifetimeContext.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Hosting</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9dc38-118">釋放存留期內容以及任何繫結至其中的組件執行個體。</span><span class="sxs-lookup"><span data-stu-id="9dc38-118">Releases the lifetime context and any part instances bound to it.</span></span></summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="FindContextWithin">
      <MemberSignature Language="C#" Value="public System.Composition.Hosting.Core.LifetimeContext FindContextWithin (string sharingBoundary);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Hosting.Core.LifetimeContext FindContextWithin(string sharingBoundary) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Hosting.Core.LifetimeContext.FindContextWithin(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindContextWithin (sharingBoundary As String) As LifetimeContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Hosting::Core::LifetimeContext ^ FindContextWithin(System::String ^ sharingBoundary);" />
      <MemberSignature Language="F#" Value="member this.FindContextWithin : string -&gt; System.Composition.Hosting.Core.LifetimeContext" Usage="lifetimeContext.FindContextWithin sharingBoundary" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Hosting</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Hosting.Core.LifetimeContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sharingBoundary" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sharingBoundary"><span data-ttu-id="9dc38-119">要在其中尋找存留期內容的共用界限。</span><span class="sxs-lookup"><span data-stu-id="9dc38-119">The sharing boundary to find a lifetime context within.</span></span></param>
        <summary><span data-ttu-id="9dc38-120">在指定的所有共用界限中尋找最大的存留期內容。</span><span class="sxs-lookup"><span data-stu-id="9dc38-120">Finds the broadest lifetime context within all of the specified sharing boundaries.</span></span></summary>
        <returns><span data-ttu-id="9dc38-121">在指定的所有共用界限中最大的存留期內容。</span><span class="sxs-lookup"><span data-stu-id="9dc38-121">The broadest lifetime context within all of the specified sharing boundaries.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dc38-122">目前，根不能是界限。</span><span class="sxs-lookup"><span data-stu-id="9dc38-122">Currently, the root cannot be a boundary.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrCreate">
      <MemberSignature Language="C#" Value="public object GetOrCreate (int sharingId, System.Composition.Hosting.Core.CompositionOperation operation, System.Composition.Hosting.Core.CompositeActivator creator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetOrCreate(int32 sharingId, class System.Composition.Hosting.Core.CompositionOperation operation, class System.Composition.Hosting.Core.CompositeActivator creator) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Hosting.Core.LifetimeContext.GetOrCreate(System.Int32,System.Composition.Hosting.Core.CompositionOperation,System.Composition.Hosting.Core.CompositeActivator)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOrCreate (sharingId As Integer, operation As CompositionOperation, creator As CompositeActivator) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetOrCreate(int sharingId, System::Composition::Hosting::Core::CompositionOperation ^ operation, System::Composition::Hosting::Core::CompositeActivator ^ creator);" />
      <MemberSignature Language="F#" Value="member this.GetOrCreate : int * System.Composition.Hosting.Core.CompositionOperation * System.Composition.Hosting.Core.CompositeActivator -&gt; obj" Usage="lifetimeContext.GetOrCreate (sharingId, operation, creator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Hosting</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sharingId" Type="System.Int32" />
        <Parameter Name="operation" Type="System.Composition.Hosting.Core.CompositionOperation" />
        <Parameter Name="creator" Type="System.Composition.Hosting.Core.CompositeActivator" />
      </Parameters>
      <Docs>
        <param name="sharingId"><span data-ttu-id="9dc38-123">共用組件的識別碼。</span><span class="sxs-lookup"><span data-stu-id="9dc38-123">The ID of the shared part.</span></span></param>
        <param name="operation"><span data-ttu-id="9dc38-124">必要時要建立組件的作業。</span><span class="sxs-lookup"><span data-stu-id="9dc38-124">An operation in which to create a part, if necessary.</span></span></param>
        <param name="creator"><span data-ttu-id="9dc38-125">可在必要時啟動新組件執行個體的啟動項。</span><span class="sxs-lookup"><span data-stu-id="9dc38-125">An activator that can activate a new part instance, if necessary.</span></span></param>
        <summary><span data-ttu-id="9dc38-126">擷取具有指定識別碼的共用組件執行個體；或在找不到組件執行個體時，於指定的作業中使用指定建立者來建立及共用組件執行個體。</span><span class="sxs-lookup"><span data-stu-id="9dc38-126">Retrieves a shared part instance with the specified ID, or if the part instance can not be found, creates and shares a part instance using the specified creator within the specified operation.</span></span></summary>
        <returns><span data-ttu-id="9dc38-127">新的或擷取的組件。</span><span class="sxs-lookup"><span data-stu-id="9dc38-127">The new or retrieved part.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dc38-128">這個方法是無鎖定如果組件執行個體已經存在。</span><span class="sxs-lookup"><span data-stu-id="9dc38-128">This method is lock-free if the part instance already exists.</span></span> <span data-ttu-id="9dc38-129">如果必須建立組件執行個體，將會鎖定，會序列化其他使用此方法 （並行讀取將繼續是安全且無鎖定） 的寫入。</span><span class="sxs-lookup"><span data-stu-id="9dc38-129">If the part instance must be created, a lock will be taken that will serialize other writes that use this method (concurrent reads will continue to be safe and lock-free).</span></span> <span data-ttu-id="9dc38-130">很重要的組合，並因此取得鎖定，是完全是分葉-至-根存留期樹狀目錄中。</span><span class="sxs-lookup"><span data-stu-id="9dc38-130">It is important that the composition, and thus lock acquisition, is strictly leaf-to-root in the lifetime tree.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Hosting.Core.LifetimeContext.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="lifetimeContext.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Hosting</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9dc38-131">傳回此 <see cref="T:System.Composition.Hosting.Core.LifetimeContext" /> 物件的字串表示。</span><span class="sxs-lookup"><span data-stu-id="9dc38-131">Returns the string representation of this <see cref="T:System.Composition.Hosting.Core.LifetimeContext" /> object.</span></span></summary>
        <returns><span data-ttu-id="9dc38-132">此 <see cref="T:System.Composition.Hosting.Core.LifetimeContext" /> 物件的字串表示。</span><span class="sxs-lookup"><span data-stu-id="9dc38-132">The string representation of this <see cref="T:System.Composition.Hosting.Core.LifetimeContext" /> object.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetExport">
      <MemberSignature Language="C#" Value="public override bool TryGetExport (System.Composition.Hosting.Core.CompositionContract contract, out object export);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool TryGetExport(class System.Composition.Hosting.Core.CompositionContract contract, [out] object&amp; export) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Hosting.Core.LifetimeContext.TryGetExport(System.Composition.Hosting.Core.CompositionContract,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function TryGetExport (contract As CompositionContract, ByRef export As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool TryGetExport(System::Composition::Hosting::Core::CompositionContract ^ contract, [Runtime::InteropServices::Out] System::Object ^ % export);" />
      <MemberSignature Language="F#" Value="override this.TryGetExport : System.Composition.Hosting.Core.CompositionContract *  -&gt; bool" Usage="lifetimeContext.TryGetExport (contract, export)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Hosting</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contract" Type="System.Composition.Hosting.Core.CompositionContract" />
        <Parameter Name="export" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="contract"><span data-ttu-id="9dc38-133">合約。</span><span class="sxs-lookup"><span data-stu-id="9dc38-133">The contract.</span></span></param>
        <param name="export"><span data-ttu-id="9dc38-134">當此方法傳回後，會包含合約執行個體 (如果可用的話)；否則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9dc38-134">After this method returns, contains the contract instance if available; otherwise, <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="9dc38-135">從組合內容擷取合約執行個體。</span><span class="sxs-lookup"><span data-stu-id="9dc38-135">Retrieves a contract instance from the composition context.</span></span></summary>
        <returns><span data-ttu-id="9dc38-136">如果已擷取執行個體則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9dc38-136"><see langword="true" /> if the instance was retrieved; otherwise, <see langword="false" />.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
  </Members>
</Type>