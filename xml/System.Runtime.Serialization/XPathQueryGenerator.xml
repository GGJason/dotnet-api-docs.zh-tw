<Type Name="XPathQueryGenerator" FullName="System.Runtime.Serialization.XPathQueryGenerator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="236cd7722f6033ba5972a58a2ca1ef541e1696eb" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36628844" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class XPathQueryGenerator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit XPathQueryGenerator extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Serialization.XPathQueryGenerator" />
  <TypeSignature Language="VB.NET" Value="Public Class XPathQueryGenerator" />
  <TypeSignature Language="C++ CLI" Value="public ref class XPathQueryGenerator abstract sealed" />
  <TypeSignature Language="F#" Value="type XPathQueryGenerator = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
    <AssemblyVersion>4.1.3.0</AssemblyVersion>
    <AssemblyVersion>4.1.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>When given a class representing a data contract, and metadata representing a member of the contract, produces an XPath query for the member.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需資料合約的詳細資訊，請參閱[使用資料合約](~/docs/framework/wcf/feature-details/using-data-contracts.md)。  
  
 使用類別有四個步驟：  
  
1.  視需要，將 <xref:System.Runtime.Serialization.DataContractAttribute> 和 <xref:System.Runtime.Serialization.DataMemberAttribute> 套用至型別及其欄位或屬性，以建立資料合約型別。  
  
2.  使用 <xref:System.Type.GetMember%2A> 類別的 <xref:System.Type> 方法產生 MemberInfo 陣列。  
  
3.  將型別及陣列貼至方法。  
  
4.  如有需要，請使用 <xref:System.Xml.XmlNamespaceManager> 參數所傳回的 `namespaces` 檢查 XPath 查詢中的命名空間前置詞參考的 XML 命名空間。  
  
> [!NOTE]
>  XPath 中預設會使用命名空間前置詞 "xg" (表示「XPath 產生器」)。 這項設定無法變更。 請改為參考 NameTable 集合，查看與該前置詞關聯的命名空間。  
  
   
  
## Examples  
 下列範例會從兩個類別建立 XPath 查詢，這兩個類別均已套用 <xref:System.Runtime.Serialization.DataContractAttribute> 和 <xref:System.Runtime.Serialization.DataMemberAttribute> 屬性。  
  
 [!code-csharp[XPathQueryGenerator#0](~/samples/snippets/csharp/VS_Snippets_CFX/xpathquerygenerator/cs/source.cs#0)]
 [!code-vb[XPathQueryGenerator#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/xpathquerygenerator/vb/source.vb#0)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="CreateFromDataContractSerializer">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Creates an XPath from a data contract.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateFromDataContractSerializer">
      <MemberSignature Language="C#" Value="public static string CreateFromDataContractSerializer (Type type, System.Reflection.MemberInfo[] pathToMember, out System.Xml.XmlNamespaceManager namespaces);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string CreateFromDataContractSerializer(class System.Type type, class System.Reflection.MemberInfo[] pathToMember, [out] class System.Xml.XmlNamespaceManager&amp; namespaces) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XPathQueryGenerator.CreateFromDataContractSerializer(System.Type,System.Reflection.MemberInfo[],System.Xml.XmlNamespaceManager@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CreateFromDataContractSerializer(Type ^ type, cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ pathToMember, [Runtime::InteropServices::Out] System::Xml::XmlNamespaceManager ^ % namespaces);" />
      <MemberSignature Language="F#" Value="static member CreateFromDataContractSerializer : Type * System.Reflection.MemberInfo[] *  -&gt; string" Usage="System.Runtime.Serialization.XPathQueryGenerator.CreateFromDataContractSerializer (type, pathToMember, namespaces)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="pathToMember" Type="System.Reflection.MemberInfo[]" />
        <Parameter Name="namespaces" Type="System.Xml.XmlNamespaceManager&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="type">The type that represents a data contract.</param>
        <param name="pathToMember">The metadata, generated using the <see cref="Overload:System.Type.GetMember" /> method of the <see cref="T:System.Type" /> class, that points to the specific data member used to generate the query.</param>
        <param name="namespaces">The XML namespaces and their prefixes found in the data contract.</param>
        <summary>Creates an XPath from a data contract using the specified data contract type, array of metadata elements, and namespaces..</summary>
        <returns>
          <see cref="T:System.String" />  The XPath generated from the type and member data.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需資料合約的詳細資訊，請參閱[使用資料合約](~/docs/framework/wcf/feature-details/using-data-contracts.md)。  
  
   
  
## Examples  
 下列範例會從兩個類別建立 XPath 查詢，這兩個類別均已套用 <xref:System.Runtime.Serialization.DataContractAttribute> 和 <xref:System.Runtime.Serialization.DataMemberAttribute> 屬性。  
  
 [!code-csharp[XPathQueryGenerator#0](~/samples/snippets/csharp/VS_Snippets_CFX/xpathquerygenerator/cs/source.cs#0)]
 [!code-vb[XPathQueryGenerator#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/xpathquerygenerator/vb/source.vb#0)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFromDataContractSerializer">
      <MemberSignature Language="C#" Value="public static string CreateFromDataContractSerializer (Type type, System.Reflection.MemberInfo[] pathToMember, System.Text.StringBuilder rootElementXpath, out System.Xml.XmlNamespaceManager namespaces);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string CreateFromDataContractSerializer(class System.Type type, class System.Reflection.MemberInfo[] pathToMember, class System.Text.StringBuilder rootElementXpath, [out] class System.Xml.XmlNamespaceManager&amp; namespaces) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XPathQueryGenerator.CreateFromDataContractSerializer(System.Type,System.Reflection.MemberInfo[],System.Text.StringBuilder,System.Xml.XmlNamespaceManager@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CreateFromDataContractSerializer(Type ^ type, cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ pathToMember, System::Text::StringBuilder ^ rootElementXpath, [Runtime::InteropServices::Out] System::Xml::XmlNamespaceManager ^ % namespaces);" />
      <MemberSignature Language="F#" Value="static member CreateFromDataContractSerializer : Type * System.Reflection.MemberInfo[] * System.Text.StringBuilder *  -&gt; string" Usage="System.Runtime.Serialization.XPathQueryGenerator.CreateFromDataContractSerializer (type, pathToMember, rootElementXpath, namespaces)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="pathToMember" Type="System.Reflection.MemberInfo[]" />
        <Parameter Name="rootElementXpath" Type="System.Text.StringBuilder" />
        <Parameter Name="namespaces" Type="System.Xml.XmlNamespaceManager&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="type">The type that represents a data contract.</param>
        <param name="pathToMember">The metadata, generated using the <see cref="Overload:System.Type.GetMember" /> method of the <see cref="T:System.Type" /> class, that points to the specific data member used to generate the query.</param>
        <param name="rootElementXpath">The top level element in the xpath.</param>
        <param name="namespaces">The XML namespaces and their prefixes found in the data contract.</param>
        <summary>Creates an XPath from a data contract using the specified contract data type, array of metadata elements, the top level element, and namespaces.</summary>
        <returns>
          <see cref="T:System.String" />  The XPath generated from the type and member data.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>