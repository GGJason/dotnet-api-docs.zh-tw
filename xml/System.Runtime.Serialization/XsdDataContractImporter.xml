<Type Name="XsdDataContractImporter" FullName="System.Runtime.Serialization.XsdDataContractImporter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4a6d85b4421ee1113dbd455cca51bcea67d9c97e" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36628649" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XsdDataContractImporter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XsdDataContractImporter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Serialization.XsdDataContractImporter" />
  <TypeSignature Language="VB.NET" Value="Public Class XsdDataContractImporter" />
  <TypeSignature Language="C++ CLI" Value="public ref class XsdDataContractImporter" />
  <TypeSignature Language="F#" Value="type XsdDataContractImporter = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="0e68d-101">允許將 XML 結構描述檔案 (.xsd) 集合轉換為 Common Language Runtime (CLR) 型別。</span>
      <span class="sxs-lookup">
        <span data-stu-id="0e68d-101">Allows the transformation of a set of XML schema files (.xsd) into common language runtime (CLR) types.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e68d-102">如果您要建立必須與現有 Web 服務相互操作的 Web 服務，或從 XML 結構描述建立資料合約型別，便可使用  <xref:System.Runtime.Serialization.XsdDataContractImporter> 。</span><span class="sxs-lookup"><span data-stu-id="0e68d-102">Use the <xref:System.Runtime.Serialization.XsdDataContractImporter> if you are creating a Web service that must interoperate with an existing Web service, or to create data contract types from XML schemas.</span></span> <span data-ttu-id="0e68d-103"><xref:System.Runtime.Serialization.XsdDataContractImporter> 將轉換 XML 結構描述集合並建立 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 型別，這些類別會表示採用所選定程式設計語言的資料合約。</span><span class="sxs-lookup"><span data-stu-id="0e68d-103"><xref:System.Runtime.Serialization.XsdDataContractImporter> will transform a set of XML schemas and create the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] types that represent the data contract in a selected programming language.</span></span> <span data-ttu-id="0e68d-104">為了建立程式碼，此時會使用 <xref:System.CodeDom> 命名空間 (Namespace) 中的類別。</span><span class="sxs-lookup"><span data-stu-id="0e68d-104">To create the code, use the classes in the <xref:System.CodeDom> namespace.</span></span>  
  
 <span data-ttu-id="0e68d-105">相對地，當您已建立合併 CLR 型別表示之資料的 Web 服務，以及當您需要匯出其他 Web 服務要取用之每個資料型別的 XML 結構描述時，則要使用 <xref:System.Runtime.Serialization.XsdDataContractExporter> 類別。</span><span class="sxs-lookup"><span data-stu-id="0e68d-105">Conversely, use the <xref:System.Runtime.Serialization.XsdDataContractExporter> class when you have created a Web service that incorporates data represented by CLR types and when you need to export XML schemas for each data type to be consumed by other Web services.</span></span> <span data-ttu-id="0e68d-106">也就是 <xref:System.Runtime.Serialization.XsdDataContractExporter> 會將 CLR 型別集合轉換為 XML 結構描述集合。</span><span class="sxs-lookup"><span data-stu-id="0e68d-106">That is, <xref:System.Runtime.Serialization.XsdDataContractExporter> transforms a set of CLR types into a set of XML schemas.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0e68d-107">若要從 XML 結構描述產生 CLR 型別，在設計階段，請使用[ServiceModel Metadata Utility Tool (Svcutil.exe)](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)。</span><span class="sxs-lookup"><span data-stu-id="0e68d-107">To generate CLR types from XML schemas at design time, use the [ServiceModel Metadata Utility Tool (Svcutil.exe)](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md).</span></span> <span data-ttu-id="0e68d-108">若要從 XSD 檔案產生程式碼，使用`/dataContractOnly`工具的參數。</span><span class="sxs-lookup"><span data-stu-id="0e68d-108">To generated code from XSD files, use the `/dataContractOnly` switch of the tool.</span></span> <span data-ttu-id="0e68d-109">如果需要更進一步控制處理序，或需要以程式設計的方式進行，您也可以使用 <xref:System.Runtime.Serialization.XsdDataContractImporter>。</span><span class="sxs-lookup"><span data-stu-id="0e68d-109">You can also use the <xref:System.Runtime.Serialization.XsdDataContractImporter> if you need more control over the process or need to do it programmatically.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0e68d-110">下列範例會建立 <xref:System.Xml.Schema.XmlSchemaSet>，然後呼叫 <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> 方法來建立 <xref:System.CodeDom.CodeCompileUnit>。</span><span class="sxs-lookup"><span data-stu-id="0e68d-110">The following example creates an <xref:System.Xml.Schema.XmlSchemaSet> and calls the <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> method to create a <xref:System.CodeDom.CodeCompileUnit>.</span></span> <span data-ttu-id="0e68d-111">接著，<xref:System.CodeDom.CodeCompileUnit> 便可用來同時建立 Visual C# 和 Visual Basic 程式碼檔案。</span><span class="sxs-lookup"><span data-stu-id="0e68d-111">The <xref:System.CodeDom.CodeCompileUnit> is then used to create both Visual C# and Visual Basic code files.</span></span>  
  
 [!code-csharp[XsdDataContractImporter#0](~/samples/snippets/csharp/VS_Snippets_CFX/xsddatacontractimporter/cs/xsddatacontractimporterexample.cs#0)]
 [!code-vb[XsdDataContractImporter#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/xsddatacontractimporter/vb/xsddatacontractimporterexample.vb#0)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.Serialization.XsdDataContractExporter" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0e68d-112">初始化 <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-112">Initializes a new instance of the <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XsdDataContractImporter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XsdDataContractImporter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="0e68d-113">初始化 <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-113">Initializes a new instance of the <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XsdDataContractImporter (System.CodeDom.CodeCompileUnit codeCompileUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.CodeDom.CodeCompileUnit codeCompileUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.#ctor(System.CodeDom.CodeCompileUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XsdDataContractImporter(System::CodeDom::CodeCompileUnit ^ codeCompileUnit);" />
      <MemberSignature Language="F#" Value="new System.Runtime.Serialization.XsdDataContractImporter : System.CodeDom.CodeCompileUnit -&gt; System.Runtime.Serialization.XsdDataContractImporter" Usage="new System.Runtime.Serialization.XsdDataContractImporter codeCompileUnit" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="codeCompileUnit" Type="System.CodeDom.CodeCompileUnit" />
      </Parameters>
      <Docs>
        <param name="codeCompileUnit">
          <span data-ttu-id="0e68d-114">將用來儲存程式碼的 <see cref="T:System.CodeDom.CodeCompileUnit" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-114">The <see cref="T:System.CodeDom.CodeCompileUnit" /> that will be used to store the code.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0e68d-115">使用將用來產生 CLR 程式碼的 <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" />，初始化 <see cref="T:System.CodeDom.CodeCompileUnit" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-115">Initializes a new instance of the <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /> class with the <see cref="T:System.CodeDom.CodeCompileUnit" /> that will be used to generate CLR code.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e68d-116">使用這個建構函式，將更多程式碼新增至已經產生的 <xref:System.CodeDom.CodeCompileUnit>。</span><span class="sxs-lookup"><span data-stu-id="0e68d-116">Use this constructor to add more code into a <xref:System.CodeDom.CodeCompileUnit> that has already been generated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0e68d-117">下列範例會建立 <xref:System.Xml.Schema.XmlSchemaSet>，然後呼叫 <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> 方法來建立 <xref:System.CodeDom.CodeCompileUnit>。</span><span class="sxs-lookup"><span data-stu-id="0e68d-117">The following example creates an <xref:System.Xml.Schema.XmlSchemaSet> and calls the <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> method to create a <xref:System.CodeDom.CodeCompileUnit>.</span></span> <span data-ttu-id="0e68d-118">接著，<xref:System.CodeDom.CodeCompileUnit> 便可用來同時建立 Visual C# 和 Visual Basic 程式碼檔案。</span><span class="sxs-lookup"><span data-stu-id="0e68d-118">The <xref:System.CodeDom.CodeCompileUnit> is then used to create both Visual C# and Visual Basic code files.</span></span>  
  
 [!code-csharp[XsdDataContractImporter#1](~/samples/snippets/csharp/VS_Snippets_CFX/xsddatacontractimporter/cs/xsddatacontractimporterexample.cs#1)]
 [!code-vb[XsdDataContractImporter#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/xsddatacontractimporter/vb/xsddatacontractimporterexample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CanImport">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0e68d-119">取得值，這個值會指出結構描述是否能夠轉換為 <see cref="T:System.CodeDom.CodeCompileUnit" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-119">Gets a value that indicates whether the schemas can be transformed into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e68d-120">如需可以匯入的類型的詳細資訊，請參閱[資料合約序列化程式所支援的型別](~/docs/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer.md)。</span><span class="sxs-lookup"><span data-stu-id="0e68d-120">For more information about types that can be imported, see [Types Supported by the Data Contract Serializer](~/docs/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CanImport">
      <MemberSignature Language="C#" Value="public bool CanImport (System.Xml.Schema.XmlSchemaSet schemas);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanImport(class System.Xml.Schema.XmlSchemaSet schemas) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanImport (schemas As XmlSchemaSet) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanImport(System::Xml::Schema::XmlSchemaSet ^ schemas);" />
      <MemberSignature Language="F#" Value="member this.CanImport : System.Xml.Schema.XmlSchemaSet -&gt; bool" Usage="xsdDataContractImporter.CanImport schemas" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
      </Parameters>
      <Docs>
        <param name="schemas">
          <span data-ttu-id="0e68d-121">
            <see cref="T:System.Xml.Schema.XmlSchemaSet" />，其中包含要轉換的結構描述。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-121">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schemas to transform.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0e68d-122">取得值，這個值會指出包含在 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中的結構描述是否能轉換成 <see cref="T:System.CodeDom.CodeCompileUnit" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-122">Gets a value that indicates whether the schemas contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> can be transformed into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0e68d-123">如果結構描述可以轉換成資料合約類型，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-123">
              <see langword="true" /> if the schemas can be transformed to data contract types; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0e68d-124">下列範例會呼叫 <xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A> 方法來判定是否能夠產生 <xref:System.CodeDom.CodeCompileUnit>。</span><span class="sxs-lookup"><span data-stu-id="0e68d-124">The following example calls the <xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A> method to determine whether the <xref:System.CodeDom.CodeCompileUnit> can be generated.</span></span>  
  
 [!code-csharp[XsdDataContractImporter#2](~/samples/snippets/csharp/VS_Snippets_CFX/xsddatacontractimporter/cs/xsddatacontractimporterexample.cs#2)]
 [!code-vb[XsdDataContractImporter#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/xsddatacontractimporter/vb/xsddatacontractimporterexample.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0e68d-125">
            <paramref name="schemas" /> 參數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-125">The <paramref name="schemas" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">
          <span data-ttu-id="0e68d-126">在匯入作業中的資料合約無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-126">A data contract involved in the import is invalid.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CanImport">
      <MemberSignature Language="C#" Value="public bool CanImport (System.Xml.Schema.XmlSchemaSet schemas, System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt; typeNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanImport(class System.Xml.Schema.XmlSchemaSet schemas, class System.Collections.Generic.ICollection`1&lt;class System.Xml.XmlQualifiedName&gt; typeNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName})" />
      <MemberSignature Language="VB.NET" Value="Public Function CanImport (schemas As XmlSchemaSet, typeNames As ICollection(Of XmlQualifiedName)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanImport(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Collections::Generic::ICollection&lt;System::Xml::XmlQualifiedName ^&gt; ^ typeNames);" />
      <MemberSignature Language="F#" Value="member this.CanImport : System.Xml.Schema.XmlSchemaSet * System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt; -&gt; bool" Usage="xsdDataContractImporter.CanImport (schemas, typeNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="typeNames" Type="System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt;" />
      </Parameters>
      <Docs>
        <param name="schemas">
          <span data-ttu-id="0e68d-127">
            <see cref="T:System.Xml.Schema.XmlSchemaSet" />，其中包含要轉換的結構描述。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-127">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schemas to transform.</span>
          </span>
        </param>
        <param name="typeNames">
          <span data-ttu-id="0e68d-128">
            <see cref="T:System.Collections.Generic.ICollection`1" /> 的 <see cref="T:System.Xml.XmlQualifiedName" />，表示要匯入的結構描述類型集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-128">An <see cref="T:System.Collections.Generic.ICollection`1" /> of <see cref="T:System.Xml.XmlQualifiedName" /> that represents the set of schema types to import.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0e68d-129">取得值，這個值會指示包含在 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的已指定型別集合是否能夠轉換為在 <see cref="T:System.CodeDom.CodeCompileUnit" /> 中產生的 CLR 型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-129">Gets a value that indicates whether the specified set of types contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> can be transformed into CLR types generated into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0e68d-130">如果該結構描述能夠轉換，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-130">
              <see langword="true" /> if the schemas can be transformed; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0e68d-131">
            <paramref name="schemas" /> 或 <paramref name="typeNames" /> 參數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-131">The <paramref name="schemas" /> or <paramref name="typeNames" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">
          <span data-ttu-id="0e68d-132">在匯入作業中的資料合約無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-132">A data contract involved in the import is invalid.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CanImport">
      <MemberSignature Language="C#" Value="public bool CanImport (System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.XmlSchemaElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanImport(class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.Schema.XmlSchemaElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanImport (schemas As XmlSchemaSet, element As XmlSchemaElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanImport(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::Schema::XmlSchemaElement ^ element);" />
      <MemberSignature Language="F#" Value="member this.CanImport : System.Xml.Schema.XmlSchemaSet * System.Xml.Schema.XmlSchemaElement -&gt; bool" Usage="xsdDataContractImporter.CanImport (schemas, element)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="element" Type="System.Xml.Schema.XmlSchemaElement" />
      </Parameters>
      <Docs>
        <param name="schemas">
          <span data-ttu-id="0e68d-133">要匯入的 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-133">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to import.</span>
          </span>
        </param>
        <param name="element">
          <span data-ttu-id="0e68d-134">要在結構描述集合中檢查的特定 <see cref="T:System.Xml.Schema.XmlSchemaElement" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-134">A specific <see cref="T:System.Xml.Schema.XmlSchemaElement" /> to check in the set of schemas.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0e68d-135">取得值，這個值會指出是否能夠匯入包含在 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的特定結構描述項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-135">Gets a value that indicates whether a specific schema element contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> can be imported.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0e68d-136">如果此項目可以匯入，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-136">
              <see langword="true" /> if the element can be imported; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e68d-137">這個方法會檢查此類型，以及它所參考的所有結構描述類型。</span><span class="sxs-lookup"><span data-stu-id="0e68d-137">This method checks the type and all schema types referenced from it.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0e68d-138">
            <paramref name="schemas" /> 或 <paramref name="element" /> 參數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-138">The <paramref name="schemas" /> or <paramref name="element" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">
          <span data-ttu-id="0e68d-139">在匯入作業中的資料合約無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-139">A data contract involved in the import is invalid.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CanImport">
      <MemberSignature Language="C#" Value="public bool CanImport (System.Xml.Schema.XmlSchemaSet schemas, System.Xml.XmlQualifiedName typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanImport(class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.XmlQualifiedName typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanImport (schemas As XmlSchemaSet, typeName As XmlQualifiedName) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanImport(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::XmlQualifiedName ^ typeName);" />
      <MemberSignature Language="F#" Value="member this.CanImport : System.Xml.Schema.XmlSchemaSet * System.Xml.XmlQualifiedName -&gt; bool" Usage="xsdDataContractImporter.CanImport (schemas, typeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="typeName" Type="System.Xml.XmlQualifiedName" />
      </Parameters>
      <Docs>
        <param name="schemas">
          <span data-ttu-id="0e68d-140">
            <see cref="T:System.Xml.Schema.XmlSchemaSet" />，其中包含結構描述表示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-140">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schema representations.</span>
          </span>
        </param>
        <param name="typeName">
          <span data-ttu-id="0e68d-141">
            <see cref="T:System.Collections.IList" /> 的 <see cref="T:System.Xml.XmlQualifiedName" />，其中指定必須從 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 匯入的結構描述類型名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-141">An <see cref="T:System.Collections.IList" /> of <see cref="T:System.Xml.XmlQualifiedName" /> that specifies the names of the schema types that need to be imported from the <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0e68d-142">取得值，這個值會指出包含在 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中的結構描述是否能轉換成 <see cref="T:System.CodeDom.CodeCompileUnit" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-142">Gets a value that indicates whether the schemas contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> can be transformed into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0e68d-143">如果結構描述可以轉換成資料合約類型，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-143">
              <see langword="true" /> if the schemas can be transformed to data contract types; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e68d-144">如需可以匯入的類型的詳細資訊，請參閱[資料合約序列化程式所支援的型別](~/docs/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer.md)。</span><span class="sxs-lookup"><span data-stu-id="0e68d-144">For more information about types that can be imported, see [Types Supported by the Data Contract Serializer](~/docs/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0e68d-145">
            <paramref name="schemas" /> 或 <paramref name="typeName" /> 參數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-145">The <paramref name="schemas" /> or <paramref name="typeName" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">
          <span data-ttu-id="0e68d-146">在匯入作業中的資料合約無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-146">A data contract involved in the import is invalid.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CodeCompileUnit">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeCompileUnit CodeCompileUnit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeCompileUnit CodeCompileUnit" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.XsdDataContractImporter.CodeCompileUnit" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CodeCompileUnit As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeCompileUnit ^ CodeCompileUnit { System::CodeDom::CodeCompileUnit ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CodeCompileUnit : System.CodeDom.CodeCompileUnit" Usage="System.Runtime.Serialization.XsdDataContractImporter.CodeCompileUnit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0e68d-147">取得用來儲存產生之 CLR 型別的 <see cref="T:System.CodeDom.CodeCompileUnit" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-147">Gets a <see cref="T:System.CodeDom.CodeCompileUnit" /> used for storing the CLR types generated.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0e68d-148">用來儲存產生之 CLR 型別的 <see cref="T:System.CodeDom.CodeCompileUnit" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-148">A <see cref="T:System.CodeDom.CodeCompileUnit" /> used to store the CLR types generated.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e68d-149">在使用 <xref:System.Runtime.Serialization.XsdDataContractImporter> 匯入結構描述後，呼叫這個屬性來存取其中已儲存所有產生之程式碼的 <xref:System.CodeDom.CodeCompileUnit>。</span><span class="sxs-lookup"><span data-stu-id="0e68d-149">Call this property after importing schemas using the <xref:System.Runtime.Serialization.XsdDataContractImporter> to access the <xref:System.CodeDom.CodeCompileUnit> in which all the generated code is stored.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0e68d-150">下列範例將建立 <xref:System.CodeDom.CodeCompileUnit>。</span><span class="sxs-lookup"><span data-stu-id="0e68d-150">The following example uses creates a <xref:System.CodeDom.CodeCompileUnit>.</span></span> <span data-ttu-id="0e68d-151">接著，<xref:System.CodeDom.CodeCompileUnit> 便可用來同時建立 Visual C# 和 Visual Basic 程式碼檔案。</span><span class="sxs-lookup"><span data-stu-id="0e68d-151">The <xref:System.CodeDom.CodeCompileUnit> is then used to create both a Visual C# and Visual Basic code file.</span></span>  
  
 [!code-csharp[XsdDataContractImporter#1](~/samples/snippets/csharp/VS_Snippets_CFX/xsddatacontractimporter/cs/xsddatacontractimporterexample.cs#1)]
 [!code-vb[XsdDataContractImporter#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/xsddatacontractimporter/vb/xsddatacontractimporterexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.CodeCompileUnit" />
        <altmember cref="T:System.Runtime.Serialization.XsdDataContractImporter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCodeTypeReference">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0e68d-152">傳回指定項目的 <see cref="T:System.CodeDom.CodeTypeReference" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-152">Returns a <see cref="T:System.CodeDom.CodeTypeReference" /> for the specified element.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCodeTypeReference">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeReference GetCodeTypeReference (System.Xml.XmlQualifiedName typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.CodeDom.CodeTypeReference GetCodeTypeReference(class System.Xml.XmlQualifiedName typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCodeTypeReference (typeName As XmlQualifiedName) As CodeTypeReference" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::CodeDom::CodeTypeReference ^ GetCodeTypeReference(System::Xml::XmlQualifiedName ^ typeName);" />
      <MemberSignature Language="F#" Value="member this.GetCodeTypeReference : System.Xml.XmlQualifiedName -&gt; System.CodeDom.CodeTypeReference" Usage="xsdDataContractImporter.GetCodeTypeReference typeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeReference</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.Xml.XmlQualifiedName" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="0e68d-153">
            <see cref="T:System.Xml.XmlQualifiedName" />，它會指定要查詢的結構描述型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-153">The <see cref="T:System.Xml.XmlQualifiedName" /> that specifies the schema type to look up.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0e68d-154">將 <see cref="T:System.CodeDom.CodeTypeReference" /> 傳回給具有已指定 <see cref="T:System.Xml.XmlQualifiedName" /> 之結構描述型別所產生的 CLR 型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-154">Returns a <see cref="T:System.CodeDom.CodeTypeReference" /> to the CLR type generated for the schema type with the specified <see cref="T:System.Xml.XmlQualifiedName" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0e68d-155">具有已指定 <see cref="T:System.CodeDom.CodeTypeReference" /> 之結構描述型別所產生之 CLR 型別的 <paramref name="typeName" /> 參考。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-155">A <see cref="T:System.CodeDom.CodeTypeReference" /> reference to the CLR type generated for the schema type with the <paramref name="typeName" /> specified.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e68d-156">在呼叫 <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> 方法後，即可使用這個方法來查詢產生之 CLR 型別的參考。</span><span class="sxs-lookup"><span data-stu-id="0e68d-156">Use this method to look up the reference to a generated CLR type after calling the <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> method.</span></span> <span data-ttu-id="0e68d-157"><xref:System.CodeDom.CodeTypeReference>，其中包含所產生型別的名稱，並且能夠用來在 <xref:System.CodeDom.CodeTypeDeclaration> 中查詢對應的 <xref:System.CodeDom.CodeCompileUnit>。</span><span class="sxs-lookup"><span data-stu-id="0e68d-157">The <xref:System.CodeDom.CodeTypeReference> contains the name of the generated type and can be used to look up the corresponding <xref:System.CodeDom.CodeTypeDeclaration> in the <xref:System.CodeDom.CodeCompileUnit>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCodeTypeReference">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeReference GetCodeTypeReference (System.Xml.XmlQualifiedName typeName, System.Xml.Schema.XmlSchemaElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.CodeDom.CodeTypeReference GetCodeTypeReference(class System.Xml.XmlQualifiedName typeName, class System.Xml.Schema.XmlSchemaElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName,System.Xml.Schema.XmlSchemaElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCodeTypeReference (typeName As XmlQualifiedName, element As XmlSchemaElement) As CodeTypeReference" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::CodeDom::CodeTypeReference ^ GetCodeTypeReference(System::Xml::XmlQualifiedName ^ typeName, System::Xml::Schema::XmlSchemaElement ^ element);" />
      <MemberSignature Language="F#" Value="member this.GetCodeTypeReference : System.Xml.XmlQualifiedName * System.Xml.Schema.XmlSchemaElement -&gt; System.CodeDom.CodeTypeReference" Usage="xsdDataContractImporter.GetCodeTypeReference (typeName, element)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeReference</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.Xml.XmlQualifiedName" />
        <Parameter Name="element" Type="System.Xml.Schema.XmlSchemaElement" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="0e68d-158">
            <see cref="T:System.Xml.XmlQualifiedName" />，其中指定要查詢之結構描述型別的 XML 限定名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-158">An <see cref="T:System.Xml.XmlQualifiedName" /> that specifies the XML qualified name of the schema type to look up.</span>
          </span>
        </param>
        <param name="element">
          <span data-ttu-id="0e68d-159">
            <see cref="T:System.Xml.Schema.XmlSchemaElement" />，其中指定 XML 結構描述中的項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-159">An <see cref="T:System.Xml.Schema.XmlSchemaElement" /> that specifies an element in an XML schema.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0e68d-160">傳回指定之 XML 限定項目和結構描述項目的 <see cref="T:System.CodeDom.CodeTypeReference" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-160">Returns a <see cref="T:System.CodeDom.CodeTypeReference" /> for the specified XML qualified element and schema element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0e68d-161">
            <see cref="T:System.CodeDom.CodeTypeReference" />，表示為指定之結構描述型別產生的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-161">A <see cref="T:System.CodeDom.CodeTypeReference" /> that represents the type that was generated for the specified schema type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e68d-162">與指定於項目範圍中之類型有關的資料需要結構描述項目。</span><span class="sxs-lookup"><span data-stu-id="0e68d-162">The schema element is needed for data about the type that is specified at the element scope.</span></span> <span data-ttu-id="0e68d-163">這種情況的主要範例是 XSD 屬性 `nillable`。</span><span class="sxs-lookup"><span data-stu-id="0e68d-163">The main example of this is the XSD attribute `nillable`.</span></span> <span data-ttu-id="0e68d-164">在結構描述中，包含結構描述項目上已經指定將 `nillable` 設定為 `true`，而 null 的概念則會在 CLR 類型 <xref:System.Nullable%601> 中表示。</span><span class="sxs-lookup"><span data-stu-id="0e68d-164">In schema, setting `nillable` to `true` is specified on the containing schema element whereas the concept of null is expressed in the CLR type <xref:System.Nullable%601>.</span></span> <span data-ttu-id="0e68d-165">此項目會被傳入，讓這個匯入工具能夠查詢項目層級的資訊，並且傳回對應的正確型別參考。</span><span class="sxs-lookup"><span data-stu-id="0e68d-165">The element is passed in so that this importer can look up the element-level information and return the correct type reference accordingly.</span></span>  
  
 <span data-ttu-id="0e68d-166">當匯入 WSDL 時，每個參數都會分開匯入，如此一來，這些參數項目就需要分開進行傳入。</span><span class="sxs-lookup"><span data-stu-id="0e68d-166">When importing WSDL, each parameter is imported separately and therefore the parameter elements need to be passed in separately.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetKnownTypeReferences">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;System.CodeDom.CodeTypeReference&gt; GetKnownTypeReferences (System.Xml.XmlQualifiedName typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.ICollection`1&lt;class System.CodeDom.CodeTypeReference&gt; GetKnownTypeReferences(class System.Xml.XmlQualifiedName typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.GetKnownTypeReferences(System.Xml.XmlQualifiedName)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetKnownTypeReferences (typeName As XmlQualifiedName) As ICollection(Of CodeTypeReference)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::ICollection&lt;System::CodeDom::CodeTypeReference ^&gt; ^ GetKnownTypeReferences(System::Xml::XmlQualifiedName ^ typeName);" />
      <MemberSignature Language="F#" Value="member this.GetKnownTypeReferences : System.Xml.XmlQualifiedName -&gt; System.Collections.Generic.ICollection&lt;System.CodeDom.CodeTypeReference&gt;" Usage="xsdDataContractImporter.GetKnownTypeReferences typeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;System.CodeDom.CodeTypeReference&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.Xml.XmlQualifiedName" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="0e68d-167">
            <see cref="T:System.Xml.XmlQualifiedName" />，表示要查詢已知型別的結構描述型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-167">An <see cref="T:System.Xml.XmlQualifiedName" /> that represents the schema type to look up known types for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0e68d-168">傳回 <see cref="T:System.CodeDom.CodeTypeReference" /> 物件的清單，這份清單表示當產生指定之結構描述型別的程式碼時所產生的已知型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-168">Returns a list of <see cref="T:System.CodeDom.CodeTypeReference" /> objects that represents the known types generated when generating code for the specified schema type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0e68d-169">型別為 <see cref="T:System.Collections.Generic.IList`1" /> 的 <see cref="T:System.CodeDom.CodeTypeReference" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-169">A <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:System.CodeDom.CodeTypeReference" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e68d-170">當產生結構描述型別的 CLR 型別時，也會同時為存在於結構描述中的所有衍生型別產生已知型別。</span><span class="sxs-lookup"><span data-stu-id="0e68d-170">When generating CLR types for schema types, known types are also generated for all derived types that are present in the schema.</span></span> <span data-ttu-id="0e68d-171">在許多情況下，這些已知型別會透過屬性來加入至產生的程式碼 </span><span class="sxs-lookup"><span data-stu-id="0e68d-171">In many cases, these known types are added using attributes to the generated code.</span></span> <span data-ttu-id="0e68d-172">(例如，請參閱<xref:System.Runtime.Serialization.KnownTypeAttribute>類別。</span><span class="sxs-lookup"><span data-stu-id="0e68d-172">(For example, see the <xref:System.Runtime.Serialization.KnownTypeAttribute> class.</span></span> <span data-ttu-id="0e68d-173">） 不過，最上層型別，需要具備方法可傳回產生的已知型別的集合。</span><span class="sxs-lookup"><span data-stu-id="0e68d-173">) However, for the top-level type, there needs to be a way to return the set of known types generated.</span></span> <span data-ttu-id="0e68d-174">這個方法會針對特定結構描述型別所產生的已知型別，傳回 <xref:System.CodeDom.CodeTypeReference>。</span><span class="sxs-lookup"><span data-stu-id="0e68d-174">This method returns the <xref:System.CodeDom.CodeTypeReference> for known types that were generated for a specific schema type.</span></span>  
  
 <span data-ttu-id="0e68d-175">如需詳細資訊，請參閱[資料合約已知型別](~/docs/framework/wcf/feature-details/data-contract-known-types.md)。</span><span class="sxs-lookup"><span data-stu-id="0e68d-175">For more information, see [Data Contract Known Types](~/docs/framework/wcf/feature-details/data-contract-known-types.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Serialization.KnownTypeAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Import">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0e68d-176">將 XML 結構描述集合轉換為用來產生 CLR 程式碼的 <see cref="T:System.CodeDom.CodeCompileUnit" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-176">Transforms a set of XML schemas into a <see cref="T:System.CodeDom.CodeCompileUnit" /> used to generate CLR code.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public void Import (System.Xml.Schema.XmlSchemaSet schemas);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Import(class System.Xml.Schema.XmlSchemaSet schemas) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Import (schemas As XmlSchemaSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Import(System::Xml::Schema::XmlSchemaSet ^ schemas);" />
      <MemberSignature Language="F#" Value="member this.Import : System.Xml.Schema.XmlSchemaSet -&gt; unit" Usage="xsdDataContractImporter.Import schemas" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
      </Parameters>
      <Docs>
        <param name="schemas">
          <span data-ttu-id="0e68d-177">
            <see cref="T:System.Xml.Schema.XmlSchemaSet" />，其中包含要產生 CLR 類型的結構描述表示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-177">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schema representations to generate CLR types for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0e68d-178">將包含在 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的已指定 XML 結構描述集合轉換為 <see cref="T:System.CodeDom.CodeCompileUnit" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-178">Transforms the specified set of XML schemas contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0e68d-179">下列範例會使用 <xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A> 方法來測試是否能夠匯入結構描述集合。</span><span class="sxs-lookup"><span data-stu-id="0e68d-179">The following example uses the <xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A> method to test whether a set of schemas can be imported.</span></span> <span data-ttu-id="0e68d-180">如果 <xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A> 方法傳回 `true`，程式碼就會叫用 <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="0e68d-180">If the <xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A> method returns `true`, the code invokes the <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> method.</span></span>  
  
 [!code-csharp[XsdDataContractImporter#2](~/samples/snippets/csharp/VS_Snippets_CFX/xsddatacontractimporter/cs/xsddatacontractimporterexample.cs#2)]
 [!code-vb[XsdDataContractImporter#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/xsddatacontractimporter/vb/xsddatacontractimporterexample.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0e68d-181">
            <paramref name="schemas" /> 參數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-181">The <paramref name="schemas" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public void Import (System.Xml.Schema.XmlSchemaSet schemas, System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt; typeNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Import(class System.Xml.Schema.XmlSchemaSet schemas, class System.Collections.Generic.ICollection`1&lt;class System.Xml.XmlQualifiedName&gt; typeNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Import (schemas As XmlSchemaSet, typeNames As ICollection(Of XmlQualifiedName))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Import(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Collections::Generic::ICollection&lt;System::Xml::XmlQualifiedName ^&gt; ^ typeNames);" />
      <MemberSignature Language="F#" Value="member this.Import : System.Xml.Schema.XmlSchemaSet * System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt; -&gt; unit" Usage="xsdDataContractImporter.Import (schemas, typeNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="typeNames" Type="System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt;" />
      </Parameters>
      <Docs>
        <param name="schemas">
          <span data-ttu-id="0e68d-182">
            <see cref="T:System.Xml.Schema.XmlSchemaSet" />，其中包含結構描述表示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-182">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schema representations.</span>
          </span>
        </param>
        <param name="typeNames">
          <span data-ttu-id="0e68d-183">
            <see cref="T:System.Collections.Generic.ICollection`1" /> (屬於 <see cref="T:System.Xml.XmlQualifiedName" />)，表示要匯入的結構描述類型集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-183">A <see cref="T:System.Collections.Generic.ICollection`1" /> (of <see cref="T:System.Xml.XmlQualifiedName" />) that represents the set of schema types to import.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0e68d-184">將包含在 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的已指定結構描述型別集合轉換為在 <see cref="T:System.CodeDom.CodeCompileUnit" /> 中產生的 CLR 型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-184">Transforms the specified set of schema types contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> into CLR types generated into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public System.Xml.XmlQualifiedName Import (System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.XmlSchemaElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlQualifiedName Import(class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.Schema.XmlSchemaElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function Import (schemas As XmlSchemaSet, element As XmlSchemaElement) As XmlQualifiedName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlQualifiedName ^ Import(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::Schema::XmlSchemaElement ^ element);" />
      <MemberSignature Language="F#" Value="member this.Import : System.Xml.Schema.XmlSchemaSet * System.Xml.Schema.XmlSchemaElement -&gt; System.Xml.XmlQualifiedName" Usage="xsdDataContractImporter.Import (schemas, element)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlQualifiedName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="element" Type="System.Xml.Schema.XmlSchemaElement" />
      </Parameters>
      <Docs>
        <param name="schemas">
          <span data-ttu-id="0e68d-185">
            <see cref="T:System.Xml.Schema.XmlSchemaSet" />，其中包含要轉換的結構描述。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-185">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schemas to transform.</span>
          </span>
        </param>
        <param name="element">
          <span data-ttu-id="0e68d-186">
            <see cref="T:System.Xml.Schema.XmlSchemaElement" />，表示要轉換的特定結構描述項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-186">An <see cref="T:System.Xml.Schema.XmlSchemaElement" /> that represents the specific schema element to transform.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0e68d-187">將已指定 XML 結構描述集合中的已指定結構描述項目轉換為 <see cref="T:System.CodeDom.CodeCompileUnit" />，然後傳回 <see cref="T:System.Xml.XmlQualifiedName" />，其中表示所指定項目的資料合約名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-187">Transforms the specified schema element in the set of specified XML schemas into a <see cref="T:System.CodeDom.CodeCompileUnit" /> and returns an <see cref="T:System.Xml.XmlQualifiedName" /> that represents the data contract name for the specified element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0e68d-188">
            <see cref="T:System.Xml.XmlQualifiedName" />，表示指定的項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-188">An <see cref="T:System.Xml.XmlQualifiedName" /> that represents the specified element.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0e68d-189">
            <paramref name="schemas" /> 或 <paramref name="element" /> 參數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-189">The <paramref name="schemas" /> or <paramref name="element" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public void Import (System.Xml.Schema.XmlSchemaSet schemas, System.Xml.XmlQualifiedName typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Import(class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.XmlQualifiedName typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Import (schemas As XmlSchemaSet, typeName As XmlQualifiedName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Import(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::XmlQualifiedName ^ typeName);" />
      <MemberSignature Language="F#" Value="member this.Import : System.Xml.Schema.XmlSchemaSet * System.Xml.XmlQualifiedName -&gt; unit" Usage="xsdDataContractImporter.Import (schemas, typeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="typeName" Type="System.Xml.XmlQualifiedName" />
      </Parameters>
      <Docs>
        <param name="schemas">
          <span data-ttu-id="0e68d-190">
            <see cref="T:System.Xml.Schema.XmlSchemaSet" />，其中包含結構描述表示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-190">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schema representations.</span>
          </span>
        </param>
        <param name="typeName">
          <span data-ttu-id="0e68d-191">
            <see cref="T:System.Xml.XmlQualifiedName" />，表示要匯入的特定結構描述類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-191">A <see cref="T:System.Xml.XmlQualifiedName" /> that represents a specific schema type to import.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0e68d-192">將包含在 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的已指定 XML 結構描述型別集合轉換為 <see cref="T:System.CodeDom.CodeCompileUnit" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-192">Transforms the specified XML schema type contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0e68d-193">
            <paramref name="schemas" /> 或 <paramref name="typeName" /> 參數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-193">The <paramref name="schemas" /> or <paramref name="typeName" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Runtime.Serialization.ImportOptions Options { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.Serialization.ImportOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.XsdDataContractImporter.Options" />
      <MemberSignature Language="VB.NET" Value="Public Property Options As ImportOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::Serialization::ImportOptions ^ Options { System::Runtime::Serialization::ImportOptions ^ get(); void set(System::Runtime::Serialization::ImportOptions ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.Runtime.Serialization.ImportOptions with get, set" Usage="System.Runtime.Serialization.XsdDataContractImporter.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Serialization.ImportOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0e68d-194">取得或設定 <see cref="T:System.Runtime.Serialization.ImportOptions" />，其中包含匯入作業的可設定選項。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-194">Gets or sets an <see cref="T:System.Runtime.Serialization.ImportOptions" /> that contains settable options for the import operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0e68d-195">
            <see cref="T:System.Runtime.Serialization.ImportOptions" />，其中包含可設定選項。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e68d-195">A <see cref="T:System.Runtime.Serialization.ImportOptions" /> that contains settable options.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e68d-196">使用 <xref:System.Runtime.Serialization.ImportOptions> 類別，即可自訂如何在結構描述匯入期間產生 CLR 型別。</span><span class="sxs-lookup"><span data-stu-id="0e68d-196">Use the <xref:System.Runtime.Serialization.ImportOptions> class to customize how the CLR types are generated during schema import.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Serialization.XsdDataContractExporter" />
        <altmember cref="T:System.Runtime.Serialization.ImportOptions" />
      </Docs>
    </Member>
  </Members>
</Type>