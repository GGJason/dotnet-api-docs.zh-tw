<Type Name="DataContractAttribute" FullName="System.Runtime.Serialization.DataContractAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1b056ba93491521e418681a1e1791c96b415530e" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class DataContractAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DataContractAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Serialization.DataContractAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DataContractAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataContractAttribute sealed : Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization.Primitives</AssemblyName>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Enum | System.AttributeTargets.Struct, AllowMultiple=false, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="489a3-101">指定定義或實作資料合約的型別，可由序列化程式 (例如 <see cref="T:System.Runtime.Serialization.DataContractSerializer" />) 加以序列化。</span>
      <span class="sxs-lookup">
        <span data-stu-id="489a3-101">Specifies that the type defines or implements a data contract and is serializable by a serializer, such as the <see cref="T:System.Runtime.Serialization.DataContractSerializer" />.</span>
      </span>
      <span data-ttu-id="489a3-102">型別作者一定要定義型別的資料合約，才能讓型別能夠進行序列化。</span>
      <span class="sxs-lookup">
        <span data-stu-id="489a3-102">To make their type serializable, type authors must define a data contract for their type.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="489a3-103">將 <xref:System.Runtime.Serialization.DataContractAttribute> 屬性套用至 <xref:System.Runtime.Serialization.DataContractSerializer> 在序列化 (Serialization) 和還原序列化 (Deserialization) 作業中所使用的型別 (類別、結構或列舉)。</span><span class="sxs-lookup"><span data-stu-id="489a3-103">Apply the <xref:System.Runtime.Serialization.DataContractAttribute> attribute to types (classes, structures, or enumerations) that are used in serialization and deserialization operations by the <xref:System.Runtime.Serialization.DataContractSerializer>.</span></span> <span data-ttu-id="489a3-104">如果是使用 [!INCLUDE[indigo1](~/includes/indigo1-md.md)] 基礎結構來傳送或接收訊息，這時您也必須將 <xref:System.Runtime.Serialization.DataContractAttribute> 套用至負責保存和管理使用訊息所傳送之資料的任何類別。</span><span class="sxs-lookup"><span data-stu-id="489a3-104">If you send or receive messages by using the [!INCLUDE[indigo1](~/includes/indigo1-md.md)] infrastructure, you should also apply the <xref:System.Runtime.Serialization.DataContractAttribute> to any classes that hold and manipulate data sent in messages.</span></span> [!INCLUDE[crabout](~/includes/crabout-md.md)]<span data-ttu-id="489a3-105"> 資料合約，請參閱[使用資料合約](~/docs/framework/wcf/feature-details/using-data-contracts.md)。</span><span class="sxs-lookup"><span data-stu-id="489a3-105"> data contracts, see [Using Data Contracts](~/docs/framework/wcf/feature-details/using-data-contracts.md).</span></span>  
  
 <span data-ttu-id="489a3-106">您也必須將 <xref:System.Runtime.Serialization.DataMemberAttribute> 套用至負責保存您要序列化之值的任何欄位、屬性或事件。</span><span class="sxs-lookup"><span data-stu-id="489a3-106">You must also apply the <xref:System.Runtime.Serialization.DataMemberAttribute> to any field, property, or event that holds values you want to serialize.</span></span> <span data-ttu-id="489a3-107">透過套用 <xref:System.Runtime.Serialization.DataContractAttribute>，您便可以明確地讓 <xref:System.Runtime.Serialization.DataContractSerializer> 能夠序列化和還原序列化資料。</span><span class="sxs-lookup"><span data-stu-id="489a3-107">By applying the <xref:System.Runtime.Serialization.DataContractAttribute>, you explicitly enable the <xref:System.Runtime.Serialization.DataContractSerializer> to serialize and deserialize the data.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="489a3-108">您可以將 <xref:System.Runtime.Serialization.DataMemberAttribute> 套用至私用欄位。</span><span class="sxs-lookup"><span data-stu-id="489a3-108">You can apply the <xref:System.Runtime.Serialization.DataMemberAttribute> to private fields.</span></span> <span data-ttu-id="489a3-109">請注意，此欄位 (即使它是私用欄位) 傳回的資料會進行序列化和還原序列化，因此可能會遭到惡意使用者或處理序的檢視或攔截。</span><span class="sxs-lookup"><span data-stu-id="489a3-109">Be aware that the data returned by the field (even if it is private) is serialized and deserialized, and thus can be viewed or intercepted by a malicious user or process.</span></span>  
  
 [!INCLUDE[crabout](~/includes/crabout-md.md)]<span data-ttu-id="489a3-110"> 資料合約，請參閱主題中所列[使用資料合約](~/docs/framework/wcf/feature-details/using-data-contracts.md)。</span><span class="sxs-lookup"><span data-stu-id="489a3-110"> data contracts, see the topics listed in [Using Data Contracts](~/docs/framework/wcf/feature-details/using-data-contracts.md).</span></span>  
  
## <a name="data-contracts"></a><span data-ttu-id="489a3-111">資料合約</span><span class="sxs-lookup"><span data-stu-id="489a3-111">Data Contracts</span></span>  
 <span data-ttu-id="489a3-112">A*資料合約*是一組欄位的抽象描述，與每個欄位的名稱和資料類型。</span><span class="sxs-lookup"><span data-stu-id="489a3-112">A *data contract* is an abstract description of a set of fields with a name and data type for each field.</span></span> <span data-ttu-id="489a3-113">資料合約存在於任何單一實作之外，以便讓不同平台上的服務能夠相互操作。</span><span class="sxs-lookup"><span data-stu-id="489a3-113">The data contract exists outside of any single implementation to allow services on different platforms to interoperate.</span></span> <span data-ttu-id="489a3-114">只要在服務之間傳遞的資料符合相同的合約，所有服務就能夠處理該份資料。</span><span class="sxs-lookup"><span data-stu-id="489a3-114">As long as the data passed between the services conforms to the same contract, all the services can process the data.</span></span> <span data-ttu-id="489a3-115">這個處理方式也稱為*鬆散耦合系統*。</span><span class="sxs-lookup"><span data-stu-id="489a3-115">This processing is also known as a *loosely coupled system*.</span></span> <span data-ttu-id="489a3-116">資料合約也類似一種介面，而在這種介面中，合約會指定資料必須如何傳遞才可讓應用程式加以處理。</span><span class="sxs-lookup"><span data-stu-id="489a3-116">A data contract is also similar to an interface in that the contract specifies how data must be delivered so that it can be processed by an application.</span></span> <span data-ttu-id="489a3-117">例如，資料合約可能會要求名為 "Person" 並包含兩個名稱分別為 "FirstName" 和 "LastName" 之文字欄位的資料型別。</span><span class="sxs-lookup"><span data-stu-id="489a3-117">For example, the data contract may call for a data type named "Person" that has two text fields, named "FirstName" and "LastName".</span></span> <span data-ttu-id="489a3-118">若要建立資料合約，請將 <xref:System.Runtime.Serialization.DataContractAttribute> 套用至類別，並將 <xref:System.Runtime.Serialization.DataMemberAttribute> 套用至必須進行序列化的任何欄位或屬性。</span><span class="sxs-lookup"><span data-stu-id="489a3-118">To create a data contract, apply the <xref:System.Runtime.Serialization.DataContractAttribute> to the class and apply the <xref:System.Runtime.Serialization.DataMemberAttribute> to any fields or properties that must be serialized.</span></span> <span data-ttu-id="489a3-119">當完成序列化之後，資料就會符合已在該型別中隱含內建的資料合約。</span><span class="sxs-lookup"><span data-stu-id="489a3-119">When serialized, the data conforms to the data contract that is implicitly built into the type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="489a3-120">就繼承行為來看，資料合約與實際的介面有很大的不同。</span><span class="sxs-lookup"><span data-stu-id="489a3-120">A data contract differs significantly from an actual interface in its inheritance behavior.</span></span> <span data-ttu-id="489a3-121">介面是繼承自任何衍生的型別。</span><span class="sxs-lookup"><span data-stu-id="489a3-121">Interfaces are inherited by any derived types.</span></span> <span data-ttu-id="489a3-122">當您將 <xref:System.Runtime.Serialization.DataContractAttribute> 套用至基底類別時，衍生的型別並不會繼承屬性或行為。</span><span class="sxs-lookup"><span data-stu-id="489a3-122">When you apply the <xref:System.Runtime.Serialization.DataContractAttribute> to a base class, the derived types do not inherit the attribute or the behavior.</span></span> <span data-ttu-id="489a3-123">但是，如果衍生的型別擁有資料合約，該基底類別的資料成員就會進行序列化。</span><span class="sxs-lookup"><span data-stu-id="489a3-123">However, if a derived type has a data contract, the data members of the base class are serialized.</span></span> <span data-ttu-id="489a3-124">但是您必須將 <xref:System.Runtime.Serialization.DataMemberAttribute> 套用至衍生類別的新成員，才能讓這些成員進行序列化。</span><span class="sxs-lookup"><span data-stu-id="489a3-124">However, you must apply the <xref:System.Runtime.Serialization.DataMemberAttribute> to new members in a derived class to make them serializable.</span></span>  
  
## <a name="xml-schema-documents-and-the-svcutil-tool"></a><span data-ttu-id="489a3-125">XML 結構描述文件和 SvcUtil 工具</span><span class="sxs-lookup"><span data-stu-id="489a3-125">XML Schema Documents and the SvcUtil Tool</span></span>  
 <span data-ttu-id="489a3-126">如果您要與其他服務交換資料，就必須描述資料合約。</span><span class="sxs-lookup"><span data-stu-id="489a3-126">If you are exchanging data with other services, you must describe the data contract.</span></span> <span data-ttu-id="489a3-127">若是最新版本的 <xref:System.Runtime.Serialization.DataContractSerializer>，則可以使用 XML 結構描述來定義資料合約 </span><span class="sxs-lookup"><span data-stu-id="489a3-127">For the current version of the <xref:System.Runtime.Serialization.DataContractSerializer>, an XML schema can be used to define data contracts.</span></span> <span data-ttu-id="489a3-128">(可以使用其他的中繼資料/描述形式來達成相同目的)。若要從您的應用程式中建立 XML 結構描述，使用[ServiceModel Metadata Utility Tool (Svcutil.exe)](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)與**/dconly**命令列選項。</span><span class="sxs-lookup"><span data-stu-id="489a3-128">(Other forms of metadata/description could be used for the same purpose.) To create an XML schema from your application, use the [ServiceModel Metadata Utility Tool (Svcutil.exe)](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) with the **/dconly** command line option.</span></span> <span data-ttu-id="489a3-129">根據預設，如果工具的輸入項目是組件時，工具就會產生 XML 結構描述集合，而此集合會定義在該組件中找到的所有資料合約型別。</span><span class="sxs-lookup"><span data-stu-id="489a3-129">When the input to the tool is an assembly, by default, the tool generates a set of XML schemas that define all the data contract types found in that assembly.</span></span> <span data-ttu-id="489a3-130">相反地，您也可以使用 Svcutil.exe 工具來建立符合 XML 結構描述需求的 Visual Basic 或 C# 類別定義，而這些結構描述會使用能夠透過資料合約表示的建構。</span><span class="sxs-lookup"><span data-stu-id="489a3-130">Conversely, you can also use the Svcutil.exe tool to create Visual Basic or C# class definitions that conform to the requirements of XML schemas that use constructs that can be expressed by data contracts.</span></span> <span data-ttu-id="489a3-131">在此情況下， **/dconly**則不需要命令列選項。</span><span class="sxs-lookup"><span data-stu-id="489a3-131">In this case, the **/dconly** command line option is not required.</span></span>  
  
 <span data-ttu-id="489a3-132">根據預設，如果 Svcutil.exe 工具的輸入項目是 XML 結構描述，工具就會建立類別集合。</span><span class="sxs-lookup"><span data-stu-id="489a3-132">If the input to the Svcutil.exe tool is an XML schema, by default, the tool creates a set of classes.</span></span> <span data-ttu-id="489a3-133">如果您檢查這些類別，您就會發現此時已套用了 <xref:System.Runtime.Serialization.DataContractAttribute>。</span><span class="sxs-lookup"><span data-stu-id="489a3-133">If you examine those classes, you find that the <xref:System.Runtime.Serialization.DataContractAttribute> has been applied.</span></span> <span data-ttu-id="489a3-134">您可以使用這些類別來建立新的應用程式，以便處理必須與其他服務交換的資料。</span><span class="sxs-lookup"><span data-stu-id="489a3-134">You can use those classes to create a new application to process data that must be exchanged with other services.</span></span>  
  
 <span data-ttu-id="489a3-135">您也可以針對傳回 Web 服務描述語言 (Web Services Description Language，WSDL) 文件的端點執行上述工具，以便自動產生可用來建立 [!INCLUDE[indigo1](~/includes/indigo1-md.md)] 用戶端的程式碼和組態。</span><span class="sxs-lookup"><span data-stu-id="489a3-135">You can also run the tool against an endpoint that returns a Web Services Description Language (WSDL) document to automatically generate the code and configuration to create an [!INCLUDE[indigo1](~/includes/indigo1-md.md)] client.</span></span> <span data-ttu-id="489a3-136">所產生的程式碼會包含以 <xref:System.Runtime.Serialization.DataContractAttribute> 標記的型別。</span><span class="sxs-lookup"><span data-stu-id="489a3-136">The generated code includes types that are marked with the <xref:System.Runtime.Serialization.DataContractAttribute>.</span></span>  
  
## <a name="reusing-existing-types"></a><span data-ttu-id="489a3-137">重複使用現有的型別</span><span class="sxs-lookup"><span data-stu-id="489a3-137">Reusing Existing Types</span></span>  
 <span data-ttu-id="489a3-138">資料合約有兩項基本要求，一個是穩定的名稱，另一個則是成員的清單。</span><span class="sxs-lookup"><span data-stu-id="489a3-138">A data contract has two basic requirements: a stable name and a list of members.</span></span> <span data-ttu-id="489a3-139">穩定的名稱是由命名空間統一資源識別元 (URI) 以及合約的本機名稱組成。</span><span class="sxs-lookup"><span data-stu-id="489a3-139">The stable name consists of the namespace uniform resource identifier (URI) and the local name of the contract.</span></span> <span data-ttu-id="489a3-140">根據預設，當您套用<xref:System.Runtime.Serialization.DataContractAttribute>至類別時，它會使用類別名稱做為本機名稱和類別的命名空間 (前面加上"http://schemas.datacontract.org/2004/07/") 做為命名空間 URI。</span><span class="sxs-lookup"><span data-stu-id="489a3-140">By default, when you apply the <xref:System.Runtime.Serialization.DataContractAttribute> to a class, it uses the class name as the local name and the class's namespace (prefixed with "http://schemas.datacontract.org/2004/07/") as the namespace URI.</span></span> <span data-ttu-id="489a3-141">您可以藉由設定 <xref:System.Runtime.Serialization.DataContractAttribute.Name%2A> 和 <xref:System.Runtime.Serialization.DataContractAttribute.Namespace%2A> 屬性來覆寫預設值。</span><span class="sxs-lookup"><span data-stu-id="489a3-141">You can override the defaults by setting the <xref:System.Runtime.Serialization.DataContractAttribute.Name%2A> and <xref:System.Runtime.Serialization.DataContractAttribute.Namespace%2A> properties.</span></span> <span data-ttu-id="489a3-142">您也可以藉由將 <xref:System.Runtime.Serialization.ContractNamespaceAttribute> 套用至命名空間以變更命名空間。</span><span class="sxs-lookup"><span data-stu-id="489a3-142">You can also change the namespace by applying the <xref:System.Runtime.Serialization.ContractNamespaceAttribute> to the namespace.</span></span> <span data-ttu-id="489a3-143">當現有的型別能夠完全依照需求處理資料，但卻擁有與資料合約不同的命名空間和類別名稱時，您就可以使用這項功能。</span><span class="sxs-lookup"><span data-stu-id="489a3-143">Use this capability when you have an existing type that processes data exactly as you require but has a different namespace and class name from the data contract.</span></span> <span data-ttu-id="489a3-144">藉由覆寫預設值，您就可以重複使用現有的型別，並使已序列化的資料符合資料合約。</span><span class="sxs-lookup"><span data-stu-id="489a3-144">By overriding the default values, you can reuse your existing type and have the serialized data conform to the data contract.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="489a3-145">您可以在任何程式碼中使用 `DataContract` 一字來代替較長的 <xref:System.Runtime.Serialization.DataContractAttribute>。</span><span class="sxs-lookup"><span data-stu-id="489a3-145">In any code, you can use the word `DataContract` instead of the longer <xref:System.Runtime.Serialization.DataContractAttribute>.</span></span>  
  
## <a name="versioning"></a><span data-ttu-id="489a3-146">版本控制</span><span class="sxs-lookup"><span data-stu-id="489a3-146">Versioning</span></span>  
 <span data-ttu-id="489a3-147">資料合約也能配合本身的較新版本。</span><span class="sxs-lookup"><span data-stu-id="489a3-147">A data contract can also accommodate later versions of itself.</span></span> <span data-ttu-id="489a3-148">也就是說，當合約的較新版本含有其他資料時，這時會儲存該份資料，然後將其原封不動地傳回給傳送者。</span><span class="sxs-lookup"><span data-stu-id="489a3-148">That is, when a later version of the contract includes extra data, that data is stored and returned to a sender untouched.</span></span> <span data-ttu-id="489a3-149">若要執行這個步驟，請實作 <xref:System.Runtime.Serialization.IExtensibleDataObject> 介面。</span><span class="sxs-lookup"><span data-stu-id="489a3-149">To do this, implement the <xref:System.Runtime.Serialization.IExtensibleDataObject> interface.</span></span>  
  
 [!INCLUDE[crabout](~/includes/crabout-md.md)]<span data-ttu-id="489a3-150"> 版本控制，請參閱[資料合約版本控制](~/docs/framework/wcf/feature-details/data-contract-versioning.md)。</span><span class="sxs-lookup"><span data-stu-id="489a3-150"> versioning, see [Data Contract Versioning](~/docs/framework/wcf/feature-details/data-contract-versioning.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="489a3-151">下列範例會序列化和還原序列化名稱為 `Person` 且已套用 <xref:System.Runtime.Serialization.DataContractAttribute> 的類別。</span><span class="sxs-lookup"><span data-stu-id="489a3-151">The following example serializes and deserializes a class named `Person` to which the <xref:System.Runtime.Serialization.DataContractAttribute> has been applied.</span></span> <span data-ttu-id="489a3-152">請注意，<xref:System.Runtime.Serialization.DataContractAttribute.Namespace%2A> 和 <xref:System.Runtime.Serialization.DataContractAttribute.Name%2A> 屬性的值已經設定為將覆寫預設設定。</span><span class="sxs-lookup"><span data-stu-id="489a3-152">Note that the <xref:System.Runtime.Serialization.DataContractAttribute.Namespace%2A> and <xref:System.Runtime.Serialization.DataContractAttribute.Name%2A> properties have been set to values that override the default settings.</span></span>  
  
 [!code-csharp[DataContractAttribute#1](~/samples/snippets/csharp/VS_Snippets_CFX/datacontractattribute/cs/overview.cs#1)]
 [!code-vb[DataContractAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/datacontractattribute/vb/overview.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.Serialization.IExtensibleDataObject" />
    <altmember cref="T:System.Runtime.Serialization.ExtensionDataObject" />
    <altmember cref="T:System.Runtime.Serialization.DataContractSerializer" />
    <altmember cref="T:System.Runtime.Serialization.DataMemberAttribute" />
    <altmember cref="T:System.Runtime.Serialization.ISerializable" />
    <altmember cref="T:System.Runtime.Serialization.KnownTypeAttribute" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataContractAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.DataContractAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataContractAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="489a3-153">初始化 <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="489a3-153">Initializes a new instance of the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNameSetExplicitly">
      <MemberSignature Language="C#" Value="public bool IsNameSetExplicitly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNameSetExplicitly" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.DataContractAttribute.IsNameSetExplicitly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNameSetExplicitly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNameSetExplicitly { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="489a3-154">取得是否已明確設定 <see cref="P:System.Runtime.Serialization.DataContractAttribute.Name" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="489a3-154">Gets whether <see cref="P:System.Runtime.Serialization.DataContractAttribute.Name" /> has been explicitly set.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="489a3-155">傳回<see langword="true" />如果名稱已明確設定，否則<see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="489a3-155">Returns <see langword="true" /> if the name has been explicitly set; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNamespaceSetExplicitly">
      <MemberSignature Language="C#" Value="public bool IsNamespaceSetExplicitly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNamespaceSetExplicitly" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.DataContractAttribute.IsNamespaceSetExplicitly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNamespaceSetExplicitly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNamespaceSetExplicitly { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="489a3-156">取得是否已明確設定 <see cref="P:System.Runtime.Serialization.DataContractAttribute.Namespace" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="489a3-156">Gets whether <see cref="P:System.Runtime.Serialization.DataContractAttribute.Namespace" /> has been explicitly set.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="489a3-157">傳回<see langword="true" />如果命名空間已明確設定，否則<see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="489a3-157">Returns <see langword="true" /> if the namespace has been explicitly set; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReference">
      <MemberSignature Language="C#" Value="public bool IsReference { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReference" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.DataContractAttribute.IsReference" />
      <MemberSignature Language="VB.NET" Value="Public Property IsReference As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReference { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="489a3-158">取得或設定值，這個值表示是否要保留物件參考資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="489a3-158">Gets or sets a value that indicates whether to preserve object reference data.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="489a3-159">
            <see langword="true" /> 表示使用標準的 XML 來保留物件參考資料，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="489a3-159">
              <see langword="true" /> to keep object reference data using standard XML; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="489a3-160">預設值為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="489a3-160">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="489a3-161">您可以使用 `IsReference` 屬性，指示 <xref:System.Runtime.Serialization.DataContractSerializer> 插入可保留物件參考資訊的 XML 建構。</span><span class="sxs-lookup"><span data-stu-id="489a3-161">Use the `IsReference` property to instruct the <xref:System.Runtime.Serialization.DataContractSerializer> to insert XML constructs that preserve object reference information.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Runtime.Serialization.DataContractSerializer.PreserveObjectReferences" />
      </Docs>
    </Member>
    <Member MemberName="IsReferenceSetExplicitly">
      <MemberSignature Language="C#" Value="public bool IsReferenceSetExplicitly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReferenceSetExplicitly" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.DataContractAttribute.IsReferenceSetExplicitly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReferenceSetExplicitly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReferenceSetExplicitly { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="489a3-162">取得是否已明確設定 <see cref="P:System.Runtime.Serialization.DataContractAttribute.IsReference" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="489a3-162">Gets whether <see cref="P:System.Runtime.Serialization.DataContractAttribute.IsReference" /> has been explicitly set.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="489a3-163">
            <see langword="true" /> 如果已明確設定參考。否則， <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="489a3-163">
              <see langword="true" /> if the reference has been explicitly set; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.DataContractAttribute.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="489a3-164">取得或設定型別的資料合約名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="489a3-164">Gets or sets the name of the data contract for the type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="489a3-165">資料合約的本機名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="489a3-165">The local name of a data contract.</span>
          </span>
          <span data-ttu-id="489a3-166">預設為要套用屬性之類別的名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="489a3-166">The default is the name of the class that the attribute is applied to.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="489a3-167"><xref:System.Runtime.Serialization.DataContractAttribute.Name%2A> 屬性是用來指定資料合約的名稱，而這個名稱也就是在 XML 結構描述中的型別名稱。</span><span class="sxs-lookup"><span data-stu-id="489a3-167">The <xref:System.Runtime.Serialization.DataContractAttribute.Name%2A> property is used to give a name to a data contract, which is the name of the type in XML schema.</span></span> [!INCLUDE[crdefault](~/includes/crdefault-md.md)]<span data-ttu-id="489a3-168"> [資料合約名稱](~/docs/framework/wcf/feature-details/data-contract-names.md)。</span><span class="sxs-lookup"><span data-stu-id="489a3-168"> [Data Contract Names](~/docs/framework/wcf/feature-details/data-contract-names.md).</span></span>  
  
 <span data-ttu-id="489a3-169">根據預設，資料合約的名稱就是要套用 <xref:System.Runtime.Serialization.DataContractAttribute> 之型別的名稱。</span><span class="sxs-lookup"><span data-stu-id="489a3-169">By default, the name of a data contract is the name of the type that the <xref:System.Runtime.Serialization.DataContractAttribute> is applied to.</span></span> <span data-ttu-id="489a3-170">但是，這個預設名稱可能會因為某些原因而需要變更。</span><span class="sxs-lookup"><span data-stu-id="489a3-170">However, there may be reasons to change this default name.</span></span> <span data-ttu-id="489a3-171">其中一個原因是要讓現有型別可以處理必須符合現有資料合約的資料。</span><span class="sxs-lookup"><span data-stu-id="489a3-171">One reason is to allow an existing type to process data that must conform to an existing data contract.</span></span> <span data-ttu-id="489a3-172">例如，有一個名為 `Person` 的型別，但是包含在 XML 結構描述中的資料合約所要求的名稱卻是 `Customer`。</span><span class="sxs-lookup"><span data-stu-id="489a3-172">For example, there exists a type named `Person` but the data contract, embodied in an XML schema, requires that the name be `Customer`.</span></span> <span data-ttu-id="489a3-173">這時只要將屬性值設定為 `Customer` 就可以滿足該合約。</span><span class="sxs-lookup"><span data-stu-id="489a3-173">The contract can be satisfied by setting the property value to `Customer`.</span></span>  
  
 <span data-ttu-id="489a3-174">第二個原因是為了能夠產生不允許當做型別名稱的名稱。</span><span class="sxs-lookup"><span data-stu-id="489a3-174">A second reason is to allow the generation of names that are invalid as type names.</span></span> <span data-ttu-id="489a3-175">例如，如果資料合約需要的名稱不允許當做型別名稱，此時可以將屬性值設定成那個不被允許的名稱。</span><span class="sxs-lookup"><span data-stu-id="489a3-175">For example, if a data contract demands a name that is not allowable as a type name, set the property value to that disallowed name.</span></span> <span data-ttu-id="489a3-176">例如，字串 "$value" 不允許當做型別名稱，但是可以當做 <xref:System.Runtime.Serialization.DataContractAttribute.Name%2A> 屬性值。</span><span class="sxs-lookup"><span data-stu-id="489a3-176">For instance, the string "$value" is disallowed as a type name but is allowed as a <xref:System.Runtime.Serialization.DataContractAttribute.Name%2A> property value.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.DataContractAttribute.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="489a3-177">取得或設定型別之資料合約的命名空間。</span>
          <span class="sxs-lookup">
            <span data-stu-id="489a3-177">Gets or sets the namespace for the data contract for the type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="489a3-178">合約的命名空間。</span>
          <span class="sxs-lookup">
            <span data-stu-id="489a3-178">The namespace of the contract.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="489a3-179">如果您的型別必須傳回符合特定資料合約的資料，即可使用這個屬性指定特定的命名空間。</span><span class="sxs-lookup"><span data-stu-id="489a3-179">Use this property to specify a particular namespace if your type must return data that complies with a specific data contract.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="489a3-180">若要成功傳輸資料，在用戶端和伺服器上，資料合約中的資料名稱必須相同。</span><span class="sxs-lookup"><span data-stu-id="489a3-180">For the data to be successfully transmitted, the name of the data in a data contract must be the same in both the client and the server.</span></span> <span data-ttu-id="489a3-181">Visual Basic 專案中，依預設，加入前置詞 （稱為 「 根命名空間，」 專案命名） 的每個檔案中定義的命名空間。</span><span class="sxs-lookup"><span data-stu-id="489a3-181">Visual Basic projects, by default, add a prefix to the namespace defined in each file (called the "root namespace," named after the project).</span></span> <span data-ttu-id="489a3-182">加上這個前置詞會造成相同型別有不同的用戶端和伺服器命名空間。</span><span class="sxs-lookup"><span data-stu-id="489a3-182">Adding this prefix causes the client and server namespaces to be different for the same type.</span></span> <span data-ttu-id="489a3-183">方案是將設定<xref:System.Runtime.Serialization.DataContractAttribute.Namespace%2A>屬性為""，或者明確設定此屬性中的資料合約命名空間。</span><span class="sxs-lookup"><span data-stu-id="489a3-183">The solution is to set the <xref:System.Runtime.Serialization.DataContractAttribute.Namespace%2A> property to "", or to explicitly set the data contract namespace in this property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>