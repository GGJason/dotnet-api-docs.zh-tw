<Type Name="ISerializable" FullName="System.Runtime.Serialization.ISerializable">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="70d94daed131fd169a9e7dd76c788d9dfcaaed62" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39755888" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="VB.NET" Value="Public Interface ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public interface class ISerializable" />
  <TypeSignature Language="F#" Value="type ISerializable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>允許物件控制它自己的序列化 (Serialization) 和還原序列化 (Deserialization)。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可能會序列化任何類別必須標記為<xref:System.SerializableAttribute>。 如果類別需要控制其序列化程序，它可以實作<xref:System.Runtime.Serialization.ISerializable>介面。 <xref:System.Runtime.Serialization.Formatter>呼叫<xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>在序列化時，並填入所提供<xref:System.Runtime.Serialization.SerializationInfo>代表的物件所需的所有資料。 <xref:System.Runtime.Serialization.Formatter>建立<xref:System.Runtime.Serialization.SerializationInfo>圖形中物件的型別。 需要傳送 proxy 本身可以使用的物件<xref:System.Runtime.Serialization.SerializationInfo.FullTypeName%2A>並<xref:System.Runtime.Serialization.SerializationInfo.AssemblyName%2A>上的方法<xref:System.Runtime.Serialization.SerializationInfo>變更傳輸的資訊。  
  
 在類別繼承的情況下是可序列化的類別，衍生自基底類別實作<xref:System.Runtime.Serialization.ISerializable>。 在此情況下，衍生的類別應該呼叫基底類別實作<xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>其實作內部<xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>。 否則，不會序列化的基底類別中的資料。  
  
 <xref:System.Runtime.Serialization.ISerializable>介面隱含的建構函式簽章的建構函式 (<xref:System.Runtime.Serialization.SerializationInfo>的詳細資訊，<xref:System.Runtime.Serialization.StreamingContext>內容)。 在還原序列化時，目前的建構函式呼叫中的資料後才<xref:System.Runtime.Serialization.SerializationInfo>已還原序列化格式器。 一般情況下，這個建構函式應受到保護，如果類別並未密封。  
  
 無法保證還原序列化物件的順序。 例如，如果一種類型會參考具有不尚未還原序列化的型別，就會發生例外狀況。 如果您要建立具有這類相依性的類型，可解決此問題，實作`IDeserializationCallback`介面和`OnDeserialization`方法。  
  
 序列化架構會處理擴充的物件型別<xref:System.MarshalByRefObject>做為擴充的型別相同<xref:System.Object>。 這些類型都可以使用標記<xref:System.SerializableAttribute>並實作<xref:System.Runtime.Serialization.ISerializable>介面做為其他類型的物件。 將擷取其狀態的物件，並將它保存到資料流中。  
  
 當透過使用這些型別<xref:System.Runtime.Remoting>，遠端基礎結構提供超越一般序列化，並改為將序列化的 proxy 代理<xref:System.MarshalByRefObject>。 代理是知道如何序列化和還原序列化特定型別之物件的 helper。 Proxy，看不到在大部分情況下，使用者都屬於類型<xref:System.Runtime.Remoting.ObjRef>。  
  
 一般設計模式，它會兩者都標記為可序列化的屬性和擴充類別不尋常<xref:System.MarshalByRefObject>。 開發人員應該仔細考量可能的序列化和遠端處理案例結合這兩個特性。 其中，這可能是適用的其中一個範例是使用<xref:System.IO.MemoryStream>。 雖然的基底類別<xref:System.IO.MemoryStream>(<xref:System.IO.Stream>) 始<xref:System.MarshalByRefObject>，就可以擷取的狀態<xref:System.IO.MemoryStream>並會在還原資料庫。 因此，它可能會有意義序列化資料庫上的這個資料流的狀態，並在稍後還原的時間。 不過，使用遠端執行功能，此類型的物件會透過 proxy 傳遞。  
  
 如需有關擴充的類別的序列化<xref:System.MarshalByRefObject>，請參閱<xref:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector>。 如需實作的詳細資訊<xref:System.Runtime.Serialization.ISerializable>，請參閱 <<c2> [ 自訂序列化](~/docs/standard/serialization/custom-serialization.md)。  
  
   
  
## Examples  
 下列程式碼範例示範使用<xref:System.Runtime.Serialization.ISerializable>介面來定義類別的自訂序列化行為。  
  
 [!code-cpp[ISerializable Interface Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/ISerializable Interface Example/CPP/iobjectreference.cpp#1)]
 [!code-csharp[ISerializable Interface Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/ISerializable Interface Example/CS/iobjectreference.cs#1)]
 [!code-vb[ISerializable Interface Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ISerializable Interface Example/VB/iobjectreference.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>實作這個介面，讓要參與自己的序列化和還原序列化的物件。</para>
    </block>
    <altmember cref="T:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector" />
  </Docs>
  <Members>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="iSerializable.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">要以資料填入的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
        <param name="context">這個序列化的目的端 (請參閱 <see cref="T:System.Runtime.Serialization.StreamingContext" />)。</param>
        <summary>將序列化目標物件所需的資料填入 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 中包含的任何物件<xref:System.Runtime.Serialization.SerializationInfo>自動追蹤和序列化格式器。  
  
 呼叫的程式碼<xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>需要<xref:System.Security.Permissions.SecurityPermission>提供序列化服務。 關聯的列舉型別：<xref:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter?displayProperty=nameWithType>。  
  
> [!NOTE]
>  不保證，這個方法將會一次每個物件執行個體在序列化期間呼叫。 因此，此方法應該實作的方式，其行為將會相同，不論呼叫它的次數。  
  
   
  
## Examples  
 下列範例會使用<xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>方法來設定替代的序列化物件的值。 程式碼會使用<xref:System.Runtime.Serialization.SerializationInfo.AddValue%2A>方法的<xref:System.Runtime.Serialization.SerializationInfo>類別來序列化物件時，儲存替代值。 相反地，當建構函式`Person`類別稱為還原序列化期間，使用擷取 alternatve 值<xref:System.Runtime.Serialization.SerializationInfo.GetValue%2A>方法並且重新指派給物件的欄位。  
  
 [!code-csharp[ISerializable_GetObjectData#0](~/samples/snippets/csharp/VS_Snippets_Remoting/ISerializable_GetObjectData/cs/ISerializable_GetObjectData.cs#0)]
 [!code-vb[ISerializable_GetObjectData#0](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ISerializable_GetObjectData/vb/ISerializable_GetObjectData.vb#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的權限。</exception>
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
      </Docs>
    </Member>
  </Members>
</Type>