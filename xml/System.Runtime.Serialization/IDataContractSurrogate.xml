<Type Name="IDataContractSurrogate" FullName="System.Runtime.Serialization.IDataContractSurrogate">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3fa2320cba07ce168e131e6d44f89763ab9487b6" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDataContractSurrogate" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataContractSurrogate" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Serialization.IDataContractSurrogate" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDataContractSurrogate" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDataContractSurrogate" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="cbe80-101">提供 <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> 在序列化 (Serialization)、還原序列化 (Deserialization)，以及匯出和匯入 XML 結構描述文件 (XSD) 期間，必須用來將型別取代成另一種型別的方法。</span>
      <span class="sxs-lookup">
        <span data-stu-id="cbe80-101">Provides the methods needed to substitute one type for another by the <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> during serialization, deserialization, and export and import of XML schema documents (XSD).</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cbe80-102">當您需要執行將型別或物件取代成其他的型別或物件，或是動態產生結構描述的變形而要使用 <xref:System.Runtime.Serialization.IDataContractSurrogate> 時，便可使用 <xref:System.Runtime.Serialization.DataContractSerializer>。</span><span class="sxs-lookup"><span data-stu-id="cbe80-102">Use the <xref:System.Runtime.Serialization.IDataContractSurrogate> when using the <xref:System.Runtime.Serialization.DataContractSerializer> if you need to do one of the following: substitute one type or object for another, or to dynamically generate schema variations.</span></span> <span data-ttu-id="cbe80-103">範例應用程式，請參閱[DataContract Surrogate](~/docs/framework/wcf/samples/datacontract-surrogate.md)。</span><span class="sxs-lookup"><span data-stu-id="cbe80-103">For a sample application, see [DataContract Surrogate](~/docs/framework/wcf/samples/datacontract-surrogate.md).</span></span> <span data-ttu-id="cbe80-104">如需資料合約的詳細資訊，請參閱[使用資料合約](~/docs/framework/wcf/feature-details/using-data-contracts.md)。</span><span class="sxs-lookup"><span data-stu-id="cbe80-104">For more information about data contracts, see [Using Data Contracts](~/docs/framework/wcf/feature-details/using-data-contracts.md).</span></span>  
  
 <span data-ttu-id="cbe80-105">在執行階段，您可以透過使用 <xref:System.Runtime.Serialization.DataContractSerializer> 來尋找 <xref:System.ServiceModel.Description.OperationDescription> 執行個體，以便在服務中尋找任何作業的特定 <xref:System.ServiceModel.Description.DataContractSerializerOperationBehavior>。</span><span class="sxs-lookup"><span data-stu-id="cbe80-105">At run time, you can find the specific <xref:System.Runtime.Serialization.DataContractSerializer> for any operation in a service by using the <xref:System.ServiceModel.Description.OperationDescription> to find the <xref:System.ServiceModel.Description.DataContractSerializerOperationBehavior> instance.</span></span> <span data-ttu-id="cbe80-106">如需實作介面以建立 surrogate 的詳細資訊，請參閱[資料合約 Surrogate](~/docs/framework/wcf/extending/data-contract-surrogates.md)。</span><span class="sxs-lookup"><span data-stu-id="cbe80-106">For more information about implementing the interface to create a surrogate, see [Data Contract Surrogates](~/docs/framework/wcf/extending/data-contract-surrogates.md).</span></span>  
  
 <span data-ttu-id="cbe80-107">當您使用 <xref:System.Runtime.Serialization.IDataContractSurrogate> 和 <xref:System.Runtime.Serialization.XsdDataContractExporter> 類別時，您也可以使用 <xref:System.Runtime.Serialization.XsdDataContractImporter> 來影響 XML 結構描述的匯入和匯出。</span><span class="sxs-lookup"><span data-stu-id="cbe80-107">You can also use the <xref:System.Runtime.Serialization.IDataContractSurrogate> to affect the import and export of XML schemas when you are using the <xref:System.Runtime.Serialization.XsdDataContractExporter> and <xref:System.Runtime.Serialization.XsdDataContractImporter> classes.</span></span> <span data-ttu-id="cbe80-108">您可以藉由將 <xref:System.Runtime.Serialization.IDataContractSurrogate> 指派給 <xref:System.Runtime.Serialization.ExportOptions.DataContractSurrogate%2A> 類別的 <xref:System.Runtime.Serialization.ExportOptions> 屬性，或指派給 <xref:System.Runtime.Serialization.ImportOptions.DataContractSurrogate%2A> 類別的 <xref:System.Runtime.Serialization.ImportOptions> 屬性以達到這個目的。</span><span class="sxs-lookup"><span data-stu-id="cbe80-108">You can do so by assigning the <xref:System.Runtime.Serialization.IDataContractSurrogate> to the <xref:System.Runtime.Serialization.ExportOptions.DataContractSurrogate%2A> property of the <xref:System.Runtime.Serialization.ExportOptions> class, or to the <xref:System.Runtime.Serialization.ImportOptions.DataContractSurrogate%2A> property of the <xref:System.Runtime.Serialization.ImportOptions> class.</span></span>  <span data-ttu-id="cbe80-109">如需詳細資訊，請參閱[結構描述匯入和匯出](~/docs/framework/wcf/feature-details/schema-import-and-export.md)。</span><span class="sxs-lookup"><span data-stu-id="cbe80-109">For more information, see [Schema Import and Export](~/docs/framework/wcf/feature-details/schema-import-and-export.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cbe80-110">下列範例會示範 <xref:System.Runtime.Serialization.IDataContractSurrogate> 介面的實作。</span><span class="sxs-lookup"><span data-stu-id="cbe80-110">The following example shows an implementation of the <xref:System.Runtime.Serialization.IDataContractSurrogate> interface.</span></span> <span data-ttu-id="cbe80-111">這段程式碼會取代 `Person` 類別之 `PersonSurrogated` 型別的序列化。</span><span class="sxs-lookup"><span data-stu-id="cbe80-111">The code substitutes the serialization of the `Person` type for a `PersonSurrogated` class.</span></span>  
  
 [!code-csharp[IDataContractSurrogate#0](~/samples/snippets/csharp/VS_Snippets_CFX/idatacontractsurrogate/cs/source.cs#0)]
 [!code-vb[IDataContractSurrogate#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/idatacontractsurrogate/vb/source.vb#0)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ServiceModel.Description.DataContractSerializerOperationBehavior" />
    <altmember cref="T:System.Runtime.Serialization.XsdDataContractExporter" />
    <altmember cref="T:System.Runtime.Serialization.XsdDataContractImporter" />
  </Docs>
  <Members>
    <MemberGroup MemberName="GetCustomDataToExport">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="cbe80-112">在結構描述匯出作業期間，將附註插入至非 null 傳回值的結構描述。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbe80-112">During schema export operations, inserts annotations into the schema for non-null return values.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCustomDataToExport">
      <MemberSignature Language="C#" Value="public object GetCustomDataToExport (System.Reflection.MemberInfo memberInfo, Type dataContractType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetCustomDataToExport(class System.Reflection.MemberInfo memberInfo, class System.Type dataContractType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport(System.Reflection.MemberInfo,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetCustomDataToExport(System::Reflection::MemberInfo ^ memberInfo, Type ^ dataContractType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" />
        <Parameter Name="dataContractType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="memberInfo">
          <span data-ttu-id="cbe80-113">
            <see cref="T:System.Reflection.MemberInfo" />，描述成員。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbe80-113">A <see cref="T:System.Reflection.MemberInfo" /> that describes the member.</span>
          </span>
        </param>
        <param name="dataContractType">
          <span data-ttu-id="cbe80-114">
            <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbe80-114">A <see cref="T:System.Type" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cbe80-115">在結構描述匯出作業期間，將附註插入至非 null 傳回值的結構描述。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbe80-115">During schema export operations, inserts annotations into the schema for non-null return values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cbe80-116">物件，這個物件表示要插入至 XML 結構描述定義的附註。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbe80-116">An object that represents the annotation to be inserted into the XML schema definition.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCustomDataToExport">
      <MemberSignature Language="C#" Value="public object GetCustomDataToExport (Type clrType, Type dataContractType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetCustomDataToExport(class System.Type clrType, class System.Type dataContractType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport(System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCustomDataToExport (clrType As Type, dataContractType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetCustomDataToExport(Type ^ clrType, Type ^ dataContractType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clrType" Type="System.Type" />
        <Parameter Name="dataContractType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="clrType">
          <span data-ttu-id="cbe80-117">要取代的 CLR 型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbe80-117">The CLR type to be replaced.</span>
          </span>
        </param>
        <param name="dataContractType">
          <span data-ttu-id="cbe80-118">要加入標註的資料合約型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbe80-118">The data contract type to be annotated.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cbe80-119">在結構描述匯出作業期間，將附註插入至非 null 傳回值的結構描述。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbe80-119">During schema export operations, inserts annotations into the schema for non-null return values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cbe80-120">物件，這個物件表示要插入至 XML 結構描述定義的附註。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbe80-120">An object that represents the annotation to be inserted into the XML schema definition.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDataContractType">
      <MemberSignature Language="C#" Value="public Type GetDataContractType (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetDataContractType(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetDataContractType(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetDataContractType(Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="cbe80-121">要取代的 CLR 型別 <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbe80-121">The CLR type <see cref="T:System.Type" /> to substitute.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cbe80-122">在序列化、還原序列化，以及結構描述匯入和匯出期間，傳回要取代指定型別的資料合約型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbe80-122">During serialization, deserialization, and schema import and export, returns a data contract type that substitutes the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cbe80-123">要取代 <see cref="T:System.Type" /> 值的 <paramref name="type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbe80-123">The <see cref="T:System.Type" /> to substitute for the <paramref name="type" /> value.</span>
          </span>
          <span data-ttu-id="cbe80-124">這個型別必須由 <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> 進行序列化。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbe80-124">This type must be serializable by the <see cref="T:System.Runtime.Serialization.DataContractSerializer" />.</span>
          </span>
          <span data-ttu-id="cbe80-125">例如，它必須以 <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 屬性或序列化程式可辨識的其他機制加以標記。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbe80-125">For example, it must be marked with the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute or other mechanisms that the serializer recognizes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cbe80-126">下列範例會示範 <xref:System.Runtime.Serialization.IDataContractSurrogate.GetDataContractType%2A> 方法的實作。</span><span class="sxs-lookup"><span data-stu-id="cbe80-126">The following example shows an implementation of the <xref:System.Runtime.Serialization.IDataContractSurrogate.GetDataContractType%2A> method.</span></span>  
  
 [!code-csharp[IDataContractSurrogate#1](~/samples/snippets/csharp/VS_Snippets_CFX/idatacontractsurrogate/cs/source.cs#1)]
 [!code-vb[IDataContractSurrogate#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/idatacontractsurrogate/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeserializedObject">
      <MemberSignature Language="C#" Value="public object GetDeserializedObject (object obj, Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetDeserializedObject(object obj, class System.Type targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetDeserializedObject(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDeserializedObject (obj As Object, targetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetDeserializedObject(System::Object ^ obj, Type ^ targetType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="targetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="cbe80-127">要被取代的已還原序列化物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbe80-127">The deserialized object to be substituted.</span>
          </span>
        </param>
        <param name="targetType">
          <span data-ttu-id="cbe80-128">
            <see cref="T:System.Type" />，應該要指派給已取代物件的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbe80-128">The <see cref="T:System.Type" /> that the substituted object should be assigned to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cbe80-129">在還原序列化期間，傳回指定物件的替代物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbe80-129">During deserialization, returns an object that is a substitute for the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cbe80-130">已取代的已還原序列化物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbe80-130">The substituted deserialized object.</span>
          </span>
          <span data-ttu-id="cbe80-131">這個物件必須是由 <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> 序列化的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbe80-131">This object must be of a type that is serializable by the <see cref="T:System.Runtime.Serialization.DataContractSerializer" />.</span>
          </span>
          <span data-ttu-id="cbe80-132">例如，它必須以 <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 屬性或序列化程式可辨識的其他機制加以標記。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbe80-132">For example, it must be marked with the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute or other mechanisms that the serializer recognizes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cbe80-133">在簡單實作中，使用 if…then…else 控制結構來測試 `obj` 值是否為被替代的型別。</span><span class="sxs-lookup"><span data-stu-id="cbe80-133">In a simple implementation, use an if…then…else control structure to test whether the `obj` value is of the surrogated type.</span></span> <span data-ttu-id="cbe80-134">如果是的話，請依需要加以轉換並傳回已取代的物件。</span><span class="sxs-lookup"><span data-stu-id="cbe80-134">If so, transform it as necessary and return the substituted object.</span></span> <span data-ttu-id="cbe80-135">已取代的物件可能是新執行個體，或是相同的 `obj` 執行個體。</span><span class="sxs-lookup"><span data-stu-id="cbe80-135">The substituted object can be a new instance or the same `obj` instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cbe80-136">下列範例會示範 <xref:System.Runtime.Serialization.IDataContractSurrogate.GetDeserializedObject%2A> 方法的實作。</span><span class="sxs-lookup"><span data-stu-id="cbe80-136">The following example shows an implementation of the <xref:System.Runtime.Serialization.IDataContractSurrogate.GetDeserializedObject%2A> method.</span></span>  
  
 [!code-csharp[IDataContractSurrogate#3](~/samples/snippets/csharp/VS_Snippets_CFX/idatacontractsurrogate/cs/source.cs#3)]
 [!code-vb[IDataContractSurrogate#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/idatacontractsurrogate/vb/source.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetKnownCustomDataTypes">
      <MemberSignature Language="C#" Value="public void GetKnownCustomDataTypes (System.Collections.ObjectModel.Collection&lt;Type&gt; customDataTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetKnownCustomDataTypes(class System.Collections.ObjectModel.Collection`1&lt;class System.Type&gt; customDataTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetKnownCustomDataTypes(System.Collections.ObjectModel.Collection{System.Type})" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetKnownCustomDataTypes (customDataTypes As Collection(Of Type))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetKnownCustomDataTypes(System::Collections::ObjectModel::Collection&lt;Type ^&gt; ^ customDataTypes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="customDataTypes" Type="System.Collections.ObjectModel.Collection&lt;System.Type&gt;" />
      </Parameters>
      <Docs>
        <param name="customDataTypes">
          <span data-ttu-id="cbe80-137">
            <see cref="T:System.Type" /> 的 <see cref="T:System.Collections.ObjectModel.Collection`1" />，要在其中新增已知類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbe80-137">A <see cref="T:System.Collections.ObjectModel.Collection`1" /> of <see cref="T:System.Type" /> to add known types to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cbe80-138">設定已知型別的集合，以便用於自訂資料物件的序列化和還原序列化作業。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbe80-138">Sets the collection of known types to use for serialization and deserialization of the custom data objects.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cbe80-139">只有在使用 <xref:System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport%2A> 方法將附註插入至結構描述時，才需要在結構描述匯出或匯入期間使用這個方法。</span><span class="sxs-lookup"><span data-stu-id="cbe80-139">This method is required during schema export or schema import only if annotations are inserted into the schema using the <xref:System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObjectToSerialize">
      <MemberSignature Language="C#" Value="public object GetObjectToSerialize (object obj, Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetObjectToSerialize(object obj, class System.Type targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetObjectToSerialize(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetObjectToSerialize (obj As Object, targetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetObjectToSerialize(System::Object ^ obj, Type ^ targetType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="targetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="cbe80-140">要取代的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbe80-140">The object to substitute.</span>
          </span>
        </param>
        <param name="targetType">
          <span data-ttu-id="cbe80-141">
            <see cref="T:System.Type" />，應該要指派給已取代物件的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbe80-141">The <see cref="T:System.Type" /> that the substituted object should be assigned to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cbe80-142">在序列化期間，傳回取代指定物件的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbe80-142">During serialization, returns an object that substitutes the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cbe80-143">將序列化的已取代物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbe80-143">The substituted object that will be serialized.</span>
          </span>
          <span data-ttu-id="cbe80-144">這個物件必須由 <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> 進行序列化。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbe80-144">The object must be serializable by the <see cref="T:System.Runtime.Serialization.DataContractSerializer" />.</span>
          </span>
          <span data-ttu-id="cbe80-145">例如，它必須以 <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 屬性或序列化程式可辨識的其他機制加以標記。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbe80-145">For example, it must be marked with the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute or other mechanisms that the serializer recognizes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cbe80-146">這個方法必須傳回`null`因為在還原序列化時將資料轉換為類型<xref:System.Object>和<xref:System.InvalidCastException>就會擲回。</span><span class="sxs-lookup"><span data-stu-id="cbe80-146">This method must not return `null` because on deserialization the data will be cast to type <xref:System.Object> and an <xref:System.InvalidCastException> is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cbe80-147">下列範例會示範 <xref:System.Runtime.Serialization.IDataContractSurrogate.GetObjectToSerialize%2A> 方法的實作。</span><span class="sxs-lookup"><span data-stu-id="cbe80-147">The following example shows an implementation of the <xref:System.Runtime.Serialization.IDataContractSurrogate.GetObjectToSerialize%2A> method.</span></span>  
  
 [!code-csharp[IDataContractSurrogate#2](~/samples/snippets/csharp/VS_Snippets_CFX/idatacontractsurrogate/cs/source.cs#2)]
 [!code-vb[IDataContractSurrogate#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/idatacontractsurrogate/vb/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetReferencedTypeOnImport">
      <MemberSignature Language="C#" Value="public Type GetReferencedTypeOnImport (string typeName, string typeNamespace, object customData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetReferencedTypeOnImport(string typeName, string typeNamespace, object customData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetReferencedTypeOnImport(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetReferencedTypeOnImport (typeName As String, typeNamespace As String, customData As Object) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetReferencedTypeOnImport(System::String ^ typeName, System::String ^ typeNamespace, System::Object ^ customData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="typeNamespace" Type="System.String" />
        <Parameter Name="customData" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="cbe80-148">在結構描述中的型別名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbe80-148">The name of the type in schema.</span>
          </span>
        </param>
        <param name="typeNamespace">
          <span data-ttu-id="cbe80-149">在結構描述中的型別命名空間。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbe80-149">The namespace of the type in schema.</span>
          </span>
        </param>
        <param name="customData">
          <span data-ttu-id="cbe80-150">表示已插入至 XML 結構描述定義中之附註的物件，這個定義是可以用來尋找所參考類型的資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbe80-150">The object that represents the annotation inserted into the XML schema definition, which is data that can be used for finding the referenced type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cbe80-151">在結構描述匯入期間，傳回結構描述所參考的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbe80-151">During schema import, returns the type referenced by the schema.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cbe80-152">要用在所參考類型的 <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbe80-152">The <see cref="T:System.Type" /> to use for the referenced type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cbe80-153">如果不存在用來表示結構描述類型的 CLR 類型，就應該傳回 `Null`。</span><span class="sxs-lookup"><span data-stu-id="cbe80-153">`Null` should be returned if a CLR type does not exist for representing the schema type.</span></span> <span data-ttu-id="cbe80-154">這將導致在結構描述匯入期間產生新型別。</span><span class="sxs-lookup"><span data-stu-id="cbe80-154">This will cause a new type to be generated during schema import.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cbe80-155">下列範例會示範 <xref:System.Runtime.Serialization.IDataContractSurrogate.GetReferencedTypeOnImport%2A> 方法的實作。</span><span class="sxs-lookup"><span data-stu-id="cbe80-155">The following example shows an implementation of the <xref:System.Runtime.Serialization.IDataContractSurrogate.GetReferencedTypeOnImport%2A> method.</span></span>  
  
 [!code-csharp[IDataContractSurrogate#4](~/samples/snippets/csharp/VS_Snippets_CFX/idatacontractsurrogate/cs/source.cs#4)]
 [!code-vb[IDataContractSurrogate#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/idatacontractsurrogate/vb/source.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessImportedType">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeDeclaration ProcessImportedType (System.CodeDom.CodeTypeDeclaration typeDeclaration, System.CodeDom.CodeCompileUnit compileUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.CodeTypeDeclaration ProcessImportedType(class System.CodeDom.CodeTypeDeclaration typeDeclaration, class System.CodeDom.CodeCompileUnit compileUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.ProcessImportedType(System.CodeDom.CodeTypeDeclaration,System.CodeDom.CodeCompileUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Function ProcessImportedType (typeDeclaration As CodeTypeDeclaration, compileUnit As CodeCompileUnit) As CodeTypeDeclaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::CodeDom::CodeTypeDeclaration ^ ProcessImportedType(System::CodeDom::CodeTypeDeclaration ^ typeDeclaration, System::CodeDom::CodeCompileUnit ^ compileUnit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeDeclaration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeDeclaration" Type="System.CodeDom.CodeTypeDeclaration" />
        <Parameter Name="compileUnit" Type="System.CodeDom.CodeCompileUnit" />
      </Parameters>
      <Docs>
        <param name="typeDeclaration">
          <span data-ttu-id="cbe80-156">要處理的 <see cref="T:System.CodeDom.CodeTypeDeclaration" />，這個宣告表示在結構描述匯入期間所產生的型別宣告。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbe80-156">A <see cref="T:System.CodeDom.CodeTypeDeclaration" /> to process that represents the type declaration generated during schema import.</span>
          </span>
        </param>
        <param name="compileUnit">
          <span data-ttu-id="cbe80-157">
            <see cref="T:System.CodeDom.CodeCompileUnit" />，其中包含在結構描述匯入期間產生的其他程式碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbe80-157">The <see cref="T:System.CodeDom.CodeCompileUnit" /> that contains the other code generated during schema import.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cbe80-158">處理已從匯入之結構描述產生的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbe80-158">Processes the type that has been generated from the imported schema.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cbe80-159">
            <see cref="T:System.CodeDom.CodeTypeDeclaration" />，其中包含已處理的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cbe80-159">A <see cref="T:System.CodeDom.CodeTypeDeclaration" /> that contains the processed type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cbe80-160">使用者可以透過這個方法，修改已輸入 <xref:System.CodeDom.CodeTypeDeclaration> 或 <xref:System.CodeDom.CodeCompileUnit> 中的其他資訊。</span><span class="sxs-lookup"><span data-stu-id="cbe80-160">The input <xref:System.CodeDom.CodeTypeDeclaration> or other information in the <xref:System.CodeDom.CodeCompileUnit> can be modified by the user in this method.</span></span> <span data-ttu-id="cbe80-161">如果傳回 `null`，將會導致無法產生類型。</span><span class="sxs-lookup"><span data-stu-id="cbe80-161">If `null` is returned, it will cause the type to not be generated.</span></span> <span data-ttu-id="cbe80-162">如果傳回新的 <xref:System.CodeDom.CodeTypeDeclaration>，新的宣告將會取代已產生的原始類型。</span><span class="sxs-lookup"><span data-stu-id="cbe80-162">If a new <xref:System.CodeDom.CodeTypeDeclaration> is returned, it will replace the original type generated.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>