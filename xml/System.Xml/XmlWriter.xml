<Type Name="XmlWriter" FullName="System.Xml.XmlWriter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="95812f205b9870f283c0246150eb0ca30333cc98" />
    <Meta Name="ms.sourcegitcommit" Value="b15b8cf0f6dbc1504057c88969d9ef4b790891fe" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="05/11/2018" />
    <Meta Name="ms.locfileid" Value="34061907" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class XmlWriter : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit XmlWriter extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlWriter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class XmlWriter&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlWriter abstract : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>表示寫入器，其可提供快速、非快取的順向方法來產生含有 XML 資料之資料流或檔案。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlWriter>類別會將 XML 資料寫入資料流、 檔案、 文字讀取器或字串。 它支援 W3C[可延伸標記語言 (XML) 1.0 （第四版）](https://www.w3.org/TR/2006/REC-xml-20060816/)和[XML 1.0 中的命名空間 （第三個版本）](https://www.w3.org/TR/REC-xml-names/)建議。  
  
 成員<xref:System.Xml.XmlWriter>類別可讓您：  
  
-   驗證字元是否為合法 XML 字元，以及項目與屬性名稱是否為有效的 XML 名稱。  
  
-   驗證 XML 文件的格式是否正確。  
  
-   將二進位資料編碼為 Base64 或 BinHex，並寫出產生的文字。  
  
-   若要避免需要手動執行值的轉換，而不是字串，使用 common language runtime 類型傳遞值。  
  
-   將多份文件寫至一個輸出資料流。  
  
-   寫入有效的名稱、限定名稱，以及名稱語彙基元。  
  
 本節內容：  
  
 [建立 XML 寫入器](#create)   
 [指定的輸出格式](#output)   
 [資料一致性](#conformance)   
 [寫入項目](#writing_elements)   
 [寫入屬性](#writing_attributes)   
 [處理命名空間](#handling_ns)   
 [寫入具型別資料](#writing_types)   
 [關閉的 XML 寫入器](#close)   
 [非同步程式設計](#async)   
 [安全性考量](#security)  
  
<a name="create"></a>   
## <a name="creating-an-xml-writer"></a>建立 XML 寫入器  
 若要建立<xref:System.Xml.XmlWriter>執行個體，使用<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>方法。 指定您想要的 XML 寫入器上啟用的功能的設定，傳遞<xref:System.Xml.XmlWriterSettings>至<xref:System.Xml.XmlWriter.Create%2A>方法。 否則，會使用預設設定。 請參閱<xref:System.Xml.XmlWriter.Create%2A>參考頁面的詳細資料。  
  
<a name="output"></a>   
## <a name="specifying-the-output-format"></a>指定的輸出格式  
 <xref:System.Xml.XmlWriterSettings>類別包含數個屬性可控制如何<xref:System.Xml.XmlWriter>輸出格式：  
  
|屬性|描述|  
|--------------|-----------------|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|指定要使用的文字編碼方式。 預設值為 `Encoding.UTF8`。|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|表示是否縮排項目。 預設值是`false`（沒有縮排）。|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|指定縮排時要使用的字元字串。 預設值為兩個空格。|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|指定用於分行符號的字元字串。 預設值為 `\r\n` (歸位字元、換行字元)。|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|指定如何處理新行字元。|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|表示是否要在新行上寫入屬性。 使用此屬性時，應將 <xref:System.Xml.XmlWriterSettings.Indent%2A> 設為 `true`。 預設值為 `false`。|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|表示是否撰寫 XML 宣告。 預設值為 `false`。|  
  
 <xref:System.Xml.XmlWriterSettings.Indent%2A> 及 <xref:System.Xml.XmlWriterSettings.IndentChars%2A> 屬性控制如何格式化非顯著泛空白字元。 例如，若要縮排元素節點：  
  
 [!code-csharp[XmlWriter_v2#8](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#8)]
 [!code-vb[XmlWriter_v2#8](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#8)]  
  
 使用<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>利用縮排一個額外層級的新行上撰寫每個屬性：  
  
 [!code-csharp[XmlWriter_v2#9](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#9)]
 [!code-vb[XmlWriter_v2#9](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#9)]  
  
<a name="conformance"></a>   
## <a name="data-conformance"></a>資料一致性  
 XML 寫入器會使用兩個屬性，從<xref:System.Xml.XmlWriterSettings>資料一致性檢查的類別：  
  
-   <xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>屬性會指示檢查的字元，而且會擲回的 XML 寫入器<xref:System.Xml.XmlException>如果任何字元都是在合法的範圍之外，如 W3C 所定義的例外狀況。  
  
-   <xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>屬性會設定要檢查正在寫入的資料流符合規則的語式正確的 XML 1.0 文件或文件片段，如 W3C 所定義的 XML 寫入器。 下表中詳述的三個一致性層級。 預設值為 <xref:System.Xml.ConformanceLevel.Document>。 如需詳細資訊，請參閱<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A?displayProperty=nameWithType>屬性和<xref:System.Xml.ConformanceLevel?displayProperty=nameWithType>列舉型別。  
  
    |層級|描述|  
    |-----------|-----------------|  
    |<xref:System.Xml.ConformanceLevel.Document>|XML 輸出符合格式正確的 XML 1.0 版文件的規則，而且可以由任何合格的處理器來處理。|  
    |<xref:System.Xml.ConformanceLevel.Fragment>|XML 輸出符合格式正確的 XML 1.0 版文件片段的規則。|  
    |<xref:System.Xml.ConformanceLevel.Auto>|XML 寫入器會決定包含要套用檢查 （文件或片段） 根據內送資料的層級。|  
  
<a name="writing_elements"></a>   
## <a name="writing-elements"></a>寫入項目  
 您可以使用下列<xref:System.Xml.XmlWriter>方法來寫入項目節點。 如需範例，請參閱所列的方法。  
  
|使用|以|  
|---------|--------|  
|<xref:System.Xml.XmlWriter.WriteElementString%2A>|編寫整個項目節點，其中包括字串值。|  
|<xref:System.Xml.XmlWriter.WriteStartElement%2A>|若要使用多個方法呼叫，以寫入項目值。  例如，您可以呼叫 <xref:System.Xml.XmlWriter.WriteValue%2A> 寫入具型別值、呼叫 <xref:System.Xml.XmlWriter.WriteCharEntity%2A> 寫入字元實體、呼叫 <xref:System.Xml.XmlWriter.WriteAttributeString%2A> 寫入屬性，或者可以寫入項目子系。 這是更趨精密完美的版本<xref:System.Xml.XmlWriter.WriteElementString%2A>方法。<br /><br /> 若要關閉項目，請呼叫<xref:System.Xml.XmlWriter.WriteEndElement%2A>或<xref:System.Xml.XmlWriter.WriteFullEndElement%2A>方法。|  
|<xref:System.Xml.XmlWriter.WriteNode%2A>|若要複製項目節點的目前位置找到<xref:System.Xml.XmlReader>或<xref:System.Xml.XPath.XPathNavigator>物件。 呼叫此方法時，它會將來源物件中的所有內容複製到 <xref:System.Xml.XmlWriter> 執行個體。|  
  
<a name="writing_attributes"></a>   
## <a name="writing-attributes"></a>寫入屬性  
 您可以使用下列<xref:System.Xml.XmlWriter>方法來寫入項目節點上的屬性。 這些方法也可用來建立命名空間宣告項目，在下一節中所述。  
  
|使用|以|  
|---------|--------|  
|<xref:System.Xml.XmlWriter.WriteAttributeString%2A>|要寫入整個屬性節點，其中包括字串值。|  
|<xref:System.Xml.XmlWriter.WriteStartAttribute%2A>|若要撰寫使用多個方法呼叫的屬性值。 例如，您可以呼叫<xref:System.Xml.XmlWriter.WriteValue%2A>寫入具類型的值。 這是更趨精密完美的版本<xref:System.Xml.XmlWriter.WriteElementString%2A>方法。<br /><br /> 若要關閉項目，請呼叫<xref:System.Xml.XmlWriter.WriteEndAttribute%2A>方法。|  
|<xref:System.Xml.XmlWriter.WriteAttributes%2A>|若要在目前的位置找到的所有屬性都複製<xref:System.Xml.XmlReader>物件。 寫入的屬性取決於讀取器目前所在的節點的類型：<br /><br /> -若為屬性節點，它會將目前的屬性，然後其餘屬性寫入結尾標記的項目之前。<br />-若為項目節點，它會寫入元素所包含的所有屬性。<br />-若為 XML 宣告節點，它會寫入所有屬性宣告中。<br />-若為所有其他節點型別，方法會擲回例外狀況。|  
  
<a name="handling_ns"></a>   
## <a name="handling-namespaces"></a>處理命名空間  
 命名空間用於對 XML 文件中的項目與屬性名稱進行限定。 命名空間前置詞將關聯的命名空間，而接著相關聯的 URI 參考的項目和屬性。 命名空間會在 XML 文件中建立項目和屬性名稱唯一性。  
  
 <xref:System.Xml.XmlWriter>維護命名空間堆疊，對應至目前的命名空間範圍中定義的所有命名空間。 當寫入項目及屬性時，可透過下列方式利用命名空間：  
  
-   宣告命名空間，以手動方式使用<xref:System.Xml.XmlWriter.WriteAttributeString%2A>方法。 當知道如何最佳化命名空間宣告數目時，這便會很有用。 如需範例，請參閱<xref:System.Xml.XmlWriter.WriteAttributeString%28System.String%2CSystem.String%2CSystem.String%2CSystem.String%29>方法。  
  
-   使用新的命名空間覆寫目前的命名空間宣告。 下列程式碼，<xref:System.Xml.XmlWriter.WriteAttributeString%2A>方法變更命名空間 URI 的`"x"`前置詞`"123"`至`"abc"`。  
  
     [!code-csharp[XmlWriter_v2#18](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#18)]
     [!code-vb[XmlWriter_v2#18](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#18)]  
  
     程式碼會產生下列 XML 字串：  
  
    ```xml  
    <x:root xmlns:x="123">  
      <item xmlns:x="abc" />  
    </x:root>  
    ```  
  
-   寫入屬性或項目時，指定命名空間前置詞。 許多用來寫入項目和屬性的方法可讓您執行這項操作。 例如，<xref:System.Xml.XmlWriter.WriteStartElement%28System.String%2CSystem.String%2CSystem.String%29>方法寫入的開頭標記，並將它與指定的命名空間與前置詞產生關聯。  
  
<a name="writing_types"></a>   
## <a name="writing-typed-data"></a>寫入具型別資料  
 <xref:System.Xml.XmlWriter.WriteValue%2A>方法可接受的 common language runtime (CLR) 物件、 將輸入的值轉換為其字串表示，根據 XML 結構描述定義語言 (XSD) 資料類型轉換規則，並將它編寫寫入使用<xref:System.Xml.XmlWriter.WriteString%2A>方法。 這是比使用中的方法更容易<xref:System.Xml.XmlConvert>類別，以寫出之前，將具類型的資料轉換成字串值。  
  
 寫入文字，具類型的值序列化為文字使用<xref:System.Xml.XmlConvert>該結構描述類型的規則。  
  
 預設 XSD 資料型別對應至 CLR 型別，請參閱<xref:System.Xml.XmlWriter.WriteValue%2A>方法。  
  
 <xref:System.Xml.XmlWriter>也可用來寫入 XML 資料存放區。 例如，<xref:System.Xml.XPath.XPathNavigator> 類別可以建立 <xref:System.Xml.XmlWriter> 物件，以建立 <xref:System.Xml.XmlDocument> 物件的節點。 如果資料存放區的結構描述資訊可用，<xref:System.Xml.XmlWriter.WriteValue%2A>方法擲回例外狀況，如果您嘗試轉換成不允許的類型。如果資料存放區並沒有結構描述資訊提供給它，<xref:System.Xml.XmlWriter.WriteValue%2A>方法會將所有的值視為`xsd:anySimpleType`型別。  
  
<a name="close"></a>   
## <a name="closing-the-xml-writer"></a>關閉的 XML 寫入器  
 當您使用<xref:System.Xml.XmlWriter>輸出 XML 的元素和屬性的方法不會寫入，直到您呼叫<xref:System.Xml.XmlWriter.Close%2A>方法。 例如，如果您使用<xref:System.Xml.XmlWriter>填入<xref:System.Xml.XmlDocument>物件，您將無法看到寫入的元素和屬性的目標文件中，直到您關閉<xref:System.Xml.XmlWriter>執行個體。  
  
<a name="async"></a>   
## <a name="asynchronous-programming"></a>非同步程式設計  
 大部分的<xref:System.Xml.XmlWriter>方法都有非同步的對應具有"Async"結尾的方法名稱。 例如，非同步的對等<xref:System.Xml.XmlWriter.WriteAttributeString%2A>是<xref:System.Xml.XmlWriter.WriteAttributeStringAsync%2A>。  
  
 如<xref:System.Xml.XmlWriter.WriteValue%2A>方法，沒有非同步的對應項目，將傳回的值轉換為字串，然後再使用<xref:System.Xml.XmlWriter.WriteStringAsync%2A>方法改為。  
  
<a name="security"></a>   
## <a name="security-considerations"></a>安全性考量  
 使用時，請考慮下列<xref:System.Xml.XmlWriter>類別：  
  
-   擲回例外狀況<xref:System.Xml.XmlWriter>可以揭露您不想要的路徑資訊反昇至應用程式。 您的應用程式必須捕捉例外狀況，並予以適當處理。  
  
-   <xref:System.Xml.XmlWriter> 不會驗證傳遞至任何資料<xref:System.Xml.XmlWriter.WriteDocType%2A>或<xref:System.Xml.XmlWriter.WriteRaw%2A>方法。 您不應該對這些方法傳遞任意資料。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用非同步 API 來產生 XML。  
  
```csharp  
async Task TestWriter(Stream stream)   
{  
    XmlWriterSettings settings = new XmlWriterSettings();  
    settings.Async = true;  
  
    using (XmlWriter writer = XmlWriter.Create(stream, settings)) {  
        await writer.WriteStartElementAsync("pf", "root", "http://ns");  
        await writer.WriteStartElementAsync(null, "sub", null);  
        await writer.WriteAttributeStringAsync(null, "att", null, "val");  
        await writer.WriteStringAsync("text");  
        await writer.WriteEndElementAsync();  
        await writer.WriteProcessingInstructionAsync("pName", "pValue");  
        await writer.WriteCommentAsync("cValue");  
        await writer.WriteCDataAsync("cdata value");  
        await writer.WriteEndElementAsync();  
        await writer.FlushAsync();  
    }  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XmlWriter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XmlWriter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Xml.XmlWriter" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public virtual void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在衍生類別中覆寫時，關閉這個資料流和基礎資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 自動關閉任何項目或屬性保持開啟狀態。  
  
> [!NOTE]
>  當您使用<xref:System.Xml.XmlWriter>將不會寫入到輸出 XML 的元素和屬性的方法，直到您呼叫<xref:System.Xml.XmlWriter.Close%2A>方法。 例如，如果您要使用 XmlWriter 填入<xref:System.Xml.XmlDocument>，除非您關閉<xref:System.Xml.XmlWriter>，不能觀察目標文件中的屬性與寫入的項目。  
  
   
  
## Examples  
 下列範例會寫入 XML 節點。  
  
 [!code-cpp[XmlWriter.Close#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.Close/CPP/XmlWriter.Close.cpp#1)]
 [!code-csharp[XmlWriter.Close#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.Close/CS/writeelems.cs#1)]
 [!code-vb[XmlWriter.Close#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.Close/VB/writeelems.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Create">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>建立新的 <see cref="T:System.Xml.XmlWriter" /> 執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 部分<xref:System.Xml.XmlWriter.Create%2A>多載包括`settings`參數可接受<xref:System.Xml.XmlWriterSettings>物件。 您可以使用此物件來：  
  
-   指定要在建立支援哪些功能<xref:System.Xml.XmlWriter>物件。  
  
-   重複使用<xref:System.Xml.XmlWriterSettings>物件來建立多個寫入器物件。 複製每個已建立之寫入器的 <xref:System.Xml.XmlWriterSettings> 物件，並標示為唯讀。 對 <xref:System.Xml.XmlWriterSettings> 執行個體上設定的變更不會影響具有相同設定的現有寫入器。 因此，您可以使用相同設定來建立具有相同功能的多個寫入器。 或者，您可以修改 <xref:System.Xml.XmlWriterSettings> 執行個體上的設定，並建立具有一組不同功能的新寫入器。  
  
-   將功能加入現有的 XML 寫入器。 <xref:System.Xml.XmlWriter.Create%2A> 方法可以接受其他 <xref:System.Xml.XmlWriter> 物件。 基礎<xref:System.Xml.XmlWriter>物件沒有建立靜態的 XML 寫入器<xref:System.Xml.XmlWriter.Create%2A>方法。 例如，您可以指定要加入其他功能的使用者定義 XML 寫入器。  
  
-   充分利用功能較佳的一致性檢查和相容性，例如[XML 1.0 版建議事項](https://www.w3.org/TR/2006/REC-xml-20060816/)只上可用的<xref:System.Xml.XmlWriter>建立由靜態物件<xref:System.Xml.XmlWriter.Create%2A>方法。  
  
 如果您使用<xref:System.Xml.XmlWriter.Create%2A>不接受的多載<xref:System.Xml.XmlWriterSettings>物件時，會使用下列預設寫入器設定：  
  
|設定|預設|  
|-------------|-------------|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|<xref:System.Text.Encoding.UTF8?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|兩個空格|  
|<xref:System.Xml.XmlWriterSettings.NamespaceHandling%2A>|<xref:System.Xml.NamespaceHandling.Default> （不移除）|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n` (歸位字元，新行)|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OutputMethod%2A>|<xref:System.Xml.XmlOutputMethod.Xml?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`|  
  
> [!NOTE]
>  雖然.NET Framework 包含<xref:System.Xml.XmlTextWriter>類別，是具象實作的<xref:System.Xml.XmlWriter>類別，建議您建立<xref:System.Xml.XmlWriter>所使用的執行個體<xref:System.Xml.XmlWriter.Create%2A>方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.IO.Stream output);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.IO.Stream output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (output As Stream) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlWriter ^ Create(System::IO::Stream ^ output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="output">要寫入其中的資料流。 <see cref="T:System.Xml.XmlWriter" /> 會寫入 XML 1.0 文字語法，並將其附加至指定的資料流。</param>
        <summary>使用指定的資料流，建立新的 <see cref="T:System.Xml.XmlWriter" /> 執行個體。</summary>
        <returns>
          <see cref="T:System.Xml.XmlWriter" /> 物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當您使用這個多載，<xref:System.Xml.XmlWriterSettings>物件，使用下列預設設定用來建立 XML 寫入器：  
  
|設定|預設|  
|-------------|-------------|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|<xref:System.Text.Encoding.UTF8?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|兩個空格|  
|<xref:System.Xml.XmlWriterSettings.NamespaceHandling%2A>|<xref:System.Xml.NamespaceHandling.Default> （不移除）|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n` (歸位字元，新行)|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OutputMethod%2A>|<xref:System.Xml.XmlOutputMethod.Xml?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`|  
  
 如果您想要指定要在建立的寫入器上支援的功能，使用多載採用<xref:System.Xml.XmlWriterSettings>物件做為其引數，其中，並傳入<xref:System.Xml.XmlWriterSettings>物件的自訂設定。  
  
 此外，XmlWriter 一律會寫入位元組順序標記 (BOM) 到基礎資料流。不過，某些資料流必須不會有 BOM。 若要省略 BOM，建立新<xref:System.Xml.XmlWriterSettings>物件，並設定新的編碼屬性<xref:System.Text.UTF8Encoding>物件建構函式設為 false 的布林值。  
  
   
  
## Examples  
 下列範例會將 XML 片段寫入記憶體資料流。 (它會使用<xref:System.Xml.XmlWriter.Create%28System.IO.Stream%2CSystem.Xml.XmlWriterSettings%29>多載，也會設定設定新的 XML 寫入器執行個體上。)  
  
 [!code-csharp[XmlWriterSettings.CloseOutput#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> 值為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (output As TextWriter) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlWriter ^ Create(System::IO::TextWriter ^ output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="output">要寫入至其中的 <see cref="T:System.IO.TextWriter" />。 <see cref="T:System.Xml.XmlWriter" /> 會寫入 XML 1.0 文字語法，並將其附加至指定的 <see cref="T:System.IO.TextWriter" />。</param>
        <summary>使用指定的 <see cref="T:System.Xml.XmlWriter" />，建立新 <see cref="T:System.IO.TextWriter" /> 執行個體。</summary>
        <returns>
          <see cref="T:System.Xml.XmlWriter" /> 物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當您使用這個多載，<xref:System.Xml.XmlWriterSettings>物件以預設設定用來建立 XML 寫入器。  
  
|設定|預設|  
|-------------|-------------|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|<xref:System.Text.Encoding.UTF8?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|兩個空格|  
|<xref:System.Xml.XmlWriterSettings.NamespaceHandling%2A>|<xref:System.Xml.NamespaceHandling.Default> （不移除）|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n` (歸位字元，新行)|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OutputMethod%2A>|<xref:System.Xml.XmlOutputMethod.Xml?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`|  
  
 如果您想要指定要在建立的寫入器上支援的功能，使用多載採用<xref:System.Xml.XmlWriterSettings>物件做為其引數，其中，並傳入<xref:System.Xml.XmlWriterSettings>物件的自訂設定。  
  
   
  
## Examples  
 下列範例會建立輸出至主控台的寫入器。  
  
 [!code-csharp[XmlWriter_v2#3](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#3)]
 [!code-vb[XmlWriter_v2#3](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="text" /> 值為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (string outputFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(string outputFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (outputFileName As String) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlWriter ^ Create(System::String ^ outputFileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outputFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="outputFileName">要寫入其中的檔案。 <see cref="T:System.Xml.XmlWriter" /> 會於指定路徑建立檔案，並在 XML 1.0 文字語法中寫入它。 <c>outputFileName</c> 必須是檔案系統路徑。</param>
        <summary>使用指定的檔名，建立新 <see cref="T:System.Xml.XmlWriter" /> 執行個體。</summary>
        <returns>
          <see cref="T:System.Xml.XmlWriter" /> 物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當您使用這個多載，<xref:System.Xml.XmlWriterSettings>物件以預設設定用來建立 XML 寫入器。  
  
|設定|預設|  
|-------------|-------------|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|<xref:System.Text.Encoding.UTF8?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|兩個空格|  
|<xref:System.Xml.XmlWriterSettings.NamespaceHandling%2A>|<xref:System.Xml.NamespaceHandling.Default> （不移除）|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n` (歸位字元，新行)|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OutputMethod%2A>|<xref:System.Xml.XmlOutputMethod.Xml?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`|  
  
 如果您想要指定要建立的 XML 寫入器上支援的功能，使用多載採用<xref:System.Xml.XmlWriterSettings>物件做為其引數，其中，並傳入<xref:System.Xml.XmlWriterSettings>物件的自訂設定。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Xml.XmlWriter>物件，並寫入書籍節點。  
  
 [!code-csharp[XmlWriter_v2#2](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#2)]
 [!code-vb[XmlWriter_v2#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="url" /> 值為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.Text.StringBuilder output);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.Text.StringBuilder output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.Text.StringBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (output As StringBuilder) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlWriter ^ Create(System::Text::StringBuilder ^ output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.Text.StringBuilder" />
      </Parameters>
      <Docs>
        <param name="output">要寫入至其中的 <see cref="T:System.Text.StringBuilder" />。 <see cref="T:System.Xml.XmlWriter" /> 寫入的內容會附加至 <see cref="T:System.Text.StringBuilder" />。</param>
        <summary>使用指定的 <see cref="T:System.Xml.XmlWriter" />，建立新 <see cref="T:System.Text.StringBuilder" /> 執行個體。</summary>
        <returns>
          <see cref="T:System.Xml.XmlWriter" /> 物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當您使用這個多載，<xref:System.Xml.XmlWriterSettings>物件以預設設定用來建立 XML 寫入器。  
  
|設定|預設|  
|-------------|-------------|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|<xref:System.Text.Encoding.UTF8?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|兩個空格|  
|<xref:System.Xml.XmlWriterSettings.NamespaceHandling%2A>|<xref:System.Xml.NamespaceHandling.Default> （不移除）|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n` (歸位字元，新行)|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OutputMethod%2A>|<xref:System.Xml.XmlOutputMethod.Xml?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`|  
  
 如果您想要指定要建立的 XML 寫入器上支援的功能，使用多載採用<xref:System.Xml.XmlWriterSettings>物件做為其引數，其中，並傳入<xref:System.Xml.XmlWriterSettings>物件的自訂設定。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="builder" /> 值為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.Xml.XmlWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.Xml.XmlWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (output As XmlWriter) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlWriter ^ Create(System::Xml::XmlWriter ^ output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="output">您想要當做基礎寫入器使用的 <see cref="T:System.Xml.XmlWriter" /> 物件。</param>
        <summary>使用指定的 <see cref="T:System.Xml.XmlWriter" /> 物件，建立新 <see cref="T:System.Xml.XmlWriter" /> 執行個體。</summary>
        <returns>
          <see cref="T:System.Xml.XmlWriter" /> 物件，包裝於指定的 <see cref="T:System.Xml.XmlWriter" /> 物件附近。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法可讓您將功能加入基礎<xref:System.Xml.XmlWriter>物件。 基礎<xref:System.Xml.XmlWriter>物件可以是所建立的物件<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>方法或使用建立的物件<xref:System.Xml.XmlTextWriter>實作。  
  
 當您使用這個多載，<xref:System.Xml.XmlWriterSettings>物件以預設設定用來建立 XML 寫入器。  
  
|設定|預設|  
|-------------|-------------|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|<xref:System.Text.Encoding.UTF8?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|兩個空格|  
|<xref:System.Xml.XmlWriterSettings.NamespaceHandling%2A>|<xref:System.Xml.NamespaceHandling.Default> （不移除）|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n` (歸位字元，新行)|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OutputMethod%2A>|<xref:System.Xml.XmlOutputMethod.Xml?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`|  
  
 如果您想要指定要建立的 XML 寫入器上支援的功能，使用多載採用<xref:System.Xml.XmlWriterSettings>物件做為其引數，其中，並傳入<xref:System.Xml.XmlWriterSettings>物件的自訂設定。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="writer" /> 值為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.IO.Stream output, System.Xml.XmlWriterSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.IO.Stream output, class System.Xml.XmlWriterSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.IO.Stream,System.Xml.XmlWriterSettings)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (output As Stream, settings As XmlWriterSettings) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlWriter ^ Create(System::IO::Stream ^ output, System::Xml::XmlWriterSettings ^ settings);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.IO.Stream" />
        <Parameter Name="settings" Type="System.Xml.XmlWriterSettings" />
      </Parameters>
      <Docs>
        <param name="output">要寫入其中的資料流。 <see cref="T:System.Xml.XmlWriter" /> 會寫入 XML 1.0 文字語法，並將其附加至指定的資料流。</param>
        <param name="settings">用於設定新 <see cref="T:System.Xml.XmlWriterSettings" /> 執行個體的 <see cref="T:System.Xml.XmlWriter" /> 物件。 如果是 <see langword="null" />，則會使用有預設值的 <see cref="T:System.Xml.XmlWriterSettings" />。  
  
 如果 <see cref="T:System.Xml.XmlWriter" /> 正配合 <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" /> 方法使用，您應該使用 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 屬性，以取得有正確設定的 <see cref="T:System.Xml.XmlWriterSettings" /> 物件。 如此可確保所建立的 <see cref="T:System.Xml.XmlWriter" /> 物件具有正確的輸出設定。</param>
        <summary>使用資料流和 <see cref="T:System.Xml.XmlWriter" /> 物件，建立新 <see cref="T:System.Xml.XmlWriterSettings" /> 執行個體。</summary>
        <returns>
          <see cref="T:System.Xml.XmlWriter" /> 物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XmlWriter 一律將位元組順序標記 (BOM) 寫入至基礎資料流。不過，某些資料流必須不會有 BOM。 若要省略 BOM，建立新<xref:System.Xml.XmlWriterSettings>物件，並設定新的編碼屬性<xref:System.Text.UTF8Encoding>物件建構函式設為 false 的布林值。  
  
   
  
## Examples  
 下列範例會將 XML 片段寫入記憶體資料流。  
  
 [!code-csharp[XmlWriterSettings.CloseOutput#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> 值為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.IO.TextWriter output, System.Xml.XmlWriterSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.IO.TextWriter output, class System.Xml.XmlWriterSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.IO.TextWriter,System.Xml.XmlWriterSettings)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (output As TextWriter, settings As XmlWriterSettings) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlWriter ^ Create(System::IO::TextWriter ^ output, System::Xml::XmlWriterSettings ^ settings);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.IO.TextWriter" />
        <Parameter Name="settings" Type="System.Xml.XmlWriterSettings" />
      </Parameters>
      <Docs>
        <param name="output">要寫入至其中的 <see cref="T:System.IO.TextWriter" />。 <see cref="T:System.Xml.XmlWriter" /> 會寫入 XML 1.0 文字語法，並將其附加至指定的 <see cref="T:System.IO.TextWriter" />。</param>
        <param name="settings">用於設定新 <see cref="T:System.Xml.XmlWriterSettings" /> 執行個體的 <see cref="T:System.Xml.XmlWriter" /> 物件。 如果是 <see langword="null" />，則會使用有預設值的 <see cref="T:System.Xml.XmlWriterSettings" />。  
  
 如果 <see cref="T:System.Xml.XmlWriter" /> 正配合 <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" /> 方法使用，您應該使用 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 屬性，以取得有正確設定的 <see cref="T:System.Xml.XmlWriterSettings" /> 物件。 如此可確保所建立的 <see cref="T:System.Xml.XmlWriter" /> 物件具有正確的輸出設定。</param>
        <summary>使用 <see cref="T:System.Xml.XmlWriter" /> 和 <see cref="T:System.IO.TextWriter" /> 物件，建立新的 <see cref="T:System.Xml.XmlWriterSettings" /> 執行個體。</summary>
        <returns>
          <see cref="T:System.Xml.XmlWriter" /> 物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例會寫出 XML 字串。  
  
 [!code-csharp[XmlWriter_v2#4](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#4)]
 [!code-vb[XmlWriter_v2#4](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="text" /> 值為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (string outputFileName, System.Xml.XmlWriterSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(string outputFileName, class System.Xml.XmlWriterSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.String,System.Xml.XmlWriterSettings)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (outputFileName As String, settings As XmlWriterSettings) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlWriter ^ Create(System::String ^ outputFileName, System::Xml::XmlWriterSettings ^ settings);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outputFileName" Type="System.String" />
        <Parameter Name="settings" Type="System.Xml.XmlWriterSettings" />
      </Parameters>
      <Docs>
        <param name="outputFileName">要寫入其中的檔案。 <see cref="T:System.Xml.XmlWriter" /> 會於指定路徑建立檔案，並在 XML 1.0 文字語法中寫入它。 <c>outputFileName</c> 必須是檔案系統路徑。</param>
        <param name="settings">用於設定新 <see cref="T:System.Xml.XmlWriterSettings" /> 執行個體的 <see cref="T:System.Xml.XmlWriter" /> 物件。 如果是 <see langword="null" />，則會使用有預設值的 <see cref="T:System.Xml.XmlWriterSettings" />。  
  
 如果 <see cref="T:System.Xml.XmlWriter" /> 正配合 <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" /> 方法使用，您應該使用 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 屬性，以取得有正確設定的 <see cref="T:System.Xml.XmlWriterSettings" /> 物件。 如此可確保所建立的 <see cref="T:System.Xml.XmlWriter" /> 物件具有正確的輸出設定。</param>
        <summary>使用檔名和 <see cref="T:System.Xml.XmlWriter" /> 物件，建立新 <see cref="T:System.Xml.XmlWriterSettings" /> 執行個體。</summary>
        <returns>
          <see cref="T:System.Xml.XmlWriter" /> 物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例會建立<xref:System.Xml.XmlWriter>物件定義的設定。  
  
 [!code-csharp[XmlWriterSettings.Indent#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.Indent/CS/writeindent.cs#1)]
 [!code-vb[XmlWriterSettings.Indent#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.Indent/VB/writeindent.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="url" /> 值為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.Text.StringBuilder output, System.Xml.XmlWriterSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.Text.StringBuilder output, class System.Xml.XmlWriterSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.Text.StringBuilder,System.Xml.XmlWriterSettings)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (output As StringBuilder, settings As XmlWriterSettings) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlWriter ^ Create(System::Text::StringBuilder ^ output, System::Xml::XmlWriterSettings ^ settings);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.Text.StringBuilder" />
        <Parameter Name="settings" Type="System.Xml.XmlWriterSettings" />
      </Parameters>
      <Docs>
        <param name="output">要寫入至其中的 <see cref="T:System.Text.StringBuilder" />。 <see cref="T:System.Xml.XmlWriter" /> 寫入的內容會附加至 <see cref="T:System.Text.StringBuilder" />。</param>
        <param name="settings">用於設定新 <see cref="T:System.Xml.XmlWriterSettings" /> 執行個體的 <see cref="T:System.Xml.XmlWriter" /> 物件。 如果是 <see langword="null" />，則會使用有預設值的 <see cref="T:System.Xml.XmlWriterSettings" />。  
  
 如果 <see cref="T:System.Xml.XmlWriter" /> 正配合 <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" /> 方法使用，您應該使用 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 屬性，以取得有正確設定的 <see cref="T:System.Xml.XmlWriterSettings" /> 物件。 如此可確保所建立的 <see cref="T:System.Xml.XmlWriter" /> 物件具有正確的輸出設定。</param>
        <summary>使用 <see cref="T:System.Xml.XmlWriter" /> 和 <see cref="T:System.Text.StringBuilder" /> 物件，建立新的 <see cref="T:System.Xml.XmlWriterSettings" /> 執行個體。</summary>
        <returns>
          <see cref="T:System.Xml.XmlWriter" /> 物件。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="builder" /> 值為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.Xml.XmlWriter output, System.Xml.XmlWriterSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.Xml.XmlWriter output, class System.Xml.XmlWriterSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.Xml.XmlWriter,System.Xml.XmlWriterSettings)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (output As XmlWriter, settings As XmlWriterSettings) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlWriter ^ Create(System::Xml::XmlWriter ^ output, System::Xml::XmlWriterSettings ^ settings);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.Xml.XmlWriter" />
        <Parameter Name="settings" Type="System.Xml.XmlWriterSettings" />
      </Parameters>
      <Docs>
        <param name="output">您想要當做基礎寫入器使用的 <see cref="T:System.Xml.XmlWriter" /> 物件。</param>
        <param name="settings">用於設定新 <see cref="T:System.Xml.XmlWriterSettings" /> 執行個體的 <see cref="T:System.Xml.XmlWriter" /> 物件。 如果是 <see langword="null" />，則會使用有預設值的 <see cref="T:System.Xml.XmlWriterSettings" />。  
  
 如果 <see cref="T:System.Xml.XmlWriter" /> 正配合 <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" /> 方法使用，您應該使用 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 屬性，以取得有正確設定的 <see cref="T:System.Xml.XmlWriterSettings" /> 物件。 如此可確保所建立的 <see cref="T:System.Xml.XmlWriter" /> 物件具有正確的輸出設定。</param>
        <summary>使用指定的 <see cref="T:System.Xml.XmlWriter" /> 和 <see cref="T:System.Xml.XmlWriter" /> 物件，建立新的 <see cref="T:System.Xml.XmlWriterSettings" /> 執行個體。</summary>
        <returns>
          <see cref="T:System.Xml.XmlWriter" /> 物件，包裝於指定的 <see cref="T:System.Xml.XmlWriter" /> 物件附近。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法可讓您將其他功能加入基礎<xref:System.Xml.XmlWriter>物件。 基礎<xref:System.Xml.XmlWriter>物件可以是所建立的物件<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>方法或使用建立的物件<xref:System.Xml.XmlTextWriter>實作。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="writer" /> 值為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回包含「非同步作業已經在進行中」訊息的 <see cref="T:System.InvalidOperationException" />。</exception>
        <summary>釋放 <see cref="T:System.Xml.XmlWriter" /> 類別所使用的資源。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將 <see cref="T:System.Xml.XmlWriter" /> 類別目前的執行個體所使用的資源全部釋出。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
        <summary>釋放 <see cref="T:System.Xml.XmlWriter" /> 所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public abstract void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Flush" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Flush();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在衍生類別中覆寫時，將緩衝區的所有內容清空至基礎資料流，然後清空基礎資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這稱為而不是<xref:System.Xml.XmlWriter.Close%2A>當您想要撰寫更多基礎資料流而不會遺失什麼仍在緩衝區中。  
  
 這個方法的非同步版本，請參閱<xref:System.Xml.XmlWriter.FlushAsync%2A>。  
  
   
  
## Examples  
 下列範例會將兩個 XML 片段。  
  
 [!code-cpp[XmlWriter.Flush#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.Flush/CPP/write2docs_v2.cpp#1)]
 [!code-csharp[XmlWriter.Flush#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.Flush/CS/write2docs_v2.cs#1)]
 [!code-vb[XmlWriter.Flush#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.Flush/VB/write2docs_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      </Docs>
    </Member>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task FlushAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task FlushAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.FlushAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FlushAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ FlushAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>以非同步的方式將緩衝區的所有內容清空至基礎資料流，然後清空基礎資料流。</summary>
        <returns>表示非同步 <see langword="Flush" /> 作業的工作。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這是非同步版本<xref:System.Xml.XmlWriter.Flush%2A>，使用相同的功能。 若要使用此方法，您必須設定<xref:System.Xml.XmlWriterSettings.Async%2A>旗標設為`true`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      </Docs>
    </Member>
    <Member MemberName="LookupPrefix">
      <MemberSignature Language="C#" Value="public abstract string LookupPrefix (string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string LookupPrefix(string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.LookupPrefix(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function LookupPrefix (ns As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::String ^ LookupPrefix(System::String ^ ns);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ns">您要尋找其前置詞的命名空間 URI。</param>
        <summary>在衍生類別中覆寫時，傳回最接近命名空間 URI 在目前命名空間範圍中定義的前置詞。</summary>
        <returns>命名空間前置詞；如果在目前範圍中找不到符合的命名空間 URI，則為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例會寫出活頁簿。  
  
 [!code-cpp[XmlWriter.WriteElementString#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteElementString/CPP/writeelemstring_v2.cpp#1)]
 [!code-csharp[XmlWriter.WriteElementString#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteElementString/CS/writeelemstring_v2.cs#1)]
 [!code-vb[XmlWriter.WriteElementString#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteElementString/VB/writeelemstring_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="ns" /> 為 <see langword="null" /> 或 <see langword="String.Empty" />。</exception>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      </Docs>
    </Member>
    <Member MemberName="Settings">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlWriterSettings Settings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlWriterSettings Settings" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriter.Settings" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Settings As XmlWriterSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlWriterSettings ^ Settings { System::Xml::XmlWriterSettings ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriterSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.Xml.XmlWriterSettings" /> 物件，用於建立這個 <see cref="T:System.Xml.XmlWriter" /> 執行個體。</summary>
        <value>用於建立這個寫入器執行個體的 <see cref="T:System.Xml.XmlWriterSettings" /> 物件。 如果未使用 <see cref="Overload:System.Xml.XmlWriter.Create" /> 方法建立這個寫入器，則這個屬性會傳回 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlWriterSettings>類別用來指定要建立的寫入器執行個體上支援的功能集。 <xref:System.Xml.XmlWriterSettings>所傳回物件<xref:System.Xml.XmlWriter.Settings%2A>無法修改屬性。 任何嘗試變更個別的設定會造成擲回例外狀況。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteAttributes">
      <MemberSignature Language="C#" Value="public virtual void WriteAttributes (System.Xml.XmlReader reader, bool defattr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteAttributes(class System.Xml.XmlReader reader, bool defattr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteAttributes(System.Xml.XmlReader,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteAttributes (reader As XmlReader, defattr As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteAttributes(System::Xml::XmlReader ^ reader, bool defattr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="defattr" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="reader">要複製屬性的 <see langword="XmlReader" />。</param>
        <param name="defattr">
          若要從 <see langword="true" /> 複製預設屬性，則為 <see langword="XmlReader" />，否則為 <see langword="false" />。</param>
        <summary>在衍生類別中覆寫時，寫出在 <see cref="T:System.Xml.XmlReader" /> 的目前位置找到的所有屬性。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果讀取器位於`element`節點`WriteAttributes`複製所有包含的屬性。 如果讀取器位於`attribute` 節點，這個方法會寫入目前的屬性，則其餘屬性結尾標記的項目之前。 如果讀取器位於`XmlDeclaration` 節點，這個方法會寫入所有屬性宣告中。 如果讀取器在任何其他節點類型，這個方法會擲回<xref:System.Xml.XmlException>。  
  
 如果這個方法會呼叫使用<xref:System.Xml.XmlValidatingReader>，以確保寫入時，會取代任何內容 （已展開的實體），可能會導致無效的文件格式正確的 XML。 例如，如果屬性包含`&gt;`已擴充，以確保正確格式的文件展開的實體 > 以寫出時，取代`&gt;`。  
  
 這個方法的非同步版本，請參閱<xref:System.Xml.XmlWriter.WriteAttributesAsync%2A>。  
  
   
  
## Examples  
 下列範例將所有項目複製到輸出，將標記名稱變更為大寫，並將複製未變更的所有屬性。  
  
 [!code-cpp[XmlWriter.WriteAttributes#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteAttributes/CPP/writeattrs_v2.cpp#1)]
 [!code-csharp[XmlWriter.WriteAttributes#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteAttributes/CS/writeattrs_v2.cs#1)]
 [!code-vb[XmlWriter.WriteAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteAttributes/VB/writeattrs_v2.vb#1)]  
  
 此範例會使用該檔案，`test1.xml`作為輸入。  
  
 [!code-xml[XmlWriter.WriteAttributes#2](~/samples/snippets/xml/VS_Snippets_Data/XmlWriter.WriteAttributes/XML/test1.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="reader" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.Xml.XmlException">讀取器不在 <see langword="element" />、<see langword="attribute" /> 或 <see langword="XmlDeclaration" /> 節點上。</exception>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteAttributesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteAttributesAsync (System.Xml.XmlReader reader, bool defattr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteAttributesAsync(class System.Xml.XmlReader reader, bool defattr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteAttributesAsync(System.Xml.XmlReader,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteAttributesAsync (reader As XmlReader, defattr As Boolean) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteAttributesAsync(System::Xml::XmlReader ^ reader, bool defattr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Xml.XmlWriter/&lt;WriteAttributesAsync&gt;c__async2))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="defattr" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="reader">要複製屬性的 <see langword="XmlReader" />。</param>
        <param name="defattr">
          若要從 <see langword="true" /> 複製預設屬性，則為 <see langword="XmlReader" />，否則為 <see langword="false" />。</param>
        <summary>非同步寫出在 <see cref="T:System.Xml.XmlReader" /> 中的目前位置找到的所有屬性。</summary>
        <returns>表示非同步 <see langword="WriteAttributes" /> 作業的工作。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這是非同步版本<xref:System.Xml.XmlWriter.WriteAttributes%2A>，使用相同的功能。 若要使用此方法，您必須設定<xref:System.Xml.XmlWriterSettings.Async%2A>旗標設為`true`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteAttributeString">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
        <summary>在衍生類別中覆寫時，寫入具有指定值的屬性。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法的非同步版本，請參閱<xref:System.Xml.XmlWriter.WriteElementStringAsync%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteAttributeString">
      <MemberSignature Language="C#" Value="public void WriteAttributeString (string localName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteAttributeString(string localName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteAttributeString (localName As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteAttributeString(System::String ^ localName, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">屬性的本機名稱。</param>
        <param name="value">屬性的值。</param>
        <summary>在衍生類別中覆寫時，寫出具有指定的區域名稱與數值的屬性。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteAttributeString` 會執行下列動作：  
  
-   如果屬性值包含雙引號或單一引號，取代了它們`&quot;`和`&apos;`分別。  
  
-   如果撰寫`xml:space`屬性寫入器會驗證屬性值是否有效。 (有效值為`preserve`或`default`。)  
  
-   如果撰寫`xml:lang`屬性寫入器不會驗證屬性值是根據 W3C XML 1.0 recommendation 有效。  
  
 這個方法的非同步版本，請參閱<xref:System.Xml.XmlWriter.WriteAttributeStringAsync%2A>。  
  
   
  
## Examples  
 下列範例會寫出活頁簿。  
  
 [!code-cpp[XmlWriter.WriteElementString#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteElementString/CPP/writeelemstring_v2.cpp#1)]
 [!code-csharp[XmlWriter.WriteElementString#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteElementString/CS/writeelemstring_v2.cs#1)]
 [!code-vb[XmlWriter.WriteElementString#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteElementString/VB/writeelemstring_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
        <exception cref="T:System.ArgumentException">
          <see langword="xml:space" /> 或 <see langword="xml:lang" /> 屬性值無效。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteAttributeString">
      <MemberSignature Language="C#" Value="public void WriteAttributeString (string localName, string ns, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteAttributeString(string localName, string ns, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteAttributeString (localName As String, ns As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteAttributeString(System::String ^ localName, System::String ^ ns, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">屬性的本機名稱。</param>
        <param name="ns">與屬性相關聯的命名空間 URI。</param>
        <param name="value">屬性的值。</param>
        <summary>在衍生類別中覆寫時，寫入具有指定區域名稱、命名空間 URI 和值的屬性。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會寫出具有使用者定義的命名空間前置詞的屬性，並將它與指定的命名空間產生關聯。 如果`localName`"xmlns"，則這個方法也會將此視為命名空間宣告。 在此情況下，`ns`引數可以是`null`。  
  
 `WriteAttributeString` 會執行下列動作：  
  
-   如果屬性值包含雙引號或單一引號，取代了它們`&quot;`和`&apos;`分別。  
  
-   如果撰寫`xml:space`屬性寫入器會驗證屬性值是否有效。 (有效值為`preserve`或`default`。)  
  
-   如果撰寫`xml:lang`屬性寫入器不會驗證屬性值是根據 W3C XML 1.0 recommendation 有效。  
  
 這個方法的非同步版本，請參閱<xref:System.Xml.XmlWriter.WriteAttributeStringAsync%2A>。  
  
   
  
## Examples  
 下列範例會使用<xref:System.Xml.XmlWriter.WriteAttributeString%2A>方法寫入命名空間宣告。  
  
 [!code-cpp[XmlWriter.WriteAttributeString#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteAttributeString/CPP/writeattrstring.cpp#1)]
 [!code-csharp[XmlWriter.WriteAttributeString#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteAttributeString/CS/writeattrstring.cs#1)]
 [!code-vb[XmlWriter.WriteAttributeString#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteAttributeString/VB/writeattrstring.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
        <exception cref="T:System.ArgumentException">
          <see langword="xml:space" /> 或 <see langword="xml:lang" /> 屬性值無效。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteAttributeString">
      <MemberSignature Language="C#" Value="public void WriteAttributeString (string prefix, string localName, string ns, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteAttributeString(string prefix, string localName, string ns, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteAttributeString (prefix As String, localName As String, ns As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteAttributeString(System::String ^ prefix, System::String ^ localName, System::String ^ ns, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">屬性的命名空間前置詞。</param>
        <param name="localName">屬性的本機名稱。</param>
        <param name="ns">屬性的命名空間 URI。</param>
        <param name="value">屬性的值。</param>
        <summary>在衍生類別中覆寫時，寫出具有指定的前置詞、區域名稱、命名空間 URI 及其值的屬性。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會寫出具有使用者定義的命名空間前置詞的屬性，並將它與指定的命名空間產生關聯。 如果前置詞"xmlns"這個方法也會將它視為命名空間宣告，並將宣告的前置詞與 URI 中指定的屬性值所提供的命名空間產生關聯。 在此情況下`ns`引數可以是`null`。  
  
 `WriteAttributeString` 會執行下列動作：  
  
-   如果屬性值包含雙引號或單一引號，取代了它們`&quot;`和`&apos;`分別。  
  
-   如果撰寫`xml:space`屬性寫入器會驗證屬性值是否有效。 (有效值為`preserve`或`default`。)  
  
-   如果撰寫`xml:lang`屬性寫入器不會驗證屬性值是根據 W3C XML 1.0 recommendation 有效。  
  
 這個方法的非同步版本，請參閱<xref:System.Xml.XmlWriter.WriteAttributeStringAsync%2A>。  
  
   
  
## Examples  
 下列範例會使用<xref:System.Xml.XmlWriter.WriteAttributeString%2A>方法寫入命名空間宣告。  
  
 [!code-cpp[XmlWriter.WriteAttributeString#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteAttributeString/CPP/writeattrstring.cpp#1)]
 [!code-csharp[XmlWriter.WriteAttributeString#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteAttributeString/CS/writeattrstring.cs#1)]
 [!code-vb[XmlWriter.WriteAttributeString#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteAttributeString/VB/writeattrstring.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
        <exception cref="T:System.ArgumentException">
          <see langword="xml:space" /> 或 <see langword="xml:lang" /> 屬性值無效。</exception>
        <exception cref="T:System.Xml.XmlException">
          <paramref name="localName" /> 或 <paramref name="ns" /> 為 <see langword="null" /></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteAttributeStringAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteAttributeStringAsync (string prefix, string localName, string ns, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteAttributeStringAsync(string prefix, string localName, string ns, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteAttributeStringAsync(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteAttributeStringAsync (prefix As String, localName As String, ns As String, value As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteAttributeStringAsync(System::String ^ prefix, System::String ^ localName, System::String ^ ns, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">屬性的命名空間前置詞。</param>
        <param name="localName">屬性的本機名稱。</param>
        <param name="ns">屬性的命名空間 URI。</param>
        <param name="value">屬性的值。</param>
        <summary>以非同步的方式寫出具有指定之前置詞、區域名稱、命名空間 URI 和值的屬性。</summary>
        <returns>表示非同步 <see langword="WriteAttributeString" /> 作業的工作。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這是非同步版本<xref:System.Xml.XmlWriter.WriteAttributeString%2A>，使用相同的功能。 若要使用此方法，您必須設定<xref:System.Xml.XmlWriterSettings.Async%2A>旗標設為`true`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64">
      <MemberSignature Language="C#" Value="public abstract void WriteBase64 (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteBase64(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteBase64 (buffer As Byte(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteBase64(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">要編碼的位元組陣列。</param>
        <param name="index">緩衝區中的位置指示要寫入的位元組開頭。</param>
        <param name="count">要寫入的位元組數。</param>
        <summary>在衍生類別中覆寫時，以 Base64 格式編碼指定的二進位位元組，並寫出產生的文字。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 例如，位元組緩衝區可能包含 GIF 影像的二進位內容。 這顯然不是有效的 XML。 `Base64`編碼方式設計來代表任意位元組序列組成 65 US-ASCII 字元以文字形式 ([A-a-za-z0-9 + =])，每個字元都會編碼的二進位資料的 6 位元。 如需詳細資訊，請參閱要求建議 (RFC) 位於 1521年[註解的網站要求](https://www.rfc-editor.org)。  
  
 這個方法的非同步版本，請參閱<xref:System.Xml.XmlWriter.WriteBase64Async%2A>。  
  
   
  
## Examples  
 下列範例會使用<xref:System.Xml.XmlWriter.WriteBase64%2A>方法寫入`Base64`資料。 `Base64`資料內嵌於`<image>`項目。  
  
 [!code-csharp[XmlReader_Read_Write_Binary#3](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader_Read_Write_Binary/CS/readBinary.cs#3)]
 [!code-vb[XmlReader_Read_Write_Binary#3](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader_Read_Write_Binary/VB/readBinary.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 或 <paramref name="count" /> 小於零。  
  
 -或-  
  
 緩衝區長度減去 <paramref name="index" /> 小於 <paramref name="count" />。</exception>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64Async">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteBase64Async (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteBase64Async(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteBase64Async(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteBase64Async (buffer As Byte(), index As Integer, count As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteBase64Async(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">要編碼的位元組陣列。</param>
        <param name="index">緩衝區中的位置指示要寫入的位元組開頭。</param>
        <param name="count">要寫入的位元組數。</param>
        <summary>以非同步的方式將指定的二進位位元組編碼為 base64 並寫出產生的文字。</summary>
        <returns>表示非同步 <see langword="WriteBase64" /> 作業的工作。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這是非同步版本<xref:System.Xml.XmlWriter.WriteBase64%2A>，使用相同的功能。 若要使用此方法，您必須設定<xref:System.Xml.XmlWriterSettings.Async%2A>旗標設為`true`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBinHex">
      <MemberSignature Language="C#" Value="public virtual void WriteBinHex (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteBinHex(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteBinHex (buffer As Byte(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteBinHex(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">要編碼的位元組陣列。</param>
        <param name="index">緩衝區中的位置指示要寫入的位元組開頭。</param>
        <param name="count">要寫入的位元組數。</param>
        <summary>在衍生類別中覆寫時，以 <see langword="BinHex" /> 格式編碼指定的二進位位元組，並寫出產生的文字。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法的非同步版本，請參閱<xref:System.Xml.XmlWriter.WriteBinHexAsync%2A>。  
  
   
  
## Examples  
 下列範例會使用<xref:System.Xml.XmlWriter.WriteBinHex%2A>方法寫入`BinHex`資料。 `BinHex`資料內嵌於`<image>`項目。  
  
 [!code-csharp[XmlReader_Read_Write_Binary#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader_Read_Write_Binary/CS/readBinary.cs#1)]
 [!code-vb[XmlReader_Read_Write_Binary#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader_Read_Write_Binary/VB/readBinary.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 或 <paramref name="count" /> 小於零。  
  
 -或-  
  
 緩衝區長度減去 <paramref name="index" /> 小於 <paramref name="count" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBinHexAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteBinHexAsync (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteBinHexAsync(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteBinHexAsync(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteBinHexAsync (buffer As Byte(), index As Integer, count As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteBinHexAsync(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">要編碼的位元組陣列。</param>
        <param name="index">緩衝區中的位置指示要寫入的位元組開頭。</param>
        <param name="count">要寫入的位元組數。</param>
        <summary>以非同步的方式將指定的二進位位元組編碼為 <see langword="BinHex" /> 並寫出產生的文字。</summary>
        <returns>表示非同步 <see langword="WriteBinHex" /> 作業的工作。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這是非同步版本<xref:System.Xml.XmlWriter.WriteBinHex%2A>，使用相同的功能。 若要使用此方法，您必須設定<xref:System.Xml.XmlWriterSettings.Async%2A>旗標設為`true`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCData">
      <MemberSignature Language="C#" Value="public abstract void WriteCData (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteCData(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteCData(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteCData (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteCData(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">要放在 CDATA 區塊中的文字。</param>
        <summary>在衍生類別中覆寫時，寫出包含指定文字的 &lt;![CDATA[...]]&gt; 區塊。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`text`是`null`或`String.Empty`，這個方法會寫入一個空白的 CDATA 區塊，例如\<！ [CDATA []]] >< ！[CDATA [] >。  
  
 這個方法的非同步版本，請參閱<xref:System.Xml.XmlWriter.WriteCDataAsync%2A>。  
  
   
  
## Examples  
 下列範例會將 XML 檔案代表活頁簿。  
  
 [!code-csharp[XmlWriter.WriteStartDocument#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteStartDocument/CS/writerbook_v2.cs#1)]
 [!code-vb[XmlWriter.WriteStartDocument#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteStartDocument/VB/writerbook_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">此文字會導致非語式正確的 XML 文件。</exception>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCDataAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteCDataAsync (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteCDataAsync(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteCDataAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteCDataAsync (text As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteCDataAsync(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">要放在 CDATA 區塊中的文字。</param>
        <summary>以非同步的方式寫出包含指定文字的 &lt;![CDATA[...]]&gt; 區塊。</summary>
        <returns>表示非同步 <see langword="WriteCData" /> 作業的工作。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這是非同步版本<xref:System.Xml.XmlWriter.WriteCData%2A>，使用相同的功能。 若要使用此方法，您必須設定<xref:System.Xml.XmlWriterSettings.Async%2A>旗標設為`true`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCharEntity">
      <MemberSignature Language="C#" Value="public abstract void WriteCharEntity (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteCharEntity(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteCharEntity(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteCharEntity (ch As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteCharEntity(char ch);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">要產生字元實體的 Unicode 字元。</param>
        <summary>在衍生類別中覆寫時，強制產生指定之 Unicode 字元值的字元實體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會以十六進位字元實體參考格式寫入的 Unicode 字元。  
  
 這個方法的非同步版本，請參閱<xref:System.Xml.XmlWriter.WriteCharEntityAsync%2A>。  
  
   
  
## Examples  
 請參閱<xref:System.Xml.XmlTextWriter.WriteCharEntity%2A?displayProperty=nameWithType>如需使用此方法的範例。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">字元位在 Surrogate 字組字元範圍 <see langword="0xd800" /> - <see langword="0xdfff" /> 中。</exception>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCharEntityAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteCharEntityAsync (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteCharEntityAsync(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteCharEntityAsync(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteCharEntityAsync (ch As Char) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteCharEntityAsync(char ch);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">要產生字元實體的 Unicode 字元。</param>
        <summary>以非同步的方式強制產生指定的 Unicode 字元值的字元實體。</summary>
        <returns>表示非同步 <see langword="WriteCharEntity" /> 作業的工作。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這是非同步版本<xref:System.Xml.XmlWriter.WriteCharEntity%2A>，使用相同的功能。 若要使用此方法，您必須設定<xref:System.Xml.XmlWriterSettings.Async%2A>旗標設為`true`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteChars">
      <MemberSignature Language="C#" Value="public abstract void WriteChars (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteChars(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteChars(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteChars (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteChars(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">包含要寫入之文字的字元陣列。</param>
        <param name="index">緩衝區中的位置指示要寫入的文字開頭。</param>
        <param name="count">要寫入的字元數。</param>
        <summary>在衍生類別中覆寫時，一次將文字寫入一個緩衝區。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法可以用來一次寫入大量的文字一個緩衝區。  
  
 必須進行特殊處理，可確保`WriteChars`方法不會將 surrogate 字組字元分割跨多個緩衝區寫入。 XML 規格定義的 surrogate 字組的有效範圍。  
  
 這個方法的非同步版本，請參閱<xref:System.Xml.XmlWriter.WriteCharsAsync%2A>。  
  
   
  
## Examples  
 [!code-csharp[XmlWriter.WriteChars#1](~/samples/snippets/csharp/VS_Snippets_Data/xmlwriter.writechars/cs/xmlwriterwritecharsexample.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 或 <paramref name="count" /> 小於零。  
  
 -或-  
  
 緩衝區長度減去 <paramref name="index" /> 小於 <paramref name="count" />；這個呼叫會導致 Surrogate 字組字元被分隔或寫入無效的 Surrogate 字組。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="buffer" /> 參數值無效。</exception>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCharsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteCharsAsync (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteCharsAsync(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteCharsAsync(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteCharsAsync (buffer As Char(), index As Integer, count As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteCharsAsync(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">包含要寫入之文字的字元陣列。</param>
        <param name="index">緩衝區中的位置指示要寫入的文字開頭。</param>
        <param name="count">要寫入的字元數。</param>
        <summary>以非同步的方式一次將文字寫入一個緩衝區。</summary>
        <returns>表示非同步 <see langword="WriteChars" /> 作業的工作。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這是非同步版本<xref:System.Xml.XmlWriter.WriteChars%2A>，使用相同的功能。 若要使用此方法，您必須設定<xref:System.Xml.XmlWriterSettings.Async%2A>旗標設為`true`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteComment">
      <MemberSignature Language="C#" Value="public abstract void WriteComment (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteComment(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteComment(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteComment (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteComment(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">要放入註解中的文字。</param>
        <summary>在衍生類別中覆寫時，寫出包含指定文字的註解 &lt;!--...--&gt;。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`text`是`null`或`String.Empty`，這個方法會寫入註解沒有資料內容，例如\<！--->。  
  
 如果`text`包含無效的序列的兩個連字號"-"<xref:System.Xml.XmlWriter>可以是 throw <xref:System.ArgumentException> (<xref:System.Xml.XmlTextWriter>物件) 或連字號之間插入空格 [-] 以便文字是有效的 XML 註解 (<xref:System.Xml.XmlWriter>所建立的物件<xref:System.Xml.XmlWriter.Create%2A>方法)。  
  
 這個方法的非同步版本，請參閱<xref:System.Xml.XmlWriter.WriteCommentAsync%2A>。  
  
   
  
## Examples  
 下列範例會將 XML 檔案代表活頁簿。  
  
 [!code-csharp[XmlWriter.WriteStartDocument#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteStartDocument/CS/writerbook_v2.cs#1)]
 [!code-vb[XmlWriter.WriteStartDocument#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteStartDocument/VB/writerbook_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">此文字會導致非語式正確的 XML 文件。</exception>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteCommentAsync (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteCommentAsync(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteCommentAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteCommentAsync (text As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteCommentAsync(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">要放入註解中的文字。</param>
        <summary>以非同步的方式寫出包含指定文字的註解 &lt;!--...--&gt;。</summary>
        <returns>表示非同步 <see langword="WriteComment" /> 作業的工作。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這是非同步版本<xref:System.Xml.XmlWriter.WriteComment%2A>，使用相同的功能。 若要使用此方法，您必須設定<xref:System.Xml.XmlWriterSettings.Async%2A>旗標設為`true`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteDocType">
      <MemberSignature Language="C#" Value="public abstract void WriteDocType (string name, string pubid, string sysid, string subset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteDocType(string name, string pubid, string sysid, string subset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteDocType(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteDocType (name As String, pubid As String, sysid As String, subset As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteDocType(System::String ^ name, System::String ^ pubid, System::String ^ sysid, System::String ^ subset);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="pubid" Type="System.String" />
        <Parameter Name="sysid" Type="System.String" />
        <Parameter Name="subset" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">DOCTYPE 名稱。 這必須不是空白的。</param>
        <param name="pubid">如果為非 null，它也會寫入 PUBLIC "pubid" "sysid"，其中 <c>pubid</c> 與 <c>sysid</c> 會取代為指定引數的值。</param>
        <param name="sysid">如果 <c>pubid</c> 是 <see langword="null" />，而 <c>sysid</c> 為非 null，則它會寫入 SYSTEM "sysid"，其中 <c>sysid</c> 會取代為這個引數的值。</param>
        <param name="subset">如果非 Null，它會寫入 [subset]，其中 subset 由這個引數的值來替代。</param>
        <summary>在衍生類別中覆寫時，寫入具有指定名稱與選擇性屬性的 DOCTYPE 宣告。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法不會檢查無效的字元`pubid`，`sysid`或`subset`。 它也不會檢查內部子集是語式正確。  
  
> [!IMPORTANT]
>  <xref:System.Xml.XmlWriter>不會驗證資料傳遞至<xref:System.Xml.XmlWriter.WriteDocType%2A>方法。 您不應該將任意資料傳遞至這個方法。  
  
 這個方法的非同步版本，請參閱<xref:System.Xml.XmlWriter.WriteDocTypeAsync%2A>。  
  
   
  
## Examples  
 下列範例會將 XML 檔案代表活頁簿。  
  
 [!code-csharp[XmlWriter.WriteStartDocument#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteStartDocument/CS/writerbook_v2.cs#1)]
 [!code-vb[XmlWriter.WriteStartDocument#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteStartDocument/VB/writerbook_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> 的值將導致無效的 XML。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteDocTypeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteDocTypeAsync (string name, string pubid, string sysid, string subset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteDocTypeAsync(string name, string pubid, string sysid, string subset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteDocTypeAsync(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteDocTypeAsync (name As String, pubid As String, sysid As String, subset As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteDocTypeAsync(System::String ^ name, System::String ^ pubid, System::String ^ sysid, System::String ^ subset);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="pubid" Type="System.String" />
        <Parameter Name="sysid" Type="System.String" />
        <Parameter Name="subset" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">DOCTYPE 名稱。 這必須不是空白的。</param>
        <param name="pubid">如果為非 null，它也會寫入 PUBLIC "pubid" "sysid"，其中 <c>pubid</c> 與 <c>sysid</c> 會取代為指定引數的值。</param>
        <param name="sysid">如果 <c>pubid</c> 是 <see langword="null" />，而 <c>sysid</c> 為非 null，則它會寫入 SYSTEM "sysid"，其中 <c>sysid</c> 會取代為這個引數的值。</param>
        <param name="subset">如果非 Null，它會寫入 [subset]，其中 subset 由這個引數的值來替代。</param>
        <summary>以非同步的方式寫入具有指定名稱與選擇性屬性的 DOCTYPE 宣告。</summary>
        <returns>表示非同步 <see langword="WriteDocType" /> 作業的工作。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這是非同步版本<xref:System.Xml.XmlWriter.WriteDocType%2A>，使用相同的功能。 若要使用此方法，您必須設定<xref:System.Xml.XmlWriterSettings.Async%2A>旗標設為`true`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteElementString">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
        <summary>寫入包含字串值的項目。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法的非同步版本，請參閱<xref:System.Xml.XmlWriter.WriteElementStringAsync%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteElementString">
      <MemberSignature Language="C#" Value="public void WriteElementString (string localName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteElementString(string localName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteElementString (localName As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteElementString(System::String ^ localName, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">項目的本機名稱。</param>
        <param name="value">項目的值。</param>
        <summary>寫入具有指定之區域名稱和值的項目。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法的非同步版本，請參閱<xref:System.Xml.XmlWriter.WriteElementStringAsync%2A>。  
  
   
  
## Examples  
 下列範例會使用幾種寫入方法來建立 XML 片段。  
  
 [!code-cpp[XmlWriter.WriteElementString#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteElementString/CPP/writeelemstring_v2.cpp#1)]
 [!code-csharp[XmlWriter.WriteElementString#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteElementString/CS/writeelemstring_v2.cs#1)]
 [!code-vb[XmlWriter.WriteElementString#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteElementString/VB/writeelemstring_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="localName" /> 值為 <see langword="null" /> 或空字串。  
  
 -或-  
  
 參數值無效。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">緩衝區中有一個字元，其為有效的 XML 字元，但對輸出編碼而言無效。 比方說如果輸出的編碼方式為 ASCII，您應該在項目與屬性名稱中只使用範圍從 0 至 127 的字元。 無效的字元可能是在這個方法的引數中，或在先前已寫入至緩衝區的方法的引數中。 字元實體參考會盡可能逸出這類字元 (比方說在文字節點或屬性值中)。 不過，在項目與屬性名稱、註解、處理指示或 CDATA 區段中不允許字元實體參考。</exception>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteElementString">
      <MemberSignature Language="C#" Value="public void WriteElementString (string localName, string ns, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteElementString(string localName, string ns, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteElementString (localName As String, ns As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteElementString(System::String ^ localName, System::String ^ ns, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">項目的本機名稱。</param>
        <param name="ns">與項目相關聯的命名空間 URI。</param>
        <param name="value">項目的值。</param>
        <summary>寫入具有指定之區域名稱、命名空間 URI 和值的項目。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法的非同步版本，請參閱<xref:System.Xml.XmlWriter.WriteElementStringAsync%2A>。  
  
   
  
## Examples  
 下列範例會使用幾種寫入方法來建立 XML 片段。  
  
 [!code-cpp[XmlWriter.WriteElementString#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteElementString/CPP/writeelemstring_v2.cpp#1)]
 [!code-csharp[XmlWriter.WriteElementString#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteElementString/CS/writeelemstring_v2.cs#1)]
 [!code-vb[XmlWriter.WriteElementString#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteElementString/VB/writeelemstring_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="localName" /> 值為 <see langword="null" /> 或空字串。  
  
 -或-  
  
 參數值無效。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">緩衝區中有一個字元，其為有效的 XML 字元，但對輸出編碼而言無效。 比方說如果輸出的編碼方式為 ASCII，您應該在項目與屬性名稱中只使用範圍從 0 至 127 的字元。 無效的字元可能是在這個方法的引數中，或在先前已寫入至緩衝區的方法的引數中。 字元實體參考會盡可能逸出這類字元 (比方說在文字節點或屬性值中)。 不過，在項目與屬性名稱、註解、處理指示或 CDATA 區段中不允許字元實體參考。</exception>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteElementString">
      <MemberSignature Language="C#" Value="public void WriteElementString (string prefix, string localName, string ns, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteElementString(string prefix, string localName, string ns, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteElementString (prefix As String, localName As String, ns As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteElementString(System::String ^ prefix, System::String ^ localName, System::String ^ ns, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">項目的前置詞。</param>
        <param name="localName">項目的本機名稱。</param>
        <param name="ns">項目的命名空間 URI。</param>
        <param name="value">項目的值。</param>
        <summary>寫入具有指定的前置詞、區域名稱、命名空間 URI 和值的項目。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法的非同步版本，請參閱<xref:System.Xml.XmlWriter.WriteElementStringAsync%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="localName" /> 值為 <see langword="null" /> 或空字串。  
  
 -或-  
  
 參數值無效。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">緩衝區中有一個字元，其為有效的 XML 字元，但對輸出編碼而言無效。 比方說如果輸出的編碼方式為 ASCII，您應該在項目與屬性名稱中只使用範圍從 0 至 127 的字元。 無效的字元可能是在這個方法的引數中，或在先前已寫入至緩衝區的方法的引數中。 字元實體參考會盡可能逸出這類字元 (比方說在文字節點或屬性值中)。 不過，在項目與屬性名稱、註解、處理指示或 CDATA 區段中不允許字元實體參考。</exception>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteElementStringAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteElementStringAsync (string prefix, string localName, string ns, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteElementStringAsync(string prefix, string localName, string ns, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteElementStringAsync(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteElementStringAsync (prefix As String, localName As String, ns As String, value As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteElementStringAsync(System::String ^ prefix, System::String ^ localName, System::String ^ ns, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Xml.XmlWriter/&lt;WriteElementStringAsync&gt;c__async6))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">項目的前置詞。</param>
        <param name="localName">項目的本機名稱。</param>
        <param name="ns">項目的命名空間 URI。</param>
        <param name="value">項目的值。</param>
        <summary>以非同步的方式寫入具有指定之前置詞、區域名稱、命名空間 URI 和值的項目。</summary>
        <returns>表示非同步 <see langword="WriteElementString" /> 作業的工作。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這是非同步版本<xref:System.Xml.XmlWriter.WriteElementString%2A>，使用相同的功能。 若要使用此方法，您必須設定<xref:System.Xml.XmlWriterSettings.Async%2A>旗標設為`true`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndAttribute">
      <MemberSignature Language="C#" Value="public abstract void WriteEndAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEndAttribute() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteEndAttribute" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteEndAttribute ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteEndAttribute();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在衍生類別中覆寫時，會關閉先前的 <see cref="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)" /> 呼叫。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果您呼叫`WriteStartAttribute`，您可以關閉使用此方法的屬性。  
  
 您也可以藉由呼叫關閉屬性`WriteStartAttribute`再次呼叫<xref:System.Xml.XmlWriter.WriteAttributeString%2A>，或呼叫<xref:System.Xml.XmlWriter.WriteEndElement%2A>。  
  
> [!NOTE]
>  當您使用<xref:System.Xml.XmlWriter>將不會寫入到輸出 XML 的元素和屬性的方法，直到您呼叫<xref:System.Xml.XmlWriter.Close%2A>方法。 例如，如果您要使用 XmlWriter 填入<xref:System.Xml.XmlDocument>，除非您關閉<xref:System.Xml.XmlWriter>，不能觀察目標文件中的屬性與寫入的項目。  
  
 這個方法的非同步版本，請參閱<xref:System.Xml.XmlWriter.WriteEndAttributeAsync%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndAttributeAsync">
      <MemberSignature Language="C#" Value="protected internal virtual System.Threading.Tasks.Task WriteEndAttributeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Threading.Tasks.Task WriteEndAttributeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteEndAttributeAsync" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function WriteEndAttributeAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Threading::Tasks::Task ^ WriteEndAttributeAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>非同步關閉上一個 <see cref="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)" /> 呼叫。</summary>
        <returns>表示非同步 <see langword="WriteEndAttribute" /> 作業的工作。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這是非同步版本<xref:System.Xml.XmlWriter.WriteEndAttribute%2A>，使用相同的功能。 若要使用此方法，您必須設定<xref:System.Xml.XmlWriterSettings.Async%2A>旗標設為`true`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndDocument">
      <MemberSignature Language="C#" Value="public abstract void WriteEndDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEndDocument() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteEndDocument" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteEndDocument ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteEndDocument();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在衍生類別中覆寫時，關閉任何開啟的項目或屬性，並將寫入器回復開始狀態。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  當您使用<xref:System.Xml.XmlWriter>將不會寫入到輸出 XML 的元素和屬性的方法，直到您呼叫<xref:System.Xml.XmlWriter.Close%2A>方法。 例如，如果您要使用 XmlWriter 填入<xref:System.Xml.XmlDocument>，除非您關閉<xref:System.Xml.XmlWriter>，不能觀察目標文件中的屬性與寫入的項目。  
  
 這個方法的非同步版本，請參閱<xref:System.Xml.XmlWriter.WriteEndDocumentAsync%2A>。  
  
   
  
## Examples  
 下列範例會將 XML 檔案代表活頁簿。  
  
 [!code-csharp[XmlWriter.WriteStartDocument#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteStartDocument/CS/writerbook_v2.cs#1)]
 [!code-vb[XmlWriter.WriteStartDocument#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteStartDocument/VB/writerbook_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">XML 文件無效。</exception>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndDocumentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteEndDocumentAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteEndDocumentAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteEndDocumentAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteEndDocumentAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteEndDocumentAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>以非同步的方式關閉任何開啟的項目或屬性，並將寫入器回復開始狀態。</summary>
        <returns>表示非同步 <see langword="WriteEndDocument" /> 作業的工作。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這是非同步版本<xref:System.Xml.XmlWriter.WriteEndDocument%2A>，使用相同的功能。 若要使用此方法，您必須設定<xref:System.Xml.XmlWriterSettings.Async%2A>旗標設為`true`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndElement">
      <MemberSignature Language="C#" Value="public abstract void WriteEndElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEndElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteEndElement" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteEndElement ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteEndElement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在衍生類別中覆寫時，關閉一個項目並取出對應的命名空間範圍。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果項目不包含任何內容，簡短結束標記 」 / > 「 寫入;否則，會寫入完整的結束標記。  
  
> [!NOTE]
>  當您使用<xref:System.Xml.XmlWriter>將不會寫入到輸出 XML 的元素和屬性的方法，直到您呼叫<xref:System.Xml.XmlWriter.Close%2A>方法。 例如，如果您用來填入 XmlWwriter <xref:System.Xml.XmlDocument>，除非您關閉<xref:System.Xml.XmlWriter>，不能觀察目標文件中的屬性與寫入的項目。  
  
 這個方法的非同步版本，請參閱<xref:System.Xml.XmlWriter.WriteEndElementAsync%2A>。  
  
   
  
## Examples  
 下列範例會使用<xref:System.Xml.XmlWriter.WriteEndElement%2A>和<xref:System.Xml.XmlWriter.WriteFullEndElement%2A>方法。  
  
 [!code-csharp[XmlWriter.WriteFullEndElement#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteFullEndElement/CS/writerfullend_v2.cs#1)]
 [!code-vb[XmlWriter.WriteFullEndElement#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteFullEndElement/VB/writerfullend_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndElementAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteEndElementAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteEndElementAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteEndElementAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteEndElementAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteEndElementAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>以非同步的方式關閉一個項目並取出對應的命名空間範圍。</summary>
        <returns>表示非同步 <see langword="WriteEndElement" /> 作業的工作。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這是非同步版本<xref:System.Xml.XmlWriter.WriteEndElement%2A>，使用相同的功能。 若要使用此方法，您必須設定<xref:System.Xml.XmlWriterSettings.Async%2A>旗標設為`true`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEntityRef">
      <MemberSignature Language="C#" Value="public abstract void WriteEntityRef (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEntityRef(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteEntityRef(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteEntityRef (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteEntityRef(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">實體參考的名稱。</param>
        <summary>在衍生類別中覆寫時，寫出如 <see langword="&amp;name;" /> 的實體參考。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法的非同步版本，請參閱<xref:System.Xml.XmlWriter.WriteEntityRefAsync%2A>。  
  
   
  
## Examples  
 下列範例會將 XML 檔案代表活頁簿。  
  
 [!code-csharp[XmlWriter.WriteStartDocument#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteStartDocument/CS/writerbook_v2.cs#1)]
 [!code-vb[XmlWriter.WriteStartDocument#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteStartDocument/VB/writerbook_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> 為 <see langword="null" /> 或 <see langword="String.Empty" />。</exception>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEntityRefAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteEntityRefAsync (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteEntityRefAsync(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteEntityRefAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteEntityRefAsync (name As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteEntityRefAsync(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">實體參考的名稱。</param>
        <summary>以非同步的方式將實體參考寫出為 <see langword="&amp;name;" />。</summary>
        <returns>表示非同步 <see langword="WriteEntityRef" /> 作業的工作。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這是非同步版本<xref:System.Xml.XmlWriter.WriteEntityRef%2A>，使用相同的功能。 若要使用此方法，您必須設定<xref:System.Xml.XmlWriterSettings.Async%2A>旗標設為`true`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteFullEndElement">
      <MemberSignature Language="C#" Value="public abstract void WriteFullEndElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteFullEndElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteFullEndElement" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteFullEndElement ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteFullEndElement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在衍生類別中覆寫時，關閉一個項目並取出對應的命名空間範圍。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法一律會寫入完整的結束標記。 處理項目，其中必須包含完整的結束標記時，這非常有用。 例如，瀏覽器預期 HTML 指令碼區塊，以 「 \< /指令碼 > 」。  
  
 這個方法的非同步版本，請參閱<xref:System.Xml.XmlWriter.WriteFullEndElementAsync%2A>。  
  
   
  
## Examples  
 下列範例會使用<xref:System.Xml.XmlWriter.WriteEndElement%2A>和<xref:System.Xml.XmlWriter.WriteFullEndElement%2A>方法。  
  
 [!code-csharp[XmlWriter.WriteFullEndElement#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteFullEndElement/CS/writerfullend_v2.cs#1)]
 [!code-vb[XmlWriter.WriteFullEndElement#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteFullEndElement/VB/writerfullend_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteFullEndElementAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteFullEndElementAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteFullEndElementAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteFullEndElementAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteFullEndElementAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteFullEndElementAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>以非同步的方式關閉一個項目並取出對應的命名空間範圍。</summary>
        <returns>表示非同步 <see langword="WriteFullEndElement" /> 作業的工作。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這是非同步版本<xref:System.Xml.XmlWriter.WriteFullEndElement%2A>，使用相同的功能。 若要使用此方法，您必須設定<xref:System.Xml.XmlWriterSettings.Async%2A>旗標設為`true`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteName">
      <MemberSignature Language="C#" Value="public virtual void WriteName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteName (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteName(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">要寫入的名稱。</param>
        <summary>當覆寫衍生類別時，請寫出指定的名稱，以確保它是符合 W3C XML 1.0 建議 (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name) \(英文\) 的有效名稱。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Xml.XmlTextWriter.Namespaces%2A>設`true`，`WriteName`也會檢查名稱是否有效，根據 W3C Namespaces in XML 建議事項。  
  
 這個方法的非同步版本，請參閱<xref:System.Xml.XmlWriter.WriteNameAsync%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> 不是有效的 XML 名稱，或者 <paramref name="name" /> 是 <see langword="null" /> 或 <see langword="String.Empty" />。</exception>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteNameAsync (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteNameAsync(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteNameAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteNameAsync (name As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteNameAsync(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">要寫入的名稱。</param>
        <summary>非同步地寫出指定的名稱，以確保它是符合 W3C XML 1.0 建議 (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name) \(英文\) 的有效名稱。</summary>
        <returns>表示非同步 <see langword="WriteName" /> 作業的工作。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這是非同步版本<xref:System.Xml.XmlWriter.WriteName%2A>，使用相同的功能。 若要使用此方法，您必須設定<xref:System.Xml.XmlWriterSettings.Async%2A>旗標設為`true`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNmToken">
      <MemberSignature Language="C#" Value="public virtual void WriteNmToken (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteNmToken(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteNmToken(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteNmToken (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteNmToken(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">要寫入的名稱。</param>
        <summary>當覆寫衍生類別時，請寫出指定的名稱，以確保它是符合 W3C XML 1.0 建議 (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name) \(英文\) 的有效 NmToken。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法的非同步版本，請參閱<xref:System.Xml.XmlWriter.WriteNmTokenAsync%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> 不是有效的 NmToken，或者 <paramref name="name" /> 是 <see langword="null" /> 或 <see langword="String.Empty" />。</exception>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNmTokenAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteNmTokenAsync (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteNmTokenAsync(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteNmTokenAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteNmTokenAsync (name As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteNmTokenAsync(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">要寫入的名稱。</param>
        <summary>非同步地寫出指定的名稱，以確保它是符合 W3C XML 1.0 建議 (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name) \(英文\) 的有效 NmToken。</summary>
        <returns>表示非同步 <see langword="WriteNmToken" /> 作業的工作。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這是非同步版本<xref:System.Xml.XmlWriter.WriteNmToken%2A>，使用相同的功能。 若要使用此方法，您必須設定<xref:System.Xml.XmlWriterSettings.Async%2A>旗標設為`true`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteNode">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
        <summary>將來源物件中的每個項目複製到目前的寫入器執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法的非同步版本，請參閱<xref:System.Xml.XmlWriter.WriteNodeAsync%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteNode">
      <MemberSignature Language="C#" Value="public virtual void WriteNode (System.Xml.XmlReader reader, bool defattr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteNode(class System.Xml.XmlReader reader, bool defattr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteNode(System.Xml.XmlReader,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteNode (reader As XmlReader, defattr As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteNode(System::Xml::XmlReader ^ reader, bool defattr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="defattr" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="reader">要從其中讀取的 <see cref="T:System.Xml.XmlReader" />。</param>
        <param name="defattr">
          若要從 <see langword="true" /> 複製預設屬性，則為 <see langword="XmlReader" />，否則為 <see langword="false" />。</param>
        <summary>在衍生類別中覆寫時，從讀取器複製所有內容至寫入器，並將讀取器移至下一個同層級 (Sibling) 的開頭。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表顯示支援的節點型別，此方法。  
  
|NodeType|WriteNode 行為|  
|--------------|------------------------|  
|`None`|寫出不論類型為何的所有節點。 也就是寫入器會消耗<xref:System.Xml.XmlReader>並寫出所有節點讀取包括屬性、 處理指示、 註解等等。<br /><br /> 發生這種情況時<xref:System.Xml.XmlReader>處於初始狀態。 (<xref:System.Xml.XmlReader.ReadState%2A?displayProperty=nameWithType>屬性會傳回`ReaderState.Initial`)。|  
|`Element`|寫出項目節點和任何屬性節點。|  
|`Attribute`|無作業。 請改用 <xref:System.Xml.XmlWriter.WriteStartAttribute%2A> 或 <xref:System.Xml.XmlWriter.WriteAttributeString%2A>。|  
|`Text`|寫出文字節點。|  
|`CDATA`|寫出 CDATA 區段節點。|  
|`EntityReference`|寫出實體參考節點。|  
|`ProcessingInstruction`|寫出處理指示節點。|  
|`Comment`|寫出註解節點。|  
|`DocumentType`|寫出文件類型節點。|  
|`SignificantWhitespace`|寫出顯著泛空白字元節點。|  
|`Whitespace`|寫出泛空白字元節點。|  
|`EndElement`|寫出結尾項目標記。|  
|`EndEntity`|無作業。|  
|`XmlDeclaration`|寫出 XML 宣告節點。|  
  
 如果讀取器中的初始狀態，這個方法會將讀取器移至檔案結尾。 如果讀取器已經在檔案結尾，或處於已關閉狀態，這個方法是無法操作。  
  
 下列 C# 程式碼會將整個 XML 輸入文件複製到主控台：  
  
```csharp  
XmlReader reader = XmlReader.Create(myfile);  
XmlWriter writer = XmlWriter.Create(Console.Out);  
writer.WriteNode(reader, false);  
```  
  
 如果您已關閉的根節點都放置在正確，下列 C# 範例會寫出該節點的文件的其他位置。  
  
```csharp  
XmlReader reader = XmlReader.Create(myfile);  
reader.Read(); // Read PI  
reader.Read(); // Read Comment  
reader.Read(); // Read DOCType  
XmlWriter writer = XmlWriter.Create(Console.Out);  
while (!reader.EOF){  
  writer.WriteNode(reader, false);  
 }  
```  
  
 如果讀取器設定為會傳回空白字元，而且寫入器已設定為縮排輸出，`WriteNode`可能會產生奇怪的輸出。 您實際上將得到雙精度浮點格式。  
  
 這個方法的非同步版本，請參閱<xref:System.Xml.XmlWriter.WriteNodeAsync%2A>。  
  
   
  
## Examples  
 下列範例會寫出至主控台的第一個和最後一個書籍節點。  
  
 [!code-cpp[XmlWriter.WriteNode#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteNode/CPP/writenode.cpp#1)]
 [!code-csharp[XmlWriter.WriteNode#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteNode/CS/writenode.cs#1)]
 [!code-vb[XmlWriter.WriteNode#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteNode/VB/writenode.vb#1)]  
  
 此範例會使用該檔案，`books.xml`作為輸入。  
  
 [!code-xml[XmlWriter.WriteNode#2](~/samples/snippets/xml/VS_Snippets_Data/XmlWriter.WriteNode/XML/books.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="reader" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="reader" /> 包含無效字元。</exception>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNode">
      <MemberSignature Language="C#" Value="public virtual void WriteNode (System.Xml.XPath.XPathNavigator navigator, bool defattr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteNode(class System.Xml.XPath.XPathNavigator navigator, bool defattr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteNode(System.Xml.XPath.XPathNavigator,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteNode (navigator As XPathNavigator, defattr As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteNode(System::Xml::XPath::XPathNavigator ^ navigator, bool defattr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigator" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="defattr" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="navigator">要複製的來源 <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
        <param name="defattr">
          <see langword="true" /> 表示複製預設屬性，否則為 <see langword="false" />。</param>
        <summary>將 <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件中的所有項目複製到寫入器。 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置保持不變。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表顯示支援`XPath`節點型別，這個方法。  
  
|XPathNodeType|WriteNode 行為|  
|-------------------|------------------------|  
|`Root`|寫出不論類型為何的所有節點。 也就是寫入器會消耗<xref:System.Xml.XPath.XPathNavigator>並寫出所有節點，從根節點 （包括屬性、 處理指示、 註解等等）。|  
|`Element`|寫出項目節點和任何屬性節點。|  
|`Attribute`|無作業。 請改用 <xref:System.Xml.XmlWriter.WriteStartAttribute%2A> 或 <xref:System.Xml.XmlWriter.WriteAttributeString%2A>。|  
|`Text`|寫出文字節點。|  
|`Namespace`|無作業。 使用<xref:System.Xml.XmlWriter.WriteStartAttribute%2A>或<xref:System.Xml.XmlWriter.WriteAttributeString%2A>方法寫入命名空間宣告。|  
|`ProcessingInstruction`|寫出處理指示節點。|  
|`Comment`|寫出註解節點。|  
|`SignificantWhitespace`|寫出顯著泛空白字元節點。|  
|`Whitespace`|寫出泛空白字元節點。|  
  
 這個方法的非同步版本，請參閱<xref:System.Xml.XmlWriter.WriteNodeAsync%2A>。  
  
   
  
## Examples  
 下列範例會使用<xref:System.Xml.XmlWriter.WriteNode%2A>方法從文件複製第一個書籍節點，並寫入主控台。  
  
 [!code-csharp[XmlWriteNode_nav#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriteNode_nav/CS/XmlWriteNode_nav.cs#1)]
 [!code-vb[XmlWriteNode_nav#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriteNode_nav/VB/XmlWriteNode_nav.vb#1)]  
  
 此範例會使用將 books.xml 檔案做為輸入。  
  
 [!code-xml[XPathXMLExamples#1](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/books.xml#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="navigator" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteNodeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
        <summary>以非同步的方式將來源物件中的每個項目複製到目前的寫入器執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這是非同步版本<xref:System.Xml.XmlWriter.WriteNode%2A>，使用相同的功能。 若要使用此方法，您必須設定<xref:System.Xml.XmlWriterSettings.Async%2A>旗標設為`true`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteNodeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteNodeAsync (System.Xml.XmlReader reader, bool defattr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteNodeAsync(class System.Xml.XmlReader reader, bool defattr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteNodeAsync(System.Xml.XmlReader,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteNodeAsync (reader As XmlReader, defattr As Boolean) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteNodeAsync(System::Xml::XmlReader ^ reader, bool defattr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="defattr" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="reader">要從其中讀取的 <see cref="T:System.Xml.XmlReader" />。</param>
        <param name="defattr">
          若要從 <see langword="true" /> 複製預設屬性，則為 <see langword="XmlReader" />，否則為 <see langword="false" />。</param>
        <summary>以非同步的方式從讀取器複製所有內容至寫入器，並將讀取器移至下一個同層級 (Sibling) 的開頭。</summary>
        <returns>表示非同步 <see langword="WriteNode" /> 作業的工作。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這是非同步版本<xref:System.Xml.XmlWriter.WriteNode%2A>，使用相同的功能。 若要使用此方法，您必須設定<xref:System.Xml.XmlWriterSettings.Async%2A>旗標設為`true`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNodeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteNodeAsync (System.Xml.XPath.XPathNavigator navigator, bool defattr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteNodeAsync(class System.Xml.XPath.XPathNavigator navigator, bool defattr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteNodeAsync(System.Xml.XPath.XPathNavigator,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteNodeAsync (navigator As XPathNavigator, defattr As Boolean) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteNodeAsync(System::Xml::XPath::XPathNavigator ^ navigator, bool defattr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Xml.XmlWriter/&lt;WriteNodeAsync&gt;c__async5))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigator" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="defattr" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="navigator">要複製的來源 <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
        <param name="defattr">
          <see langword="true" /> 表示複製預設屬性，否則為 <see langword="false" />。</param>
        <summary>以非同步方式將所有項目從 <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件複製到寫入器。 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置保持不變。</summary>
        <returns>表示非同步 <see langword="WriteNode" /> 作業的工作。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這是非同步版本<xref:System.Xml.XmlWriter.WriteNode%2A>，使用相同的功能。 若要使用此方法，您必須設定<xref:System.Xml.XmlWriterSettings.Async%2A>旗標設為`true`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteProcessingInstruction">
      <MemberSignature Language="C#" Value="public abstract void WriteProcessingInstruction (string name, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteProcessingInstruction(string name, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteProcessingInstruction(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteProcessingInstruction (name As String, text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteProcessingInstruction(System::String ^ name, System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">處理指示的名稱。</param>
        <param name="text">要包含在處理指示中的文字。</param>
        <summary>在衍生類別中覆寫時，寫出名稱與文字之間有空白的處理指示，如下所示：&lt;?name text?&gt;。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法可以用來撰寫 XML 宣告 (而非<xref:System.Xml.XmlWriter.WriteStartDocument%2A>)。 這可能導致錯誤寫入編碼屬性。 例如，下列 C# 程式碼會產生無效的 XML 文件中，因為預設的編碼為 utf-8。  
  
```csharp  
XmlWriter writer = XmlWriter.Create("output.xml");  
writer.WriteProcessingInstruction("xml", "version='1.0' encoding='UTF-16'");  
writer.WriteStartElement("root");  
writer.Close();  
```  
  
 如果`text`是`null`或`String.Empty`，這個方法會寫入`ProcessingInstruction`沒有資料內容，例如\<？ 名稱？ >。  
  
 如果文字包含無效的序列"？ >"，<xref:System.Xml.XmlWriter>可以是 throw <xref:System.ArgumentException> (<xref:System.Xml.XmlTextWriter>物件) 或插入空格 」？ > 「 若要避免撰寫不正確的 XML (<xref:System.Xml.XmlWriter>所建立的物件<xref:System.Xml.XmlWriter.Create%2A>方法)。  
  
 這個方法的非同步版本，請參閱<xref:System.Xml.XmlWriter.WriteProcessingInstructionAsync%2A>。  
  
   
  
## Examples  
 下列範例會將 XML 檔案代表活頁簿。  
  
 [!code-csharp[XmlWriter.WriteStartDocument#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteStartDocument/CS/writerbook_v2.cs#1)]
 [!code-vb[XmlWriter.WriteStartDocument#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteStartDocument/VB/writerbook_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">此文字會導致非語式正確的 XML 文件。  
  
 <paramref name="name" /> 為 <see langword="null" /> 或 <see langword="String.Empty" />。  
  
 在呼叫 <see cref="M:System.Xml.XmlWriter.WriteStartDocument" /> 之後，使用這個方法來建立 XML 宣告。</exception>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteProcessingInstructionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteProcessingInstructionAsync (string name, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteProcessingInstructionAsync(string name, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteProcessingInstructionAsync(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteProcessingInstructionAsync (name As String, text As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteProcessingInstructionAsync(System::String ^ name, System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">處理指示的名稱。</param>
        <param name="text">要包含在處理指示中的文字。</param>
        <summary>以非同步方式寫出名稱與文字之間有空白的處理指示，如下所示：&lt;?name text?&gt;。</summary>
        <returns>表示非同步 <see langword="WriteProcessingInstruction" /> 作業的工作。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這是非同步版本<xref:System.Xml.XmlWriter.WriteProcessingInstruction%2A>，使用相同的功能。 若要使用此方法，您必須設定<xref:System.Xml.XmlWriterSettings.Async%2A>旗標設為`true`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteQualifiedName">
      <MemberSignature Language="C#" Value="public virtual void WriteQualifiedName (string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteQualifiedName(string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteQualifiedName(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteQualifiedName (localName As String, ns As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteQualifiedName(System::String ^ localName, System::String ^ ns);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">要寫入的區域名稱。</param>
        <param name="ns">這個名稱的命名空間 URI。</param>
        <summary>在衍生類別中覆寫時，寫出命名空間限定名稱。 這個方法會查詢在指定之命名空間範圍中的前置詞。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`ns`產生對應至目前的預設命名空間，沒有前置詞。  
  
 當寫入屬性值，這個方法會產生前置詞如果`ns`找不到。 當寫入項目內容，它會擲回例外狀況如果`ns`找不到。  
  
> [!NOTE]
>  如果類別衍生自<xref:System.Xml.XmlWriter>不會覆寫這個方法`localName`不會檢查為有效的 W3C XML 名稱。 在這種情況下，才能呼叫這個方法，該字串的有效性可以檢查<xref:System.Xml.XmlReader.IsName%2A>方法。  
  
 這個方法的非同步版本，請參閱<xref:System.Xml.XmlWriter.WriteQualifiedNameAsync%2A>。  
  
   
  
## Examples  
 此範例會將下列項目：  
  
```xml  
<root xmlns:x="urn:abc">  
  <item href="#x:test"/>  
</root>  
```  
  
 [!code-csharp[XmlWriter_v2#5](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#5)]
 [!code-vb[XmlWriter_v2#5](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="localName" /> 為 <see langword="null" /> 或 <see langword="String.Empty" />。  
  
 <paramref name="localName" /> 不是有效的名稱。</exception>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteQualifiedNameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteQualifiedNameAsync (string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteQualifiedNameAsync(string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteQualifiedNameAsync(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteQualifiedNameAsync (localName As String, ns As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteQualifiedNameAsync(System::String ^ localName, System::String ^ ns);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Xml.XmlWriter/&lt;WriteQualifiedNameAsync&gt;c__async1))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">要寫入的區域名稱。</param>
        <param name="ns">這個名稱的命名空間 URI。</param>
        <summary>以非同步的方式寫出命名空間限定名稱。 這個方法會查詢在指定之命名空間範圍中的前置詞。</summary>
        <returns>表示非同步 <see langword="WriteQualifiedName" /> 作業的工作。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這是非同步版本<xref:System.Xml.XmlWriter.WriteQualifiedName%2A>，使用相同的功能。 若要使用此方法，您必須設定<xref:System.Xml.XmlWriterSettings.Async%2A>旗標設為`true`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteRaw">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
        <summary>在衍生類別中覆寫時，手動寫入未經處理的標記。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法的非同步版本，請參閱<xref:System.Xml.XmlWriter.WriteRawAsync%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteRaw">
      <MemberSignature Language="C#" Value="public abstract void WriteRaw (string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteRaw(string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteRaw(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteRaw (data As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteRaw(System::String ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">包含要寫入之文字的字串。</param>
        <summary>在衍生類別中覆寫時，從字串手動寫入未經處理的標記 (Raw Markup)。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法不會逸出特殊字元。  
  
> [!IMPORTANT]
>  <xref:System.Xml.XmlWriter>不會驗證資料傳遞至<xref:System.Xml.XmlWriter.WriteRaw%2A>方法。 您不應該將任意資料傳遞至這個方法。  
  
 這個方法的非同步版本，請參閱<xref:System.Xml.XmlWriter.WriteRawAsync%2A>。  
  
   
  
## Examples  
 請參閱<xref:System.Xml.XmlTextWriter.WriteRaw%2A?displayProperty=nameWithType>如需使用此方法的範例。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="data" /> 為 <see langword="null" /> 或 <see langword="String.Empty" />。</exception>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteRaw">
      <MemberSignature Language="C#" Value="public abstract void WriteRaw (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteRaw(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteRaw(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteRaw (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteRaw(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">包含要寫入之文字的字元陣列。</param>
        <param name="index">緩衝區中指示要寫入的文字開頭的位置。</param>
        <param name="count">要寫入的字元數。</param>
        <summary>在衍生類別中覆寫時，從字元緩衝區手動寫入未經處理的標記。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法不會逸出特殊字元。  
  
> [!IMPORTANT]
>  <xref:System.Xml.XmlWriter>不會驗證資料傳遞至<xref:System.Xml.XmlWriter.WriteRaw%2A>方法。 您不應該將任意資料傳遞至這個方法。  
  
 這個方法的非同步版本，請參閱<xref:System.Xml.XmlWriter.WriteRawAsync%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 或 <paramref name="count" /> 小於零。  
  
 -或-  
  
 緩衝區長度減去 <paramref name="index" /> 小於 <paramref name="count" />。</exception>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteRawAsync">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
        <summary>以非同步的方式手動寫入未經處理的標記 (Raw Markup)。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這是非同步版本<xref:System.Xml.XmlWriter.WriteRaw%2A>，使用相同的功能。 若要使用此方法，您必須設定<xref:System.Xml.XmlWriterSettings.Async%2A>旗標設為`true`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteRawAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteRawAsync (string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteRawAsync(string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteRawAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteRawAsync (data As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteRawAsync(System::String ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">包含要寫入之文字的字串。</param>
        <summary>以非同步的方式從字串手動寫入未經處理的標記 (Raw Markup)。</summary>
        <returns>表示非同步 <see langword="WriteRaw" /> 作業的工作。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這是非同步版本<xref:System.Xml.XmlWriter.WriteRaw%2A>，使用相同的功能。 若要使用此方法，您必須設定<xref:System.Xml.XmlWriterSettings.Async%2A>旗標設為`true`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteRawAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteRawAsync (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteRawAsync(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteRawAsync(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteRawAsync (buffer As Char(), index As Integer, count As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteRawAsync(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">包含要寫入之文字的字元陣列。</param>
        <param name="index">緩衝區中指示要寫入的文字開頭的位置。</param>
        <param name="count">要寫入的字元數。</param>
        <summary>以非同步的方式從字元緩衝區手動寫入未經處理的標記。</summary>
        <returns>表示非同步 <see langword="WriteRaw" /> 作業的工作。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這是非同步版本<xref:System.Xml.XmlWriter.WriteRaw%2A>，使用相同的功能。 若要使用此方法，您必須設定<xref:System.Xml.XmlWriterSettings.Async%2A>旗標設為`true`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteStartAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
        <summary>在衍生類別中覆寫時，寫入屬性的開頭。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法的非同步版本，請參閱<xref:System.Xml.XmlWriter.WriteStartAttributeAsync%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteStartAttribute">
      <MemberSignature Language="C#" Value="public void WriteStartAttribute (string localName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartAttribute(string localName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartAttribute (localName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartAttribute(System::String ^ localName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">屬性的本機名稱。</param>
        <summary>寫入具有指定之區域名稱的屬性開頭。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法可讓您撰寫使用多個寫入方法的值。  
  
 這個方法的非同步版本，請參閱<xref:System.Xml.XmlWriter.WriteStartAttributeAsync%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">緩衝區中有一個字元，其為有效的 XML 字元，但對輸出編碼而言無效。 比方說如果輸出的編碼方式為 ASCII，您應該在項目與屬性名稱中只使用範圍從 0 至 127 的字元。 無效的字元可能是在這個方法的引數中，或在先前已寫入至緩衝區的方法的引數中。 字元實體參考會盡可能逸出這類字元 (比方說在文字節點或屬性值中)。 不過，在項目與屬性名稱、註解、處理指示或 CDATA 區段中不允許字元實體參考。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartAttribute">
      <MemberSignature Language="C#" Value="public void WriteStartAttribute (string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartAttribute(string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartAttribute (localName As String, ns As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartAttribute(System::String ^ localName, System::String ^ ns);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">屬性的本機名稱。</param>
        <param name="ns">屬性的命名空間 URI。</param>
        <summary>寫入具有指定之區域名稱和命名空間 URI 之屬性的開頭。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這是更進階的版本<xref:System.Xml.XmlWriter.WriteAttributeString%2A>，可讓您使用多個寫入方法，如屬性值寫入<xref:System.Xml.XmlWriter.WriteString%2A>， <xref:System.Xml.XmlWriter.WriteQualifiedName%2A>，依此類推。  
  
 這個方法的非同步版本，請參閱<xref:System.Xml.XmlWriter.WriteStartAttributeAsync%2A>。  
  
   
  
## Examples  
 請參閱<xref:System.Xml.XmlTextWriter.WriteStartAttribute%2A?displayProperty=nameWithType>如需使用此方法的範例。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Text.EncoderFallbackException">緩衝區中有一個字元，其為有效的 XML 字元，但對輸出編碼而言無效。 比方說如果輸出的編碼方式為 ASCII，您應該在項目與屬性名稱中只使用範圍從 0 至 127 的字元。 無效的字元可能是在這個方法的引數中，或在先前已寫入至緩衝區的方法的引數中。 字元實體參考會盡可能逸出這類字元 (比方說在文字節點或屬性值中)。 不過，在項目與屬性名稱、註解、處理指示或 CDATA 區段中不允許字元實體參考。</exception>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
        <altmember cref="M:System.Xml.XmlWriter.WriteEndAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteStartAttribute">
      <MemberSignature Language="C#" Value="public abstract void WriteStartAttribute (string prefix, string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStartAttribute(string prefix, string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteStartAttribute (prefix As String, localName As String, ns As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteStartAttribute(System::String ^ prefix, System::String ^ localName, System::String ^ ns);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">屬性的命名空間前置詞。</param>
        <param name="localName">屬性的本機名稱。</param>
        <param name="ns">屬性的命名空間 URI。</param>
        <summary>在衍生類別中覆寫時，寫入具有指定的前置詞、區域名稱和命名空間 URI 之屬性的開頭。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法可讓您撰寫使用多個寫入方法的值。  
  
 這個方法的非同步版本，請參閱<xref:System.Xml.XmlWriter.WriteStartAttributeAsync%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Text.EncoderFallbackException">緩衝區中有一個字元，其為有效的 XML 字元，但對輸出編碼而言無效。 比方說如果輸出的編碼方式為 ASCII，您應該在項目與屬性名稱中只使用範圍從 0 至 127 的字元。 無效的字元可能是在這個方法的引數中，或在先前已寫入至緩衝區的方法的引數中。 字元實體參考會盡可能逸出這類字元 (比方說在文字節點或屬性值中)。 不過，在項目與屬性名稱、註解、處理指示或 CDATA 區段中不允許字元實體參考。</exception>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartAttributeAsync">
      <MemberSignature Language="C#" Value="protected internal virtual System.Threading.Tasks.Task WriteStartAttributeAsync (string prefix, string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Threading.Tasks.Task WriteStartAttributeAsync(string prefix, string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartAttributeAsync(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function WriteStartAttributeAsync (prefix As String, localName As String, ns As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Threading::Tasks::Task ^ WriteStartAttributeAsync(System::String ^ prefix, System::String ^ localName, System::String ^ ns);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">屬性的命名空間前置詞。</param>
        <param name="localName">屬性的本機名稱。</param>
        <param name="ns">屬性的命名空間 URI。</param>
        <summary>以非同步的方式寫入具有指定之前置詞、本機名稱和命名空間 URI 之屬性的開頭。</summary>
        <returns>表示非同步 <see langword="WriteStartAttribute" /> 作業的工作。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這是非同步版本<xref:System.Xml.XmlWriter.WriteStartAttribute%2A>，使用相同的功能。 若要使用此方法，您必須設定<xref:System.Xml.XmlWriterSettings.Async%2A>旗標設為`true`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteStartDocument">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
        <summary>在衍生類別中覆寫時，寫入 XML 宣告。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法的非同步版本，請參閱<xref:System.Xml.XmlWriter.WriteStartDocumentAsync%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteStartDocument">
      <MemberSignature Language="C#" Value="public abstract void WriteStartDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStartDocument() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartDocument" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteStartDocument ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteStartDocument();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在衍生類別中覆寫時，使用「1.0」版寫入 XML 宣告。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 寫入器實作的方式取決於文件的編碼方式的層級。 例如，如果<xref:System.Text.Encoding>中指定物件`XmlTextWriter`建構函式，這會決定編碼屬性的值。 這個方法不會建立獨立屬性。  
  
 當`WriteStartDocument`呼叫寫入器會驗證您要撰寫是否格式正確的 XML 文件。 例如，它會檢查 XML 宣告，第一個節點，其中，只能有一個根層級項目存在，以此類推。 如果未呼叫此方法，則寫入器會假設正在寫入的 XML 片段，並不套用任何根層級的規則。  
  
 如果`WriteStartDocument`已經呼叫，然後<xref:System.Xml.XmlWriter.WriteProcessingInstruction%2A>方法可用來建立另一個 XML 宣告，將會擲回例外狀況。  
  
 這個方法的非同步版本，請參閱<xref:System.Xml.XmlWriter.WriteStartDocumentAsync%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartDocument">
      <MemberSignature Language="C#" Value="public abstract void WriteStartDocument (bool standalone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStartDocument(bool standalone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartDocument(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteStartDocument (standalone As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteStartDocument(bool standalone);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="standalone" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="standalone">如果 <see langword="true" />，它會寫入「standalone=yes」；如果 <see langword="false" />，它會寫入「standalone=no」。</param>
        <summary>在衍生類別中覆寫時，使用「1.0」版寫入 XML 宣告與獨立屬性。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 寫入器實作的方式取決於文件的編碼方式的層級。 例如，如果<xref:System.Text.Encoding>中指定物件`XmlTextWriter`建構函式，這會決定編碼屬性的值。  
  
 當`WriteStartDocument`是呼叫，寫入器會驗證您要撰寫是否格式正確的 XML 文件。 例如，它會檢查 XML 宣告，第一個節點，其中，只能有一個根層級項目存在，以此類推。 如果未呼叫此方法，則寫入器會假設正在寫入的 XML 片段，並不套用任何根層級的規則。  
  
 如果`WriteStartDocument`已經呼叫，然後<xref:System.Xml.XmlWriter.WriteProcessingInstruction%2A>方法可用來建立另一個 XML 宣告，將會擲回例外狀況。  
  
 這個方法的非同步版本，請參閱<xref:System.Xml.XmlWriter.WriteStartDocumentAsync%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteStartDocumentAsync">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
        <summary>以非同步的方式寫入 XML 宣告。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這是非同步版本<xref:System.Xml.XmlWriter.WriteStartDocument%2A>，使用相同的功能。 若要使用此方法，您必須設定<xref:System.Xml.XmlWriterSettings.Async%2A>旗標設為`true`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteStartDocumentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteStartDocumentAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteStartDocumentAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartDocumentAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteStartDocumentAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteStartDocumentAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>以非同步的方式使用「1.0」版寫入 XML 宣告。</summary>
        <returns>表示非同步 <see langword="WriteStartDocument" /> 作業的工作。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這是非同步版本<xref:System.Xml.XmlWriter.WriteStartDocument%2A>，使用相同的功能。 若要使用此方法，您必須設定<xref:System.Xml.XmlWriterSettings.Async%2A>旗標設為`true`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartDocumentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteStartDocumentAsync (bool standalone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteStartDocumentAsync(bool standalone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartDocumentAsync(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteStartDocumentAsync (standalone As Boolean) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteStartDocumentAsync(bool standalone);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="standalone" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="standalone">如果 <see langword="true" />，它會寫入「standalone=yes」；如果 <see langword="false" />，它會寫入「standalone=no」。</param>
        <summary>以非同步的方式使用「1.0」版寫入 XML 宣告與獨立屬性。</summary>
        <returns>表示非同步 <see langword="WriteStartDocument" /> 作業的工作。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這是非同步版本<xref:System.Xml.XmlWriter.WriteStartDocument%2A>，使用相同的功能。 若要使用此方法，您必須設定<xref:System.Xml.XmlWriterSettings.Async%2A>旗標設為`true`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteStartElement">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
        <summary>在衍生類別中覆寫時，寫入指定的開頭標記。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法的非同步版本，請參閱<xref:System.Xml.XmlWriter.WriteStartElementAsync%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteStartElement">
      <MemberSignature Language="C#" Value="public void WriteStartElement (string localName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartElement(string localName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartElement(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartElement (localName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartElement(System::String ^ localName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">項目的本機名稱。</param>
        <summary>在衍生類別中覆寫時，寫出具有指定之區域名稱的開頭標記。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法的非同步版本，請參閱<xref:System.Xml.XmlWriter.WriteStartElementAsync%2A>。  
  
   
  
## Examples  
 下列範例會寫入 XML 節點。  
  
 [!code-cpp[XmlWriter.Close#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.Close/CPP/XmlWriter.Close.cpp#1)]
 [!code-csharp[XmlWriter.Close#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.Close/CS/writeelems.cs#1)]
 [!code-vb[XmlWriter.Close#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.Close/VB/writeelems.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">緩衝區中有一個字元，其為有效的 XML 字元，但對輸出編碼而言無效。 比方說如果輸出的編碼方式為 ASCII，您應該在項目與屬性名稱中只使用範圍從 0 至 127 的字元。 無效的字元可能是在這個方法的引數中，或在先前已寫入至緩衝區的方法的引數中。 字元實體參考會盡可能逸出這類字元 (比方說在文字節點或屬性值中)。 不過，在項目與屬性名稱、註解、處理指示或 CDATA 區段中不允許字元實體參考。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartElement">
      <MemberSignature Language="C#" Value="public void WriteStartElement (string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartElement(string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartElement(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartElement (localName As String, ns As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartElement(System::String ^ localName, System::String ^ ns);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">項目的本機名稱。</param>
        <param name="ns">與項目相關聯的命名空間 URI。 如果這個命名空間已經在範圍中並具有相關聯的前置詞，則寫入器也會自動寫入前置詞。</param>
        <summary>在衍生類別中覆寫時，寫入指定的開頭標記並與指定的命名空間產生關聯。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫這個方法，您可以寫入屬性，或建立後的內容使用<xref:System.Xml.XmlWriter.WriteComment%2A>， <xref:System.Xml.XmlWriter.WriteString%2A>，或`WriteStartElement`子項目。 您可以關閉其中一種項目<xref:System.Xml.XmlWriter.WriteEndElement%2A>或<xref:System.Xml.XmlWriter.WriteFullEndElement%2A>。 例如，下列 C# 程式碼：  
  
```csharp  
writer.WriteStartElement("item",null);  
writer.WriteString("some text");  
writer.WriteEndElement();  
```  
  
 會產生下列輸出：  
  
```xml  
<item>some text</item>  
```  
  
 這個方法的非同步版本，請參閱<xref:System.Xml.XmlWriter.WriteStartElementAsync%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">緩衝區中有一個字元，其為有效的 XML 字元，但對輸出編碼而言無效。 比方說如果輸出的編碼方式為 ASCII，您應該在項目與屬性名稱中只使用範圍從 0 至 127 的字元。 無效的字元可能是在這個方法的引數中，或在先前已寫入至緩衝區的方法的引數中。 字元實體參考會盡可能逸出這類字元 (比方說在文字節點或屬性值中)。 不過，在項目與屬性名稱、註解、處理指示或 CDATA 區段中不允許字元實體參考。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartElement">
      <MemberSignature Language="C#" Value="public abstract void WriteStartElement (string prefix, string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStartElement(string prefix, string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartElement(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteStartElement (prefix As String, localName As String, ns As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteStartElement(System::String ^ prefix, System::String ^ localName, System::String ^ ns);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">項目的命名空間前置詞。</param>
        <param name="localName">項目的本機名稱。</param>
        <param name="ns">與項目相關聯的命名空間 URI。</param>
        <summary>在衍生類別中覆寫時，寫入指定的開頭標記，並與指定的命名空間與前置詞產生關聯。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法的非同步版本，請參閱<xref:System.Xml.XmlWriter.WriteStartElementAsync%2A>。  
  
   
  
## Examples  
 下列範例會寫出 XML 片段。  
  
 [!code-cpp[XmlWriter.WriteElementString#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteElementString/CPP/writeelemstring_v2.cpp#1)]
 [!code-csharp[XmlWriter.WriteElementString#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteElementString/CS/writeelemstring_v2.cs#1)]
 [!code-vb[XmlWriter.WriteElementString#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteElementString/VB/writeelemstring_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">緩衝區中有一個字元，其為有效的 XML 字元，但對輸出編碼而言無效。 比方說如果輸出的編碼方式為 ASCII，您應該在項目與屬性名稱中只使用範圍從 0 至 127 的字元。 無效的字元可能是在這個方法的引數中，或在先前已寫入至緩衝區的方法的引數中。 字元實體參考會盡可能逸出這類字元 (比方說在文字節點或屬性值中)。 不過，在項目與屬性名稱、註解、處理指示或 CDATA 區段中不允許字元實體參考。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartElementAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteStartElementAsync (string prefix, string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteStartElementAsync(string prefix, string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartElementAsync(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteStartElementAsync (prefix As String, localName As String, ns As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteStartElementAsync(System::String ^ prefix, System::String ^ localName, System::String ^ ns);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">項目的命名空間前置詞。</param>
        <param name="localName">項目的本機名稱。</param>
        <param name="ns">與項目相關聯的命名空間 URI。</param>
        <summary>以非同步的方式寫入指定的開頭標記，並將它與指定的命名空間與前置詞產生關聯。</summary>
        <returns>表示非同步 <see langword="WriteStartElement" /> 作業的工作。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這是非同步版本<xref:System.Xml.XmlWriter.WriteStartElement%2A>，使用相同的功能。 若要使用此方法，您必須設定<xref:System.Xml.XmlWriterSettings.Async%2A>旗標設為`true`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteState">
      <MemberSignature Language="C#" Value="public abstract System.Xml.WriteState WriteState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.WriteState WriteState" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriter.WriteState" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property WriteState As WriteState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xml::WriteState WriteState { System::Xml::WriteState get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.WriteState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在衍生類別中覆寫時，取得寫入器的狀態。</summary>
        <value>其中一個 <see cref="T:System.Xml.WriteState" /> 值。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public abstract void WriteString (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteString(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteString (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteString(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">要寫入的文字。</param>
        <summary>在衍生類別中覆寫時，寫入指定的文字內容。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteString` 會執行下列動作：  
  
-   字元`&`， `<`，和`>`會取代`&amp;`， `&lt;`，和`&gt;`分別。  
  
-   預設行為<xref:System.Xml.XmlWriter>使用建立<xref:System.Xml.XmlWriter.Create%2A>會擲回<xref:System.ArgumentException>時嘗試寫入的字元值範圍從 0 x-0x1F （不含空白字元 0x9、 0xA 和為 0xD） 中。 可以寫入這些無效的 XML 字元，藉由建立<xref:System.Xml.XmlWriter>與<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>屬性設定為`false`。 這樣會導致數字字元實體所取代的字元 (（& s)\#0; 透過 & #0x1F)。 此外，<xref:System.Xml.XmlTextWriter>以建立`new`運算子將會使用數字字元實體無效的字元取代預設值。  
  
 **請注意**Microsoft 不會鼓勵寫入無效的 XML 字元，因為許多取用 XML 的應用程式並非設計來處理無效的字元的作法。  
  
-   如果`WriteString`呼叫在屬性值的內容中，以取代 double 和單一引號`&quot;`和`&apos;`分別。  
  
 這在輸入字串，例如`test<item>test`寫出做為  
  
```  
test&lt;item&gt;test  
```  
  
 如果`text`是`null`或`String.Empty`，這個方法會寫入任何資料內容與文字節點。  
  
 這個方法的非同步版本，請參閱<xref:System.Xml.XmlWriter.WriteStringAsync%2A>。  
  
   
  
## Examples  
 下列範例會寫入 XML 節點。  
  
 [!code-cpp[XmlWriter.Close#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.Close/CPP/XmlWriter.Close.cpp#1)]
 [!code-csharp[XmlWriter.Close#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.Close/CS/writeelems.cs#1)]
 [!code-vb[XmlWriter.Close#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.Close/VB/writeelems.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">文字字串包含無效的 Surrogate 字組。</exception>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteStringAsync (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteStringAsync(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStringAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteStringAsync (text As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteStringAsync(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">要寫入的文字。</param>
        <summary>以非同步的方式寫入指定的文字內容。</summary>
        <returns>表示非同步 <see langword="WriteString" /> 作業的工作。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這是非同步版本<xref:System.Xml.XmlWriter.WriteString%2A>，使用相同的功能。 若要使用此方法，您必須設定<xref:System.Xml.XmlWriterSettings.Async%2A>旗標設為`true`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteSurrogateCharEntity">
      <MemberSignature Language="C#" Value="public abstract void WriteSurrogateCharEntity (char lowChar, char highChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteSurrogateCharEntity(char lowChar, char highChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteSurrogateCharEntity(System.Char,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteSurrogateCharEntity (lowChar As Char, highChar As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteSurrogateCharEntity(char lowChar, char highChar);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lowChar" Type="System.Char" />
        <Parameter Name="highChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="lowChar">低 Surrogate。 這必須是一個介於 0xDC00 和 0xDFFF 之間的值。</param>
        <param name="highChar">高 Surrogate。 這必須一個是介於 0xD800 和 0xDBFF 之間的值。</param>
        <summary>在衍生類別中覆寫時，產生和寫入 Surrogate 字元字組的 Surrogate 字元實體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法僅適用於使用 utf-16 編碼的系統上。  
  
 以十六進位格式寫入 surrogate 字元實體。 Surrogate 字元的範圍是以 #x10FFFF #x 10000。 下列公式用來產生 surrogate 字元實體: (`highChar` -0xD800) * 0x400 + (`lowChar` -0xDC00) + 0x10000  
  
 HTML 和 XML 文件的字元集 （以及數字字元參考的標記法） 根據 UCS [ISO 10646]。 來源文件中的單一數字字元參考可能因此在某些情況下對應到兩個 16 位元單位數 （為高 surrogate 和低 surrogate） 的字串。 這些 16 位元的單位稱為 「 surrogate 字組 」。  
  
 如需有關 (instance) 或字元的詳細資訊，請參閱的區段 3.7 Unicode standard 3.0/Unicode 2.0 位於http://www.unicode.org，2.2 小節 W3C XML 1.0 版建議事項位於或http://www.w3.org/TR/REC-xml#charsets。  
  
 這個方法的非同步版本，請參閱<xref:System.Xml.XmlWriter.WriteSurrogateCharEntityAsync%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">傳送無效的 Surrogate 字元字組。</exception>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteSurrogateCharEntityAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteSurrogateCharEntityAsync (char lowChar, char highChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteSurrogateCharEntityAsync(char lowChar, char highChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteSurrogateCharEntityAsync(System.Char,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteSurrogateCharEntityAsync (lowChar As Char, highChar As Char) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteSurrogateCharEntityAsync(char lowChar, char highChar);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lowChar" Type="System.Char" />
        <Parameter Name="highChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="lowChar">低 Surrogate。 這必須是一個介於 0xDC00 和 0xDFFF 之間的值。</param>
        <param name="highChar">高 Surrogate。 這必須一個是介於 0xD800 和 0xDBFF 之間的值。</param>
        <summary>以非同步的方式產生和寫入 Surrogate 字元字組的 Surrogate 字元實體。</summary>
        <returns>表示非同步 <see langword="WriteSurrogateCharEntity" /> 作業的工作。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這是非同步版本<xref:System.Xml.XmlWriter.WriteSurrogateCharEntity%2A>，使用相同的功能。 若要使用此方法，您必須設定<xref:System.Xml.XmlWriterSettings.Async%2A>旗標設為`true`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteValue">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
        <summary>寫入單一簡單類型的值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlWriter.WriteValue%2A>方法接受 common language runtime (CLR) 簡單類型值、 將它們轉換成其字串表示法，根據 XML 結構描述定義語言 (XSD) 資料類型轉換規則，以及使用縮小寫入<xref:System.Xml.XmlWriter.WriteString%2A>方法。 這可讓您管線與最小重新剖析額外負荷傳遞之間的資料時的簡單型別值<xref:System.Xml.XPath.XPathDocument>， <xref:System.Xml.XmlReader>，和<xref:System.Xml.XmlWriter>物件。 這項功能時也很有用處理 CLR 簡單類型和<xref:System.Xml.XmlWriter>執行個體。 您可以呼叫<xref:System.Xml.XmlWriter.WriteValue%2A>方法寫入具類型的值，而非使用中的方法<xref:System.Xml.XmlConvert>類別，以寫出之前，將具類型的資料轉換成字串值。  
  
 非同步作業，將轉換的傳回值<xref:System.Xml.XmlWriter.WriteValue%2A>到字串，使用<xref:System.Xml.XmlWriter.WriteStringAsync%2A>方法。  
  
 下表顯示的預設 XSD 資料型別對應至 CLR 型別。  
  
 如果 CLR 物件是清單型別 (如 <xref:System.Collections.IEnumerable>、<xref:System.Collections.IList> 或 <xref:System.Collections.ICollection>)，則會將其視為數值型別的陣列。  
  
|CLR 類型|預設的 XSD 資料類型|  
|--------------|---------------------------|  
|<xref:System.Boolean?displayProperty=nameWithType>|xsd:boolean|  
|<xref:System.Byte?displayProperty=nameWithType>**|xsd:integer|  
|<xref:System.Byte?displayProperty=nameWithType> 陣列|xsd:base64Binary|  
|<xref:System.Char?displayProperty=nameWithType>**|xsd:string|  
|<xref:System.DateTime?displayProperty=nameWithType>|xsd:dateTime|  
|<xref:System.Decimal?displayProperty=nameWithType>|xsd:decimal|  
|<xref:System.Double?displayProperty=nameWithType>|xsd:double|  
|<xref:System.Int16?displayProperty=nameWithType>**|xsd:integer|  
|<xref:System.Int32?displayProperty=nameWithType>|xsd:integer|  
|<xref:System.Int64?displayProperty=nameWithType>|xsd:integer|  
|<xref:System.Single?displayProperty=nameWithType>|xsd:float|  
|<xref:System.String?displayProperty=nameWithType>|xsd:string|  
|<xref:System.IO.TextReader?displayProperty=nameWithType>|xsd:string|  
|<xref:System.IO.BinaryReader?displayProperty=nameWithType>|xsd:base64Binary|  
  
 **這些型別與 CLS 不相容。 不會具有對應的<xref:System.Xml.XmlWriter.WriteValue%2A>方法。  
  
 如果連續多次呼叫 <xref:System.Xml.XmlWriter.WriteValue%2A>，則不會使用空格分隔各個值。 您必須在呼叫 <xref:System.Xml.XmlWriter.WriteWhitespace%2A> 之間呼叫 <xref:System.Xml.XmlWriter.WriteValue%2A>，以插入泛空白字元。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteValue (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteValue(bool value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">要寫入的 <see cref="T:System.Boolean" /> 值。</param>
        <summary>寫入 <see cref="T:System.Boolean" /> 值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會採用 common language runtime 物件，並將輸入的值轉換成使用 XML 結構描述定義語言 (XSD) 資料類型轉換規則所需的輸出類型。  
  
 呼叫 <xref:System.Xml.XmlWriter.WriteValue%2A> 方法時，<xref:System.Xml.XmlWriter> 會根據 XML 結構描述 (XSD) 資料型別規則將值轉換成其字串表示，並使用 <xref:System.Xml.XmlWriter.WriteString%2A> 方法將其寫出。  
  
 如果連續多次呼叫 <xref:System.Xml.XmlWriter.WriteValue%2A>，則不會使用空格分隔各個值。 您必須在呼叫 <xref:System.Xml.XmlWriter.WriteWhitespace%2A> 之間呼叫 <xref:System.Xml.XmlWriter.WriteValue%2A>，以插入泛空白字元。 傳遞至陣列型別<xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=nameWithType>多載以寫出相異值的陣列。  
  
 如果此方法會在呼叫<xref:System.Xml.XmlWriter>純文字，具類型的值序列化成文字，該輸出執行個體。  
  
 非同步作業，將這個方法的傳回值轉換為字串，並使用<xref:System.Xml.XmlWriter.WriteStringAsync%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">指定了無效的值。</exception>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteValue (value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteValue(DateTime value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">要寫入的 <see cref="T:System.DateTime" /> 值。</param>
        <summary>寫入 <see cref="T:System.DateTime" /> 值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會採用 common language runtime 物件，並將輸入的值轉換成使用 XML 結構描述定義語言 (XSD) 資料類型轉換規則所需的輸出類型。  
  
 呼叫 <xref:System.Xml.XmlWriter.WriteValue%2A> 方法時，<xref:System.Xml.XmlWriter> 會根據 XML 結構描述 (XSD) 資料型別規則將值轉換成其字串表示，並使用 <xref:System.Xml.XmlWriter.WriteString%2A> 方法將其寫出。  
  
 如果連續多次呼叫 <xref:System.Xml.XmlWriter.WriteValue%2A>，則不會使用空格分隔各個值。 您必須在呼叫 <xref:System.Xml.XmlWriter.WriteWhitespace%2A> 之間呼叫 <xref:System.Xml.XmlWriter.WriteValue%2A>，以插入泛空白字元。 傳遞至陣列型別<xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=nameWithType>多載以寫出相異值的陣列。  
  
 如果此方法會在呼叫<xref:System.Xml.XmlWriter>純文字，具類型的值序列化成文字，該輸出執行個體。  
  
 非同步作業，將這個方法的傳回值轉換為字串，並使用<xref:System.Xml.XmlWriter.WriteStringAsync%2A>方法。  
  
   
  
## Examples  
 下列範例會將書籍節點，使用具類型的資料。  
  
 [!code-csharp[XmlWriter_v2#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#1)]
 [!code-vb[XmlWriter_v2#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">指定了無效的值。</exception>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteValue (value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteValue(DateTimeOffset value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="value">要寫入的 <see cref="T:System.DateTimeOffset" /> 值。</param>
        <summary>寫入 <see cref="T:System.DateTimeOffset" /> 值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 非同步作業，將這個方法的傳回值轉換為字串，並使用<xref:System.Xml.XmlWriter.WriteStringAsync%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteValue (value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteValue(System::Decimal value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">要寫入的 <see cref="T:System.Decimal" /> 值。</param>
        <summary>寫入 <see cref="T:System.Decimal" /> 值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會採用 common language runtime 物件，並將輸入的值轉換成使用 XML 結構描述定義語言 (XSD) 資料類型轉換規則所需的輸出類型。  
  
 呼叫 <xref:System.Xml.XmlWriter.WriteValue%2A> 方法時，<xref:System.Xml.XmlWriter> 會根據 XML 結構描述 (XSD) 資料型別規則將值轉換成其字串表示，並使用 <xref:System.Xml.XmlWriter.WriteString%2A> 方法將其寫出。  
  
 如果連續多次呼叫 <xref:System.Xml.XmlWriter.WriteValue%2A>，則不會使用空格分隔各個值。 您必須在呼叫 <xref:System.Xml.XmlWriter.WriteWhitespace%2A> 之間呼叫 <xref:System.Xml.XmlWriter.WriteValue%2A>，以插入泛空白字元。 傳遞至陣列型別<xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=nameWithType>多載以寫出相異值的陣列。  
  
 如果此方法會在呼叫<xref:System.Xml.XmlWriter>純文字，具類型的值序列化成文字，該輸出執行個體。  
  
 非同步作業，將這個方法的傳回值轉換為字串，並使用<xref:System.Xml.XmlWriter.WriteStringAsync%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">指定了無效的值。</exception>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteValue (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteValue(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">要寫入的 <see cref="T:System.Double" /> 值。</param>
        <summary>寫入 <see cref="T:System.Double" /> 值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會採用 common language runtime 物件，並將輸入的值轉換成使用 XML 結構描述定義語言 (XSD) 資料類型轉換規則所需的輸出類型。  
  
 呼叫 <xref:System.Xml.XmlWriter.WriteValue%2A> 方法時，<xref:System.Xml.XmlWriter> 會根據 XML 結構描述 (XSD) 資料型別規則將值轉換成其字串表示，並使用 <xref:System.Xml.XmlWriter.WriteString%2A> 方法將其寫出。  
  
 如果連續多次呼叫 <xref:System.Xml.XmlWriter.WriteValue%2A>，則不會使用空格分隔各個值。 您必須在呼叫 <xref:System.Xml.XmlWriter.WriteWhitespace%2A> 之間呼叫 <xref:System.Xml.XmlWriter.WriteValue%2A>，以插入泛空白字元。 傳遞至陣列型別<xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=nameWithType>多載以寫出相異值的陣列。  
  
 如果此方法會在呼叫<xref:System.Xml.XmlWriter>純文字，具類型的值序列化成文字，該輸出執行個體。  
  
 非同步作業，將這個方法的傳回值轉換為字串，並使用<xref:System.Xml.XmlWriter.WriteStringAsync%2A>方法。  
  
   
  
## Examples  
 下列範例會將書籍節點，使用具類型的資料。  
  
 [!code-csharp[XmlWriter_v2#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#1)]
 [!code-vb[XmlWriter_v2#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">指定了無效的值。</exception>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteValue (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteValue(int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">要寫入的 <see cref="T:System.Int32" /> 值。</param>
        <summary>寫入 <see cref="T:System.Int32" /> 值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會採用 common language runtime 物件，並將輸入的值轉換成使用 XML 結構描述定義語言 (XSD) 資料類型轉換規則所需的輸出類型。  
  
 呼叫 <xref:System.Xml.XmlWriter.WriteValue%2A> 方法時，<xref:System.Xml.XmlWriter> 會根據 XML 結構描述 (XSD) 資料型別規則將值轉換成其字串表示，並使用 <xref:System.Xml.XmlWriter.WriteString%2A> 方法將其寫出。  
  
 如果連續多次呼叫 <xref:System.Xml.XmlWriter.WriteValue%2A>，則不會使用空格分隔各個值。 您必須在呼叫 <xref:System.Xml.XmlWriter.WriteWhitespace%2A> 之間呼叫 <xref:System.Xml.XmlWriter.WriteValue%2A>，以插入泛空白字元。 傳遞至陣列型別<xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=nameWithType>多載以寫出相異值的陣列。  
  
 如果此方法會在呼叫<xref:System.Xml.XmlWriter>純文字，具類型的值序列化成文字，該輸出執行個體。  
  
 非同步作業，將這個方法的傳回值轉換為字串，並使用<xref:System.Xml.XmlWriter.WriteStringAsync%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">指定了無效的值。</exception>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteValue (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteValue(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">要寫入的 <see cref="T:System.Int64" /> 值。</param>
        <summary>寫入 <see cref="T:System.Int64" /> 值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會採用 common language runtime 物件，並將輸入的值轉換成使用 XML 結構描述定義語言 (XSD) 資料類型轉換規則所需的輸出類型。  
  
 呼叫 <xref:System.Xml.XmlWriter.WriteValue%2A> 方法時，<xref:System.Xml.XmlWriter> 會根據 XML 結構描述 (XSD) 資料型別規則將值轉換成其字串表示，並使用 <xref:System.Xml.XmlWriter.WriteString%2A> 方法將其寫出。  
  
 如果連續多次呼叫 <xref:System.Xml.XmlWriter.WriteValue%2A>，則不會使用空格分隔各個值。 您必須在呼叫 <xref:System.Xml.XmlWriter.WriteWhitespace%2A> 之間呼叫 <xref:System.Xml.XmlWriter.WriteValue%2A>，以插入泛空白字元。 傳遞至陣列型別<xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=nameWithType>多載以寫出相異值的陣列。  
  
 如果此方法會在呼叫<xref:System.Xml.XmlWriter>純文字，具類型的值序列化成文字，該輸出執行個體。  
  
 非同步作業，將這個方法的傳回值轉換為字串，並使用<xref:System.Xml.XmlWriter.WriteStringAsync%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">指定了無效的值。</exception>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteValue (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteValue(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">要寫入的物件值。  
  
 **附註**：使用 .NET Framework 3.5 的版本時，這個方法會接受 <see cref="T:System.DateTimeOffset" /> 作為參數。</param>
        <summary>寫入物件值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會採用 common language runtime (CLR) 物件，並將輸入的值轉換成使用 XML 結構描述定義語言 (XSD) 資料類型轉換規則所需的輸出類型。  
  
 如果 CLR 物件是清單型別如<xref:System.Collections.IEnumerable>， <xref:System.Collections.IList>，或<xref:System.Collections.ICollection>，它會被視為實值類型的陣列。 <xref:System.Xml.XmlWriter>轉換成其字串表示，根據 XML 結構描述 (XSD) 資料型別值規則，並將它寫出使用<xref:System.Xml.XmlWriter.WriteString%2A>方法。  
  
 如果此方法會在呼叫<xref:System.Xml.XmlWriter>純文字，具類型的值序列化成文字，該輸出執行個體。  
  
 非同步作業，將這個方法的傳回值轉換為字串，並使用<xref:System.Xml.XmlWriter.WriteStringAsync%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">指定了無效的值。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteValue (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteValue(float value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">要寫入的單精確度浮點數。</param>
        <summary>寫入單精確度浮點數。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會採用 common language runtime 物件，並將輸入的值轉換成使用 XML 結構描述定義語言 (XSD) 資料類型轉換規則所需的輸出類型。  
  
 呼叫 <xref:System.Xml.XmlWriter.WriteValue%2A> 方法時，<xref:System.Xml.XmlWriter> 會根據 XML 結構描述 (XSD) 資料型別規則將值轉換成其字串表示，並使用 <xref:System.Xml.XmlWriter.WriteString%2A> 方法將其寫出。  
  
 如果連續多次呼叫 <xref:System.Xml.XmlWriter.WriteValue%2A>，則不會使用空格分隔各個值。 您必須在呼叫 <xref:System.Xml.XmlWriter.WriteWhitespace%2A> 之間呼叫 <xref:System.Xml.XmlWriter.WriteValue%2A>，以插入泛空白字元。 傳遞至陣列型別<xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=nameWithType>多載以寫出相異值的陣列。  
  
 如果此方法會在呼叫<xref:System.Xml.XmlWriter>純文字，具類型的值序列化成文字，該輸出執行個體。  
  
 非同步作業，將這個方法的傳回值轉換為字串，並使用<xref:System.Xml.XmlWriter.WriteStringAsync%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">指定了無效的值。</exception>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteValue (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteValue(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">要寫入的 <see cref="T:System.String" /> 值。</param>
        <summary>寫入 <see cref="T:System.String" /> 值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會採用 common language runtime 物件，並將輸入的值轉換成使用 XML 結構描述定義語言 (XSD) 資料類型轉換規則所需的輸出類型。  
  
 如果連續多次呼叫 <xref:System.Xml.XmlWriter.WriteValue%2A>，則不會使用空格分隔各個值。 您必須在呼叫 <xref:System.Xml.XmlWriter.WriteWhitespace%2A> 之間呼叫 <xref:System.Xml.XmlWriter.WriteValue%2A>，以插入泛空白字元。 傳遞至陣列型別<xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=nameWithType>多載以寫出相異值的陣列。  
  
 如果此方法會在呼叫<xref:System.Xml.XmlWriter>純文字，具類型的值序列化成文字，該輸出執行個體。  
  
 非同步作業，使用<xref:System.Xml.XmlWriter.WriteStringAsync%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">指定了無效的值。</exception>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteWhitespace">
      <MemberSignature Language="C#" Value="public abstract void WriteWhitespace (string ws);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteWhitespace(string ws) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteWhitespace(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteWhitespace (ws As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteWhitespace(System::String ^ ws);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ws" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ws">空白字元的字串。</param>
        <summary>在衍生類別中覆寫時，寫出指定的空白字元。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法用來手動格式化文件。  
  
 這個方法的非同步版本，請參閱<xref:System.Xml.XmlWriter.WriteWhitespaceAsync%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">字串包含非泛空白字元。</exception>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteWhitespaceAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteWhitespaceAsync (string ws);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteWhitespaceAsync(string ws) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteWhitespaceAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteWhitespaceAsync (ws As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteWhitespaceAsync(System::String ^ ws);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ws" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ws">空白字元的字串。</param>
        <summary>以非同步的方式寫出指定的空白字元。</summary>
        <returns>表示非同步 <see langword="WriteWhitespace" /> 作業的工作。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這是非同步版本<xref:System.Xml.XmlWriter.WriteWhitespace%2A>，使用相同的功能。 若要使用此方法，您必須設定<xref:System.Xml.XmlWriterSettings.Async%2A>旗標設為`true`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      </Docs>
    </Member>
    <Member MemberName="XmlLang">
      <MemberSignature Language="C#" Value="public virtual string XmlLang { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string XmlLang" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriter.XmlLang" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property XmlLang As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ XmlLang { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>當在衍生類別中覆寫時，取得目前<see langword="xml:lang" />範圍。</summary>
        <value>目前的 <see langword="xml:lang" /> 範圍。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性允許一個元件，以找出哪種狀態另一個元件已離開寫入器。 例如，可能是一個元件要通知另產生哪一個語言的說明文字。 語言資訊藉由撰寫溝通`xml:lang`屬性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      </Docs>
    </Member>
    <Member MemberName="XmlSpace">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlSpace XmlSpace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlSpace XmlSpace" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriter.XmlSpace" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property XmlSpace As XmlSpace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlSpace XmlSpace { System::Xml::XmlSpace get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlSpace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在衍生類別中覆寫時，取得表示目前 <see langword="xml:space" /> 範圍的 <see cref="T:System.Xml.XmlSpace" />。</summary>
        <value>
          <see langword="XmlSpace" />，表示目前的 <see langword="xml:space" /> 範圍。  
  
 <list type="table"><listheader><term> 值  
  
 </term><description> 意義  
  
 </description></listheader><item><term><see langword="None" /></term><description> 這是預設值，如果沒有<see langword="xml:space" />有範圍。  
  
 </description></item><item><term><see langword="Default" /></term><description> 目前的範圍是<see langword="xml:space" />="default"。  
  
 </description></item><item><term><see langword="Preserve" /></term><description> 目前的範圍是<see langword="xml:space" />="preserve"。  
  
 </description></item></list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這可讓一個元件，找出另一個元件中的寫入器所處的狀態。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      </Docs>
    </Member>
  </Members>
</Type>