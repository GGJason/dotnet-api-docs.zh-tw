<Type Name="IFragmentCapableXmlDictionaryWriter" FullName="System.Xml.IFragmentCapableXmlDictionaryWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6eeae5f0aa75198bc92ed3a5d109c67e97912714" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58705849" /></Metadata><TypeSignature Language="C#" Value="public interface IFragmentCapableXmlDictionaryWriter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IFragmentCapableXmlDictionaryWriter" />
  <TypeSignature Language="DocId" Value="T:System.Xml.IFragmentCapableXmlDictionaryWriter" />
  <TypeSignature Language="VB.NET" Value="Public Interface IFragmentCapableXmlDictionaryWriter" />
  <TypeSignature Language="C++ CLI" Value="public interface class IFragmentCapableXmlDictionaryWriter" />
  <TypeSignature Language="F#" Value="type IFragmentCapableXmlDictionaryWriter = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
    <AssemblyVersion>4.1.3.0</AssemblyVersion>
    <AssemblyVersion>4.1.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>包含在經由 <see cref="T:System.Xml.XmlDictionaryWriter" /> 實作之後即可用來處理 XML 片段的屬性和方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個類別會定義與 <xref:System.Xml.XmlDictionaryWriter> 寫入器的能力有關的屬性和方法，以便這個寫入器能夠將其輸出部分 (「片段」) 重新導向至與用來建立它的資料流不同的資料流，並在稍後將重新導向時所擷取的這類片段直接重新插入至相同寫入器的主要資料流。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CanFragment">
      <MemberSignature Language="C#" Value="public bool CanFragment { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanFragment" />
      <MemberSignature Language="DocId" Value="P:System.Xml.IFragmentCapableXmlDictionaryWriter.CanFragment" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanFragment As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanFragment { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanFragment : bool" Usage="System.Xml.IFragmentCapableXmlDictionaryWriter.CanFragment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，這個值會指出這個 <see cref="T:System.Xml.XmlDictionaryWriter" /> 是否可以處理 XML 片段。</summary>
        <value>如果這個 <see cref="T:System.Xml.XmlDictionaryWriter" /> 可以處理 XML 片段，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 傳回`true`如果實作這個介面的寫入器可以產生和接受 XML 片段。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndFragment">
      <MemberSignature Language="C#" Value="public void EndFragment ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndFragment() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.IFragmentCapableXmlDictionaryWriter.EndFragment" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndFragment ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndFragment();" />
      <MemberSignature Language="F#" Value="abstract member EndFragment : unit -&gt; unit" Usage="iFragmentCapableXmlDictionaryWriter.EndFragment " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>結束 XML 片段的處理。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 停止將輸出重新導向至對應的 `StartFragment` 呼叫所提供的資料流。 在這個呼叫之後，XML 的寫入輸出會在 `StartFragment` 呼叫之前進入寫入器原本使用的資料流。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartFragment">
      <MemberSignature Language="C#" Value="public void StartFragment (System.IO.Stream stream, bool generateSelfContainedTextFragment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartFragment(class System.IO.Stream stream, bool generateSelfContainedTextFragment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.IFragmentCapableXmlDictionaryWriter.StartFragment(System.IO.Stream,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartFragment(System::IO::Stream ^ stream, bool generateSelfContainedTextFragment);" />
      <MemberSignature Language="F#" Value="abstract member StartFragment : System.IO.Stream * bool -&gt; unit" Usage="iFragmentCapableXmlDictionaryWriter.StartFragment (stream, generateSelfContainedTextFragment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="generateSelfContainedTextFragment" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream">要寫入的資料流。</param>
        <param name="generateSelfContainedTextFragment">如果為 <see langword="true" />，則會重新宣告任何已在片段內使用、但卻是在該片段外部宣告的命名空間；如果為 <see langword="false" />，則不會重新宣告命名空間。</param>
        <summary>開始處理 XML 片段。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 暫時開始將 XML 輸出的寫入重新導向到提供的資料流，直到 `EndFragment` 被呼叫為止。 如果 `generateSelfContainedTextFragment` 為 `true`，則重新導向的 XML 輸出永遠是文字 XML，而且就其命名空間內容而言屬於獨立的 (Self-Contained)。 `StartFragment`() 呼叫無法以巢狀方式進行。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteFragment">
      <MemberSignature Language="C#" Value="public void WriteFragment (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteFragment(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.IFragmentCapableXmlDictionaryWriter.WriteFragment(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteFragment (buffer As Byte(), offset As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteFragment(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberSignature Language="F#" Value="abstract member WriteFragment : byte[] * int * int -&gt; unit" Usage="iFragmentCapableXmlDictionaryWriter.WriteFragment (buffer, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">要寫入的緩衝區。</param>
        <param name="offset">要在 <paramref name="buffer" /> 中進行寫入的起始位置。</param>
        <param name="count">要寫入至 <paramref name="buffer" /> 的位元組數目。</param>
        <summary>將 XML 片段寫入至寫入器的基礎資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 寫入在 `StartFragment` 與 `EndFragment` 之間擷取的片段，並回呼至 XmlDictionaryWriter 的主要資料流中。 寫入的片段是 `count` 個位元組，且起始於所提供 `offset` 中的索引 `buffer`。 如果提供的片段不是使用這個寫入器執行個體所擷取，則表示此行為是未定義的。  
  
   
  
## Examples  
  
```csharp  
MemoryStream stream = new MemoryStream();  
MemoryStream fragmentStream = new MemoryStream();  
XmlDictionaryWriter writer = XmlDictionaryWriter.CreateTextWriter(stream);  
IXmlFragmentCapableXmlDictionaryWriter fragmentWriter = writer as IXmlFragmentCapableXmlDictionaryWriter;  
if (fragmentWriter == null || !fragmentWriter.CanFragment)  
{  
Console.WriteLine("This writer doesn't support fragments");  
return;  
}  
writer.WriteStartElement("Root");  
fragmentWriter.StartFragment(fragmentStream, false);  
writer.WriteStartElement("Body");  
writer.WriteString("This is my body");  
writer.WriteEndElement();  
fragmentWriter.EndFragment();  
writer.WriteStartElement("CharsInTheBody");  
writer.WriteValue(fragmentStream.Length);  
writer.WriteEndElement();  
fragmentWriter.WriteFragment(fragmentStream.GetBuffer(), 0, (int)fragmentStream.Length);  
writer.WriteEndElement(); // Root  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>