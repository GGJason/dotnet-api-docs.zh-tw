<Type Name="XmlReaderSettings" FullName="System.Xml.XmlReaderSettings">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ae931c958dae3132cfa810019a63792586fde5dd" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58696527" /></Metadata><TypeSignature Language="C#" Value="public sealed class XmlReaderSettings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XmlReaderSettings extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlReaderSettings" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XmlReaderSettings" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlReaderSettings sealed" />
  <TypeSignature Language="F#" Value="type XmlReaderSettings = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>指定要在由 <see cref="T:System.Xml.XmlReader" /> 方法建立的 <see cref="Overload:System.Xml.XmlReader.Create" /> 物件上支援的一組功能。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您使用<xref:System.Xml.XmlReader.Create%2A>方法，以取得<xref:System.Xml.XmlReader>執行個體。 這個方法會使用<xref:System.Xml.XmlReaderSettings>類別，以指定要在實作哪些功能<xref:System.Xml.XmlReader>物件，它會建立。  
  
 請參閱的 < 備註 > 一節<xref:System.Xml.XmlReader>和<xref:System.Xml.XmlReader.Create%2A>參考頁面，如需有關要使用的一致性檢查、 驗證和其他常見案例的設定資訊。 請參閱<xref:System.Xml.XmlReaderSettings.%23ctor>建構函式，如需預設設定的清單。  
  
## <a name="security-considerations"></a>安全性考量  
 使用時，請考慮下列<xref:System.Xml.XmlReaderSettings>類別。  
  
-   依預設，不會設定 <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> 物件的 <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> 及 <xref:System.Xml.XmlReaderSettings> 驗證旗標。 當設定這些旗標時，<xref:System.Xml.XmlReaderSettings.XmlResolver%2A> 物件的 <xref:System.Xml.XmlReaderSettings> 可用於解析在 <xref:System.Xml.XmlReader> 的執行個體文件中發現的結構描述位置。 如果<xref:System.Xml.XmlReaderSettings.XmlResolver%2A>物件是否`null`，則不會解析結構描述位置即使<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema>和<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation>設定驗證旗標。  
  
-   驗證期間加入的結構描述會加入新型別，並可變更要驗證之物件的驗證結果。 因此，外部結構描述應僅從受信任的來源解析。  
  
-   驗證錯誤訊息可能會公開敏感的內容模型的資訊。 驗證錯誤和警告訊息則會使用處理<xref:System.Xml.Schema.ValidationEventHandler>委派，或公開為<xref:System.Xml.Schema.XmlSchemaValidationException>如果沒有事件處理常式提供給<xref:System.Xml.XmlReaderSettings>物件 (不會造成驗證警告<xref:System.Xml.Schema.XmlSchemaValidationException>擲回)。 在不受信任的情況下，應該不會公開此內容模型的資訊。 依預設會隱藏驗證警告訊息，並可以藉由設定報告<xref:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings>旗標。  
  
-   <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A>屬性<xref:System.Xml.Schema.XmlSchemaValidationException>傳回至造成例外狀況的結構描述檔案的 URI 路徑。 <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A>屬性不應公開受信任的案例中。  
  
-   停用<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints>旗標 （預設為啟用） 時，建議使用文件的大部分驗證、 不受信任、 大型 XML 文件中的高可用性的情況下，針對具有識別條件約束的結構描述。  
  
-   <xref:System.Xml.XmlReaderSettings> 物件可以包含機密資訊 (如使用者認證)。 快取 <xref:System.Xml.XmlReaderSettings> 物件，或將 <xref:System.Xml.XmlReaderSettings> 物件從一個元件傳遞至另一元件時，請務必小心。  
  
-   DTD 處理預設會停用。 如果您啟用 DTD 處理，您需要留意的 dtd 來自不受信任的來源和可能的阻絕服務攻擊。 使用<xref:System.Xml.XmlSecureResolver>來限制資源的<xref:System.Xml.XmlReader>可以存取。  
  
-   請不要接受來自不受信任來源的支援元件，如 <xref:System.Xml.NameTable>、<xref:System.Xml.XmlNamespaceManager> 及 <xref:System.Xml.XmlResolver> 物件。  
  
-   使用 <xref:System.Xml.XmlReader> 之應用程式的記憶體使用量可能與剖析的 XML 文件大小相互關聯。 一種形式的阻絕服務攻擊發生於送出過多的 XML 文件進行剖析時。 您可以限制可以藉由設定剖析的文件的大小<xref:System.Xml.XmlReaderSettings.MaxCharactersInDocument%2A>屬性，然後限制產生自展開實體所設定的字元數<xref:System.Xml.XmlReaderSettings.MaxCharactersFromEntities%2A>屬性。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Xml.XmlReader>使用<xref:System.Xml.XmlUrlResolver>具有必要認證。  
  
 [!code-csharp[XmlReader.Create#2](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.Create/CS/XmlReader_Create.cs#2)]
 [!code-vb[XmlReader.Create#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.Create/VB/XmlReader_Create.vb#2)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/data/xml/index.md">XML 文件和資料</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Xml.XmlReaderSettings" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlReaderSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReaderSettings.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlReaderSettings();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Xml.XmlReaderSettings" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表顯示的執行個體的初始屬性值<xref:System.Xml.XmlReaderSettings>。  
  
|屬性|Initial value|  
|--------------|-------------------|  
|<xref:System.Xml.XmlReaderSettings.Async%2A>|`false`.|  
|<xref:System.Xml.XmlReaderSettings.CheckCharacters%2A>|`true`.|  
|<xref:System.Xml.XmlReaderSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document>.|  
|<xref:System.Xml.XmlReaderSettings.IgnoreComments%2A>|`false`.|  
|<xref:System.Xml.XmlReaderSettings.IgnoreProcessingInstructions%2A>|`false`.|  
|<xref:System.Xml.XmlReaderSettings.IgnoreWhitespace%2A>|`false`.|  
|<xref:System.Xml.XmlReaderSettings.LineNumberOffset%2A>|0.|  
|<xref:System.Xml.XmlReaderSettings.LinePositionOffset%2A>|0.|  
|<xref:System.Xml.XmlReaderSettings.MaxCharactersFromEntities%2A>|0 （不會產生自展開實體的字元數目沒有限制）。|  
|<xref:System.Xml.XmlReaderSettings.MaxCharactersInDocument%2A>|0 （在 XML 文件大小沒有任何限制）。|  
|<xref:System.Xml.XmlReaderSettings.NameTable%2A>|`null`.|  
|<xref:System.Xml.XmlTextReader.DtdProcessing%2A>|<xref:System.Xml.DtdProcessing.Prohibit>|  
|<xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A>|`true`. 這個屬性已經過時。 請改用 <xref:System.Xml.XmlTextReader.DtdProcessing%2A>。 如果您已設定<xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A>為其預設值`true`設定<xref:System.Xml.XmlTextReader.DtdProcessing%2A>至`Prohibit`。 如果您已設定<xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A>要`false`設定<xref:System.Xml.XmlTextReader.DtdProcessing%2A>至`Parse`。|  
|<xref:System.Xml.XmlReaderSettings.Schemas%2A>|空的 <xref:System.Xml.Schema.XmlSchemaSet> 物件。|  
|<xref:System.Xml.XmlReaderSettings.ValidationFlags%2A>|<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints>.|  
|<xref:System.Xml.XmlReaderSettings.ValidationType%2A>|<xref:System.Xml.ValidationType.None>.|  
|<xref:System.Xml.XmlReaderSettings.XmlResolver%2A>|新的 <xref:System.Xml.XmlUrlResolver> 物件。|  
  
   
  
## Examples  
 以下會建立可用來建構的讀取器處理指示、 註解，並不顯著泛空白字元會去除設定物件。  
  
 [!code-cpp[XmlReaderSettings.cctor#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.cctor/CPP/XmlReaderSettings.cctor.cpp#1)]
 [!code-csharp[XmlReaderSettings.cctor#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.cctor/CS/factory_rdr_cctor2.cs#1)]
 [!code-vb[XmlReaderSettings.cctor#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.cctor/VB/factory_rdr_cctor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlReaderSettings (System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReaderSettings.#ctor(System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlReaderSettings(System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlReaderSettings : System.Xml.XmlResolver -&gt; System.Xml.XmlReaderSettings" Usage="new System.Xml.XmlReaderSettings resolver" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="resolver">XML 解析器。</param>
        <summary>初始化 <see cref="T:System.Xml.XmlReaderSettings" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Async">
      <MemberSignature Language="C#" Value="public bool Async { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Async" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.Async" />
      <MemberSignature Language="VB.NET" Value="Public Property Async As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Async { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Async : bool with get, set" Usage="System.Xml.XmlReaderSettings.Async" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定非同步 <see cref="T:System.Xml.XmlReader" /> 方法是否可以用於特定 <see cref="T:System.Xml.XmlReader" /> 執行個體。</summary>
        <value>如果可以使用非同步方法，則為 <see langword="true" />，否則為<see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您必須將此值設定為`true`當您建立新<xref:System.Xml.XmlReader>執行個體，如果您想要使用非同步<xref:System.Xml.XmlReader>該執行個體上的方法。 在後<xref:System.Xml.XmlReader>會建立執行個體，<xref:System.Xml.XmlReaderSettings.Async%2A>屬性是唯讀的。 此屬性的預設值為 `false`。  
  
 這個旗標會忽略<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>多載。 這表示，如果您建立新<xref:System.Xml.XmlReader>根據現有<xref:System.Xml.XmlReader>，取決於輸入的非同步行為<xref:System.Xml.XmlReader>，而且您無法使用<xref:System.Xml.XmlReaderSettings.Async%2A>變更非同步行為的旗標。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">使用 Async 和 Await 設計非同步程式 (C# 和 Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="CheckCharacters">
      <MemberSignature Language="C#" Value="public bool CheckCharacters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckCharacters" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.CheckCharacters" />
      <MemberSignature Language="VB.NET" Value="Public Property CheckCharacters As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CheckCharacters { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CheckCharacters : bool with get, set" Usage="System.Xml.XmlReaderSettings.CheckCharacters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，綁表示是否要執行字元檢查。</summary>
        <value><see langword="true" /> 表示執行字元檢查，否則為 <see langword="false" />。 預設為 <see langword="true" />。  
  
 <block subset="none" type="note"><para>  
 如果 <see cref="T:System.Xml.XmlReader" /> 正在處理文字資料，則它會始終檢查 XML 名稱和文字內容是否有效，而不論屬性設定。 將 <see cref="P:System.Xml.XmlReaderSettings.CheckCharacters" /> 設為 <see langword="false" /> 會關閉字元實體參考的字元檢查。  
  
</para></block></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此屬性會指示 XML 讀取器檢查字元在 XML 資料，它讀取，則擲回<xref:System.Xml.XmlException>有任何字元超出合法 XML 字元的範圍。 啟用字元檢查時，可確保：  
  
-   所定義的字元都是合法的 XML 字元的範圍內[2.2 字元](https://www.w3.org/TR/2006/REC-xml-20060816/#charsets)W3C XML 1.0 建議事項一節。  
  
-   所有 XML 名稱都是否有效，所定義[2.3 Common Syntactic Constructs](https://www.w3.org/TR/2006/REC-xml-20060816/#NT-Name) W3C XML 1.0 建議事項一節。  
  
 當這個屬性設定為`true`，這是預設設定，<xref:System.Xml.XmlException>擲回例外狀況是 XML 檔案包含不合法的字元或無效的 XML 名稱 （例如，項目名稱以數字開頭）。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReaderSettings Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReaderSettings Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReaderSettings.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As XmlReaderSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlReaderSettings ^ Clone();" />
      <MemberSignature Language="F#" Value="member this.Clone : unit -&gt; System.Xml.XmlReaderSettings" Usage="xmlReaderSettings.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReaderSettings</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>建立 <see cref="T:System.Xml.XmlReaderSettings" /> 執行個體的複本。</summary>
        <returns>複製的 <see cref="T:System.Xml.XmlReaderSettings" /> 物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 複製<xref:System.Xml.XmlReaderSettings>可以修改物件，而不會影響原始物件上的設定。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CloseInput">
      <MemberSignature Language="C#" Value="public bool CloseInput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CloseInput" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.CloseInput" />
      <MemberSignature Language="VB.NET" Value="Public Property CloseInput As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CloseInput { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CloseInput : bool with get, set" Usage="System.Xml.XmlReaderSettings.CloseInput" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出是否應該在關閉讀取器時關閉基礎資料流或 <see cref="T:System.IO.TextReader" />。</summary>
        <value><see langword="true" /> 表示關閉讀取器時關閉基礎資料流或 <see cref="T:System.IO.TextReader" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當資料流時，會使用此設定或<xref:System.IO.TextReader>傳遞至<xref:System.Xml.XmlReader.Create%2A>方法。 如果資料流由自己的處理的讀取器建立的例如建立讀取器時使用的 URI，或開啟外部的文件類型定義時，它一律會關閉讀取器關閉時。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConformanceLevel">
      <MemberSignature Language="C#" Value="public System.Xml.ConformanceLevel ConformanceLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.ConformanceLevel ConformanceLevel" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.ConformanceLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property ConformanceLevel As ConformanceLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::ConformanceLevel ConformanceLevel { System::Xml::ConformanceLevel get(); void set(System::Xml::ConformanceLevel value); };" />
      <MemberSignature Language="F#" Value="member this.ConformanceLevel : System.Xml.ConformanceLevel with get, set" Usage="System.Xml.XmlReaderSettings.ConformanceLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.ConformanceLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.Xml.XmlReader" /> 要遵循的一致性層級。</summary>
        <value>其中一個列舉值，指定 XML 讀取器將強制執行的一致性層級。 預設為 <see cref="F:System.Xml.ConformanceLevel.Document" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所建立的 XML 讀取器<xref:System.Xml.XmlReader.Create%2A>方法符合下列的合規性需求的預設值：  
  
-   新行和屬性值根據正規化 W3C [XML 1.0 建議事項](https://www.w3.org/TR/2006/REC-xml-20060816/)。  
  
-   會自動展開所有實體。  
  
-   即使在讀取器不會驗證時，會固定加入文件類型定義中宣告的預設屬性。  
  
-   允許宣告對應至正確的 XML 命名空間 URI 的 XML 前置詞。  
  
-   在單一標記法名稱`NotationType`屬性宣告並`NmTokens`在單一`Enumeration`屬性宣告就會不同。  
  
 您可以使用<xref:System.Xml.XmlReaderSettings.ConformanceLevel%2A>屬性，以檢查並確保讀取資料流符合格式正確的 XML 1.0 文件或文件片段的規則。 如果資料不符合，<xref:System.Xml.XmlException>擲回例外狀況。 預設值是<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType>（文件層級的一致性）。  
  
 三個一致性層級如下：  
  
|設定|描述|  
|-------------|-----------------|  
|<xref:System.Xml.ConformanceLevel.Document>|可確保 XML 資料符合格式正確的 XML 1.0 文件的規則。 此檢查層級可確保任何處理器都可使用資料流讀入以作為[語式正確的 XML 1.0 文件](https://www.w3.org/TR/2006/REC-xml-20060816/#sec-well-formed)。<br /><br /> 讀取器會檢查下列項目：<br /><br /> -最上層項目不能有 XML 宣告、 文件類型定義 (DTD)、 項目、 註解、 泛空白字元或處理指示以外的任何節點。<br />-XML 資料必須有一個最上層的項目節點。|  
|<xref:System.Xml.ConformanceLevel.Fragment>|可確保 XML 資料符合格式正確的 XML 1.0 文件片段的規則。<br /><br /> 此設定接受在最上層具有多個根項目或文字節點的 XML 資料。 此檢查層級可確保任何處理器都可使用資料流讀入以作為[外部剖析實體](https://www.w3.org/TR/2006/REC-xml-20060816/#wf-entities)。|  
|<xref:System.Xml.ConformanceLevel.Auto>|指定讀取器應該決定根據內送資料的一致性檢查的層級。<br /><br /> 如果 XML 資料包含 DTD 資訊，則會套用文件一致性檢查。<br /><br /> 如果 XML 資料包含下列其中一項，則會套用片段一致性檢查：<br /><br /> 文字、 CDATA 或實體參考節點的根層級。<br />-多個項目根層級。<br />-沒有根層級的項目。<br /><br /> 如果存在衝突 (如根層級存在文字節點及 DTD)，則會擲回 <xref:System.Xml.XmlException>。<br /><br /> 當使用 <xref:System.Xml.XmlReader.Create%2A> 方法向現有 <xref:System.Xml.XmlReader> 加入其他功能時，此設定可以用於包裝案例。 在此情況下，<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType>不會加入任何新的一致性檢查。 一致性檢查會留給被包裝的 <xref:System.Xml.XmlReader>。|  
  
> [!NOTE]
>  存在 DTD 時，XML 1.0 版建議事項會要求文件層級的一致性。 因此，如果讀取器設定為支援<xref:System.Xml.ConformanceLevel.Fragment?displayProperty=nameWithType>，但 XML 資料包含文件類型定義 (DTD)，<xref:System.Xml.XmlException>就會擲回。  
  
 以下是 讀取器會根據設定的特定一致性違規的處理<xref:System.Xml.XmlReaderSettings.ConformanceLevel%2A>屬性：  
  
|條件|<xref:System.Xml.ConformanceLevel.Document>|<xref:System.Xml.ConformanceLevel.Fragment>|<xref:System.Xml.ConformanceLevel.Auto>|  
|---------------|---------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------|  
|文字或具類型的值會出現在最上層。|<xref:System.Xml.XmlException> 會擲回。|不會視為違規情形，這項設定。|不會視為違規情形，這項設定。|  
|多個項目或沒有項目會出現在最上層。|<xref:System.Xml.XmlException> 會擲回。|不會視為違規情形，這項設定。|不會視為違規情形，這項設定。|  
|最上層項目是泛空白字元。|不會視為違規情形，這項設定。|不會視為違規情形，這項設定。|不會視為違規情形，這項設定。|  
|最上層項目是 （辨識為文字節點） 的屬性。|<xref:System.Xml.XmlException> 會擲回。|不會視為違規情形，這項設定。|不會視為違規情形，這項設定。|  
|找到多個連續的文字節點。|不會視為違規情形，這項設定。|不會視為違規情形，這項設定。|不會視為違規情形，這項設定。|  
|兩次中的相同的區域範圍宣告相同的命名空間前置詞。|<xref:System.Xml.XmlException> 會擲回。|<xref:System.Xml.XmlException> 會擲回。|<xref:System.Xml.XmlException> 會擲回。|  
|中的項目或屬性的命名空間不存在的區域範圍中。|<xref:System.Xml.XmlException> 會擲回。|<xref:System.Xml.XmlException> 會擲回。|<xref:System.Xml.XmlException> 會擲回。|  
|資料中包含的命名空間的前置詞不相符。|<xref:System.Xml.XmlException> 會擲回。|<xref:System.Xml.XmlException> 會擲回。|<xref:System.Xml.XmlException> 會擲回。|  
|`xml:space` 屬性包含無效的值。|<xref:System.Xml.XmlException> 會擲回。|<xref:System.Xml.XmlException> 會擲回。|<xref:System.Xml.XmlException> 會擲回。|  
|發現無效的名稱。|<xref:System.Xml.XmlException> 會擲回。|<xref:System.Xml.XmlException> 會擲回。|<xref:System.Xml.XmlException> 會擲回。|  
|`xml`前置詞未對應到http://www.w3.org/XML/1998/namespaceURI。|<xref:System.Xml.XmlException> 會擲回。|<xref:System.Xml.XmlException> 會擲回。|<xref:System.Xml.XmlException> 會擲回。|  
  
   
  
## Examples  
 下列範例會建立<xref:System.Xml.XmlReader>讀取 XML 片段的物件。  
  
 [!code-csharp[XmlReader.Create#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.Create/CS/XmlReader_Create.cs#1)]
 [!code-vb[XmlReader.Create#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.Create/VB/XmlReader_Create.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="DtdProcessing">
      <MemberSignature Language="C#" Value="public System.Xml.DtdProcessing DtdProcessing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.DtdProcessing DtdProcessing" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.DtdProcessing" />
      <MemberSignature Language="VB.NET" Value="Public Property DtdProcessing As DtdProcessing" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::DtdProcessing DtdProcessing { System::Xml::DtdProcessing get(); void set(System::Xml::DtdProcessing value); };" />
      <MemberSignature Language="F#" Value="member this.DtdProcessing : System.Xml.DtdProcessing with get, set" Usage="System.Xml.XmlReaderSettings.DtdProcessing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.DtdProcessing</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定決定 DTD 處理的值。</summary>
        <value>其中一個列舉值，決定 DTD 處理方式。 預設為 <see cref="F:System.Xml.DtdProcessing.Prohibit" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文件類型定義 (DTD) 驗證以 W3C 所定義的有效性條件約束來實作[可延伸標記語言 (XML) 1.0 （第四版） 建議](https://www.w3.org/TR/2006/REC-xml-20060816/)。 Dtd 使用正式文法描述的結構和語法相容的 XML 文件;在指定的內容和 XML 文件所允許的值。  
  
 這個屬性可以具有下列其中一個值：  
  
-   <xref:System.Xml.DtdProcessing.Parse?displayProperty=nameWithType> 若要啟用 DTD 處理。  
  
-   <xref:System.Xml.DtdProcessing.Prohibit?displayProperty=nameWithType> 擲回<xref:System.Xml.XmlException>在遇到 DTD 時的例外狀況。  
  
-   <xref:System.Xml.DtdProcessing.Ignore?displayProperty=nameWithType> 若要停用 DTD 處理，但不警告或例外狀況。  
  
 若要執行 DTD 驗證，<xref:System.Xml.XmlReader> 會使用在 XML 文件之 DOCTYPE 宣告中所定義的 DTD。 DOCTYPE 宣告可以指向內嵌 DTD，也可以是外部 DTD 檔案的參考。 若要驗證對 DTD 進行驗證的 XML 檔案：  
  
-   將 <xref:System.Xml.XmlReaderSettings.DtdProcessing%2A?displayProperty=nameWithType> 屬性設定為 `DtdProcessing.Parse.`  
  
-   將 <xref:System.Xml.XmlReaderSettings.ValidationType%2A?displayProperty=nameWithType> 屬性設定為 `ValidationType.DTD`。  
  
-   如果 DTD 是儲存在需要驗證之網路資源上的外部檔案，請將具有必要認證的 <xref:System.Xml.XmlResolver> 物件傳遞至 <xref:System.Xml.XmlReader.Create%2A> 方法。  
  
> [!IMPORTANT]
>  如果<xref:System.Xml.XmlReaderSettings.DtdProcessing%2A>屬性設定為<xref:System.Xml.DtdProcessing.Ignore?displayProperty=nameWithType>，則<xref:System.Xml.XmlReader>將不會報告 Dtd。 這表示在輸出上，將會遺失 DTD/DOCTYPE。  
  
   
  
## Examples  
 下列範例使用 DTD 檔案驗證 XML 檔案。  
  
 [!code-cpp[XmlReaderSettings.DtdValidate#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.DtdValidate/CPP/XmlReaderSettings.DtdValidate.cpp#1)]
 [!code-csharp[XmlReaderSettings.DtdValidate#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.DtdValidate/CS/validdtd.cs#1)]
 [!code-vb[XmlReaderSettings.DtdValidate#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.DtdValidate/VB/validdtd.vb#1)]  
  
## <a name="input"></a>輸入  
 該範例使用 `itemDTD.xml` 檔案做為輸入。  
  
 [!code-xml[XmlReaderSettings.DtdValidate#2](~/samples/snippets/xml/VS_Snippets_Data/XmlReaderSettings.DtdValidate/XML/itemDTD.xml#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IgnoreComments">
      <MemberSignature Language="C#" Value="public bool IgnoreComments { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreComments" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.IgnoreComments" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreComments As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreComments { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreComments : bool with get, set" Usage="System.Xml.XmlReaderSettings.IgnoreComments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出是否忽略註解。</summary>
        <value><see langword="true" /> 表示忽略註解，否則為 <see langword="false" />。 預設為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 將此屬性設定為`true`可能會導致從讀取器傳回的多個連續的文字節點。 這不會影響驗證。  
  
   
  
## Examples  
 以下會建立可用來建構的讀取器處理指示、 註解，並不顯著泛空白字元會去除設定物件。  
  
 [!code-cpp[XmlReaderSettings.cctor#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.cctor/CPP/XmlReaderSettings.cctor.cpp#1)]
 [!code-csharp[XmlReaderSettings.cctor#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.cctor/CS/factory_rdr_cctor2.cs#1)]
 [!code-vb[XmlReaderSettings.cctor#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.cctor/VB/factory_rdr_cctor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IgnoreProcessingInstructions">
      <MemberSignature Language="C#" Value="public bool IgnoreProcessingInstructions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreProcessingInstructions" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.IgnoreProcessingInstructions" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreProcessingInstructions As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreProcessingInstructions { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreProcessingInstructions : bool with get, set" Usage="System.Xml.XmlReaderSettings.IgnoreProcessingInstructions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出是否忽略處理指示。</summary>
        <value><see langword="true" /> 表示忽略處理指示，否則為 <see langword="false" />。 預設為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 將此屬性設定為`true`可能會導致從讀取器傳回的多個連續的文字節點。 這不會影響驗證。  
  
   
  
## Examples  
 以下會建立可用來建構的讀取器處理指示、 註解，並不顯著泛空白字元會去除設定物件。  
  
 [!code-cpp[XmlReaderSettings.cctor#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.cctor/CPP/XmlReaderSettings.cctor.cpp#1)]
 [!code-csharp[XmlReaderSettings.cctor#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.cctor/CS/factory_rdr_cctor2.cs#1)]
 [!code-vb[XmlReaderSettings.cctor#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.cctor/VB/factory_rdr_cctor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IgnoreWhitespace">
      <MemberSignature Language="C#" Value="public bool IgnoreWhitespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreWhitespace" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.IgnoreWhitespace" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreWhitespace As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreWhitespace { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreWhitespace : bool with get, set" Usage="System.Xml.XmlReaderSettings.IgnoreWhitespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出是否忽略不重要的空白字元。</summary>
        <value><see langword="true" /> 表示忽略泛空白字元，否則為 <see langword="false" />。 預設為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不是重大的泛空白字元包含空格、 tab 鍵和空白的行用來設定分開的更高的可讀性的標記。 這個範例是項目內容中的泛空白字元。  
  
 此屬性設定不會影響在混合內容模式中或發生的範圍內的泛空白字元中標記間的泛空白字元`xml:space='preserve'`屬性。  
  
   
  
## Examples  
 以下會建立可用來建構的讀取器處理指示、 註解，並不顯著泛空白字元會去除設定物件。  
  
 [!code-cpp[XmlReaderSettings.cctor#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.cctor/CPP/XmlReaderSettings.cctor.cpp#1)]
 [!code-csharp[XmlReaderSettings.cctor#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.cctor/CS/factory_rdr_cctor2.cs#1)]
 [!code-vb[XmlReaderSettings.cctor#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.cctor/VB/factory_rdr_cctor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="LineNumberOffset">
      <MemberSignature Language="C#" Value="public int LineNumberOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LineNumberOffset" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.LineNumberOffset" />
      <MemberSignature Language="VB.NET" Value="Public Property LineNumberOffset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LineNumberOffset { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.LineNumberOffset : int with get, set" Usage="System.Xml.XmlReaderSettings.LineNumberOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.Xml.XmlReader" /> 物件的行號位移。</summary>
        <value>行號位移。 預設值為 0。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlReaderSettings.LineNumberOffset%2A>設定會決定該點其中<xref:System.Xml.IXmlLineInfo.LineNumber%2A>屬性會開始計算。 這非常有用，如果您的 XML 資料內嵌在較大的文件。 比方說，如果您的 XML 資料內嵌在較大的文件中，資料列 101 文件的開始，您可能想要指定讀取器開始 100 行。 因此，如果讀取器擲回的例外狀況，剖析 XML 的第一行時，它會報告為 101，行，而不是第 1 行的行號。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="LinePositionOffset">
      <MemberSignature Language="C#" Value="public int LinePositionOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LinePositionOffset" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.LinePositionOffset" />
      <MemberSignature Language="VB.NET" Value="Public Property LinePositionOffset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LinePositionOffset { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.LinePositionOffset : int with get, set" Usage="System.Xml.XmlReaderSettings.LinePositionOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.Xml.XmlReader" /> 物件的行位置位移。</summary>
        <value>行位置位移。 預設值為 0。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlReaderSettings.LinePositionOffset%2A>設定會決定該點其中<xref:System.Xml.IXmlLineInfo.LinePosition%2A>屬性會開始計算。 如果您的 XML 資料內嵌在較大的文件，而且沒有任何新行開頭的 xml，這非常有用。 在此情況下，如果讀取器擲回的例外狀況，剖析 XML 時，您要它傳回相對於主要文件，不只是相對的 XML 片段的行位置。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="MaxCharactersFromEntities">
      <MemberSignature Language="C#" Value="public long MaxCharactersFromEntities { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaxCharactersFromEntities" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.MaxCharactersFromEntities" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxCharactersFromEntities As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaxCharactersFromEntities { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaxCharactersFromEntities : int64 with get, set" Usage="System.Xml.XmlReaderSettings.MaxCharactersFromEntities" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出文件中產生自展開實體的最大可允許字元數。</summary>
        <value>來自展開實體的最大可允許字元數。 預設值為 0。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 零 (0) 的值表示產生自展開實體的字元數目沒有限制。 為非零的值會指定最大可以產生自展開實體的字元數。  
  
 如果讀取器會嘗試讀取的文件，擴充的大小會超過這個屬性，包含實體<xref:System.Xml.XmlException>就會擲回。  
  
 這個屬性可讓您降低阻絕服務攻擊，攻擊者送出嘗試超過記憶體限制透過展開實體的 XML 文件。 藉由限制產生自展開實體的字元，您可以偵測到攻擊，並可靠地復原。  
  
   
  
## Examples  
 下列程式碼會設定這個屬性，並然後再嘗試剖析的文件包含實體會展開成低於設定限制更大的大小。 在真實世界案例中，您會設定此限制為尚未處理有效的文件，夠大的值夠小，無法限制從惡意文件的威脅。  
  
```csharp  
string markup =  
@"<!DOCTYPE Root [  
  <!ENTITY anEntity ""Expands to more than 30 characters"">  
  <!ELEMENT Root (#PCDATA)>  
]>  
<Root>Content &anEntity;</Root>";  
  
XmlReaderSettings settings = new XmlReaderSettings();  
settings.DtdProcessing = DtdProcessing.Parse;  
settings.ValidationType = ValidationType.DTD;  
settings.MaxCharactersFromEntities = 30;  
  
try  
{  
    XmlReader reader = XmlReader.Create(new StringReader(markup), settings);  
    while (reader.Read()) { }  
}  
catch (XmlException ex)  
{  
    Console.WriteLine(ex.Message);  
}  
```  
  
```vb  
Dim markup As String = _  
    "<!DOCTYPE Root [" + Environment.NewLine + _  
    "  <!ENTITY anEntity ""Expands to more than 30 characters"">" + Environment.NewLine + _  
    "  <!ELEMENT Root (#PCDATA)>" + Environment.NewLine + _  
    "]>" + Environment.NewLine + _  
    "<Root>Content &anEntity;</Root>"  
  
Dim settings As XmlReaderSettings = New XmlReaderSettings()  
settings.DtdProcessing = DtdProcessing.Parse;  
settings.ValidationType = ValidationType.DTD  
settings.MaxCharactersFromEntities = 30  
  
Try  
    Dim reader As XmlReader = XmlReader.Create(New StringReader(markup), settings)  
    While (reader.Read())  
    End While  
Catch ex As XmlException  
    Console.WriteLine(ex.Message)  
End Try  
```  
  
 這個範例會產生下列輸出：  
  
```  
There is an error in XML document (MaxCharactersFromEntities, ).  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxCharactersInDocument">
      <MemberSignature Language="C#" Value="public long MaxCharactersInDocument { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaxCharactersInDocument" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.MaxCharactersInDocument" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxCharactersInDocument As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaxCharactersInDocument { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaxCharactersInDocument : int64 with get, set" Usage="System.Xml.XmlReaderSettings.MaxCharactersInDocument" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出 XML 文件中最大可允許字元數。 零 (0) 的值表示對 XML 文件大小沒有限制。 非零值指定大小上限，以字元為單位。</summary>
        <value>XML 文件的最大可允許字元數。 預設值為 0。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 零 (0) 的值表示剖析的文件中的字元數目沒有限制。 為非零的值指定可剖析的字元的數上限。  
  
 文件的最大字元計數包括產生自展開實體的字元計數。  
  
 如果讀取器會嘗試讀取的文件的大小超過這個屬性，與<xref:System.Xml.XmlException>就會擲回。  
  
 這個屬性可讓您降低阻絕服務攻擊，攻擊者提交非常大的 XML 文件的位置。 藉由限制文件大小，您可以偵測到攻擊，並可靠地復原。  
  
   
  
## Examples  
 下列程式碼會設定這個屬性，並然後再嘗試剖析文件大小超過限制。 在真實世界案例中，您會設定此限制為尚未處理有效的文件，夠大的值夠小，無法限制從惡意文件的威脅。  
  
```csharp  
string markup = "<Root>Content</Root>";  
  
XmlReaderSettings settings = new XmlReaderSettings();  
settings.MaxCharactersInDocument = 10;  
  
try  
{  
    XmlReader reader = XmlReader.Create(new StringReader(markup), settings);  
    while (reader.Read()) { }  
}  
catch (XmlException ex)  
{  
    Console.WriteLine(ex.Message);  
}  
```  
  
```vb  
Dim markup As String = "<Root>Content</Root>"  
  
Dim settings As XmlReaderSettings = New XmlReaderSettings()  
settings.MaxCharactersInDocument = 10  
  
Try  
    Dim reader As XmlReader = XmlReader.Create(New StringReader(markup), settings)  
    While (reader.Read())  
    End While  
Catch ex As XmlException  
    Console.WriteLine(ex.Message)  
End Try  
```  
  
 此程式碼會產生下列輸出：  
  
```  
There is an error in XML document (MaxCharactersInDocument, ).  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NameTable">
      <MemberSignature Language="C#" Value="public System.Xml.XmlNameTable NameTable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlNameTable NameTable" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.NameTable" />
      <MemberSignature Language="VB.NET" Value="Public Property NameTable As XmlNameTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlNameTable ^ NameTable { System::Xml::XmlNameTable ^ get(); void set(System::Xml::XmlNameTable ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NameTable : System.Xml.XmlNameTable with get, set" Usage="System.Xml.XmlReaderSettings.NameTable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNameTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定用來比較已擷取字串的 <see cref="T:System.Xml.XmlNameTable" />。</summary>
        <value><see cref="T:System.Xml.XmlNameTable" />，儲存使用這個 <see cref="T:System.Xml.XmlReader" /> 物件建立之所有 <see cref="T:System.Xml.XmlReaderSettings" /> 執行個體所使用的所有原子化字串。  
  
預設為 <see langword="null" />。 如果這個值為 <see langword="null" />，則建立的 <see cref="T:System.Xml.XmlReader" /> 執行個體會使用新的空 <see cref="T:System.Xml.NameTable" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 將此屬性設定為<xref:System.Xml.XmlNameTable>執行個體，如果您想要共用在所有的通用名稱表建立<xref:System.Xml.XmlReader>執行個體。  
  
> [!NOTE]
>  <xref:System.Xml.NameTable> 類別不是安全執行緒。 因此它無法在之間共用<xref:System.Xml.XmlReader>在不同的執行緒中同時執行的物件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProhibitDtd">
      <MemberSignature Language="C#" Value="public bool ProhibitDtd { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ProhibitDtd" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.ProhibitDtd" />
      <MemberSignature Language="VB.NET" Value="Public Property ProhibitDtd As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ProhibitDtd { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ProhibitDtd : bool with get, set" Usage="System.Xml.XmlReaderSettings.ProhibitDtd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("Use XmlReaderSettings.DtdProcessing property instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，表示是否禁止物件類型定義 (DTD) 處理。 這個屬性已經過時。 請改用 <see cref="P:System.Xml.XmlTextReader.DtdProcessing" />。</summary>
        <value><see langword="true" /> 表示禁止 DTD 處理，否則為 <see langword="false" />。 預設為 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當設定為`true`，則<xref:System.Xml.XmlReader>就會擲回<xref:System.Xml.XmlException>時遇到任何 DTD 內容。 如果您顧慮阻絕服務問題或正在處理不受信任的來源，請勿啟用 DTD 處理。  
  
 如果已啟用 DTD 處理，則可使用 <xref:System.Xml.XmlSecureResolver> 限制 <xref:System.Xml.XmlReader> 可存取的資源。 您還可以設計應用程式，讓 XML 處理具有記憶體和時間限制。 例如，在 ASP.NET 應用程式中設定逾時限制。  
  
 這個屬性已經過時。 請改用 <xref:System.Xml.XmlTextReader.DtdProcessing%2A>。 如果您已設定<xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A>為其預設值`true`設定<xref:System.Xml.XmlTextReader.DtdProcessing%2A>至`Prohibit`。 如果您已設定<xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A>要`false`設定<xref:System.Xml.XmlTextReader.DtdProcessing%2A>至`Parse`。  
  
   
  
## Examples  
 下列範例會驗證使用 DTD 的資料。  
  
 [!code-cpp[XmlReaderSettings.DtdValidate#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.DtdValidate/CPP/XmlReaderSettings.DtdValidate.cpp#1)]
 [!code-csharp[XmlReaderSettings.DtdValidate#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.DtdValidate/CS/validdtd.cs#1)]
 [!code-vb[XmlReaderSettings.DtdValidate#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.DtdValidate/VB/validdtd.vb#1)]  
  
 此範例會使用 itemDTD.xml 檔案做為輸入。  
  
 [!code-xml[XmlReaderSettings.DtdValidate#2](~/samples/snippets/xml/VS_Snippets_Data/XmlReaderSettings.DtdValidate/XML/itemDTD.xml#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReaderSettings.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="xmlReaderSettings.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將設定類別的成員重設為其預設值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表顯示的執行個體的初始屬性值<xref:System.Xml.XmlReaderSettings>。  
  
|屬性|初始值|  
|--------------|-------------------|  
|<xref:System.Xml.XmlReaderSettings.Async%2A>|`false`.|  
|<xref:System.Xml.XmlReaderSettings.CheckCharacters%2A>|`true`.|  
|<xref:System.Xml.XmlReaderSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document>.|  
|<xref:System.Xml.XmlReaderSettings.IgnoreComments%2A>|`false`.|  
|<xref:System.Xml.XmlReaderSettings.IgnoreProcessingInstructions%2A>|`false`.|  
|<xref:System.Xml.XmlReaderSettings.IgnoreWhitespace%2A>|`false`.|  
|<xref:System.Xml.XmlReaderSettings.LineNumberOffset%2A>|0.|  
|<xref:System.Xml.XmlReaderSettings.LinePositionOffset%2A>|0.|  
|<xref:System.Xml.XmlReaderSettings.MaxCharactersFromEntities%2A>|0 （不會產生自展開實體的字元數目沒有限制）。|  
|<xref:System.Xml.XmlReaderSettings.MaxCharactersInDocument%2A>|0 （在 XML 文件大小沒有任何限制）。|  
|<xref:System.Xml.XmlReaderSettings.NameTable%2A>|`null`.|  
|<xref:System.Xml.XmlTextReader.DtdProcessing%2A>|<xref:System.Xml.DtdProcessing.Prohibit>|  
|<xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A>|`true`. 這個屬性已經過時。 請改用 <xref:System.Xml.XmlTextReader.DtdProcessing%2A>。 如果您已設定<xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A>為其預設值`true`設定<xref:System.Xml.XmlTextReader.DtdProcessing%2A>至`Prohibit`。 如果您已設定<xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A>要`false`設定<xref:System.Xml.XmlTextReader.DtdProcessing%2A>至`Parse`。|  
|<xref:System.Xml.XmlReaderSettings.Schemas%2A>|空的 <xref:System.Xml.Schema.XmlSchemaSet> 物件。|  
|<xref:System.Xml.XmlReaderSettings.ValidationFlags%2A>|<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints>.|  
|<xref:System.Xml.XmlReaderSettings.ValidationType%2A>|<xref:System.Xml.ValidationType.None>.|  
|<xref:System.Xml.XmlReaderSettings.XmlResolver%2A>|新的 <xref:System.Xml.XmlUrlResolver> 物件。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Schemas">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaSet Schemas { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaSet Schemas" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.Schemas" />
      <MemberSignature Language="VB.NET" Value="Public Property Schemas As XmlSchemaSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaSet ^ Schemas { System::Xml::Schema::XmlSchemaSet ^ get(); void set(System::Xml::Schema::XmlSchemaSet ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Schemas : System.Xml.Schema.XmlSchemaSet with get, set" Usage="System.Xml.XmlReaderSettings.Schemas" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定要在執行結構描述驗證時使用的 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
        <value>執行結構描述驗證時使用的<see cref="T:System.Xml.Schema.XmlSchemaSet" />。 預設為空的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
> -   請勿使用從未知或未受信任的來源或位置的結構描述。 如此一來會危及您的程式碼的安全性。  
> -   XML 結構描述 （包括內嵌結構描述） 是本質上容易遭到阻絕服務攻擊;不接受這些未受信任的案例中。  
> -   結構描述驗證錯誤訊息和例外狀況可能會公開機密資訊的內容模型或結構描述檔案的 URI 路徑。 請小心，不要公開 （expose） 給未受信任的呼叫端的這項資訊。  
> -   如需詳細資訊，請參閱 < 安全性考量 > 一節。  
  
 <xref:System.Xml.Schema.XmlSchemaSet>類別只支援 XML 結構描述定義語言 (XSD) 結構描述。 <xref:System.Xml.XmlReader> 所建立的執行個體<xref:System.Xml.XmlReader.Create%2A>方法不能設定為啟用 Xml-data Reduced (XDR) 結構描述驗證。  
  
## <a name="security-considerations"></a>安全性考量  
  
-   請勿使用來源不明或不受信任來源的結構描述。 如此一來會危及您的程式碼的安全性。 <xref:System.Xml.XmlUrlResolver>類別預設用來解析外部結構描述。 若要停用解析的 include，匯入，並重新定義結構描述的項目，設定<xref:System.Xml.Schema.XmlSchemaSet.XmlResolver%2A?displayProperty=nameWithType>屬性設`null`。  
  
-   使用所引發的例外狀況<xref:System.Xml.Schema.XmlSchemaSet>類別，例如<xref:System.Xml.Schema.XmlSchemaException>類別可能包含不應公開受信任的案例中的機密資訊。 例如，<xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A>屬性<xref:System.Xml.Schema.XmlSchemaException>傳回至造成例外狀況的結構描述檔案的 URI 路徑。 <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A>屬性不應公開受信任的案例中。 使機密資訊不會暴露在不受信任的情況下，就應該正確處理例外狀況。  
  
   
  
## Examples  
 以下範例使用<xref:System.Xml.XmlReaderSettings>物件和<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>XML 文件相關聯的結構描述的方法。 結構描述加入至<xref:System.Xml.XmlReaderSettings.Schemas%2A>屬性<xref:System.Xml.XmlReaderSettings>物件。 值<xref:System.Xml.XmlReaderSettings.Schemas%2A>屬性是<xref:System.Xml.Schema.XmlSchemaSet>物件。 結構描述用來驗證 XML 文件符合結構描述內容模型。 結構描述驗證錯誤和警告會由<xref:System.Xml.XmlReaderSettings.ValidationEventHandler>中所定義<xref:System.Xml.XmlReaderSettings>物件。  
  
 [!code-cpp[XmlSchemaSetOverall Example#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlSchemaSetOverall Example/CPP/xmlschemasetexample.cpp#1)]
 [!code-csharp[XmlSchemaSetOverall Example#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaSetOverall Example/CS/xmlschemasetexample.cs#1)]
 [!code-vb[XmlSchemaSetOverall Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaSetOverall Example/VB/xmlschemasetexample.vb#1)]  
  
 此範例會使用 books.xml 檔案做為輸入。  
  
 [!code-xml[XmlSchemaSetOverall Example#2](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xml#2)]  
  
 此範例會使用 books.xsd 檔案做為輸入。  
  
 [!code-xml[XmlSchemaSetOverall Example#3](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xsd#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ValidationEventHandler">
      <MemberSignature Language="C#" Value="public event System.Xml.Schema.ValidationEventHandler ValidationEventHandler;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Xml.Schema.ValidationEventHandler ValidationEventHandler" />
      <MemberSignature Language="DocId" Value="E:System.Xml.XmlReaderSettings.ValidationEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Xml::Schema::ValidationEventHandler ^ ValidationEventHandler;" />
      <MemberSignature Language="F#" Value="member this.ValidationEventHandler : System.Xml.Schema.ValidationEventHandler " Usage="member this.ValidationEventHandler : System.Xml.Schema.ValidationEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.ValidationEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於讀取器遇到驗證錯誤時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果讀取的 XML 執行個體文件時，發生這些事件<xref:System.Xml.XmlReaderSettings.ValidationType%2A>會設為<xref:System.Xml.ValidationType.DTD>或<xref:System.Xml.ValidationType.Schema>。 如果<xref:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings>設定已啟用<xref:System.Xml.XmlReaderSettings.ValidationFlags%2A>發生任何驗證警告時，也可能會發生這些事件的屬性。  
  
 如果讀取器設定進行驗證，而且尚未設定任何驗證事件處理常式，<xref:System.Xml.Schema.XmlSchemaValidationException>就會擲回的所有驗證錯誤。 (不會造成驗證警告<xref:System.Xml.Schema.XmlSchemaValidationException>擲回)。  
  
> [!IMPORTANT]
>  驗證錯誤訊息可能會公開敏感的內容模型的資訊。 驗證錯誤和警告訊息則會使用處理<xref:System.Xml.Schema.ValidationEventHandler>委派，或公開為<xref:System.Xml.Schema.XmlSchemaValidationException>如果沒有事件處理常式提供給<xref:System.Xml.XmlReaderSettings>物件 (不會造成驗證警告<xref:System.Xml.Schema.XmlSchemaValidationException>擲回)。 在不受信任的情況下，應該不會公開此內容模型的資訊。 依預設會隱藏驗證警告訊息，並可以藉由設定報告<xref:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings>旗標。  
>   
>  <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A>屬性<xref:System.Xml.Schema.XmlSchemaValidationException>傳回至造成例外狀況的結構描述檔案的 URI 路徑。 <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A>屬性不應公開受信任的案例中。  
  
   
  
## Examples  
 下列範例會顯示這些設定來指定要建立的讀取器，驗證使用內嵌結構描述，並同時也顯示驗證警告。 驗證事件處理常式使用<xref:System.Xml.Schema.XmlSeverityType>區分警告和錯誤的列舉。  
  
 [!code-csharp[XmlReaderSettings.IgnoreInlineSchema#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.IgnoreInlineSchema/CS/factory_rdr_cctor.cs#1)]
 [!code-vb[XmlReaderSettings.IgnoreInlineSchema#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.IgnoreInlineSchema/VB/factory_rdr_cctor.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ValidationFlags">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaValidationFlags ValidationFlags { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.Schema.XmlSchemaValidationFlags ValidationFlags" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.ValidationFlags" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidationFlags As XmlSchemaValidationFlags" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaValidationFlags ValidationFlags { System::Xml::Schema::XmlSchemaValidationFlags get(); void set(System::Xml::Schema::XmlSchemaValidationFlags value); };" />
      <MemberSignature Language="F#" Value="member this.ValidationFlags : System.Xml.Schema.XmlSchemaValidationFlags with get, set" Usage="System.Xml.XmlReaderSettings.ValidationFlags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaValidationFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，表示結構描述驗證設定。 這個設定會套用至可驗證結構描述的 <see cref="T:System.Xml.XmlReader" /> 物件 (<see cref="P:System.Xml.XmlReaderSettings.ValidationType" /> 屬性設為 <see langword="ValidationType.Schema" />)。</summary>
        <value>指定驗證選項的列舉值的位元組合。 <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints" /> 和 <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.AllowXmlAttributes" /> 預設為啟用。 <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema" />、<see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation" /> 和 <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings" /> 預設為停用。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  依預設，不會設定 <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> 物件的 <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> 及 <xref:System.Xml.XmlReaderSettings> 驗證旗標。 當設定這些旗標時，<xref:System.Xml.XmlReaderSettings.XmlResolver%2A> 物件的 <xref:System.Xml.XmlReaderSettings> 可用於解析在 <xref:System.Xml.XmlReader> 的執行個體文件中發現的結構描述位置。 如果<xref:System.Xml.XmlReaderSettings.XmlResolver%2A>物件是否`null`，則不會解析結構描述位置即使<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema>和<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation>設定驗證旗標。  
>   
>  驗證期間加入的結構描述會加入新型別，並可變更要驗證之物件的驗證結果。 因此，外部結構描述應僅從受信任的來源解析。  
>   
>  停用<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints>旗標 （預設為啟用） 時，建議使用文件的大部分驗證、 不受信任、 大型 XML 文件中的高可用性的情況下，針對具有識別條件約束的結構描述。  
  
   
  
## Examples  
 下列範例會針對內嵌 XML 結構描述的 XML 檔案驗證啟用<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema>設定。 XML 讀取器會設定為顯示驗證警告，sp 您也看到預期的警告根項目上。  
  
 [!code-csharp[XmlReaderSettings.IgnoreInlineSchema#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.IgnoreInlineSchema/CS/factory_rdr_cctor.cs#1)]
 [!code-vb[XmlReaderSettings.IgnoreInlineSchema#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.IgnoreInlineSchema/VB/factory_rdr_cctor.vb#1)]  
  
## <a name="input"></a>輸入  
 該範例採用 inlineSchema.xml 檔案做為輸入。  
  
 [!code-xml[XmlReaderSettings.IgnoreInlineSchema#3](~/samples/snippets/xml/VS_Snippets_Data/XmlReaderSettings.IgnoreInlineSchema/XML/inlineSchema.xml#3)]  
  
## <a name="output"></a>Output  
 警告： 找不到相符的結構描述。 未發生驗證。 找不到項目 root 的結構描述資訊。  
  
 驗證錯誤： 項目 Xsdheadcount: headcount 含有無效的子項目 '除法'。 預期的是 'ID'。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ValidationType">
      <MemberSignature Language="C#" Value="public System.Xml.ValidationType ValidationType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.ValidationType ValidationType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.ValidationType" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidationType As ValidationType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::ValidationType ValidationType { System::Xml::ValidationType get(); void set(System::Xml::ValidationType value); };" />
      <MemberSignature Language="F#" Value="member this.ValidationType : System.Xml.ValidationType with get, set" Usage="System.Xml.XmlReaderSettings.ValidationType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.ValidationType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出 <see cref="T:System.Xml.XmlReader" /> 是否會在讀取時執行驗證或類型指派。</summary>
        <value>其中一個 <see cref="T:System.Xml.ValidationType" /> 值，指出 XmlReader 在讀取時是否執行驗證或型別指派。 預設為 <see langword="ValidationType.None" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表描述<xref:System.Xml.ValidationType>值。  
  
> [!NOTE]
>  <xref:System.Xml.ValidationType.Auto>和<xref:System.Xml.ValidationType.XDR>列舉的值為.NET Framework 2.0 版中已過時。  
  
|ValidationType|描述|  
|--------------------|-----------------|  
|`DTD`|使用文件類型定義 (DTD) 會執行驗證。 **注意：** <xref:System.Xml.XmlReaderSettings.DtdProcessing%2A>屬性也必須設為<xref:System.Xml.DtdProcessing.Parse>。|  
|`None`|<xref:System.Xml.XmlReader>不會驗證資料，或執行任何類型指派。|  
|`Schema`|驗證和型別指派是使用 XML 結構描述定義語言 (XSD) 結構描述來執行。 讀取器存取 XML 結構描述，使用下列命令：<br /><br /> -使用<xref:System.Xml.XmlReaderSettings.Schemas%2A>屬性來存取<xref:System.Xml.Schema.XmlSchemaSet>這個讀取器相關聯的物件。<br />-使用 XML 執行個體文件中包含的內嵌結構描述。 (<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema>必須啟用選項。)<br />-使用結構描述位置提示所指定的 XML 結構描述 (`xsi:schemaLocation`或`xsi:noNamespaceSchemaLocation`屬性) 的 XML 執行個體文件中找到。 (<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation>必須啟用選項。)|  
  
   
  
## Examples  
 下列範例會驗證使用結構描述儲存在<xref:System.Xml.Schema.XmlSchemaSet>。  
  
 [!code-cpp[XmlReader_Validate_SchemaSet#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReader_Validate_SchemaSet/CPP/XmlReader_Validate_SchemaSet.cpp#1)]
 [!code-csharp[XmlReader_Validate_SchemaSet#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader_Validate_SchemaSet/CS/validschemaset.cs#1)]
 [!code-vb[XmlReader_Validate_SchemaSet#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader_Validate_SchemaSet/VB/validschemaset.vb#1)]  
  
 此範例會使用下列的輸入的檔案：  
  
 `booksSchemaFail.xml`  
  
 [!code-xml[XmlReader_Validate_SchemaSet#2](~/samples/snippets/xml/VS_Snippets_Data/XmlReader_Validate_SchemaSet/XML/booksschemafail.xml#2)]  
  
 `books.xsd`  
  
 [!code-xml[XmlReader_Validate_SchemaSet#3](~/samples/snippets/xml/VS_Snippets_Data/XmlReader_Validate_SchemaSet/XML/books.xsd#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaValidationFlags" />
      </Docs>
    </Member>
    <Member MemberName="XmlResolver">
      <MemberSignature Language="C#" Value="public System.Xml.XmlResolver XmlResolver { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlResolver XmlResolver" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.XmlResolver" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlResolver As XmlResolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlResolver ^ XmlResolver {  void set(System::Xml::XmlResolver ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlResolver : System.Xml.XmlResolver" Usage="System.Xml.XmlReaderSettings.XmlResolver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlResolver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>設定用來存取外部文件的 <see cref="T:System.Xml.XmlResolver" />。</summary>
        <value><see cref="T:System.Xml.XmlResolver" />，用於存取外部文件。 如果設為 <see langword="null" />，則在 <see cref="T:System.Xml.XmlException" /> 嘗試存取外部資源時會擲回 <see cref="T:System.Xml.XmlReader" />。 預設為沒有認證的新 <see cref="T:System.Xml.XmlUrlResolver" />。  從.NET Framework 4.5.2 開始，此設定具有預設值是<see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlResolver>來找出並開啟 XML 執行個體文件，或尋找及開啟 XML 執行個體文件所參考的任何外部資源。 這可能包括實體、 DTD 或結構描述。 <xref:System.Xml.XmlResolver.Credentials%2A?displayProperty=nameWithType>屬性可以用來指定網路驗證所需的任何認證。  
  
> [!IMPORTANT]
>  因為<xref:System.Xml.XmlReaderSettings.XmlResolver%2A>可以包含機密資訊，例如使用者認證，您應該要特別小心快取時<xref:System.Xml.XmlReaderSettings>物件，或傳遞時<xref:System.Xml.XmlReaderSettings>元件之間的物件。  
>   
>  <xref:System.Xml.XmlSecureResolver>可用來存取外部文件。 <xref:System.Xml.XmlSecureResolver>類別可以協助保護另一實作<xref:System.Xml.XmlResolver>藉由包裝<xref:System.Xml.XmlResolver>物件，並限制資源的基礎<xref:System.Xml.XmlResolver>具有存取權。  
>   
>  依預設，不會設定 <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> 物件的 <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> 及 <xref:System.Xml.XmlReaderSettings> 驗證旗標。 當設定這些旗標時，<xref:System.Xml.XmlReaderSettings.XmlResolver%2A> 物件的 <xref:System.Xml.XmlReaderSettings> 可用於解析在 <xref:System.Xml.XmlReader> 的執行個體文件中發現的結構描述位置。 如果<xref:System.Xml.XmlReaderSettings.XmlResolver%2A>物件是否`null`，則不會解析結構描述位置即使<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema>和<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation>設定驗證旗標。  
>   
>  驗證期間加入的結構描述會加入新型別，並可變更要驗證之物件的驗證結果。 因此，外部結構描述應僅從受信任的來源解析。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Xml.XmlReader>使用<xref:System.Xml.XmlSecureResolver>具有預設認證。  
  
 [!code-csharp[XmlReader.Create#10](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.Create/CS/XmlReader_Create.cs#10)]
 [!code-vb[XmlReader.Create#10](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.Create/VB/XmlReader_Create.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>