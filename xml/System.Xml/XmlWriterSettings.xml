<Type Name="XmlWriterSettings" FullName="System.Xml.XmlWriterSettings">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3708673d1f08f8830ae66ec198637d8f7a756e30" />
    <Meta Name="ms.sourcegitcommit" Value="b15b8cf0f6dbc1504057c88969d9ef4b790891fe" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="05/11/2018" />
    <Meta Name="ms.locfileid" Value="34061569" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class XmlWriterSettings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XmlWriterSettings extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlWriterSettings" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XmlWriterSettings" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlWriterSettings sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>指定要在由 <see cref="T:System.Xml.XmlWriter" /> 方法建立的 <see cref="Overload:System.Xml.XmlWriter.Create" /> 物件上支援的一組功能。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlWriter.Create%2A>方法是取得的慣用的機制<xref:System.Xml.XmlWriter>執行個體。 <xref:System.Xml.XmlWriter.Create%2A>方法會使用<xref:System.Xml.XmlWriterSettings>類別，以指定要在實作哪些功能<xref:System.Xml.XmlWriter>所建立的物件。  
  
> [!NOTE]
>  如果您使用<xref:System.Xml.XmlWriter>物件<xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>方法，您應該使用<xref:System.Xml.Xsl.XslCompiledTransform.OutputSettings%2A>屬性，以取得<xref:System.Xml.XmlWriterSettings>物件以正確的設定。 如此可確保所建立的 <xref:System.Xml.XmlWriter> 物件具有正確的輸出設定。  
  
 <xref:System.Xml.XmlWriterSettings>類別提供的屬性，該控制項的資料一致性和輸出格式。  
  
 資料一致性檢查和自動更正，請使用這些屬性：  
  
|屬性|指定|值|預設|  
|--------------|---------------|-----------|-------------|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|是否要檢查字元是合法的 XML 字元集，如 W3C 所定義。|`true` 或 `false`|`true`|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|是否要檢查輸出是否格式正確的 XML 1.0 文件或片段。|<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType> （文件層級）、 <xref:System.Xml.ConformanceLevel.Fragment> （片段層級），或<xref:System.Xml.ConformanceLevel.Auto>（自動偵測）|<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType> （文件層級的一致性）|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|是否要加入結尾標記未封閉的所有項目時<xref:System.Xml.XmlWriter.Close%2A>方法呼叫。|`true` 或 `false`|`true`|  
  
 若要指定輸出格式，請使用這些屬性：  
  
|屬性|指定|值|預設|  
|--------------|---------------|-----------|-------------|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|若要使用的編碼方式的文字。|<xref:System.Text.Encoding?displayProperty=nameWithType> 值|<xref:System.Text.Encoding.UTF8?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|是否要縮排項目|`true` 或 `false`|`false` （沒有縮排）|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|字元縮排時使用的字串 (時使用<xref:System.Xml.XmlWriterSettings.Indent%2A>設`true`)。|String|兩個空格|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|要用於分行符號的字元字串。|String|`\r\n` （歸位字元、 換行字元）|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|如何處理新行字元。|<xref:System.Xml.NewLineHandling?displayProperty=nameWithType> 值： <xref:System.Xml.NewLineHandling.Entitize> （標準化） <xref:System.Xml.NewLineHandling.Replace> （取代），或<xref:System.Xml.NewLineHandling.None>（保持不變）|<xref:System.Xml.NewLineHandling.Replace> (使用指定的字元取代<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>)|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|是否將屬性寫在單獨一行 (沒有任何作用<xref:System.Xml.XmlWriterSettings.Indent%2A>是`false`)。|`true` 或 `false`|`false`|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|是否要撰寫 XML 宣告。|`true` 或 `false`|`false`|  
  
   
  
## Examples  
 下列範例會建立<xref:System.Xml.XmlWriter>，寫入至 XML 檔案，並寫入新行上的每個屬性。  
  
 [!code-csharp[XmlWriterSettings.NewLineOnAttributes#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.NewLineOnAttributes/CS/writenewlineattrs.cs#1)]
 [!code-vb[XmlWriterSettings.NewLineOnAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.NewLineOnAttributes/VB/writenewlineattrs.vb#1)]  
  
 此範例會產生下列輸出：  
  
```xml  
<order  
  orderID="367A54"  
  date="2001-05-03">  
  <price>19.95</price>  
</order>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriterSettings.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterSettings();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Xml.XmlWriterSettings" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表顯示的執行個體的初始屬性值<xref:System.Xml.XmlWriterSettings>。  
  
|屬性|初始值|  
|--------------|-------------------|  
|<xref:System.Xml.XmlWriterSettings.Async%2A>|`false`。|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`。|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`。|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document>。|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|`Encoding.UTF8`。|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`。|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|兩個空格。|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n` （歸位字元、 新行）。|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace>。|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`。|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`。|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`。|  
  
   
  
## Examples  
 下列範例會建立<xref:System.Xml.XmlWriter>來縮排使用 TAB 字元的物件。  
  
 [!code-csharp[XmlWriterSettings.Indent#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.Indent/CS/writeindent.cs#1)]
 [!code-vb[XmlWriterSettings.Indent#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.Indent/VB/writeindent.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Async">
      <MemberSignature Language="C#" Value="public bool Async { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Async" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.Async" />
      <MemberSignature Language="VB.NET" Value="Public Property Async As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Async { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出非同步 <see cref="T:System.Xml.XmlWriter" /> 方法是否可以用於特定 <see cref="T:System.Xml.XmlWriter" /> 執行個體。</summary>
        <value>
          如果可以使用非同步方法，則為 <see langword="true" />，否則為<see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您必須將此值設定為`true`當您建立新<xref:System.Xml.XmlWriter>執行個體，如果您想要使用非同步<xref:System.Xml.XmlWriter>該執行個體上的方法。 之後<xref:System.Xml.XmlWriter>建立執行個體時，<xref:System.Xml.XmlWriterSettings.Async%2A>屬性是唯讀的。 此屬性的預設值為 `false`。  
  
 這個旗標會忽略<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>多載。 這表示，如果您建立新<xref:System.Xml.XmlWriter>根據現有<xref:System.Xml.XmlWriter>，非同步行為取決於輸入<xref:System.Xml.XmlWriter>，而且您無法使用<xref:System.Xml.XmlWriterSettings.Async%2A>變更非同步行為的旗標。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckCharacters">
      <MemberSignature Language="C#" Value="public bool CheckCharacters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckCharacters" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.CheckCharacters" />
      <MemberSignature Language="VB.NET" Value="Public Property CheckCharacters As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CheckCharacters { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，這個值表示 XML 寫入器是否應該檢查以確定文件中的所有字元都符合 W3C [XML 1.0 Recommendation](https://www.w3.org/TR/REC-xml/#charsets) 中的 "2.2 Characters" 一節。</summary>
        <value>
          <see langword="true" /> 表示執行字元檢查，否則為 <see langword="false" />。 預設值為 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Xml.XmlWriter>物件支援的字元檢查時，就會擲回例外狀況，如果任何字元都是合法的 XML 字元 W3C 的 「 2.2 字元 」 一節所指定的範圍外[XML 1.0 版建議事項](https://www.w3.org/TR/REC-xml/#charsets)。  
  
 檢查字元不包括檢查 XML 名稱中不合法的字元，或是檢查所有的 XML 名稱都有效。 這些檢查是一部分的一致性檢查，且一定會執行。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Xml.XmlWriterSettings Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlWriterSettings Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriterSettings.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As XmlWriterSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlWriterSettings ^ Clone();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriterSettings</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>建立 <see cref="T:System.Xml.XmlWriterSettings" /> 執行個體的複本。</summary>
        <returns>複製的 <see cref="T:System.Xml.XmlWriterSettings" /> 物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 複製<xref:System.Xml.XmlWriterSettings>可以修改物件，而不會影響原始物件上的設定。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CloseOutput">
      <MemberSignature Language="C#" Value="public bool CloseOutput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CloseOutput" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.CloseOutput" />
      <MemberSignature Language="VB.NET" Value="Public Property CloseOutput As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CloseOutput { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出呼叫 <see cref="T:System.Xml.XmlWriter" /> 方法時，<see cref="T:System.IO.TextWriter" /> 是否也應該關閉基礎資料流或 <see cref="M:System.Xml.XmlWriter.Close" />。</summary>
        <value>
          <see langword="true" /> 表示也關閉基礎資料流或 <see cref="T:System.IO.TextWriter" />，否則為 <see langword="false" />。 預設值為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當您想要撰寫的 XML 資料流，然後將額外的資訊加入至後資料流結尾時，此設定非常有用<xref:System.Xml.XmlWriter>已完成寫入。  
  
 這個屬性只適用於<xref:System.Xml.XmlWriter>輸出 XML 執行個體內容的資料流或<xref:System.IO.TextWriter>，否則會忽略此設定。  
  
   
  
## Examples  
 下列範例會將 XML 片段寫入記憶體資料流。  
  
 [!code-csharp[XmlWriterSettings.CloseOutput#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConformanceLevel">
      <MemberSignature Language="C#" Value="public System.Xml.ConformanceLevel ConformanceLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.ConformanceLevel ConformanceLevel" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.ConformanceLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property ConformanceLevel As ConformanceLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::ConformanceLevel ConformanceLevel { System::Xml::ConformanceLevel get(); void set(System::Xml::ConformanceLevel value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.ConformanceLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 XML 寫入器檢查 XML 輸出的一致性層級。</summary>
        <value>其中一個指定一致性層級 (文件、片段或自動偵測) 的列舉值。 預設值為 <see cref="F:System.Xml.ConformanceLevel.Document" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A?displayProperty=nameWithType>屬性會設定 XML 寫入器來檢查並保證正在寫入的資料流遵守特定的一組規則。 XML 資料可以檢查以查看它符合格式正確的 XML 1.0 版文件或文件片段的規則。 下表描述三個設定。 預設為文件層級的一致性。  
  
|設定|描述|  
|-------------|-----------------|  
|<xref:System.Xml.ConformanceLevel.Document>|可確保 XML 輸出符合[語式正確的 XML 1.0 文件的規則](https://www.w3.org/TR/REC-xml/#sec-well-formed)，但是可由任何合格的處理器處理。<br /><br /> 文件一致性檢查包含大部分的片段層級檢查，也可確保下列：<br /><br /> -最上層項目沒有 XML 宣告、 DTD、 元素、 註解、 泛空白字元或處理指示以外的任何節點。<br />-的 XML 資料都只能有一個最上層元素節點。<br /><br /> XML 寫入器不會剖析 DTD 資訊寫入。 使用者負責確保 DTD 的格式是否正確。|  
|<xref:System.Xml.ConformanceLevel.Fragment>|可確保 XML 輸出符合[規則語式正確的 XML 1.0 版文件片段](https://www.w3.org/TR/REC-xml/#wf-entities)。<br /><br /> 此設定可接受的最上層具有多個根項目或文字節點的 XML 資料。 此檢查層級可確保任何處理器都可使用做為 XML 1.0 外部剖析實體讀取的資料流。<br /><br /> 在文件片段，不允許 DTD 資訊。|  
|<xref:System.Xml.ConformanceLevel.Auto>|指定的 XML 寫入器應該決定根據內送資料的一致性檢查的層級。 當您不知道是否格式正確的 XML 文件或片段，將會產生的 XML 時，此設定很有用。<br /><br /> 文件一致性檢查適用於下列情況：<br /><br /> -如果<xref:System.Xml.XmlWriter.WriteStartDocument%2A>方法呼叫。<br />-如果 DTD 資訊會寫入。<br /><br /> 如果 XML 資料包含下列其中一種，則會套用片段一致性檢查：<br /><br /> 根層級的文字、 CDATA 或 EntityReference 節點。<br />-多個項目根層級。<br />的根層級任何項目。<br /><br /> 如果出現衝突 (如當您嘗試在根層級寫入 Text 節點及 DTD 時)，則會擲回 <xref:System.Xml.XmlException>。<br /><br /> 如果您另一個換行<xref:System.Xml.XmlWriter>物件，在外部物件不會執行任何額外的一致性檢查; 這會保留給基礎物件。|  
  
 如果 XML 寫入器偵測到違反指定的一致性層級的任何資訊，它會擲回例外狀況。 在某些情況下，XML 寫入器會自動更正一致性錯誤。 例如，寫入器會關閉未關閉的屬性而不擲回例外狀況。 下表顯示不同的一致性違規的處理中的每個設定。  
  
|條件|<xref:System.Xml.ConformanceLevel.Document>|<xref:System.Xml.ConformanceLevel.Fragment>|<xref:System.Xml.ConformanceLevel.Auto>|  
|---------------|---------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------|  
|找到 DTD 資訊。|不是違反這項設定。 不過，XML 寫入器並不會檢查 DTD。使用者必須確定 DTD 的格式是否正確。|<xref:System.Xml.XmlException> 就會擲回。|套用文件一致性檢查。|  
|呼叫 <xref:System.Xml.XmlWriter.WriteStartDocument%2A>。|不會視為違規情形，這項設定。|<xref:System.Xml.XmlException> 就會擲回。|套用文件一致性檢查。|  
|多次呼叫 <xref:System.Xml.XmlWriter.WriteStartDocument%2A>。|<xref:System.Xml.XmlException> 就會擲回。|<xref:System.Xml.XmlException> 就會擲回。|<xref:System.Xml.XmlException> 就會擲回。|  
|文字值會出現在最上層 （不是下列項目或屬性節點）。|<xref:System.Xml.XmlException> 就會擲回。|不會視為違規。|套用片段一致性檢查。|  
|多個項目或任何項目會出現在最上層。|<xref:System.Xml.XmlException> 就會擲回。|不會視為違規。|套用片段一致性檢查。|  
|最上層項目是泛空白字元。|不會視為違規。|不會視為違規。|不會視為違規。|  
|<xref:System.Xml.XmlWriter.WriteEndAttribute%2A> 若要結束屬性節點不被呼叫。|修正 XML 寫入器。|修正 XML 寫入器。|修正 XML 寫入器。|  
|XML 寫入器處於不正確的巢狀的狀態 (例如，<xref:System.Xml.XmlWriter.WriteStartElement%2A>呼叫後面<xref:System.Xml.XmlWriter.WriteEndAttribute%2A>)。|<xref:System.Xml.XmlException> 就會擲回。|<xref:System.Xml.XmlException> 就會擲回。|<xref:System.Xml.XmlException> 就會擲回。|  
|最上層項目是屬性。|<xref:System.Xml.XmlException> 就會擲回。|<xref:System.Xml.XmlException> 就會擲回。|<xref:System.Xml.XmlException> 就會擲回。|  
|找到多個連續的文字節點。|不會被視為發生違規，但要串連的文字節點之使用者的責任。|不會被視為發生違規，但要串連的文字節點之使用者的責任。|不會被視為發生違規，但要串連的文字節點之使用者的責任。|  
|同一命名空間前置詞在一個項目中宣告兩次。|XML 寫入器會產生新的前置詞，第二個命名空間。|XML 寫入器會產生新的前置詞，第二個命名空間。|XML 寫入器會產生新的前置詞，第二個命名空間。|  
|<xref:System.Xml.XmlWriter.WriteStartElement%2A> 指定前置詞和不在該範圍內宣告的命名空間或前置詞是與不同的命名空間相關聯。|XML 寫入器寫入必要的命名空間節點。|XML 寫入器寫入必要的命名空間節點。|XML 寫入器寫入必要的命名空間節點。|  
|<xref:System.Xml.XmlWriter.WriteStartAttribute%2A> 指定前置詞和命名空間中，不該範圍內宣告。|XML 寫入器寫入必要的命名空間節點。|XML 寫入器寫入必要的命名空間節點。|XML 寫入器寫入必要的命名空間節點。|  
|<xref:System.Xml.XmlWriter.WriteStartAttribute%2A> 指定前置詞和命名空間，但前置詞是與不同的範圍內命名空間相關聯。|XML 寫入器會忽略指定的前置詞，並且會查詢正確的前置詞或產生新的前置詞。|XML 寫入器會忽略指定的前置詞，並且會查詢正確的前置詞或產生新的前置詞。|XML 寫入器會忽略指定的前置詞，並且會查詢正確的前置詞或產生新的前置詞。|  
|<xref:System.Xml.XmlWriter.WriteQualifiedName%2A> 用來寫入項目內容的範圍內使用命名空間不存在。|<xref:System.Xml.XmlException> 就會擲回。|<xref:System.Xml.XmlException> 就會擲回。|<xref:System.Xml.XmlException> 就會擲回。|  
|<xref:System.Xml.XmlWriter.WriteQualifiedName%2A> 用來寫入屬性內容範圍內使用命名空間不存在。|XML 寫入器寫入必要的命名空間宣告。|XML 寫入器寫入必要的命名空間宣告。|XML 寫入器寫入必要的命名空間宣告。|  
|`xml:space`屬性不包含有效的值。|<xref:System.Xml.XmlException> 就會擲回。|<xref:System.Xml.XmlException> 就會擲回。|<xref:System.Xml.XmlException> 就會擲回。|  
|發現無效的名稱。|<xref:System.Xml.XmlException> 就會擲回。|<xref:System.Xml.XmlException> 就會擲回。|<xref:System.Xml.XmlException> 就會擲回。|  
|`xml`前置詞未對應至 URI。|XML 寫入器並不會檢查此類型的違規。|XML 寫入器並不會檢查此類型的違規。|XML 寫入器並不會檢查此類型的違規。|  
|`xml`前置詞未對應到http://www.w3.org/XML/1998/namespaceURI。|<xref:System.Xml.XmlException> 就會擲回。|<xref:System.Xml.XmlException> 就會擲回。|<xref:System.Xml.XmlException> 就會擲回。|  
|`xmlns`前置詞或區域名稱不符合 URI。|XML 寫入器並不會檢查此類型的違規。|XML 寫入器並不會檢查此類型的違規。|XML 寫入器並不會檢查此類型的違規。|  
|`xmlns`前置詞或區域名稱未對應到http://www.w3.org/2000/xmlnsURI。|<xref:System.Xml.XmlException> 就會擲回。|<xref:System.Xml.XmlException> 就會擲回。|<xref:System.Xml.XmlException> 就會擲回。|  
  
   
  
## Examples  
 下列範例會將 XML 片段寫入記憶體資料流。  
  
 [!code-csharp[XmlWriterSettings.CloseOutput#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DoNotEscapeUriAttributes">
      <MemberSignature Language="C#" Value="public bool DoNotEscapeUriAttributes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DoNotEscapeUriAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.DoNotEscapeUriAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Property DoNotEscapeUriAttributes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DoNotEscapeUriAttributes { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，這個值會指出 <see cref="T:System.Xml.XmlWriter" /> 是否不會逸出 URI 屬性。</summary>
        <value>
          <see langword="true" /> 如果<see cref="T:System.Xml.XmlWriter" />不逸出 URI 屬性，否則<see langword="false" />。 預設值為 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding Encoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public Property Encoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encoding ^ Encoding { System::Text::Encoding ^ get(); void set(System::Text::Encoding ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定要使用的文字編碼方式類型。</summary>
        <value>要使用的文字編碼方式。 預設值為 <see langword="Encoding.UTF8" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlWriter>一次，而不是逐字元編碼的字元緩衝區。 例外狀況時擲回<xref:System.Xml.XmlWriter.Flush%2A>呼叫方法時若發生任何編碼的錯誤。  
  
 <xref:System.Xml.XmlWriterSettings.Encoding%2A>屬性只適用於<xref:System.Xml.XmlWriter>皆可建立具有指定的執行個體<xref:System.IO.Stream>或使用指定的檔案名稱。 如果<xref:System.Xml.XmlWriter>建立執行個體具有指定<xref:System.IO.TextWriter>、<xref:System.Xml.XmlWriterSettings.Encoding%2A>屬性會覆寫基礎的編碼方式<xref:System.IO.TextWriter>。 比方說，如果這個屬性設定為 Unicode (utf-16) 特定<xref:System.Xml.XmlWriter>，但是基礎寫入器<xref:System.IO.StreamWriter>(從中衍生<xref:System.IO.TextWriter>) 的輸出會以設為 UTF8 其編碼方式，是 utf-8 編碼。  
  
 如果<xref:System.Xml.XmlWriter>與其他輸出參數，建立執行個體<xref:System.Xml.XmlWriterSettings.Encoding%2A>屬性會被忽略。  
  
 在以下範例中：  
  
-   <xref:System.Xml.XmlWriterSettings.Encoding%2A> 的預設值為 `Encoding.UTF8`。  
  
-   <xref:System.IO.StreamWriter>設`Encoding.Unicode`和<xref:System.IO.StreamWriter>的編碼方式覆寫<xref:System.Xml.XmlWriterSettings.Encoding%2A>設定。  
  
-   輸出會是`Encoding.Unicode`。  
  
```csharp  
using (StreamWriter output =  
    new StreamWriter(new FileStream("Xml01.xml", FileMode.Create), Encoding.Unicode))  
{  
    using (XmlWriter xmlWriter =  
        XmlWriter.Create(output, new XmlWriterSettings()))  
    {  
        xmlWriter.WriteStartDocument();  
        xmlWriter.WriteStartElement("Root");  
        xmlWriter.WriteEndElement();  
        xmlWriter.WriteEndDocument();  
    }  
}  
```  
  
> [!IMPORTANT]
>  不接受<xref:System.Text.Encoding>來自不受信任的來源物件。  
  
   
  
## Examples  
 下列範例會將 XML 片段寫入記憶體資料流。  
  
 [!code-csharp[XmlWriterSettings.CloseOutput#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Indent">
      <MemberSignature Language="C#" Value="public bool Indent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Indent" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.Indent" />
      <MemberSignature Language="VB.NET" Value="Public Property Indent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Indent { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出是否要縮排項目。</summary>
        <value>
          <see langword="true" /> 表示在新行和縮排上寫入個別項目，否則為 <see langword="false" />。 預設值為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性只適用於<xref:System.Xml.XmlWriter>執行個體的輸出文字的內容; 否則會忽略此設定。  
  
 只要項目不包含混合的內容縮排項目。 一次<xref:System.Xml.XmlWriter.WriteString%2A>或<xref:System.Xml.XmlWriter.WriteWhitespace%2A>呼叫方法以寫出混合項目內容，<xref:System.Xml.XmlWriter>停止縮排。 一旦關閉混合內容項目，就會繼續縮排。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Xml.XmlWriter>來縮排使用 TAB 字元的物件。  
  
 [!code-csharp[XmlWriterSettings.Indent#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.Indent/CS/writeindent.cs#1)]
 [!code-vb[XmlWriterSettings.Indent#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.Indent/VB/writeindent.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndentChars">
      <MemberSignature Language="C#" Value="public string IndentChars { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string IndentChars" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.IndentChars" />
      <MemberSignature Language="VB.NET" Value="Public Property IndentChars As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ IndentChars { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定縮排時使用的字元字串。 當 <see cref="P:System.Xml.XmlWriterSettings.Indent" /> 屬性設為 <see langword="true" /> 時會使用這項設定。</summary>
        <value>縮排時使用的字元字串。 它可以設為任何字串值。 不過，若要確保有效的 XML，您應該只指定有效的空白字元 (例如，空格字元、定位字元、歸位字元或換行符號)。 預設值為兩個空格。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性只適用於<xref:System.Xml.XmlWriter>執行個體的輸出文字的內容; 否則會忽略此設定。 <xref:System.Xml.XmlWriter>擲回例外狀況，如果縮排字元會導致無效的 XML。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Xml.XmlWriter>來縮排使用 TAB 字元的物件。  
  
 [!code-csharp[XmlWriterSettings.Indent#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.Indent/CS/writeindent.cs#1)]
 [!code-vb[XmlWriterSettings.Indent#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.Indent/VB/writeindent.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">指派至 <see cref="P:System.Xml.XmlWriterSettings.IndentChars" /> 的值為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="NamespaceHandling">
      <MemberSignature Language="C#" Value="public System.Xml.NamespaceHandling NamespaceHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.NamespaceHandling NamespaceHandling" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.NamespaceHandling" />
      <MemberSignature Language="VB.NET" Value="Public Property NamespaceHandling As NamespaceHandling" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::NamespaceHandling NamespaceHandling { System::Xml::NamespaceHandling get(); void set(System::Xml::NamespaceHandling value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.NamespaceHandling</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，這個值表示 <see cref="T:System.Xml.XmlWriter" /> 是否應該在寫入 XML 內容時移除重複的命名空間宣告。 預設行為是讓寫入器輸出寫入器命名空間解析程式中出現的所有命名空間宣告。</summary>
        <value>
          <see cref="T:System.Xml.NamespaceHandling" /> 列舉型別，用來指定是否要移除 <see cref="T:System.Xml.XmlWriter" /> 中的重複命名空間宣告。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NewLineChars">
      <MemberSignature Language="C#" Value="public string NewLineChars { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NewLineChars" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.NewLineChars" />
      <MemberSignature Language="VB.NET" Value="Public Property NewLineChars As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NewLineChars { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定用於分行符號的字元字串。</summary>
        <value>用於分行符號的字元字串。 它可以設為任何字串值。 不過，若要確保有效的 XML，您應該只指定有效的空白字元 (例如，空格字元、定位字元、歸位字元或換行符號)。 預設值是<c>\r\n</c> （歸位字元傳回，新行）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性只適用於<xref:System.Xml.XmlWriter>執行個體的輸出文字的內容; 否則會忽略此設定。 <xref:System.Xml.XmlWriter>擲回例外狀況，如果分行符號字元會導致無效的 XML。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">指派至 <see cref="P:System.Xml.XmlWriterSettings.NewLineChars" /> 的值為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="NewLineHandling">
      <MemberSignature Language="C#" Value="public System.Xml.NewLineHandling NewLineHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.NewLineHandling NewLineHandling" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.NewLineHandling" />
      <MemberSignature Language="VB.NET" Value="Public Property NewLineHandling As NewLineHandling" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::NewLineHandling NewLineHandling { System::Xml::NewLineHandling get(); void set(System::Xml::NewLineHandling value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.NewLineHandling</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出是否要將輸出中的分行符號標準化。</summary>
        <value>其中一個 <see cref="T:System.Xml.NewLineHandling" /> 值。 預設值為 <see cref="F:System.Xml.NewLineHandling.Replace" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 寫入文字內容或屬性的值時，就會適用這項設定。 每個<xref:System.Xml.NewLineHandling>值如下所述：  
  
-   <xref:System.Xml.NewLineHandling.Entitize>設定會告知<xref:System.Xml.XmlWriter>取代新行字元，就不會否則保留正規化<xref:System.Xml.XmlReader>字元實體。 這是反覆存取的情況下，讀取輸出正規化有用<xref:System.Xml.XmlReader>。 其他正規化規則適用於屬性值時來回行程自`\t`，`\n`和`\r`所取代時在正規化的屬性值中的空間<xref:System.Xml.XmlReader>。  
  
-   <xref:System.Xml.NewLineHandling.Replace>設定會告知<xref:System.Xml.XmlWriter>取代新行字元與`\r\n`，這是 Microsoft Windows 作業系統所使用的新行格式。 這有助於確保檔案可以正確顯示在 [記事本] 或 Microsoft Word 應用程式。 這項設定也會使用以保留字元的字元實體取代屬性中的新行。 這是預設值。  
  
-   <xref:System.Xml.NewLineHandling.None>設定會告知<xref:System.Xml.XmlWriter>將保持不變的輸入。 當您不想處理任何新行時，會使用此設定。 讀取的輸出時這非常有用<xref:System.Xml.XmlReader>不會執行任何正規化 (例如，<xref:System.Xml.XmlTextReader>以預設設定。)  
  
 下表顯示的輸出<xref:System.Xml.XmlWriter.WriteString%2A>方法時所輸入的值取決於提供<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>屬性設定。 寫入文字內容時，資料表會顯示輸出，也寫入屬性值時。  
  
 `Text Node Value:`  
  
||\r\n|\n|\r|\t|  
|-|------------|---------|---------|---------|  
|實體化|（& s) #D; \n|\n|&#D;|\t|  
|取代|\r\n|\r\n|\r\n|\t|  
|無|\r\n|\n|\r|\t|  
  
 `Attribute Value:`  
  
||\r\n|\n|\r|\t|  
|-|------------|---------|---------|---------|  
|實體化|（&AMP; S) #D; &AMP; #A;|（&AMP; S) #A;|&#D;|&\#9;|  
|取代|（&AMP; S) #D; &AMP; #A;|（&AMP; S) #A;|&#D;|&\#9;|  
|無|\r\n|\n|\r|\t|  
  
> [!NOTE]
>  <xref:System.Xml.XmlWriter>撰寫在 CDATA 區段、 註解或處理指示的內容時，具有以下行為。 新行永遠不會取代其字元實體，即使<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>屬性設定為<xref:System.Xml.NewLineHandling.Entitize>。 這是因為在 CDATA 區段中，註解或處理指示無法辨識的字元實體。 如果<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>屬性設定為<xref:System.Xml.NewLineHandling.None>或<xref:System.Xml.NewLineHandling.Replace>，寫入的文字節點的值時的行為是相同。  
  
 下表描述哪些正規化<xref:System.Xml.XmlReader>傳回每個輸入的泛空白字元。 如需詳細資訊，請參閱章節 2.11 和 W3C 的 3.3.3 [XML 1.0 版建議事項](https://www.w3.org/TR/REC-xml/)。  
  
> [!NOTE]
>  正規化的讀取器可以是任何<xref:System.Xml.XmlReader>所建立的物件<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法。 這些物件一律會執行分行符號正規化和屬性的完全正規化。 <xref:System.Xml.XmlTextReader>物件也可以是正規化的讀取器，如果它是<xref:System.Xml.XmlTextReader.Normalization%2A>屬性設定為`true`。  
  
||\r\n|\n|\r|\t|  
|-|------------|---------|---------|---------|  
|文字節點值|\n|\n|\n|\t|  
|屬性值|單一空格|單一空格|單一空格|單一空格|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewLineOnAttributes">
      <MemberSignature Language="C#" Value="public bool NewLineOnAttributes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NewLineOnAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.NewLineOnAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Property NewLineOnAttributes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NewLineOnAttributes { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出是否將屬性寫在新行上。</summary>
        <value>
          <see langword="true" /> 表示將屬性寫在獨立的行上，否則為 <see langword="false" />。 預設值為 <see langword="false" />。  
  
 <block subset="none" type="note"><para>  
 當 <see cref="P:System.Xml.XmlWriterSettings.Indent" /> 屬性值為 <see langword="false" /> 時，這項設定沒有影響。  
  
</para></block>  
  
 當 <see cref="P:System.Xml.XmlWriterSettings.NewLineOnAttributes" /> 設為 <see langword="true" /> 時，會在每個屬性之前加上新行和一個額外的縮排層級。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性只適用於<xref:System.Xml.XmlWriter>執行個體的輸出文字的內容; 否則會忽略此設定。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Xml.XmlWriter>，寫入至 XML 檔案，並寫入新行上的每個屬性。  
  
 [!code-csharp[XmlWriterSettings.NewLineOnAttributes#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.NewLineOnAttributes/CS/writenewlineattrs.cs#1)]
 [!code-vb[XmlWriterSettings.NewLineOnAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.NewLineOnAttributes/VB/writenewlineattrs.vb#1)]  
  
 此範例會產生下列輸出：  
  
```xml  
<order  
  orderID="367A54"  
  date="2001-05-03">  
  <price>19.95</price>  
</order>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OmitXmlDeclaration">
      <MemberSignature Language="C#" Value="public bool OmitXmlDeclaration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OmitXmlDeclaration" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.OmitXmlDeclaration" />
      <MemberSignature Language="VB.NET" Value="Public Property OmitXmlDeclaration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool OmitXmlDeclaration { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出是否省略 XML 宣告。</summary>
        <value>
          <see langword="true" /> 表示省略 XML 宣告，否則為 <see langword="false" />。 預設值為 <see langword="false" />，表示會寫入 XML 宣告。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性只適用於<xref:System.Xml.XmlWriter>執行個體的輸出文字的內容; 否則會忽略此設定。  
  
 如果<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>設`false`，則會自動寫入 XML 宣告  
  
 如果一律會寫入 XML 宣告<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>設<xref:System.Xml.ConformanceLevel.Document>，即使<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>設`true`。  
  
 如果永遠不會寫入 XML 宣告<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>設<xref:System.Xml.ConformanceLevel.Fragment>。 您可以呼叫<xref:System.Xml.XmlWriter.WriteProcessingInstruction%2A>明確寫出 XML 宣告。  
  
   
  
## Examples  
 下列範例會將 XML 片段寫入記憶體資料流。  
  
 [!code-csharp[XmlWriterSettings.CloseOutput#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputMethod">
      <MemberSignature Language="C#" Value="public System.Xml.XmlOutputMethod OutputMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlOutputMethod OutputMethod" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.OutputMethod" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OutputMethod As XmlOutputMethod" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlOutputMethod OutputMethod { System::Xml::XmlOutputMethod get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlOutputMethod</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得用於序列化 <see cref="T:System.Xml.XmlWriter" /> 輸出的方法。</summary>
        <value>其中一個 <see cref="T:System.Xml.XmlOutputMethod" /> 值。 預設值為 <see cref="F:System.Xml.XmlOutputMethod.Xml" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此屬性會指定用來序列化輸出的方法。 可以使用 HTML 規則、 XML 1.0 規則等序列化輸出。 此設定由 XSLT 處理器設定，由 Visual Studio 內部使用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriterSettings.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將設定類別的成員重設為其預設值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表顯示預設的執行個體的屬性值<xref:System.Xml.XmlWriterSettings>。  
  
|屬性|Initial value|  
|--------------|-------------------|  
|<xref:System.Xml.XmlWriterSettings.Async%2A>|`false`。|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`。|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`。|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document>。|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|`Encoding.UTF8`。|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`。|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|兩個空格。|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n`。|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace>。|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`。|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`。|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteEndDocumentOnClose">
      <MemberSignature Language="C#" Value="public bool WriteEndDocumentOnClose { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool WriteEndDocumentOnClose" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose" />
      <MemberSignature Language="VB.NET" Value="Public Property WriteEndDocumentOnClose As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool WriteEndDocumentOnClose { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出 <see cref="T:System.Xml.XmlWriter" /> 是否會在呼叫 <see cref="M:System.Xml.XmlWriter.Close" /> 方法時，將結尾標記加入至所有未封閉的項目標記。</summary>
        <value>
          如果將關閉所有未封閉的項目標記，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值是 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果您將此旗標設定為`false`，輸出 XML 檔案可能不是語式正確。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>