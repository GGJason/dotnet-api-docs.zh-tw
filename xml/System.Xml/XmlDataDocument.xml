<Type Name="XmlDataDocument" FullName="System.Xml.XmlDataDocument">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="269851ce0bce3ca09412babec7031c9530854019" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36435673" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XmlDataDocument : System.Xml.XmlDocument" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlDataDocument extends System.Xml.XmlDocument" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlDataDocument" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlDataDocument&#xA;Inherits XmlDocument" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlDataDocument : System::Xml::XmlDocument" />
  <TypeSignature Language="F#" Value="type XmlDataDocument = class&#xA;    inherit XmlDocument" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xml.XmlDocument</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Obsolete("XmlDataDocument class will be removed in a future release.")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="57bc1-101">允許透過關聯式 <see cref="T:System.Data.DataSet" /> 存放、擷取及管理結構化資料。</span>
      <span class="sxs-lookup">
        <span data-stu-id="57bc1-101">Allows structured data to be stored, retrieved, and manipulated through a relational <see cref="T:System.Data.DataSet" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57bc1-102">這個類別會擴充<xref:System.Xml.XmlDocument>。</span><span class="sxs-lookup"><span data-stu-id="57bc1-102">This class extends <xref:System.Xml.XmlDocument>.</span></span> <span data-ttu-id="57bc1-103">它可讓您載入關聯式資料或 XML 資料和管理使用 World Wide Web Consortium (W3C) 文件物件模型 (DOM) 的資料。</span><span class="sxs-lookup"><span data-stu-id="57bc1-103">It enables you to load either relational data or XML data and manipulate that data using the World Wide Web Consortium (W3C) Document Object Model (DOM).</span></span> <span data-ttu-id="57bc1-104">DOM 會將資料呈現成節點物件的階層。</span><span class="sxs-lookup"><span data-stu-id="57bc1-104">The DOM presents data as a hierarchy of node objects.</span></span> <span data-ttu-id="57bc1-105">因為`XmlDataDocument`實作<xref:System.Xml.XPath.IXPathNavigable>介面，它也可用來當作來源文件的<xref:System.Xml.Xsl.XslTransform>類別。</span><span class="sxs-lookup"><span data-stu-id="57bc1-105">Because `XmlDataDocument` implements the <xref:System.Xml.XPath.IXPathNavigable> interface, it can also be used as the source document for the <xref:System.Xml.Xsl.XslTransform> class.</span></span>  
  
 <span data-ttu-id="57bc1-106">`XmlDataDocument` 已關閉其關聯`DataSet`類別，可提供載入的 XML 資料的關聯式檢視。</span><span class="sxs-lookup"><span data-stu-id="57bc1-106">`XmlDataDocument` has a close affiliation with the `DataSet` class, which provides a relational view of the loaded XML data.</span></span> <span data-ttu-id="57bc1-107">所做的變更`XmlDataDocument`會反映在`DataSet`，反之亦然。</span><span class="sxs-lookup"><span data-stu-id="57bc1-107">Any changes made to the `XmlDataDocument` are reflected in the `DataSet` and vice versa.</span></span>  
  
 <span data-ttu-id="57bc1-108">若要載入`DataSet`與 XML 資料一起使用<xref:System.Data.DataSet.ReadXmlSchema%2A>建置關聯式的對應。</span><span class="sxs-lookup"><span data-stu-id="57bc1-108">To load a `DataSet` with XML data, use <xref:System.Data.DataSet.ReadXmlSchema%2A> to build a relational mapping.</span></span> <span data-ttu-id="57bc1-109">XML 可以再將資料載入使用<xref:System.Xml.XmlDataDocument.Load%2A>或<xref:System.Xml.XmlDocument.LoadXml%2A>。</span><span class="sxs-lookup"><span data-stu-id="57bc1-109">The XML data can then be loaded using <xref:System.Xml.XmlDataDocument.Load%2A> or <xref:System.Xml.XmlDocument.LoadXml%2A>.</span></span>  
  
 <span data-ttu-id="57bc1-110">若要載入關聯式資料，請指定`DataSet`包含關聯式資料中的參數為<xref:System.Xml.XmlDataDocument.%23ctor%2A>建構函式。</span><span class="sxs-lookup"><span data-stu-id="57bc1-110">To load relational data, specify the `DataSet` containing the relational data as the parameter in the <xref:System.Xml.XmlDataDocument.%23ctor%2A> constructor.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="57bc1-111">初始化 <see cref="T:System.Xml.XmlDataDocument" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="57bc1-111">Initializes a new instance of the <see cref="T:System.Xml.XmlDataDocument" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlDataDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDataDocument.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlDataDocument();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="57bc1-112">初始化 <see cref="T:System.Xml.XmlDataDocument" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="57bc1-112">Initializes a new instance of the <see cref="T:System.Xml.XmlDataDocument" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57bc1-113">空白<xref:System.Data.DataSet>建立並與相關聯`XmlDataDocument`。</span><span class="sxs-lookup"><span data-stu-id="57bc1-113">An empty <xref:System.Data.DataSet> is created and associated with the `XmlDataDocument`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlDataDocument (System.Data.DataSet dataset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.DataSet dataset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDataDocument.#ctor(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlDataDocument(System::Data::DataSet ^ dataset);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlDataDocument : System.Data.DataSet -&gt; System.Xml.XmlDataDocument" Usage="new System.Xml.XmlDataDocument dataset" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dataset" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataset">
          <span data-ttu-id="57bc1-114">要載入 <see langword="DataSet" /> 中的 <see langword="XmlDataDocument" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="57bc1-114">The <see langword="DataSet" /> to load into <see langword="XmlDataDocument" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="57bc1-115">使用指定的 <see cref="T:System.Xml.XmlDataDocument" /> 初始化 <see cref="T:System.Data.DataSet" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="57bc1-115">Initializes a new instance of the <see cref="T:System.Xml.XmlDataDocument" /> class with the specified <see cref="T:System.Data.DataSet" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57bc1-116">`XmlDataDocument`同步處理具有指定`DataSet`。</span><span class="sxs-lookup"><span data-stu-id="57bc1-116">The `XmlDataDocument` is synchronized with the specified `DataSet`.</span></span> <span data-ttu-id="57bc1-117">中的任何資料`DataSet`立即可透過`XmlDataDocument`。</span><span class="sxs-lookup"><span data-stu-id="57bc1-117">Any data in the `DataSet` is immediately available through the `XmlDataDocument`.</span></span> <span data-ttu-id="57bc1-118">中的任何變更`DataSet`傳播的`XmlDataDocument`。</span><span class="sxs-lookup"><span data-stu-id="57bc1-118">Any changes in the `DataSet` are propagated in the `XmlDataDocument`.</span></span> <span data-ttu-id="57bc1-119">中所做的任何變更`XmlDataDocument`，前提是它們符合`DataSet`結構描述中，會傳播的`DataSet`。</span><span class="sxs-lookup"><span data-stu-id="57bc1-119">Any changes made in the `XmlDataDocument`, provided they match the `DataSet` schema, are propagated in the `DataSet`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57bc1-120">下列範例會載入至 customer 資料表`XmlDataDocument`。</span><span class="sxs-lookup"><span data-stu-id="57bc1-120">The following example loads a customer table into an `XmlDataDocument`.</span></span>  
  
 <span data-ttu-id="57bc1-121">此範例會使用 SQL Server 2000 的 Northwind 資料庫。</span><span class="sxs-lookup"><span data-stu-id="57bc1-121">The example uses the SQL Server 2000 Northwind database.</span></span>  
  
 [!code-cpp[Classic WebData XmlDataDocument.XmlDataDocument1 Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlDataDocument.XmlDataDocument1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlDataDocument.XmlDataDocument1 Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlDataDocument.XmlDataDocument1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlDataDocument.XmlDataDocument1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlDataDocument.XmlDataDocument1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.SqlClient.SqlConnection" />
        <altmember cref="T:System.Data.SqlClient.SqlDataAdapter" />
      </Docs>
    </Member>
    <Member MemberName="CloneNode">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNode CloneNode (bool deep);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Xml.XmlNode CloneNode(bool deep) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDataDocument.CloneNode(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CloneNode (deep As Boolean) As XmlNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Xml::XmlNode ^ CloneNode(bool deep);" />
      <MemberSignature Language="F#" Value="override this.CloneNode : bool -&gt; System.Xml.XmlNode" Usage="xmlDataDocument.CloneNode deep" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deep" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="deep">
          <span data-ttu-id="57bc1-122">若要在指定的節點下遞迴地複製子樹狀結構，則為 <see langword="true" />；若只要複製節點本身，則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="57bc1-122">
              <see langword="true" /> to recursively clone the subtree under the specified node; <see langword="false" /> to clone only the node itself.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="57bc1-123">建立目前節點的複本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="57bc1-123">Creates a duplicate of the current node.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="57bc1-124">複製的節點。</span>
          <span class="sxs-lookup">
            <span data-stu-id="57bc1-124">The cloned node.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57bc1-125">複製`XmlDataDocument`也複製<xref:System.Data.DataSet>結構描述。</span><span class="sxs-lookup"><span data-stu-id="57bc1-125">Cloning the `XmlDataDocument` also clones the <xref:System.Data.DataSet> schema.</span></span>  
  
 <span data-ttu-id="57bc1-126">如果`deep`設`false`，複製`DataSet`有任何資料; 也就是說，沒有任何資料列。</span><span class="sxs-lookup"><span data-stu-id="57bc1-126">If `deep` is set to `false`, the cloned `DataSet` has no data; that is, no rows.</span></span>  
  
 <span data-ttu-id="57bc1-127">如果`deep`設`true`，複製`DataSet`與結構描述設定並接著填入資料。</span><span class="sxs-lookup"><span data-stu-id="57bc1-127">If `deep` is set to `true`, the cloned `DataSet` is set with the schema and then populated with the data.</span></span>  
  
 <span data-ttu-id="57bc1-128">請參閱<xref:System.Xml.XmlNode.CloneNode%2A>中`XmlNode`類別，以查看資料表，描述這個方法與每個不同的節點類型的行為。</span><span class="sxs-lookup"><span data-stu-id="57bc1-128">See <xref:System.Xml.XmlNode.CloneNode%2A> in the `XmlNode` class to see a table describing how this method behaves with each of the different node types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57bc1-129">下列範例會載入`DataSet`到`XmlDataDocument`，然後建立的淺層複製`XmlDataDocument`。</span><span class="sxs-lookup"><span data-stu-id="57bc1-129">The following example loads a `DataSet` into an `XmlDataDocument` and then creates a shallow clone of the `XmlDataDocument`.</span></span>  
  
 <span data-ttu-id="57bc1-130">此範例會使用 SQL Server 2000 的 Northwind 資料庫。</span><span class="sxs-lookup"><span data-stu-id="57bc1-130">The example uses the SQL Server 2000 Northwind database.</span></span>  
  
 [!code-cpp[Classic WebData XmlDataDocument.CloneNode Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlDataDocument.CloneNode Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlDataDocument.CloneNode Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlDataDocument.CloneNode Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlDataDocument.CloneNode Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlDataDocument.CloneNode Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateElement">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlElement CreateElement (string prefix, string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Xml.XmlElement CreateElement(string prefix, string localName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDataDocument.CreateElement(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CreateElement (prefix As String, localName As String, namespaceURI As String) As XmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Xml::XmlElement ^ CreateElement(System::String ^ prefix, System::String ^ localName, System::String ^ namespaceURI);" />
      <MemberSignature Language="F#" Value="override this.CreateElement : string * string * string -&gt; System.Xml.XmlElement" Usage="xmlDataDocument.CreateElement (prefix, localName, namespaceURI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">
          <span data-ttu-id="57bc1-131">新項目的前置詞。</span>
          <span class="sxs-lookup">
            <span data-stu-id="57bc1-131">The prefix of the new element.</span>
          </span>
          <span data-ttu-id="57bc1-132">如果 String.Empty 或 <see langword="null" />，則沒有前置字元。</span>
          <span class="sxs-lookup">
            <span data-stu-id="57bc1-132">If String.Empty or <see langword="null" />, there is no prefix.</span>
          </span>
        </param>
        <param name="localName">
          <span data-ttu-id="57bc1-133">新項目的本機名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="57bc1-133">The local name of the new element.</span>
          </span>
        </param>
        <param name="namespaceURI">
          <span data-ttu-id="57bc1-134">取得新項目的命名空間統一資源識別元 (URI)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="57bc1-134">The namespace Uniform Resource Identifier (URI) of the new element.</span>
          </span>
          <span data-ttu-id="57bc1-135">如果 String.Empty 或 <see langword="null" />，則沒有命名空間 URI。</span>
          <span class="sxs-lookup">
            <span data-stu-id="57bc1-135">If String.Empty or <see langword="null" />, there is no namespaceURI.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="57bc1-136">建立具有指定之 <see cref="P:System.Xml.XmlNode.Prefix" />、<see cref="P:System.Xml.XmlDocument.LocalName" /> 和 <see cref="P:System.Xml.XmlNode.NamespaceURI" /> 的項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="57bc1-136">Creates an element with the specified <see cref="P:System.Xml.XmlNode.Prefix" />, <see cref="P:System.Xml.XmlDocument.LocalName" /> , and <see cref="P:System.Xml.XmlNode.NamespaceURI" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="57bc1-137">新的 <see cref="T:System.Xml.XmlElement" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="57bc1-137">A new <see cref="T:System.Xml.XmlElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57bc1-138">`Note to Inheritors` 如果您多載這個函式，它不能用於擴充性。</span><span class="sxs-lookup"><span data-stu-id="57bc1-138">`Note to Inheritors` If you overload this function, it cannot be used for extensibility.</span></span> <span data-ttu-id="57bc1-139">相反地，您還可以傳回的基底類別，在此情況下，所建立的項目`XmlDataDocument`。</span><span class="sxs-lookup"><span data-stu-id="57bc1-139">Instead, you can return an element created by the base class, in this case, `XmlDataDocument`.</span></span> <span data-ttu-id="57bc1-140">請參閱下列範例。</span><span class="sxs-lookup"><span data-stu-id="57bc1-140">See the following example.</span></span>  
  
```csharp  
class MyXmlDataDocument : XmlDataDocument {  
 public override XmlElement CreateElement(string prefix, string localName, string nsURI) {  
   //Ensure we are returning the base class implementation of element.  
   XmlElement e = base.CreateElement(prefix, localName, nsURI);  
   //Add additional code here.  
   return e;    //Return the element created by XmlDataDocument.  
 }      
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateEntityReference">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlEntityReference CreateEntityReference (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Xml.XmlEntityReference CreateEntityReference(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDataDocument.CreateEntityReference(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CreateEntityReference (name As String) As XmlEntityReference" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Xml::XmlEntityReference ^ CreateEntityReference(System::String ^ name);" />
      <MemberSignature Language="F#" Value="override this.CreateEntityReference : string -&gt; System.Xml.XmlEntityReference" Usage="xmlDataDocument.CreateEntityReference name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlEntityReference</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="57bc1-141">實體參考的名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="57bc1-141">The name of the entity reference.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="57bc1-142">建立具有指定名稱的 <see cref="T:System.Xml.XmlEntityReference" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="57bc1-142">Creates an <see cref="T:System.Xml.XmlEntityReference" /> with the specified name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="57bc1-143">具有指定名稱的 <see cref="T:System.Xml.XmlEntityReference" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="57bc1-143">An <see cref="T:System.Xml.XmlEntityReference" /> with the specified name.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57bc1-144"><xref:System.Xml.XmlEntityReference> 無法建立節點<xref:System.Xml.XmlDataDocument>物件。</span><span class="sxs-lookup"><span data-stu-id="57bc1-144"><xref:System.Xml.XmlEntityReference> nodes cannot be created for <xref:System.Xml.XmlDataDocument> objects.</span></span> <span data-ttu-id="57bc1-145">呼叫這個方法會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="57bc1-145">Calling this method throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="57bc1-146">呼叫這個方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="57bc1-146">Calling this method.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateNavigator">
      <MemberSignature Language="C#" Value="protected override System.Xml.XPath.XPathNavigator CreateNavigator (System.Xml.XmlNode node);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Xml.XPath.XPathNavigator CreateNavigator(class System.Xml.XmlNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDataDocument.CreateNavigator(System.Xml.XmlNode)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateNavigator (node As XmlNode) As XPathNavigator" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Xml::XPath::XPathNavigator ^ CreateNavigator(System::Xml::XmlNode ^ node);" />
      <MemberSignature Language="F#" Value="override this.CreateNavigator : System.Xml.XmlNode -&gt; System.Xml.XPath.XPathNavigator" Usage="xmlDataDocument.CreateNavigator node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XPath.XPathNavigator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Xml.XmlNode" />
      </Parameters>
      <Docs>
        <param name="node">
          <span data-ttu-id="57bc1-147">您希望巡覽器一開始定位所在的 <see cref="T:System.Xml.XmlNode" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="57bc1-147">The <see cref="T:System.Xml.XmlNode" /> you want the navigator initially positioned on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="57bc1-148">建立巡覽這份文件的新 <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="57bc1-148">Creates a new <see cref="T:System.Xml.XPath.XPathNavigator" /> object for navigating this document.</span>
          </span>
          <span data-ttu-id="57bc1-149">
            <see langword="XPathNavigator" /> 定位在 <paramref name="node" /> 參數中指定的節點上。</span>
          <span class="sxs-lookup">
            <span data-stu-id="57bc1-149">The <see langword="XPathNavigator" /> is positioned on the node specified in the <paramref name="node" /> parameter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="57bc1-150">用來巡覽文件的 <see langword="XPathNavigator" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="57bc1-150">An <see langword="XPathNavigator" /> used to navigate the document.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57bc1-151">`XPathNavigator`提供唯讀隨機存取資料。</span><span class="sxs-lookup"><span data-stu-id="57bc1-151">The `XPathNavigator` provides read-only, random access to data.</span></span> <span data-ttu-id="57bc1-152">它適合的 XSLT 轉換，因為它會提供效能優勢時做為輸入的機制，以<xref:System.Xml.Xsl.XslTransform.Transform%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="57bc1-152">Because it is optimized for XSLT transformations, it provides performance benefits when used as an input mechanism to the <xref:System.Xml.Xsl.XslTransform.Transform%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57bc1-153">若要查看 XSLT 轉換使用`XmlDataDocument`和`XPathNavigator`，請參閱<xref:System.Xml.Xsl.XslTransform.Transform%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="57bc1-153">To see an XSLT transformation using `XmlDataDocument` and an `XPathNavigator`, see the <xref:System.Xml.Xsl.XslTransform.Transform%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Xsl.XslTransform" />
      </Docs>
    </Member>
    <Member MemberName="DataSet">
      <MemberSignature Language="C#" Value="public System.Data.DataSet DataSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataSet DataSet" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlDataDocument.DataSet" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DataSet As DataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataSet ^ DataSet { System::Data::DataSet ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DataSet : System.Data.DataSet" Usage="System.Xml.XmlDataDocument.DataSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="57bc1-154">取得提供 <see langword="XmlDataDocument" /> 中之資料的關聯式表示的 <see cref="T:System.Data.DataSet" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="57bc1-154">Gets a <see cref="T:System.Data.DataSet" /> that provides a relational representation of the data in the <see langword="XmlDataDocument" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="57bc1-155">
            <see langword="DataSet" />，可以利用關聯式模型以用於存取 <see langword="XmlDataDocument" /> 中的資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="57bc1-155">A <see langword="DataSet" /> that can be used to access the data in the <see langword="XmlDataDocument" /> using a relational model.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57bc1-156">`DataSet`可讓您存取中的資料`XmlDataDocument`使用關聯式模型。</span><span class="sxs-lookup"><span data-stu-id="57bc1-156">The `DataSet` enables you to access the data in the `XmlDataDocument` using a relational model.</span></span> <span data-ttu-id="57bc1-157">這表示，您可以處理的資料，做為資料表和檢視表、 資料列和資料行、 關聯、 等等。</span><span class="sxs-lookup"><span data-stu-id="57bc1-157">This means that you can handle the data as tables and views, rows and columns, relations, and so on.</span></span> <span data-ttu-id="57bc1-158">中所做的變更`DataSet`中立即看到`XmlDataDocument`。</span><span class="sxs-lookup"><span data-stu-id="57bc1-158">Changes made in the `DataSet` are immediately visible in the `XmlDataDocument`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57bc1-159">下列範例會修改活頁簿使用的價格`DataSet`方法。</span><span class="sxs-lookup"><span data-stu-id="57bc1-159">The following example modifies the price of a book using the `DataSet` methods.</span></span>  
  
 [!code-cpp[Classic WebData XmlDataDocument.DataSet Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlDataDocument.DataSet Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlDataDocument.DataSet Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlDataDocument.DataSet Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlDataDocument.DataSet Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlDataDocument.DataSet Example/VB/source.vb#1)]  
  
 <span data-ttu-id="57bc1-160">此範例會使用下列兩個檔案做為輸入。</span><span class="sxs-lookup"><span data-stu-id="57bc1-160">The example uses the following two files as input.</span></span>  
  
 `2books.xml`  
  
 [!code-xml[Classic WebData XmlDataDocument.DataSet Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlDataDocument.DataSet Example/XML/source.xml#2)]  
  
 `store.xsd`  
  
 [!code-xml[Classic WebData XmlDataDocument.DataSet Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlDataDocument.DataSet Example/XML/source.xml#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.DataSet" />
        <altmember cref="T:System.Data.DataTable" />
      </Docs>
    </Member>
    <Member MemberName="GetElementById">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlElement GetElementById (string elemId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Xml.XmlElement GetElementById(string elemId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDataDocument.GetElementById(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetElementById (elemId As String) As XmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Xml::XmlElement ^ GetElementById(System::String ^ elemId);" />
      <MemberSignature Language="F#" Value="override this.GetElementById : string -&gt; System.Xml.XmlElement" Usage="xmlDataDocument.GetElementById elemId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elemId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elemId">
          <span data-ttu-id="57bc1-161">要比對的屬性 ID。</span>
          <span class="sxs-lookup">
            <span data-stu-id="57bc1-161">The attribute ID to match.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="57bc1-162">取得具有指定 ID 的 <see cref="T:System.Xml.XmlElement" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="57bc1-162">Gets the <see cref="T:System.Xml.XmlElement" /> with the specified ID.</span>
          </span>
          <span data-ttu-id="57bc1-163">
            <see cref="T:System.Xml.XmlDataDocument" /> 類別不支援這個方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="57bc1-163">This method is not supported by the <see cref="T:System.Xml.XmlDataDocument" /> class.</span>
          </span>
          <span data-ttu-id="57bc1-164">呼叫這個方法會擲回例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="57bc1-164">Calling this method throws an exception.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="57bc1-165">具有指定 ID 的 <see cref="T:System.Xml.XmlElement" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="57bc1-165">An <see cref="T:System.Xml.XmlElement" /> with the specified ID.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57bc1-166"><xref:System.Xml.XmlDataDocument> 類別不支援這個方法。</span><span class="sxs-lookup"><span data-stu-id="57bc1-166">This method is not supported by the <xref:System.Xml.XmlDataDocument> class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="57bc1-167">呼叫這個方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="57bc1-167">Calling this method.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetElementFromRow">
      <MemberSignature Language="C#" Value="public System.Xml.XmlElement GetElementFromRow (System.Data.DataRow r);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlElement GetElementFromRow(class System.Data.DataRow r) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDataDocument.GetElementFromRow(System.Data.DataRow)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetElementFromRow (r As DataRow) As XmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlElement ^ GetElementFromRow(System::Data::DataRow ^ r);" />
      <MemberSignature Language="F#" Value="member this.GetElementFromRow : System.Data.DataRow -&gt; System.Xml.XmlElement" Usage="xmlDataDocument.GetElementFromRow r" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="System.Data.DataRow" />
      </Parameters>
      <Docs>
        <param name="r">
          <span data-ttu-id="57bc1-168">您要擷取其相關 <see langword="DataRow" /> 的 <see langword="XmlElement" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="57bc1-168">The <see langword="DataRow" /> whose associated <see langword="XmlElement" /> you want to retrieve.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="57bc1-169">擷取與指定的 <see cref="T:System.Xml.XmlElement" /> 關聯的 <see cref="T:System.Data.DataRow" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="57bc1-169">Retrieves the <see cref="T:System.Xml.XmlElement" /> associated with the specified <see cref="T:System.Data.DataRow" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="57bc1-170">
            <see langword="XmlElement" />，含指定的 <see langword="DataRow" /> 的表示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="57bc1-170">The <see langword="XmlElement" /> containing a representation of the specified <see langword="DataRow" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="57bc1-171">下列範例會載入`DataSet`到`XmlDataDocument`，然後建立`XmlElement`代表第一個客戶記錄。</span><span class="sxs-lookup"><span data-stu-id="57bc1-171">The following example loads a `DataSet` into an `XmlDataDocument` and then creates an `XmlElement` representing the first customer record.</span></span>  
  
 <span data-ttu-id="57bc1-172">此範例會使用 SQL Server 2000 的 Northwind 資料庫。</span><span class="sxs-lookup"><span data-stu-id="57bc1-172">The example uses the SQL Server 2000 Northwind database.</span></span>  
  
 [!code-cpp[Classic WebData XmlDataDocument.GetElementFromRow Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlDataDocument.GetElementFromRow Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlDataDocument.GetElementFromRow Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlDataDocument.GetElementFromRow Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlDataDocument.GetElementFromRow Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlDataDocument.GetElementFromRow Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.DataSet" />
        <altmember cref="T:System.Data.DataTable" />
      </Docs>
    </Member>
    <Member MemberName="GetElementsByTagName">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNodeList GetElementsByTagName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Xml.XmlNodeList GetElementsByTagName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDataDocument.GetElementsByTagName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetElementsByTagName (name As String) As XmlNodeList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Xml::XmlNodeList ^ GetElementsByTagName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="override this.GetElementsByTagName : string -&gt; System.Xml.XmlNodeList" Usage="xmlDataDocument.GetElementsByTagName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="57bc1-173">要相符的限定名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="57bc1-173">The qualified name to match.</span>
          </span>
          <span data-ttu-id="57bc1-174">它會與符合節點的 <see cref="P:System.Xml.XmlDocument.Name" /> 屬性比對。</span>
          <span class="sxs-lookup">
            <span data-stu-id="57bc1-174">It is matched against the <see cref="P:System.Xml.XmlDocument.Name" /> property of the matching node.</span>
          </span>
          <span data-ttu-id="57bc1-175">特殊值 "\*" 與所有標記相符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="57bc1-175">The special value "\*" matches all tags.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="57bc1-176">傳回 <see cref="T:System.Xml.XmlNodeList" />，其中包含符合指定 <see cref="P:System.Xml.XmlDocument.Name" /> 之所有子代 (Descendant) 項目的清單。</span>
          <span class="sxs-lookup">
            <span data-stu-id="57bc1-176">Returns an <see cref="T:System.Xml.XmlNodeList" /> containing a list of all descendant elements that match the specified <see cref="P:System.Xml.XmlDocument.Name" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="57bc1-177">
            <see cref="T:System.Xml.XmlNodeList" />，包含所有符合節點的清單。</span>
          <span class="sxs-lookup">
            <span data-stu-id="57bc1-177">An <see cref="T:System.Xml.XmlNodeList" /> containing a list of all matching nodes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="57bc1-178">建議您改用<xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=nameWithType>或<xref:System.Xml.XmlNode.SelectSingleNode%2A?displayProperty=nameWithType>方法，而非<xref:System.Xml.XmlDataDocument.GetElementsByTagName%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="57bc1-178">It is recommended that you use the <xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=nameWithType> or <xref:System.Xml.XmlNode.SelectSingleNode%2A?displayProperty=nameWithType> method instead of the <xref:System.Xml.XmlDataDocument.GetElementsByTagName%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRowFromElement">
      <MemberSignature Language="C#" Value="public System.Data.DataRow GetRowFromElement (System.Xml.XmlElement e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataRow GetRowFromElement(class System.Xml.XmlElement e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDataDocument.GetRowFromElement(System.Xml.XmlElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRowFromElement (e As XmlElement) As DataRow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataRow ^ GetRowFromElement(System::Xml::XmlElement ^ e);" />
      <MemberSignature Language="F#" Value="member this.GetRowFromElement : System.Xml.XmlElement -&gt; System.Data.DataRow" Usage="xmlDataDocument.GetRowFromElement e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Xml.XmlElement" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="57bc1-179">您要擷取其相關 <see langword="XmlElement" /> 的 <see langword="DataRow" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="57bc1-179">The <see langword="XmlElement" /> whose associated <see langword="DataRow" /> you want to retrieve.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="57bc1-180">擷取與指定的 <see cref="T:System.Data.DataRow" /> 關聯的 <see cref="T:System.Xml.XmlElement" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="57bc1-180">Retrieves the <see cref="T:System.Data.DataRow" /> associated with the specified <see cref="T:System.Xml.XmlElement" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="57bc1-181">包含 <see langword="DataRow" /> 表示的 <see langword="XmlElement" />，如果沒有與 <see langword="null" /> 關聯的 <see langword="DataRow" />，則為 <see langword="XmlElement" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="57bc1-181">The <see langword="DataRow" /> containing a representation of the <see langword="XmlElement" />; <see langword="null" /> if there is no <see langword="DataRow" /> associated with the <see langword="XmlElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="57bc1-182">下列範例會修改第一本書的價格。</span><span class="sxs-lookup"><span data-stu-id="57bc1-182">The following example modifies the price of the first book.</span></span>  
  
 [!code-cpp[XmlDataDocument.GetRowFromElement#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlDataDocument.GetRowFromElement/CPP/getrow.cpp#1)]
 [!code-csharp[XmlDataDocument.GetRowFromElement#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlDataDocument.GetRowFromElement/CS/getrow.cs#1)]
 [!code-vb[XmlDataDocument.GetRowFromElement#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlDataDocument.GetRowFromElement/VB/getrow.vb#1)]  
  
 <span data-ttu-id="57bc1-183">此範例會使用下列的輸入的檔案：</span><span class="sxs-lookup"><span data-stu-id="57bc1-183">The example uses the following input files:</span></span>  
  
 `2books.xml`  
  
 [!code-xml[Classic WebData XmlDataDocument.DataSet Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlDataDocument.DataSet Example/XML/source.xml#2)]  
  
 `store.xsd`  
  
 [!code-xml[Classic WebData XmlDataDocument.DataSet Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlDataDocument.DataSet Example/XML/source.xml#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="57bc1-184">使用指定的資料來源載入 <see langword="XmlDataDocument" />，並且將 <see cref="T:System.Data.DataSet" /> 與載入的資料同步。</span>
          <span class="sxs-lookup">
            <span data-stu-id="57bc1-184">Loads the <see langword="XmlDataDocument" /> using the specified data source and synchronizes the <see cref="T:System.Data.DataSet" /> with the loaded data.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="57bc1-185">為了達成檢視 XML 資料，您必須先指定要用於資料對應的結構描述。</span><span class="sxs-lookup"><span data-stu-id="57bc1-185">In order to view the XML data relationally, you must first specify a schema to use for data mapping.</span></span> <span data-ttu-id="57bc1-186">作法是藉由呼叫<xref:System.Data.DataSet.ReadXmlSchema%2A>方法或藉由建立資料表和資料行內`DataSet`手動。</span><span class="sxs-lookup"><span data-stu-id="57bc1-186">This can be done either by calling the <xref:System.Data.DataSet.ReadXmlSchema%2A> method or by creating the tables and columns within the `DataSet` manually.</span></span> <span data-ttu-id="57bc1-187">必須完成這個步驟，然後再呼叫`Load`。</span><span class="sxs-lookup"><span data-stu-id="57bc1-187">This step must be done before calling `Load`.</span></span>  
  
 <span data-ttu-id="57bc1-188">`XmlDataDocument` 不支援建立實體參考。</span><span class="sxs-lookup"><span data-stu-id="57bc1-188">`XmlDataDocument` does not support creating entity references.</span></span> <span data-ttu-id="57bc1-189">如果資料包含實體參考`Load`方法解析和展開任何實體參考。</span><span class="sxs-lookup"><span data-stu-id="57bc1-189">If the data includes entity references, the `Load` method resolves and expands any entity references.</span></span> <span data-ttu-id="57bc1-190">不過，如果您使用`Load`採用多載<xref:System.Xml.XmlReader>做為引數，您必須指定`XmlReader`，可以解析實體。</span><span class="sxs-lookup"><span data-stu-id="57bc1-190">However, if you are using the `Load` overload that takes a <xref:System.Xml.XmlReader> as an argument, you must specify an `XmlReader` that can resolve entities.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public override void Load (System.IO.Stream inStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Load(class System.IO.Stream inStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDataDocument.Load(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Load (inStream As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Load(System::IO::Stream ^ inStream);" />
      <MemberSignature Language="F#" Value="override this.Load : System.IO.Stream -&gt; unit" Usage="xmlDataDocument.Load inStream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="inStream">
          <span data-ttu-id="57bc1-191">包含要載入之 XML 文件的資料流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="57bc1-191">The stream containing the XML document to load.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="57bc1-192">從指定的資料流載入 <see langword="XmlDataDocument" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="57bc1-192">Loads the <see langword="XmlDataDocument" /> from the specified stream.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57bc1-193">`XmlDataDocument` 不支援建立實體參考。</span><span class="sxs-lookup"><span data-stu-id="57bc1-193">`XmlDataDocument` does not support creating entity references.</span></span> <span data-ttu-id="57bc1-194">如果資料包含實體參考`Load`方法解析和展開任何實體參考。</span><span class="sxs-lookup"><span data-stu-id="57bc1-194">If the data includes entity references, the `Load` method resolves and expands any entity references.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="57bc1-195">為了達成檢視 XML 資料，您必須先指定要用於資料對應的結構描述。</span><span class="sxs-lookup"><span data-stu-id="57bc1-195">In order to view the XML data relationally, you must first specify a schema to use for data mapping.</span></span> <span data-ttu-id="57bc1-196">作法是藉由呼叫<xref:System.Data.DataSet.ReadXmlSchema%2A>方法或藉由建立資料表和資料行內`DataSet`手動。</span><span class="sxs-lookup"><span data-stu-id="57bc1-196">This can be done either by calling the <xref:System.Data.DataSet.ReadXmlSchema%2A> method or by creating the tables and columns within the `DataSet` manually.</span></span> <span data-ttu-id="57bc1-197">必須完成這個步驟，然後再呼叫`Load`。</span><span class="sxs-lookup"><span data-stu-id="57bc1-197">This step must be done before calling `Load`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public override void Load (System.IO.TextReader txtReader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Load(class System.IO.TextReader txtReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDataDocument.Load(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Load (txtReader As TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Load(System::IO::TextReader ^ txtReader);" />
      <MemberSignature Language="F#" Value="override this.Load : System.IO.TextReader -&gt; unit" Usage="xmlDataDocument.Load txtReader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="txtReader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="txtReader">
          <span data-ttu-id="57bc1-198">用於將 XML 資料送入文件中的 <see langword="TextReader" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="57bc1-198">The <see langword="TextReader" /> used to feed the XML data into the document.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="57bc1-199">從指定的 <see cref="T:System.IO.TextReader" /> 載入 <see langword="XmlDataDocument" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="57bc1-199">Loads the <see langword="XmlDataDocument" /> from the specified <see cref="T:System.IO.TextReader" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57bc1-200">`XmlDataDocument` 不支援建立實體參考。</span><span class="sxs-lookup"><span data-stu-id="57bc1-200">`XmlDataDocument` does not support creating entity references.</span></span> <span data-ttu-id="57bc1-201">如果資料包含實體參考`Load`方法解析和展開任何實體參考。</span><span class="sxs-lookup"><span data-stu-id="57bc1-201">If the data includes entity references, the `Load` method resolves and expands any entity references.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="57bc1-202">為了達成檢視 XML 資料，您必須先指定要用於資料對應的結構描述。</span><span class="sxs-lookup"><span data-stu-id="57bc1-202">In order to view the XML data relationally, you must first specify a schema to use for data mapping.</span></span> <span data-ttu-id="57bc1-203">作法是藉由呼叫<xref:System.Data.DataSet.ReadXmlSchema%2A>方法或藉由建立資料表和資料行內`DataSet`手動。</span><span class="sxs-lookup"><span data-stu-id="57bc1-203">This can be done either by calling the <xref:System.Data.DataSet.ReadXmlSchema%2A> method or by creating the tables and columns within the `DataSet` manually.</span></span> <span data-ttu-id="57bc1-204">必須完成這個步驟，然後再呼叫`Load`。</span><span class="sxs-lookup"><span data-stu-id="57bc1-204">This step must be done before calling `Load`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public override void Load (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Load(string filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDataDocument.Load(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Load (filename As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Load(System::String ^ filename);" />
      <MemberSignature Language="F#" Value="override this.Load : string -&gt; unit" Usage="xmlDataDocument.Load filename" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">
          <span data-ttu-id="57bc1-205">包含要載入之 XML 文件的檔案的 URL。</span>
          <span class="sxs-lookup">
            <span data-stu-id="57bc1-205">The URL of the file containing the XML document to load.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="57bc1-206">使用指定的 URL 載入 <see langword="XmlDataDocument" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="57bc1-206">Loads the <see langword="XmlDataDocument" /> using the specified URL.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57bc1-207">`XmlDataDocument` 不支援建立實體參考。</span><span class="sxs-lookup"><span data-stu-id="57bc1-207">`XmlDataDocument` does not support creating entity references.</span></span> <span data-ttu-id="57bc1-208">如果資料包含實體參考`Load`方法解析和展開任何實體參考。</span><span class="sxs-lookup"><span data-stu-id="57bc1-208">If the data includes entity references, the `Load` method resolves and expands any entity references.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="57bc1-209">為了達成檢視 XML 資料，您必須先指定要用於資料對應的結構描述。</span><span class="sxs-lookup"><span data-stu-id="57bc1-209">In order to view the XML data relationally, you must first specify a schema to use for data mapping.</span></span> <span data-ttu-id="57bc1-210">作法是藉由呼叫<xref:System.Data.DataSet.ReadXmlSchema%2A>方法或藉由建立資料表和資料行內`DataSet`手動。</span><span class="sxs-lookup"><span data-stu-id="57bc1-210">This can be done either by calling the <xref:System.Data.DataSet.ReadXmlSchema%2A> method or by creating the tables and columns within the `DataSet` manually.</span></span> <span data-ttu-id="57bc1-211">必須完成這個步驟，然後再呼叫`Load`。</span><span class="sxs-lookup"><span data-stu-id="57bc1-211">This step must be done before calling `Load`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public override void Load (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Load(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDataDocument.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Load (reader As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Load(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="override this.Load : System.Xml.XmlReader -&gt; unit" Usage="xmlDataDocument.Load reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="57bc1-212">
            <see langword="XmlReader" />，包含要載入的 XML 文件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="57bc1-212">The <see langword="XmlReader" /> containing the XML document to load.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="57bc1-213">從指定的 <see cref="T:System.Xml.XmlReader" /> 載入 <see langword="XmlDataDocument" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="57bc1-213">Loads the <see langword="XmlDataDocument" /> from the specified <see cref="T:System.Xml.XmlReader" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57bc1-214">`XmlDataDocument` 不支援建立實體參考。</span><span class="sxs-lookup"><span data-stu-id="57bc1-214">`XmlDataDocument` does not support creating entity references.</span></span> <span data-ttu-id="57bc1-215">如果資料來源中含有實體參考，您必須建立<xref:System.Xml.XmlValidatingReader>與<xref:System.Xml.XmlValidatingReader.EntityHandling%2A>屬性設定為 EntityHandling.ExpandEntities （這是預設行為），並傳遞`XmlValidatingReader`至`Load`方法。</span><span class="sxs-lookup"><span data-stu-id="57bc1-215">If the data source contains entity references, you must create an <xref:System.Xml.XmlValidatingReader> with the <xref:System.Xml.XmlValidatingReader.EntityHandling%2A> property set to EntityHandling.ExpandEntities (this is the default behavior) and pass the `XmlValidatingReader` to the `Load` method.</span></span> <span data-ttu-id="57bc1-216">如果您未使用`XmlValidatingReader`、`Load`方法會擲回的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="57bc1-216">If you do not use an `XmlValidatingReader`, the `Load` method throws an exception.</span></span>  
  
 <span data-ttu-id="57bc1-217">`Load`方法一律會保留顯著泛空白字元。</span><span class="sxs-lookup"><span data-stu-id="57bc1-217">The `Load` method always preserves significant white space.</span></span> <span data-ttu-id="57bc1-218"><xref:System.Xml.XmlDocument.PreserveWhitespace%2A>屬性會決定是否要保留空白字元。</span><span class="sxs-lookup"><span data-stu-id="57bc1-218">The <xref:System.Xml.XmlDocument.PreserveWhitespace%2A> property determines whether or not white space is preserved.</span></span> <span data-ttu-id="57bc1-219">預設值是`false`，不保留空白字元。</span><span class="sxs-lookup"><span data-stu-id="57bc1-219">The default is `false`, white space is not preserved.</span></span>  
  
 <span data-ttu-id="57bc1-220">如果讀取器中的初始狀態 (也就是 ReadState=ReadState.Initial)`Load`取用讀取器的整個內容，並建置它所找到的 DOM。</span><span class="sxs-lookup"><span data-stu-id="57bc1-220">If the reader is in the initial state (that is, ReadState=ReadState.Initial), `Load` consumes the entire contents of the reader and builds the DOM from what it finds.</span></span>  
  
 <span data-ttu-id="57bc1-221">如果讀取器已經位於某個節點的深度"n"，這個方法會載入該節點和所有後續的同層級直到關閉深度"n"的結束標記。</span><span class="sxs-lookup"><span data-stu-id="57bc1-221">If the reader is already positioned on some node at depth "n", then this method loads that node and all subsequent siblings up to the end tag that closes depth "n".</span></span> <span data-ttu-id="57bc1-222">這有下列結果。</span><span class="sxs-lookup"><span data-stu-id="57bc1-222">This has the following results.</span></span>  
  
 <span data-ttu-id="57bc1-223">如果目前節點和其下的同層級看起來如下所示：</span><span class="sxs-lookup"><span data-stu-id="57bc1-223">If the current node and its following siblings look similar to the following:</span></span>  
  
```xml  
<!--comment--><element1>one</element1><element2>two</element2>  
```  
  
 <span data-ttu-id="57bc1-224">`Load` 因為文件不能有兩個根層級項目，就會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="57bc1-224">`Load` throws an exception, because a document cannot have two root-level elements.</span></span> <span data-ttu-id="57bc1-225">如果目前節點和其下的同層級看起來如下所示：</span><span class="sxs-lookup"><span data-stu-id="57bc1-225">If the current node and its following siblings look similar to the following:</span></span>  
  
```xml  
<!--comment--><?process  
    instruction?><!--comment--></endtag>  
```  
  
 <span data-ttu-id="57bc1-226">`Load` 將會成功。不過，您會有不完整的 DOM 樹狀目錄中，因為沒有任何根層級項目。</span><span class="sxs-lookup"><span data-stu-id="57bc1-226">`Load` will succeed; however, you will have an incomplete DOM tree, because there is no root-level element.</span></span> <span data-ttu-id="57bc1-227">您必須先儲存文件，加入根層級項目否則，<xref:System.Xml.XmlDocument.Save%2A>方法會擲回的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="57bc1-227">You have to add a root-level element before you save the document; otherwise, the <xref:System.Xml.XmlDocument.Save%2A> method throws an exception.</span></span>  
  
 <span data-ttu-id="57bc1-228">如果將讀取器置於對文件之根層級而言是無效的分葉節點 (例如，泛空白字元或屬性節點) 上，則讀取器會繼續讀取，直到將其置於可用於根層級的節點上。</span><span class="sxs-lookup"><span data-stu-id="57bc1-228">If the reader is positioned on a leaf node that is invalid for the root level of a document (for example, a white space or attribute node), the reader continues to read until it is positioned on a node that can be used for the root.</span></span> <span data-ttu-id="57bc1-229">此時文件會開始載入。</span><span class="sxs-lookup"><span data-stu-id="57bc1-229">The document begins loading at this point.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57bc1-230">下列範例會修改活頁簿使用的價格`DataSet`方法。</span><span class="sxs-lookup"><span data-stu-id="57bc1-230">The following example modifies the price of a book using the `DataSet` methods.</span></span>  
  
 [!code-cpp[XmlDataDocument.Load#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlDataDocument.Load/CPP/loadrdr.cpp#1)]
 [!code-csharp[XmlDataDocument.Load#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlDataDocument.Load/CS/loadrdr.cs#1)]
 [!code-vb[XmlDataDocument.Load#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlDataDocument.Load/VB/loadrdr.vb#1)]  
  
 <span data-ttu-id="57bc1-231">此範例會使用下列兩個輸入的檔案。</span><span class="sxs-lookup"><span data-stu-id="57bc1-231">The example uses the following two input files.</span></span>  
  
 `2books.xml`  
  
 [!code-xml[XmlDataDocument.Load#2](~/samples/snippets/xml/VS_Snippets_Data/XmlDataDocument.Load/XML/2books.xml#2)]  
  
 `store.xsd`  
  
 [!code-xml[XmlDataDocument.Load#3](~/samples/snippets/xml/VS_Snippets_Data/XmlDataDocument.Load/XML/test.xsd#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="57bc1-232">載入的 XML 包含實體參考，並且讀取器不能解析實體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="57bc1-232">The XML being loaded contains entity references, and the reader cannot resolve entities.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>