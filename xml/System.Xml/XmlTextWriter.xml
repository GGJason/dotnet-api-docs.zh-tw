<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XmlTextWriter.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5b2dfec50e813dc928679ed1e8424877f3b9f797b.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b2dfec50e813dc928679ed1e8424877f3b9f797b</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xml.XmlTextWriter">
          <source>Represents a writer that provides a fast, non-cached, forward-only way of generating streams or files containing XML data that conforms to the W3C Extensible Markup Language (XML) 1.0 and the Namespaces in XML recommendations.</source>
          <target state="translated">表示提供產生資料流或檔案的快速、非快取、順向方法的寫入器，這些資料流或檔案中包含符合 W3C Extensible Markup Language (XML) 1.0 與 XML Recommendation 中命名空間的 XML 資料。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Xml.XmlTextWriter">
          <source>Starting with the .NET Framework 2.0, we recommend that you use the <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> class instead.</source>
          <target state="translated">從 .NET Framework 2.0 開始，建議您改用 <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> 類別。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>This class implements the <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> class.</source>
          <target state="translated">這個類別會實作<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>類別。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">從.NET Framework 2.0 開始，我們建議您先建立<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>所使用的執行個體<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>類別，以充分利用新功能。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source><ph id="ph1">`XmlTextWriter`</ph> maintains a namespace stack corresponding to all the namespaces defined in the current element stack.</source>
          <target state="translated"><ph id="ph1">`XmlTextWriter`</ph> 會維護命名空間堆疊，對應至目前的項目堆疊中定義的所有命名空間。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Using <ph id="ph1">`XmlTextWriter`</ph> you can declare namespaces manually.</source>
          <target state="translated">使用<ph id="ph1">`XmlTextWriter`</ph>您可以手動宣告命名空間。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>The above C# code produces the following output.</source>
          <target state="translated">上面的 C# 程式碼會產生下列輸出。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source><ph id="ph1">`XmlTextWriter`</ph> promotes the namespace declaration to the root element to avoid having it duplicated on the two child elements.</source>
          <target state="translated"><ph id="ph1">`XmlTextWriter`</ph> 若要避免這兩個子項目上有重複的根項目的命名空間宣告會將升級。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>The child elements pick up the prefix from the namespace declaration.</source>
          <target state="translated">子項目挑選從命名空間宣告的前置詞。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source><ph id="ph1">`XmlTextWriter`</ph> also allows you to override the current namespace declaration.</source>
          <target state="translated"><ph id="ph1">`XmlTextWriter`</ph> 也可讓您覆寫目前的命名空間宣告。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>In the following example, the namespace URI "123" is overridden by "abc" to produce the XML element <ph id="ph1">`&lt;x:node xmlns:x="abc"/&gt;`</ph>.</source>
          <target state="translated">在下列範例中，命名空間 URI"123"會覆寫"abc"產生的 XML 項目<ph id="ph1">`&lt;x:node xmlns:x="abc"/&gt;`</ph>。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>By using the write methods that take a prefix as an argument you can also specify which prefix to use.</source>
          <target state="translated">使用的寫入方法會採用做為引數前置詞，您也可以指定使用哪個前置詞。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>In the following example, two different prefixes are mapped to the same namespace URI to produce the XML text <ph id="ph1">`&lt;x:root xmlns:x="urn:1"&gt;&lt;y:item xmlns:y="urn:1"/&gt;&lt;/x:root&gt;`</ph>.</source>
          <target state="translated">在下列範例中，兩個不同的前置詞會對應至相同的命名空間 URI 來產生 XML 文字<ph id="ph1">`&lt;x:root xmlns:x="urn:1"&gt;&lt;y:item xmlns:y="urn:1"/&gt;&lt;/x:root&gt;`</ph>。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>If there are multiple namespace declarations mapping different prefixes to the same namespace URI, <ph id="ph1">`XmlTextWriter`</ph> walks the stack of namespace declarations backwards and picks the closest one.</source>
          <target state="translated">如果有多個相同的命名空間 URI 對應不同前置詞的命名空間宣告<ph id="ph1">`XmlTextWriter`</ph>回溯查核堆疊的命名空間宣告，並選取最接近的其中一個。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>In the above C# example, because the <ph id="ph1">`WriteAttributeString`</ph> call does not specify a prefix, the writer uses the last prefix pushed onto the namespace stack, and produces the following XML:</source>
          <target state="translated">在上述的 C# 範例，因為<ph id="ph1">`WriteAttributeString`</ph>呼叫未指定前置詞，寫入器會使用最後一個前置詞推入命名空間堆疊，並會產生下列 XML:</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>If namespace conflicts occur, <ph id="ph1">`XmlTextWriter`</ph> resolves them by generating alternate prefixes.</source>
          <target state="translated">如果發生命名空間衝突，<ph id="ph1">`XmlTextWriter`</ph>產生替代的前置詞來解決它們。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>For example, if an attribute and element have the same prefix but different namespaces, <ph id="ph1">`XmlWriter`</ph> generates an alternate prefix for the attribute.</source>
          <target state="translated">例如，如果屬性和項目具有相同前置詞但不同的命名空間，<ph id="ph1">`XmlWriter`</ph>會產生替代的前置詞的屬性。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>The generated prefixes are named <ph id="ph1">`n{i}`</ph> where <ph id="ph2">`i`</ph> is a number beginning at 1.</source>
          <target state="translated">產生的前置詞的命名<ph id="ph1">`n{i}`</ph>其中<ph id="ph2">`i`</ph>是數字 1 開始。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>The number is reset to 1 for each element.</source>
          <target state="translated">數字會重設為 1。 每個項目。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Attributes which are associated with a namespace URI must have a prefix (default namespaces do not apply to attributes).</source>
          <target state="translated">命名空間 URI 相關聯的屬性必須具有的前置詞 （命名空間不會套用至屬性的預設值）。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>This conforms to section 5.2 of the W3C Namespaces in XML recommendation.</source>
          <target state="translated">這符合 W3C Namespaces in XML 建議事項的區段 5.2。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>If an attribute references a namespace URI, but does not specify a prefix, the writer generates a prefix for the attribute.</source>
          <target state="translated">如果屬性參考的命名空間 URI，但不是指定前置詞，寫入器會產生屬性的前置詞。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>When writing an empty element, an additional space is added between tag name and the closing tag, for example <ph id="ph1">`&lt;item /&gt;`</ph>.</source>
          <target state="translated">在撰寫空項目時，額外的空間之間加上標記的名稱和結尾標記，例如<ph id="ph1">`&lt;item /&gt;`</ph>。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>This provides compatibility with older browsers.</source>
          <target state="translated">這會提供與舊的瀏覽器的相容性。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>When a <ph id="ph1">`String`</ph> is used as method parameter, <ph id="ph2">`null`</ph> and <ph id="ph3">`String.Empty`</ph> are equivalent.</source>
          <target state="translated">當<ph id="ph1">`String`</ph>做為方法參數<ph id="ph2">`null`</ph>和<ph id="ph3">`String.Empty`</ph>相等。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source><ph id="ph1">`String.Empty`</ph> follows the W3C rules.</source>
          <target state="translated"><ph id="ph1">`String.Empty`</ph> 遵循 W3C 規則。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>To write strongly typed data, use the <ph id="ph1">&lt;xref:System.Xml.XmlConvert&gt;</ph> class to convert data types to string.</source>
          <target state="translated">若要撰寫強型別的資料，使用<ph id="ph1">&lt;xref:System.Xml.XmlConvert&gt;</ph>類別，以將資料類型轉換為字串。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>For example, the following C# code converts the data from <ph id="ph1">`Double`</ph> to <ph id="ph2">`String`</ph> and writes the element <ph id="ph3">`&lt;price&gt;19.95&lt;/price&gt;`</ph>.</source>
          <target state="translated">例如，下列 C# 程式碼會將資料轉換從<ph id="ph1">`Double`</ph>至<ph id="ph2">`String`</ph>寫入項目和<ph id="ph3">`&lt;price&gt;19.95&lt;/price&gt;`</ph>。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source><ph id="ph1">`XmlTextWriter`</ph> does not check for the following:</source>
          <target state="translated"><ph id="ph1">`XmlTextWriter`</ph> 不會檢查下列：</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Invalid characters in attribute and element names.</source>
          <target state="translated">屬性和項目名稱包含無效的字元。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Unicode characters that do not fit the specified encoding.</source>
          <target state="translated">不符合指定的編碼的 Unicode 字元。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>If the Unicode characters do not fit the specified encoding, the <ph id="ph1">`XmlTextWriter`</ph> does not escape the Unicode characters into character entities.</source>
          <target state="translated">Unicode 字元不符合指定的編碼，如果<ph id="ph1">`XmlTextWriter`</ph>不逸出的 Unicode 字元到字元實體。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Duplicate attributes.</source>
          <target state="translated">重複的屬性。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Characters in the DOCTYPE public identifier or system identifier.</source>
          <target state="translated">DOCTYPE 公用識別項或系統識別項中的字元。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Security Considerations</source>
          <target state="translated">安全性考量</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>The following items are things to consider when working with the <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph> class.</source>
          <target state="translated">下列項目會使用時的考慮事項<ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph>類別。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Exceptions thrown by the <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph> can disclose path information that you do not want bubbled up to the application.</source>
          <target state="translated">擲回例外狀況<ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph>可以揭露您不想要的路徑資訊反昇至應用程式。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Your applications must catch exceptions and process them appropriately.</source>
          <target state="translated">應用程式必須捕捉例外狀況並予以適當處理。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>When you pass the <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph> to another application the underlying stream is exposed to that application.</source>
          <target state="translated">將 <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph> 傳遞到其他應用程式時，基礎資料流會對該應用程式公開。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>If you need to pass the <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph> to a semi-trusted application, you should use an <ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph> object created by the <ph id="ph3">&lt;xref:System.Xml.XmlWriter.Create%2A&gt;</ph> method instead.</source>
          <target state="translated">如果您需要將 <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph> 傳遞到非完全信任的應用程式，則應改用 <ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph> 方法所建立的 <ph id="ph3">&lt;xref:System.Xml.XmlWriter.Create%2A&gt;</ph> 物件。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph> does not validate any data that is passed to the <ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteDocType%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Xml.XmlTextWriter.WriteRaw%2A&gt;</ph> methods.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph>不會驗證傳遞至任何資料<ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteDocType%2A&gt;</ph>或<ph id="ph3">&lt;xref:System.Xml.XmlTextWriter.WriteRaw%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>You should not pass arbitrary data to these methods.</source>
          <target state="translated">您不應該對這些方法傳遞任意資料。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>If the default settings are changed, there is no guarantee that the generated output is well-formed XML data.</source>
          <target state="translated">如果變更預設設定，並將產生的輸出是語式正確的 XML 資料不保證。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Do not accept supporting components, such as an <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> object, from an untrusted source.</source>
          <target state="translated">例如，不接受支援的元件，<ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph>物件，從受信任的來源。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="T:System.Xml.XmlTextWriter">
          <source>Creates an instance of the <ph id="ph1">&lt;see langword="XmlTextWriter" /&gt;</ph> class.</source>
          <target state="translated">建立 <ph id="ph1">&lt;see langword="XmlTextWriter" /&gt;</ph> 類別的執行個體。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">從.NET Framework 2.0 開始，我們建議您先建立<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>所使用的執行個體<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>類別，以充分利用新功能。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.IO.TextWriter)">
          <source>The <ph id="ph1">&lt;see langword="TextWriter" /&gt;</ph> to write to.</source>
          <target state="translated">要寫入的目標 <ph id="ph1">&lt;see langword="TextWriter" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.IO.TextWriter)">
          <source>It is assumed that the <ph id="ph1">&lt;see langword="TextWriter" /&gt;</ph> is already set to the correct encoding.</source>
          <target state="translated">它假設已將 <ph id="ph1">&lt;see langword="TextWriter" /&gt;</ph> 設定為正確的編碼方式。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.IO.TextWriter)">
          <source>Creates an instance of the <ph id="ph1">&lt;see langword="XmlTextWriter" /&gt;</ph> class using the specified <ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>.</source>
          <target state="translated">使用指定的 <ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> 來建立 <ph id="ph1">&lt;see langword="XmlTextWriter" /&gt;</ph> 類別的執行個體。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.#ctor(System.IO.TextWriter)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">從.NET Framework 2.0 開始，我們建議您先建立<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>所使用的執行個體<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>類別，以充分利用新功能。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source>The stream to which you want to write.</source>
          <target state="translated">要寫入其中的資料流。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source>The encoding to generate.</source>
          <target state="translated">要產生的編碼方式。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source>If encoding is <ph id="ph1">&lt;see langword="null" /&gt;</ph> it writes out the stream as UTF-8 and omits the encoding attribute from the <ph id="ph2">&lt;see langword="ProcessingInstruction" /&gt;</ph>.</source>
          <target state="translated">如果編碼方式為 <ph id="ph1">&lt;see langword="null" /&gt;</ph>，它會以 UTF-8 格式寫出資料流，並忽略來自 <ph id="ph2">&lt;see langword="ProcessingInstruction" /&gt;</ph> 的編碼方式屬性。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source>Creates an instance of the <ph id="ph1">&lt;see langword="XmlTextWriter" /&gt;</ph> class using the specified stream and encoding.</source>
          <target state="translated">使用指定的資料流和編碼方式，建立 <ph id="ph1">&lt;see langword="XmlTextWriter" /&gt;</ph> 類別的執行個體。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">從.NET Framework 2.0 開始，我們建議您先建立<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>所使用的執行個體<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>類別，以充分利用新功能。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source>The encoding is not supported or the stream cannot be written to.</source>
          <target state="translated">不支援該編碼方式，或無法寫入至資料流。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source><ph id="ph1">&lt;paramref name="w" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="w" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
          <source>The filename to write to.</source>
          <target state="translated">要寫入至的檔名。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
          <source>If the file exists, it truncates it and overwrites it with the new content.</source>
          <target state="translated">如果這個檔案存在，就會將它截斷並以新內容將其覆寫。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
          <source>The encoding to generate.</source>
          <target state="translated">要產生的編碼方式。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
          <source>If encoding is <ph id="ph1">&lt;see langword="null" /&gt;</ph> it writes the file out as UTF-8, and omits the encoding attribute from the <ph id="ph2">&lt;see langword="ProcessingInstruction" /&gt;</ph>.</source>
          <target state="translated">如果編碼方式為 <ph id="ph1">&lt;see langword="null" /&gt;</ph>，它會以 UTF-8 格式寫出檔案，並忽略來自 <ph id="ph2">&lt;see langword="ProcessingInstruction" /&gt;</ph> 的編碼方式屬性。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
          <source>Creates an instance of the <ph id="ph1">&lt;see cref="T:System.Xml.XmlTextWriter" /&gt;</ph> class using the specified file.</source>
          <target state="translated">使用指定的檔案建立 <ph id="ph1">&lt;see cref="T:System.Xml.XmlTextWriter" /&gt;</ph> 類別的執行個體。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">從.NET Framework 2.0 開始，我們建議您先建立<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>所使用的執行個體<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>類別，以充分利用新功能。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
          <source>The encoding is not supported; the filename is empty, contains only white space, or contains one or more invalid characters.</source>
          <target state="translated">編碼方式不受支援、檔案名稱是空的、只含有泛空白字元 (White Space)，或含有一個或多個無效字元。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
          <source>Access is denied.</source>
          <target state="translated">存取被拒絕。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
          <source>The filename is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">檔案名稱為 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
          <source>The directory to write to is not found.</source>
          <target state="translated">找不到要寫入的目錄。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
          <source>The filename includes an incorrect or invalid syntax for file name, directory name, or volume label syntax.</source>
          <target state="translated">檔案名稱包含關於檔案名稱、目錄名稱或磁碟標籤語法的不正確或無效語法。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">呼叫端沒有必要的權限。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextWriter.BaseStream">
          <source>Gets the underlying stream object.</source>
          <target state="translated">取得基礎資料流物件。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.BaseStream">
          <source>The stream to which the <ph id="ph1">&lt;see langword="XmlTextWriter" /&gt;</ph> is writing or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the <ph id="ph3">&lt;see langword="XmlTextWriter" /&gt;</ph> was constructed using a <ph id="ph4">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> that does not inherit from the <ph id="ph5">&lt;see cref="T:System.IO.StreamWriter" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="XmlTextWriter" /&gt;</ph> 正在寫入的資料流，如果使用不是從 <ph id="ph4">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> 的 <ph id="ph5">&lt;see cref="T:System.IO.StreamWriter" /&gt;</ph> 類別來建構 <ph id="ph2">&lt;see langword="null" /&gt;</ph>，則為 <ph id="ph3">&lt;see langword="XmlTextWriter" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.BaseStream">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">從.NET Framework 2.0 開始，我們建議您先建立<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>所使用的執行個體<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>類別，以充分利用新功能。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.BaseStream">
          <source>If the writer was constructed using a <ph id="ph1">`TextWriter`</ph> that is derived from the <ph id="ph2">`StreamWriter`</ph> class, this property is equivalent to the <ph id="ph3">&lt;xref:System.IO.StreamWriter.BaseStream%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">如果寫入器已使用建構<ph id="ph1">`TextWriter`</ph>衍生自<ph id="ph2">`StreamWriter`</ph>類別，這個屬性就相當於<ph id="ph3">&lt;xref:System.IO.StreamWriter.BaseStream%2A?displayProperty=nameWithType&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.BaseStream">
          <source>If the writer was constructed using a <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph>, this property returns the <ph id="ph2">`Stream`</ph> passed to the constructor.</source>
          <target state="translated">如果寫入器已使用建構<ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph>，這個屬性會傳回<ph id="ph2">`Stream`</ph>傳遞至建構函式。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.BaseStream">
          <source>If the writer was constructed using a file name, this property returns the <ph id="ph1">`Stream`</ph> representing the file.</source>
          <target state="translated">如果寫入器已建構的檔案名稱，這個屬性會傳回<ph id="ph1">`Stream`</ph>代表的檔案。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.Close">
          <source>Closes this stream and the underlying stream.</source>
          <target state="translated">關閉這個資料流與基礎資料流。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.Close">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">從.NET Framework 2.0 開始，我們建議您先建立<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>所使用的執行個體<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>類別，以充分利用新功能。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.Close">
          <source>Any elements or attributes left open are automatically closed.</source>
          <target state="translated">自動關閉任何項目或屬性保持開啟狀態。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.Close">
          <source>This method does not throw any exceptions.</source>
          <target state="translated">這個方法不會擲回任何例外狀況。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.Close">
          <source>The following example writes an XML fragment.</source>
          <target state="translated">下列範例會將 XML 片段。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.Flush">
          <source>Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.</source>
          <target state="translated">將緩衝區的所有內容清空至基礎資料流，然後清空基礎資料流。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.Flush">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">從.NET Framework 2.0 開始，我們建議您先建立<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>所使用的執行個體<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>類別，以充分利用新功能。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.Flush">
          <source>This is called instead of <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter.Close%2A&gt;</ph> when you want to write more to the underlying stream without losing what is still in the buffer.</source>
          <target state="translated">這稱為而不是<ph id="ph1">&lt;xref:System.Xml.XmlTextWriter.Close%2A&gt;</ph>當您想要撰寫更多基礎資料流而不會遺失什麼仍在緩衝區中。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.Flush">
          <source>The following example writes out two XML fragments.</source>
          <target state="translated">下列範例會寫出兩個 XML 片段。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>Indicates how the output is formatted.</source>
          <target state="translated">表示格式化輸出的方式。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Xml.Formatting" /&gt;</ph> values.</source>
          <target state="translated">其中一個 <ph id="ph1">&lt;see cref="T:System.Xml.Formatting" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>The default is <ph id="ph1">&lt;see langword="Formatting.None" /&gt;</ph> (no special formatting).</source>
          <target state="translated">預設值為 <ph id="ph1">&lt;see langword="Formatting.None" /&gt;</ph> (無特殊格式)。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">從.NET Framework 2.0 開始，我們建議您先建立<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>所使用的執行個體<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>類別，以充分利用新功能。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>If the <ph id="ph1">`Indented`</ph> option is set, child elements are indented using the <ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.Indentation%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Xml.XmlTextWriter.IndentChar%2A&gt;</ph> properties.</source>
          <target state="translated">如果<ph id="ph1">`Indented`</ph>設定選項時，子項目會縮排使用<ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.Indentation%2A&gt;</ph>和<ph id="ph3">&lt;xref:System.Xml.XmlTextWriter.IndentChar%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>Only element content is indented.</source>
          <target state="translated">只有項目內容已縮排。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>The following C# code writes out HTML elements including mixed content:</source>
          <target state="translated">下列 C# 程式碼會寫出含有混合的內容的 HTML 項目：</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>The above code produces the following output:</source>
          <target state="translated">上述程式碼會產生下列輸出：</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>When this is viewed in HTML no white space appears between the bold and italic elements.</source>
          <target state="translated">這在 HTML 中檢視時沒有泛空白字元出現粗體和斜體的項目。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>In fact, in this example, if indenting was added between these elements the word "Elephant" would be incorrectly broken.</source>
          <target state="translated">事實上，在此範例中，如果縮排已加入這些項目之間"Elephant"這個字就會不正確地中斷。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>Writing any text content, excluding <ph id="ph1">`String.Empty`</ph> puts that element into mixed content mode.</source>
          <target state="translated">寫入內容，但不包括任何文字<ph id="ph1">`String.Empty`</ph>置於混合內容模式中的項目。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>Child elements do not inherit this "mixed" mode status.</source>
          <target state="translated">子項目不會繼承此 「 混合式 」 模式的狀態。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>A child element of a "mixed" element does indenting, unless it is also contains "mixed" content.</source>
          <target state="translated">「 混合式 」 的元素的子元素會縮排，除非它是也包含 「 混合式 」 內容。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>Element content (<ph id="ph1">http://www.w3.org/TR/1998/REC-xml-19980210#sec-element-content)</ph> and mixed content (<ph id="ph2">http://www.w3.org/TR/1998/REC-xml-19980210#sec-mixed-content)</ph> are defined according to the XML 1.0 definitions of these terms.</source>
          <target state="translated">項目內容 (<ph id="ph1">http://www.w3.org/TR/1998/REC-xml-19980210#sec-element-content)</ph>和混合的內容 (<ph id="ph2">http://www.w3.org/TR/1998/REC-xml-19980210#sec-mixed-content)</ph>根據 XML 1.0 版的這些詞彙定義所定義。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>The following example writes an XML fragment.</source>
          <target state="translated">下列範例會將 XML 片段。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextWriter.Indentation">
          <source>Gets or sets how many IndentChars to write for each level in the hierarchy when <ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.Formatting" /&gt;</ph> is set to <ph id="ph2">&lt;see langword="Formatting.Indented" /&gt;</ph>.</source>
          <target state="translated">取得或設定當 <ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.Formatting" /&gt;</ph> 設定為 <ph id="ph2">&lt;see langword="Formatting.Indented" /&gt;</ph> 時，每一層級要寫入多少縮排字元。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Indentation">
          <source>Number of <ph id="ph1">&lt;see langword="IndentChars" /&gt;</ph> for each level.</source>
          <target state="translated">每一層級的 <ph id="ph1">&lt;see langword="IndentChars" /&gt;</ph> 數目。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Indentation">
          <source>The default is 2.</source>
          <target state="translated">預設值為 2。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Indentation">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">從.NET Framework 2.0 開始，我們建議您先建立<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>所使用的執行個體<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>類別，以充分利用新功能。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Indentation">
          <source>Indentation is performed on following node types: <ph id="ph1">`DocumentType`</ph>, <ph id="ph2">`Element`</ph>, <ph id="ph3">`Comment`</ph>, <ph id="ph4">`ProcessingInstruction`</ph>, and <ph id="ph5">`CDATASection`</ph>.</source>
          <target state="translated">縮排不會對下列節點類型： <ph id="ph1">`DocumentType`</ph>， <ph id="ph2">`Element`</ph>， <ph id="ph3">`Comment`</ph>， <ph id="ph4">`ProcessingInstruction`</ph>，和<ph id="ph5">`CDATASection`</ph>。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Indentation">
          <source>All other node types are not affected.</source>
          <target state="translated">不會影響所有其他節點型別。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Indentation">
          <source>The <ph id="ph1">`XmlTextWriter`</ph> does not indent the internal DTD subset.</source>
          <target state="translated"><ph id="ph1">`XmlTextWriter`</ph>不會縮排內部 DTD 子集。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Indentation">
          <source>However, you could do the following to apply formatting to the internal DTD subset.</source>
          <target state="translated">不過，您可以執行下列命令以將格式套用至內部 DTD 子集。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Indentation">
          <source>The following example writes an XML fragment.</source>
          <target state="translated">下列範例會將 XML 片段。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextWriter.Indentation">
          <source>Setting this property to a negative value.</source>
          <target state="translated">設定這個屬性為負數值。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextWriter.IndentChar">
          <source>Gets or sets which character to use for indenting when <ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.Formatting" /&gt;</ph> is set to <ph id="ph2">&lt;see langword="Formatting.Indented" /&gt;</ph>.</source>
          <target state="translated">取得或設定當 <ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.Formatting" /&gt;</ph> 設為 <ph id="ph2">&lt;see langword="Formatting.Indented" /&gt;</ph> 時用於縮排的字元。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.IndentChar">
          <source>The character to use for indenting.</source>
          <target state="translated">用來縮排的字元。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.IndentChar">
          <source>The default is space.</source>
          <target state="translated">預設值是空白。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.IndentChar">
          <source>The <ph id="ph1">&lt;see langword="XmlTextWriter" /&gt;</ph> allows you to set this property to any character.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="XmlTextWriter" /&gt;</ph> 可讓您將這個屬性設定為任何字元。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.IndentChar">
          <source>To ensure valid XML, you must specify a valid white space character, 0x9, 0x10, 0x13 or 0x20.</source>
          <target state="translated">若要確保有效的 XML，您必須指定有效的空白字元、0x9、0x10、0x13 或 0x20。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.IndentChar">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">從.NET Framework 2.0 開始，我們建議您先建立<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>所使用的執行個體<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>類別，以充分利用新功能。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.LookupPrefix(System.String)">
          <source>Namespace URI whose prefix you want to find.</source>
          <target state="translated">想要尋找其前置詞的命名空間 URI。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.LookupPrefix(System.String)">
          <source>Returns the closest prefix defined in the current namespace scope for the namespace URI.</source>
          <target state="translated">傳回最接近命名空間 URI 在目前命名空間範圍中定義的前置詞。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.LookupPrefix(System.String)">
          <source>The matching prefix.</source>
          <target state="translated">符合的前置詞。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.LookupPrefix(System.String)">
          <source>Or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no matching namespace URI is found in the current scope.</source>
          <target state="translated">如果在目前範圍中找不到符合的命名空間 URI，則為 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.LookupPrefix(System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">從.NET Framework 2.0 開始，我們建議您先建立<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>所使用的執行個體<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>類別，以充分利用新功能。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.LookupPrefix(System.String)">
          <source>The following example writes out a book.</source>
          <target state="translated">下列範例會寫出活頁簿。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.LookupPrefix(System.String)">
          <source><ph id="ph1">&lt;paramref name="ns" /&gt;</ph> is either <ph id="ph2">&lt;see langword="null" /&gt;</ph> or <ph id="ph3">&lt;see langword="String.Empty" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="ns" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph> 或 <ph id="ph3">&lt;see langword="String.Empty" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextWriter.Namespaces">
          <source>Gets or sets a value indicating whether to do namespace support.</source>
          <target state="translated">取得或設定值，指出是否支援命名空間。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Namespaces">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to support namespaces; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">若要支援命名空間，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Namespaces">
          <source>The default is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">預設值為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Namespaces">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">從.NET Framework 2.0 開始，我們建議您先建立<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>所使用的執行個體<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>類別，以充分利用新功能。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Namespaces">
          <source>This property determines whether the writer supports the W3C Namespaces in XML recommendation located at www.w3.org/TR/REC-xml-names.</source>
          <target state="translated">此屬性決定寫入器是否支援位於 www.w3.org/TR/REC-xml-names XML 建議事項中的 W3C 命名空間。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextWriter.Namespaces">
          <source>You can only change this property when in the <ph id="ph1">&lt;see langword="WriteState.Start" /&gt;</ph> state.</source>
          <target state="translated">在 <ph id="ph1">&lt;see langword="WriteState.Start" /&gt;</ph> 狀態時才能變更這個屬性。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextWriter.QuoteChar">
          <source>Gets or sets which character to use to quote attribute values.</source>
          <target state="translated">取得或設定用來括住屬性值的字元。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.QuoteChar">
          <source>The character to use to quote attribute values.</source>
          <target state="translated">用來括住屬性值的字元。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.QuoteChar">
          <source>This must be a single quote (<ph id="ph1">&amp;amp;</ph>#39;) or a double quote (<ph id="ph2">&amp;amp;</ph>#34;).</source>
          <target state="translated">這必須是單引號 (<ph id="ph1">&amp;amp;</ph>#39;) 或雙引號括住 (<ph id="ph2">&amp;amp;</ph>#34;)。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.QuoteChar">
          <source>The default is a double quote.</source>
          <target state="translated">預設為雙引號。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.QuoteChar">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">從.NET Framework 2.0 開始，我們建議您先建立<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>所使用的執行個體<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>類別，以充分利用新功能。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextWriter.QuoteChar">
          <source>Setting this property to something other than either a single or double quote.</source>
          <target state="translated">設定這個屬性為單引號或雙引號以外的值。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
          <source>Byte array to encode.</source>
          <target state="translated">要編碼的位元組陣列。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
          <source>The position within the buffer indicating the start of the bytes to write.</source>
          <target state="translated">緩衝區中的位置，指示要寫入的位元組開頭。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes to write.</source>
          <target state="translated">要寫入的位元組數。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
          <source>Encodes the specified binary bytes as base64 and writes out the resulting text.</source>
          <target state="translated">以 base64 編碼指定的二進位位元組並寫出產生的文字。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">從.NET Framework 2.0 開始，我們建議您先建立<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>所使用的執行個體<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>類別，以充分利用新功能。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
          <source>The following example encodes an input file using <ph id="ph1">`WriteBase64`</ph> and generates a temporary XML file.</source>
          <target state="translated">下列範例會將編碼的輸入的檔使用<ph id="ph1">`WriteBase64`</ph>並產生 XML 暫存檔。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
          <source>The temporary XML file is decoded using the <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.ReadBase64%2A&gt;</ph> method and compared to the original file.</source>
          <target state="translated">使用解碼 XML 暫存檔<ph id="ph1">&lt;xref:System.Xml.XmlTextReader.ReadBase64%2A&gt;</ph>方法和相較於原始的檔案。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
          <source>The buffer length minus <ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than <ph id="ph2">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">緩衝區長度減去 <ph id="ph1">&lt;paramref name="index" /&gt;</ph> 小於 <ph id="ph2">&lt;paramref name="count" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="count" /&gt;</ph> 小於零。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.WriteState" /&gt;</ph> is <ph id="ph2">&lt;see langword="Closed" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.WriteState" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="Closed" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>Byte array to encode.</source>
          <target state="translated">要編碼的位元組陣列。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>The position in the buffer indicating the start of the bytes to write.</source>
          <target state="translated">緩衝區中的位置指示要寫入的位元組開頭。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes to write.</source>
          <target state="translated">要寫入的位元組數。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>Encodes the specified binary bytes as binhex and writes out the resulting text.</source>
          <target state="translated">以 Binhex 編碼指定的二進位位元組，並寫出產生的文字。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">從.NET Framework 2.0 開始，我們建議您先建立<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>所使用的執行個體<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>類別，以充分利用新功能。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>The buffer length minus <ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than <ph id="ph2">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">緩衝區長度減去 <ph id="ph1">&lt;paramref name="index" /&gt;</ph> 小於 <ph id="ph2">&lt;paramref name="count" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="count" /&gt;</ph> 小於零。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.WriteState" /&gt;</ph> is Closed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.WriteState" /&gt;</ph> 已經關閉。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteCData(System.String)">
          <source>Text to place inside the CDATA block.</source>
          <target state="translated">要放在 CDATA 區塊中的文字。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteCData(System.String)">
          <source>Writes out a <ph id="ph1">&amp;lt;</ph>![CDATA[...]]<ph id="ph2">&amp;gt;</ph> block containing the specified text.</source>
          <target state="translated">寫出包含指定文字的 <ph id="ph1">&amp;lt;</ph>![CDATA[...]]<ph id="ph2">&amp;gt;</ph> 區塊。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteCData(System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">從.NET Framework 2.0 開始，我們建議您先建立<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>所使用的執行個體<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>類別，以充分利用新功能。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteCData(System.String)">
          <source>If <ph id="ph1">`text`</ph> is either <ph id="ph2">`null`</ph> or <ph id="ph3">`String.Empty`</ph>, this method writes an empty CDATA block, for example <ph id="ph4">\&lt;</ph>![CDATA[]]]&gt;&lt;![CDATA[]&gt;.</source>
          <target state="translated">如果<ph id="ph1">`text`</ph>是<ph id="ph2">`null`</ph>或<ph id="ph3">`String.Empty`</ph>，這個方法會寫入一個空白的 CDATA 區塊，例如<ph id="ph4">\&lt;</ph>！ [CDATA []]] &gt;&lt; ！[CDATA [] &gt;。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteCData(System.String)">
          <source>The following example writes an XML file representing a book.</source>
          <target state="translated">下列範例會將 XML 檔案代表活頁簿。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteCData(System.String)">
          <source>The text would result in a non-well formed XML document.</source>
          <target state="translated">此文字會導致非語式正確的 XML 文件。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteCData(System.String)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.WriteState" /&gt;</ph> is <ph id="ph2">&lt;see langword="Closed" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.WriteState" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="Closed" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteCharEntity(System.Char)">
          <source>Unicode character for which to generate a character entity.</source>
          <target state="translated">要產生字元實體的 Unicode 字元。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteCharEntity(System.Char)">
          <source>Forces the generation of a character entity for the specified Unicode character value.</source>
          <target state="translated">強制產生指定的 Unicode 字元值的字元實體。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteCharEntity(System.Char)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">從.NET Framework 2.0 開始，我們建議您先建立<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>所使用的執行個體<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>類別，以充分利用新功能。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteCharEntity(System.Char)">
          <source>This method writes the Unicode character in hexadecimal character entity reference format.</source>
          <target state="translated">這個方法會以十六進位字元實體參考格式寫入的 Unicode 字元。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteCharEntity(System.Char)">
          <source>The following example uses the <ph id="ph1">`WriteCharEntity`</ph> method to write an email address.</source>
          <target state="translated">下列範例會使用<ph id="ph1">`WriteCharEntity`</ph>方法來撰寫電子郵件地址。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteCharEntity(System.Char)">
          <source>The character is in the surrogate pair character range, <ph id="ph1">&lt;see langword="0xd800" /&gt;</ph><ph id="ph2"> - </ph><ph id="ph3">&lt;see langword="0xdfff" /&gt;</ph>; or the text would result in a non-well formed XML document.</source>
          <target state="translated">字元是位在 Surrogate 字組字元範圍 <ph id="ph1">&lt;see langword="0xd800" /&gt;</ph><ph id="ph2"> - </ph><ph id="ph3">&lt;see langword="0xdfff" /&gt;</ph> 中；否則文字會產生非正確格式的 XML 文件。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteCharEntity(System.Char)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.WriteState" /&gt;</ph> is <ph id="ph2">&lt;see langword="Closed" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.WriteState" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="Closed" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source>Character array containing the text to write.</source>
          <target state="translated">包含要寫入之文字的字元陣列。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source>The position in the buffer indicating the start of the text to write.</source>
          <target state="translated">緩衝區中的位置指示要寫入的文字開頭。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source>The number of characters to write.</source>
          <target state="translated">要寫入的字元數。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source>Writes text one buffer at a time.</source>
          <target state="translated">一次將文字寫入一個緩衝區。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">從.NET Framework 2.0 開始，我們建議您先建立<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>所使用的執行個體<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>類別，以充分利用新功能。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source>This method can be used to write large amounts of text one buffer at a time.</source>
          <target state="translated">這個方法可以用來一次寫入大量的文字一個緩衝區。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source>Special handling must be done to ensure the <ph id="ph1">`WriteChars`</ph> method does not split surrogate pair characters across multiple buffer writes.</source>
          <target state="translated">必須進行特殊處理，可確保<ph id="ph1">`WriteChars`</ph>方法不會將 surrogate 字組字元分割跨多個緩衝區寫入。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source>The XML specification defines the valid ranges for surrogate pairs.</source>
          <target state="translated">XML 規格定義的 surrogate 字組的有效範圍。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source>An exception is thrown if surrogate pair characters are written that would result in the surrogate pair characters being split in the buffer.</source>
          <target state="translated">如果寫入，會導致緩衝區中被分割的 surrogate 字組字元 surrogate 字組字元，則會擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="count" /&gt;</ph> 小於零。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source>The buffer length minus <ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than <ph id="ph2">&lt;paramref name="count" /&gt;</ph>; the call results in surrogate pair characters being split or an invalid surrogate pair being written.</source>
          <target state="translated">緩衝區長度減去 <ph id="ph1">&lt;paramref name="index" /&gt;</ph> 小於 <ph id="ph2">&lt;paramref name="count" /&gt;</ph>；這個呼叫會導致 Surrogate 字組字元被分隔或寫入無效的 Surrogate 字組。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.WriteState" /&gt;</ph> is Closed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.WriteState" /&gt;</ph> 已經關閉。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteComment(System.String)">
          <source>Text to place inside the comment.</source>
          <target state="translated">要放入註解中的文字。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteComment(System.String)">
          <source>Writes out a comment <ph id="ph1">&amp;lt;</ph>!--...--<ph id="ph2">&amp;gt;</ph> containing the specified text.</source>
          <target state="translated">寫出包含指定文字的註解 <ph id="ph1">&amp;lt;</ph>!--...--<ph id="ph2">&amp;gt;</ph>。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteComment(System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">從.NET Framework 2.0 開始，我們建議您先建立<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>所使用的執行個體<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>類別，以充分利用新功能。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteComment(System.String)">
          <source>If <ph id="ph1">`text`</ph> is either <ph id="ph2">`null`</ph> or <ph id="ph3">`String.Empty`</ph>, this method writes a <ph id="ph4">`Comment`</ph> with no data content, for example <ph id="ph5">\&lt;</ph>!----&gt;.</source>
          <target state="translated">如果<ph id="ph1">`text`</ph>是<ph id="ph2">`null`</ph>或<ph id="ph3">`String.Empty`</ph>，這個方法會寫入<ph id="ph4">`Comment`</ph>沒有資料內容，例如<ph id="ph5">\&lt;</ph>！---&gt;。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteComment(System.String)">
          <source>The following example writes an XML file representing a book.</source>
          <target state="translated">下列範例會將 XML 檔案代表活頁簿。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteComment(System.String)">
          <source>The text would result in a non-well formed XML document</source>
          <target state="translated">此文字會導致非語式正確的 XML 文件</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteComment(System.String)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.WriteState" /&gt;</ph> is <ph id="ph2">&lt;see langword="Closed" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.WriteState" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="Closed" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>The name of the DOCTYPE.</source>
          <target state="translated">DOCTYPE 名稱。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>This must be non-empty.</source>
          <target state="translated">這必須不是空白的。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>If non-null it also writes PUBLIC "pubid" "sysid" where <bpt id="p1">&lt;c&gt;</bpt>pubid<ept id="p1">&lt;/c&gt;</ept> and <bpt id="p2">&lt;c&gt;</bpt>sysid<ept id="p2">&lt;/c&gt;</ept> are replaced with the value of the given arguments.</source>
          <target state="translated">如果為非 null，它也會寫入 PUBLIC "pubid" "sysid"，其中 <bpt id="p1">&lt;c&gt;</bpt>pubid<ept id="p1">&lt;/c&gt;</ept> 與 <bpt id="p2">&lt;c&gt;</bpt>sysid<ept id="p2">&lt;/c&gt;</ept> 會取代為指定引數的值。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>pubid<ept id="p1">&lt;/c&gt;</ept> is null and <bpt id="p2">&lt;c&gt;</bpt>sysid<ept id="p2">&lt;/c&gt;</ept> is non-null it writes SYSTEM "sysid" where <bpt id="p3">&lt;c&gt;</bpt>sysid<ept id="p3">&lt;/c&gt;</ept> is replaced with the value of this argument.</source>
          <target state="translated">如果 <bpt id="p1">&lt;c&gt;</bpt>pubid<ept id="p1">&lt;/c&gt;</ept> 是 Null，而 <bpt id="p2">&lt;c&gt;</bpt>sysid<ept id="p2">&lt;/c&gt;</ept> 為非 Null，則它會寫入 SYSTEM "sysid"，其中 <bpt id="p3">&lt;c&gt;</bpt>sysid<ept id="p3">&lt;/c&gt;</ept> 會取代為這個引數的值。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>If non-null it writes [subset] where subset is replaced with the value of this argument.</source>
          <target state="translated">如果非 Null，它會寫入 [subset]，其中 subset 由這個引數的值來替代。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>Writes the DOCTYPE declaration with the specified name and optional attributes.</source>
          <target state="translated">寫入具有指定名稱與選擇性屬性的 DOCTYPE 宣告。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">從.NET Framework 2.0 開始，我們建議您先建立<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>所使用的執行個體<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>類別，以充分利用新功能。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>This method does not check for invalid characters in <ph id="ph1">`pubid`</ph>, <ph id="ph2">`sysid`</ph> or <ph id="ph3">`subset`</ph>.</source>
          <target state="translated">這個方法不會檢查無效的字元<ph id="ph1">`pubid`</ph>，<ph id="ph2">`sysid`</ph>或<ph id="ph3">`subset`</ph>。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>It also does not check that the internal subset is well-formed.</source>
          <target state="translated">它也不會檢查內部子集是語式正確。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph> does not validate any data that is passed to the <ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteDocType%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph>不會驗證傳遞至任何資料<ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteDocType%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>You should not pass arbitrary data to this method.</source>
          <target state="translated">您不應該將任意資料傳遞至這個方法。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>The following example writes an XML file representing a book.</source>
          <target state="translated">下列範例會將 XML 檔案代表活頁簿。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>This method was called outside the prolog (after the root element).</source>
          <target state="translated">從初構的外部 (在根項目之後) 呼叫這個方法。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> or <ph id="ph3">&lt;see langword="String.Empty" /&gt;</ph></source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph> 或 <ph id="ph3">&lt;see langword="String.Empty" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>the value for <ph id="ph1">&lt;paramref name="name" /&gt;</ph> would result in invalid XML.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> 的值將導致無效的 XML。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteEndAttribute">
          <source>Closes the previous <ph id="ph1">&lt;see cref="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)" /&gt;</ph> call.</source>
          <target state="translated">關閉先前的 <ph id="ph1">&lt;see cref="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)" /&gt;</ph> 呼叫。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteEndAttribute">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">從.NET Framework 2.0 開始，我們建議您先建立<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>所使用的執行個體<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>類別，以充分利用新功能。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteEndAttribute">
          <source>If you call <ph id="ph1">`WriteStartAttribute`</ph>, you can close the attribute with this method.</source>
          <target state="translated">如果您呼叫<ph id="ph1">`WriteStartAttribute`</ph>，您可以關閉使用此方法的屬性。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteEndAttribute">
          <source>You can also close the attribute by calling <ph id="ph1">`WriteStartAttribute`</ph> again, calling <ph id="ph2">&lt;xref:System.Xml.XmlWriter.WriteAttributeString%2A&gt;</ph>, or calling <ph id="ph3">&lt;xref:System.Xml.XmlTextWriter.WriteEndElement%2A&gt;</ph>.</source>
          <target state="translated">您也可以藉由呼叫關閉屬性<ph id="ph1">`WriteStartAttribute`</ph>再次呼叫<ph id="ph2">&lt;xref:System.Xml.XmlWriter.WriteAttributeString%2A&gt;</ph>，或呼叫<ph id="ph3">&lt;xref:System.Xml.XmlTextWriter.WriteEndElement%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteEndAttribute">
          <source>The following example writes out a book.</source>
          <target state="translated">下列範例會寫出活頁簿。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteEndDocument">
          <source>Closes any open elements or attributes and puts the writer back in the Start state.</source>
          <target state="translated">關閉任何開啟的項目或屬性，並將寫入器回復開始狀態。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteEndDocument">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">從.NET Framework 2.0 開始，我們建議您先建立<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>所使用的執行個體<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>類別，以充分利用新功能。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteEndDocument">
          <source>The following example writes an XML file representing a book.</source>
          <target state="translated">下列範例會將 XML 檔案代表活頁簿。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteEndDocument">
          <source>The XML document is invalid.</source>
          <target state="translated">XML 文件無效。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteEndElement">
          <source>Closes one element and pops the corresponding namespace scope.</source>
          <target state="translated">關閉一個項目並快顯對應的命名空間範圍。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteEndElement">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">從.NET Framework 2.0 開始，我們建議您先建立<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>所使用的執行個體<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>類別，以充分利用新功能。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteEndElement">
          <source>If the element contains no content a short end tag "/&gt;" is written; otherwise a full end tag is written.</source>
          <target state="translated">如果元素不包含內容的簡短結束標記 」 / &gt; 「 寫入;否則會寫入完整的結束標記。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteEndElement">
          <source>The following example writes an XML file representing a book.</source>
          <target state="translated">下列範例會將 XML 檔案代表活頁簿。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteEntityRef(System.String)">
          <source>Name of the entity reference.</source>
          <target state="translated">實體參考的名稱。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteEntityRef(System.String)">
          <source>Writes out an entity reference as <ph id="ph1">&lt;see langword="&amp;amp;name;" /&gt;</ph>.</source>
          <target state="translated">寫出如 <ph id="ph1">&lt;see langword="&amp;amp;name;" /&gt;</ph> 的實體參考。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteEntityRef(System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">從.NET Framework 2.0 開始，我們建議您先建立<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>所使用的執行個體<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>類別，以充分利用新功能。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteEntityRef(System.String)">
          <source>The following example writes an XML file representing a book.</source>
          <target state="translated">下列範例會將 XML 檔案代表活頁簿。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteEntityRef(System.String)">
          <source>The text would result in a non-well formed XML document or <ph id="ph1">&lt;paramref name="name" /&gt;</ph> is either <ph id="ph2">&lt;see langword="null" /&gt;</ph> or <ph id="ph3">&lt;see langword="String.Empty" /&gt;</ph>.</source>
          <target state="translated">此文字將產生非語式正確的 XML 文件，或是 <ph id="ph1">&lt;paramref name="name" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph> 或 <ph id="ph3">&lt;see langword="String.Empty" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteFullEndElement">
          <source>Closes one element and pops the corresponding namespace scope.</source>
          <target state="translated">關閉一個項目並快顯對應的命名空間範圍。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteFullEndElement">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">從.NET Framework 2.0 開始，我們建議您先建立<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>所使用的執行個體<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>類別，以充分利用新功能。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteFullEndElement">
          <source>This method always writes the full end tag.</source>
          <target state="translated">這個方法一律會寫入完整的結束標記。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteFullEndElement">
          <source>This is useful when dealing with elements that must include a full end tag.</source>
          <target state="translated">處理項目，其中必須包含完整的結束標記時，這非常有用。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteFullEndElement">
          <source>For example, browsers expect HTML script blocks to be closed with "<ph id="ph1">\&lt;</ph>/script&gt;".</source>
          <target state="translated">例如，瀏覽器預期 HTML 指令碼區塊，以 「 <ph id="ph1">\&lt;</ph> /指令碼 &gt; 」。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteFullEndElement">
          <source>The following example writes out an element with no content.</source>
          <target state="translated">下列範例會寫出具有沒有內容的項目。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteFullEndElement">
          <source>It uses WriteFullEndElement to write the full end element tag.</source>
          <target state="translated">它會使用 WriteFullEndElement 寫入完整的結尾項目標記。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteName(System.String)">
          <source>Name to write.</source>
          <target state="translated">要寫入的名稱。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteName(System.String)">
          <source>Writes out the specified name, ensuring it is a valid name according to the W3C XML 1.0 recommendation (<ph id="ph1">http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name)</ph>.</source>
          <target state="translated">寫出指定的名稱，以確保它是符合 W3C XML 1.0 建議 (<ph id="ph1">http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name)</ph> \(英文\) 的有效名稱。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteName(System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">從.NET Framework 2.0 開始，我們建議您先建立<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>所使用的執行個體<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>類別，以充分利用新功能。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteName(System.String)">
          <source>If <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter.Namespaces%2A&gt;</ph> is set to <ph id="ph2">`true`</ph>, <ph id="ph3">`WriteName`</ph> also checks that the name is also valid according to the W3C Namespaces in XML recommendation.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Xml.XmlTextWriter.Namespaces%2A&gt;</ph>設<ph id="ph2">`true`</ph>，<ph id="ph3">`WriteName`</ph>也會檢查名稱是否有效，根據 W3C Namespaces in XML 建議事項。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteName(System.String)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is not a valid XML name; or <ph id="ph2">&lt;paramref name="name" /&gt;</ph> is either <ph id="ph3">&lt;see langword="null" /&gt;</ph> or <ph id="ph4">&lt;see langword="String.Empty" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> 不是有效的 XML 名稱，或者 <ph id="ph2">&lt;paramref name="name" /&gt;</ph> 是 <ph id="ph3">&lt;see langword="null" /&gt;</ph> 或 <ph id="ph4">&lt;see langword="String.Empty" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteNmToken(System.String)">
          <source>Name to write.</source>
          <target state="translated">要寫入的名稱。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteNmToken(System.String)">
          <source>Writes out the specified name, ensuring it is a valid <ph id="ph1">&lt;see langword="NmToken" /&gt;</ph> according to the W3C XML 1.0 recommendation (<ph id="ph2">http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name)</ph>.</source>
          <target state="translated">寫出指定的名稱，以確保它是符合 W3C XML 1.0 建議 (<ph id="ph2">http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name)</ph> \(英文\) 的有效 <ph id="ph1">&lt;see langword="NmToken" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteNmToken(System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">從.NET Framework 2.0 開始，我們建議您先建立<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>所使用的執行個體<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>類別，以充分利用新功能。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteNmToken(System.String)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is not a valid <ph id="ph2">&lt;see langword="NmToken" /&gt;</ph>; or <ph id="ph3">&lt;paramref name="name" /&gt;</ph> is either <ph id="ph4">&lt;see langword="null" /&gt;</ph> or <ph id="ph5">&lt;see langword="String.Empty" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> 不是有效的 <ph id="ph2">&lt;see langword="NmToken" /&gt;</ph>，或者 <ph id="ph3">&lt;paramref name="name" /&gt;</ph> 是 <ph id="ph4">&lt;see langword="null" /&gt;</ph> 或 <ph id="ph5">&lt;see langword="String.Empty" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteProcessingInstruction(System.String,System.String)">
          <source>Name of the processing instruction.</source>
          <target state="translated">處理指示的名稱。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteProcessingInstruction(System.String,System.String)">
          <source>Text to include in the processing instruction.</source>
          <target state="translated">要包含在處理指示中的文字。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteProcessingInstruction(System.String,System.String)">
          <source>Writes out a processing instruction with a space between the name and text as follows: <ph id="ph1">&amp;lt;</ph>?name text?<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">寫出名稱與文字之間有空白的處理指示，如下所示：<ph id="ph1">&amp;lt;</ph>?name text?<ph id="ph2">&amp;gt;</ph>。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteProcessingInstruction(System.String,System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">從.NET Framework 2.0 開始，我們建議您先建立<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>所使用的執行個體<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>類別，以充分利用新功能。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteProcessingInstruction(System.String,System.String)">
          <source>If <ph id="ph1">`text`</ph> is either <ph id="ph2">`null`</ph> or <ph id="ph3">`String.Empty`</ph>, this method writes a <ph id="ph4">`ProcessingInstruction`</ph> with no data content, for example <ph id="ph5">\&lt;</ph>?name?&gt;.</source>
          <target state="translated">如果<ph id="ph1">`text`</ph>是<ph id="ph2">`null`</ph>或<ph id="ph3">`String.Empty`</ph>，這個方法會寫入<ph id="ph4">`ProcessingInstruction`</ph>沒有資料內容，例如<ph id="ph5">\&lt;</ph>？ 名稱？ &gt;。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteProcessingInstruction(System.String,System.String)">
          <source>The following example writes an XML file representing a book.</source>
          <target state="translated">下列範例會將 XML 檔案代表活頁簿。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteProcessingInstruction(System.String,System.String)">
          <source>The text would result in a non-well formed XML document.</source>
          <target state="translated">此文字會導致非語式正確的 XML 文件。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteProcessingInstruction(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is either <ph id="ph2">&lt;see langword="null" /&gt;</ph> or <ph id="ph3">&lt;see langword="String.Empty" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph> 或 <ph id="ph3">&lt;see langword="String.Empty" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteProcessingInstruction(System.String,System.String)">
          <source>This method is being used to create an XML declaration after <ph id="ph1">&lt;see cref="M:System.Xml.XmlTextWriter.WriteStartDocument" /&gt;</ph> has already been called.</source>
          <target state="translated">在呼叫 <ph id="ph1">&lt;see cref="M:System.Xml.XmlTextWriter.WriteStartDocument" /&gt;</ph> 之後，使用這個方法來建立 XML 宣告。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source>The local name to write.</source>
          <target state="translated">要寫入的區域名稱。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source>The namespace URI to associate with the name.</source>
          <target state="translated">與這個名稱關聯的命名空間 URI。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source>Writes out the namespace-qualified name.</source>
          <target state="translated">寫出命名空間限定名稱。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source>This method looks up the prefix that is in scope for the given namespace.</source>
          <target state="translated">這個方法會查詢在指定之命名空間範圍中的前置詞。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">從.NET Framework 2.0 開始，我們建議您先建立<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>所使用的執行個體<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>類別，以充分利用新功能。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source>For example, the following Microsoft Visual C# code:</source>
          <target state="translated">例如，下列 Microsoft Visual C# 程式碼：</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source>Generates the following output:</source>
          <target state="translated">會產生下列輸出：</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source>If <ph id="ph1">`ns`</ph> maps to the current default namespace, no prefix is generated.</source>
          <target state="translated">如果<ph id="ph1">`ns`</ph>產生對應至目前的預設命名空間，沒有前置詞。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source>When writing attribute values, this method generates a prefix if <ph id="ph1">`ns`</ph> is not found.</source>
          <target state="translated">當寫入屬性值，這個方法會產生前置詞如果<ph id="ph1">`ns`</ph>找不到。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source>When writing element content, it throws an exception if <ph id="ph1">`ns`</ph> is not found.</source>
          <target state="translated">當寫入項目內容，它會擲回例外狀況如果<ph id="ph1">`ns`</ph>找不到。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source>If this writer supports namespaces (<ph id="ph1">&lt;xref:System.Xml.XmlTextWriter.Namespaces%2A&gt;</ph> is set to <ph id="ph2">`true`</ph>), this method also checks that the name is valid according to the W3C Namespaces in XML recommendation (<ph id="ph3">http://www.w3.org/TR/REC-xml-names)</ph>.</source>
          <target state="translated">如果這個寫入器支援命名空間 (<ph id="ph1">&lt;xref:System.Xml.XmlTextWriter.Namespaces%2A&gt;</ph>設<ph id="ph2">`true`</ph>)，這個方法也會檢查名稱是否有效，根據 W3C Namespaces in XML 建議事項 (<ph id="ph3">http://www.w3.org/TR/REC-xml-names)</ph>。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source>The following example writes out a portion of a XSD schema.</source>
          <target state="translated">下列範例會寫出 XSD 結構描述部分。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="localName" /&gt;</ph> is either <ph id="ph2">&lt;see langword="null" /&gt;</ph> or <ph id="ph3">&lt;see langword="String.Empty" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="localName" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph> 或 <ph id="ph3">&lt;see langword="String.Empty" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="localName" /&gt;</ph> is not a valid name according to the W3C Namespaces spec.</source>
          <target state="translated">根據 W3C 命名空間規格，<ph id="ph1">&lt;paramref name="localName" /&gt;</ph> 不是有效的名稱。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="T:System.Xml.XmlTextWriter">
          <source>Writes raw markup manually.</source>
          <target state="translated">手動寫入未經處理的標記。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">從.NET Framework 2.0 開始，我們建議您先建立<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>所使用的執行個體<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>類別，以充分利用新功能。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.String)">
          <source>String containing the text to write.</source>
          <target state="translated">包含要寫入之文字的字串。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.String)">
          <source>Writes raw markup manually from a string.</source>
          <target state="translated">從字串手動寫入未經處理的標記 (Raw Markup)。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">從.NET Framework 2.0 開始，我們建議您先建立<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>所使用的執行個體<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>類別，以充分利用新功能。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.String)">
          <source>This method does not escape special characters.</source>
          <target state="translated">這個方法不會逸出特殊字元。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph> does not validate any data that is passed to the <ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteRaw%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph>不會驗證傳遞至任何資料<ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteRaw%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.String)">
          <source>You should not pass arbitrary data to this method.</source>
          <target state="translated">您不應該將任意資料傳遞至這個方法。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.String)">
          <source>The following example writes a string using the <ph id="ph1">`WriteRaw`</ph> method.</source>
          <target state="translated">下列範例會將字串使用<ph id="ph1">`WriteRaw`</ph>方法。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
          <source>Character array containing the text to write.</source>
          <target state="translated">包含要寫入之文字的字元陣列。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
          <source>The position within the buffer indicating the start of the text to write.</source>
          <target state="translated">緩衝區中指示要寫入的文字開頭的位置。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
          <source>The number of characters to write.</source>
          <target state="translated">要寫入的字元數。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
          <source>Writes raw markup manually from a character buffer.</source>
          <target state="translated">從字元緩衝區手動寫入未經處理的標記。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">從.NET Framework 2.0 開始，我們建議您先建立<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>所使用的執行個體<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>類別，以充分利用新功能。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
          <source>This method does not escape special characters.</source>
          <target state="translated">這個方法不會逸出特殊字元。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph> does not validate any data that is passed to the <ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteRaw%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph>不會驗證傳遞至任何資料<ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteRaw%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
          <source>You should not pass arbitrary data to this method.</source>
          <target state="translated">您不應該將任意資料傳遞至這個方法。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="count" /&gt;</ph> 小於零。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
          <source>The buffer length minus <ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than <ph id="ph2">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">緩衝區長度減去 <ph id="ph1">&lt;paramref name="index" /&gt;</ph> 小於 <ph id="ph2">&lt;paramref name="count" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)">
          <source><ph id="ph1">&lt;see langword="Namespace" /&gt;</ph> prefix of the attribute.</source>
          <target state="translated">屬性的 <ph id="ph1">&lt;see langword="Namespace" /&gt;</ph> 前置詞。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)">
          <source><ph id="ph1">&lt;see langword="LocalName" /&gt;</ph> of the attribute.</source>
          <target state="translated">屬性的 <ph id="ph1">&lt;see langword="LocalName" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)">
          <source><ph id="ph1">&lt;see langword="NamespaceURI" /&gt;</ph> of the attribute</source>
          <target state="translated">屬性的 <ph id="ph1">&lt;see langword="NamespaceURI" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)">
          <source>Writes the start of an attribute.</source>
          <target state="translated">寫入屬性的開頭。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">從.NET Framework 2.0 開始，我們建議您先建立<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>所使用的執行個體<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>類別，以充分利用新功能。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)">
          <source>This is a more advanced version of <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteAttributeString%2A&gt;</ph> that allows you to write an attribute value using multiple write methods, such as <ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteString%2A&gt;</ph>.</source>
          <target state="translated">這是更進階的版本<ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteAttributeString%2A&gt;</ph>，可讓您使用多個寫入方法，如屬性值寫入<ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteString%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)">
          <source>The following example writes out a book.</source>
          <target state="translated">下列範例會寫出活頁簿。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="localName" /&gt;</ph> is either <ph id="ph2">&lt;see langword="null" /&gt;</ph> or <ph id="ph3">&lt;see langword="String.Empty" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="localName" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph> 或 <ph id="ph3">&lt;see langword="String.Empty" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="T:System.Xml.XmlTextWriter">
          <source>Writes the XML declaration with the version "1.0".</source>
          <target state="translated">使用版本「1.0」寫入 XML 宣告。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">從.NET Framework 2.0 開始，我們建議您先建立<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>所使用的執行個體<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>類別，以充分利用新功能。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartDocument">
          <source>Writes the XML declaration with the version "1.0".</source>
          <target state="translated">使用版本「1.0」寫入 XML 宣告。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">從.NET Framework 2.0 開始，我們建議您先建立<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>所使用的執行個體<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>類別，以充分利用新功能。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument">
          <source>The encoding level of the document is determined by how the writer is implemented.</source>
          <target state="translated">寫入器實作的方式取決於文件的編碼方式的層級。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument">
          <source>For example, if an <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> object is specified in the <ph id="ph2">`XmlTextWriter`</ph> constructor, this determines the value of the encoding attribute.</source>
          <target state="translated">例如，如果<ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph>中指定物件<ph id="ph2">`XmlTextWriter`</ph>建構函式，這會決定編碼屬性的值。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument">
          <source>This method does not create a standalone attribute.</source>
          <target state="translated">這個方法不會建立獨立屬性。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument">
          <source>When <ph id="ph1">`WriteStartDocument`</ph> is called the writer validates that what you are writing is a well-formed XML document.</source>
          <target state="translated">當<ph id="ph1">`WriteStartDocument`</ph>呼叫寫入器會驗證您要撰寫是否格式正確的 XML 文件。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument">
          <source>For example, it checks that the XML declaration is the first node, that one and only one root-level element exists and so on.</source>
          <target state="translated">例如，它會檢查 XML 宣告，第一個節點，其中只有一個根層級項目存在，依此類推。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument">
          <source>If this method is not called, the writer assumes an XML fragment is being written and applies no root level rules.</source>
          <target state="translated">如果未呼叫此方法，則寫入器會假設正在寫入的 XML 片段，並不套用任何根層級的規則。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument">
          <source>If <ph id="ph1">`WriteStartDocument`</ph> has been called and then the <ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteProcessingInstruction%2A&gt;</ph> method is used to create another XML declaration, an exception is thrown.</source>
          <target state="translated">如果<ph id="ph1">`WriteStartDocument`</ph>已經呼叫，然後<ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteProcessingInstruction%2A&gt;</ph>方法可用來建立另一個 XML 宣告，會擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument">
          <source>The following example writes an XML file representing a book.</source>
          <target state="translated">下列範例會將 XML 檔案代表活頁簿。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartDocument">
          <source>This is not the first write method called after the constructor.</source>
          <target state="translated">這不是在建構函式之後呼叫的第一個寫入方法。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, it writes "standalone=yes"; if <ph id="ph2">&lt;see langword="false" /&gt;</ph>, it writes "standalone=no".</source>
          <target state="translated">如果 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，它會寫入「standalone=yes」；如果 <ph id="ph2">&lt;see langword="false" /&gt;</ph>，它會寫入「standalone=no」。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)">
          <source>Writes the XML declaration with the version "1.0" and the standalone attribute.</source>
          <target state="translated">使用版本「1.0」寫入 XML 宣告與獨立屬性。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">從.NET Framework 2.0 開始，我們建議您先建立<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>所使用的執行個體<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>類別，以充分利用新功能。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)">
          <source>The encoding level of the document is determined by how the writer is implemented.</source>
          <target state="translated">寫入器實作的方式取決於文件的編碼方式的層級。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)">
          <source>For example, if an <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> object is specified in the <ph id="ph2">`XmlTextWriter`</ph> constructor, this determines the value of the encoding attribute.</source>
          <target state="translated">例如，如果<ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph>中指定物件<ph id="ph2">`XmlTextWriter`</ph>建構函式，這會決定編碼屬性的值。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)">
          <source>When <ph id="ph1">`WriteStartDocument`</ph> is called the writer validates that what you are writing is a well-formed XML document.</source>
          <target state="translated">當<ph id="ph1">`WriteStartDocument`</ph>呼叫寫入器會驗證您要撰寫是否格式正確的 XML 文件。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)">
          <source>For example, it checks that the XML declaration is the first node, that one and only one root-level element exists and so on.</source>
          <target state="translated">例如，它會檢查 XML 宣告，第一個節點，其中只有一個根層級項目存在，依此類推。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)">
          <source>If this method is not called, the writer assumes an XML fragment is being written and applies no root level rules.</source>
          <target state="translated">如果未呼叫此方法，則寫入器會假設正在寫入的 XML 片段，並不套用任何根層級的規則。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)">
          <source>If <ph id="ph1">`WriteStartDocument`</ph> has been called and then the <ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteProcessingInstruction%2A&gt;</ph> method is used to create another XML declaration, an exception is thrown.</source>
          <target state="translated">如果<ph id="ph1">`WriteStartDocument`</ph>已經呼叫，然後<ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteProcessingInstruction%2A&gt;</ph>方法可用來建立另一個 XML 宣告，會擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)">
          <source>This is not the first write method called after the constructor.</source>
          <target state="translated">這不是在建構函式之後呼叫的第一個寫入方法。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)">
          <source>The namespace prefix of the element.</source>
          <target state="translated">項目的命名空間前置詞。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)">
          <source>The local name of the element.</source>
          <target state="translated">項目的本機名稱。</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)">
          <source>The namespace URI to associate with the element.</source>
          <target state="translated">與項目相關聯的命名空間 URI。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)">
          <source>If this namespace is already in scope and has an associated prefix then the writer automatically writes that prefix also.</source>
          <target state="translated">如果這個命名空間已經在範圍中並具有相關聯的前置詞，則寫入器也會自動寫入該前置詞。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)">
          <source>Writes the specified start tag and associates it with the given namespace and prefix.</source>
          <target state="translated">寫入指定的開頭標記，並使它與指定的命名空間及前置詞產生關聯。</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">從.NET Framework 2.0 開始，我們建議您先建立<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>所使用的執行個體<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>類別，以充分利用新功能。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)">
          <source>After calling this method you can either write attributes or create content using <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter.WriteComment%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteString%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.Xml.XmlTextWriter.WriteStartElement%2A&gt;</ph> for child elements.</source>
          <target state="translated">呼叫這個方法，您可以寫入屬性，或建立後的內容使用<ph id="ph1">&lt;xref:System.Xml.XmlTextWriter.WriteComment%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteString%2A&gt;</ph>，或<ph id="ph3">&lt;xref:System.Xml.XmlTextWriter.WriteStartElement%2A&gt;</ph>子項目。</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)">
          <source>You can close the element with <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter.WriteEndElement%2A&gt;</ph> at which time an end tag is written out.</source>
          <target state="translated">您可以關閉具有項目<ph id="ph1">&lt;xref:System.Xml.XmlTextWriter.WriteEndElement%2A&gt;</ph>哪個時段結束標記會寫出。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)">
          <source>The following example writes out a book.</source>
          <target state="translated">下列範例會寫出活頁簿。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)">
          <source>The writer is closed.</source>
          <target state="translated">寫入器已關閉。</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextWriter.WriteState">
          <source>Gets the state of the writer.</source>
          <target state="translated">取得寫入器的狀態。</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.WriteState">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Xml.WriteState" /&gt;</ph> values.</source>
          <target state="translated">其中一個 <ph id="ph1">&lt;see cref="T:System.Xml.WriteState" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.WriteState">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">從.NET Framework 2.0 開始，我們建議您先建立<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>所使用的執行個體<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>類別，以充分利用新功能。</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteString(System.String)">
          <source>Text to write.</source>
          <target state="translated">要寫入的文字。</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteString(System.String)">
          <source>Writes the given text content.</source>
          <target state="translated">寫入指定的文字內容。</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteString(System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">從.NET Framework 2.0 開始，我們建議您先建立<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>所使用的執行個體<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>類別，以充分利用新功能。</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteString(System.String)">
          <source><ph id="ph1">`WriteString`</ph> does the following</source>
          <target state="translated"><ph id="ph1">`WriteString`</ph> 會執行下列作業</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteString(System.String)">
          <source>The characters <ph id="ph1">`&amp;`</ph>, <ph id="ph2">`&lt;`</ph>, and <ph id="ph3">`&gt;`</ph> are replaced with <ph id="ph4">`&amp;amp;`</ph>, <ph id="ph5">`&amp;lt;`</ph>, and <ph id="ph6">`&amp;gt;`</ph>, respectively.</source>
          <target state="translated">字元<ph id="ph1">`&amp;`</ph>， <ph id="ph2">`&lt;`</ph>，和<ph id="ph3">`&gt;`</ph>會取代<ph id="ph4">`&amp;amp;`</ph>， <ph id="ph5">`&amp;lt;`</ph>，和<ph id="ph6">`&amp;gt;`</ph>分別。</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteString(System.String)">
          <source>Character values in the range 0x-0x1F (excluding white space characters 0x9, 0xA, and 0xD) are replaced with numeric character entities (<ph id="ph1">`&amp;#0;`</ph> through <ph id="ph2">`&amp;#0x1F`</ph>).</source>
          <target state="translated">範圍 0 x-0x1F （不含空白字元 0x9、 0xA 和為 0xD） 中的字元值會取代數字字元實體 (<ph id="ph1">`&amp;#0;`</ph>透過<ph id="ph2">`&amp;#0x1F`</ph>)。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteString(System.String)">
          <source>If <ph id="ph1">`WriteString`</ph> is called in the context of an attribute value, double and single quotes are replaced with <ph id="ph2">`&amp;quot;`</ph> and <ph id="ph3">`&amp;apos;`</ph> respectively.</source>
          <target state="translated">如果<ph id="ph1">`WriteString`</ph>呼叫在屬性值的內容中，以取代 double 和單一引號<ph id="ph2">`&amp;quot;`</ph>和<ph id="ph3">`&amp;apos;`</ph>分別。</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteString(System.String)">
          <source>For example, this input string <ph id="ph1">`test&lt;item&gt;test`</ph> is written as</source>
          <target state="translated">這在輸入字串，例如<ph id="ph1">`test&lt;item&gt;test`</ph>撰寫為</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteString(System.String)">
          <source>If <ph id="ph1">`text`</ph> is either <ph id="ph2">`null`</ph> or <ph id="ph3">`String.Empty`</ph>, this method writes a text node with no data content.</source>
          <target state="translated">如果<ph id="ph1">`text`</ph>是<ph id="ph2">`null`</ph>或<ph id="ph3">`String.Empty`</ph>，這個方法會寫入任何資料內容與文字節點。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteString(System.String)">
          <source>The following example writes an XML fragment.</source>
          <target state="translated">下列範例會將 XML 片段。</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteString(System.String)">
          <source>The text string contains an invalid surrogate pair.</source>
          <target state="translated">文字字串包含無效的 Surrogate 字組。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>The low surrogate.</source>
          <target state="translated">低 Surrogate。</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>This must be a value between <ph id="ph1">&lt;see langword="0xDC00" /&gt;</ph> and <ph id="ph2">&lt;see langword="0xDFFF" /&gt;</ph>.</source>
          <target state="translated">這必須是一個介於 <ph id="ph1">&lt;see langword="0xDC00" /&gt;</ph> 和 <ph id="ph2">&lt;see langword="0xDFFF" /&gt;</ph> 之間的值。</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>The high surrogate.</source>
          <target state="translated">高 Surrogate。</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>This must be a value between <ph id="ph1">&lt;see langword="0xD800" /&gt;</ph> and <ph id="ph2">&lt;see langword="0xDBFF" /&gt;</ph>.</source>
          <target state="translated">這必須是一個介於 <ph id="ph1">&lt;see langword="0xD800" /&gt;</ph> 和 <ph id="ph2">&lt;see langword="0xDBFF" /&gt;</ph> 之間的值。</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>Generates and writes the surrogate character entity for the surrogate character pair.</source>
          <target state="translated">產生和寫入 Surrogate 字元字組的 Surrogate 字元實體。</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">從.NET Framework 2.0 開始，我們建議您先建立<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>所使用的執行個體<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>類別，以充分利用新功能。</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>This method is only applicable on systems that use UTF-16 encoding.</source>
          <target state="translated">這個方法僅適用於使用 utf-16 編碼的系統上。</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>The surrogate character entity is written in hexadecimal format.</source>
          <target state="translated">以十六進位格式寫入 surrogate 字元實體。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>The range for surrogate characters is <ph id="ph1">`#x10000`</ph> to <ph id="ph2">`#x10FFFF`</ph>.</source>
          <target state="translated">Surrogate 字元的範圍是<ph id="ph1">`#x10000`</ph>至<ph id="ph2">`#x10FFFF`</ph>。</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>The following formula is used to generate the surrogate character entity: (<ph id="ph1">`highChar`</ph><ph id="ph2"> - </ph><ph id="ph3">`0xD800`</ph>) * <ph id="ph4">`0x400`</ph> + (<ph id="ph5">`lowChar`</ph><ph id="ph6"> - </ph><ph id="ph7">`0xDC00`</ph>) + <ph id="ph8">`0x10000`</ph>.</source>
          <target state="translated">下列公式用來產生 surrogate 字元實體: (<ph id="ph1">`highChar`</ph><ph id="ph2"> - </ph><ph id="ph3">`0xD800`</ph>) * <ph id="ph4">`0x400`</ph> + (<ph id="ph5">`lowChar`</ph><ph id="ph6"> - </ph><ph id="ph7">`0xDC00`</ph>) + <ph id="ph8">`0x10000`</ph>。</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>For both HTML and XML, the document character set (and therefore the notation of numeric character references) is based on UCS [ISO-10646].</source>
          <target state="translated">HTML 和 XML 文件的字元集 （以及數字字元參考的標記法） 根據 UCS [ISO 10646]。</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>A single numeric character reference in a source document may therefore in some cases correspond to two 16-bit units in a string (a high surrogate and a low surrogate).</source>
          <target state="translated">來源文件中的單一數字字元參考可能因此在某些情況下對應到兩個 16 位元單位數 （為高 surrogate 和低 surrogate） 的字串。</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>These 16-bit units are referred to as a surrogate pair.</source>
          <target state="translated">這些 16 位元的單位稱為 「 surrogate 字組 」。</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>For more information regarding surrogates or characters, refer to section 3.7 of the Unicode 3.0/Unicode 2.0 standard located at <ph id="ph1">http://www.unicode.org</ph>, or section 2.2 of the W3C XML 1.0 Recommendation located at <ph id="ph2">http://www.w3.org/TR/REC-xml#charsets</ph>.</source>
          <target state="translated">如需有關 (instance) 或字元的詳細資訊，請參閱的區段 3.7 Unicode standard 3.0/Unicode 2.0 位於<ph id="ph1">http://www.unicode.org</ph>，2.2 小節 W3C XML 1.0 版建議事項位於或<ph id="ph2">http://www.w3.org/TR/REC-xml#charsets</ph>。</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>An invalid surrogate character pair was passed.</source>
          <target state="translated">傳送無效的 Surrogate 字元字組。</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteWhitespace(System.String)">
          <source>The string of white space characters.</source>
          <target state="translated">空白字元的字串。</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteWhitespace(System.String)">
          <source>Writes out the given white space.</source>
          <target state="translated">寫出指定的空白字元。</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteWhitespace(System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">從.NET Framework 2.0 開始，我們建議您先建立<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>所使用的執行個體<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>類別，以充分利用新功能。</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteWhitespace(System.String)">
          <source>This method is used to manually format your document.</source>
          <target state="translated">這個方法用來手動格式化文件。</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteWhitespace(System.String)">
          <source>Use the <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter.Formatting%2A&gt;</ph> property to have the writer format the output automatically.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Xml.XmlTextWriter.Formatting%2A&gt;</ph>屬性，讓自動格式化輸出寫入器。</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteWhitespace(System.String)">
          <source>The following example uses the <ph id="ph1">`WriteWhitespace`</ph> method to control how the file is formatted.</source>
          <target state="translated">下列範例會使用<ph id="ph1">`WriteWhitespace`</ph>方法，以控制如何格式化檔案。</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteWhitespace(System.String)">
          <source>The string contains non-white space characters.</source>
          <target state="translated">字串包含非泛空白字元。</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextWriter.XmlLang">
          <source>Gets the current <ph id="ph1">&lt;see langword="xml:lang" /&gt;</ph> scope.</source>
          <target state="translated">取得目前的 <ph id="ph1">&lt;see langword="xml:lang" /&gt;</ph> 範圍。</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlLang">
          <source>The current <ph id="ph1">&lt;see langword="xml:lang" /&gt;</ph> or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if there is no <ph id="ph3">&lt;see langword="xml:lang" /&gt;</ph> in the current scope.</source>
          <target state="translated">目前的 <ph id="ph1">&lt;see langword="xml:lang" /&gt;</ph>；如果目前的範圍中沒有 <ph id="ph2">&lt;see langword="null" /&gt;</ph> 則為 <ph id="ph3">&lt;see langword="xml:lang" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlLang">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">從.NET Framework 2.0 開始，我們建議您先建立<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>所使用的執行個體<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>類別，以充分利用新功能。</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlLang">
          <source>This property allows one component to find out what state another component has left the writer in.</source>
          <target state="translated">這個屬性可讓您找出另一個元件中的寫入器狀態的一個元件。</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlLang">
          <source>For example, perhaps one component wants to tell another which language help text to generate.</source>
          <target state="translated">例如，可能是一個元件要通知另產生哪一個語言的說明文字。</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlLang">
          <source>The language information is communicated by writing an <ph id="ph1">`xml:lang`</ph> attribute.</source>
          <target state="translated">語言資訊藉由撰寫溝通<ph id="ph1">`xml:lang`</ph>屬性。</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextWriter.XmlSpace">
          <source>Gets an <ph id="ph1">&lt;see cref="T:System.Xml.XmlSpace" /&gt;</ph> representing the current <ph id="ph2">&lt;see langword="xml:space" /&gt;</ph> scope.</source>
          <target state="translated">取得 <ph id="ph1">&lt;see cref="T:System.Xml.XmlSpace" /&gt;</ph>，表示目前的 <ph id="ph2">&lt;see langword="xml:space" /&gt;</ph> 範圍。</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlSpace">
          <source>An <ph id="ph1">&lt;see langword="XmlSpace" /&gt;</ph> representing the current <ph id="ph2">&lt;see langword="xml:space" /&gt;</ph> scope.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="XmlSpace" /&gt;</ph>，表示目前的 <ph id="ph2">&lt;see langword="xml:space" /&gt;</ph> 範圍。</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlSpace">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> 值</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlSpace">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Meaning</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 意義</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlSpace">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> None</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 無</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlSpace">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This is the default if no <ph id="ph3">&lt;see langword="xml:space" /&gt;</ph> scope exists.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 這是預設值，如果沒有<ph id="ph3">&lt;see langword="xml:space" /&gt;</ph>有範圍。</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlSpace">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Default</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 預設值</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlSpace">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> The current scope is <ph id="ph3">&lt;see langword="xml:space" /&gt;</ph>="default".</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 目前的範圍是<ph id="ph3">&lt;see langword="xml:space" /&gt;</ph>="default"。</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlSpace">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Preserve</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Preserve</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlSpace">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> The current scope is <ph id="ph3">&lt;see langword="xml:space" /&gt;</ph>="preserve".</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 目前的範圍是<ph id="ph3">&lt;see langword="xml:space" /&gt;</ph>="preserve"。</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlSpace">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">從.NET Framework 2.0 開始，我們建議您先建立<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>所使用的執行個體<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>類別，以充分利用新功能。</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlSpace">
          <source>This property allows one component to find out in what state another component has left the writer.</source>
          <target state="translated">這個屬性允許一個元件，以找出哪種狀態另一個元件已離開寫入器。</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlSpace">
          <source>The following example uses the <ph id="ph1">`WriteWhitespace`</ph> method to control how the file is formatted.</source>
          <target state="translated">下列範例會使用<ph id="ph1">`WriteWhitespace`</ph>方法，以控制如何格式化檔案。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>