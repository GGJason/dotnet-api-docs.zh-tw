<Type Name="XmlValidatingReader" FullName="System.Xml.XmlValidatingReader">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5612bf7adc6083558216bf73cad5a86be4b251dc" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36434184" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XmlValidatingReader : System.Xml.XmlReader, System.Xml.IXmlLineInfo, System.Xml.IXmlNamespaceResolver" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlValidatingReader extends System.Xml.XmlReader implements class System.Xml.IXmlLineInfo, class System.Xml.IXmlNamespaceResolver" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlValidatingReader" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlValidatingReader&#xA;Inherits XmlReader&#xA;Implements IXmlLineInfo, IXmlNamespaceResolver" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlValidatingReader : System::Xml::XmlReader, System::Xml::IXmlLineInfo, System::Xml::IXmlNamespaceResolver" />
  <TypeSignature Language="F#" Value="type XmlValidatingReader = class&#xA;    inherit XmlReader&#xA;    interface IXmlLineInfo&#xA;    interface IXmlNamespaceResolver" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xml.XmlReader</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Xml.IXmlLineInfo</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Xml.IXmlNamespaceResolver</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Obsolete("Use XmlReader created by XmlReader.Create() method using appropriate XmlReaderSettings instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a reader that provides document type definition (DTD), XML-Data Reduced (XDR) schema, and XML Schema definition language (XSD) validation.  This class is obsolete. Starting with the .NET Framework 2.0, we recommend that you use the <see cref="T:System.Xml.XmlReaderSettings" /> class and the <see cref="Overload:System.Xml.XmlReader.Create" /> method to create a validating XML reader.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `XmlValidatingReader` 實作<xref:System.Xml.XmlReader>類別，並提供支援資料驗證。 使用<xref:System.Xml.XmlValidatingReader.Schemas%2A>屬性，讓讀取器使用快取的結構描述檔案驗證<xref:System.Xml.Schema.XmlSchemaCollection>。 <xref:System.Xml.XmlValidatingReader.ValidationType%2A>屬性會指定讀取器應該執行哪一種驗證。 將屬性設定為 ValidationType.None 建立非驗證讀取器。  
  
 <xref:System.Xml.XmlValidatingReader> 擲回<xref:System.Xml.XmlException>xml 剖析錯誤。 擲回例外狀況之後讀取器的狀態不是可預測的。 例如，報告的節點類型可能不同於目前節點的實際節點類型。 使用<xref:System.Xml.XmlValidatingReader.ReadState%2A>屬性來檢查讀取器是否處於錯誤狀態。  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 <xref:System.Xml.XmlReader> 參考頁面的＜備註＞一節。  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>這個類別具有繼承要求。完全信任才能繼承自<see langword="XmlValidatingReader" />。</para>
    </block>
    <altmember cref="T:System.Xml.XmlReader" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initializes a new instance of the <see langword="XmlValidatingReader" /> class.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlValidatingReader (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.#ctor(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (reader As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlValidatingReader(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlValidatingReader : System.Xml.XmlReader -&gt; System.Xml.XmlValidatingReader" Usage="new System.Xml.XmlValidatingReader reader" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">The <see langword="XmlReader" /> to read from while validating. The current implementation supports only <see cref="T:System.Xml.XmlTextReader" />.</param>
        <summary>Initializes a new instance of the <see langword="XmlValidatingReader" /> class that validates the content returned from the given <see cref="T:System.Xml.XmlReader" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 <xref:System.Xml.XmlReader> 參考頁面的＜備註＞一節。  
  
 從傳回的所有節點指定`XmlReader`也會傳回從這個驗證讀取器，因此程序中不會遺失任何資訊。 這個讀取器 （例如，預設屬性和實體參考的子系），可加入新的基礎讀取器未傳回的節點。 任何屬性上設定指定`XmlTextReader`也適用於此驗證讀取器。 例如，如果提供的讀取器有 WhitespaceHandling.None 組，此驗證讀取器也會忽略空白字元。  
  
 當外部文件類型定義 (Dtd) 或結構描述所需的驗證，<xref:System.Xml.XmlValidatingReader.XmlResolver%2A>屬性集<xref:System.Xml.XmlResolver>来用來解析外部資源的物件。  
  
   
  
## Examples  
 下列範例會驗證兩份文件。  
  
 [!code-cpp[XmlValidatingReader.Cctor#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlValidatingReader.Cctor/CPP/valid_xsd2.cpp#1)]
 [!code-csharp[XmlValidatingReader.Cctor#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlValidatingReader.Cctor/CS/valid_xsd2.cs#1)]
 [!code-vb[XmlValidatingReader.Cctor#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlValidatingReader.Cctor/VB/valid_xsd2.vb#1)]  
  
 此範例會使用下列的輸入的檔案：  
  
 `notValidXSD.xml`  
  
 [!code-xml[XmlValidatingReader.Cctor#2](~/samples/snippets/xml/VS_Snippets_Data/XmlValidatingReader.Cctor/XML/notvalidxsd.xml#2)]  
  
 `books.xsd`  
  
 [!code-xml[XmlValidatingReader.Cctor#3](~/samples/snippets/xml/VS_Snippets_Data/XmlValidatingReader.Cctor/XML/books.xsd#3)]  
  
 `inlineXSD.xml`  
  
 [!code-xml[XmlValidatingReader.Cctor#4](~/samples/snippets/xml/VS_Snippets_Data/XmlValidatingReader.Cctor/XML/inlinexsd.xml#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The reader specified is not an <see langword="XmlTextReader" />.</exception>
        <altmember cref="T:System.Xml.XmlTextReader" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlValidatingReader (System.IO.Stream xmlFragment, System.Xml.XmlNodeType fragType, System.Xml.XmlParserContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream xmlFragment, valuetype System.Xml.XmlNodeType fragType, class System.Xml.XmlParserContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (xmlFragment As Stream, fragType As XmlNodeType, context As XmlParserContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlValidatingReader(System::IO::Stream ^ xmlFragment, System::Xml::XmlNodeType fragType, System::Xml::XmlParserContext ^ context);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlValidatingReader : System.IO.Stream * System.Xml.XmlNodeType * System.Xml.XmlParserContext -&gt; System.Xml.XmlValidatingReader" Usage="new System.Xml.XmlValidatingReader (xmlFragment, fragType, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="xmlFragment" Type="System.IO.Stream" />
        <Parameter Name="fragType" Type="System.Xml.XmlNodeType" />
        <Parameter Name="context" Type="System.Xml.XmlParserContext" />
      </Parameters>
      <Docs>
        <param name="xmlFragment">The stream containing the XML fragment to parse.</param>
        <param name="fragType">The <see cref="T:System.Xml.XmlNodeType" /> of the XML fragment. This determines what the fragment can contain (see table below).</param>
        <param name="context">The <see cref="T:System.Xml.XmlParserContext" /> in which the XML fragment is to be parsed. This includes the <see cref="T:System.Xml.XmlNameTable" /> to use, encoding, namespace scope, current <see langword="xml:lang" />, and <see langword="xml:space" /> scope.</param>
        <summary>Initializes a new instance of the <see langword="XmlValidatingReader" /> class with the specified values.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 <xref:System.Xml.XmlReader> 參考頁面的＜備註＞一節。  
  
 這個建構函式會將指定的字串剖析為 XML 片段。 如果元素或屬性的 XML 片段，您可以略過的語式正確的 XML 文件根層級的規則。  
  
 下表列出的有效值`fragType`和如何讀取器會剖析每個不同的節點型別。  
  
|XmlNodeType|片段可能包含|  
|-----------------|--------------------------|  
|元素|任何有效的項目內容 （例如，項目、 註解、 處理指示、 cdata、 文字和實體參考的任何組合）。|  
|屬性|屬性 （在引號內的部分） 的值。|  
|文件|內容的整個 XML 文件。這會強制執行文件層級的規則。|  
  
 讀取器會使用下列步驟，以判斷資料流的編碼：  
  
1.  檢查<xref:System.Xml.XmlParserContext.Encoding%2A?displayProperty=nameWithType>屬性來判斷的編碼方式。  
  
2.  如果`Encoding`屬性是`null`，讀取器已檢查的資料流開頭的位元組順序標記。  
  
3.  如果`Encoding`屬性是`null`，並找到沒有位元組順序標記、 讀取器會假設資料流以 utf-8 編碼。  
  
 如果這個讀取器會使用文件類型定義 (DTD) 驗證 (也就是<xref:System.Xml.XmlValidatingReader.ValidationType%2A>設為 ValidationType.DTD 或 ValidationType.Auto)、`XmlParserContext`中指定建構函式必須提供所有必要的 DocumentType 資訊。  
  
> [!NOTE]
>  您不可能使用 DTD 驗證片段。 定義 DTD 需要驗證載入整個文件。  
  
 如果使用 XML 資料精簡 (XDR) 或 XML 結構描述定義語言 (XSD) 結構描述，將會驗證這個讀取器，使用<xref:System.Xml.XmlValidatingReader.Schemas%2A>屬性來指定<xref:System.Xml.Schema.XmlSchemaCollection>其中包含結構描述 (亦即`XmlParserContext`不需要提供DocumentType 資訊）。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">
          <paramref name="fragType" /> is not one of the node types listed in the table below.</exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlValidatingReader (string xmlFragment, System.Xml.XmlNodeType fragType, System.Xml.XmlParserContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string xmlFragment, valuetype System.Xml.XmlNodeType fragType, class System.Xml.XmlParserContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (xmlFragment As String, fragType As XmlNodeType, context As XmlParserContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlValidatingReader(System::String ^ xmlFragment, System::Xml::XmlNodeType fragType, System::Xml::XmlParserContext ^ context);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlValidatingReader : string * System.Xml.XmlNodeType * System.Xml.XmlParserContext -&gt; System.Xml.XmlValidatingReader" Usage="new System.Xml.XmlValidatingReader (xmlFragment, fragType, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="xmlFragment" Type="System.String" />
        <Parameter Name="fragType" Type="System.Xml.XmlNodeType" />
        <Parameter Name="context" Type="System.Xml.XmlParserContext" />
      </Parameters>
      <Docs>
        <param name="xmlFragment">The string containing the XML fragment to parse.</param>
        <param name="fragType">The <see cref="T:System.Xml.XmlNodeType" /> of the XML fragment. This also determines what the fragment string can contain (see table below).</param>
        <param name="context">The <see cref="T:System.Xml.XmlParserContext" /> in which the XML fragment is to be parsed. This includes the <see cref="T:System.Xml.NameTable" /> to use, encoding, namespace scope, current xml:lang, and xml:space scope.</param>
        <summary>Initializes a new instance of the <see langword="XmlValidatingReader" /> class with the specified values.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 <xref:System.Xml.XmlReader> 參考頁面的＜備註＞一節。  
  
 這個建構函式會將指定的字串剖析為 XML 片段。 如果元素或屬性的 XML 片段，您可以略過的語式正確的 XML 文件根層級的規則。 這個建構函式可以處理從傳回的字串<xref:System.Xml.XmlReader.ReadInnerXml%2A>。  
  
 下表列出的有效值`fragType`和如何讀取器會剖析每個不同的節點型別。  
  
|XmlNodeType|片段可能包含|  
|-----------------|--------------------------|  
|元素|任何有效的項目內容 （例如，項目、 註解、 處理指示、 cdata、 文字和實體參考的任何組合）。|  
|屬性|屬性 （在引號內的部分） 的值。|  
|文件|內容的整個 XML 文件。這會強制執行文件層級的規則。|  
  
 如果這個讀取器會驗證使用文件類型定義 (DTD) (也就是<xref:System.Xml.XmlValidatingReader.ValidationType%2A>設為 ValidationType.DTD 或 ValidationType.Auto)、`XmlParserContext`中指定建構函式必須提供所有必要的 DocumentType 資訊。  
  
> [!NOTE]
>  您不可能使用 DTD 驗證片段。 定義 DTD 需要驗證載入整個文件。  
  
 如果使用 XML 資料精簡 (XDR) 或 XML 結構描述定義語言 (XSD) 結構描述，將會驗證這個讀取器，使用<xref:System.Xml.XmlValidatingReader.Schemas%2A>屬性來指定<xref:System.Xml.Schema.XmlSchemaCollection>其中包含結構描述 (`XmlParserContext`不需要提供 DocumentType資訊）。  
  
   
  
## Examples  
 下列範例會讀取 XML 片段。 它會使用`XmlParserContext`及其<xref:System.Xml.XmlNamespaceManager>處理命名空間相符。  
  
 [!code-csharp[Classic WebData XmlParserContext.XmlParserContext Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlParserContext.XmlParserContext Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlParserContext.XmlParserContext Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlParserContext.XmlParserContext Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">
          <paramref name="fragType" /> is not one of the node types listed in the table below.</exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="AttributeCount">
      <MemberSignature Language="C#" Value="public override int AttributeCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AttributeCount" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.AttributeCount" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AttributeCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int AttributeCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.AttributeCount : int" Usage="System.Xml.XmlValidatingReader.AttributeCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of attributes on the current node.</summary>
        <value>目前節點的屬性數目。 這個數目包括預設屬性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 <xref:System.Xml.XmlReader> 參考頁面的＜備註＞一節。  
  
 這個屬性是適用於`Element`， `DocumentType`，和`XmlDeclaration`只節點。 （其他節點型別沒有屬性。）  
  
   
  
## Examples  
 下列範例會讀取根節點上的所有項目。  
  
 [!code-cpp[Classic WebData XmlValidatingReader.AttributeCount Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.AttributeCount Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.AttributeCount Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.AttributeCount Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.AttributeCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.AttributeCount Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="BaseURI">
      <MemberSignature Language="C#" Value="public override string BaseURI { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BaseURI" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.BaseURI" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property BaseURI As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ BaseURI { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseURI : string" Usage="System.Xml.XmlValidatingReader.BaseURI" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the base URI of the current node.</summary>
        <value>目前節點的基底 URI。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 <xref:System.Xml.XmlReader> 參考頁面的＜備註＞一節。  
  
 網路的 XML 文件使用不同的全球資訊網協會 (W3C) 標準包含機制彙總的資料區塊組成，因此包含來自不同位置的節點。 文件類型定義 (DTD) 實體是一個範例，但這並不限於使用 Dtd。 基底 URI 會告訴您這些節點的來源。 如果是要傳回的節點沒有基底 URI （例如，它們從字串中剖析記憶體中），則會傳回 String.Empty。  
  
   
  
## Examples  
 下列範例會剖析檔案，並顯示每個節點的基底 URI。  
  
 [!code-cpp[Classic WebData XmlValidatingReader.BaseURI Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.BaseURI Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.BaseURI Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.BaseURI Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.BaseURI Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.BaseURI Example/VB/source.vb#1)]  
  
 此範例會使用該檔案，`uri.xml`作為輸入。  
  
 [!code-xml[Classic WebData XmlValidatingReader.BaseURI Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.BaseURI Example/XML/source.xml#2)]  
  
 `style.xml`檔案包含 XML 文字`<style>hardcover</style>`。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="CanReadBinaryContent">
      <MemberSignature Language="C#" Value="public override bool CanReadBinaryContent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanReadBinaryContent" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.CanReadBinaryContent" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanReadBinaryContent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanReadBinaryContent { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanReadBinaryContent : bool" Usage="System.Xml.XmlValidatingReader.CanReadBinaryContent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the <see cref="T:System.Xml.XmlValidatingReader" /> implements the binary content read methods.</summary>
        <value>如果實作二進位內容讀取方法，則為 <see langword="true" />，否則為 <see langword="false" />。 <see cref="T:System.Xml.XmlValidatingReader" /> 類別會傳回 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 < 備註 > 一節<xref:System.Xml.XmlReader>參考頁面...  
  
 二進位內容讀取方法包括<xref:System.Xml.XmlValidatingReader.ReadContentAsBase64%2A>， <xref:System.Xml.XmlValidatingReader.ReadContentAsBinHex%2A>， <xref:System.Xml.XmlValidatingReader.ReadElementContentAsBase64%2A>，和<xref:System.Xml.XmlValidatingReader.ReadElementContentAsBinHex%2A>方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="CanResolveEntity">
      <MemberSignature Language="C#" Value="public override bool CanResolveEntity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanResolveEntity" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.CanResolveEntity" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanResolveEntity As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanResolveEntity { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanResolveEntity : bool" Usage="System.Xml.XmlValidatingReader.CanResolveEntity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether this reader can parse and resolve entities.</summary>
        <value>如果讀取器可以剖析和解析實體，則為 <see langword="true" />，否則為 <see langword="false" />。 <see langword="XmlValidatingReader" /> 永遠傳回 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 <xref:System.Xml.XmlReader> 參考頁面的＜備註＞一節。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="xmlValidatingReader.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Changes the <see cref="P:System.Xml.XmlReader.ReadState" /> to Closed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 <xref:System.Xml.XmlReader> 參考頁面的＜備註＞一節。  
  
 這個方法也會釋放讀取時所保留的任何資源。 如果這個讀取器建構使用<xref:System.Xml.XmlTextReader>，這個方法也會呼叫`Close`基礎讀取器上。 如果這個讀取器使用資料流建構，這個方法也會呼叫`Close`在基礎資料流。  
  
 如果`Close`已經過呼叫，會執行任何動作。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Depth">
      <MemberSignature Language="C#" Value="public override int Depth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Depth" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.Depth" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Depth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Depth { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Depth : int" Usage="System.Xml.XmlValidatingReader.Depth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the depth of the current node in the XML document.</summary>
        <value>XML 文件中目前節點的深度。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 <xref:System.Xml.XmlReader> 參考頁面的＜備註＞一節。  
  
   
  
## Examples  
 下列範例會顯示每個節點，包含其深度、 行號和行位置。  
  
 [!code-cpp[IXmlLineInfo#1](~/samples/snippets/cpp/VS_Snippets_Data/IXmlLineInfo/CPP/lineinfo.cpp#1)]
 [!code-csharp[IXmlLineInfo#1](~/samples/snippets/csharp/VS_Snippets_Data/IXmlLineInfo/CS/lineinfo.cs#1)]
 [!code-vb[IXmlLineInfo#1](~/samples/snippets/visualbasic/VS_Snippets_Data/IXmlLineInfo/VB/lineinfo.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.IXmlLineInfo" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding Encoding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Encoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encoding ^ Encoding { System::Text::Encoding ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Encoding : System.Text.Encoding" Usage="System.Xml.XmlValidatingReader.Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the encoding attribute for the document.</summary>
        <value>編碼值。 如果編碼屬性不存在，而且沒有位元組順序標記，則會預設為 UTF-8。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 <xref:System.Xml.XmlReader> 參考頁面的＜備註＞一節。  
  
 讀取任何外部參考 （例如展開文件類型定義 (DTD) 檔案中的實體或讀取結構描述檔案） 時編碼屬性是設定的外部參考的編碼值。 如果在外部參考中，未指定編碼方式，而且沒有位元組順序標記，預設為 utf-8。  
  
 支援所有基礎作業系統所支援的編碼標準。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="EntityHandling">
      <MemberSignature Language="C#" Value="public System.Xml.EntityHandling EntityHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.EntityHandling EntityHandling" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.EntityHandling" />
      <MemberSignature Language="VB.NET" Value="Public Property EntityHandling As EntityHandling" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::EntityHandling EntityHandling { System::Xml::EntityHandling get(); void set(System::Xml::EntityHandling value); };" />
      <MemberSignature Language="F#" Value="member this.EntityHandling : System.Xml.EntityHandling with get, set" Usage="System.Xml.XmlValidatingReader.EntityHandling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.EntityHandling</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that specifies how the reader handles entities.</summary>
        <value>其中一個 <see cref="T:System.Xml.EntityHandling" /> 值。 若未指定 <see langword="EntityHandling" />，則會預設為 EntityHandling.ExpandEntities。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 <xref:System.Xml.XmlReader> 參考頁面的＜備註＞一節。  
  
 這個屬性可以變更，而且下一步 後才會生效<xref:System.Xml.XmlValidatingReader.Read%2A>呼叫。  
  
 當`EntityHandling`設`ExpandCharEntities`，屬性值僅部分會正規化。 讀取器會正規化每個個別的文字節點，獨立於相鄰的實體參考節點的內容。  
  
 為了說明實體之間的差異處理模式，請考量下列 XML:  
  
```xml  
<!DOCTYPE doc [<!ENTITY num "123"]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Invalid value was specified.</exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="EOF">
      <MemberSignature Language="C#" Value="public override bool EOF { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EOF" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.EOF" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property EOF As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool EOF { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.EOF : bool" Usage="System.Xml.XmlValidatingReader.EOF" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the reader is positioned at the end of the stream.</summary>
        <value>如果讀取器定位於資料流結尾，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 <xref:System.Xml.XmlReader> 參考頁面的＜備註＞一節。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gets the value of an attribute.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public override string GetAttribute (int i);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetAttribute(int32 i) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.GetAttribute(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetAttribute (i As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetAttribute(int i);" />
      <MemberSignature Language="F#" Value="override this.GetAttribute : int -&gt; string" Usage="xmlValidatingReader.GetAttribute i" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">The index of the attribute. The index is zero-based. (The first attribute has index 0.)</param>
        <summary>Gets the value of the attribute with the specified index.</summary>
        <returns>The value of the specified attribute.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法不會移動讀取器。  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 <xref:System.Xml.XmlReader> 參考頁面的＜備註＞一節。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="i" /> parameter is less than 0 or greater than or equal to <see cref="P:System.Xml.XmlValidatingReader.AttributeCount" />.</exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public override string GetAttribute (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetAttribute(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.GetAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetAttribute (name As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetAttribute(System::String ^ name);" />
      <MemberSignature Language="F#" Value="override this.GetAttribute : string -&gt; string" Usage="xmlValidatingReader.GetAttribute name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The qualified name of the attribute.</param>
        <summary>Gets the value of the attribute with the specified name.</summary>
        <returns>The value of the specified attribute. If the attribute is not found, <see langword="null" /> is returned.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 <xref:System.Xml.XmlReader> 參考頁面的＜備註＞一節。  
  
 這個方法不會移動讀取器。  
  
 如果讀取器位於`DocumentType` 節點，這個方法可以用來取得的公用和系統常值，例如， `reader.GetAttribute("PUBLIC")`  
  
   
  
## Examples  
 下列範例會取得 ISBN 屬性的值。  
  
 [!code-cpp[Classic WebData XmlValidatingReader.GetAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.GetAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.GetAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.GetAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.GetAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.GetAttribute Example/VB/source.vb#1)]  
  
 此範例會使用該檔案，`attrs.xml`作為輸入。  
  
 [!code-xml[Classic WebData XmlValidatingReader.GetAttribute Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.GetAttribute Example/XML/attrs.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public override string GetAttribute (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetAttribute(string localName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.GetAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetAttribute (localName As String, namespaceURI As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetAttribute(System::String ^ localName, System::String ^ namespaceURI);" />
      <MemberSignature Language="F#" Value="override this.GetAttribute : string * string -&gt; string" Usage="xmlValidatingReader.GetAttribute (localName, namespaceURI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">The local name of the attribute.</param>
        <param name="namespaceURI">The namespace URI of the attribute.</param>
        <summary>Gets the value of the attribute with the specified local name and namespace Uniform Resource Identifier (URI).</summary>
        <returns>The value of the specified attribute. If the attribute is not found, <see langword="null" /> is returned. This method does not move the reader.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 <xref:System.Xml.XmlReader> 參考頁面的＜備註＞一節。  
  
 下列 XML 會包含特定的命名空間中的屬性：  
  
```xml  
<test xmlns:dt="urn:datatypes" dt:type="int"/>  
```  
  
 您可以查閱`dt:type`使用一個引數 （前置詞和本機名稱） 或兩個引數 （區域名稱和命名空間 URI） 的屬性：  
  
```csharp  
String dt = reader.GetAttribute("dt:type");  
String dt2 = reader.GetAttribute("type","urn:datatypes");  
```  
  
 若要查閱`xmlns:dt`屬性，請使用下列引數的其中一個：  
  
```csharp  
String dt3 = reader.GetAttribute("xmlns:dt");  
String dt4 = reader.GetAttribute("dt",http://www.w3.org/2000/xmlns/);  
```  
  
 您也可以使用，取得這項資訊<xref:System.Xml.XmlValidatingReader.Prefix%2A>屬性。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="HasLineInfo">
      <MemberSignature Language="C#" Value="public bool HasLineInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HasLineInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.HasLineInfo" />
      <MemberSignature Language="VB.NET" Value="Public Function HasLineInfo () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool HasLineInfo();" />
      <MemberSignature Language="F#" Value="abstract member HasLineInfo : unit -&gt; bool&#xA;override this.HasLineInfo : unit -&gt; bool" Usage="xmlValidatingReader.HasLineInfo " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlLineInfo.HasLineInfo</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets a value indicating whether the class can return line information.</summary>
        <returns>
          <see langword="true" /> if the class can return line information; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 <xref:System.Xml.XmlReader> 參考頁面的＜備註＞一節。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="HasValue">
      <MemberSignature Language="C#" Value="public override bool HasValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasValue" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.HasValue" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property HasValue As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool HasValue { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasValue : bool" Usage="System.Xml.XmlValidatingReader.HasValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the current node can have a <see cref="P:System.Xml.XmlValidatingReader.Value" /> other than String.Empty.</summary>
        <value>如果讀取器目前所在節點具有 <see langword="Value" />，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 <xref:System.Xml.XmlReader> 參考頁面的＜備註＞一節。  
  
 下表列出具有傳回值的節點類型。  
  
|節點類型|值|  
|---------------|-----------|  
|`Attribute`|屬性的值。|  
|`CDATA`|CDATA 區段的內容。|  
|`Comment`|註解的內容。|  
|`DocumentType`|內部子集。|  
|`ProcessingInstruction`|全部內容 (目標除外)。|  
|`SignificantWhitespace`|混合內容模型中標記間的泛空白字元。|  
|`Text`|文字節點的內容。|  
|`Whitespace`|標記之間的泛空白字元。|  
|`XmlDeclaration`|宣告的內容。|  
  
   
  
## Examples  
 下列範例與各種資料型別讀取 XML，並顯示每個節點。  
  
 [!code-cpp[Classic WebData XmlValidatingReader.HasValue Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.HasValue Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.HasValue Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.HasValue Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.HasValue Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.HasValue Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="IsDefault">
      <MemberSignature Language="C#" Value="public override bool IsDefault { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDefault" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.IsDefault" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsDefault As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsDefault { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDefault : bool" Usage="System.Xml.XmlValidatingReader.IsDefault" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the current node is an attribute that was generated from the default value defined in the document type definition (DTD) or schema.</summary>
        <value>如果目前節點是 DTD 或結構描述中定義的預設值所產生的屬性，則為 <see langword="true" />，如果已經明確設定屬性值，則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性只適用於屬性節點。  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 <xref:System.Xml.XmlReader> 參考頁面的＜備註＞一節。  
  
   
  
## Examples  
 下列範例會顯示屬性的所有節點上的根項目。  
  
 [!code-cpp[XmlValidatingReader.IsDefault#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlValidatingReader.IsDefault/CPP/readdefattr.cpp#1)]
 [!code-csharp[XmlValidatingReader.IsDefault#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlValidatingReader.IsDefault/CS/readdefattr.cs#1)]
 [!code-vb[XmlValidatingReader.IsDefault#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlValidatingReader.IsDefault/VB/readdefattr.vb#1)]  
  
 此範例會使用下列檔案做為輸入。  
  
 `book4.xml`  
  
 [!code-xml[XmlValidatingReader.IsDefault#2](~/samples/snippets/xml/VS_Snippets_Data/XmlValidatingReader.IsDefault/XML/book4.xml#2)]  
  
 `book.dtd`  
  
 [!code-xml[XmlValidatingReader.IsDefault#3](~/samples/snippets/xml/VS_Snippets_Data/XmlValidatingReader.IsDefault/XML/book.dtd#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="IsEmptyElement">
      <MemberSignature Language="C#" Value="public override bool IsEmptyElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmptyElement" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.IsEmptyElement" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsEmptyElement As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsEmptyElement { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEmptyElement : bool" Usage="System.Xml.XmlValidatingReader.IsEmptyElement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the current node is an empty element (for example, <c>&lt;MyElement/&gt;</c>).</summary>
        <value>
          <see langword="true" /> 如果目前的節點是項目 (<see cref="P:System.Xml.XmlValidatingReader.NodeType" />等於<see langword="XmlNodeType.Element" />)，以結束<c> / &gt; </c>，否則<see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 <xref:System.Xml.XmlReader> 參考頁面的＜備註＞一節。  
  
 此屬性可讓您判斷下列各項目之間的差異：  
  
 `<item num="123"/>` (`IsEmptyElement`是`true`)。  
  
 `<item num="123">` (`IsEmptyElement`是`false`，不過是空的項目內容)。  
  
 對應`EndElement`的空白項目不會產生節點。  
  
 如果因為結構描述驗證的項目已加入預設內容`IsEmptyElement`仍會傳回`true`。 它具有在項目具有預設值並無任何影響。 換句話說，`IsEmptyElement`只會報告是否來源文件中的項目有結尾項目標記。  
  
   
  
## Examples  
 下列範例會顯示每個項目的文字內容。  
  
 [!code-cpp[Classic WebData XmlValidatingReader.IsEmptyElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.IsEmptyElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.IsEmptyElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.IsEmptyElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.IsEmptyElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.IsEmptyElement Example/VB/source.vb#1)]  
  
 此範例會使用該檔案，`elems.xml`作為輸入。  
  
 [!code-xml[Classic WebData XmlValidatingReader.IsEmptyElement Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.IsEmptyElement Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="LineNumber">
      <MemberSignature Language="C#" Value="public int LineNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LineNumber" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.LineNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LineNumber As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LineNumber { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LineNumber : int" Usage="System.Xml.XmlValidatingReader.LineNumber" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Xml.IXmlLineInfo.LineNumber</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the current line number.</summary>
        <value>目前的行號。 這個屬性的起始值為 1。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 <xref:System.Xml.XmlReader> 參考頁面的＜備註＞一節。  
  
 這個屬性最常用於錯誤報告，但可以隨時呼叫。 這個屬性的起始值為 1。 結合<xref:System.Xml.XmlValidatingReader.LinePosition%2A>，值為 1，1 表示文件開頭。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="LinePosition">
      <MemberSignature Language="C#" Value="public int LinePosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LinePosition" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.LinePosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LinePosition As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LinePosition { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LinePosition : int" Usage="System.Xml.XmlValidatingReader.LinePosition" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Xml.IXmlLineInfo.LinePosition</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the current line position.</summary>
        <value>目前的行位置。 這個屬性的起始值為 1。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 <xref:System.Xml.XmlReader> 參考頁面的＜備註＞一節。  
  
 這個屬性最常用於錯誤報告，但可以隨時呼叫。 這個屬性的起始值`1`。  
  
 指定的位置是文字的在標記中的第一個字元。  
  
```xml  
<root>  
 abc<tag/>  
</root>  
```  
  
 先前的 XML 文字，第一行上`LinePosition`的`2`對應於字元`r`; 在第二行，`LinePosition`的`5`對應於字元`t`; 在第三行`LinePosition`的`3`對應於字元`r`。  
  
 結合<xref:System.Xml.XmlValidatingReader.LineNumber%2A>，值為`1,1`表示文件的開頭。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="C#" Value="public override string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.LocalName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property LocalName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ LocalName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalName : string" Usage="System.Xml.XmlValidatingReader.LocalName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the local name of the current node.</summary>
        <value>目前節點名稱的前置詞被移除。 例如，<see langword="LocalName" />是<see langword="book" />項目的<c> &lt;bk:book&gt;</c>。  對於沒有名稱的節點類型 (如 <see langword="Text" />、<see langword="Comment" /> 等)，這個屬性會傳回 String.Empty。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 <xref:System.Xml.XmlReader> 參考頁面的＜備註＞一節。  
  
   
  
## Examples  
 下列範例會讀取 XML 片段。  
  
 [!code-csharp[Classic WebData XmlParserContext.XmlParserContext Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlParserContext.XmlParserContext Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlParserContext.XmlParserContext Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlParserContext.XmlParserContext Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="LookupNamespace">
      <MemberSignature Language="C#" Value="public override string LookupNamespace (string prefix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string LookupNamespace(string prefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.LookupNamespace(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function LookupNamespace (prefix As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ LookupNamespace(System::String ^ prefix);" />
      <MemberSignature Language="F#" Value="override this.LookupNamespace : string -&gt; string" Usage="xmlValidatingReader.LookupNamespace prefix" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">The prefix whose namespace Uniform Resource Identifier (URI) you want to resolve. To match the default namespace, pass an empty string.</param>
        <summary>Resolves a namespace prefix in the current element's scope.</summary>
        <returns>The namespace URI to which the prefix maps or <see langword="null" /> if no matching prefix is found.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 < 備註 > 一節<xref:System.Xml.XmlReader>參考頁面...  
  
 在下列 XML 字串中，如果讀取器位於`href`屬性，前置詞`a`解析藉由呼叫`reader.LookupNamespace("a", true)`。 傳回的字串是`urn:456`。  
  
```xml  
<root xmlns:a="urn:456">  
 <item>  
 <ref href="a:b"/>  
 </item>  
</root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveToAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Moves to the specified attribute.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveToAttribute">
      <MemberSignature Language="C#" Value="public override void MoveToAttribute (int i);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void MoveToAttribute(int32 i) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.MoveToAttribute(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub MoveToAttribute (i As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void MoveToAttribute(int i);" />
      <MemberSignature Language="F#" Value="override this.MoveToAttribute : int -&gt; unit" Usage="xmlValidatingReader.MoveToAttribute i" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">The index of the attribute.</param>
        <summary>Moves to the attribute with the specified index.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 <xref:System.Xml.XmlReader> 參考頁面的＜備註＞一節。  
  
   
  
## Examples  
 下列範例會讀取根節點上的所有項目。  
  
 [!code-cpp[Classic WebData XmlValidatingReader.AttributeCount Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.AttributeCount Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.AttributeCount Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.AttributeCount Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.AttributeCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.AttributeCount Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="i" /> parameter is less than 0 or greater than or equal to <see cref="P:System.Xml.XmlReader.AttributeCount" />.</exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="MoveToAttribute">
      <MemberSignature Language="C#" Value="public override bool MoveToAttribute (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToAttribute(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.MoveToAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MoveToAttribute (name As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveToAttribute(System::String ^ name);" />
      <MemberSignature Language="F#" Value="override this.MoveToAttribute : string -&gt; bool" Usage="xmlValidatingReader.MoveToAttribute name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The qualified name of the attribute.</param>
        <summary>Moves to the attribute with the specified name.</summary>
        <returns>
          <see langword="true" /> if the attribute is found; otherwise, <see langword="false" />. If <see langword="false" />, the position of the reader does not change.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 <xref:System.Xml.XmlReader> 參考頁面的＜備註＞一節。  
  
 呼叫這個方法後, <xref:System.Xml.XmlValidatingReader.Name%2A>， <xref:System.Xml.XmlValidatingReader.NamespaceURI%2A>，和<xref:System.Xml.XmlValidatingReader.Prefix%2A>屬性會反映該屬性的屬性。  
  
   
  
## Examples  
 下列範例會讀取具有文字和實體參考節點的屬性。  
  
 [!code-cpp[Classic WebData XmlValidatingReader.MoveToAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.MoveToAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.MoveToAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.MoveToAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.MoveToAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.MoveToAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="MoveToAttribute">
      <MemberSignature Language="C#" Value="public override bool MoveToAttribute (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToAttribute(string localName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.MoveToAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MoveToAttribute (localName As String, namespaceURI As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveToAttribute(System::String ^ localName, System::String ^ namespaceURI);" />
      <MemberSignature Language="F#" Value="override this.MoveToAttribute : string * string -&gt; bool" Usage="xmlValidatingReader.MoveToAttribute (localName, namespaceURI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">The local name of the attribute.</param>
        <param name="namespaceURI">The namespace URI of the attribute.</param>
        <summary>Moves to the attribute with the specified local name and namespace Uniform Resource Identifier (URI).</summary>
        <returns>
          <see langword="true" /> if the attribute is found; otherwise, <see langword="false" />. If <see langword="false" />, the position of the reader does not change.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 <xref:System.Xml.XmlReader> 參考頁面的＜備註＞一節。  
  
 呼叫這個方法後, <xref:System.Xml.XmlValidatingReader.Name%2A>， <xref:System.Xml.XmlValidatingReader.NamespaceURI%2A>，和<xref:System.Xml.XmlValidatingReader.Prefix%2A>屬性會反映該屬性的屬性。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="MoveToElement">
      <MemberSignature Language="C#" Value="public override bool MoveToElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.MoveToElement" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MoveToElement () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveToElement();" />
      <MemberSignature Language="F#" Value="override this.MoveToElement : unit -&gt; bool" Usage="xmlValidatingReader.MoveToElement " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Moves to the element that contains the current attribute node.</summary>
        <returns>
          <see langword="true" /> if the reader is positioned on an attribute (the reader moves to the element that owns the attribute); <see langword="false" /> if the reader is not positioned on an attribute (the position of the reader does not change).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 <xref:System.Xml.XmlReader> 參考頁面的＜備註＞一節。  
  
 使用此方法傳回的項目之後瀏覽它的屬性。 這個方法會將讀取器移至下列節點類型的其中一個： `Element`， `DocumentType`，或`XmlDeclaration`。  
  
   
  
## Examples  
 下列範例會讀取根節點上的所有項目。  
  
 [!code-cpp[Classic WebData XmlValidatingReader.AttributeCount Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.AttributeCount Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.AttributeCount Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.AttributeCount Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.AttributeCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.AttributeCount Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="MoveToFirstAttribute">
      <MemberSignature Language="C#" Value="public override bool MoveToFirstAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToFirstAttribute() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.MoveToFirstAttribute" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MoveToFirstAttribute () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveToFirstAttribute();" />
      <MemberSignature Language="F#" Value="override this.MoveToFirstAttribute : unit -&gt; bool" Usage="xmlValidatingReader.MoveToFirstAttribute " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Moves to the first attribute.</summary>
        <returns>
          <see langword="true" /> if an attribute exists (the reader moves to the first attribute); otherwise, <see langword="false" /> (the position of the reader does not change).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 <xref:System.Xml.XmlReader> 參考頁面的＜備註＞一節。  
  
   
  
## Examples  
 下列範例會讀取 XML 片段。  
  
 [!code-cpp[Classic WebData XmlValidatingReader.MoveToFirstAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.MoveToFirstAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.MoveToFirstAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.MoveToFirstAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.MoveToFirstAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.MoveToFirstAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="MoveToNextAttribute">
      <MemberSignature Language="C#" Value="public override bool MoveToNextAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToNextAttribute() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.MoveToNextAttribute" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MoveToNextAttribute () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveToNextAttribute();" />
      <MemberSignature Language="F#" Value="override this.MoveToNextAttribute : unit -&gt; bool" Usage="xmlValidatingReader.MoveToNextAttribute " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Moves to the next attribute.</summary>
        <returns>
          <see langword="true" /> if there is a next attribute; <see langword="false" /> if there are no more attributes.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 <xref:System.Xml.XmlReader> 參考頁面的＜備註＞一節。  
  
 如果目前的節點是項目節點，此方法相當於<xref:System.Xml.XmlValidatingReader.MoveToFirstAttribute%2A>。 如果`MoveToNextAttribute`傳回`true`，讀取器移至下一個屬性; 否則讀取器的位置不會變更。  
  
   
  
## Examples  
 下列範例會讀取 XML 片段。  
  
 [!code-cpp[Classic WebData XmlValidatingReader.MoveToFirstAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.MoveToFirstAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.MoveToFirstAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.MoveToFirstAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.MoveToFirstAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.MoveToFirstAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Xml.XmlValidatingReader.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the qualified name of the current node.</summary>
        <value>目前節點的限定名稱。 例如，<see langword="Name" />是<see langword="bk:book" />項目的<c> &lt;bk:book&gt;</c>。  傳回的名稱需視節點的 <see cref="P:System.Xml.XmlValidatingReader.NodeType" /> 而定： 下列節點類型會傳回所列的值。 其他所有節點類型都會傳回空字串。  
  
 <list type="table"><listheader><term> 節點型別</term><description>名稱</description></listheader><item><term><see langword="Attribute" /></term><description>屬性的名稱。</description></item><item><term><see langword="DocumentType" /></term><description> 文件型別名稱。</description></item><item><term><see langword="Element" /></term><description> 標記名稱。</description></item><item><term><see langword="EntityReference" /></term><description> 參考的實體名稱。</description></item><item><term><see langword="ProcessingInstruction" /></term><description> 處理指示的目標。</description></item><item><term><see langword="XmlDeclaration" /></term><description> 常值字串<see langword="xml" />。  </description></item></list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 <xref:System.Xml.XmlReader> 參考頁面的＜備註＞一節。  
  
   
  
## Examples  
 下列範例會讀取 XML 檔案，並顯示每個節點。  
  
 [!code-cpp[Classic WebData XmlValidatingReader.Name Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.Name Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.Name Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/VB/source.vb#1)]  
  
 此範例會使用該檔案，`items.xml`作為輸入。  
  
 [!code-xml[Classic WebData XmlValidatingReader.Name Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Namespaces">
      <MemberSignature Language="C#" Value="public bool Namespaces { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Namespaces" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.Namespaces" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespaces As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Namespaces { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Namespaces : bool with get, set" Usage="System.Xml.XmlValidatingReader.Namespaces" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether to do namespace support.</summary>
        <value>如果支援命名空間，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 <xref:System.Xml.XmlReader> 參考頁面的＜備註＞一節。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="NamespaceURI">
      <MemberSignature Language="C#" Value="public override string NamespaceURI { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NamespaceURI" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.NamespaceURI" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property NamespaceURI As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ NamespaceURI { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NamespaceURI : string" Usage="System.Xml.XmlValidatingReader.NamespaceURI" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the namespace Uniform Resource Identifier (URI) (as defined in the World Wide Web Consortium (W3C) Namespace specification) of the node on which the reader is positioned.</summary>
        <value>目前節點的命名空間 URI，否則為空字串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性是適用於`Element`和`Attribute`只節點。  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 <xref:System.Xml.XmlReader> 參考頁面的＜備註＞一節。  
  
   
  
## Examples  
 下列範例會讀取 XML 片段。  
  
 [!code-csharp[Classic WebData XmlParserContext.XmlParserContext Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlParserContext.XmlParserContext Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlParserContext.XmlParserContext Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlParserContext.XmlParserContext Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="NameTable">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNameTable NameTable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlNameTable NameTable" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.NameTable" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property NameTable As XmlNameTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlNameTable ^ NameTable { System::Xml::XmlNameTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NameTable : System.Xml.XmlNameTable" Usage="System.Xml.XmlValidatingReader.NameTable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNameTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:System.Xml.XmlNameTable" /> associated with this implementation.</summary>
        <value>
          <see langword="XmlNameTable" />，可讓您取得節點內字串的擷取版本。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 <xref:System.Xml.XmlReader> 參考頁面的＜備註＞一節。  
  
 從傳回的所有節點和屬性名稱<xref:System.Xml.XmlValidatingReader>使用不可部分完成`NameTable`。 相同的名稱傳回多次時 (例如， `Customer`)，相同`String`就會傳回物件，該名稱。 這可讓您撰寫有效率的程式碼，進行物件比較這些字串，而不是高度耗費資源的字串比較。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlNameTable" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNodeType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlNodeType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property NodeType As XmlNodeType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlNodeType NodeType { System::Xml::XmlNodeType get(); };" />
      <MemberSignature Language="F#" Value="member this.NodeType : System.Xml.XmlNodeType" Usage="System.Xml.XmlValidatingReader.NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the type of the current node.</summary>
        <value>
          <see cref="T:System.Xml.XmlNodeType" /> 值之一，代表目前節點的類型。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 <xref:System.Xml.XmlReader> 參考頁面的＜備註＞一節。  
  
 這個屬性永遠不會傳回下列`XmlNodeType`類型： `Document`， `DocumentFragment`， `Entity`，或`Notation`。  
  
   
  
## Examples  
 下列範例會讀取 XML 檔案，並顯示每個節點。  
  
 [!code-cpp[Classic WebData XmlValidatingReader.Name Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.Name Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.Name Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/VB/source.vb#1)]  
  
 此範例會使用該檔案，`items.xml`作為輸入。  
  
 [!code-xml[Classic WebData XmlValidatingReader.Name Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Prefix">
      <MemberSignature Language="C#" Value="public override string Prefix { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Prefix" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.Prefix" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Prefix As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Prefix { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Prefix : string" Usage="System.Xml.XmlValidatingReader.Prefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the namespace prefix associated with the current node.</summary>
        <value>與目前節點相關聯的命名空間前置詞。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 <xref:System.Xml.XmlReader> 參考頁面的＜備註＞一節。  
  
   
  
## Examples  
 下列範例會讀取 XML 片段。  
  
 [!code-csharp[Classic WebData XmlParserContext.XmlParserContext Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlParserContext.XmlParserContext Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlParserContext.XmlParserContext Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlParserContext.XmlParserContext Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="QuoteChar">
      <MemberSignature Language="C#" Value="public override char QuoteChar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char QuoteChar" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.QuoteChar" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property QuoteChar As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property char QuoteChar { char get(); };" />
      <MemberSignature Language="F#" Value="member this.QuoteChar : char" Usage="System.Xml.XmlValidatingReader.QuoteChar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the quotation mark character used to enclose the value of an attribute node.</summary>
        <value>用來括住屬性節點值的引號字元 (" 或 ')。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性只適用於屬性節點。  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 <xref:System.Xml.XmlReader> 參考頁面的＜備註＞一節。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override bool Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.Read" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Read () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Read();" />
      <MemberSignature Language="F#" Value="override this.Read : unit -&gt; bool" Usage="xmlValidatingReader.Read " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads the next node from the stream.</summary>
        <returns>
          <see langword="true" /> if the next node was read successfully; <see langword="false" /> if there are no more nodes to read.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 <xref:System.Xml.XmlReader> 參考頁面的＜備註＞一節。  
  
 當讀取器第一次建立並初始化時，沒有任何可用資訊。 您必須呼叫`Read`讀取的第一個節點。  
  
   
  
## Examples  
 下列範例會讀取 XML 檔案，並顯示每個節點。  
  
 [!code-cpp[Classic WebData XmlValidatingReader.Name Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.Name Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.Name Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/VB/source.vb#1)]  
  
 此範例會使用該檔案，`items.xml`作為輸入。  
  
 [!code-xml[Classic WebData XmlValidatingReader.Name Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ReadAttributeValue">
      <MemberSignature Language="C#" Value="public override bool ReadAttributeValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool ReadAttributeValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.ReadAttributeValue" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadAttributeValue () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool ReadAttributeValue();" />
      <MemberSignature Language="F#" Value="override this.ReadAttributeValue : unit -&gt; bool" Usage="xmlValidatingReader.ReadAttributeValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Parses the attribute value into one or more <see langword="Text" />, <see langword="EntityReference" />, or <see langword="EndEntity" /> nodes.</summary>
        <returns>
          <see langword="true" /> if there are nodes to return.  
  
 <see langword="false" /> if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.  An empty attribute, such as, <c>misc=""</c>, returns <see langword="true" /> with a single node with a value of String.Empty.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 <xref:System.Xml.XmlReader> 參考頁面的＜備註＞一節。  
  
 使用這個方法之後呼叫<xref:System.Xml.XmlValidatingReader.MoveToAttribute%2A>閱讀組成屬性值的文字或實體參考節點。 <xref:System.Xml.XmlReader.Depth%2A>的屬性值節點是一個加上該屬性節點的深度。 `Depth`遞增和遞減 1 當您逐步執行和跳離一般實體參考。  
  
 例如，假設您有下列的 XML: `<test name="a &b; c"/>`  
  
 其中實體`b`定義文件類型定義 (DTD) 中，如下所示： `<!ENTITY b "123">`  
  
 如果<xref:System.Xml.XmlValidatingReader.EntityHandling%2A>設`ExpandCharEntities`，下列 C# 程式碼傳回屬性值做為兩個文字節點和一個實體參考節點：  
  
```csharp  
reader.MoveToAttribute("name");  
  while (reader.ReadAttributeValue())  
  {  
  if (reader.NodeType == XmlNodeType.Text)  
  {  
  // at this point reader.Value == "a " or " c"  
  }  
  else if (reader.NodeType == XmlNodeType.EntityReference)  
  {  
  // at this point reader.Name == "b"  
  reader.ResolveEntity();  
  while (reader.ReadAttributeValue() &&  
  reader.NodeType != XmlNodeType.EndEntity)  
  {  
  // reader.Value == "123"  
  }  
  }  
    }  
```  
  
   
  
## Examples  
 下列範例會讀取具有文字和實體參考節點的屬性。  
  
 [!code-cpp[Classic WebData XmlValidatingReader.MoveToAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.MoveToAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.MoveToAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.MoveToAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.MoveToAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.MoveToAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsBase64">
      <MemberSignature Language="C#" Value="public override int ReadContentAsBase64 (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ReadContentAsBase64(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadContentAsBase64 (buffer As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int ReadContentAsBase64(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.ReadContentAsBase64 : byte[] * int * int -&gt; int" Usage="xmlValidatingReader.ReadContentAsBase64 (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">The buffer into which to copy the resulting text. This value cannot be <see langword="null" />.</param>
        <param name="index">The offset into the buffer where to start copying the result.</param>
        <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
        <summary>Reads the content and returns the Base64 decoded binary bytes.</summary>
        <returns>The number of bytes written to the buffer.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 < 備註 > 一節<xref:System.Xml.XmlReader>參考頁面...  
  
 這個方法內容串流、 解碼 Base64 內容，並傳回解碼的二進位位元組 （例如，內嵌 Base64 編碼的 GIF 影像） 到緩衝區。 這個方法可以連續呼叫來讀取內嵌文字的大量資料流。 如需詳細資訊，請參閱 RFC 1521"MIME （多用途網際網路郵件延伸標準） 部分一個： 機制來指定，並描述網際網路訊息內文的格式 」。 您可以取得從 Rfc[註解的網站要求](https://www.rfc-editor.org)。  
  
> [!NOTE]
>  您不應該存取的任何呼叫之間的讀取器屬性<xref:System.Xml.XmlValidatingReader.ReadContentAsBase64%2A>方法，直到該方法會傳回值為 0。  
  
 此方法具有下列行為：  
  
-   <xref:System.Xml.XmlValidatingReader.ReadContentAsBase64%2A> 當它到達它所操作的位元組資料流結尾傳回 0 的值。 讀取器第一個非內容節點上。  
  
-   如果您尋求更少，或的確實數目，也會保留在資料流讀取位元組會保留在其目前位置。  
  
-   <xref:System.Xml.XmlValidatingReader.ReadContentAsBase64%2A> 不支援下列的 XML 節點類型： 項目、 XmlDeclaration，無、 文件、 DocumentType、 標記法、 實體和 DocumentFragment。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> value is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Xml.XmlValidatingReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" /> is not supported on the current node.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlValidatingReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="T:System.Xml.XmlNodeType" />
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsBinHex">
      <MemberSignature Language="C#" Value="public override int ReadContentAsBinHex (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ReadContentAsBinHex(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadContentAsBinHex (buffer As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int ReadContentAsBinHex(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.ReadContentAsBinHex : byte[] * int * int -&gt; int" Usage="xmlValidatingReader.ReadContentAsBinHex (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">The buffer into which to copy the resulting text. This value cannot be <see langword="null" />.</param>
        <param name="index">The offset into the buffer where to start copying the result.</param>
        <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
        <summary>Reads the content and returns the BinHex decoded binary bytes.</summary>
        <returns>The number of bytes written to the buffer.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 < 備註 > 一節<xref:System.Xml.XmlReader>參考頁面...  
  
 這個方法內容串流、 解碼 BinHex 內容，並傳回解碼的二進位位元組 （例如，內嵌 BinHex 編碼 GIF 影像） 到緩衝區。 這個方法可以連續呼叫來讀取內嵌文字的大量資料流。  
  
> [!NOTE]
>  您不應該存取的任何呼叫之間的讀取器屬性<xref:System.Xml.XmlValidatingReader.ReadContentAsBinHex%2A>方法，直到該方法會傳回值為 0。  
  
 此方法具有下列行為：  
  
-   <xref:System.Xml.XmlValidatingReader.ReadContentAsBinHex%2A> 當它到達它所操作的位元組資料流結尾傳回 0 的值。 讀取器第一個非內容節點上。  
  
-   如果您尋求更少，或的確實數目，也會保留在資料流讀取位元組會保留在其目前位置。  
  
-   <xref:System.Xml.XmlValidatingReader.ReadContentAsBinHex%2A> 不支援下列的 XML 節點類型： 項目、 XmlDeclaration，無、 文件、 DocumentType、 標記法、 實體和 DocumentFragment。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> value is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Xml.XmlValidatingReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" /> is not supported on the current node.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
        <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XmlValidatingReader" /> implementation does not support this method.</exception>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlValidatingReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="T:System.Xml.XmlNodeType" />
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsBase64">
      <MemberSignature Language="C#" Value="public override int ReadElementContentAsBase64 (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ReadElementContentAsBase64(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadElementContentAsBase64 (buffer As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int ReadElementContentAsBase64(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.ReadElementContentAsBase64 : byte[] * int * int -&gt; int" Usage="xmlValidatingReader.ReadElementContentAsBase64 (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">The buffer into which to copy the resulting text. This value cannot be <see langword="null" />.</param>
        <param name="index">The offset into the buffer where to start copying the result.</param>
        <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
        <summary>Reads the element and decodes the Base64 content.</summary>
        <returns>The number of bytes written to the buffer.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 <xref:System.Xml.XmlReader> 參考頁面的＜備註＞一節。  
  
 這個方法讀取的項目內容中，使用 Base64 編碼方式，將其解碼，並傳回已解碼的二進位位元組 （例如，內嵌 Base64 編碼的 GIF 影像） 到緩衝區。 如需詳細資訊，請參閱 RFC 1521"MIME （多用途網際網路郵件延伸標準） 部分一個： 機制來指定，並描述網際網路訊息內文的格式 」。 您可以取得從 Rfc[註解的網站要求](https://www.rfc-editor.org)。  
  
 這個方法可以讀取只有簡單內容的項目。 項目可以包含文字、 泛空白字元、 顯著泛空白字元、 CDATA 區段、 註解，以及處理指示。 它也可以包含實體參考，會自動展開。 項目不能有子項目。  
  
 這個方法是非常類似於<xref:System.Xml.XmlValidatingReader.ReadContentAsBase64%2A>只能在元素節點類型上呼叫方法，只是它。  
  
 如果`count`值高於在文件中的位元組數目，或如果是，文件中的位元組數目等於<xref:System.Xml.XmlValidatingReader>讀取文件中所有剩餘的位元組，並傳回讀取的位元組數目。 下一步<xref:System.Xml.XmlValidatingReader>方法呼叫會傳回零，並將讀取器移至節點下<xref:System.Xml.XmlNodeType.EndElement>。  
  
 如果您呼叫<xref:System.Xml.XmlValidatingReader.Read%2A>已耗用所有的項目內容之前，讀取器可能如同所耗用的第一個內容，然後<xref:System.Xml.XmlValidatingReader.Read%2A>呼叫方法。 這表示讀取器會讀取所有文字，直到遇到結束項目。 它會讀取結束標記節點、 讀取的下一個節點，然後將其自身的下一步的後續節點上。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> value is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The current node is not an element node.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
        <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XmlValidatingReader" /> implementation does not support this method.</exception>
        <exception cref="T:System.Xml.XmlException">The element contains mixed-content.</exception>
        <exception cref="T:System.FormatException">The content cannot be converted to the requested type.</exception>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlValidatingReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsBinHex">
      <MemberSignature Language="C#" Value="public override int ReadElementContentAsBinHex (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ReadElementContentAsBinHex(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadElementContentAsBinHex (buffer As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int ReadElementContentAsBinHex(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.ReadElementContentAsBinHex : byte[] * int * int -&gt; int" Usage="xmlValidatingReader.ReadElementContentAsBinHex (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">The buffer into which to copy the resulting text. This value cannot be <see langword="null" />.</param>
        <param name="index">The offset into the buffer where to start copying the result.</param>
        <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
        <summary>Reads the element and decodes the BinHex content.</summary>
        <returns>The number of bytes written to the buffer.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 <xref:System.Xml.XmlReader> 參考頁面的＜備註＞一節。  
  
 這個方法讀取項目內容、 使用 BinHex 編碼方式，將其解碼，並傳回解碼的二進位位元組 （例如，內嵌 BinHex 編碼 GIF 影像） 到緩衝區。  
  
 這個方法可以讀取只有簡單內容的項目。 項目可以包含文字、 泛空白字元、 顯著泛空白字元、 CDATA 區段、 註解，以及處理指示。 它也可以包含實體參考，會自動展開。 項目不能有子項目。  
  
 這個方法是非常類似於<xref:System.Xml.XmlValidatingReader.ReadContentAsBinHex%2A>只能在元素節點類型上呼叫方法，只是它。  
  
 如果`count`值高於在文件中的位元組數目，或如果是，文件中的位元組數目等於<xref:System.Xml.XmlValidatingReader>讀取文件中所有剩餘的位元組，並傳回讀取的位元組數目。 下一步<xref:System.Xml.XmlValidatingReader>方法呼叫會傳回零，並將讀取器移至節點下<xref:System.Xml.XmlNodeType.EndElement>。  
  
 如果您呼叫<xref:System.Xml.XmlValidatingReader.Read%2A>已耗用所有的項目內容之前，讀取器可能如同所耗用的第一個內容，然後<xref:System.Xml.XmlValidatingReader.Read%2A>呼叫方法。 這表示讀取器會讀取所有文字，直到遇到結束項目。 它會讀取結束標記節點、 讀取的下一個節點，然後將其自身的下一步的後續節點上。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> value is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The current node is not an element node.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
        <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XmlValidatingReader" /> implementation does not support this method.</exception>
        <exception cref="T:System.Xml.XmlException">The element contains mixed-content.</exception>
        <exception cref="T:System.FormatException">The content cannot be converted to the requested type.</exception>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlValidatingReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Reader">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader Reader { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlReader Reader" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.Reader" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Reader As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlReader ^ Reader { System::Xml::XmlReader ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Reader : System.Xml.XmlReader" Usage="System.Xml.XmlValidatingReader.Reader" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:System.Xml.XmlReader" /> used to construct this <see langword="XmlValidatingReader" />.</summary>
        <value>建構函式中指定的 <see langword="XmlReader" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 <xref:System.Xml.XmlReader> 參考頁面的＜備註＞一節。  
  
 這個屬性允許使用者存取所提供的讀取器的特定屬性。 它會傳回具型別的`XmlReader`。 使用者應該查詢的類型轉換之前。  
  
 傳回讀取器 （例如，呼叫其中一個讀取的方法） 的狀態變更可能會導致無法預期的結果。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ReadState">
      <MemberSignature Language="C#" Value="public override System.Xml.ReadState ReadState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.ReadState ReadState" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.ReadState" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReadState As ReadState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::ReadState ReadState { System::Xml::ReadState get(); };" />
      <MemberSignature Language="F#" Value="member this.ReadState : System.Xml.ReadState" Usage="System.Xml.XmlValidatingReader.ReadState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.ReadState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the state of the reader.</summary>
        <value>其中一個 <see cref="T:System.Xml.ReadState" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 <xref:System.Xml.XmlReader> 參考頁面的＜備註＞一節。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ReadString">
      <MemberSignature Language="C#" Value="public override string ReadString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ReadString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.ReadString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ReadString();" />
      <MemberSignature Language="F#" Value="override this.ReadString : unit -&gt; string" Usage="xmlValidatingReader.ReadString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads the contents of an element or text node as a string.</summary>
        <returns>The contents of the element or text node. This can be an empty string if the reader is positioned on something other than an element or text node, or if there is no more text content to return in the current context.  
  
 <block subset="none" type="note"><para> The text node can be either an element or an attribute text node.  </para></block></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 <xref:System.Xml.XmlReader> 參考頁面的＜備註＞一節。  
  
 如果位於項目，`ReadString`串連所有文字、 顯著泛空白字元，空白字元及 CDATA 區段節點型別，並傳回串連的項目內容資料。 讀取器停止時遇到任何標記，包括註解和處理指示。 這可能會發生於混合內容模型中，或是讀取項目結束標記時。  
  
 如果文字節點上，位於`ReadString`執行相同的串連文字節點從至指定的項目結束標記。 如果讀取器定位於屬性文字節點上，則 `ReadString` 具有相同的功能，就像讀取器定位於項目開始標記上一樣。 它會傳回所有串連的項目文字節點。  
  
 <xref:System.Xml.XmlValidatingReader.EntityHandling%2A>屬性會決定如何`ReadString`的運作方式如下：  
  
|值|描述|  
|-----------|-----------------|  
|ExpandEntities|傳回展開的字元和一般實體。 這是預設值。|  
|ExpandCharEntities|傳回的文字內容，但不是包括一般實體參考。 這表示一般項目會導致 ReadString 停止。 您必須呼叫`Read`進入實體參考。|  
  
   
  
## Examples  
 下列範例會顯示每個元素的文字內容。  
  
 [!code-cpp[Classic WebData XmlValidatingReader.IsEmptyElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.IsEmptyElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.IsEmptyElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.IsEmptyElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.IsEmptyElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.IsEmptyElement Example/VB/source.vb#1)]  
  
 此範例會使用該檔案，`elems.xml`作為輸入。  
  
 [!code-xml[Classic WebData XmlValidatingReader.IsEmptyElement Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.IsEmptyElement Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ReadTypedValue">
      <MemberSignature Language="C#" Value="public object ReadTypedValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ReadTypedValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.ReadTypedValue" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadTypedValue () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ReadTypedValue();" />
      <MemberSignature Language="F#" Value="member this.ReadTypedValue : unit -&gt; obj" Usage="xmlValidatingReader.ReadTypedValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the common language runtime type for the specified XML Schema definition language (XSD) type.</summary>
        <returns>The common language runtime type for the specified XML Schema type.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 <xref:System.Xml.XmlReader> 參考頁面的＜備註＞一節。  
  
 例如，如果結構描述型別定義為`xsd:int`，執行階段型別`int32`傳回物件。 這可以使用測試<xref:System.Object.GetType%2A>方法，並轉換據此。 <xref:System.Xml.XmlValidatingReader.ReadTypedValue%2A>方法一律會傳回衍生自型別<xref:System.Object>類別。 永遠不會傳回<xref:System.Object>型別。  
  
 如果讀取器定位於屬性上，這個方法會傳回執行階段型別的物件，但不會變更讀取器的位置。 如果讀取器位於項目，`ReadTypedValue`讀取任何 CDATA、 文字、 泛空白字元、 顯著的泛空白字元和註解節點會傳回執行階段型別的物件，並將讀取器放置在結束標記。 並沒有直接對應，例如任何型別`NMTOKENS`，會以字串形式傳回。  
  
> [!NOTE]
>  如果<xref:System.Xml.XmlValidatingReader.ValidationType%2A>已設定 ValidationType.None，資料類型資訊不會提供從結構描述或文件類型定義 (Dtd)。  
  
> [!CAUTION]
>  在呼叫<xref:System.Xml.XmlValidatingReader.Close%2A>，`ReadTypedValue`會傳回`null`。  
  
   
  
## Examples  
 下列範例顯示 XML 文件中的每個元素的類型資訊。  
  
 [!code-cpp[XmlValidatingReader.SchemaType#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlValidatingReader.SchemaType/CPP/schematype.cpp#1)]
 [!code-csharp[XmlValidatingReader.SchemaType#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlValidatingReader.SchemaType/CS/schematype.cs#1)]
 [!code-vb[XmlValidatingReader.SchemaType#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlValidatingReader.SchemaType/VB/schematype.vb#1)]  
  
 此範例會使用下列的輸入的檔。  
  
 `booksSchema.xml`  
  
 [!code-xml[XmlValidatingReader.SchemaType#2](~/samples/snippets/xml/VS_Snippets_Data/XmlValidatingReader.SchemaType/XML/booksschema.xml#2)]  
  
 `books.xsd`  
  
 [!code-xml[XmlValidatingReader.SchemaType#3](~/samples/snippets/xml/VS_Snippets_Data/XmlValidatingReader.SchemaType/XML/books.xsd#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ResolveEntity">
      <MemberSignature Language="C#" Value="public override void ResolveEntity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ResolveEntity() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.ResolveEntity" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ResolveEntity ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ResolveEntity();" />
      <MemberSignature Language="F#" Value="override this.ResolveEntity : unit -&gt; unit" Usage="xmlValidatingReader.ResolveEntity " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resolves the entity reference for <see langword="EntityReference" /> nodes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 <xref:System.Xml.XmlReader> 參考頁面的＜備註＞一節。  
  
 如果讀取器位於`EntityReference`節點 (`XmlNodeType.EntityReference`)，如果<xref:System.Xml.XmlValidatingReader.Read%2A>呼叫此方法中，實體取代文字會剖析之後呼叫。 實體取代文字完成後，`EndEntity`關閉實體參考範圍，則會傳回節點。  
  
> [!NOTE]
>  之後呼叫這個方法，如果實體是一部分的屬性值，您必須呼叫<xref:System.Xml.XmlValidatingReader.ReadAttributeValue%2A>逐步執行至實體。  
  
   
  
## Examples  
 下列範例會使用`ResolveEntity`展開一般實體。  
  
 [!code-cpp[Classic WebData XmlValidatingReader.ResolveEntity Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.ResolveEntity Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.ResolveEntity Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.ResolveEntity Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.ResolveEntity Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.ResolveEntity Example/VB/source.vb#1)]  
  
 此範例會使用該檔案，`book1.xml`作為輸入。  
  
 [!code-xml[Classic WebData XmlValidatingReader.ResolveEntity Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.ResolveEntity Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The reader is not positioned on an <see langword="EntityReference" /> node.</exception>
        <altmember cref="T:System.Xml.EntityHandling" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Schemas">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaCollection Schemas { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaCollection Schemas" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.Schemas" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Schemas As XmlSchemaCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaCollection ^ Schemas { System::Xml::Schema::XmlSchemaCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Schemas : System.Xml.Schema.XmlSchemaCollection" Usage="System.Xml.XmlValidatingReader.Schemas" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.Xml.Schema.XmlSchemaCollection" /> to use for validation.</summary>
        <value>用來驗證的 <see langword="XmlSchemaCollection" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 <xref:System.Xml.XmlReader> 參考頁面的＜備註＞一節。  
  
 `XmlSchemaCollection`儲存預先載入的 XML 資料精簡 (XDR) 和 XML 結構描述定義語言 (XSD) 結構描述。 這個屬性可讓讀取器存取的結構描述快取並允許它不需要每次重新載入結構描述驗證。 讀取器不會加入任何項目`XmlSchemaCollection`。  
  
 如果`XmlSchemaCollection`包含 XML 結構描述 (XSD) 包含`include`或`import`項目會參考其他命名空間的結構描述，這些命名空間已載入僅供驗證。 這些結構描述已明確加入至結構描述集合，除非它們將無法使用任何集合方法或屬性。 例如，如果集合包含結構描述檔案`a.xsd`，其中包含結構描述檔案的參考`b.xsd`，您必須新增`b.xsd`結構描述集合才能使用任何集合方法或屬性加以存取。  
  
 當`XmlSchemaCollection`使用存取`Schemas`屬性，<xref:System.Xml.Schema.XmlSchemaCollection.Add%2A?displayProperty=nameWithType>方法會使用<xref:System.Xml.XmlResolver>所指定<xref:System.Xml.XmlValidatingReader.XmlResolver%2A?displayProperty=nameWithType>屬性。  
  
> [!NOTE]
>  結構描述必須加入至`XmlSchemaCollection`在第一個`Read`呼叫。  
  
   
  
## Examples  
 下列範例會驗證使用預存在於 XmlSchemaCollection 結構描述的三個 XML 檔案。  
  
 [!code-cpp[Classic WebData XmlValidatingReader.Schemas Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.Schemas Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.Schemas Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.Schemas Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.Schemas Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.Schemas Example/VB/source.vb#1)]  
  
 此範例會使用下列五個輸入的檔案：  
  
 `booksSchema.xml`  
  
 [!code-xml[Classic WebData XmlValidatingReader.Schemas Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.Schemas Example/XML/source.xml#2)]  
  
 `booksSchemaFail.xml`  
  
 [!code-xml[Classic WebData XmlValidatingReader.Schemas Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.Schemas Example/XML/source.xml#3)]  
  
 `newbooks.xml`  
  
 [!code-xml[Classic WebData XmlValidatingReader.Schemas Example#4](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.Schemas Example/XML/source.xml#4)]  
  
 `books.xsd`  
  
 [!code-xml[Classic WebData XmlValidatingReader.Schemas Example#5](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.Schemas Example/XML/source.xml#5)]  
  
 `schema1.xdr`  
  
 [!code-xml[Classic WebData XmlValidatingReader.Schemas Example#6](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.Schemas Example/XML/source.xml#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="SchemaType">
      <MemberSignature Language="C#" Value="public object SchemaType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SchemaType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.SchemaType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SchemaType As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SchemaType { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SchemaType : obj" Usage="System.Xml.XmlValidatingReader.SchemaType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a schema type object.</summary>
        <value>
          <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />、<see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaComplexType" />，視節點值為內建的 XML 結構描述定義語言 (XSD) 類型或使用者自訂的 simpleType 或 complexType 而定，如果目前節點沒有結構描述類型，則為 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 <xref:System.Xml.XmlReader> 參考頁面的＜備註＞一節。  
  
 使用者需要測試傳回的型別。 例如，套用至物件的  
  
```csharp  
object obj = vreader.SchemaType;  
 if (obj is XmlSchemaType)  
 {  
   XmlSchemaType st = (XmlSchemaType)obj;  
   // use XmlSchemaType object  
 }  
 if (obj is XmlSchemaDatatype)  
 {  
   XmlSchemaDatatype sd = (XmlSchemaDatatype)obj;  
   Type vt = sd.ValueType;  
   // use XmlSchemaDatatype object  
       }  
```  
  
 執行 XML 結構描述驗證時，如果`XmlSchemaType`或`XmlSchemaDatatype`對應至目前正在讀取的項目。 如果正在執行文件類型定義 （DTD 驗證），則這個屬性會傳回`null`。  
  
 `XmlSchemaDatatype` 傳回目前的項目或屬性，如果是簡單類型，可以指定特殊的驗證條件約束上簡單的型別，如 min 和 max。  
  
 `XmlSchemaSimpleType` 如果是會傳回目前的項目或屬性，使用者定義的簡單型別。  
  
 `XmlSchemaComplexType` 如果是會傳回目前的項目是使用者定義的 complexType。 此類型不能傳回屬性。  
  
> [!NOTE]
>  如果<xref:System.Xml.XmlValidatingReader.ValidationType%2A>已設定 ValidationType.None，任何資料類型資訊提供從結構描述或 Dtd。  
  
> [!CAUTION]
>  在呼叫<xref:System.Xml.XmlValidatingReader.Close%2A>，SchemaType 將會傳回 Null。  
  
   
  
## Examples  
 下列範例顯示 XML 文件中的每個元素的類型資訊。  
  
 [!code-cpp[XmlValidatingReader.SchemaType#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlValidatingReader.SchemaType/CPP/schematype.cpp#1)]
 [!code-csharp[XmlValidatingReader.SchemaType#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlValidatingReader.SchemaType/CS/schematype.cs#1)]
 [!code-vb[XmlValidatingReader.SchemaType#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlValidatingReader.SchemaType/VB/schematype.vb#1)]  
  
 此範例會使用下列的輸入的檔。  
  
 `booksSchema.xml`  
  
 [!code-xml[XmlValidatingReader.SchemaType#2](~/samples/snippets/xml/VS_Snippets_Data/XmlValidatingReader.SchemaType/XML/booksschema.xml#2)]  
  
 `books.xsd`  
  
 [!code-xml[XmlValidatingReader.SchemaType#3](~/samples/snippets/xml/VS_Snippets_Data/XmlValidatingReader.SchemaType/XML/books.xsd#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="System.Xml.IXmlNamespaceResolver.GetNamespacesInScope">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IDictionary&lt;string,string&gt; IXmlNamespaceResolver.GetNamespacesInScope (System.Xml.XmlNamespaceScope scope);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IDictionary`2&lt;string, string&gt; System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(valuetype System.Xml.XmlNamespaceScope scope) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.System#Xml#IXmlNamespaceResolver#GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />
      <MemberSignature Language="VB.NET" Value="Function GetNamespacesInScope (scope As XmlNamespaceScope) As IDictionary(Of String, String) Implements IXmlNamespaceResolver.GetNamespacesInScope" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System::Xml::XmlNamespaceScope scope) = System::Xml::IXmlNamespaceResolver::GetNamespacesInScope;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="System.Xml.XmlNamespaceScope" />
      </Parameters>
      <Docs>
        <param name="scope">An <see cref="T:System.Xml.XmlNamespaceScope" /> object that identifies the scope of the reader.</param>
        <summary>For a description of this member, see <see cref="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />.</summary>
        <returns>An T:System.Collections.IDictionary object that identifies the namespaces in scope.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個成員是明確介面成員實作。 只有在 <xref:System.Xml.XmlValidatingReader> 執行個體轉換成 <xref:System.Xml.IXmlNamespaceResolver> 介面時，才能使用這個成員。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.IXmlNamespaceResolver.LookupNamespace">
      <MemberSignature Language="C#" Value="string IXmlNamespaceResolver.LookupNamespace (string prefix);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.System#Xml#IXmlNamespaceResolver#LookupNamespace(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function LookupNamespace (prefix As String) As String Implements IXmlNamespaceResolver.LookupNamespace" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.Xml.IXmlNamespaceResolver.LookupNamespace(System::String ^ prefix) = System::Xml::IXmlNamespaceResolver::LookupNamespace;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">The namespace prefix.</param>
        <summary>For a description of this member, see <see cref="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)" />.</summary>
        <returns>A string value that contains the namespace Uri that is associated with the prefix.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個成員是明確介面成員實作。 只有在 <xref:System.Xml.XmlValidatingReader> 執行個體轉換成 <xref:System.Xml.IXmlNamespaceResolver> 介面時，才能使用這個成員。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="System.Xml.IXmlNamespaceResolver.LookupPrefix">
      <MemberSignature Language="C#" Value="string IXmlNamespaceResolver.LookupPrefix (string namespaceName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.System#Xml#IXmlNamespaceResolver#LookupPrefix(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function LookupPrefix (namespaceName As String) As String Implements IXmlNamespaceResolver.LookupPrefix" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.Xml.IXmlNamespaceResolver.LookupPrefix(System::String ^ namespaceName) = System::Xml::IXmlNamespaceResolver::LookupPrefix;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="namespaceName">The namespace that is associated with the prefix.</param>
        <summary>For a description of this member, see <see cref="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)" />.</summary>
        <returns>A string value that contains the namespace prefix that is associated with the <paramref name="namespaceName" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個成員是明確介面成員實作。 只有在 <xref:System.Xml.XmlValidatingReader> 執行個體轉換成 <xref:System.Xml.IXmlNamespaceResolver> 介面時，才能使用這個成員。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidationEventHandler">
      <MemberSignature Language="C#" Value="public event System.Xml.Schema.ValidationEventHandler ValidationEventHandler;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Xml.Schema.ValidationEventHandler ValidationEventHandler" />
      <MemberSignature Language="DocId" Value="E:System.Xml.XmlValidatingReader.ValidationEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Xml::Schema::ValidationEventHandler ^ ValidationEventHandler;" />
      <MemberSignature Language="F#" Value="member this.ValidationEventHandler : System.Xml.Schema.ValidationEventHandler " Usage="member this.ValidationEventHandler : System.Xml.Schema.ValidationEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.ValidationEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sets an event handler for receiving information about document type definition (DTD), XML-Data Reduced (XDR) schema, and XML Schema definition language (XSD) schema validation errors.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 <xref:System.Xml.XmlReader> 參考頁面的＜備註＞一節。  
  
 這些事件會在發生<xref:System.Xml.XmlValidatingReader.Read%2A>，而且只有當<xref:System.Xml.XmlValidatingReader.ValidationType%2A>的 DTD，XDR 結構描述中，指定、 或自動為。  
  
 如果未不提供任何事件處理常式，則<xref:System.Xml.XmlException>（嚴重性為等於 XmlSeverityType.Error） 的第一個驗證錯誤時擲回。  
  
> [!NOTE]
>  如果項目回報驗證錯誤，不會驗證該元素的內容模型的其餘部分，不過，其子系進行驗證。 讀取器只會報告指定的項目之第一個錯誤。  
  
 回呼處理常式可以使用<xref:System.Xml.Schema.ValidationEventArgs.Severity%2A?displayProperty=nameWithType>保證，針對結構描述驗證 XML 執行個體文件的屬性。 `Severity`屬性可讓您區分 （嚴重性 XmlSeverityType.Error 等於），表示發生嚴重錯誤、 驗證錯誤和驗證警告 （嚴重性 XmlSeverityType.Warning 等於），表示沒有結構描述會提供資訊。  
  
   
  
## Examples  
 下列範例會驗證 XML 結構描述的檔案。  
  
 [!code-cpp[Classic WebData XmlValidatingReader.ValidationEventHandler Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.ValidationEventHandler Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.ValidationEventHandler Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.ValidationEventHandler Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.ValidationEventHandler Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.ValidationEventHandler Example/VB/source.vb#1)]  
  
 此範例會使用下列兩個輸入的檔案：  
  
 `notValidXSD.xml` (`xsi:schemaLocation`屬性會識別 XML 結構描述讀取器。)  
  
 [!code-xml[Classic WebData XmlValidatingReader.ValidationEventHandler Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.ValidationEventHandler Example/XML/source.xml#2)]  
  
 `books.xsd`  
  
 [!code-xml[Classic WebData XmlValidatingReader.ValidationEventHandler Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.ValidationEventHandler Example/XML/source.xml#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Schema.XmlSeverityType" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ValidationType">
      <MemberSignature Language="C#" Value="public System.Xml.ValidationType ValidationType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.ValidationType ValidationType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.ValidationType" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidationType As ValidationType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::ValidationType ValidationType { System::Xml::ValidationType get(); void set(System::Xml::ValidationType value); };" />
      <MemberSignature Language="F#" Value="member this.ValidationType : System.Xml.ValidationType with get, set" Usage="System.Xml.XmlValidatingReader.ValidationType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.ValidationType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating the type of validation to perform.</summary>
        <value>其中一個 <see cref="T:System.Xml.ValidationType" /> 值。 若未設定這個屬性，則預設為 ValidationType.Auto。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 <xref:System.Xml.XmlReader> 參考頁面的＜備註＞一節。  
  
 這個屬性必須先設定第一次呼叫<xref:System.Xml.XmlValidatingReader.Read%2A>。 此屬性設定為 ValidationType.None 建立非驗證讀取器。  
  
 如果外部文件類型定義 (Dtd) 或結構描述所需的驗證，<xref:System.Xml.XmlResolver>用。  
  
   
  
## Examples  
 下列範例會驗證兩個檔案。  
  
 [!code-cpp[Classic WebData XmlValidatingReader.ValidationType Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.ValidationType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.ValidationType Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.ValidationType Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.ValidationType Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.ValidationType Example/VB/source.vb#1)]  
  
 此範例會使用下列四個輸入的檔案：  
  
 `notValid.xml` (「 X-結構描述:"前置詞識別讀取器的 XML 資料精簡 (XDR) 結構描述。)  
  
 [!code-xml[Classic WebData XmlValidatingReader.ValidationType Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.ValidationType Example/XML/source.xml#2)]  
  
 `schema1.xdr`  
  
 [!code-xml[Classic WebData XmlValidatingReader.ValidationType Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.ValidationType Example/XML/source.xml#3)]  
  
 `cdDTD.xml`  
  
 [!code-xml[Classic WebData XmlValidatingReader.ValidationType Example#4](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.ValidationType Example/XML/source.xml#4)]  
  
 `book1.xml`  
  
 [!code-xml[Classic WebData XmlValidatingReader.ValidationType Example#5](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.ValidationType Example/XML/source.xml#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Setting the property after a Read has been called.</exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public override string Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.Value" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Value As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Value { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : string" Usage="System.Xml.XmlValidatingReader.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the text value of the current node.</summary>
        <value>傳回值需視節點的 <see cref="P:System.Xml.XmlValidatingReader.NodeType" /> 而定。 下表列出具有傳回值的節點類型。 其他所有節點類型都會傳回 String.Empty。  
  
 <list type="table"><listheader><term> 節點型別</term><description>值</description></listheader><item><term><see langword="Attribute" /></term><description>屬性的值。</description></item><item><term><see langword="CDATA" /></term><description> CDATA 區段的內容。</description></item><item><term><see langword="Comment" /></term><description> 註解的內容。</description></item><item><term><see langword="DocumentType" /></term><description> 內部子集。</description></item><item><term><see langword="ProcessingInstruction" /></term><description> 整個內容 （目標除外）。</description></item><item><term><see langword="SignificantWhitespace" /></term><description> 混合內容模型中標記間的泛空白字元。</description></item><item><term><see langword="Text" /></term><description> 文字節點的內容。</description></item><item><term><see langword="Whitespace" /></term><description> 標記之間的泛空白字元。</description></item><item><term><see langword="XmlDeclaration" /></term><description> 宣告的內容。  </description></item></list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 <xref:System.Xml.XmlReader> 參考頁面的＜備註＞一節。  
  
   
  
## Examples  
 下列範例會讀取 XML 檔案，並顯示每個節點。  
  
 [!code-cpp[Classic WebData XmlValidatingReader.Name Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.Name Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.Name Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/VB/source.vb#1)]  
  
 此範例會使用該檔案，`items.xml`作為輸入。  
  
 [!code-xml[Classic WebData XmlValidatingReader.Name Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="XmlLang">
      <MemberSignature Language="C#" Value="public override string XmlLang { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string XmlLang" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.XmlLang" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property XmlLang As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ XmlLang { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.XmlLang : string" Usage="System.Xml.XmlValidatingReader.XmlLang" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the current <see langword="xml:lang" /> scope.</summary>
        <value>目前的 <see langword="xml:lang" /> 範圍。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 <xref:System.Xml.XmlReader> 參考頁面的＜備註＞一節。  
  
 這個屬性表示在目前的節點位於 xml: lang 範圍。 例如，以下是使用 XML 片段`xml:lang`設為美國英文根項目：  
  
```xml  
<root xml:lang="en-us">   
<name>Fred</name>   
</root>   
```  
  
 當讀取器位於`name`項目，您可以使用這個屬性來尋找它位於美國的範圍內英文`xml:lang`屬性。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="XmlResolver">
      <MemberSignature Language="C#" Value="public System.Xml.XmlResolver XmlResolver { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlResolver XmlResolver" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.XmlResolver" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlResolver As XmlResolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlResolver ^ XmlResolver {  void set(System::Xml::XmlResolver ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlResolver : System.Xml.XmlResolver" Usage="System.Xml.XmlValidatingReader.XmlResolver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlResolver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sets the <see cref="T:System.Xml.XmlResolver" /> used for resolving external document type definition (DTD) and schema location references. The <see langword="XmlResolver" /> is also used to handle any import or include elements found in XML Schema definition language (XSD) schemas.</summary>
        <value>要使用的 <see langword="XmlResolver" />。 如果設定為 <see langword="null" />，就不會解析外部資源。  在 1.1 版中的 [！INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]，呼叫端必須是完全信任來指定<see langword="XmlResolver" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 <xref:System.Xml.XmlReader> 參考頁面的＜備註＞一節。  
  
 `XmlResolver`用來載入任何 Dtd、 實體或完成驗證程序所需的結構描述。  
  
 這個屬性可以設定在任何時間和會影響下一步 後<xref:System.Xml.XmlValidatingReader.Read%2A>呼叫。 如果這個屬性設定為`null`，讀取器會假設使用者不想要在解析外部參考。 在此情況下，讀取器僅驗證內部資源，如果資源不存在。  
  
 1.1 版中[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]，如果未設定這個屬性，應用程式的信任層級決定的預設行為。  
  
 `Fully trusted code:` 讀取器會使用預設值<xref:System.Xml.XmlUrlResolver>不具使用者認證。 如果驗證才能存取網路資源，使用`XmlResolver`屬性來指定`XmlResolver`具有必要認證。  
  
 `Semi-trusted code:` `XmlResolver`屬性設定為`null`。 不會解析外部資源。  
  
 驗證時使用的結構描述，您可以藉由避免昂貴的載入程序<xref:System.Xml.Schema.XmlSchemaCollection>使用<xref:System.Xml.XmlValidatingReader.Schemas%2A>屬性。  
  
   
  
## Examples  
 下列範例會使用`XmlResolver`屬性來指定存取網路上的 DTD 檔案的必要認證。  
  
 [!code-cpp[XmlValidatingReader.XmlResolver#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlValidatingReader.XmlResolver/CPP/vrdr_resolver.cpp#1)]
 [!code-csharp[XmlValidatingReader.XmlResolver#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlValidatingReader.XmlResolver/CS/vrdr_resolver.cs#1)]
 [!code-vb[XmlValidatingReader.XmlResolver#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlValidatingReader.XmlResolver/VB/vrdr_resolver.vb#1)]  
  
 此範例會使用下列檔案做為輸入。  
  
 `book5.xml`  
  
 [!code-xml[XmlValidatingReader.XmlResolver#2](~/samples/snippets/xml/VS_Snippets_Data/XmlValidatingReader.XmlResolver/XML/book5.xml#2)]  
  
 `books.dtd`  
  
 [!code-xml[XmlValidatingReader.XmlResolver#3](~/samples/snippets/xml/VS_Snippets_Data/XmlValidatingReader.XmlResolver/XML/books.dtd#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.XmlUrlResolver.Credentials" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="XmlSpace">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlSpace XmlSpace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlSpace XmlSpace" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.XmlSpace" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property XmlSpace As XmlSpace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlSpace XmlSpace { System::Xml::XmlSpace get(); };" />
      <MemberSignature Language="F#" Value="member this.XmlSpace : System.Xml.XmlSpace" Usage="System.Xml.XmlValidatingReader.XmlSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlSpace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the current <see langword="xml:space" /> scope.</summary>
        <value>其中一個 <see cref="T:System.Xml.XmlSpace" /> 值。 如果 <see langword="xml:space" /> 範圍不存在，這個屬性預設值為 <see langword="XmlSpace.None" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader>類別中已過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。 您可以建立對其進行驗證<xref:System.Xml.XmlReader>所使用的執行個體<xref:System.Xml.XmlReaderSettings>類別和<xref:System.Xml.XmlReader.Create%2A>方法。 如需詳細資訊，請參閱 <xref:System.Xml.XmlReader> 參考頁面的＜備註＞一節。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
  </Members>
</Type>