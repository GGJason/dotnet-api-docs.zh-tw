<Type Name="XmlUrlResolver" FullName="System.Xml.XmlUrlResolver">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1365dc5db6ccc4f0e153f031ba516f3abe75c023" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39986514" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XmlUrlResolver : System.Xml.XmlResolver" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlUrlResolver extends System.Xml.XmlResolver" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlUrlResolver" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlUrlResolver&#xA;Inherits XmlResolver" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlUrlResolver : System::Xml::XmlResolver" />
  <TypeSignature Language="F#" Value="type XmlUrlResolver = class&#xA;    inherit XmlResolver" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xml.XmlResolver</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>解析由統一資源識別項 (URI) 所命名的外部 XML 資源。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlUrlResolver> 用來解析外部 XML 資源，例如文件類型定義 (Dtd) 或結構描述的實體。 它也是用來處理程序 include 和 import Extensible StyleSheet Language (XSL) 樣式表或 XML 結構描述定義語言 (XSD) 結構描述中所找到的項目。  
  
 <xref:System.Xml.XmlUrlResolver> 是中的所有類別的預設解析程式<xref:System.Xml>命名空間。 它支援 `file://` 及 `http://` 通訊協定，以及 <xref:System.Net.WebRequest> 類別的要求。  
  
> [!IMPORTANT]
>  <xref:System.Xml.XmlUrlResolver> 物件可以包含機密資訊 (如使用者認證)。 當您快取時應該要小心<xref:System.Xml.XmlUrlResolver>物件，並不應將傳遞<xref:System.Xml.XmlUrlResolver>物件到不受信任的元件。  
  
## <a name="resolving-dtds"></a>解析 Dtd  
 如果 XML 讀取器 (<xref:System.Xml.XmlReader>) 會讀取 XML 檔案，其中包含外部 DTD 時，它會呼叫<xref:System.Xml.XmlUrlResolver.GetEntityAsync%2A?displayProperty=nameWithType>方法來取得 DTD 的資料流表示。 DTD 的 URI 是相對 URI，如果 XML 讀取器會呼叫<xref:System.Xml.XmlUrlResolver.ResolveUri%2A?displayProperty=nameWithType>方法，並傳回絕對 URI 給定`relativeUri`和`baseURi`參數。 如果<xref:System.Xml.XmlUrlResolver>並不知道如何解析的 URI，它會傳回`null`。  
  
 <xref:System.Xml.XmlUrlResolver.GetEntity%2A?displayProperty=nameWithType> 方法會適當地使用 <xref:System.Xml.XmlUrlResolver.Credentials%2A> 屬性中的資訊來取得資源的存取。 由於安全性原因，沒有針對此屬性的 `get` 存取子。 當覆寫<xref:System.Xml.XmlResolver>， **GetEntity**是方法，它會利用中的認證資訊**認證**屬性。  
  
 解析所有其他 XML 資源與解析 DTD 很相似。 <xref:System.Xml.XmlResolver> 交涉與外部資源的連接，並傳回<xref:System.IO.Stream>內容表示法。 正在呼叫的物件<xref:System.Xml.XmlResolver>解譯資料流。  
  
## <a name="extending-the-xmlurlresolver-class"></a>擴充 XmlUrlResolver 類別  
 <xref:System.Xml.XmlUrlResolver> 類別的預設行為是解析它的來源 (而非快取) 中的 XML 資料資源。 在某些情況下，解析快取中的資料資源可提高應用程式的效能，因為這樣會節省資料資源伺服器的往來成本。 這裡得到的效能必須針對最新內容的需求來加以考量。  
  
 下列範例會延伸<xref:System.Xml.XmlUrlResolver>並建立新的類別， `XmlCachingResolver`、 從快取擷取資源。 這是透過覆寫 <xref:System.Xml.XmlUrlResolver.Credentials%2A?displayProperty=nameWithType> 屬性和 <xref:System.Xml.XmlUrlResolver.GetEntity%2A?displayProperty=nameWithType> 方法來完成。  
  
 [!code-csharp[XmlCachingResolver_ex#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlCachingResolver_ex/CS/XmlCachingResolver_ex.cs#1)]
 [!code-vb[XmlCachingResolver_ex#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlCachingResolver_ex/VB/XmlCachingResolver_ex.vb#1)]  
  
 `XmlCachingResolver` 類別的快取行為是在 `GetEntity` 方法中實作。 這是透過建立新的 <xref:System.Net.WebRequest> 和 <xref:System.Net.Cache.HttpRequestCachePolicy> 物件來完成。 <xref:System.Net.Cache.HttpRequestCachePolicy> 物件是使用 <xref:System.Net.Cache.HttpRequestCacheLevel.Default> 列舉的 <xref:System.Net.Cache.HttpRequestCacheLevel> 成員所建立。  
  
 <xref:System.Net.WebRequest.CachePolicy%2A> 物件的 <xref:System.Net.WebRequest> 屬性是使用 <xref:System.Net.Cache.HttpRequestCachePolicy> 物件所設定。  
  
 `XmlCachingResolver` 類別的執行個體是使用 `Boolean` `enableHttpCaching` 所建立。 當此值設定為`true`，執行個體盡可能解析預設快取中的資源。 當`enableHttpCaching`設為`false`，執行個體使用預設行為，並解決從其原始的資源。  
  
> [!NOTE]
>  此範例會利用.NET Framework 中 XML 類別的擴充性。 其他類別可加以擴充和自訂，以符合特定應用程式的需要。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Xml.XmlReader>使用<xref:System.Xml.XmlUrlResolver>具有預設認證。  
  
 [!code-csharp[XmlResolver_Samples#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlResolver_Samples/CS/XmlResolver_Samples.cs#1)]
 [!code-vb[XmlResolver_Samples#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlResolver_Samples/VB/XmlResolver_Samples.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlUrlResolver ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlUrlResolver.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlUrlResolver();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Xml.XmlUrlResolver" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CachePolicy">
      <MemberSignature Language="C#" Value="public System.Net.Cache.RequestCachePolicy CachePolicy { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Cache.RequestCachePolicy CachePolicy" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlUrlResolver.CachePolicy" />
      <MemberSignature Language="VB.NET" Value="Public Property CachePolicy As RequestCachePolicy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Cache::RequestCachePolicy ^ CachePolicy {  void set(System::Net::Cache::RequestCachePolicy ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CachePolicy : System.Net.Cache.RequestCachePolicy" Usage="System.Xml.XmlUrlResolver.CachePolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Cache.RequestCachePolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定基礎 <see cref="T:System.Net.WebRequest" /> 物件的快取原則。</summary>
        <value>基礎 Web 要求的快取原則。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Credentials">
      <MemberSignature Language="C#" Value="public override System.Net.ICredentials Credentials { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.ICredentials Credentials" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlUrlResolver.Credentials" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Credentials As ICredentials" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Net::ICredentials ^ Credentials {  void set(System::Net::ICredentials ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Credentials : System.Net.ICredentials" Usage="System.Xml.XmlUrlResolver.Credentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.ICredentials</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>設定用以驗證 Web 要求的認證資訊。</summary>
        <value>用以驗證 Web 要求的認證。 如果未設定這個屬性，其值會預設為 <see langword="null" />；也就是說，<see langword="XmlUrlResolver" /> 沒有使用者認證。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果虛擬目錄不需要驗證，這個屬性不必設定。 否則，您必須提供使用者的認證。  
  
 您可以將不同的認證與不同的 Uri 建立關聯，並將它們新增至快取。 您接著可以使用認證檢查不同 Uri，不論 XML 的原始來源的驗證。  
  
 下列 C# 程式碼示範如何設定<xref:System.Xml.XmlUrlResolver.Credentials%2A>認證快取的屬性。  
  
```csharp  
NetworkCredential myCred = new NetworkCredential(UserName,SecurelyStoredPassword,Domain);   
CredentialCache myCache = new CredentialCache();   
myCache.Add(new Uri("http://www.contoso.com/"), "Basic", myCred);   
myCache.Add(new Uri("http://app.contoso.com/"), "Basic", myCred);  
XmlUrlResolver resolver = new XmlUrlResolver();  
resolver.Credentials = myCache;  
```  
  
   
  
## Examples  
 下列範例會建立<xref:System.Xml.XmlUrlResolver>物件使用的認證。 <xref:System.Xml.XmlReader>會使用認證<xref:System.Xml.XmlUrlResolver>物件來存取網路資源。  
  
 [!code-csharp[XmlResolver_Samples#2](~/samples/snippets/csharp/VS_Snippets_Data/XmlResolver_Samples/CS/XmlResolver_Samples.cs#2)]
 [!code-vb[XmlResolver_Samples#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlResolver_Samples/VB/XmlResolver_Samples.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
      </Docs>
    </Member>
    <Member MemberName="GetEntity">
      <MemberSignature Language="C#" Value="public override object GetEntity (Uri absoluteUri, string role, Type ofObjectToReturn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object GetEntity(class System.Uri absoluteUri, string role, class System.Type ofObjectToReturn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlUrlResolver.GetEntity(System.Uri,System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEntity (absoluteUri As Uri, role As String, ofObjectToReturn As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ GetEntity(Uri ^ absoluteUri, System::String ^ role, Type ^ ofObjectToReturn);" />
      <MemberSignature Language="F#" Value="override this.GetEntity : Uri * string * Type -&gt; obj" Usage="xmlUrlResolver.GetEntity (absoluteUri, role, ofObjectToReturn)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="absoluteUri" Type="System.Uri" />
        <Parameter Name="role" Type="System.String" />
        <Parameter Name="ofObjectToReturn" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="absoluteUri">自 <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" /> 傳回的 URI。</param>
        <param name="role">目前未使用。</param>
        <param name="ofObjectToReturn">要傳回的物件類型。 目前的實作只傳回 <see cref="T:System.IO.Stream" /> 物件。</param>
        <summary>對應 URI 至包含實際資源的物件。</summary>
        <returns>如果指定的類型並非資料流，則為資料流物件或為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫端想要將特定的 URI 對應至物件，包含 URI 所代表的資源時，會使用這個方法。  
  
 這個方法的非同步版本，請參閱<xref:System.Xml.XmlUrlResolver.GetEntityAsync%2A>。  
  
> [!IMPORTANT]
>  您的應用程式可以減輕記憶體阻斷服務威脅<xref:System.Xml.XmlUrlResolver.GetEntity%2A>方法，藉由實作 IStream<xref:System.Runtime.InteropServices.ComTypes.IStream>來限制讀取的位元組數目。 這有助於防止惡意程式碼嘗試將無限的資料流的位元組傳遞<xref:System.Xml.XmlUrlResolver.GetEntity%2A>方法。  
  
   
  
## Examples  
 下列範例示範`GetEntity`和<xref:System.Xml.XmlResolver.ResolveUri%2A>方法。  
  
 [!code-cpp[Classic WebData XmlUrlResolver.ResolveUri Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlUrlResolver.ResolveUri Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlUrlResolver.ResolveUri Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlUrlResolver.ResolveUri Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlUrlResolver.ResolveUri Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlUrlResolver.ResolveUri Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">
          <paramref name="ofObjectToReturn" /> 既不是 <see langword="null" /> 也不是 <see langword="Stream" /> 型別。</exception>
        <exception cref="T:System.UriFormatException">指定的 URI 並非絕對 URI。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="absoluteUri" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.Exception">發生執行階段錯誤 (例如中斷的伺服器連線)。</exception>
        <altmember cref="T:System.Uri" />
      </Docs>
    </Member>
    <Member MemberName="GetEntityAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;object&gt; GetEntityAsync (Uri absoluteUri, string role, Type ofObjectToReturn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;object&gt; GetEntityAsync(class System.Uri absoluteUri, string role, class System.Type ofObjectToReturn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlUrlResolver.GetEntityAsync(System.Uri,System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEntityAsync (absoluteUri As Uri, role As String, ofObjectToReturn As Type) As Task(Of Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task&lt;System::Object ^&gt; ^ GetEntityAsync(Uri ^ absoluteUri, System::String ^ role, Type ^ ofObjectToReturn);" />
      <MemberSignature Language="F#" Value="override this.GetEntityAsync : Uri * string * Type -&gt; System.Threading.Tasks.Task&lt;obj&gt;" Usage="xmlUrlResolver.GetEntityAsync (absoluteUri, role, ofObjectToReturn)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="absoluteUri" Type="System.Uri" />
        <Parameter Name="role" Type="System.String" />
        <Parameter Name="ofObjectToReturn" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="absoluteUri">自 <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" /> 傳回的 URI。</param>
        <param name="role">目前未使用。</param>
        <param name="ofObjectToReturn">要傳回的物件類型。 目前的實作只傳回 <see cref="T:System.IO.Stream" /> 物件。</param>
        <summary>以非同步的方式對應 URI 至包含實際資源的物件。</summary>
        <returns>如果指定的類型並非資料流，則為資料流物件或為 <see langword="null" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Proxy">
      <MemberSignature Language="C#" Value="public System.Net.IWebProxy Proxy { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.IWebProxy Proxy" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlUrlResolver.Proxy" />
      <MemberSignature Language="VB.NET" Value="Public Property Proxy As IWebProxy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::IWebProxy ^ Proxy {  void set(System::Net::IWebProxy ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Proxy : System.Net.IWebProxy" Usage="System.Xml.XmlUrlResolver.Proxy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.IWebProxy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定基礎 <see cref="T:System.Net.WebRequest" /> 物件的網路 Proxy。</summary>
        <value>用以存取網際網路資源的 <see cref="T:System.Net.IWebProxy" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveUri">
      <MemberSignature Language="C#" Value="public override Uri ResolveUri (Uri baseUri, string relativeUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Uri ResolveUri(class System.Uri baseUri, string relativeUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlUrlResolver.ResolveUri(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ResolveUri (baseUri As Uri, relativeUri As String) As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Uri ^ ResolveUri(Uri ^ baseUri, System::String ^ relativeUri);" />
      <MemberSignature Language="F#" Value="override this.ResolveUri : Uri * string -&gt; Uri" Usage="xmlUrlResolver.ResolveUri (baseUri, relativeUri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseUri" Type="System.Uri" />
        <Parameter Name="relativeUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="baseUri">用來解析相對 URI 的基底 URI。</param>
        <param name="relativeUri">要解析的 URI。 這個 URI 可為絕對或相對的。 若是絕對的，這個值實際上會取代 <c>baseUri</c> 值。 若是相對的，它會結合 <c>baseUri</c> 而成為絕對 URI。</param>
        <summary>從基底和相對 URI 解析絕對 URI。</summary>
        <returns>絕對 URI，如果相對 URI 不能解析，則為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 絕對 URI 可用來當做基底 URI 的任何後續的要求，會相對於此 URI 的實體。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="baseUri" /> 是 <see langword="null" />，或 <paramref name="relativeUri" /> 是 <see langword="null" />。</exception>
        <block subset="none" type="overrides">
          <para>這個方法有繼承要求。完全信任，才能覆寫<see cref="M:System.Xml.XmlUrlResolver.ResolveUri(System.Uri,System.String)" />方法。</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>