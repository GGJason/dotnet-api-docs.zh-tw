<Type Name="XmlResolver" FullName="System.Xml.XmlResolver">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="816ca2b3ec28c47ec29cc8bb108efbfcba7ac66a" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36433870" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class XmlResolver" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit XmlResolver extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlResolver" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class XmlResolver" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlResolver abstract" />
  <TypeSignature Language="F#" Value="type XmlResolver = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>解析由統一資源識別項 (URI) 所命名的外部 XML 資源。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlResolver>類型用來解析外部 XML 資源，例如實體、 文件類型定義 (Dtd) 或結構描述。 它也是用來處理程序包含和匯入可延伸樣式表語言 (XSL) 樣式表或 XML 結構描述定義語言 (XSD) 結構描述中所找到的項目。  
  
 <xref:System.Xml.XmlResolver> 會處理所有層面交涉的資源，包括處理安全性認證、 開啟資料來源連接，以及傳回資源的資料流或其他類型的物件形式的連接。 呼叫物件<xref:System.Xml.XmlResolver>具有解譯資料流的工作。  
  
 <xref:System.Xml>命名空間包含的兩個具象實作<xref:System.Xml.XmlResolver>類別：  
  
-   <xref:System.Xml.XmlUrlResolver> 是中的所有類別的預設解析程式<xref:System.Xml>命名空間。 它支援 `file://` 及 `http://` 通訊協定，以及 <xref:System.Net.WebRequest?displayProperty=nameWithType> 類別的要求。 擴充類別來改善效能的範例，請參閱<xref:System.Xml.XmlUrlResolver>參考頁面。  
  
-   <xref:System.Xml.XmlSecureResolver> 可協助保護另一部<xref:System.Xml.XmlResolver>物件所包裝的物件，並限制其可存取的資源。 例如，<xref:System.Xml.XmlSecureResolver>可以禁止存取特定的網際網路網站或區域。  
  
 您可以建立，並指定您自己的解析程式。 如果您未指定解決器，讀取器會使用預設<xref:System.Xml.XmlUrlResolver>不具使用者認證。  
  
 藉由設定 <xref:System.Xml.XmlResolver> 屬性並將 <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=nameWithType> 物件傳遞至 <xref:System.Xml.XmlReaderSettings> 方法，可以指定要使用的 <xref:System.Xml.XmlReader.Create%2A>。  
  
 如果需要驗證的系統上儲存資源，您會使用<xref:System.Xml.XmlResolver.Credentials%2A?displayProperty=nameWithType>屬性來指定所需的認證。  
  
## <a name="supplying-authentication-credentials"></a>提供驗證認證  
 包含要讀取的 XML 資料的檔案可能受限制的存取原則。 如果需要驗證才可存取網路資源，請使用 <xref:System.Xml.XmlResolver.Credentials%2A> 屬性指定必要的認證。 如果<xref:System.Xml.XmlResolver.Credentials%2A>屬性未設定，認證會設定為`null`。  
  
 例如，假設從進行驗證 web 要求資料時，所需的認證。 除非 web 虛擬目錄允許匿名存取，您必須設定<xref:System.Xml.XmlResolver.Credentials%2A>屬性提供的認證。 下列範例會建立<xref:System.Xml.XmlReader>物件，使用<xref:System.Xml.XmlUrlResolver>與預設的認證來存取http://localhost/bookstore/inventory.xml站台。  
  
 [!code-cpp[XmlReaderSettings.cctor#2](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.cctor/CPP/XmlReaderSettings.cctor.cpp#2)]
 [!code-csharp[XmlReaderSettings.cctor#2](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.cctor/CS/factory_rdr_cctor2.cs#2)]
 [!code-vb[XmlReaderSettings.cctor#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.cctor/VB/factory_rdr_cctor2.vb#2)]  
  
 您可以針對不同的 Uri 中提供不同的認證，並將它們新增至快取。 不論 XML 的原始來源為何，這些認證都會用於檢查不同 URI 的驗證。 下列範例會示範如何將認證新增至快取。  
  
 [!code-csharp[XslCompiledTransform.Load#11](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#11)]
 [!code-vb[XslCompiledTransform.Load#11](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#11)]  
  
## <a name="security-considerations"></a>安全性考量  
 使用時，請考慮下列項目<xref:System.Xml.XmlResolver>類別。  
  
-   <xref:System.Xml.XmlResolver> 物件可以包含機密資訊 (如使用者認證)。 您應該要特別小心快取時<xref:System.Xml.XmlResolver>物件，並不應將傳遞<xref:System.Xml.XmlResolver>物件不受信任的元件。  
  
-   如果設計使用 <xref:System.Xml.XmlResolver> 類別的類別屬性，應將屬性定義為唯寫屬性。 該屬性可用於指定要使用的 <xref:System.Xml.XmlResolver>，但其不可用於傳回 <xref:System.Xml.XmlResolver> 物件。  
  
-   如果您的應用程式接受<xref:System.Xml.XmlResolver>來自不受信任的程式碼的物件，您不能假設 URI 傳入<xref:System.Xml.XmlResolver.GetEntity%2A>方法將傳回的相同<xref:System.Xml.XmlResolver.ResolveUri%2A>方法。 從 <xref:System.Xml.XmlResolver> 類別衍生的類別可以覆寫 <xref:System.Xml.XmlResolver.GetEntity%2A> 方法，並傳回與原始 URI 所包含之內容不同的資料。  
  
-   您的應用程式可以降低記憶體阻斷服務威脅<xref:System.Xml.XmlResolver.GetEntity%2A>方法藉由實作<xref:System.Runtime.InteropServices.ComTypes.IStream>，它會限制讀取的位元組數目。 這有助於防範惡意程式碼嘗試傳遞無限的資料流的位元組的情況下<xref:System.Xml.XmlResolver.GetEntity%2A>方法。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Xml.XmlUrlResolver>具有預設認證。 A<xref:System.Xml.XmlReader>用來讀取，並顯示結果的資料流。  
  
 [!code-csharp[XmlResolver_ex#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlResolver_ex/CS/XmlResolver_ex.cs#1)]
 [!code-vb[XmlResolver_ex#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlResolver_ex/VB/XmlResolver_ex.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XmlResolver ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlResolver.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XmlResolver();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Xml.XmlResolver" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在衍生的類別建構函式來初始化此類型中的狀態會呼叫這個建構函式。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Credentials">
      <MemberSignature Language="C#" Value="public virtual System.Net.ICredentials Credentials { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.ICredentials Credentials" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlResolver.Credentials" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Credentials As ICredentials" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Net::ICredentials ^ Credentials {  void set(System::Net::ICredentials ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Credentials : System.Net.ICredentials" Usage="System.Xml.XmlResolver.Credentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.ICredentials</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在衍生類別中覆寫時，設定用來驗證 Web 要求的認證資訊。</summary>
        <value>用以驗證 Web 要求的認證。 如果未設定這個屬性，其值會預設為 <see langword="null" />；也就是說，<see langword="XmlResolver" /> 沒有使用者認證。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果虛擬目錄不需要驗證，此屬性沒有設定。 否則，您必須提供使用者的認證。  
  
 下列 C# 程式碼上設定認證<xref:System.Xml.XmlResolver>物件。  
  
```csharp  
NetworkCredential nc = new NetworkCredential(UserName, SecurelyStoredPassword, Domain);  
XmlUrlResolver resolver = new XmlUrlResolver();  
resolver.Credentials = nc;  
```  
  
 您可以將不同的認證與不同的 Uri 產生關聯，並將它們新增至快取。 您接著可以使用認證檢查不同 Uri，不論 XML 的原始來源為何的驗證。  
  
```csharp  
NetworkCredential myCred = new NetworkCredential(UserName, SecurelyStoredPassword, Domain);   
CredentialCache myCache = new CredentialCache();   
myCache.Add(new Uri("http://www.contoso.com/"), "Basic", myCred);   
myCache.Add(new Uri("http://app.contoso.com/"), "Basic", myCred);  
XmlUrlResolver resolver = new XmlUrlResolver();  
resolver.Credentials = myCache;  
```  
  
   
  
## Examples  
 請參閱<xref:System.Xml.XmlUrlResolver.Credentials%2A?displayProperty=nameWithType>的範例，會使用這個屬性。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
      </Docs>
    </Member>
    <Member MemberName="GetEntity">
      <MemberSignature Language="C#" Value="public abstract object GetEntity (Uri absoluteUri, string role, Type ofObjectToReturn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetEntity(class System.Uri absoluteUri, string role, class System.Type ofObjectToReturn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlResolver.GetEntity(System.Uri,System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEntity (absoluteUri As Uri, role As String, ofObjectToReturn As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ GetEntity(Uri ^ absoluteUri, System::String ^ role, Type ^ ofObjectToReturn);" />
      <MemberSignature Language="F#" Value="abstract member GetEntity : Uri * string * Type -&gt; obj" Usage="xmlResolver.GetEntity (absoluteUri, role, ofObjectToReturn)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="absoluteUri" Type="System.Uri" />
        <Parameter Name="role" Type="System.String" />
        <Parameter Name="ofObjectToReturn" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="absoluteUri">自 <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" /> 傳回的 URI。</param>
        <param name="role">目前未使用。</param>
        <param name="ofObjectToReturn">要傳回的物件類型。 目前的版本只傳回 System.IO.Stream 物件。</param>
        <summary>在衍生類別中覆寫時，對應 URI 至包含實際資源的物件。</summary>
        <returns>如果指定的類型並非資料流，則為資料流物件或為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫端想要將特定的 URI 對應至包含實際資源的 URI 表示的物件時，會使用這個方法。 傳回物件的型別是協議。不過，必須一律支援實作<xref:System.IO.Stream?displayProperty=nameWithType>。  
  
 這個方法的非同步版本，請參閱<xref:System.Xml.XmlResolver.GetEntityAsync%2A>。  
  
> [!IMPORTANT]
>  您的應用程式可以降低記憶體阻斷服務威脅<xref:System.Xml.XmlResolver.GetEntity%2A>方法藉由實作<xref:System.Runtime.InteropServices.ComTypes.IStream>，它會限制讀取的位元組數目。 這有助於防範惡意程式碼嘗試傳遞無限的資料流的位元組的情況下<xref:System.Xml.XmlResolver.GetEntity%2A>方法。  
  
   
  
## Examples  
 請參閱<xref:System.Xml.XmlUrlResolver.GetEntity%2A?displayProperty=nameWithType>如需使用此方法的範例。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">
          <paramref name="ofObjectToReturn" /> 不是 <see langword="Stream" /> 型別。</exception>
        <exception cref="T:System.UriFormatException">指定的 URI 並非絕對 URI。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="absoluteUri" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.Exception">發生執行階段錯誤 (例如中斷的伺服器連線)。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetEntityAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;object&gt; GetEntityAsync (Uri absoluteUri, string role, Type ofObjectToReturn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;object&gt; GetEntityAsync(class System.Uri absoluteUri, string role, class System.Type ofObjectToReturn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlResolver.GetEntityAsync(System.Uri,System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEntityAsync (absoluteUri As Uri, role As String, ofObjectToReturn As Type) As Task(Of Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task&lt;System::Object ^&gt; ^ GetEntityAsync(Uri ^ absoluteUri, System::String ^ role, Type ^ ofObjectToReturn);" />
      <MemberSignature Language="F#" Value="abstract member GetEntityAsync : Uri * string * Type -&gt; System.Threading.Tasks.Task&lt;obj&gt;&#xA;override this.GetEntityAsync : Uri * string * Type -&gt; System.Threading.Tasks.Task&lt;obj&gt;" Usage="xmlResolver.GetEntityAsync (absoluteUri, role, ofObjectToReturn)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="absoluteUri" Type="System.Uri" />
        <Parameter Name="role" Type="System.String" />
        <Parameter Name="ofObjectToReturn" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="absoluteUri">自 <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" /> 傳回的 URI。</param>
        <param name="role">目前未使用。</param>
        <param name="ofObjectToReturn">要傳回的物件類型。 目前的版本只傳回 <see cref="T:System.IO.Stream" /> 物件。</param>
        <summary>以非同步的方式對應 URI 至包含實際資源的物件。</summary>
        <returns>如果指定的類型並非資料流，則為資料流物件或為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這是非同步版本<xref:System.Xml.XmlResolver.GetEntity%2A>，使用相同的功能。 若要使用此方法，您必須設定<xref:System.Xml.XmlReaderSettings.Async%2A>旗標設為`true`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveUri">
      <MemberSignature Language="C#" Value="public virtual Uri ResolveUri (Uri baseUri, string relativeUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Uri ResolveUri(class System.Uri baseUri, string relativeUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ResolveUri (baseUri As Uri, relativeUri As String) As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Uri ^ ResolveUri(Uri ^ baseUri, System::String ^ relativeUri);" />
      <MemberSignature Language="F#" Value="abstract member ResolveUri : Uri * string -&gt; Uri&#xA;override this.ResolveUri : Uri * string -&gt; Uri" Usage="xmlResolver.ResolveUri (baseUri, relativeUri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseUri" Type="System.Uri" />
        <Parameter Name="relativeUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="baseUri">用來解析相對 URI 的基底 URI。</param>
        <param name="relativeUri">要解析的 URI。 這個 URI 可為絕對或相對的。 若是絕對的，這個值實際上會取代 <c>baseUri</c> 值。 若是相對的，它會結合 <c>baseUri</c> 而成為絕對 URI。</param>
        <summary>在衍生類別中覆寫時，從基底和相對 URI 來解析絕對 URI。</summary>
        <returns>絕對 URI，如果相對 URI 不能解析，則為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 絕對 URI 可能作為是相對於此 URI 之實體的任何後續要求的基底 URI。  
  
   
  
## Examples  
 請參閱<xref:System.Xml.XmlUrlResolver.GetEntity%2A?displayProperty=nameWithType>的範例，會使用這個方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="relativeUri" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="SupportsType">
      <MemberSignature Language="C#" Value="public virtual bool SupportsType (Uri absoluteUri, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SupportsType(class System.Uri absoluteUri, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlResolver.SupportsType(System.Uri,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool SupportsType(Uri ^ absoluteUri, Type ^ type);" />
      <MemberSignature Language="F#" Value="abstract member SupportsType : Uri * Type -&gt; bool&#xA;override this.SupportsType : Uri * Type -&gt; bool" Usage="xmlResolver.SupportsType (absoluteUri, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="absoluteUri" Type="System.Uri" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="absoluteUri">URI。</param>
        <param name="type">要傳回的類型。</param>
        <summary>讓解析程式傳回 <see cref="T:System.IO.Stream" /> 以外的類型。</summary>
        <returns>如果支援 <paramref name="type" /> 則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>