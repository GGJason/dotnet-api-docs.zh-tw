<Type Name="XmlSecureResolver" FullName="System.Xml.XmlSecureResolver">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2c04793a28d1db5b342b4108181cd0e46777358a" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30728572" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XmlSecureResolver : System.Xml.XmlResolver" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlSecureResolver extends System.Xml.XmlResolver" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlSecureResolver" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlSecureResolver&#xA;Inherits XmlResolver" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlSecureResolver : System::Xml::XmlResolver" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xml.XmlResolver</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>以包裝 <see cref="T:System.Xml.XmlResolver" /> 物件，並限制基礎 <see cref="T:System.Xml.XmlResolver" /> 所能存取的資源，來協助保護其他 <see cref="T:System.Xml.XmlResolver" /> 實作的安全性。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlUrlResolver> 類別是 <xref:System.Xml> 命名空間中所有類別的預設解析程式。 它用來載入 XML 文件和解析外部資源，例如實體、 Dtd 或結構描述，以及匯入或 include 指示詞。  
  
 您可以藉由指定覆寫此預設<xref:System.Xml.XmlResolver>来使用的物件。 例如，如果您想要限制的資源，基礎<xref:System.Xml.XmlResolver>都可以存取，您可以使用<xref:System.Xml.XmlSecureResolver>物件。  
  
 <xref:System.Xml.XmlSecureResolver> 換行的具體實作<xref:System.Xml.XmlResolver>，並限制資源的基礎<xref:System.Xml.XmlResolver>具有存取權。 例如，<xref:System.Xml.XmlSecureResolver>能夠禁止跨網域重新導向，請從內嵌的統一資源識別元 (URI) 參考，就會發生。  
  
 當您建構<xref:System.Xml.XmlSecureResolver>物件，您提供有效<xref:System.Xml.XmlResolver>以及 URL 辨識項物件或權限集的執行個體所使用的實作<xref:System.Xml.XmlSecureResolver>來判斷安全性。 任一<xref:System.Security.PermissionSet?displayProperty=nameWithType>產生或使用現有和<xref:System.Security.PermissionSet.PermitOnly%2A?displayProperty=nameWithType>呼叫它來協助保護基礎<xref:System.Xml.XmlResolver>。  
  
> [!IMPORTANT]
>  <xref:System.Xml.XmlSecureResolver> 物件可以包含機密資訊 (如使用者認證)。 您應該要特別小心快取時<xref:System.Xml.XmlSecureResolver>物件，並不應將傳遞<xref:System.Xml.XmlSecureResolver>物件不受信任的元件。  
  
> [!IMPORTANT]
>  有一些安全性基礎結構在.NET Framework common language runtime (CLR) 上執行的程式碼和整合至 Microsoft SQL Server 2005 在 CLR 上執行的程式碼中的差異。 這可能會導致整合開發的.NET Framework CLR 的操作方式與在 SQL Server 上使用的程式碼 CLR 的情況下。 下列其中一種差異會影響<xref:System.Xml.XmlSecureResolver>類別時，您必須為基礎的 URL 辨識項 (也就是當您使用<xref:System.Xml.XmlSecureResolver.CreateEvidenceForUrl%28System.String%29>方法或<xref:System.Xml.XmlSecureResolver.%23ctor%2A>建構函式)。 原則解析的 SQL Server 的機制整合 CLR 不會使用<xref:System.Security.Policy.Url>或<xref:System.Security.Policy.Zone>資訊。 相反地，它會授與組件載入時，伺服器會將新增 GUID 為基礎的權限。 當您使用<xref:System.Xml.XmlSecureResolver>中 SQL Server 整合的 CLR，請提供直接透過使用指定的任何必要的辨識項<xref:System.Security.PermissionSet>。  
  
## <a name="to-use-a-secure-resolver"></a>若要使用安全的解析程式  
  
1.  建立具有正確使用權限集合的 <xref:System.Xml.XmlSecureResolver> 物件。  
  
2.  建立使用 <xref:System.Xml.XmlReaderSettings> 物件的 <xref:System.Xml.XmlSecureResolver> 物件。  
  
     [!code-csharp[XmlSecureResolver_Samples#5a](~/samples/snippets/csharp/VS_Snippets_Data/XmlSecureResolver_Samples/CS/XmlSecureResolver_ex.cs#5a)]
     [!code-vb[XmlSecureResolver_Samples#5a](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSecureResolver_Samples/VB/XmlSecureResolver_ex.vb#5a)]  
  
3.  傳遞<xref:System.Xml.XmlReaderSettings>物件<xref:System.Xml.XmlReader.Create%2A>方法，當您在建立時<xref:System.Xml.XmlReader>物件。  
  
     [!code-csharp[XmlSecureResolver_Samples#5b](~/samples/snippets/csharp/VS_Snippets_Data/XmlSecureResolver_Samples/CS/XmlSecureResolver_ex.cs#5b)]
     [!code-vb[XmlSecureResolver_Samples#5b](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSecureResolver_Samples/VB/XmlSecureResolver_ex.vb#5b)]  
  
## <a name="to-restrict-access-by-using-a-url"></a>若要使用的 URL 限制存取  
 使用<xref:System.Xml.XmlSecureResolver.%23ctor%28System.Xml.XmlResolver%2CSystem.String%29>建構函式建立<xref:System.Xml.XmlSecureResolver>存取近端內部網路網站只允許的物件。  
  
 [!code-csharp[XmlSecureResolver_Samples#3](~/samples/snippets/csharp/VS_Snippets_Data/XmlSecureResolver_Samples/CS/XmlSecureResolver_ex.cs#3)]
 [!code-vb[XmlSecureResolver_Samples#3](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSecureResolver_Samples/VB/XmlSecureResolver_ex.vb#3)]  
  
## <a name="to-restrict-access-by-using-a-permission-set"></a>若要使用的權限集合限制存取  
  
1.  建立 <xref:System.Net.WebPermission> 物件。  
  
     [!code-csharp[XmlSecureResolver_Samples#4a](~/samples/snippets/csharp/VS_Snippets_Data/XmlSecureResolver_Samples/CS/XmlSecureResolver_ex.cs#4a)]
     [!code-vb[XmlSecureResolver_Samples#4a](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSecureResolver_Samples/VB/XmlSecureResolver_ex.vb#4a)]  
  
2.  指定您想要允許存取的 Url。  
  
     [!code-csharp[XmlSecureResolver_Samples#4b](~/samples/snippets/csharp/VS_Snippets_Data/XmlSecureResolver_Samples/CS/XmlSecureResolver_ex.cs#4b)]
     [!code-vb[XmlSecureResolver_Samples#4b](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSecureResolver_Samples/VB/XmlSecureResolver_ex.vb#4b)]  
  
3.  將 Web 使用權限加入至 <xref:System.Security.PermissionSet> 物件。  
  
     [!code-csharp[XmlSecureResolver_Samples#4c](~/samples/snippets/csharp/VS_Snippets_Data/XmlSecureResolver_Samples/CS/XmlSecureResolver_ex.cs#4c)]
     [!code-vb[XmlSecureResolver_Samples#4c](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSecureResolver_Samples/VB/XmlSecureResolver_ex.vb#4c)]  
  
4.  使用<xref:System.Xml.XmlSecureResolver.%23ctor%28System.Xml.XmlResolver%2CSystem.Security.PermissionSet%29>建構函式建立<xref:System.Xml.XmlSecureResolver>使用權限集合的物件。  
  
     [!code-csharp[XmlSecureResolver_Samples#4d](~/samples/snippets/csharp/VS_Snippets_Data/XmlSecureResolver_Samples/CS/XmlSecureResolver_ex.cs#4d)]
     [!code-vb[XmlSecureResolver_Samples#4d](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSecureResolver_Samples/VB/XmlSecureResolver_ex.vb#4d)]  
  
     請參閱<xref:System.Xml.XmlSecureResolver.%23ctor%2A>參考頁面的另一個範例。  
  
## <a name="to-restrict-access-by-using-evidence"></a>使用辨識項來限制存取  
 您可以使用來限制存取<xref:System.Xml.XmlSecureResolver.%23ctor%28System.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29>建構函式，並指定<xref:System.Security.Policy.Evidence>。 <xref:System.Security.Policy.Evidence> 可用於建立 <xref:System.Security.PermissionSet>，其會套用至基礎 <xref:System.Xml.XmlResolver>。 在開啟任何資源之前，<xref:System.Xml.XmlSecureResolver> 都會呼叫已建立之 <xref:System.Security.PermissionSet.PermitOnly%2A> 上的 <xref:System.Security.PermissionSet>。  
  
 以下是一些常見案例，以及每個提供的辨識項型別：  
  
-   如果您使用完全信任的環境中，使用您的組件來建立辨識項：  
  
     [!code-csharp[XmlSecureResolver_Samples#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSecureResolver_Samples/CS/XmlSecureResolver_ex.cs#1)]
     [!code-vb[XmlSecureResolver_Samples#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSecureResolver_Samples/VB/XmlSecureResolver_ex.vb#1)]  
  
-   如果您使用非完全信任環境中，您的程式碼或來自外部來源，且您知道外部來源的源頭和可驗證的 URI，請使用 URI 建立辨識項：  
  
     [!code-csharp[XmlSecureResolver_Samples#2](~/samples/snippets/csharp/VS_Snippets_Data/XmlSecureResolver_Samples/CS/XmlSecureResolver_ex.cs#2)]
     [!code-vb[XmlSecureResolver_Samples#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSecureResolver_Samples/VB/XmlSecureResolver_ex.vb#2)]  
  
-   如果您使用非完全信任的環境，而且您的程式碼或來自外部來源，但您不知道來源的外部來源，請：  
  
     將 `evidence` 參數設定為 `null`。 這可以拒絕對資源的任何存取。  
  
     -或-  
  
     如果應用程式需要資源的某些存取權，請要求呼叫端的辨識項。  
  
## <a name="to-use-the-secure-resolver-to-load-an-xslt-style-sheet"></a>要用來載入 XSLT 樣式表的安全的解析程式  
  
1.  建立具有正確使用權限集合的 <xref:System.Xml.XmlSecureResolver> 物件。  
  
2.  將 <xref:System.Xml.XmlSecureResolver> 傳遞至 <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> 方法。  
  
     [!code-csharp[XmlSecureResolver_Samples#6](~/samples/snippets/csharp/VS_Snippets_Data/XmlSecureResolver_Samples/CS/XmlSecureResolver_ex.cs#6)]
     [!code-vb[XmlSecureResolver_Samples#6](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSecureResolver_Samples/VB/XmlSecureResolver_ex.vb#6)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>這個類別具有繼承要求。 完全信任才能繼承自<see cref="T:System.Xml.XmlSecureResolver" />類別。</para>
    </block>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Xml.XmlSecureResolver" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 三個建構函式提供三種類型的存取限制：  
  
-   <xref:System.Xml.XmlSecureResolver.%23ctor%28System.Xml.XmlResolver%2CSystem.String%29>建構函式會使用 URL 來限制存取。  
  
-   <xref:System.Xml.XmlSecureResolver.%23ctor%28System.Xml.XmlResolver%2CSystem.Security.PermissionSet%29>建構函式會使用的權限集合來限制存取。  
  
-   <xref:System.Xml.XmlSecureResolver.%23ctor%28System.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29>建構函式會限制存取使用的辨識項。  
  
 請參閱建構函式參考主題，如需範例，這些類型的限制。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSecureResolver (System.Xml.XmlResolver resolver, System.Security.PermissionSet permissionSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlResolver resolver, class System.Security.PermissionSet permissionSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlSecureResolver.#ctor(System.Xml.XmlResolver,System.Security.PermissionSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSecureResolver(System::Xml::XmlResolver ^ resolver, System::Security::PermissionSet ^ permissionSet);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
        <Parameter Name="permissionSet" Type="System.Security.PermissionSet" />
      </Parameters>
      <Docs>
        <param name="resolver">
          <see cref="T:System.Xml.XmlSecureResolver" /> 所包裝的 XML 解析程式。</param>
        <param name="permissionSet">要套用至基礎 <see cref="T:System.Xml.XmlResolver" /> 的權限集。 <see cref="T:System.Xml.XmlSecureResolver" /> 先呼叫權限集上的 <see cref="M:System.Security.PermissionSet.PermitOnly" /> 方法，然後才呼叫基礎 XML 解析程式上的 <see cref="M:System.Xml.XmlSecureResolver.GetEntity(System.Uri,System.String,System.Type)" /> 方法。</param>
        <summary>指定 <see cref="T:System.Xml.XmlResolver" /> 和 <see cref="T:System.Security.PermissionSet" /> 來初始化 <see cref="T:System.Xml.XmlSecureResolver" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例會建構<xref:System.Xml.XmlSecureResolver>物件使用的自訂權限集合。  
  
 [!code-cpp[XmlSecureResolver.cctor#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlSecureResolver.cctor/CPP/secresolver.cpp#1)]
 [!code-csharp[XmlSecureResolver.cctor#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSecureResolver.cctor/CS/secresolver.cs#1)]
 [!code-vb[XmlSecureResolver.cctor#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSecureResolver.cctor/VB/secresolver.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlSecureResolver.CreateEvidenceForUrl(System.String)" />
        <altmember cref="T:System.Security.Policy.Evidence" />
        <altmember cref="T:System.Net.WebPermission" />
        <altmember cref="T:System.Security.SecurityManager" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSecureResolver (System.Xml.XmlResolver resolver, System.Security.Policy.Evidence evidence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlResolver resolver, class System.Security.Policy.Evidence evidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlSecureResolver.#ctor(System.Xml.XmlResolver,System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSecureResolver(System::Xml::XmlResolver ^ resolver, System::Security::Policy::Evidence ^ evidence);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="resolver">
          <see cref="T:System.Xml.XmlSecureResolver" /> 所包裝的 XML 解析程式。</param>
        <param name="evidence">用來建立 <see cref="T:System.Security.PermissionSet" /> 且將套用至基礎 <see cref="T:System.Xml.XmlResolver" /> 的辨識項。 <see cref="T:System.Xml.XmlSecureResolver" /> 會先呼叫已建立之 <see cref="T:System.Security.PermissionSet" /> 上的 <see cref="M:System.Security.PermissionSet.PermitOnly" /> 方法，然後才呼叫基礎 <see cref="T:System.Xml.XmlResolver" /> 上的 <see cref="M:System.Xml.XmlSecureResolver.GetEntity(System.Uri,System.String,System.Type)" />。</param>
        <summary>指定 <see cref="T:System.Xml.XmlResolver" /> 和 <see cref="T:System.Security.Policy.Evidence" /> 來初始化 <see cref="T:System.Xml.XmlSecureResolver" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 以下是一些可能的案例，以及每個案例所提供的辨識項型別：  
  
-   如果您使用完全信任的環境中，使用您的組件來建立辨識項：  
  
     [!code-csharp[XmlSecureResolver_Samples#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSecureResolver_Samples/CS/XmlSecureResolver_ex.cs#1)]
     [!code-vb[XmlSecureResolver_Samples#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSecureResolver_Samples/VB/XmlSecureResolver_ex.vb#1)]  
  
-   如果您使用非完全信任環境中，您的程式碼或來自外部來源，且您知道外部來源的源頭和可驗證的 URI，請使用 URI 建立辨識項：  
  
     [!code-csharp[XmlSecureResolver_Samples#2](~/samples/snippets/csharp/VS_Snippets_Data/XmlSecureResolver_Samples/CS/XmlSecureResolver_ex.cs#2)]
     [!code-vb[XmlSecureResolver_Samples#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSecureResolver_Samples/VB/XmlSecureResolver_ex.vb#2)]  
  
-   如果您使用非完全信任的環境，而且您的程式碼或來自外部來源，但您不知道來源的外部來源，請：  
  
     將 `evidence` 參數設定為 `null`。 這可以拒絕對資源的任何存取。  
  
     -或-  
  
     如果應用程式需要資源的某些存取權，請要求呼叫端的辨識項。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSecureResolver (System.Xml.XmlResolver resolver, string securityUrl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlResolver resolver, string securityUrl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlSecureResolver.#ctor(System.Xml.XmlResolver,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (resolver As XmlResolver, securityUrl As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSecureResolver(System::Xml::XmlResolver ^ resolver, System::String ^ securityUrl);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
        <Parameter Name="securityUrl" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resolver">
          <see cref="T:System.Xml.XmlSecureResolver" /> 所包裝的 XML 解析程式。</param>
        <param name="securityUrl">用來建立將套用至基礎 <see cref="T:System.Xml.XmlResolver" /> 的 <see cref="T:System.Security.PermissionSet" /> 之 URL。 <see cref="T:System.Xml.XmlSecureResolver" /> 會先呼叫已建立之 <see cref="T:System.Security.PermissionSet" /> 上的 <see cref="M:System.Security.PermissionSet.PermitOnly" />，然後才呼叫基礎 <see cref="T:System.Xml.XmlResolver" /> 上的 <see cref="M:System.Xml.XmlSecureResolver.GetEntity(System.Uri,System.String,System.Type)" />。</param>
        <summary>使用提供的 <see cref="T:System.Xml.XmlResolver" /> 和 URL，初始化 <see cref="T:System.Xml.XmlSecureResolver" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  有一些安全性基礎結構在.NET Framework common language runtime (CLR) 上執行的程式碼和整合至 Microsoft SQL Server 2005 在 CLR 上執行的程式碼中的差異。 這可能會導致整合開發的.NET Framework CLR 的操作方式與在 SQL Server 上使用的程式碼 CLR 的情況下。 下列其中一種差異會影響<xref:System.Xml.XmlSecureResolver>類別時，您必須為基礎的 URL 辨識項 (也就是當您使用<xref:System.Xml.XmlSecureResolver.CreateEvidenceForUrl%2A>方法或<xref:System.Xml.XmlSecureResolver.%23ctor%28System.Xml.XmlResolver%2CSystem.String%29>建構函式)。 原則解析的 SQL Server 的機制整合 CLR 不會使用<xref:System.Security.Policy.Url>或<xref:System.Security.Policy.Zone>資訊。 相反地，它會授與組件載入時，伺服器會將新增 GUID 為基礎的權限。 當您使用<xref:System.Xml.XmlSecureResolver>中 SQL Server 整合的 CLR，請提供直接透過使用指定的任何必要的辨識項<xref:System.Security.PermissionSet>。  
  
   
  
## Examples  
 這個範例會使用<xref:System.Xml.XmlSecureResolver.%23ctor%28System.Xml.XmlResolver%2CSystem.String%29>建構函式建立<xref:System.Xml.XmlSecureResolver>存取近端內部網路網站只允許的物件。  
  
 [!code-csharp[XmlSecureResolver_Samples#3](~/samples/snippets/csharp/VS_Snippets_Data/XmlSecureResolver_Samples/CS/XmlSecureResolver_ex.cs#3)]
 [!code-vb[XmlSecureResolver_Samples#3](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSecureResolver_Samples/VB/XmlSecureResolver_ex.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateEvidenceForUrl">
      <MemberSignature Language="C#" Value="public static System.Security.Policy.Evidence CreateEvidenceForUrl (string securityUrl);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Policy.Evidence CreateEvidenceForUrl(string securityUrl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlSecureResolver.CreateEvidenceForUrl(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateEvidenceForUrl (securityUrl As String) As Evidence" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Policy::Evidence ^ CreateEvidenceForUrl(System::String ^ securityUrl);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Policy.Evidence</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="securityUrl" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="securityUrl">用來建立辨識項的 URL。</param>
        <summary>使用提供的 URL 建立辨識項。</summary>
        <returns>由提供的 URL 產生之辨識項，此 URL 由預設原則定義。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  有一些安全性基礎結構在.NET Framework common language runtime (CLR) 上執行的程式碼和整合至 Microsoft SQL Server 2005 在 CLR 上執行的程式碼中的差異。 這可能會導致整合開發的.NET Framework CLR 的操作方式與在 SQL Server 上使用的程式碼 CLR 的情況下。 下列其中一種差異會影響<xref:System.Xml.XmlSecureResolver>類別時，您必須為基礎的 URL 辨識項 (也就是當您使用<xref:System.Xml.XmlSecureResolver.CreateEvidenceForUrl%2A>方法或<xref:System.Xml.XmlSecureResolver.%23ctor%28System.Xml.XmlResolver%2CSystem.String%29>建構函式)。 原則不會使用解決機制的 SQL Server 整合的 CLR<xref:System.Security.Policy.Url>或<xref:System.Security.Policy.Zone>資訊。 相反地，它會授與組件載入時，伺服器會將新增 GUID 為基礎的權限。 當您使用<xref:System.Xml.XmlSecureResolver>中 SQL Server 整合的 CLR，請提供直接透過使用指定的任何必要的辨識項<xref:System.Security.PermissionSet>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Credentials">
      <MemberSignature Language="C#" Value="public override System.Net.ICredentials Credentials { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.ICredentials Credentials" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlSecureResolver.Credentials" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Credentials As ICredentials" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Net::ICredentials ^ Credentials {  void set(System::Net::ICredentials ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.ICredentials</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>設定用以驗證 Web 要求的認證資訊。</summary>
        <value>用以驗證 Web 要求的認證。 <see cref="T:System.Xml.XmlSecureResolver" /> 會在基礎 <see cref="T:System.Xml.XmlResolver" /> 上設定指定的認證。 如果未設定這個屬性，其值會預設為 <see langword="null" />；也就是說，<see cref="T:System.Xml.XmlSecureResolver" /> 沒有使用者認證。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例會使用<xref:System.Xml.XmlSecureResolver>並解決，然後開啟所需的網路資源的預設認證<xref:System.Xml.XmlTextReader>。  
  
 [!code-cpp[XmlSecureResolver.Credentials#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlSecureResolver.Credentials/CPP/secresolver2.cpp#1)]
 [!code-csharp[XmlSecureResolver.Credentials#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSecureResolver.Credentials/CS/secresolver2.cs#1)]
 [!code-vb[XmlSecureResolver.Credentials#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSecureResolver.Credentials/VB/secresolver2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="P:System.Net.CredentialCache.DefaultCredentials" />
      </Docs>
    </Member>
    <Member MemberName="GetEntity">
      <MemberSignature Language="C#" Value="public override object GetEntity (Uri absoluteUri, string role, Type ofObjectToReturn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object GetEntity(class System.Uri absoluteUri, string role, class System.Type ofObjectToReturn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlSecureResolver.GetEntity(System.Uri,System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEntity (absoluteUri As Uri, role As String, ofObjectToReturn As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ GetEntity(Uri ^ absoluteUri, System::String ^ role, Type ^ ofObjectToReturn);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="absoluteUri" Type="System.Uri" />
        <Parameter Name="role" Type="System.String" />
        <Parameter Name="ofObjectToReturn" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="absoluteUri">自 <see cref="M:System.Xml.XmlSecureResolver.ResolveUri(System.Uri,System.String)" /> 傳回的 URI。</param>
        <param name="role">目前未使用。</param>
        <param name="ofObjectToReturn">要傳回的物件類型。 目前的版本只傳回 <see cref="T:System.IO.Stream" /> 物件。</param>
        <summary>對應 URI 至包含實際資源的物件。 這個方法會呼叫基礎 <see cref="M:System.Security.PermissionSet.PermitOnly" /> 來暫時設定建立在建構函式上的 <see cref="T:System.Security.PermissionSet" />，然後才呼叫基礎 <see cref="T:System.Xml.XmlResolver" />上的 <see langword="GetEntity" /> 以開啟資源。</summary>
        <returns>藉由呼叫基礎 <see cref="T:System.Xml.XmlResolver" /> 上的 <see langword="GetEntity" />，傳回資料流。 若指定了非 <see cref="T:System.IO.Stream" /> 的類型，則方法會傳回 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  您的應用程式可以降低記憶體阻斷服務威脅<xref:System.Xml.XmlSecureResolver.GetEntity%2A>方法藉由實作<xref:System.Runtime.InteropServices.ComTypes.IStream>，它會限制讀取的位元組數目。 這有助於防範惡意程式碼嘗試傳遞無限的資料流的位元組的情況下<xref:System.Xml.XmlSecureResolver.GetEntity%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">
          <paramref name="ofObjectToReturn" /> 既不是 <see langword="null" /> 也不是 <see cref="T:System.IO.Stream" /> 型別。</exception>
        <exception cref="T:System.UriFormatException">指定的 URI 並非絕對 URI。</exception>
        <exception cref="T:System.NullReferenceException">
          <paramref name="absoluteUri" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.Exception">發生執行階段錯誤 (例如中斷的伺服器連線)。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetEntityAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;object&gt; GetEntityAsync (Uri absoluteUri, string role, Type ofObjectToReturn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;object&gt; GetEntityAsync(class System.Uri absoluteUri, string role, class System.Type ofObjectToReturn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlSecureResolver.GetEntityAsync(System.Uri,System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEntityAsync (absoluteUri As Uri, role As String, ofObjectToReturn As Type) As Task(Of Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task&lt;System::Object ^&gt; ^ GetEntityAsync(Uri ^ absoluteUri, System::String ^ role, Type ^ ofObjectToReturn);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="absoluteUri" Type="System.Uri" />
        <Parameter Name="role" Type="System.String" />
        <Parameter Name="ofObjectToReturn" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="absoluteUri">自 <see cref="M:System.Xml.XmlSecureResolver.ResolveUri(System.Uri,System.String)" /> 傳回的 URI。</param>
        <param name="role">目前未使用。</param>
        <param name="ofObjectToReturn">要傳回的物件類型。 目前的版本只傳回 <see cref="T:System.IO.Stream" /> 物件。</param>
        <summary>以非同步的方式對應 URI 至包含實際資源的物件。</summary>
        <returns>藉由呼叫基礎 <see cref="T:System.Xml.XmlResolver" /> 上的 <see langword="GetEntity" />，傳回資料流。 若指定了非 <see cref="T:System.IO.Stream" /> 的類型，則方法會傳回 <see langword="null" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveUri">
      <MemberSignature Language="C#" Value="public override Uri ResolveUri (Uri baseUri, string relativeUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Uri ResolveUri(class System.Uri baseUri, string relativeUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlSecureResolver.ResolveUri(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ResolveUri (baseUri As Uri, relativeUri As String) As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Uri ^ ResolveUri(Uri ^ baseUri, System::String ^ relativeUri);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseUri" Type="System.Uri" />
        <Parameter Name="relativeUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="baseUri">用來解析相對 URI 的基底 URI。</param>
        <param name="relativeUri">要解析的 URI。 這個 URI 可為絕對或相對的。 若是絕對的，這個值實際上會取代 <c>baseUri</c> 值。 若是相對的，它會結合 <c>baseUri</c> 而成為絕對 URI。</param>
        <summary>藉由呼叫基礎 <see cref="T:System.Xml.XmlResolver" /> 上的 <see langword="ResolveUri" />，從基底和相對 URI 中解析絕對 URI。</summary>
        <returns>如果不能解析相對 URI (由呼叫基礎 <see cref="T:System.Xml.XmlResolver" /> 上的 <see langword="ResolveUri" /> 傳回)，則為絕對 URI 或 <see langword="null" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="relativeUri" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
  </Members>
</Type>