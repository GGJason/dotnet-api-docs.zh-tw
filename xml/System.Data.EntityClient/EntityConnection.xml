<Type Name="EntityConnection" FullName="System.Data.EntityClient.EntityConnection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="384a4e9b8077be465ec13086c481928809fbf963" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39833033" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class EntityConnection : System.Data.Common.DbConnection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit EntityConnection extends System.Data.Common.DbConnection" />
  <TypeSignature Language="DocId" Value="T:System.Data.EntityClient.EntityConnection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class EntityConnection&#xA;Inherits DbConnection" />
  <TypeSignature Language="C++ CLI" Value="public ref class EntityConnection sealed : System::Data::Common::DbConnection" />
  <TypeSignature Language="F#" Value="type EntityConnection = class&#xA;    inherit DbConnection" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.DbConnection</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>包含概念模型的參考和資料來源連接。 這個類別無法被繼承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要避免不小心讓類似 <xref:System.Data.Common.CommandTrees> 和 <xref:System.Data.Objects.ObjectContext> 等物件與其中繼資料未同步，<xref:System.Data.EntityClient.EntityConnection> 必須鎖定它的中繼資料。 當鎖定中繼資料以後，就不允許對連接字串做任何變更。 以下是鎖定中繼資料的兩個案例：  
  
-   透過預設建構函式 (Constructor) 或 <xref:System.Data.EntityClient.EntityConnection> 建構函式 (可接受連接字串) 來建構 <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> 執行個體。 在任何一種情況下，連接字串都可能會在開啟連接之前變更多次。 呼叫 <xref:System.Data.EntityClient.EntityConnection.Open%2A> 或 <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> 會鎖定中繼資料。  
  
-   透過可接受 <xref:System.Data.EntityClient.EntityConnection> 和 <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> 的 <xref:System.Data.Metadata.Edm.MetadataWorkspace> 建構函式來建構 <xref:System.Data.Common.DbConnection> 執行個體。 在此情況下，中繼資料會在建構時鎖定。 不允許對連接字串做任何變更。  
  
 當載入中繼資料時，<xref:System.Data.EntityClient.EntityConnection> 會驗證概念模型、儲存模型及對應檔是否都存在。  
  
 如需程式碼範例，請參閱[使用 EntityClient](http://msdn.microsoft.com/library/dec4728c-8dff-4e30-abe0-0f78fb5d5af5)。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Data.EntityClient.EntityConnection" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要避免不小心讓類似 <xref:System.Data.Common.CommandTrees> 和 <xref:System.Data.Objects.ObjectContext> 等物件與其中繼資料未同步，<xref:System.Data.EntityClient.EntityConnection> 必須鎖定它的中繼資料。 當鎖定中繼資料以後，就不允許對連接字串做任何變更。 以下是鎖定中繼資料的兩個案例：  
  
-   透過預設建構函式 (Constructor) 或 <xref:System.Data.EntityClient.EntityConnection> 建構函式 (可接受連接字串) 來建構 <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> 執行個體。 在任何一種情況下，連接字串都可能會在開啟連接之前變更多次。 呼叫 <xref:System.Data.EntityClient.EntityConnection.Open%2A> 或 <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> 會鎖定中繼資料。  
  
-   透過可接受 <xref:System.Data.EntityClient.EntityConnection> 和 <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> 的 <xref:System.Data.Metadata.Edm.MetadataWorkspace> 建構函式來建構 <xref:System.Data.Common.DbConnection> 執行個體。 在此情況下，中繼資料會在建構時鎖定。 不允許對連接字串做任何變更。  
  
 當載入中繼資料時，<xref:System.Data.EntityClient.EntityConnection> 會驗證概念模型、儲存模型及對應檔是否都存在。  
  
 如需程式碼範例，請參閱[使用 EntityClient](http://msdn.microsoft.com/library/dec4728c-8dff-4e30-abe0-0f78fb5d5af5)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityConnection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EntityConnection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Data.EntityClient.EntityConnection" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要避免不小心讓類似 <xref:System.Data.Common.CommandTrees> 和 <xref:System.Data.Objects.ObjectContext> 等物件與其中繼資料未同步，<xref:System.Data.EntityClient.EntityConnection> 必須鎖定它的中繼資料。 當鎖定中繼資料以後，就不允許對連接字串做任何變更。 以下是鎖定中繼資料的兩個案例：  
  
-   透過預設建構函式 (Constructor) 或 <xref:System.Data.EntityClient.EntityConnection> 建構函式 (可接受連接字串) 來建構 <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> 執行個體。 在任何一種情況下，連接字串都可能會在開啟連接之前變更多次。 呼叫 <xref:System.Data.EntityClient.EntityConnection.Open%2A> 或 <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> 會鎖定中繼資料。  
  
-   透過可接受 <xref:System.Data.EntityClient.EntityConnection> 和 <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> 的 <xref:System.Data.Metadata.Edm.MetadataWorkspace> 建構函式來建構 <xref:System.Data.Common.DbConnection> 執行個體。 在此情況下，中繼資料會在建構時鎖定。 不允許對連接字串做任何變更。  
  
 當載入中繼資料時，<xref:System.Data.EntityClient.EntityConnection> 會驗證概念模型、儲存模型及對應檔是否都存在。  
  
 如需程式碼範例，請參閱[使用 EntityClient](http://msdn.microsoft.com/library/dec4728c-8dff-4e30-abe0-0f78fb5d5af5)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityConnection (string connectionString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EntityConnection(System::String ^ connectionString);" />
      <MemberSignature Language="F#" Value="new System.Data.EntityClient.EntityConnection : string -&gt; System.Data.EntityClient.EntityConnection" Usage="new System.Data.EntityClient.EntityConnection connectionString" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">提供者特定連接字串。</param>
        <summary>根據連接字串初始化 <see cref="T:System.Data.EntityClient.EntityConnection" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 產生應用程式的組態檔中儲存的具名的連接字串中。 可以提供此具名的連接字串，取代`connectionString`參數，當您具現化<xref:System.Data.EntityClient.EntityConnection>類別。  
  
 若要避免不小心讓 <xref:System.Data.Common.CommandTrees> 和 <xref:System.Data.Objects.ObjectContext> 物件與其中繼資料未同步，<xref:System.Data.EntityClient.EntityConnection> 必須鎖定它的中繼資料。 當鎖定中繼資料以後，就不允許對連接字串做任何變更。 以下是鎖定中繼資料的兩個案例：  
  
-   透過預設建構函式或是可接受連接字串的這個建構函式 (<xref:System.Data.EntityClient.EntityConnection>) 來建構 <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> 執行個體。 在任何一種情況下，連接字串都可能會在開啟連接之前變更多次。 呼叫 <xref:System.Data.EntityClient.EntityConnection.Open%2A> 或 <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> 會鎖定中繼資料。  
  
-   透過可接受 <xref:System.Data.EntityClient.EntityConnection> 和 <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> 的 <xref:System.Data.Metadata.Edm.MetadataWorkspace> 建構函式來建構 <xref:System.Data.Common.DbConnection> 執行個體。 在此情況下，中繼資料會在建構時鎖定。 不允許對連接字串做任何變更。  
  
 當載入中繼資料時，<xref:System.Data.EntityClient.EntityConnection> 會驗證概念模型、儲存模型及對應檔是否都存在。  
  
 如需程式碼範例，請參閱[使用 EntityClient](http://msdn.microsoft.com/library/dec4728c-8dff-4e30-abe0-0f78fb5d5af5)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">已提供無效的連接字串關鍵字，或尚未提供必要的連接字串關鍵字。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityConnection (System.Data.Metadata.Edm.MetadataWorkspace workspace, System.Data.Common.DbConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.Metadata.Edm.MetadataWorkspace workspace, class System.Data.Common.DbConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.#ctor(System.Data.Metadata.Edm.MetadataWorkspace,System.Data.Common.DbConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (workspace As MetadataWorkspace, connection As DbConnection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EntityConnection(System::Data::Metadata::Edm::MetadataWorkspace ^ workspace, System::Data::Common::DbConnection ^ connection);" />
      <MemberSignature Language="F#" Value="new System.Data.EntityClient.EntityConnection : System.Data.Metadata.Edm.MetadataWorkspace * System.Data.Common.DbConnection -&gt; System.Data.EntityClient.EntityConnection" Usage="new System.Data.EntityClient.EntityConnection (workspace, connection)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="workspace" Type="System.Data.Metadata.Edm.MetadataWorkspace" />
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
      </Parameters>
      <Docs>
        <param name="workspace">與這個 <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> 相關聯的 <see cref="T:System.Data.EntityClient.EntityConnection" />。</param>
        <param name="connection">這個 <see cref="T:System.Data.EntityClient.EntityConnection" /> 物件的基礎資料來源連接。</param>
        <summary>使用指定的 <see cref="T:System.Data.EntityClient.EntityConnection" /> 和 <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> 初始化 <see cref="T:System.Data.Common.DbConnection" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此建構函式可讓您從不是檔案或磁碟內的中繼資料或是從組件 (Assembly) 內的內嵌資源來建立 <xref:System.Data.EntityClient.EntityConnection>。  
  
 若要避免不小心讓類似 <xref:System.Data.Common.CommandTrees> 和 <xref:System.Data.Objects.ObjectContext> 等物件與其中繼資料未同步，<xref:System.Data.EntityClient.EntityConnection> 必須鎖定它的中繼資料。 當鎖定中繼資料以後，就不允許對連接字串做任何變更。 以下是鎖定中繼資料的兩個案例：  
  
-   透過預設建構函式 (Constructor) 或 <xref:System.Data.EntityClient.EntityConnection> 建構函式 (可接受連接字串) 來建構 <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> 執行個體。 在任何一種情況下，連接字串都可能會在開啟連接之前變更多次。 呼叫 <xref:System.Data.EntityClient.EntityConnection.Open%2A> 或 <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> 會鎖定中繼資料。  
  
-   透過可接受 <xref:System.Data.EntityClient.EntityConnection> 和 <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> 的這個建構函式 (<xref:System.Data.Metadata.Edm.MetadataWorkspace>) 來建構 <xref:System.Data.Common.DbConnection> 執行個體。 在此情況下，中繼資料會在建構時鎖定。 不允許對連接字串做任何變更。  
  
 當載入中繼資料時，<xref:System.Data.EntityClient.EntityConnection> 會驗證概念模型、儲存模型及對應檔是否都存在。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workspace" /> 或 <paramref name="connection" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">工作區中遺漏概念模型。  
  
-或- 
工作區中遺漏對應檔。  
  
-或- 
工作區中遺漏儲存模型。  
  
-或- 
<paramref name="connection" /> 不是關閉的狀態。</exception>
        <exception cref="T:System.Data.ProviderIncompatibleException">
          <paramref name="connection" /> 不是來自於 ADO.NET Entity Framework 相容的提供者。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginDbTransaction">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbTransaction BeginDbTransaction (System.Data.IsolationLevel isolationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.DbTransaction BeginDbTransaction(valuetype System.Data.IsolationLevel isolationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.BeginDbTransaction(System.Data.IsolationLevel)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Data::Common::DbTransaction ^ BeginDbTransaction(System::Data::IsolationLevel isolationLevel);" />
      <MemberSignature Language="F#" Value="override this.BeginDbTransaction : System.Data.IsolationLevel -&gt; System.Data.Common.DbTransaction" Usage="entityConnection.BeginDbTransaction isolationLevel" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbTransaction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isolationLevel" Type="System.Data.IsolationLevel" />
      </Parameters>
      <Docs>
        <param name="isolationLevel">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginTransaction">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>開始資料庫異動。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginTransaction">
      <MemberSignature Language="C#" Value="public System.Data.EntityClient.EntityTransaction BeginTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.EntityClient.EntityTransaction BeginTransaction() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.BeginTransaction" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginTransaction () As EntityTransaction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::EntityClient::EntityTransaction ^ BeginTransaction();" />
      <MemberSignature Language="F#" Value="override this.BeginTransaction : unit -&gt; System.Data.EntityClient.EntityTransaction" Usage="entityConnection.BeginTransaction " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.EntityClient.EntityTransaction</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>使用基礎提供者開始異動。</summary>
        <returns>新的 <see cref="T:System.Data.EntityClient.EntityTransaction" />。 傳回的 <see cref="T:System.Data.EntityClient.EntityTransaction" /> 執行個體可以在之後與 <see cref="T:System.Data.EntityClient.EntityCommand" /> 產生關聯，以便在該交易之下執行命令。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A> 方法會使用 <xref:System.Data.IsolationLevel.Unspecified> 交易隔離等級。 若要指定不同的隔離等級，請呼叫 <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A>。 不同基礎提供者可能會以不同方式解譯這個值。 如果您希望可以在多個提供者之間移植應用程式，應該呼叫 <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A> 來明確指定交易隔離等級。  
  
 在任何特定時刻，都不能有一個以上的使用中交易是透過 <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A> 所建立。 嘗試在具有目前交易結果的 <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A> 上呼叫任何一個 <xref:System.Data.EntityClient.EntityConnection> 多載會產生 <xref:System.InvalidOperationException>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">基礎提供者未知。  
  
-或- 
<see cref="M:System.Data.EntityClient.EntityConnection.BeginTransaction" /> 的呼叫是在具有目前交易的 <see cref="T:System.Data.EntityClient.EntityConnection" /> 上進行。  
  
-或- 
<see cref="T:System.Data.EntityClient.EntityConnection" /> 的狀態不是 <see cref="F:System.Data.ConnectionState.Open" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginTransaction">
      <MemberSignature Language="C#" Value="public System.Data.EntityClient.EntityTransaction BeginTransaction (System.Data.IsolationLevel isolationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.EntityClient.EntityTransaction BeginTransaction(valuetype System.Data.IsolationLevel isolationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.BeginTransaction(System.Data.IsolationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::EntityClient::EntityTransaction ^ BeginTransaction(System::Data::IsolationLevel isolationLevel);" />
      <MemberSignature Language="F#" Value="override this.BeginTransaction : System.Data.IsolationLevel -&gt; System.Data.EntityClient.EntityTransaction" Usage="entityConnection.BeginTransaction isolationLevel" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.EntityClient.EntityTransaction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isolationLevel" Type="System.Data.IsolationLevel" />
      </Parameters>
      <Docs>
        <param name="isolationLevel">異動的隔離等級。</param>
        <summary>使用基礎提供者開始具有指定之隔離等級的異動。</summary>
        <returns>新的 <see cref="T:System.Data.EntityClient.EntityTransaction" />。 傳回的 <see cref="T:System.Data.EntityClient.EntityTransaction" /> 執行個體可以在之後與 <see cref="T:System.Data.EntityClient.EntityCommand" /> 產生關聯，以便在該交易之下執行命令。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在任何特定時刻，都不能有一個以上的使用中交易是透過 <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A> 所建立。 嘗試在具有目前交易結果的 <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A> 上呼叫任何一個 <xref:System.Data.EntityClient.EntityConnection> 多載會產生 <xref:System.InvalidOperationException>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">基礎提供者未知。  
  
-或- 
<see cref="M:System.Data.EntityClient.EntityConnection.BeginTransaction" /> 的呼叫是在具有目前交易的 <see cref="T:System.Data.EntityClient.EntityConnection" /> 上進行。  
  
-或- 
<see cref="T:System.Data.EntityClient.EntityConnection" /> 的狀態不是 <see cref="F:System.Data.ConnectionState.Open" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="ChangeDatabase">
      <MemberSignature Language="C#" Value="public override void ChangeDatabase (string databaseName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ChangeDatabase(string databaseName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.ChangeDatabase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ChangeDatabase (databaseName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ChangeDatabase(System::String ^ databaseName);" />
      <MemberSignature Language="F#" Value="override this.ChangeDatabase : string -&gt; unit" Usage="entityConnection.ChangeDatabase databaseName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="databaseName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="databaseName">不支援。</param>
        <summary>不支援。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.EntityClient.EntityConnection.ChangeDatabase%2A>方法時，必須衍生自<xref:System.Data.Common.DbConnection>。 這個方法不支援，而且將會引發<xref:System.NotSupportedException>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">呼叫此方法時。</exception>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="entityConnection.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>關閉與資料庫的連接。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當基礎資料提供者未知時，<xref:System.Data.EntityClient.EntityConnection.Close%2A> 的呼叫不會進行任何作業。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">關閉連接時發生錯誤。</exception>
      </Docs>
    </Member>
    <Member MemberName="ConnectionString">
      <MemberSignature Language="C#" Value="public override string ConnectionString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConnectionString" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.ConnectionString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ConnectionString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ConnectionString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConnectionString : string with get, set" Usage="System.Data.EntityClient.EntityConnection.ConnectionString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.Data.EntityClient.EntityConnection" /> 連接字串。</summary>
        <value>建立資料來源之初始連接所需的連接字串。 預設值為空字串。 在關閉的連接上會傳回目前設定的值。 如果沒有設定值，則傳回空字串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `EntityClient`連接字串是由以分號隔開的關鍵字/值參數組的序列所組成。 等號 (=) 會連接每個關鍵字和其值。 下表列出 <xref:System.Data.EntityClient.EntityConnection.ConnectionString%2A> 中關鍵字值的有效名稱。  
  
|關鍵字|描述|  
|-------------|-----------------|  
|`Provider`|如果沒有指定 `Name` 關鍵字，就是必要項。 用來擷取基礎提供者之 <xref:System.Data.Common.DbProviderFactory> 物件的提供者名稱。 這個值是常數。<br /><br /> 當`Name`關鍵字未包含在連接字串的非空白值`Provider`則需要關鍵字。 此關鍵字與 `Name` 關鍵字互斥。|  
|`Provider Connection String`|選擇性。 指定傳給基礎資料來源的提供者特定連接字串。 這個連接字串會藉由使用資料提供者的有效關鍵字/值組來表示。 無效的 `Provider Connection String` 會在資料來源對其進行評估時導致執行階段錯誤。<br /><br /> 此關鍵字與 `Name` 關鍵字互斥。<br /><br /> `Provider Connection String` 的值必須以引號括住。 以下是一個範例：<br /><br /> `Provider Connection String ="Server=serverName; User ID = userID";`<br /><br /> 下列範例無效：<br /><br /> `Provider Connection String =Server=serverName; User ID = userID`|  
|`Metadata`|如果沒有指定 `Name` 關鍵字，就是必要項。 直立線符號分隔的目錄、 檔案和資源位置，來尋找模型和對應資訊清單。 以下是一個範例：<br /><br /> `Metadata=`<br /><br /> `c:\model &#124; c:\model\sql\mapping.msl;`<br /><br /> 忽略垂直線分隔符號兩端的空白。<br /><br /> 此關鍵字與 `Name` 關鍵字互斥。|  
|`Name`|應用程式可選擇性的在應用程式組態檔中指定連接名稱，以提供必要的關鍵字/值連接字串值。 在此情況下，您不能在連接字串中直接提供這些值。 在組態檔中不允許 `Name` 關鍵字。<br /><br /> 當 `Name` 關鍵字未包含在連接字串中時，需要 Provider 關鍵字的非空白值。<br /><br /> 此關鍵字與所有其他連接字串關鍵字互斥。|  
  
 應用程式可以提供關鍵字/值直接在<xref:System.Data.EntityClient.EntityConnection.ConnectionString%2A>屬性，也可以指定的值`Name`關鍵字。 如果`Name`關鍵字指定，則連接字串關鍵字/值會從擷取應用程式組態檔，如下所示：  
  
 `Name=AdventureWorksEntities;`  
  
 如果`Name`關鍵字可用於<xref:System.Data.EntityClient.EntityConnection.ConnectionString%2A>屬性，不允許其他關鍵字。 `Name`是指儲存在具名的連接字串關鍵字`connectionStrings`區段中應用程式組態檔，如下列範例所示。 `Provider`， `Metadata`，和`Provider Connection String`在執行階段從組態檔擷取值。  
  
  
  
 也可以直接在 <xref:System.Data.EntityClient.EntityConnection.ConnectionString%2A> 屬性中提供關鍵字/值組，如下列範例中所示。 在此情況下，`Name`關鍵字未用於。  
  
```  
"Provider=System.Data.SqlClient;  
Metadata=c:\metadata|c:\Metadata\Sql;  
Provider Connection String= 'Data Source=localhost;  
    Initial Catalog=AdventureWorks;Integrated Security=True;Connection Timeout=60' "  
```  
  
 若要避免不小心讓類似 <xref:System.Data.Common.CommandTrees> 和 <xref:System.Data.Objects.ObjectContext> 等物件與其中繼資料未同步，<xref:System.Data.EntityClient.EntityConnection> 必須鎖定它的中繼資料。 當鎖定中繼資料以後，就不允許對連接字串做任何變更。 以下是鎖定中繼資料的兩個案例：  
  
-   透過預設建構函式 (Constructor) 或 <xref:System.Data.EntityClient.EntityConnection> 建構函式 (可接受連接字串) 來建構 <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> 執行個體。 在任何一種情況下，連接字串都可能會在開啟連接之前變更多次。 呼叫 <xref:System.Data.EntityClient.EntityConnection.Open%2A> 或 <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> 會鎖定中繼資料。  
  
-   透過可接受 <xref:System.Data.EntityClient.EntityConnection> 和 <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> 的 <xref:System.Data.Metadata.Edm.MetadataWorkspace> 建構函式來建構 <xref:System.Data.Common.DbConnection> 執行個體。 在此情況下，中繼資料會在建構時鎖定。 不允許對連接字串做任何變更。  
  
 當載入中繼資料時，<xref:System.Data.EntityClient.EntityConnection> 會驗證概念模型、儲存模型及對應檔是否都存在。  
  
   
  
## Examples  
 下列範例示範如何搭配 <xref:System.Data.EntityClient.EntityConnectionStringBuilder> 使用 <xref:System.Data.SqlClient.SqlConnectionStringBuilder>。 此程式碼設定的屬性`SqlConnectionStringBuilder`來建立<xref:System.Data.SqlClient.SqlConnection>提供一部分的基礎提供者連接字串的字串。 請注意，`Provider`名稱不能藉由設定`SqlConnectionStringBuilder`，因為它不會使用有效`SqlConnection`語法。 程式碼會建立<xref:System.Data.EntityClient.EntityConnection>藉由設定字串`EntityConnectionStringBuilder`屬性。  
  
 [!code-csharp[eSQLBasicExamples#BuildingConnectionStringWithEntityCommand](~/samples/snippets/csharp/VS_Snippets_Data/eSQLBasicExamples/CS/Program.cs#buildingconnectionstringwithentitycommand)]
 [!code-vb[eSQLBasicExamples#BuildingConnectionStringWithEntityCommand](~/samples/snippets/visualbasic/VS_Snippets_Data/eSQLBasicExamples/VB/Program.vb#buildingconnectionstringwithentitycommand)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">嘗試在初始化 <see cref="P:System.Data.EntityClient.EntityConnection.ConnectionString" /> 的 <see cref="T:System.Data.EntityClient.EntityConnection" /> 之後設定 <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> 屬性。 當透過使用 <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> 當做參數的多載來建構 <see cref="T:System.Data.EntityClient.EntityConnection" /> 執行個體或是已開啟 <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> 執行個體時，初始化 <see cref="T:System.Data.EntityClient.EntityConnection" />。</exception>
        <exception cref="T:System.ArgumentException">已提供無效的連接字串關鍵字，或尚未提供必要的連接字串關鍵字。</exception>
      </Docs>
    </Member>
    <Member MemberName="ConnectionTimeout">
      <MemberSignature Language="C#" Value="public override int ConnectionTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ConnectionTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.ConnectionTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ConnectionTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int ConnectionTimeout { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ConnectionTimeout : int" Usage="System.Data.EntityClient.EntityConnection.ConnectionTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得在結束嘗試並產生錯誤前嘗試建立連接的等候秒數。</summary>
        <value>等待連接開啟的時間 (以秒為單位)。 預設值為基礎資料提供者的預設逾時。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果基礎資料提供者未知則傳回零。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">設定的值小於 0。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateCommand">
      <MemberSignature Language="C#" Value="public System.Data.EntityClient.EntityCommand CreateCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.EntityClient.EntityCommand CreateCommand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.CreateCommand" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateCommand () As EntityCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::EntityClient::EntityCommand ^ CreateCommand();" />
      <MemberSignature Language="F#" Value="override this.CreateCommand : unit -&gt; System.Data.EntityClient.EntityCommand" Usage="entityConnection.CreateCommand " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.EntityClient.EntityCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>建立 <see cref="T:System.Data.EntityClient.EntityCommand" /> 的新執行個體，且 <see cref="P:System.Data.EntityClient.EntityCommand.Connection" /> 設定為這個 <see cref="T:System.Data.EntityClient.EntityConnection" />。</summary>
        <returns>
          <see cref="T:System.Data.EntityClient.EntityCommand" /> 物件。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">基礎資料提供者的名稱未知。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateDbCommand">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbCommand CreateDbCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.DbCommand CreateDbCommand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.CreateDbCommand" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateDbCommand () As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Data::Common::DbCommand ^ CreateDbCommand();" />
      <MemberSignature Language="F#" Value="override this.CreateDbCommand : unit -&gt; System.Data.Common.DbCommand" Usage="entityConnection.CreateDbCommand " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Database">
      <MemberSignature Language="C#" Value="public override string Database { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Database" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.Database" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Database As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Database { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Database : string" Usage="System.Data.EntityClient.EntityConnection.Database" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得目前資料庫或在開啟連接後要使用之資料庫的名稱。</summary>
        <value>基礎資料提供者的 <see langword="Database" /> 屬性值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 對於特定關鍵字值，這類`Database`，可對應到<xref:System.Data.EntityClient.EntityConnection.Database%2A>屬性，請參閱基礎資料提供者的文件。 SQL Server 同等的關鍵字，請參閱文件<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A?displayProperty=nameWithType>屬性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">基礎資料提供者未知。</exception>
      </Docs>
    </Member>
    <Member MemberName="DataSource">
      <MemberSignature Language="C#" Value="public override string DataSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataSource" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.DataSource" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DataSource As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ DataSource { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DataSource : string" Usage="System.Data.EntityClient.EntityConnection.DataSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得要連接到的資料來源的名稱或網路地址。</summary>
        <value>資料來源的名稱。 預設值為空字串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 對於特定關鍵字值，這類`DataSource`，可對應到<xref:System.Data.EntityClient.EntityConnection.DataSource%2A>屬性，請參閱基礎資料提供者的文件。 SQL Server 同等的關鍵字，請參閱文件<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A?displayProperty=nameWithType>屬性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">基礎資料提供者未知。</exception>
      </Docs>
    </Member>
    <Member MemberName="DbProviderFactory">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbProviderFactory DbProviderFactory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbProviderFactory DbProviderFactory" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.DbProviderFactory" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property DbProviderFactory As DbProviderFactory" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Data::Common::DbProviderFactory ^ DbProviderFactory { System::Data::Common::DbProviderFactory ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DbProviderFactory : System.Data.Common.DbProviderFactory" Usage="System.Data.EntityClient.EntityConnection.DbProviderFactory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbProviderFactory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="entityConnection.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnlistTransaction">
      <MemberSignature Language="C#" Value="public override void EnlistTransaction (System.Transactions.Transaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EnlistTransaction(class System.Transactions.Transaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.EnlistTransaction(System.Transactions.Transaction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void EnlistTransaction(System::Transactions::Transaction ^ transaction);" />
      <MemberSignature Language="F#" Value="override this.EnlistTransaction : System.Transactions.Transaction -&gt; unit" Usage="entityConnection.EnlistTransaction transaction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Transactions.Transaction" />
      </Parameters>
      <Docs>
        <param name="transaction">要在其中登記的異動物件。</param>
        <summary>在指定的交易中登記這個 <see cref="T:System.Data.EntityClient.EntityConnection" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會轉送資料來源連接的呼叫，以便明確登記在傳遞的 <xref:System.Transactions.Transaction> 中。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Data.EntityClient.EntityConnection" /> 的狀態不是 <see cref="F:System.Data.ConnectionState.Open" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetMetadataWorkspace">
      <MemberSignature Language="C#" Value="public System.Data.Metadata.Edm.MetadataWorkspace GetMetadataWorkspace ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Metadata.Edm.MetadataWorkspace GetMetadataWorkspace() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMetadataWorkspace () As MetadataWorkspace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Metadata::Edm::MetadataWorkspace ^ GetMetadataWorkspace();" />
      <MemberSignature Language="F#" Value="member this.GetMetadataWorkspace : unit -&gt; System.Data.Metadata.Edm.MetadataWorkspace" Usage="entityConnection.GetMetadataWorkspace " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Metadata.Edm.MetadataWorkspace</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回與這個 <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> 相關聯的 <see cref="T:System.Data.EntityClient.EntityConnection" />。</summary>
        <returns>與這個 <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> 相關聯的 <see cref="T:System.Data.EntityClient.EntityConnection" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在 <xref:System.Data.Metadata.Edm.MetadataWorkspace> 類別建立時，<xref:System.Data.EntityClient.EntityConnection> 也會自動建立。 此建立程序可能會擲回中繼資料特有的例外狀況。 中繼資料會載入記憶體中，而 Entity Data Model (EDM) 應用程式會使用該中繼資料來存取有關基礎資料來源的資訊。 如需詳細資訊，請參閱 < [ADO.NET 中繼資料](http://msdn.microsoft.com/library/196097a5-a791-4ac4-9e6a-805685d481d5)。  
  
 若要避免不小心讓類似 <xref:System.Data.Common.CommandTrees> 和 <xref:System.Data.Objects.ObjectContext> 等物件與其中繼資料未同步，<xref:System.Data.EntityClient.EntityConnection> 必須鎖定它的中繼資料。 當鎖定中繼資料以後，就不允許對連接字串做任何變更。 以下是鎖定中繼資料的兩個案例：  
  
-   透過預設建構函式 (Constructor) 或 <xref:System.Data.EntityClient.EntityConnection> 建構函式 (可接受連接字串) 來建構 <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> 執行個體。 在任一情況下的連接字串都可能會在開啟連接之前變更多次。 <xref:System.Data.EntityClient.EntityConnection.Open%2A> 或<xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A>鎖定中繼資料。  
  
-   透過可接受 <xref:System.Data.EntityClient.EntityConnection> 和 <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> 的 <xref:System.Data.Metadata.Edm.MetadataWorkspace> 建構函式來建構 <xref:System.Data.Common.DbConnection> 執行個體。 在此情況下，中繼資料會在建構時鎖定。 不允許對連接字串做任何變更。  
  
 當載入中繼資料時，<xref:System.Data.EntityClient.EntityConnection> 會驗證概念模型、儲存模型及對應檔是否都存在。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.MetadataException">包含無效 <see langword="Metadata" /> 關鍵字值的內嵌連接字串。</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public override void Open ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Open() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.Open" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Open ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Open();" />
      <MemberSignature Language="F#" Value="override this.Open : unit -&gt; unit" Usage="entityConnection.Open " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>呼叫基礎資料提供者的 <see langword="Open" /> 方法，建立與資料來源的連接。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要避免不小心讓類似 <xref:System.Data.Common.CommandTrees> 和 <xref:System.Data.Objects.ObjectContext> 等物件與其中繼資料未同步，<xref:System.Data.EntityClient.EntityConnection> 必須鎖定它的中繼資料。 當鎖定中繼資料以後，就不允許對連接字串做任何變更。 以下是鎖定中繼資料的兩個案例：  
  
-   透過預設建構函式 (Constructor) 或 <xref:System.Data.EntityClient.EntityConnection> 建構函式 (可接受連接字串) 來建構 <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> 執行個體。 在任何一種情況下，連接字串都可能會在開啟連接之前變更多次。 呼叫 <xref:System.Data.EntityClient.EntityConnection.Open%2A> 或 <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> 會鎖定中繼資料。  
  
-   透過可接受 <xref:System.Data.EntityClient.EntityConnection> 和 <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> 的 <xref:System.Data.Metadata.Edm.MetadataWorkspace> 建構函式來建構 <xref:System.Data.Common.DbConnection> 執行個體。 在此情況下，中繼資料會在建構時鎖定。 不允許對連接字串做任何變更。  
  
 當載入中繼資料時，<xref:System.Data.EntityClient.EntityConnection> 會驗證概念模型、儲存模型及對應檔是否都存在。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">當您開啟連接或基礎資料提供者的名稱未知時會發生錯誤。</exception>
        <exception cref="T:System.Data.MetadataException">包含無效 <see langword="Metadata" /> 關鍵字值的內嵌連接字串。</exception>
      </Docs>
    </Member>
    <Member MemberName="ServerVersion">
      <MemberSignature Language="C#" Value="public override string ServerVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ServerVersion" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.ServerVersion" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ServerVersion As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ServerVersion { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ServerVersion : string" Usage="System.Data.EntityClient.EntityConnection.ServerVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得包含用戶端所連接之資料來源版本的字串。</summary>
        <value>包含在提供者連接字串中的資料來源版本。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">連接關閉。</exception>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public override System.Data.ConnectionState State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.ConnectionState State" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.State" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property State As ConnectionState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Data::ConnectionState State { System::Data::ConnectionState get(); };" />
      <MemberSignature Language="F#" Value="member this.State : System.Data.ConnectionState" Usage="System.Data.EntityClient.EntityConnection.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.ConnectionState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>如果 <see cref="T:System.Data.ConnectionState" /> 是開啟的，則取得基礎提供者的 <see cref="T:System.Data.EntityClient.EntityConnection" /> 屬性， 否則傳回 <see cref="F:System.Data.ConnectionState.Closed" />。</summary>
        <value>只有當 <see cref="F:System.Data.ConnectionState.Open" /> 的內部狀態和基礎提供者的 <see cref="T:System.Data.EntityClient.EntityConnection" /> 開啟時，才會是 <see cref="T:System.Data.ConnectionState" />。 如果 <see cref="T:System.Data.EntityClient.EntityConnection" /> 的狀態開啟，但是提供者的 <see cref="T:System.Data.ConnectionState" /> 已關閉，這個屬性會傳回 <see cref="F:System.Data.ConnectionState.Broken" />。 否則它會傳回 <see cref="F:System.Data.ConnectionState.Closed" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StoreConnection">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbConnection StoreConnection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbConnection StoreConnection" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.StoreConnection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StoreConnection As DbConnection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbConnection ^ StoreConnection { System::Data::Common::DbConnection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StoreConnection : System.Data.Common.DbConnection" Usage="System.Data.EntityClient.EntityConnection.StoreConnection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>提供基礎資料來源連接的存取 (<see cref="T:System.Data.EntityClient.EntityConnection" /> 物件會使用該連接)。</summary>
        <value>資料來源連接的 <see cref="T:System.Data.Common.DbConnection" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果關閉 <xref:System.Data.EntityClient.EntityConnection> 物件，將會關閉傳回的資料來源連接。 如果開啟它，將會傳回開啟的資料來源連接。 如果設定了資料來源連接資訊，傳回的值一定不是 null。 如果沒有資料來源連接資訊 (例如，使用了預設建構函式而且之後未設定任何連接字串)，則會傳回 null 參考。  
  
 Entity Framework 所使用的相同資料來源連接可以與應用程式的其他部分共用。 資料來源連接會以 <xref:System.Data.Common.DbConnection> 物件的形式從 <xref:System.Data.Objects.ObjectContext.Connection%2A> 的 <xref:System.Data.Objects.ObjectContext> 屬性或是從 <xref:System.Data.EntityClient.EntityConnection.StoreConnection%2A> 的 <xref:System.Data.EntityClient.EntityConnection> 屬性傳回。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>