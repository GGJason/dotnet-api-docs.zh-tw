<Type Name="ServiceInstaller" FullName="System.ServiceProcess.ServiceInstaller">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5f792f269c705609bda7c858826060ba7cb5bb57" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55364604" /></Metadata><TypeSignature Language="C#" Value="public class ServiceInstaller : System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceInstaller extends System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="DocId" Value="T:System.ServiceProcess.ServiceInstaller" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceInstaller&#xA;Inherits ComponentInstaller" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceInstaller : System::Configuration::Install::ComponentInstaller" />
  <TypeSignature Language="F#" Value="type ServiceInstaller = class&#xA;    inherit ComponentInstaller" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceProcess</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.Install.ComponentInstaller</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>安裝擴充 <see cref="T:System.ServiceProcess.ServiceBase" /> 的類別來實作服務， 當安裝服務應用程式時，安裝公用程式會呼叫這個類別。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceInstaller>運作的服務與相關聯的特定。 安裝公用程式用來撰寫要 HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services 登錄機碼內的子機碼的服務相關聯的登錄值。 在這個子機碼及其 ServiceName 識別服務。 子機碼也包含可執行檔或.dll 服務所屬的名稱。  
  
 若要安裝的服務，建立專案的安裝程式類別繼承自<xref:System.Configuration.Install.Installer>類別，並設定<xref:System.ComponentModel.RunInstallerAttribute>若要在類別上`true`。 在您專案中，建立一個<xref:System.ServiceProcess.ServiceProcessInstaller>執行個體，每個服務應用程式和一個<xref:System.ServiceProcess.ServiceInstaller>應用程式中的每個服務執行個體。 在您的專案安裝程式類別建構函式，設定 服務的安裝內容<xref:System.ServiceProcess.ServiceProcessInstaller>並<xref:System.ServiceProcess.ServiceInstaller>執行個體，並新增至執行個體<xref:System.Configuration.Install.Installer.Installers%2A>集合。  
  
> [!NOTE]
>  建議您將加入安裝程式執行個體; 使用建構函式不過，如果您要新增到<xref:System.Configuration.Install.Installer.Installers%2A>中的集合<xref:System.ServiceProcess.ServiceInstaller.Install%2A>方法，請務必執行同一個新增至集合中的項目<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>方法。  
  
 所有的類別衍生自<xref:System.Configuration.Install.Installer>類別的狀態<xref:System.Configuration.Install.Installer.Installers%2A>集合必須是相同<xref:System.ServiceProcess.ServiceInstaller.Install%2A>和<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>方法。 不過，您可以避免跨集合的維護<xref:System.ServiceProcess.ServiceInstaller.Install%2A>並<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>方法，如果您加入到安裝程式執行個體<xref:System.Configuration.Install.Installer.Installers%2A>您自訂安裝程式類別建構函式中的集合。當呼叫時，安裝公用程式時，它會尋找<xref:System.ComponentModel.RunInstallerAttribute>屬性。 如果屬性是`true`，此公用程式安裝所加入的所有服務<xref:System.Configuration.Install.Installer.Installers%2A>已與您的專案安裝程式相關聯的集合。 如果<xref:System.ComponentModel.RunInstallerAttribute>是`false`或不存在，安裝公用程式會忽略專案安裝程式。  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller>與您的專案安裝類別安裝資訊通用於所有相關聯<xref:System.ServiceProcess.ServiceInstaller>專案中的執行個體。 如果此服務會有任何項目分開安裝專案中的其他服務，這個方法會安裝該服務特有的資訊。  
  
> [!NOTE]
>  很重要，<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>會等於<xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType>類別衍生自的<xref:System.ServiceProcess.ServiceBase>。 一般來說，windows 7 <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> main （） 函式的服務應用程式的可執行檔中設定服務的屬性。 服務控制管理員會使用<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType>屬性找出這個可執行檔內的服務。  
  
 您可以修改其他屬性上<xref:System.ServiceProcess.ServiceInstaller>之前或之後將它新增至<xref:System.Configuration.Install.Installer.Installers%2A>專案安裝程式的集合。 例如，服務的<xref:System.ServiceProcess.ServiceInstaller.StartType%2A>可能會設定為啟動服務會自動在重新開機，或需要使用者手動啟動服務。  
  
 一般來說，您會呼叫方法上<xref:System.ServiceProcess.ServiceInstaller>內您的程式碼; 它們通常稱為只能由安裝公用程式。 安裝公用程式會自動呼叫<xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType>和<xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=nameWithType>安裝程序期間的方法。 它會出失敗，如有必要，藉由呼叫<xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A>(或<xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=nameWithType>) 上所有先前安裝的元件。  
  
 安裝公用程式呼叫<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>移除的物件。  
  
 應用程式的安裝常式會維護的資訊會自動使用專案安裝程式的元件已安裝， <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>。 此狀態資訊會持續更新為<xref:System.ServiceProcess.ServiceProcessInstaller>執行個體，以及每個<xref:System.ServiceProcess.ServiceInstaller>公用程式會安裝執行個體。 它是通常不需要為您的程式碼，明確地修改狀態資訊。  
  
 執行安裝時，它會自動建立<xref:System.Diagnostics.EventLogInstaller>安裝與相關聯的事件記錄檔來源<xref:System.ServiceProcess.ServiceBase>衍生的類別。 <xref:System.Diagnostics.EventLog.Log%2A>此來源的屬性由設定<xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A>電腦的應用程式記錄檔的建構函式。 當您設定<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>的<xref:System.ServiceProcess.ServiceInstaller>(這應該與相同<xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType>的服務)、<xref:System.Diagnostics.EventLog.Source%2A>會自動設為相同的值。 安裝失敗，來源是在安裝復原以及先前安裝的服務。  
  
 <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>方法會嘗試停止服務，如果它正在執行。 這是否成功，<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>復原所做的變更<xref:System.ServiceProcess.ServiceInstaller.Install%2A>。 如果事件記錄建立新的來源，則會刪除來源。  
  
   
  
## Examples  
 下列範例會建立專案安裝程式，稱為`MyProjectInstaller`，該項則繼承自<xref:System.Configuration.Install.Installer>。 它會假設沒有服務可執行檔，其中包含兩個服務，「 Hello World 服務 1 」 和 「 Hello World 服務 2 」。 建構函式內`MyProjectInstaller`（這會由呼叫安裝公用程式），<xref:System.ServiceProcess.ServiceInstaller>會建立物件，如每一種服務，以及<xref:System.ServiceProcess.ServiceProcessInstaller>建立可執行檔。 安裝公用程式，可辨識`MyProjectInstaller`為有效的安裝程式中，<xref:System.ComponentModel.RunInstallerAttribute>屬性設為`true`。  
  
 選擇性屬性在設定程序安裝程式和服務安裝程式之前安裝程式會新增至<xref:System.Configuration.Install.Installer.Installers%2A>集合。 安裝公用程式的存取時`MyProjectInstaller`，加入至物件<xref:System.Configuration.Install.Installer.Installers%2A>集合，透過呼叫<xref:System.Configuration.Install.InstallerCollection.Add%2A?displayProperty=nameWithType>將接著安裝。 在過程中，安裝程式會維護狀態資訊，以指出已安裝哪些物件，讓每個可以被卸除，如果發生安裝失敗。  
  
 一般來說，您不會明確地建立您的專案安裝程式類別的執行個體。 您會建立它，並加入<xref:System.ComponentModel.RunInstallerAttribute>屬性語法，但它會實際呼叫，並因此會具現化，此類別，安裝公用程式。  
  
 [!code-cpp[Classic ServiceInstaller Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ServiceInstaller Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CS/source.cs#1)]
 [!code-vb[Classic ServiceInstaller Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.ServiceProcess.ServiceBase.ServiceName" />
    <altmember cref="T:System.ServiceProcess.ServiceProcessInstaller" />
    <altmember cref="T:System.ServiceProcess.ServiceBase" />
    <altmember cref="P:System.ServiceProcess.ServiceBase.EventLog" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceInstaller ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceInstaller();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.ServiceProcess.ServiceInstaller" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要安裝的服務，建立專案的安裝程式類別繼承自<xref:System.Configuration.Install.Installer>類別，並設定<xref:System.ComponentModel.RunInstallerAttribute>若要在類別上`true`。 在您專案中，建立一個<xref:System.ServiceProcess.ServiceProcessInstaller>執行個體，每個服務應用程式和一個<xref:System.ServiceProcess.ServiceInstaller>應用程式中的每個服務執行個體。 在您的專案安裝程式類別建構函式，設定 服務的安裝內容<xref:System.ServiceProcess.ServiceProcessInstaller>並<xref:System.ServiceProcess.ServiceInstaller>執行個體，並新增至執行個體<xref:System.Configuration.Install.Installer.Installers%2A>集合。  
  
 <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A>建構函式會自動產生的事件記錄檔來源其<xref:System.Diagnostics.EventLog.Log%2A>屬性設定為電腦的應用程式記錄檔，並有<xref:System.Diagnostics.EventLogInstaller>。 當您設定<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>的<xref:System.ServiceProcess.ServiceInstaller>，它應該是等於<xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType>的服務，<xref:System.Diagnostics.EventLog.Source%2A>的事件記錄檔的屬性會自動設為相同的值。 來源會自動刪除在安裝失敗的情況下。  
  
 <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A>建構函式<xref:System.ServiceProcess.ServiceInstaller.StartType%2A>屬性設`ServiceStartMode.Manual`來指定使用者啟動服務。 您可以重設的屬性`ServiceStartMode.Automatic`來指定服務啟動時重新啟動電腦。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.EventLog" />
        <altmember cref="T:System.ServiceProcess.ServiceStartMode" />
      </Docs>
    </Member>
    <Member MemberName="CopyFromComponent">
      <MemberSignature Language="C#" Value="public override void CopyFromComponent (System.ComponentModel.IComponent component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CopyFromComponent(class System.ComponentModel.IComponent component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub CopyFromComponent (component As IComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void CopyFromComponent(System::ComponentModel::IComponent ^ component);" />
      <MemberSignature Language="F#" Value="override this.CopyFromComponent : System.ComponentModel.IComponent -&gt; unit" Usage="serviceInstaller.CopyFromComponent component" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="component">要複製來源的 <see cref="T:System.ComponentModel.IComponent" />。</param>
        <summary>從 <see cref="T:System.ServiceProcess.ServiceBase" /> 的執行個體複製屬性到這個安裝程式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您的程式碼，很少會呼叫這個方法。 <xref:System.ServiceProcess.ServiceInstaller.CopyFromComponent%2A> 通常呼叫只能由設計工具。  
  
 <xref:System.ServiceProcess.ServiceInstaller.CopyFromComponent%2A> 將儲存的服務名稱`component`參數來<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>的<xref:System.ServiceProcess.ServiceInstaller>執行個體。 (因為參數必須是衍生自類別的執行個體<xref:System.ServiceProcess.ServiceBase>，`component`保證都有<xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType>屬性。)  
  
> [!NOTE]
>  如果您使用 Visual Studio 設計工具，會呼叫這個方法在設計階段，當使用者按一下`Add Installer`上指定此類別為其安裝程式的元件。 安裝程式會採用其可以從實體元件，並將它儲存在安裝階段使用的所有資訊。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">與這個安裝程式相關的元件不是從 <see cref="T:System.ServiceProcess.ServiceBase" /> 繼承。</exception>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      </Docs>
    </Member>
    <Member MemberName="DelayedAutoStart">
      <MemberSignature Language="C#" Value="public bool DelayedAutoStart { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DelayedAutoStart" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.DelayedAutoStart" />
      <MemberSignature Language="VB.NET" Value="Public Property DelayedAutoStart As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DelayedAutoStart { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DelayedAutoStart : bool with get, set" Usage="System.ServiceProcess.ServiceInstaller.DelayedAutoStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDelayedAutoStart")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，這個值表示服務是否應該在其他自動啟動的服務開始執行以前延遲啟動。</summary>
        <value><see langword="true" /> 表示會延遲服務的自動啟動，否則為 <see langword="false" />。 預設為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceInstaller.DelayedAutoStart%2A>屬性可以套用至任何服務，但它會被忽略，除非服務的啟動模式是<xref:System.ServiceProcess.ServiceStartMode.Automatic>。 設定會影響在下次系統重新啟動。 服務控制管理員並不保證服務的特定開始時間。  
  
 延遲自動啟動服務無法載入順序群組的成員，但它可以依賴另一個自動啟動服務。 如果應用程式在載入之前呼叫延遲自動啟動服務，則呼叫會失敗。  
  
 在作業系統上不支援延遲自動啟動，設定這個屬性沒有任何作用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.Description" />
      <MemberSignature Language="VB.NET" Value="Public Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Description { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Description : string with get, set" Usage="System.ServiceProcess.ServiceInstaller.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDescription")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定服務的描述。</summary>
        <value>服務的描述。 預設為空字串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.ServiceProcess.ServiceInstaller.Description%2A>屬性以描述已安裝的服務給使用者的目的。 使用者可以檢視顯示已安裝服務的詳細資料的應用程式中的服務描述。  
  
 比方說，使用 Windows XP，您可以檢視服務描述，使用服務控制命令列公用程式 (Sc.exe) 或者您可以檢視內的服務描述**Services**節點**電腦管理**主控台。  
  
   
  
## Examples  
 下列程式碼範例會設定新的 Windows 服務應用程式的安裝屬性。 此範例會設定服務名稱，以及顯示名稱和描述。 指派之後，服務的安裝屬性，此範例會新增<xref:System.ServiceProcess.ServiceInstaller>物件至<xref:System.Configuration.Install.Installer.Installers%2A>集合。  
  
 [!code-csharp[ServiceProcess_ServiceInstaller#3](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceProcess_serviceinstaller/CS/simpleserviceinstaller.cs#3)]
 [!code-vb[ServiceProcess_ServiceInstaller#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceProcess_serviceinstaller/VB/service1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DisplayName : string with get, set" Usage="System.ServiceProcess.ServiceInstaller.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDisplayName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示使用者識別服務的易記名稱。</summary>
        <value>與服務相關的名稱，常用來做為互動式工具。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceInstaller.DisplayName%2A>使用，例如，在服務控制管理員來提供服務的使用者可讀的描述性名稱。 <xref:System.ServiceProcess.ServiceInstaller.DisplayName%2A>登錄值，但不是能作為登錄機碼。 因此，限制<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>屬性值不會套用。 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> 做為 HKEY_LOCAL_MACHINES\System\CurrentControlSet\Services 登錄機碼，因此很受到限制。  
  
 顯示名稱永遠不會安裝公用程式用來識別服務，因此沒有任何限制上選擇的名稱，因為沒有為<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>屬性。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.Description" />
      </Docs>
    </Member>
    <Member MemberName="Install">
      <MemberSignature Language="C#" Value="public override void Install (System.Collections.IDictionary stateSaver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Install(class System.Collections.IDictionary stateSaver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Install (stateSaver As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Install(System::Collections::IDictionary ^ stateSaver);" />
      <MemberSignature Language="F#" Value="override this.Install : System.Collections.IDictionary -&gt; unit" Usage="serviceInstaller.Install stateSaver" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateSaver" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="stateSaver"><see cref="T:System.Collections.IDictionary" />，包含與安裝相關的內容資訊。</param>
        <summary>藉由將服務應用程式資訊寫入登錄來安裝服務， 這個方法是安裝工具所使用的方法，安裝工具會自動處理適當的方法。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一般來說，您會呼叫方法上<xref:System.ServiceProcess.ServiceInstaller>內您的程式碼; 它們通常稱為只能由安裝公用程式。 安裝公用程式會自動呼叫<xref:System.ServiceProcess.ServiceInstaller.Install%2A>在安裝期間的方法。 它會出失敗，如有必要，藉由呼叫<xref:System.ServiceProcess.ServiceInstaller.Rollback%2A>產生例外狀況物件上。  
  
 應用程式的安裝常式會維護自動相關元件已安裝，使用專案安裝程式的資訊<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>。 這個狀態資訊，將會傳入<xref:System.ServiceProcess.ServiceInstaller.Install%2A>作為`stateSaver`參數，會持續更新為<xref:System.ServiceProcess.ServiceProcessInstaller>執行個體和每個<xref:System.ServiceProcess.ServiceInstaller>公用程式會安裝執行個體。 它是通常不需要為您的程式碼，明確地修改此狀態資訊。  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller>與您的專案安裝類別安裝資訊通用於所有相關聯<xref:System.ServiceProcess.ServiceInstaller>專案中的執行個體。 如果此服務會有任何項目分開安裝專案中的其他服務，這個方法會安裝該服務特有的資訊。  
  
 若要安裝的服務，建立專案的安裝程式類別繼承自<xref:System.Configuration.Install.Installer>類別，並設定<xref:System.ComponentModel.RunInstallerAttribute>若要在類別上`true`。 在您專案中，建立一個<xref:System.ServiceProcess.ServiceProcessInstaller>執行個體，每個服務應用程式和一個<xref:System.ServiceProcess.ServiceInstaller>應用程式中的每個服務執行個體。 在您的專案安裝程式類別建構函式，設定 服務的安裝內容<xref:System.ServiceProcess.ServiceProcessInstaller>並<xref:System.ServiceProcess.ServiceInstaller>執行個體，並新增至執行個體<xref:System.Configuration.Install.Installer.Installers%2A>集合。  
  
> [!NOTE]
>  建議您將加入安裝程式執行個體; 使用建構函式不過，如果您要新增到<xref:System.Configuration.Install.Installer.Installers%2A>中的集合<xref:System.ServiceProcess.ServiceInstaller.Install%2A>方法，請務必執行同一個新增至集合中的項目<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>方法。  
  
 所有的類別衍生自<xref:System.Configuration.Install.Installer>類別的狀態<xref:System.Configuration.Install.Installer.Installers%2A>集合必須是相同<xref:System.ServiceProcess.ServiceInstaller.Install%2A>和<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>方法。 不過，您可以避免跨集合的維護<xref:System.ServiceProcess.ServiceInstaller.Install%2A>並<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>方法，如果您加入到安裝程式執行個體<xref:System.Configuration.Install.Installer.Installers%2A>您自訂安裝程式類別建構函式中的集合。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">安裝不包含可執行檔的 <see cref="T:System.ServiceProcess.ServiceProcessInstaller" />。  
  
-或- 
組件的檔案名稱為 <see langword="null" /> 或空字串。  
  
-或- 
服務名稱無效。  
  
-或- 
無法開啟服務控制管理員。</exception>
        <exception cref="T:System.ArgumentException">服務的顯示名稱長度大於 255 個字元。</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">系統無法產生服務的控制代碼。  
  
-或- 
已安裝該名稱的服務。</exception>
        <altmember cref="T:System.ServiceProcess.ServiceProcessInstaller" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
        <altmember cref="T:System.Diagnostics.EventLogInstaller" />
        <altmember cref="M:System.Diagnostics.EventLogInstaller.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="IsEquivalentInstaller">
      <MemberSignature Language="C#" Value="public override bool IsEquivalentInstaller (System.Configuration.Install.ComponentInstaller otherInstaller);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsEquivalentInstaller(class System.Configuration.Install.ComponentInstaller otherInstaller) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsEquivalentInstaller (otherInstaller As ComponentInstaller) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsEquivalentInstaller(System::Configuration::Install::ComponentInstaller ^ otherInstaller);" />
      <MemberSignature Language="F#" Value="override this.IsEquivalentInstaller : System.Configuration.Install.ComponentInstaller -&gt; bool" Usage="serviceInstaller.IsEquivalentInstaller otherInstaller" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherInstaller" Type="System.Configuration.Install.ComponentInstaller" />
      </Parameters>
      <Docs>
        <param name="otherInstaller">您用來和目前安裝程式比較的 <see cref="T:System.Configuration.Install.ComponentInstaller" />。</param>
        <summary>表示兩種安裝程式是否安裝相同的服務。</summary>
        <returns>如果呼叫這些安裝程式的 <see cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" /> 會導致安裝相同的服務，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller%2A> 比方說，指出是否兩個安裝程式會安裝在相同的使用者帳戶下相同的服務。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
        <altmember cref="T:System.Configuration.Install.ComponentInstaller" />
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public override void Rollback (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Rollback(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Rollback (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Rollback(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Rollback : System.Collections.IDictionary -&gt; unit" Usage="serviceInstaller.Rollback savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState"><see cref="T:System.Collections.IDictionary" />，包含與安裝相關的內容資訊。</param>
        <summary>經由安裝程序復原寫入登錄的服務應用程式資訊， 這個方法是安裝工具所使用的方法，安裝工具會自動處理適當的方法。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一般來說，您會呼叫方法上<xref:System.ServiceProcess.ServiceInstaller>內您的程式碼; 它們通常稱為只能由安裝公用程式。 安裝公用程式會自動呼叫<xref:System.ServiceProcess.ServiceInstaller.Install%2A>安裝程序期間的方法。 它會出失敗，如有必要，藉由呼叫<xref:System.ServiceProcess.ServiceInstaller.Rollback%2A>產生例外狀況物件上。  
  
 應用程式的安裝常式會維護的資訊會自動使用專案安裝程式的元件已安裝， <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>。 這個狀態資訊，將會傳入<xref:System.ServiceProcess.ServiceInstaller.Rollback%2A>作為`savedState`參數，會持續更新為<xref:System.ServiceProcess.ServiceProcessInstaller>執行個體和每個<xref:System.ServiceProcess.ServiceInstaller>公用程式會安裝執行個體。 它是通常不需要為您的程式碼，明確地修改此狀態資訊。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="ServiceName">
      <MemberSignature Language="C#" Value="public string ServiceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ServiceName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
      <MemberSignature Language="VB.NET" Value="Public Property ServiceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ServiceName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ServiceName : string with get, set" Usage="System.ServiceProcess.ServiceInstaller.ServiceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerServiceName")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示系統用來識別此服務的名稱。 這個屬性必須與您想要安裝之服務的 <see cref="P:System.ServiceProcess.ServiceBase.ServiceName" /> 相同。</summary>
        <value>要安裝的服務名稱， 這個值必須在安裝公用程式嘗試安裝服務之前設定。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 很重要，<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>會等於<xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType>類別衍生自的<xref:System.ServiceProcess.ServiceBase>。 一般來說，windows 7 <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> main （） 函式的服務應用程式的可執行檔中設定服務的屬性。 服務控制管理員會使用<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType>屬性找出這個可執行檔內的服務。  
  
 當您設定<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>服務安裝程式<xref:System.Diagnostics.EventLog.Source%2A>相關聯的事件記錄檔設定為相同的值。 這會讓自動登入應用程式記錄檔，在電腦上的服務 （例如啟動和停止） 的命令呼叫服務。  
  
> [!NOTE]
>  如果相同名稱的來源已存在的電腦上，但在應用程式記錄檔的記錄檔，將會擲回例外狀況。 如果來源存在，且應用程式記錄檔相關聯，該來源用來報告命令呼叫服務，並擲回任何例外狀況。  
  
 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>不能是`null`或長度為零。 其大小上限為 256 個字元。 它也不能包含正向或反斜線 '/' 或 '\\'，或具有值小於 32 的十進位值的字元的 ASCII 字元集。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" /> 屬性為無效。</exception>
        <altmember cref="P:System.ServiceProcess.ServiceBase.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      </Docs>
    </Member>
    <Member MemberName="ServicesDependedOn">
      <MemberSignature Language="C#" Value="public string[] ServicesDependedOn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] ServicesDependedOn" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.ServicesDependedOn" />
      <MemberSignature Language="VB.NET" Value="Public Property ServicesDependedOn As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ ServicesDependedOn { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ServicesDependedOn : string[] with get, set" Usage="System.ServiceProcess.ServiceInstaller.ServicesDependedOn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerServicesDependedOn")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示要執行這個服務而必須執行的服務。</summary>
        <value>服務的陣列必須在與這個安裝程式相關的服務執行前執行。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 服務可能需要其他服務，才能開始執行。 這個屬性的資訊會寫入登錄機碼。 當使用者 （或系統，在自動啟動的情況下） 嘗試執行服務時，服務控制管理員 (SCM) 驗證，每個陣列中的服務已經啟動。  
  
 如果陣列中的任何服務未執行然後，SCM 會嘗試啟動它們。 這包括服務與`Manual` <xref:System.ServiceProcess.ServiceInstaller.StartType%2A>。  
  
 如果此服務所依存的任何服務無法啟動，將不會啟動此服務。 如果因為沒有任何例外狀況處理在系統層級偵測到此系統未啟動，不會擲回例外狀況。 決定如何處理服務啟動失敗，並實作此程式碼中。 一般而言，對話方塊隨即出現在啟動使用者如果服務無法啟動。  
  
 如果服務未啟動，會將項目寫入應用程式事件記錄檔中。  
  
 此服務所依存的服務不需要位於相同的可執行檔。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.StartType" />
      </Docs>
    </Member>
    <Member MemberName="StartType">
      <MemberSignature Language="C#" Value="public System.ServiceProcess.ServiceStartMode StartType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceProcess.ServiceStartMode StartType" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.StartType" />
      <MemberSignature Language="VB.NET" Value="Public Property StartType As ServiceStartMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceProcess::ServiceStartMode StartType { System::ServiceProcess::ServiceStartMode get(); void set(System::ServiceProcess::ServiceStartMode value); };" />
      <MemberSignature Language="F#" Value="member this.StartType : System.ServiceProcess.ServiceStartMode with get, set" Usage="System.ServiceProcess.ServiceInstaller.StartType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerStartType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceStartMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示啟動此服務的方式和時間。</summary>
        <value><see cref="T:System.ServiceProcess.ServiceStartMode" />，表示服務啟動的方式。 預設值為 <see langword="Manual" />，其指定服務在重新開機後將不會自動啟動。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 設定<xref:System.ServiceProcess.ServiceInstaller.StartType%2A>指定的重新開機後自動啟動服務或使用者必須以手動方式啟動服務。 服務可以也停用，指定，它無法啟動，以手動方式或以程式設計的方式，直到啟用為止。  
  
 您無法變更<xref:System.ServiceProcess.ServiceInstaller>安裝後的屬性值。 若要變更<xref:System.ServiceProcess.ServiceInstaller.StartType%2A>，您必須解除安裝，然後重新安裝您的服務，或手動變更 使用服務控制管理員的設定。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">啟動模式不是 <see cref="T:System.ServiceProcess.ServiceStartMode" /> 列舉的值。</exception>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Account" />
      </Docs>
    </Member>
    <Member MemberName="Uninstall">
      <MemberSignature Language="C#" Value="public override void Uninstall (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Uninstall(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Uninstall (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Uninstall(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Uninstall : System.Collections.IDictionary -&gt; unit" Usage="serviceInstaller.Uninstall savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState"><see cref="T:System.Collections.IDictionary" />，包含與安裝相關的內容資訊。</param>
        <summary>藉由從登錄中移除有關的資訊來解除安裝服務。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 解除安裝第一次嘗試解除安裝之前停止服務。 如果無法停止服務，攔截到任何例外狀況時，並移除服務方法會繼續執行。  
  
 一般來說，您會呼叫方法上<xref:System.ServiceProcess.ServiceInstaller>內您的程式碼; 它們通常稱為只能由安裝公用程式。 InstallUtil 用來解除安裝服務，以及安裝它們;解除安裝會採用參數的命令列呼叫。  
  
 應用程式的解除安裝常式會維護元件的資訊會自動解除安裝，使用專案安裝程式的<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>。 這個狀態資訊，將會傳入<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>作為`savedState`參數，會持續更新為<xref:System.ServiceProcess.ServiceProcessInstaller>執行個體和每個<xref:System.ServiceProcess.ServiceInstaller>公用程式會安裝執行個體。 它是通常不需要為您的程式碼，明確地修改此狀態資訊。  
  
 所有的類別衍生自<xref:System.Configuration.Install.Installer>類別的狀態<xref:System.Configuration.Install.Installer.Installers%2A>集合必須是相同<xref:System.ServiceProcess.ServiceInstaller.Install%2A>和<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>方法。 不過，您可以避免跨集合的維護<xref:System.ServiceProcess.ServiceInstaller.Install%2A>並<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>方法，如果您加入到安裝程式執行個體<xref:System.Configuration.Install.Installer.Installers%2A>您自訂安裝程式類別建構函式中的集合。  
  
 沒有任何復原機制，來解除安裝，因此如果一項服務無法解除安裝，這不會影響其他服務 （通常是在相同的安裝專案中） 時解除安裝。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">無法開啟服務控制管理員。  
  
-或- 
系統無法取得服務的控制代碼。</exception>
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
      </Docs>
    </Member>
  </Members>
</Type>