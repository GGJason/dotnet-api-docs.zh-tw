<Type Name="ServiceProcessInstaller" FullName="System.ServiceProcess.ServiceProcessInstaller">
  <Metadata><Meta Name="ms.openlocfilehash" Value="65aa4409d6c7e76442c09281bf79b66d17d4342f" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48741288" /></Metadata><TypeSignature Language="C#" Value="public class ServiceProcessInstaller : System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceProcessInstaller extends System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="DocId" Value="T:System.ServiceProcess.ServiceProcessInstaller" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceProcessInstaller&#xA;Inherits ComponentInstaller" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceProcessInstaller : System::Configuration::Install::ComponentInstaller" />
  <TypeSignature Language="F#" Value="type ServiceProcessInstaller = class&#xA;    inherit ComponentInstaller" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceProcess</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.Install.ComponentInstaller</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>安裝包含擴充 <see cref="T:System.ServiceProcess.ServiceBase" /> 類別的可執行檔。 當安裝服務應用程式時，這個類別是由安裝公用程式呼叫，例如 InstallUtil.exe。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceProcessInstaller>運作通用於所有服務的可執行檔中。 安裝公用程式用來撰寫與您想要安裝的服務相關聯的登錄值。  
  
 若要安裝的服務，建立專案的安裝程式類別繼承自<xref:System.Configuration.Install.Installer>，並設定<xref:System.ComponentModel.RunInstallerAttribute>若要在類別上`true`。 在您專案中，執行個體化一個<xref:System.ServiceProcess.ServiceProcessInstaller>執行個體，每個服務應用程式和一個<xref:System.ServiceProcess.ServiceInstaller>應用程式中的每個服務執行個體。 最後，新增<xref:System.ServiceProcess.ServiceProcessInstaller>執行個體和<xref:System.ServiceProcess.ServiceInstaller>專案安裝程式類別的執行個體。  
  
 當執行 InstallUtil.exe 時，此公用程式會尋找服務組件中的類別<xref:System.ComponentModel.RunInstallerAttribute>設定為`true`。 將類別加入至服務組件中，加入至<xref:System.Configuration.Install.Installer.Installers%2A>專案安裝程式相關聯的集合。 如果<xref:System.ComponentModel.RunInstallerAttribute>是`false`，安裝公用程式會忽略專案安裝程式。  
  
 執行個體<xref:System.ServiceProcess.ServiceProcessInstaller>，您可以修改的屬性包括指定服務應用程式執行的帳戶登入的使用者以外。 您可以指定特定<xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>並<xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>配對所在服務應該執行，或是您可以使用<xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A>指定電腦的 System 帳戶、 本機或網路服務帳戶或使用者帳戶下執行的服務。  
  
> [!NOTE]
>  電腦的系統帳戶不是系統管理員帳戶相同。  
  
 一般來說，您未呼叫的方法上<xref:System.ServiceProcess.ServiceInstaller>內您的程式碼; 它們通常稱為只能由安裝公用程式。 安裝公用程式會自動呼叫<xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType>和<xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=nameWithType>安裝程序期間的方法。 它會出失敗，如有必要，藉由呼叫<xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A>(或<xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=nameWithType>) 上所有先前安裝的元件。  
  
 應用程式的安裝常式會維護的資訊會自動使用專案安裝程式的元件已安裝， <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>。 此狀態資訊會持續更新為<xref:System.ServiceProcess.ServiceProcessInstaller>執行個體和每個<xref:System.ServiceProcess.ServiceInstaller>公用程式會安裝執行個體。 它是通常不需要為您的程式碼，明確地修改此狀態資訊。  
  
 具現化<xref:System.ServiceProcess.ServiceProcessInstaller>會導致的基底類別建構函式，<xref:System.Configuration.Install.ComponentInstaller.%23ctor%2A>呼叫。  
  
   
  
## Examples  
 下列範例會建立專案安裝程式呼叫 MyProjectInstaller，繼承自<xref:System.Configuration.Install.Installer>。 它會假設沒有服務可執行檔，其中包含兩個服務，「 Hello World 服務 1 」 和 「 Hello World 服務 2 」。 MyProjectInstaller （這會由安裝公用程式呼叫） 的建構函式內<xref:System.ServiceProcess.ServiceInstaller>物件會針對每個服務，和<xref:System.ServiceProcess.ServiceProcessInstaller>建立可執行檔。 若要將 MyProjectInstaller 辨識為有效的安裝程式中，安裝公用程式<xref:System.ComponentModel.RunInstallerAttribute>屬性設為`true`。  
  
 選擇性屬性在設定程序安裝程式和服務安裝程式之前安裝程式會新增至<xref:System.Configuration.Install.Installer.Installers%2A>集合。 物件時，安裝公用程式會存取 MyProjectInstaller，加入至<xref:System.Configuration.Install.Installer.Installers%2A>集合，透過呼叫<xref:System.Configuration.Install.InstallerCollection.Add%2A?displayProperty=nameWithType>將接著安裝。 在過程中，安裝程式會維護指出已安裝哪些物件，因此每個物件可以依序發生安裝失敗時的狀態資訊。  
  
 一般來說，您不具現化專案安裝程式類別明確。 您會建立它，並加入<xref:System.ComponentModel.RunInstallerAttribute>，但安裝公用程式會實際呼叫，並因此會具現化，該類別。  
  
 [!code-cpp[Classic ServiceInstaller Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ServiceInstaller Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CS/source.cs#1)]
 [!code-vb[Classic ServiceInstaller Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ServiceProcess.ServiceInstaller" />
    <altmember cref="T:System.ServiceProcess.ServiceBase" />
    <altmember cref="T:System.Configuration.Install.ComponentInstaller" />
    <altmember cref="P:System.Configuration.Install.Installer.Installers" />
    <altmember cref="T:System.ServiceProcess.ServiceAccount" />
    <altmember cref="T:System.ServiceProcess.Design.ServiceInstallerDialog" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceProcessInstaller ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceProcessInstaller.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceProcessInstaller();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>建立 <see cref="T:System.ServiceProcess.ServiceProcessInstaller" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Account">
      <MemberSignature Language="C#" Value="public System.ServiceProcess.ServiceAccount Account { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceProcess.ServiceAccount Account" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceProcessInstaller.Account" />
      <MemberSignature Language="VB.NET" Value="Public Property Account As ServiceAccount" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceProcess::ServiceAccount Account { System::ServiceProcess::ServiceAccount get(); void set(System::ServiceProcess::ServiceAccount value); };" />
      <MemberSignature Language="F#" Value="member this.Account : System.ServiceProcess.ServiceAccount with get, set" Usage="System.ServiceProcess.ServiceProcessInstaller.Account" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceProcessInstallerAccount")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceAccount</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定要執行這個服務應用程式的帳戶類型。</summary>
        <value><see cref="T:System.ServiceProcess.ServiceAccount" />，定義系統執行這個服務的帳號類型， 預設值為 <see langword="User" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當<xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A>屬性是`User`，則<xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>和<xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>屬性用來定義服務應用程式執行所在的帳戶。  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>和<xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>組可讓服務系統帳戶以外的帳戶下執行。 這可以比方說，讓服務在重新開機，沒有任何使用者登入時自動啟動。 如果您將保留其中一個<xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>或<xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>空的而且設定<xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A>到`User`，將會提示您輸入有效的使用者名稱和密碼進行安裝時。  
  
 您也可以指定本機系統帳戶或本機執行的服務或網路服務。 請參閱<xref:System.ServiceProcess.ServiceAccount>列舉類型的帳戶的詳細資訊。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Username" />
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Password" />
        <altmember cref="T:System.ServiceProcess.ServiceAccount" />
        <altmember cref="T:System.ServiceProcess.Design.ServiceInstallerDialog" />
      </Docs>
    </Member>
    <Member MemberName="CopyFromComponent">
      <MemberSignature Language="C#" Value="public override void CopyFromComponent (System.ComponentModel.IComponent comp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CopyFromComponent(class System.ComponentModel.IComponent comp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub CopyFromComponent (comp As IComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void CopyFromComponent(System::ComponentModel::IComponent ^ comp);" />
      <MemberSignature Language="F#" Value="override this.CopyFromComponent : System.ComponentModel.IComponent -&gt; unit" Usage="serviceProcessInstaller.CopyFromComponent comp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comp" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="comp"><see cref="T:System.ComponentModel.IComponent" />，表示服務處理序。</param>
        <summary>不以 <see cref="M:System.Configuration.Install.ComponentInstaller.CopyFromComponent(System.ComponentModel.IComponent)" /> 類別特定行為實作基底類別 <see cref="T:System.ServiceProcess.ServiceProcessInstaller" /> 方法。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不應該呼叫這個方法，您的程式碼。 上的基底類別方法<xref:System.Configuration.Install.ComponentInstaller>是`abstract`，因此它這裡實作在衍生類別上。 不過，沒有任何<xref:System.ServiceProcess.ServiceProcessInstaller>類別的特定方法的實作中的處理。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="HelpText">
      <MemberSignature Language="C#" Value="public override string HelpText { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HelpText" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceProcessInstaller.HelpText" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property HelpText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ HelpText { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.HelpText : string" Usage="System.ServiceProcess.ServiceProcessInstaller.HelpText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得說明文字，顯示服務安裝選項。</summary>
        <value>說明文字，提供設定在特定帳戶下執行服務的使用者名稱和密碼之描述步驟。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 手動啟動服務時，可以使用此說明文字。 表示使用者輸入使用者名稱和密碼資訊的方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Username" />
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Password" />
      </Docs>
    </Member>
    <Member MemberName="Install">
      <MemberSignature Language="C#" Value="public override void Install (System.Collections.IDictionary stateSaver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Install(class System.Collections.IDictionary stateSaver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceProcessInstaller.Install(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Install (stateSaver As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Install(System::Collections::IDictionary ^ stateSaver);" />
      <MemberSignature Language="F#" Value="override this.Install : System.Collections.IDictionary -&gt; unit" Usage="serviceProcessInstaller.Install stateSaver" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateSaver" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="stateSaver"><see cref="T:System.Collections.IDictionary" />，包含與安裝相關的內容資訊。</param>
        <summary>將服務應用程式資訊寫入登錄， 這個方法是安裝工具所使用的方法，安裝工具會自動呼叫適當的方法。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一般來說，您未呼叫的方法上<xref:System.ServiceProcess.ServiceProcessInstaller>內您的程式碼; 它們通常稱為只能由安裝公用程式。 安裝公用程式會自動呼叫<xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType>安裝程序期間的方法。 它會出失敗，如有必要，藉由呼叫<xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A>上所有先前安裝的元件。 此方法會傳遞至基底類別的安裝<xref:System.Configuration.Install.Installer.Install%2A?displayProperty=nameWithType>方法。  
  
 一般來說，您會呼叫方法上<xref:System.ServiceProcess.ServiceInstaller>內您的程式碼; 它們通常稱為只能由安裝公用程式。 安裝公用程式會自動呼叫<xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType>和<xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=nameWithType>安裝程序期間的方法。 它會出失敗，如有必要，藉由呼叫<xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A>(或<xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=nameWithType>) 上所有先前安裝的元件  
  
 應用程式的安裝常式會維護的資訊會自動使用專案安裝程式的元件已安裝， <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>。 這個狀態資訊，將會傳入<xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A>作為`stateSaver`參數，會持續更新為<xref:System.ServiceProcess.ServiceProcessInstaller>執行個體和每個<xref:System.ServiceProcess.ServiceInstaller>公用程式會安裝執行個體。 它是通常不需要為您的程式碼，明確地修改此狀態資訊。  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A> 將基底類別方法所擲回任何例外狀況傳遞至呼叫的方法或<xref:System.Configuration.Install.Installer.BeforeInstall>  /  <xref:System.Configuration.Install.Installer.AfterInstall>事件處理常式。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="stateSaver" /> 為 <see langword="null" />。</exception>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Uninstall(System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="Password">
      <MemberSignature Language="C#" Value="public string Password { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Password" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceProcessInstaller.Password" />
      <MemberSignature Language="VB.NET" Value="Public Property Password As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Password { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Password : string with get, set" Usage="System.ServiceProcess.ServiceProcessInstaller.Password" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定與執行服務應用程式的使用者帳戶相關的密碼。</summary>
        <value>密碼，與應執行服務的帳戶相關。 預設為空字串 ("")。 屬性不是公用的，而且無法被序列化。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>和<xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>組可讓服務系統帳戶以外的帳戶下執行。 這可以比方說，讓服務在重新開機，沒有任何使用者登入時自動啟動。  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> 並<xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>，因為它們永遠不會序列化或儲存至的安裝狀態，以安全的方式處理 (專案安裝程式的<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>) 或其他公開存取的位置。  
  
 設定<xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>和<xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>可讓系統在安裝期間會自動與服務相關聯的帳戶。 如果您將保留其中一個<xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>或<xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>空的而且設定<xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A>到`User`，將會提示您輸入有效的使用者名稱和密碼進行安裝時。  
  
 執行個別的帳戶服務的另一個選項是使用電腦的系統帳戶。 該帳戶，也就是不同的系統管理員帳戶，不需要密碼。 系統帳戶的權限可能會超過目前登入的使用者。 在系統帳戶下執行，而不是使用者帳戶可避免因使用者缺乏權限的問題，服務需要  
  
 如果<xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A>而不是任何值`User`，指定使用的帳戶 （本機或網路服務或本機系統） 是，即使<xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>和<xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>屬性都會填入。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Username" />
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Account" />
        <altmember cref="T:System.ServiceProcess.Design.ServiceInstallerDialog" />
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public override void Rollback (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Rollback(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Rollback (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Rollback(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Rollback : System.Collections.IDictionary -&gt; unit" Usage="serviceProcessInstaller.Rollback savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState"><see cref="T:System.Collections.IDictionary" />，包含與安裝相關的內容資訊。</param>
        <summary>經由安裝程序復原寫入登錄的服務應用程式資訊， 這個方法是安裝工具所使用的方法，安裝工具會自動處理適當的方法。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一般來說，您未呼叫的方法上<xref:System.ServiceProcess.ServiceProcessInstaller>內您的程式碼; 它們通常稱為只能由安裝公用程式。 安裝公用程式會自動呼叫<xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType>安裝程序期間的方法。 它會出失敗，如有必要，藉由呼叫<xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A>產生例外狀況物件上。  
  
 應用程式的安裝常式會維護的資訊會自動使用專案安裝程式的元件已安裝， <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>。 這個狀態資訊，將會傳入<xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A>作為`savedState`參數，會持續更新為<xref:System.ServiceProcess.ServiceProcessInstaller>執行個體和每個<xref:System.ServiceProcess.ServiceInstaller>公用程式會安裝執行個體。 它是通常不需要為您的程式碼，明確地修改此狀態資訊。  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> 將基底類別方法所擲回任何例外狀況傳遞至呼叫的方法或<xref:System.Configuration.Install.Installer.BeforeInstall>  /  <xref:System.Configuration.Install.Installer.AfterInstall>事件處理常式。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="savedState" /> 為 <see langword="null" />。  
  
-或- 
<paramref name="savedState" /> 已損毀或不存在。</exception>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="T:System.Configuration.Install.ComponentInstaller" />
      </Docs>
    </Member>
    <Member MemberName="Username">
      <MemberSignature Language="C#" Value="public string Username { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Username" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceProcessInstaller.Username" />
      <MemberSignature Language="VB.NET" Value="Public Property Username As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Username { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Username : string with get, set" Usage="System.ServiceProcess.ServiceProcessInstaller.Username" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定將要執行服務應用程式的使用者帳戶。</summary>
        <value>應該執行服務的帳戶， 預設為空字串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>和<xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>組可讓服務系統帳戶以外的帳戶下執行。 這可以比方說，讓服務在重新開機，沒有任何使用者登入時自動啟動。  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> 並<xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>，因為它們永遠不會序列化或儲存至的安裝狀態，以安全的方式處理 (專案安裝程式的<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>) 或其他公開存取的位置。  
  
 設定<xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>和<xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>可讓系統在安裝期間會自動與服務相關聯的帳戶。 如果您將保留其中一個<xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>或<xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>空的而且設定<xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A>到`User`，將會提示您輸入有效的使用者名稱和密碼進行安裝時。  
  
 執行個別的帳戶服務的另一個選項是使用電腦的系統帳戶。 該帳戶，也就是不同的系統管理員帳戶，不需要密碼。 系統帳戶的權限可能會超過目前登入的使用者。 在系統帳戶下執行，而不是使用者帳戶可避免因使用者缺乏權限的問題，服務需要  
  
 如果<xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A>而不是任何值`User`，會使用指定的帳戶 （本機或網路服務或本機系統），即使<xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>和<xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>屬性都會填入。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Password" />
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Account" />
        <altmember cref="T:System.ServiceProcess.Design.ServiceInstallerDialog" />
      </Docs>
    </Member>
  </Members>
</Type>