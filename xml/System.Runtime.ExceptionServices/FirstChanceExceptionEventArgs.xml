<Type Name="FirstChanceExceptionEventArgs" FullName="System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5d9a578701bc3eb4e43e1042c5590eab84e26419" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48710777" /></Metadata><TypeSignature Language="C#" Value="public class FirstChanceExceptionEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FirstChanceExceptionEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class FirstChanceExceptionEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class FirstChanceExceptionEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type FirstChanceExceptionEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="3907f-101">在 Common Language Runtime 開始搜尋事件處理常式之前，為第一次發生 Managed 例外狀況時所引發的通知事件提供相關資料。</span><span class="sxs-lookup"><span data-stu-id="3907f-101">Provides data for the notification event that is raised when a managed exception first occurs, before the common language runtime begins searching for event handlers.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3907f-102">這個類別會提供例外狀況處理常式<xref:System.AppDomain.FirstChanceException?displayProperty=nameWithType>存取例外狀況的事件。</span><span class="sxs-lookup"><span data-stu-id="3907f-102">This class provides the exception handler for the <xref:System.AppDomain.FirstChanceException?displayProperty=nameWithType> event with access to the exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3907f-103">下列範例會建立一系列具名的應用程式定義域`Child_0`經由`Child_3`，使用`Worker`每個應用程式定義域中的物件。</span><span class="sxs-lookup"><span data-stu-id="3907f-103">The following example creates a series of application domains named `Child_0` through `Child_3`, with a `Worker` object in each application domain.</span></span> <span data-ttu-id="3907f-104">每個`Worker`物件具有的參考`Worker`物件在下一步 的應用程式網域中，除了`Worker`最後一個應用程式定義域中。</span><span class="sxs-lookup"><span data-stu-id="3907f-104">Each `Worker` object has a reference to the `Worker` object in the next application domain, except for the `Worker` in the last application domain.</span></span> <span data-ttu-id="3907f-105"><xref:System.AppDomain.FirstChanceException>以外的所有應用程式定義域中處理事件`Child_1`。</span><span class="sxs-lookup"><span data-stu-id="3907f-105">The <xref:System.AppDomain.FirstChanceException> event is handled in all application domains except `Child_1`.</span></span>  
  
 <span data-ttu-id="3907f-106">預設應用程式定義域時已建立的應用程式定義域，呼叫`TestException`第一個子應用程式定義域的方法。</span><span class="sxs-lookup"><span data-stu-id="3907f-106">When the application domains have been created, the default application domain calls the `TestException` method for the first child application domain.</span></span> <span data-ttu-id="3907f-107">每個`Worker`物件會呼叫`TestException`方法，請在接下來，直到最後一個`Worker`會擲回例外狀況處理或未處理的。</span><span class="sxs-lookup"><span data-stu-id="3907f-107">Each `Worker` object calls the `TestException` method for the next, until the last `Worker` throws an exception that is either handled or unhandled.</span></span> <span data-ttu-id="3907f-108">因此，目前的執行緒通過所有的應用程式定義域中，和`TestException`新增到每個應用程式定義域中的堆疊。</span><span class="sxs-lookup"><span data-stu-id="3907f-108">Thus, the current thread passes through all the application domains, and `TestException` is added to the stack in each application domain.</span></span>  
  
 <span data-ttu-id="3907f-109">當上次`Worker`物件會處理例外狀況，<xref:System.AppDomain.FirstChanceException>只有在最後一個應用程式定義域引發事件。</span><span class="sxs-lookup"><span data-stu-id="3907f-109">When the last `Worker` object handles the exception, the <xref:System.AppDomain.FirstChanceException> event is raised only in the last application domain.</span></span> <span data-ttu-id="3907f-110">其他的應用程式定義域永遠不會有機會處理例外狀況，因此不會引發事件。</span><span class="sxs-lookup"><span data-stu-id="3907f-110">The other application domains never get a chance to handle the exception, so the event is not raised.</span></span>  
  
 <span data-ttu-id="3907f-111">當上次`Worker`物件不會處理例外狀況，<xref:System.AppDomain.FirstChanceException>每個應用程式在網域中，事件處理常式就會引發事件。</span><span class="sxs-lookup"><span data-stu-id="3907f-111">When the last `Worker` object does not handle the exception, the <xref:System.AppDomain.FirstChanceException> event is raised in each application domain that has an event handler.</span></span> <span data-ttu-id="3907f-112">每個事件處理常式已完成之後，堆疊會繼續回溯直到預設應用程式定義域所捕捉的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="3907f-112">After each event handler has finished, the stack continues to unwind until the exception is caught by the default application domain.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3907f-113">若要查看如何堆疊顯示隨著接近引發事件，並使其更接近預設應用程式定義域，變更`e.Exception.Message`要`e.Exception`在`FirstChanceHandler`事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="3907f-113">To see how the stack display grows as the event is raised closer and closer to the default application domain, change `e.Exception.Message` to `e.Exception` in the `FirstChanceHandler` event handlers.</span></span> <span data-ttu-id="3907f-114">請注意，當`TestException`稱為跨應用程式定義域界限，它會出現兩次： 一次的 proxy，一次虛設常式。</span><span class="sxs-lookup"><span data-stu-id="3907f-114">Notice that when `TestException` is called across application domain boundaries, it appears twice: once for the proxy and once for the stub.</span></span>  
  
 [!code-csharp[System.AppDomain.FirstChanceException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.appdomain.firstchanceexception/cs/example.cs#1)]
 [!code-vb[System.AppDomain.FirstChanceException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.appdomain.firstchanceexception/vb/example.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="E:System.AppDomain.FirstChanceException" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FirstChanceExceptionEventArgs (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs.#ctor(System.Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FirstChanceExceptionEventArgs(Exception ^ exception);" />
      <MemberSignature Language="F#" Value="new System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs : Exception -&gt; System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs" Usage="new System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs exception" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception"><span data-ttu-id="3907f-115">Managed 程式碼剛擲回且將由 <see cref="E:System.AppDomain.UnhandledException" /> 事件檢查的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="3907f-115">The exception that was just thrown by managed code, and that will be examined by the <see cref="E:System.AppDomain.UnhandledException" /> event.</span></span></param>
        <summary><span data-ttu-id="3907f-116">使用指定的例外狀況，初始化 <see cref="T:System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="3907f-116">Initializes a new instance of the <see cref="T:System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs" /> class with a specified exception.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3907f-117">Common language runtime 中，會呼叫這個建構函式不是由應用程式程式碼。</span><span class="sxs-lookup"><span data-stu-id="3907f-117">This constructor is called by the common language runtime, not by application code.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public Exception Exception { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception Exception" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs.Exception" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Exception As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Exception ^ Exception { Exception ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Exception : Exception" Usage="System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs.Exception" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3907f-118">與 Managed 程式碼所擲回的例外狀況對應的 Managed 例外狀況物件。</span><span class="sxs-lookup"><span data-stu-id="3907f-118">The managed exception object that corresponds to the exception thrown in managed code.</span></span></summary>
        <value><span data-ttu-id="3907f-119">剛擲回的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="3907f-119">The newly thrown exception.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3907f-120">處理的方法<xref:System.AppDomain.UnhandledException?displayProperty=nameWithType>事件可以檢查例外狀況，並執行適當的記錄或其他 notification services。</span><span class="sxs-lookup"><span data-stu-id="3907f-120">The method that handles the <xref:System.AppDomain.UnhandledException?displayProperty=nameWithType> event can examine the exception and perform appropriate logging or other notification services.</span></span>  
  
 <span data-ttu-id="3907f-121">如需範例程式碼，請參閱 <xref:System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="3907f-121">For example code, see <xref:System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>