<Type Name="SignedXml" FullName="System.Security.Cryptography.Xml.SignedXml">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1f8ac401693b149ab07e9bb6addec91b3ccb14b1" />
    <Meta Name="ms.sourcegitcommit" Value="df6cf590aa3087f6c7c202712eee781c6a3c8f96" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="05/07/2018" />
    <Meta Name="ms.locfileid" Value="33683211" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SignedXml" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SignedXml extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.Xml.SignedXml" />
  <TypeSignature Language="VB.NET" Value="Public Class SignedXml" />
  <TypeSignature Language="C++ CLI" Value="public ref class SignedXml" />
  <AssemblyInfo>
    <AssemblyName>System.Security</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供核心 XML 簽章物件的包裝函式，以利建立 XML 簽章。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.Xml.SignedXml>類別是全球資訊網協會 (W3C) 的.NET Framework 實作[XML 簽章語法和處理規格](https://www.w3.org/TR/xmldsig-core/)，也稱為 XMLDSIG （XML 數位簽章）。  XMLDSIG 是標準為基礎、 可互通的方式，來簽署與驗證所有或部分的 XML 文件或其他資料的可定址的統一資源識別元 (URI)。  
  
 使用<xref:System.Security.Cryptography.Xml.SignedXml>類別，每當您需要共用以標準方式簽署應用程式或組織之間的 XML 資料。  使用這個類別簽章的任何資料可由任何合格 XMLDSIG W3C 規格實作驗證。  
  
 <xref:System.Security.Cryptography.Xml.SignedXml>類別可讓您建立 XML 數位簽章的下列三種：  
  
|簽章類型|描述|  
|--------------------|-----------------|  
|包裹的簽章|簽章會包含在要簽署的 XML 項目。|  
|包裹的簽章|簽署的 XML 包含在 <`Signature`> 項目。|  
|內部已卸離的簽章|簽章與簽署的 XML 在相同的文件，但沒有項目包含的其他。|  
  
 另外還有第四種稱為外部的已卸離簽章時，資料與簽章是在個別的 XML 文件的簽章。 不支援外部卸離的簽章<xref:System.Security.Cryptography.Xml.SignedXml>類別。  
  
## <a name="the-structure-of-an--xml-signature"></a>XML 簽章的結構  
 建立 XMLDSIG <`Signature`> 元素，其中包含數位簽章的 XML 文件或其他資料的可定址的 URI。  <`Signature`> 項目可選擇性地包含有關在哪裡尋找將會驗證簽章金鑰和用於簽章的密碼編譯演算法。 基本結構如下所示：  
  
```xml  
  
<Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">  
    <SignedInfo>  
      <CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315"/>  
      <SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>  
      <Reference URI="">  
        <Transforms>  
          <Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>  
        </Transforms>  
        <DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>  
        <DigestValue>Base64EncodedValue==</DigestValue>  
      </Reference>  
    </SignedInfo>  
    <SignatureValue>AnotherBase64EncodedValue===</SignatureValue>  
  </Signature>  
  
```  
  
 此結構的主要部分包括：  
  
 <`CanonicalizationMethod`> 項目  
 指定規則重寫`Signature`從 XML/文字項目為簽章驗證的位元組。 .NET Framework 中的預設值是http://www.w3.org/TR/2001/REC-xml-c14n-20010315，其可識別值得信任的演算法。 這個項目由<xref:System.Security.Cryptography.Xml.SignedInfo.CanonicalizationMethod%2A?displayProperty=nameWithType>屬性。  
  
 <`SignatureMethod`> 項目  
 指定用來簽章產生和驗證，並已套用至演算法 <`Signature`> 產生的值中的項目 <`SignatureValue`>。 在範例中的值之上http://www.w3.org/2000/09/xmldsig#rsa-sha1識別 RSA PKCS1 sha-1 簽章。 這個項目由<xref:System.Security.Cryptography.Xml.SignedXml.SignatureMethod%2A>屬性。  
  
 <`SignatureValue`> 項目  
 指定的密碼編譯簽章 <`Signature`> 項目。 如果此簽章不會驗證，然後的某些部分 <`Signature`> 區塊已遭竄改，而且文件都被視為無效。 只要 <`CanonicalizationMethod`> 值是值得信任，這個值是高抵抗遭到竄改。 這個項目由<xref:System.Security.Cryptography.Xml.SignedXml.SignatureValue%2A>屬性。  
  
 `URI`屬性 <`Reference`> 項目  
 指定資料物件，使用 URI 參考。 這個屬性由<xref:System.Security.Cryptography.Xml.Reference.Uri%2A?displayProperty=nameWithType>屬性。  
  
-   未指定`URI`屬性，也就是設定<xref:System.Security.Cryptography.Xml.Reference.Uri%2A?displayProperty=nameWithType>屬性`null`，表示，接收應用程式應知道的物件識別。 在大部分情況下， `null` URI 會導致擲回例外狀況。 請勿使用`null`URI，除非您的應用程式與它需要的通訊協定互通。  
  
-   設定`URI`屬性設為空字串表示，要簽署的文件的根項目，一種包裹簽章。  
  
-   如果值`URI`屬性開頭為 #，則值必須解析為目前的文件中的項目。 此表單後可以搭配任何支援的簽章類型 （信封簽章、 封裝簽章或內部已卸離的簽章）。  
  
-   任何其他項目會被視為卸離的外部資源簽章，並不支援<xref:System.Security.Cryptography.Xml.SignedXml>類別。  
  
 <`Transforms`> 項目  
 包含的已排序的清單 <`Transform`> 描述如何簽署者取得的資料物件的項目一。 轉換演算法是類似的規範化方法，但不重寫 <`Signature`> 它重寫的識別內容項目，`URI`屬性 <`Reference`> 項目。 <`Transforms`> 項目由<xref:System.Security.Cryptography.Xml.TransformChain>類別。  
  
-   每個轉換演算法被定義為 XML (XPath 節點集) 或位元組做為輸入。 如果目前的資料格式不同於轉換的輸入需求，則會套用轉換規則。  
  
-   每個轉換演算法會定義為做為輸出中產生 XML 或位元組。  
  
-   如果未定義上次轉換演算法的輸出以位元組為單位 （或未指定任何轉換），然後規範化方法http://www.w3.org/TR/2001/REC-xml-c14n-20010315做為隱含的轉換 (即使使用不同的演算法中指定了 <`CanonicalizationMethod`>項目）。  
  
-   值為http://www.w3.org/2000/09/xmldsig#enveloped-signature轉換演算法會將編碼的規則，會解譯為移除 <`Signature`> 文件中的項目。 否則，信封的簽章的驗證器會摘要文件，包括簽章，但簽署人會有一文件之前套用簽章，導致不同的答案。  
  
 <`DigestMethod`> 項目  
 識別摘要 （密碼編譯雜湊） 要套用的方法上轉換的內容，由`URI`屬性 <`Reference`> 項目。 這由<xref:System.Security.Cryptography.Xml.Reference.DigestMethod%2A?displayProperty=nameWithType>屬性。  
  
## <a name="choosing-a-canonicalization-method"></a>選擇規範化方法  
 除非需要使用不同值的規格與互通，我們建議您使用預設的規範化方法，這是 XML C14N 1.0 演算法，其值是.NET Framework 中http://www.w3.org/TR/2001/REC-xml-c14n-20010315。 特別是因為最終的隱含轉換，來套用 XML C14N 1.0 演算法需要 XMLDSIG 的所有實作必須支援。  
  
 有標準化演算法支援保留註解的版本。 保留註解的規範化方法不會建議因為違反 「 看到登入 」 的原則。 也就是中的註解 <`Signature`> 項目並不會更改，處理邏輯的簽章的執行方式，只是哪些簽章值為。 結合的弱式的簽章演算法，讓攻擊者不必要的自由強制雜湊衝突，是包含可提供的註解時讓看起來像是合法遭竄改的文件。  在.NET Framework 中，內建 canonicalizers 只支援預設。 若要支援其他或自訂 canonicalizers，請參閱<xref:System.Security.Cryptography.Xml.SignedXml.SafeCanonicalizationMethods%2A>屬性。 如果文件使用不在集合所代表的規範化方法<xref:System.Security.Cryptography.Xml.SignedXml.SafeCanonicalizationMethods%2A>屬性，則<xref:System.Security.Cryptography.Xml.SignedXml.CheckSignature%2A>方法會傳回`false`。  
  
> [!NOTE]
>  極防禦應用程式可以移除不會預期要從使用簽署人的任何值<xref:System.Security.Cryptography.Xml.SignedXml.SafeCanonicalizationMethods%2A>集合。  
  
## <a name="are-the-reference-values-safe-from-tampering"></a>會參考值不受竄改安全嗎？  
 是，<`Reference`> 的值為安全，防止遭到竄改。  .NET framework 會確認 <`SignatureValue`> 計算之前處理的任何 <`Reference`> 值和其相關聯轉換，並將中止早期以避免潛在的惡意的處理指示。  
  
## <a name="choosing-the-elements-to-sign"></a>選擇要簽署項目  
 我們建議您使用的值""的`URI`屬性 (或設定<xref:System.Security.Cryptography.Xml.Reference.Uri%2A>屬性設為空字串)，如果可能的話。 這表示摘要計算，這表示整份文件會保護不受竄改，就會考慮整份文件。  
  
 它是很常見，請參閱`URI`錨點，例如 #foo，其 ID 屬性為"foo"項目表單中的值。 不幸的是，很容易被竄改，因為這樣會包含目標項目，而不是內容的內容。 濫用區別這兩者即為 XML 簽章包裝 (XSW)。  
  
 如果您的應用程式會認為是語意的註解 （這不常見時處理 XML），則應該使用 「 #xpointer(/)"而不是""，和 「 #xpointer(id('foo'))"而不是"#foo"。 #Xpointer 版本都會解譯為包括註解，雖然 shortname 表單不會包括註解。  
  
 如果您需要接受僅部分受保護的文件，而且您想要確保您正在閱讀的相同的內容保護簽章，請使用<xref:System.Security.Cryptography.Xml.SignedXml.GetIdElement%2A>方法。  
  
## <a name="security-considerations-about-the-keyinfo-element"></a>KeyInfo 項目相關的安全性考量  
 選擇性的資料 <`KeyInfo`> 項目 (也就是<xref:System.Security.Cryptography.Xml.SignedXml.KeyInfo%2A>屬性)，其中包含的索引鍵來驗證簽章，不應該信任。  
  
 特別是當<xref:System.Security.Cryptography.Xml.SignedXml.KeyInfo%2A>值代表裸機 RSA、 DSA 或 ECDSA 公開金鑰，文件可能已遭竄改，儘管<xref:System.Security.Cryptography.Xml.SignedXml.CheckSignature%2A>reporting 簽章是否有效的方法。  這可能是因為實體進行竄改只對產生新的金鑰和重新簽署遭竄改的文件，該新的索引鍵。 因此，除非您的應用程式會驗證的公開金鑰是預期的值，如同它已遭竄改，應該為其文件。 這需要您的應用程式檢查內嵌在文件的公開金鑰，並確認針對一份文件內容的已知值。 比方說，如果文件無法瞭解的已知使用者發行，您會檢查與該使用者所使用的已知索引鍵清單的索引鍵。  
  
 您也可以在使用中處理文件之後驗證金鑰<xref:System.Security.Cryptography.Xml.SignedXml.CheckSignatureReturningKey%2A>方法，而不是使用<xref:System.Security.Cryptography.Xml.SignedXml.CheckSignature%2A>方法。 但是，為了取得最佳安全性，您應該事先確認索引鍵。  
  
 或者，請考慮嘗試使用者的已註冊的公開金鑰，而不是讀取功能的 <`KeyInfo`> 項目。  
  
## <a name="security-considerations-about-the-x509data-element"></a>X509Data 項目相關的安全性考量  
 選擇性 <`X509Data`> 元素是子系 <`KeyInfo`> 項目與包含一或多個 X509 憑證或識別項的 X509 憑證。 中的資料 <`X509Data`> 項目也不能本質上受到信任。  
  
 確認內嵌在文件時 <`X509Data`> 項目，.NET Framework 只會確認資料解析 x509 憑證的公開金鑰可以成功地用來驗證文件簽章。 不同於呼叫<xref:System.Security.Cryptography.Xml.SignedXml.CheckSignature%2A>方法`verifySignatureOnly`參數設定為`false`、 無撤銷檢查，勾選沒有鏈結信任，並確認沒有到期。 即使您的應用程式會擷取憑證本身，並將其傳遞給<xref:System.Security.Cryptography.Xml.SignedXml.CheckSignature%2A>方法`verifySignatureOnly`參數設定為`false`，也就是仍不足夠，以防遭到竄改的文件的驗證。 要驗證為適用於所簽署的文件仍然需要憑證。  
  
 使用內嵌的簽章憑證可提供有用的金鑰更換策略是否在 <`X509Data`> 區段或文件內容中。 使用這個方式時應用程式應該手動擷取憑證，並執行驗證類似於：  
  
-   憑證已發出直接或透過鏈結由憑證授權單位 (CA) 的公開憑證會內嵌在應用程式。  
  
     使用作業系統提供的信任清單，而不需額外檢查，例如已知的主體名稱，並不足以防止竄改中<xref:System.Security.Cryptography.Xml.SignedXml>。  
  
-   對憑證進行確認要在文件簽署時已過期 （或 「 現在 」 的近即時的文件處理）。  
  
-   對於長時間執行可支援撤銷 CA 所簽發的憑證，請確認憑證未被撤銷。  
  
-   憑證主體會被驗證為正在適用於目前文件。  
  
## <a name="choosing-the-transform-algorithm"></a>選擇轉換演算法  
 如果您進行交互操作的已指定特定值 （例如 XrML) 規格，您需要遵循的規格。  如果您有包裹的簽章 (例如當簽署整份文件)，則您需要使用http://www.w3.org/2000/09/xmldsig#enveloped-signature(由<xref:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform>類別)。 您可以指定隱含 XML C14N 轉換，但不需要。  包裹或已卸離的簽章，不不需要任何轉換。 隱含的 XML C14N 轉換會負責所有項目。  
  
 使用更新的安全性所導入[Microsoft 安全性公告 MS16-035](https://technet.microsoft.com/en-us/library/security/ms16-035.aspx)，.NET Framework 已限制轉換可以是用於驗證文件依預設，使用不受信任的轉換造成<xref:System.Security.Cryptography.Xml.SignedXml.CheckSignature%2A>永遠傳回`false`。 特別是，需要額外的輸入 （指定為 XML 中的子元素） 的轉換不再允許由於其造成機率不當使用的惡意使用者。 W3C 建議避免使用 XPath 和 XSLT 轉換，也就是受到這些限制的兩個主要的轉換。  
  
## <a name="the-problem-with-external-references"></a>使用外部參考的問題  
 如果應用程式不會驗證外部參考似乎是適用於目前的內容，它們可能遭濫用提供許多安全性漏洞 （包括阻絕服務，分散式反映阻絕服務，資訊的方式洩漏、 簽章許可和遠端執行程式碼）。 即使應用程式來驗證外部參考 URI，而保持兩次載入的資源問題： 當您的應用程式讀取它，一旦另一次當<xref:System.Security.Cryptography.Xml.SignedXml>讀取它。 並不保證應用程式讀取和文件驗證步驟具有相同的內容，因為簽章不提供可信度。  
  
 指定的外部參考，風險<xref:System.Security.Cryptography.Xml.SignedXml>遇到外部參考時將會擲回例外狀況。  如需有關此問題的詳細資訊，請參閱[知識庫文章 3148821](https://support.microsoft.com/en-us/kb/3148821)。  
  
   
  
## Examples  
 下列程式碼範例示範如何登入，並確認使用信封的簽章的整個 XML 文件。  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope/CPP/exampleenvelope.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope/CS/exampleenvelope.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope/VB/exampleenvelope.vb#1)]  
  
 下列程式碼範例示範如何簽署與驗證 XML 文件使用包裹的簽章的單一項目。  
  
 [!code-cpp[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/VB/sample.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SignedXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SignedXml();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例示範如何登入，並確認使用信封的簽章的整個 XML 文件。  
  
 [!code-cpp[Cryptography.XML.Signature - Envelope#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.Signature - Envelope/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.XML.Signature - Envelope#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.Signature - Envelope/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.Signature - Envelope#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.Signature - Envelope/VB/sample.vb#1)]  
  
 下列程式碼範例示範如何登入，並確認使用卸離的簽章的統一資源識別元 (URI) 定址的物件。  
  
 [!code-cpp[XMLDSIG - Signature - Detached#1](~/samples/snippets/cpp/VS_Snippets_CLR/XMLDSIG - Signature - Detached/CPP/sample.cpp#1)]
 [!code-csharp[XMLDSIG - Signature - Detached#1](~/samples/snippets/csharp/VS_Snippets_CLR/XMLDSIG - Signature - Detached/CS/sample.cs#1)]
 [!code-vb[XMLDSIG - Signature - Detached#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/XMLDSIG - Signature - Detached/VB/sample.vb#1)]  
  
 下列程式碼範例示範如何簽署與驗證 XML 文件使用包裹的簽章的單一項目。  
  
 [!code-cpp[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SignedXml (System.Xml.XmlDocument document);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlDocument document) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.#ctor(System.Xml.XmlDocument)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (document As XmlDocument)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SignedXml(System::Xml::XmlDocument ^ document);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="document" Type="System.Xml.XmlDocument" />
      </Parameters>
      <Docs>
        <param name="document">用來初始化 <see cref="T:System.Xml.XmlDocument" /> 的新執行個體的 <see cref="T:System.Security.Cryptography.Xml.SignedXml" />。</param>
        <summary>從指定的 XML 文件，初始化 <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例示範如何登入，並確認使用信封的簽章的整個 XML 文件。  
  
 [!code-cpp[Cryptography.XML.Signature - Envelope#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.Signature - Envelope/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.XML.Signature - Envelope#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.Signature - Envelope/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.Signature - Envelope#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.Signature - Envelope/VB/sample.vb#1)]  
  
 下列程式碼範例示範如何登入，並確認使用卸離的簽章的統一資源識別元 (URI) 定址的物件。  
  
 [!code-cpp[XMLDSIG - Signature - Detached#1](~/samples/snippets/cpp/VS_Snippets_CLR/XMLDSIG - Signature - Detached/CPP/sample.cpp#1)]
 [!code-csharp[XMLDSIG - Signature - Detached#1](~/samples/snippets/csharp/VS_Snippets_CLR/XMLDSIG - Signature - Detached/CS/sample.cs#1)]
 [!code-vb[XMLDSIG - Signature - Detached#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/XMLDSIG - Signature - Detached/VB/sample.vb#1)]  
  
 下列程式碼範例示範如何簽署與驗證 XML 文件使用包裹的簽章的單一項目。  
  
 [!code-cpp[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="document" /> 參數為 <see langword="null" />。  
  
 -或-  
  
 <paramref name="document" /> 參數包含 null <see cref="P:System.Xml.XmlDocument.DocumentElement" /> 屬性。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SignedXml (System.Xml.XmlElement elem);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlElement elem) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.#ctor(System.Xml.XmlElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (elem As XmlElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SignedXml(System::Xml::XmlElement ^ elem);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="elem" Type="System.Xml.XmlElement" />
      </Parameters>
      <Docs>
        <param name="elem">用來初始化 <see cref="T:System.Xml.XmlElement" /> 的新執行個體的 <see cref="T:System.Security.Cryptography.Xml.SignedXml" />。</param>
        <summary>從指定的 <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> 物件，初始化 <see cref="T:System.Xml.XmlElement" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="elem" /> 參數為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddObject">
      <MemberSignature Language="C#" Value="public void AddObject (System.Security.Cryptography.Xml.DataObject dataObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddObject(class System.Security.Cryptography.Xml.DataObject dataObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.AddObject(System.Security.Cryptography.Xml.DataObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddObject(System::Security::Cryptography::Xml::DataObject ^ dataObject);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataObject" Type="System.Security.Cryptography.Xml.DataObject" />
      </Parameters>
      <Docs>
        <param name="dataObject">要加入至要簽章物件之清單的 <see cref="T:System.Security.Cryptography.Xml.DataObject" /> 物件。</param>
        <summary>將 <see cref="T:System.Security.Cryptography.Xml.DataObject" /> 物件加入至要簽章物件的清單。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.Xml.SignedXml.AddObject%2A>方法會將 <`Object`> 項目，表示簽署物件 <`Signature`> 元素的 XML 數位簽章。  
  
 <xref:System.Security.Cryptography.Xml.SignedXml.AddObject%2A>方法會在內部呼叫<xref:System.Security.Cryptography.Xml.Signature.AddObject%2A>方法<xref:System.Security.Cryptography.Xml.Signature>物件所封裝<xref:System.Security.Cryptography.Xml.SignedXml>物件。  您也可以加入<xref:System.Security.Cryptography.Xml.DataObject>透過直接呼叫<xref:System.Security.Cryptography.Xml.Signature.AddObject%2A>方法從<xref:System.Security.Cryptography.Xml.SignedXml.Signature%2A>屬性。  
  
 如需 XML 數位簽章的詳細資訊，請參閱位於 www.w3.org/TR/xmldsig-core/ XMLDSIG 規格。  
  
   
  
## Examples  
 下列程式碼範例會計算和 XML 簽章中。  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXml-AddObject-AddReference#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml-AddObject-AddReference/CPP/example.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXml-AddObject-AddReference#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml-AddObject-AddReference/CS/example.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXml-AddObject-AddReference#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml-AddObject-AddReference/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddReference">
      <MemberSignature Language="C#" Value="public void AddReference (System.Security.Cryptography.Xml.Reference reference);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddReference(class System.Security.Cryptography.Xml.Reference reference) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.AddReference(System.Security.Cryptography.Xml.Reference)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddReference(System::Security::Cryptography::Xml::Reference ^ reference);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reference" Type="System.Security.Cryptography.Xml.Reference" />
      </Parameters>
      <Docs>
        <param name="reference">
          <see cref="T:System.Security.Cryptography.Xml.Reference" /> 物件，描述建立 XML 數位簽章時使用的摘要方法、摘要值和轉換。</param>
        <summary>將 <see cref="T:System.Security.Cryptography.Xml.Reference" /> 物件加入 <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> 物件，該物件描述建立 XML 數位簽章時使用的摘要方法、摘要值和轉換。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.Xml.SignedXml.AddReference%2A>方法會將 <`Reference`> 項目<xref:System.Security.Cryptography.Xml.SignedXml>描述摘要方法、 摘要值，以及要用來建立 XML 數位簽章轉換的物件。  <`Reference`> 元素是元素的子元素 <`SignedInfo`> 項目。  
  
 <xref:System.Security.Cryptography.Xml.SignedXml.AddReference%2A>方法會在內部呼叫<xref:System.Security.Cryptography.Xml.SignedInfo.AddReference%2A>方法<xref:System.Security.Cryptography.Xml.SignedInfo>物件所封裝<xref:System.Security.Cryptography.Xml.SignedXml>物件。  您也可以加入<xref:System.Security.Cryptography.Xml.Reference>透過直接呼叫<xref:System.Security.Cryptography.Xml.SignedInfo.AddReference%2A>方法從<xref:System.Security.Cryptography.Xml.SignedXml.SignedInfo%2A>屬性。  
  
 如需 XML 數位簽章的詳細資訊，請參閱位於 www.w3.org/TR/xmldsig-core/ XMLDSIG 規格。  
  
   
  
## Examples  
 下列程式碼範例示範如何登入，並確認使用信封的簽章的整個 XML 文件。  
  
 [!code-cpp[Cryptography.XML.Signature - Envelope#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.Signature - Envelope/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.XML.Signature - Envelope#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.Signature - Envelope/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.Signature - Envelope#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.Signature - Envelope/VB/sample.vb#1)]  
  
 下列程式碼範例示範如何登入，並確認使用卸離的簽章的統一資源識別元 (URI) 定址的物件。  
  
 [!code-cpp[XMLDSIG - Signature - Detached#1](~/samples/snippets/cpp/VS_Snippets_CLR/XMLDSIG - Signature - Detached/CPP/sample.cpp#1)]
 [!code-csharp[XMLDSIG - Signature - Detached#1](~/samples/snippets/csharp/VS_Snippets_CLR/XMLDSIG - Signature - Detached/CS/sample.cs#1)]
 [!code-vb[XMLDSIG - Signature - Detached#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/XMLDSIG - Signature - Detached/VB/sample.vb#1)]  
  
 下列程式碼範例示範如何簽署與驗證 XML 文件使用包裹的簽章的單一項目。  
  
 [!code-cpp[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CheckSignature">
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>判斷 <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> 屬性是否會驗證。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CheckSignature">
      <MemberSignature Language="C#" Value="public bool CheckSignature ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CheckSignature() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.CheckSignature" />
      <MemberSignature Language="VB.NET" Value="Public Function CheckSignature () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CheckSignature();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>判斷 <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> 屬性是否使用簽章中的公開金鑰來驗證。</summary>
        <returns>
          如果 <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> 屬性會驗證，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法也會計算參考的摘要和簽章的值。  
  
 如果使用 X.509 簽章簽署 XML 文件<xref:System.Security.Cryptography.Xml.SignedXml.CheckSignature%2A>方法會搜尋適用於驗證憑證的 「 通訊錄 」 存放區。 例如，如果憑證參考的主體金鑰識別碼 (SKI)，<xref:System.Security.Cryptography.Xml.SignedXml.CheckSignature%2A>方法將會選取與此 SKI 憑證，然後再次嘗試它們一個接著一個直到它可以驗證的憑證。  
  
   
  
## Examples  
 下列程式碼範例示範如何登入，並確認使用信封的簽章的整個 XML 文件。  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope/CPP/exampleenvelope.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope/CS/exampleenvelope.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope/VB/exampleenvelope.vb#1)]  
  
 下列程式碼範例示範如何登入，並確認使用卸離的簽章的統一資源識別元 (URI) 定址的物件。  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached/CPP/exampledetached.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached/CS/exampledetached.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached/VB/exampledetached.vb#1)]  
  
 下列程式碼範例示範如何簽署與驗證 XML 文件使用包裹的簽章的單一項目。  
  
 [!code-cpp[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">簽章中公開金鑰的 <see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm" /> 屬性不符合 <see cref="P:System.Security.Cryptography.Xml.SignedXml.SignatureMethod" /> 屬性。  
  
 -或-  
  
 無法建立簽章描述。  
  
 -或-  
  
 無法建立雜湊演算法。</exception>
      </Docs>
    </Member>
    <Member MemberName="CheckSignature">
      <MemberSignature Language="C#" Value="public bool CheckSignature (System.Security.Cryptography.AsymmetricAlgorithm key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CheckSignature(class System.Security.Cryptography.AsymmetricAlgorithm key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.CheckSignature(System.Security.Cryptography.AsymmetricAlgorithm)" />
      <MemberSignature Language="VB.NET" Value="Public Function CheckSignature (key As AsymmetricAlgorithm) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CheckSignature(System::Security::Cryptography::AsymmetricAlgorithm ^ key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Security.Cryptography.AsymmetricAlgorithm" />
      </Parameters>
      <Docs>
        <param name="key">
          <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 屬性的實作，保存要用來驗證 <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> 屬性的金鑰。</param>
        <summary>判斷 <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> 屬性是否會驗證指定的金鑰。</summary>
        <returns>
          如果 <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> 屬性會驗證指定的金鑰，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例示範如何登入，並確認使用卸離的簽章的統一資源識別元 (URI) 定址的物件。  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached/CPP/exampledetached.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached/CS/exampledetached.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached/VB/exampledetached.vb#1)]  
  
 下列程式碼範例示範如何登入，並確認使用信封的簽章的整個 XML 文件。  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope/CPP/exampleenvelope.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope/CS/exampleenvelope.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope/VB/exampleenvelope.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <paramref name="key" /> 參數的 <see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm" /> 屬性不符合 <see cref="P:System.Security.Cryptography.Xml.SignedXml.SignatureMethod" /> 屬性。  
  
 -或-  
  
 無法建立簽章描述。  
  
 -或-  
  
 無法建立雜湊演算法。</exception>
      </Docs>
    </Member>
    <Member MemberName="CheckSignature">
      <MemberSignature Language="C#" Value="public bool CheckSignature (System.Security.Cryptography.KeyedHashAlgorithm macAlg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CheckSignature(class System.Security.Cryptography.KeyedHashAlgorithm macAlg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.CheckSignature(System.Security.Cryptography.KeyedHashAlgorithm)" />
      <MemberSignature Language="VB.NET" Value="Public Function CheckSignature (macAlg As KeyedHashAlgorithm) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CheckSignature(System::Security::Cryptography::KeyedHashAlgorithm ^ macAlg);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="macAlg" Type="System.Security.Cryptography.KeyedHashAlgorithm" />
      </Parameters>
      <Docs>
        <param name="macAlg">保存 MAC (用以驗證 <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /> 屬性) 的 <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> 實作。</param>
        <summary>判斷 <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> 屬性是否會驗證指定的「訊息驗證碼」(MAC) 演算法。</summary>
        <returns>
          如果 <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> 屬性會驗證指定的 MAC，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例示範如何登入，並確認使用卸離的簽章的統一資源識別元 (URI) 定址的物件。  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached/CPP/xmldsigdetachedkeyedhashalg.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached/CS/xmldsigdetachedkeyedhashalg.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached/VB/xmldsigdetachedkeyedhashalg.vb#1)]  
  
 下列程式碼範例示範如何登入，並確認使用包裹的簽章的整個 XML 文件。  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope/CPP/xmldsigenvkeyedhashalg.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope/CS/xmldsigenvkeyedhashalg.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope/VB/xmldsigenvkeyedhashalg.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="macAlg" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">指定的 <see cref="P:System.Security.Cryptography.HashAlgorithm.HashSize" /> 物件的 <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /> 屬性無效。  
  
 -或-  
  
 <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> 屬性為 <see langword="null" />。  
  
 -或-  
  
 無法建立用以檢查簽章的密碼編譯轉換。</exception>
      </Docs>
    </Member>
    <Member MemberName="CheckSignature">
      <MemberSignature Language="C#" Value="public bool CheckSignature (System.Security.Cryptography.X509Certificates.X509Certificate2 certificate, bool verifySignatureOnly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CheckSignature(class System.Security.Cryptography.X509Certificates.X509Certificate2 certificate, bool verifySignatureOnly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.CheckSignature(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CheckSignature (certificate As X509Certificate2, verifySignatureOnly As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CheckSignature(System::Security::Cryptography::X509Certificates::X509Certificate2 ^ certificate, bool verifySignatureOnly);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="certificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate2" />
        <Parameter Name="verifySignatureOnly" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="certificate">用來驗證 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 屬性的 <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> 物件。</param>
        <param name="verifySignatureOnly">
          <see langword="true" /> 表示只驗證簽章，<see langword="false" /> 表示驗證簽章和憑證。</param>
        <summary>判斷 <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> 屬性是否會驗證指定的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 物件，並選擇性判斷憑證是否有效。</summary>
        <returns>
          如果簽章有效則為 <see langword="true" />，否則為 <see langword="false" />。  
  
 -或-  
  
 如果簽章和憑證有效，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在版本的.NET Framework 1.1，未驗證的 X.509 憑證。  在版本 2.0 和更新版本中，驗證 X.509 憑證。  
  
 在 2.0 和更新版本的.NET Framework 中，<xref:System.Security.Cryptography.Xml.SignedXml.CheckSignature%2A>方法會搜尋適用於驗證憑證的 「 通訊錄 」 存放區。 例如，如果憑證參考的主體金鑰識別碼 (SKI)，<xref:System.Security.Cryptography.Xml.SignedXml.CheckSignature%2A>方法將會選取與此 SKI 憑證，然後再次嘗試它們一個接著一個直到它可以驗證的憑證。  
  
   
  
## Examples  
 下列程式碼範例會使用從憑證存放區的 X.509 憑證來簽署與驗證 XML 文件。  
  
 [!code-csharp[Security.Cryptography.Xml.SignedXml.CheckSignature(X509Certificate2,Boolean)#1](~/samples/snippets/csharp/VS_Snippets_CLR/Security.Cryptography.Xml.SignedXml.CheckSignature/cs/sample.cs#1)]
 [!code-vb[Security.Cryptography.Xml.SignedXml.CheckSignature(X509Certificate2,Boolean)#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Security.Cryptography.Xml.SignedXml.CheckSignature/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="certificate" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">無法建立 <paramref name="certificate" /> 參數的簽章描述。</exception>
      </Docs>
    </Member>
    <Member MemberName="CheckSignatureReturningKey">
      <MemberSignature Language="C#" Value="public bool CheckSignatureReturningKey (out System.Security.Cryptography.AsymmetricAlgorithm signingKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CheckSignatureReturningKey([out] class System.Security.Cryptography.AsymmetricAlgorithm&amp; signingKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.CheckSignatureReturningKey(System.Security.Cryptography.AsymmetricAlgorithm@)" />
      <MemberSignature Language="VB.NET" Value="Public Function CheckSignatureReturningKey (ByRef signingKey As AsymmetricAlgorithm) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CheckSignatureReturningKey([Runtime::InteropServices::Out] System::Security::Cryptography::AsymmetricAlgorithm ^ % signingKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="signingKey" Type="System.Security.Cryptography.AsymmetricAlgorithm&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="signingKey">當這個方法傳回時，包含存有簽章中公開金鑰之 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 的實作。 這個參數會以未初始化的狀態傳遞。</param>
        <summary>判斷 <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> 屬性是否使用簽章中的公開金鑰來驗證。</summary>
        <returns>
          如果 <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> 屬性使用簽章中的公開金鑰來驗證，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例示範如何登入，並確認使用卸離的簽章的統一資源識別元 (URI) 定址的物件。  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXML_CheckReturnValue_Detached#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXML_CheckReturnValue_Detached/CPP/exampledetached.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXML_CheckReturnValue_Detached#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXML_CheckReturnValue_Detached/CS/exampledetached.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXML_CheckReturnValue_Detached#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXML_CheckReturnValue_Detached/VB/exampledetached.vb#1)]  
  
 下列程式碼範例示範如何登入，並確認使用包裹的簽章的整個 XML 文件。  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXML_CheckReturnValue_Envelope#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXML_CheckReturnValue_Envelope/CPP/exampleenvelope.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXML_CheckReturnValue_Envelope#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXML_CheckReturnValue_Envelope/CS/exampleenvelope.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXML_CheckReturnValue_Envelope#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXML_CheckReturnValue_Envelope/VB/exampleenvelope.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="signingKey" /> 參數為 null。</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">簽章中公開金鑰的 <see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm" /> 屬性不符合 <see cref="P:System.Security.Cryptography.Xml.SignedXml.SignatureMethod" /> 屬性。  
  
 -或-  
  
 無法建立簽章描述。  
  
 -或-  
  
 無法建立雜湊演算法。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ComputeSignature">
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>計算 XML 數位簽章。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ComputeSignature">
      <MemberSignature Language="C#" Value="public void ComputeSignature ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ComputeSignature() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.ComputeSignature" />
      <MemberSignature Language="VB.NET" Value="Public Sub ComputeSignature ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ComputeSignature();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>計算 XML 數位簽章。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.Xml.SignedXml.ComputeSignature%2A>方法會建立 XML 數位簽章與建構的 XML 項目所需的許多。  
  
 您必須設定要簽署資料和<xref:System.Security.Cryptography.Xml.SignedXml.SigningKey%2A>之前呼叫這個方法的屬性。  
  
   
  
## Examples  
 下列程式碼範例示範如何登入，並確認使用卸離的簽章的統一資源識別元 (URI) 定址的物件。  
  
 [!code-cpp[System.Security.Cryptography.XML-XMLDsigDetached#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigDetached/CPP/xmldsigdetach.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML-XMLDsigDetached#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigDetached/CS/xmldsigdetach.cs#1)]
 [!code-vb[System.Security.Cryptography.XML-XMLDsigDetached#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigDetached/VB/xmldsigdetach.vb#1)]  
  
 下列程式碼範例示範如何登入，並確認使用包裹的簽章的整個 XML 文件。  
  
 [!code-cpp[System.Security.Cryptography.XML-XMLDsigEnvelope#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigEnvelope/CPP/xmldsigenv.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML-XMLDsigEnvelope#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigEnvelope/CS/xmldsigenv.cs#1)]
 [!code-vb[System.Security.Cryptography.XML-XMLDsigEnvelope#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigEnvelope/VB/xmldsigenv.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <see cref="P:System.Security.Cryptography.Xml.SignedXml.SigningKey" /> 屬性為 <see langword="null" />。  
  
 -或-  
  
 <see cref="P:System.Security.Cryptography.Xml.SignedXml.SigningKey" /> 屬性不是 <see cref="T:System.Security.Cryptography.DSA" /> 物件或 <see cref="T:System.Security.Cryptography.RSA" /> 物件。  
  
 -或-  
  
 無法載入金鑰。</exception>
      </Docs>
    </Member>
    <Member MemberName="ComputeSignature">
      <MemberSignature Language="C#" Value="public void ComputeSignature (System.Security.Cryptography.KeyedHashAlgorithm macAlg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ComputeSignature(class System.Security.Cryptography.KeyedHashAlgorithm macAlg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.ComputeSignature(System.Security.Cryptography.KeyedHashAlgorithm)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ComputeSignature (macAlg As KeyedHashAlgorithm)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ComputeSignature(System::Security::Cryptography::KeyedHashAlgorithm ^ macAlg);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="macAlg" Type="System.Security.Cryptography.KeyedHashAlgorithm" />
      </Parameters>
      <Docs>
        <param name="macAlg">
          <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /> 物件，保存用來計算 <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> 屬性值的 MAC。</param>
        <summary>使用指定的訊息驗證碼 (MAC) 演算法，計算 XML 數位簽章。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.Xml.SignedXml.ComputeSignature%2A>方法會建立使用指定的 MAC 演算法的 XML 數位簽章，並建構的 XML 項目所需的許多。  
  
 您必須設定要呼叫這個方法之前被簽署資料。  
  
   
  
## Examples  
 下列程式碼範例示範如何登入，並確認使用卸離的簽章的統一資源識別元 (URI) 定址的物件。  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached/CPP/xmldsigdetachedkeyedhashalg.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached/CS/xmldsigdetachedkeyedhashalg.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached/VB/xmldsigdetachedkeyedhashalg.vb#1)]  
  
 下列程式碼範例示範如何登入，並確認使用包裹的簽章的整個 XML 文件。  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope/CPP/xmldsigenvkeyedhashalg.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope/CS/xmldsigenvkeyedhashalg.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope/VB/xmldsigenvkeyedhashalg.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="macAlg" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <paramref name="macAlg" /> 參數所指定的 <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /> 物件，不是 <see cref="T:System.Security.Cryptography.HMACSHA1" /> 的執行個體。  
  
 -或-  
  
 指定的 <see cref="P:System.Security.Cryptography.HashAlgorithm.HashSize" /> 物件的 <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /> 屬性無效。  
  
 -或-  
  
 無法建立用以檢查簽章的密碼編譯轉換。</exception>
      </Docs>
    </Member>
    <Member MemberName="EncryptedXml">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.Xml.EncryptedXml EncryptedXml { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.Xml.EncryptedXml EncryptedXml" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.SignedXml.EncryptedXml" />
      <MemberSignature Language="VB.NET" Value="Public Property EncryptedXml As EncryptedXml" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::Xml::EncryptedXml ^ EncryptedXml { System::Security::Cryptography::Xml::EncryptedXml ^ get(); void set(System::Security::Cryptography::Xml::EncryptedXml ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.Xml.EncryptedXml</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定定義 XML 加密處理規則的 <see cref="T:System.Security.Cryptography.Xml.EncryptedXml" /> 物件。</summary>
        <value>定義 XML 加密處理規則的 <see cref="T:System.Security.Cryptography.Xml.EncryptedXml" /> 物件。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIdElement">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlElement GetIdElement (System.Xml.XmlDocument document, string idValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlElement GetIdElement(class System.Xml.XmlDocument document, string idValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.GetIdElement(System.Xml.XmlDocument,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetIdElement (document As XmlDocument, idValue As String) As XmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Xml::XmlElement ^ GetIdElement(System::Xml::XmlDocument ^ document, System::String ^ idValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="document" Type="System.Xml.XmlDocument" />
        <Parameter Name="idValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="document">擷取 <see cref="T:System.Xml.XmlDocument" /> 物件的來源 <see cref="T:System.Xml.XmlElement" /> 物件。</param>
        <param name="idValue">要從 <see cref="T:System.Xml.XmlElement" /> 物件中擷取的 <see cref="T:System.Xml.XmlDocument" /> 物件 ID。</param>
        <summary>從指定的 <see cref="T:System.Xml.XmlElement" /> 物件，傳回具有指定 ID 的 <see cref="T:System.Xml.XmlDocument" /> 物件。</summary>
        <returns>來自指定 <see cref="T:System.Xml.XmlElement" /> 物件且具有指定 ID 的 <see cref="T:System.Xml.XmlDocument" /> 物件；如果找不到它的話，則為 <see langword="null" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPublicKey">
      <MemberSignature Language="C#" Value="protected virtual System.Security.Cryptography.AsymmetricAlgorithm GetPublicKey ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Security.Cryptography.AsymmetricAlgorithm GetPublicKey() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.GetPublicKey" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetPublicKey () As AsymmetricAlgorithm" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Security::Cryptography::AsymmetricAlgorithm ^ GetPublicKey();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.AsymmetricAlgorithm</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回簽章的公開金鑰。</summary>
        <returns>
          <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 物件，包含簽章的公開金鑰；如果找不到金鑰，則為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.Xml.SignedXml.GetPublicKey%2A>方法會傳回<xref:System.Security.Cryptography.AsymmetricAlgorithm>物件，其中包含可以用來驗證 XML 數位簽章的公開金鑰。  
  
 索引鍵必須是<xref:System.Security.Cryptography.DSA>或<xref:System.Security.Cryptography.RSA>索引鍵。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <see cref="P:System.Security.Cryptography.Xml.SignedXml.KeyInfo" /> 屬性為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetXml">
      <MemberSignature Language="C#" Value="public System.Xml.XmlElement GetXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlElement GetXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.GetXml" />
      <MemberSignature Language="VB.NET" Value="Public Function GetXml () As XmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlElement ^ GetXml();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回 <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> 物件的 XML 表示。</summary>
        <returns>
          <see cref="T:System.Security.Cryptography.Xml.Signature" /> 物件的 XML 表示。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <see cref="P:System.Security.Cryptography.Xml.SignedXml.SignedInfo" /> 屬性為 <see langword="null" />。  
  
 -或-  
  
 <see cref="P:System.Security.Cryptography.Xml.SignedXml.SignatureValue" /> 屬性為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="KeyInfo">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.Xml.KeyInfo KeyInfo { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.Xml.KeyInfo KeyInfo" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.SignedXml.KeyInfo" />
      <MemberSignature Language="VB.NET" Value="Public Property KeyInfo As KeyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::Xml::KeyInfo ^ KeyInfo { System::Security::Cryptography::Xml::KeyInfo ^ get(); void set(System::Security::Cryptography::Xml::KeyInfo ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.Xml.KeyInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定目前 <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> 物件的 <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> 物件。</summary>
        <value>目前 <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> 物件的 <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> 物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.Xml.SignedXml.KeyInfo%2A>屬性表示 <`KeyInfo`> 元素的 XML 數位簽章使用<xref:System.Security.Cryptography.Xml.KeyInfo>屬性中所包含的物件。  <`KeyInfo`> 元素是元素的子元素 <`Signature`> 項目。  
  
 使用<xref:System.Security.Cryptography.Xml.SignedXml.KeyInfo%2A>內嵌索引鍵的相關資訊的屬性用來協助找出所需的驗證 XML 文件的金鑰。  
  
 如需有關`<KeyInfo>`項目，請參閱位於 www.w3.org/TR/xmldsig-core/ XMLDSIG 規格。  
  
   
  
## Examples  
 下列程式碼範例使用<xref:System.Security.Cryptography.Xml.KeyInfo>簽署表示通用資源識別元 (URI) 的資源時的物件。  這個範例會將簽章儲存在新的檔案。  
  
 [!code-cpp[System.Security.Cryptography.XML-XMLDsigDetached#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigDetached/CPP/xmldsigdetach.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML-XMLDsigDetached#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigDetached/CS/xmldsigdetach.cs#1)]
 [!code-vb[System.Security.Cryptography.XML-XMLDsigDetached#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigDetached/VB/xmldsigdetach.vb#1)]  
  
 下列程式碼範例使用<xref:System.Security.Cryptography.Xml.KeyInfo>簽署 XML 文件時的物件。  這個範例會將簽章儲存在新的檔案。  
  
 [!code-cpp[System.Security.Cryptography.XML-XMLDsigEnvelope#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigEnvelope/CPP/xmldsigenv.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML-XMLDsigEnvelope#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigEnvelope/CS/xmldsigenv.cs#1)]
 [!code-vb[System.Security.Cryptography.XML-XMLDsigEnvelope#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigEnvelope/VB/xmldsigenv.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadXml">
      <MemberSignature Language="C#" Value="public void LoadXml (System.Xml.XmlElement value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadXml(class System.Xml.XmlElement value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.LoadXml(System.Xml.XmlElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadXml (value As XmlElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadXml(System::Xml::XmlElement ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Xml.XmlElement" />
      </Parameters>
      <Docs>
        <param name="value">要載入 <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> 狀態的來源 XML 項目。</param>
        <summary>從 XML 項目載入 <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> 狀態。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Security.Cryptography.Xml.SignedXml.LoadXml%2A>方法來驗證 XML 文件。  
  
 [!code-cpp[System.Security.Cryptography.XML-XMLDsigDetached#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigDetached/CPP/xmldsigdetach.cpp#3)]
 [!code-csharp[System.Security.Cryptography.XML-XMLDsigDetached#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigDetached/CS/xmldsigdetach.cs#3)]
 [!code-vb[System.Security.Cryptography.XML-XMLDsigDetached#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigDetached/VB/xmldsigdetach.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <paramref name="value" /> 參數不包含有效的 <see cref="P:System.Security.Cryptography.Xml.SignedXml.SignatureValue" /> 屬性。  
  
 -或-  
  
 <paramref name="value" /> 參數不包含有效的 <see cref="P:System.Security.Cryptography.Xml.SignedXml.SignedInfo" /> 屬性。</exception>
      </Docs>
    </Member>
    <Member MemberName="m_signature">
      <MemberSignature Language="C#" Value="protected System.Security.Cryptography.Xml.Signature m_signature;" />
      <MemberSignature Language="ILAsm" Value=".field family class System.Security.Cryptography.Xml.Signature m_signature" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.m_signature" />
      <MemberSignature Language="VB.NET" Value="Protected m_signature As Signature " />
      <MemberSignature Language="C++ CLI" Value="protected: System::Security::Cryptography::Xml::Signature ^ m_signature;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.Xml.Signature</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示目前 <see cref="T:System.Security.Cryptography.Xml.Signature" /> 物件的 <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> 物件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_strSigningKeyName">
      <MemberSignature Language="C#" Value="protected string m_strSigningKeyName;" />
      <MemberSignature Language="ILAsm" Value=".field family string m_strSigningKeyName" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.m_strSigningKeyName" />
      <MemberSignature Language="VB.NET" Value="Protected m_strSigningKeyName As String " />
      <MemberSignature Language="C++ CLI" Value="protected: System::String ^ m_strSigningKeyName;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示已安裝金鑰的名稱，用來簽章 <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> 物件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Resolver">
      <MemberSignature Language="C#" Value="public System.Xml.XmlResolver Resolver { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlResolver Resolver" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.SignedXml.Resolver" />
      <MemberSignature Language="VB.NET" Value="Public Property Resolver As XmlResolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlResolver ^ Resolver {  void set(System::Xml::XmlResolver ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlResolver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>設定目前的 <see cref="T:System.Xml.XmlResolver" /> 物件。</summary>
        <value>目前的 <see cref="T:System.Xml.XmlResolver" /> 物件。 預設值為 <see cref="T:System.Xml.XmlSecureResolver" /> 物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlResolver>類別解析由統一資源識別元 (URI) 名為的外部 XML 資源。 如果您不信任來源的 XML 檔案，您可能不想要允許存取電腦資源 URI 所名為 XML 檔案。 您可以使用<xref:System.Security.Cryptography.Xml.SignedXml.Resolver%2A>屬性來控制電腦資源已藉由指定不同的 XML 檔案的存取層級<xref:System.Xml.XmlResolver>物件。 如果不想讓任何存取，您可以將此屬性`null`(`Nothing`在 Visual Basic 中)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SafeCanonicalizationMethods">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;string&gt; SafeCanonicalizationMethods { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;string&gt; SafeCanonicalizationMethods" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.SignedXml.SafeCanonicalizationMethods" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SafeCanonicalizationMethods As Collection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::String ^&gt; ^ SafeCanonicalizationMethods { System::Collections::ObjectModel::Collection&lt;System::String ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>[在 .NET Framework 4.5.1 及更新版本中支援]  
  
 取得標準化演算法獲明確允許之方法的名稱。</summary>
        <value>安全產生標準 XML 之方法的名稱集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 規範化方法會將 XML 文件轉換成其標準形式。 如需標準 XML 的詳細資訊，請參閱[標準 XML](http://www.w3.org/TR/xml-c14n) W3C 網站上。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Signature">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.Xml.Signature Signature { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.Xml.Signature Signature" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.SignedXml.Signature" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Signature As Signature" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::Xml::Signature ^ Signature { System::Security::Cryptography::Xml::Signature ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.Xml.Signature</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得目前 <see cref="T:System.Security.Cryptography.Xml.Signature" /> 物件的 <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> 物件。</summary>
        <value>目前 <see cref="T:System.Security.Cryptography.Xml.Signature" /> 物件的 <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> 物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.Xml.SignedXml.Signature%2A>屬性表示 <`Signature`> 元素的 XML 數位簽章使用<xref:System.Security.Cryptography.Xml.Signature>屬性中所包含的物件。  <`Signature`> 項目是用於 XML 數位簽章建立及驗證的根元素。  
  
 使用<xref:System.Security.Cryptography.Xml.SignedXml.Signature%2A>屬性，以擷取<xref:System.Security.Cryptography.Xml.Signature>物件所使用<xref:System.Security.Cryptography.Xml.SignedXml>物件。  
  
 如需有關`<Signature>`項目，請參閱位於 www.w3.org/TR/xmldsig-core/ XMLDSIG 規格。  
  
   
  
## Examples  
 下列程式碼範例使用<xref:System.Security.Cryptography.Xml.SignedXml.Signature%2A>屬性來簽署與驗證使用信封的簽章的整個 XML 文件。  
  
 [!code-cpp[Cryptography.XML.Signature - Envelope#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.Signature - Envelope/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.XML.Signature - Envelope#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.Signature - Envelope/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.Signature - Envelope#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.Signature - Envelope/VB/sample.vb#1)]  
  
 下列程式碼範例使用<xref:System.Security.Cryptography.Xml.SignedXml.Signature%2A>屬性來簽署與驗證使用卸離的簽章的統一資源識別元 (URI) 定址的物件。  
  
 [!code-cpp[XMLDSIG - Signature - Detached#1](~/samples/snippets/cpp/VS_Snippets_CLR/XMLDSIG - Signature - Detached/CPP/sample.cpp#1)]
 [!code-csharp[XMLDSIG - Signature - Detached#1](~/samples/snippets/csharp/VS_Snippets_CLR/XMLDSIG - Signature - Detached/CS/sample.cs#1)]
 [!code-vb[XMLDSIG - Signature - Detached#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/XMLDSIG - Signature - Detached/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SignatureFormatValidator">
      <MemberSignature Language="C#" Value="public Func&lt;System.Security.Cryptography.Xml.SignedXml,bool&gt; SignatureFormatValidator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Func`2&lt;class System.Security.Cryptography.Xml.SignedXml, bool&gt; SignatureFormatValidator" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.SignedXml.SignatureFormatValidator" />
      <MemberSignature Language="VB.NET" Value="Public Property SignatureFormatValidator As Func(Of SignedXml, Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Func&lt;System::Security::Cryptography::Xml::SignedXml ^, bool&gt; ^ SignatureFormatValidator { Func&lt;System::Security::Cryptography::Xml::SignedXml ^, bool&gt; ^ get(); void set(Func&lt;System::Security::Cryptography::Xml::SignedXml ^, bool&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;System.Security.Cryptography.Xml.SignedXml,System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得在驗證 XML 簽章格式 (不是密碼編譯安全性) 時呼叫的委派。</summary>
        <value>
          如果是可接受的格式則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法可以用來確保，會使用特定的轉換，或簽章會使用特定的雜湊演算法和等等。  
  
 將屬性設定為`null`移除所有簽章格式驗證從<xref:System.Security.Cryptography.Xml.SignedXml>物件。  
  
 您也可以讀取物件的目前委派和鏈結，如果您想要。  
  
 如果您要設定的格式驗證程式，做為輸入參數，將會收到您提供的委派<xref:System.Security.Cryptography.Xml.SignedXml>物件正在驗證，並傳回布林值 –`true`格式可接受的如果`false`如果不是。 如果在委派傳回`false`基於任何理由，<xref:System.Security.Cryptography.Xml.SignedXml>物件會報告 XML 簽章無效。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SignatureLength">
      <MemberSignature Language="C#" Value="public string SignatureLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SignatureLength" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.SignedXml.SignatureLength" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SignatureLength As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SignatureLength { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得目前 <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> 物件的簽章長度。</summary>
        <value>目前 <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> 物件的簽章長度。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SignatureMethod">
      <MemberSignature Language="C#" Value="public string SignatureMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SignatureMethod" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.SignedXml.SignatureMethod" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SignatureMethod As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SignatureMethod { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得目前 <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> 物件的簽章方法。</summary>
        <value>目前 <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> 物件的簽章方法。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.Xml.SignedXml.SignatureMethod%2A>屬性表示 <`SignatureMethod`> XML 數位簽章使用統一資源識別元 (URI) 字串屬性中所包含的項目。 <`SignatureMethod`> 元素是元素的子元素 <`SignedInfo`> 項目。  
  
 使用<xref:System.Security.Cryptography.Xml.SignedXml.SignatureMethod%2A>屬性來擷取 <`SignatureMethod`> 所使用的 URI<xref:System.Security.Cryptography.Xml.SignedXml>物件。 這是一個唯讀的屬性。 如需有關以程式設計方式指定的 URI <`SignatureMethod`> 項目，請參閱<xref:System.Security.Cryptography.Xml.SignedInfo.SignatureMethod%2A>屬性。  
  
 如需有關`<SignatureMethod>`項目，請參閱位於 www.w3.org/TR/xmldsig-core/ XMLDSIG 規格。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SignatureValue">
      <MemberSignature Language="C#" Value="public byte[] SignatureValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] SignatureValue" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.SignedXml.SignatureValue" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SignatureValue As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ SignatureValue { cli::array &lt;System::Byte&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得目前 <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> 物件的簽章值。</summary>
        <value>位元組陣列，包含目前 <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> 物件的簽章值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.Xml.SignedXml.SignatureValue%2A>屬性表示 <`SignatureValue`> XML 數位簽章使用的屬性中所包含的位元組陣列的項目。  <`SignatureValue`> 元素是元素的子元素 <`Signature>`項目。  
  
 使用<xref:System.Security.Cryptography.Xml.SignedXml.SignatureValue%2A>屬性，以擷取 XML 數位簽章的值。  當您在成功呼叫時，就會自動填入這個屬性<xref:System.Security.Cryptography.Xml.SignedXml.ComputeSignature%2A>方法。  
  
 如需有關`<SignatureValue>`項目，請參閱位於 www.w3.org/TR/xmldsig-core/ XMLDSIG 規格。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SignedInfo">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.Xml.SignedInfo SignedInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.Xml.SignedInfo SignedInfo" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.SignedXml.SignedInfo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SignedInfo As SignedInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::Xml::SignedInfo ^ SignedInfo { System::Security::Cryptography::Xml::SignedInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.Xml.SignedInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得目前 <see cref="T:System.Security.Cryptography.Xml.SignedInfo" /> 物件的 <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> 物件。</summary>
        <value>目前 <see cref="T:System.Security.Cryptography.Xml.SignedInfo" /> 物件的 <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> 物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.Xml.SignedXml.SignedInfo%2A>屬性表示 <`SignedInfo`> XML 數位簽章使用的屬性中所包含的位元組陣列的項目。  <`SignedInfo`> 元素是元素的子元素 <`Signature>`項目。  
  
 使用<xref:System.Security.Cryptography.Xml.SignedXml.SignedInfo%2A>屬性，以擷取<xref:System.Security.Cryptography.Xml.SignedInfo>物件，以供<xref:System.Security.Cryptography.Xml.SignedXml>物件來建立 XML 數位簽章。  
  
 如需有關`<SignedInfo>`項目，請參閱位於 www.w3.org/TR/xmldsig-core/ XMLDSIG 規格。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SigningKey">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.AsymmetricAlgorithm SigningKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.AsymmetricAlgorithm SigningKey" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.SignedXml.SigningKey" />
      <MemberSignature Language="VB.NET" Value="Public Property SigningKey As AsymmetricAlgorithm" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::AsymmetricAlgorithm ^ SigningKey { System::Security::Cryptography::AsymmetricAlgorithm ^ get(); void set(System::Security::Cryptography::AsymmetricAlgorithm ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.AsymmetricAlgorithm</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定用來簽章 <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> 物件的非對稱演算法金鑰。</summary>
        <value>用來簽章 <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> 物件的非對稱演算法金鑰。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Security.Cryptography.Xml.SignedXml.SigningKey%2A>屬性來指定非對稱金鑰您想要用來建立 XML 數位簽章。  
  
   
  
## Examples  
 下列程式碼範例示範如何登入，並確認使用信封的簽章的整個 XML 文件。  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope/CPP/exampleenvelope.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope/CS/exampleenvelope.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope/VB/exampleenvelope.vb#1)]  
  
 下列程式碼範例示範如何登入，並確認使用卸離的簽章的統一資源識別元 (URI) 定址的物件。  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached/CPP/exampledetached.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached/CS/exampledetached.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached/VB/exampledetached.vb#1)]  
  
 下列程式碼範例示範如何簽署與驗證 XML 文件使用包裹的簽章的單一項目。  
  
 [!code-cpp[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SigningKeyName">
      <MemberSignature Language="C#" Value="public string SigningKeyName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SigningKeyName" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.SignedXml.SigningKeyName" />
      <MemberSignature Language="VB.NET" Value="Public Property SigningKeyName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SigningKeyName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定已安裝金鑰的名稱，用來簽章 <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> 物件。</summary>
        <value>已安裝金鑰的名稱，用來簽章 <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> 物件。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDecryptionTransformUrl">
      <MemberSignature Language="C#" Value="public const string XmlDecryptionTransformUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDecryptionTransformUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDecryptionTransformUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDecryptionTransformUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDecryptionTransformUrl;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 XML 模式解密轉換的統一資源識別元 (URI)。 這個欄位是常數。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.SignedXml.XmlDecryptionTransformUrl>欄位是"http://www.w3.org/2002/07/decrypt#XML"。  
  
 您可以使用這個欄位很方便提供項目用於 XMLDSIG URI 之屬性的其中一個值。  
  
 如需詳細資訊，請參閱全球資訊網協會 (W3C) 規格在http://www.w3.org/2002/07/decrypt#XML。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigBase64TransformUrl">
      <MemberSignature Language="C#" Value="public const string XmlDsigBase64TransformUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigBase64TransformUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigBase64TransformUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigBase64TransformUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigBase64TransformUrl;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 Base 64 轉換的統一資源識別元 (URI)。 這個欄位是常數。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigBase64TransformUrl>欄位是"http://www.w3.org/2000/09/xmldsig#base64"。  
  
 您可以使用這個欄位很方便提供項目用於 XMLDSIG URI 之屬性的其中一個值。  
  
 <xref:System.Security.Cryptography.Xml.XmlDsigBase64Transform>類別會實作所描述的轉換<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigBase64TransformUrl>欄位。  
  
 如需詳細資訊，請參閱全球資訊網協會 (W3C) 規格在http://www.w3.org/2000/09/xmldsig#base64。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用的成員<xref:System.Security.Cryptography.Xml.XmlDsigBase64Transform>類別。  
  
 [!code-cpp[System.Security.Cryptography.Xml.XmlDsigBase64Transform#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigBase64Transform/CPP/members.cpp#2)]
 [!code-csharp[System.Security.Cryptography.Xml.XmlDsigBase64Transform#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigBase64Transform/CS/members.cs#2)]
 [!code-vb[System.Security.Cryptography.Xml.XmlDsigBase64Transform#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigBase64Transform/VB/members.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigC14NTransformUrl">
      <MemberSignature Language="C#" Value="public const string XmlDsigC14NTransformUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigC14NTransformUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigC14NTransformUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigC14NTransformUrl;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示標準 XML 轉換的統一資源識別元 (URI)。 這個欄位是常數。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl>欄位是"http://www.w3.org/TR/2001/REC-xml-c14n-20010315"。  
  
 您可以使用這個欄位很方便提供項目用於 XMLDSIG URI 之屬性的其中一個值。  
  
 <xref:System.Security.Cryptography.Xml.XmlDsigC14NTransform>類別會實作所描述的轉換<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl>欄位。  
  
 如需詳細資訊，請參閱全球資訊網協會 (W3C) 規格在http://www.w3.org/TR/2001/REC-xml-c14n-20010315。  
  
 此欄位有相同的值<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationUrl>欄位。  
  
   
  
## Examples  
 下列程式碼範例示範如何呼叫的成員<xref:System.Security.Cryptography.Xml.XmlDsigC14NTransform>類別。  
  
 [!code-cpp[System.Security.Cryptography.XML.XMLDsigC14NTransform#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigC14NTransform/CPP/members.cpp#2)]
 [!code-csharp[System.Security.Cryptography.XML.XMLDsigC14NTransform#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigC14NTransform/CS/members.cs#2)]
 [!code-vb[System.Security.Cryptography.XML.XMLDsigC14NTransform#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigC14NTransform/VB/members.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigC14NWithCommentsTransformUrl">
      <MemberSignature Language="C#" Value="public const string XmlDsigC14NWithCommentsTransformUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigC14NWithCommentsTransformUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NWithCommentsTransformUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigC14NWithCommentsTransformUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigC14NWithCommentsTransformUrl;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示標準 XML 轉換的統一資源識別元 (URI)，並包含註解。 這個欄位是常數。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NWithCommentsTransformUrl>欄位是"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments "。  
  
 您可以使用這個欄位很方便提供項目用於 XMLDSIG URI 之屬性的其中一個值。  
  
 <xref:System.Security.Cryptography.Xml.XmlDsigC14NWithCommentsTransform>類別會實作所描述的轉換<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NWithCommentsTransformUrl>欄位。  
  
 如需詳細資訊，請參閱全球資訊網協會 (W3C) 規格在http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments。  
  
 此欄位有相同的值<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationWithCommentsUrl>欄位。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigCanonicalizationUrl">
      <MemberSignature Language="C#" Value="public const string XmlDsigCanonicalizationUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigCanonicalizationUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigCanonicalizationUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigCanonicalizationUrl;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 XML 數位簽章標準規範化演算法的統一資源識別元 (URI)。 這個欄位是常數。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationUrl>欄位是"http://www.w3.org/TR/2001/REC-xml-c14n-20010315"。  
  
 您可以使用這個欄位很方便提供項目用於 XMLDSIG URI 之屬性的其中一個值。  
  
 <xref:System.Security.Cryptography.Xml.XmlDsigC14NTransform>類別會實作所描述的轉換<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationUrl>欄位。  
  
 如需詳細資訊，請參閱全球資訊網協會 (W3C) 規格在http://www.w3.org/TR/2001/REC-xml-c14n-20010315。  
  
 此欄位有相同的值<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl>欄位。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigCanonicalizationWithCommentsUrl">
      <MemberSignature Language="C#" Value="public const string XmlDsigCanonicalizationWithCommentsUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigCanonicalizationWithCommentsUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationWithCommentsUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigCanonicalizationWithCommentsUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigCanonicalizationWithCommentsUrl;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 XML 數位簽章標準規範化演算法的統一資源識別元 (URI)，並包含註解。 這個欄位是常數。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationWithCommentsUrl>欄位是"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments"。  
  
 您可以使用這個欄位很方便提供項目用於 XMLDSIG URI 之屬性的其中一個值。  
  
 <xref:System.Security.Cryptography.Xml.XmlDsigC14NWithCommentsTransform>類別會實作所描述的轉換<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationWithCommentsUrl>欄位。  
  
 如需詳細資訊，請參閱全球資訊網協會 (W3C) 規格在http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments。  
  
 此欄位有相同的值<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NWithCommentsTransformUrl>欄位。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigDSAUrl">
      <MemberSignature Language="C#" Value="public const string XmlDsigDSAUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigDSAUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigDSAUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigDSAUrl;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 XML 數位簽章標準 <see cref="T:System.Security.Cryptography.DSA" /> 演算法的統一資源識別元 (URI)。 這個欄位是常數。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl>欄位是"http://www.w3.org/2000/09/xmldsig#dsa-sha1"。  
  
 您可以使用這個欄位很方便提供項目用於 XMLDSIG URI 之屬性的其中一個值。  
  
 如需詳細資訊，請參閱全球資訊網協會 (W3C) 規格在http://www.w3.org/2000/09/xmldsig#dsa-sha1。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigEnvelopedSignatureTransformUrl">
      <MemberSignature Language="C#" Value="public const string XmlDsigEnvelopedSignatureTransformUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigEnvelopedSignatureTransformUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigEnvelopedSignatureTransformUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigEnvelopedSignatureTransformUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigEnvelopedSignatureTransformUrl;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示包裹簽章轉換的統一資源識別元 (URI)。 這個欄位是常數。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigEnvelopedSignatureTransformUrl>欄位是"http://www.w3.org/2000/09/xmldsig#enveloped-signature"。  
  
 您可以使用這個欄位很方便提供項目用於 XMLDSIG URI 之屬性的其中一個值。  
  
 <xref:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform>類別會實作所描述的轉換<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigEnvelopedSignatureTransformUrl>欄位。  
  
 如需詳細資訊，請參閱全球資訊網協會 (W3C) 規格在http://www.w3.org/2000/09/xmldsig#enveloped-signature。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用的成員<xref:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform>類別。  
  
 [!code-cpp[System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform/cpp/members.cpp#2)]
 [!code-csharp[System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform/CS/members.cs#2)]
 [!code-vb[System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform/VB/members.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigExcC14NTransformUrl">
      <MemberSignature Language="C#" Value="public const string XmlDsigExcC14NTransformUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigExcC14NTransformUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigExcC14NTransformUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigExcC14NTransformUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigExcC14NTransformUrl;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示獨佔 XML 規範化的統一資源識別元 (URI)。 這個欄位是常數。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigExcC14NTransformUrl>欄位是"http://www.w3.org/2001/10/xml-exc-c14n#"。  
  
 您可以使用這個欄位很方便提供項目用於 XMLDSIG URI 之屬性的其中一個值。  
  
 <xref:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform>類別會實作所描述的轉換<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigExcC14NTransformUrl>欄位。  
  
 如需詳細資訊，請參閱全球資訊網協會 (W3C) 規格在http://www.w3.org/2001/10/xml-exc-c14n#。  
  
   
  
## Examples  
 下列程式碼範例示範如何簽署與驗證 XML 文件使用<xref:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform>類別。  這個範例會建立信封簽章。  
  
 [!code-cpp[Cryptography.Xml.XmlDsigExcC14NTransform#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.XmlDsigExcC14NTransform/CPP/example.cpp#1)]
 [!code-csharp[Cryptography.Xml.XmlDsigExcC14NTransform#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.XmlDsigExcC14NTransform/CS/example.cs#1)]
 [!code-vb[Cryptography.Xml.XmlDsigExcC14NTransform#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.XmlDsigExcC14NTransform/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigExcC14NWithCommentsTransformUrl">
      <MemberSignature Language="C#" Value="public const string XmlDsigExcC14NWithCommentsTransformUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigExcC14NWithCommentsTransformUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigExcC14NWithCommentsTransformUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigExcC14NWithCommentsTransformUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigExcC14NWithCommentsTransformUrl;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示獨佔 XML 規範化的統一資源識別元 (URI)，並包含註解。 這個欄位是常數。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigExcC14NWithCommentsTransformUrl>欄位是"http://www.w3.org/2001/10/xml-exc-c14n#WithComments"。  
  
 您可以使用這個欄位很方便提供項目用於 XMLDSIG URI 之屬性的其中一個值。  
  
 <xref:System.Security.Cryptography.Xml.XmlDsigExcC14NWithCommentsTransform>類別會實作所描述的轉換<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigExcC14NWithCommentsTransformUrl>欄位。  
  
 如需詳細資訊，請參閱全球資訊網協會 (W3C) 規格在http://www.w3.org/2001/10/xml-exc-c14n#WithComments。  
  
   
  
## Examples  
 下列程式碼範例示範如何簽署與驗證 XML 文件使用<xref:System.Security.Cryptography.Xml.XmlDsigExcC14NWithCommentsTransform>類別。  這個範例會建立信封簽章。  
  
 [!code-cpp[Cryptography.Xml.XmlDsigExcC14NWithCommentsTransform#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.XmlDsigExcC14NWithCommentsTransform/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.Xml.XmlDsigExcC14NWithCommentsTransform#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.XmlDsigExcC14NWithCommentsTransform/CS/sample.cs#1)]
 [!code-vb[Cryptography.Xml.XmlDsigExcC14NWithCommentsTransform#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.XmlDsigExcC14NWithCommentsTransform/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigHMACSHA1Url">
      <MemberSignature Language="C#" Value="public const string XmlDsigHMACSHA1Url;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigHMACSHA1Url" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigHMACSHA1Url" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigHMACSHA1Url As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigHMACSHA1Url;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 XML 數位簽章標準 <see cref="T:System.Security.Cryptography.HMACSHA1" /> 演算法的統一資源識別元 (URI)。 這個欄位是常數。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigHMACSHA1Url>欄位是"http://www.w3.org/2000/09/xmldsig#hmac-sha1"。  
  
 您可以使用這個欄位很方便提供項目用於 XMLDSIG URI 之屬性的其中一個值。  
  
 如需詳細資訊，請參閱全球資訊網協會 (W3C) 規格在http://www.w3.org/2000/09/xmldsig#hmac-sha1。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigMinimalCanonicalizationUrl">
      <MemberSignature Language="C#" Value="public const string XmlDsigMinimalCanonicalizationUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigMinimalCanonicalizationUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigMinimalCanonicalizationUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigMinimalCanonicalizationUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigMinimalCanonicalizationUrl;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 XML 數位簽章標準最少規範化演算法的統一資源識別元 (URI)。 這個欄位是常數。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigMinimalCanonicalizationUrl>欄位是"http://www.w3.org/2000/09/xmldsig#minimal"。  
  
 您可以使用這個欄位很方便提供項目用於 XMLDSIG URI 之屬性的其中一個值。  
  
 如需詳細資訊，請參閱全球資訊網協會 (W3C) 規格在http://www.w3.org/2000/09/xmldsig#minimal。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigNamespaceUrl">
      <MemberSignature Language="C#" Value="public const string XmlDsigNamespaceUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigNamespaceUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigNamespaceUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigNamespaceUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigNamespaceUrl;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 XML 數位簽章標準命名空間的統一資源識別元 (URI)。 這個欄位是常數。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigNamespaceUrl>欄位是"http://www.w3.org/2000/09/xmldsig#"。  
  
 您可以使用這個欄位很方便提供項目用於 XMLDSIG URI 之屬性的其中一個值。  
  
 如需詳細資訊，請參閱全球資訊網協會 (W3C) 規格在http://www.w3.org/2000/09/xmldsig#。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigRSASHA1Url">
      <MemberSignature Language="C#" Value="public const string XmlDsigRSASHA1Url;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigRSASHA1Url" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigRSASHA1Url As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigRSASHA1Url;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 XML 數位簽章標準 <see cref="T:System.Security.Cryptography.RSA" /> 簽章方法的統一資源識別元 (URI)。 這個欄位是常數。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url>欄位是"http://www.w3.org/2000/09/xmldsig#rsa-sha1"。  
  
 您可以使用這個欄位很方便提供項目用於 XMLDSIG URI 之屬性的其中一個值。  
  
 如需詳細資訊，請參閱全球資訊網協會 (W3C) 規格在http://www.w3.org/2000/09/xmldsig#rsa-sha1。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigRSASHA256Url">
      <MemberSignature Language="C#" Value="public const string XmlDsigRSASHA256Url;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigRSASHA256Url" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA256Url" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigRSASHA256Url As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigRSASHA256Url;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>代表適用於 XML 數位簽章之 <see cref="T:System.Security.Cryptography.RSA" /> SHA-256 簽章方法變化的統一資源識別項 (URI)。 這個欄位是常數。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA256Url>欄位是"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"。  
  
 您可以使用這個欄位很方便提供項目用於 XMLDSIG URI 之屬性的其中一個值。  
  
 如需詳細資訊，請參閱全球資訊網協會 (W3C) 規格在[ https://www.w3.org/2001/04/xmldsig-more#rsa-sha256 ](https://www.w3.org/2001/04/xmldsig-more#rsa-sha256)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigRSASHA384Url">
      <MemberSignature Language="C#" Value="public const string XmlDsigRSASHA384Url;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigRSASHA384Url" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA384Url" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigRSASHA384Url As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigRSASHA384Url;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>代表適用於 XML 數位簽章之 <see cref="T:System.Security.Cryptography.RSA" /> SHA-384 簽章方法變化的統一資源識別項 (URI)。 這個欄位是常數。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA384Url>欄位是"http://www.w3.org/2001/04/xmldsig-more#rsa-sha384"。  
  
 您可以使用這個欄位很方便提供項目用於 XMLDSIG URI 之屬性的其中一個值。  
  
 如需詳細資訊，請參閱全球資訊網協會 (W3C) 規格在[ https://www.w3.org/2001/04/xmldsig-more#rsa-sha384 ](https://www.w3.org/2001/04/xmldsig-more#rsa-sha384)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigRSASHA512Url">
      <MemberSignature Language="C#" Value="public const string XmlDsigRSASHA512Url;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigRSASHA512Url" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA512Url" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigRSASHA512Url As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigRSASHA512Url;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>代表適用於 XML 數位簽章之 <see cref="T:System.Security.Cryptography.RSA" /> SHA-512 簽章方法的統一資源識別項 (URI)。 這個欄位是常數。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA512Url>欄位是"http://www.w3.org/2001/04/xmldsig-more#rsa-sha512"。  
  
 您可以使用這個欄位很方便提供項目用於 XMLDSIG URI 之屬性的其中一個值。  
  
 如需詳細資訊，請參閱全球資訊網協會 (W3C) 規格在[ https://www.w3.org/2001/04/xmldsig-more#rsa-sha512 ](https://www.w3.org/2001/04/xmldsig-more#rsa-sha512)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigSHA1Url">
      <MemberSignature Language="C#" Value="public const string XmlDsigSHA1Url;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigSHA1Url" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA1Url" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigSHA1Url As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigSHA1Url;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>代表 XML 數位簽章之標準 <see cref="T:System.Security.Cryptography.SHA1" /> 摘要方法的統一資源識別項 (URI)。 這個欄位是常數。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA1Url>欄位是"http://www.w3.org/2000/09/xmldsig#sha1"。  
  
 您可以使用這個欄位很方便提供項目用於 XMLDSIG URI 之屬性的其中一個值。  
  
 如需詳細資訊，請參閱全球資訊網協會 (W3C) 規格在http://www.w3.org/2000/09/xmldsig#sha1。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigSHA256Url">
      <MemberSignature Language="C#" Value="public const string XmlDsigSHA256Url;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigSHA256Url" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA256Url" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigSHA256Url As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigSHA256Url;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>代表 XML 數位簽章之標準 <see cref="T:System.Security.Cryptography.SHA256" /> 摘要方法的統一資源識別項 (URI)。 這個欄位是常數。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA256Url>欄位是"http://www.w3.org/2001/04/xmlenc#sha256"。  
  
 您可以使用這個欄位很方便提供項目用於 XMLDSIG URI 之屬性的其中一個值。  
  
 如需詳細資訊，請參閱全球資訊網協會 (W3C) 規格在[ http://www.w3.org/2001/04/xmlenc#sha256 ](http://www.w3.org/2001/04/xmlenc#sha256)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigSHA384Url">
      <MemberSignature Language="C#" Value="public const string XmlDsigSHA384Url;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigSHA384Url" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA384Url" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigSHA384Url As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigSHA384Url;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>代表 XML 數位簽章之標準 <see cref="T:System.Security.Cryptography.SHA384" /> 摘要方法的統一資源識別項 (URI)。 這個欄位是常數。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA384Url>欄位是"http://www.w3.org/2001/04/xmldsig-more#sha384"。  
  
 您可以使用這個欄位很方便提供項目用於 XMLDSIG URI 之屬性的其中一個值。  
  
 如需詳細資訊，請參閱全球資訊網協會 (W3C) 規格在[ https://www.w3.org/2001/04/xmldsig-more#sha384 ](https://www.w3.org/2001/04/xmldsig-more#sha384)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigSHA512Url">
      <MemberSignature Language="C#" Value="public const string XmlDsigSHA512Url;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigSHA512Url" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA512Url" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigSHA512Url As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigSHA512Url;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>代表 XML 數位簽章之標準 <see cref="T:System.Security.Cryptography.SHA512" /> 摘要方法的統一資源識別項 (URI)。 這個欄位是常數。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA512Url>欄位是"http://www.w3.org/2001/04/xmlenc#sha512"。  
  
 您可以使用這個欄位很方便提供項目用於 XMLDSIG URI 之屬性的其中一個值。  
  
 如需詳細資訊，請參閱全球資訊網協會 (W3C) 規格在[ http://www.w3.org/2001/04/xmlenc#sha512 ](http://www.w3.org/2001/04/xmlenc#sha512)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigXPathTransformUrl">
      <MemberSignature Language="C#" Value="public const string XmlDsigXPathTransformUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigXPathTransformUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigXPathTransformUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigXPathTransformUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigXPathTransformUrl;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 XML 路徑語言 (XPath) 的統一資源識別元 (URI)。 這個欄位是常數。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigXPathTransformUrl>欄位是"http://www.w3.org/TR/1999/REC-xpath-19991116"。  
  
 您可以使用這個欄位很方便提供項目用於 XMLDSIG URI 之屬性的其中一個值。  
  
 <xref:System.Security.Cryptography.Xml.XmlDsigXPathTransform>類別會實作所描述的轉換<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigXPathTransformUrl>欄位。  
  
 如需詳細資訊，請參閱全球資訊網協會 (W3C) 規格在http://www.w3.org/TR/1999/REC-xpath-19991116。  
  
   
  
## Examples  
 下列程式碼範例示範如何呼叫的成員<xref:System.Security.Cryptography.Xml.XmlDsigXPathTransform>類別。  
  
 [!code-csharp[System.Security.Cryptography.Xml.XmlDsigXPathTransform#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigXPathTransform/CS/members.cs#2)]
 [!code-vb[System.Security.Cryptography.Xml.XmlDsigXPathTransform#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigXPathTransform/VB/members.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigXsltTransformUrl">
      <MemberSignature Language="C#" Value="public const string XmlDsigXsltTransformUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigXsltTransformUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigXsltTransformUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigXsltTransformUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigXsltTransformUrl;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 XSLT 轉換的統一資源識別元 (URI)。 這個欄位是常數。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigXsltTransformUrl>欄位是"http://www.w3.org/TR/1999/REC-xslt-19991116"。  
  
 您可以使用這個欄位很方便提供項目用於 XMLDSIG URI 之屬性的其中一個值。  
  
 <xref:System.Security.Cryptography.Xml.XmlDsigXsltTransform>類別會實作所描述的轉換<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigXsltTransformUrl>欄位。  
  
 如需詳細資訊，請參閱全球資訊網協會 (W3C) 規格在http://www.w3.org/TR/1999/REC-xslt-19991116。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用的成員<xref:System.Security.Cryptography.Xml.XmlDsigXsltTransform>類別。  
  
 [!code-cpp[System.Security.Cryptography.Xml.XmlDsigXsltTransform#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigXsltTransform/CPP/members.cpp#2)]
 [!code-csharp[System.Security.Cryptography.Xml.XmlDsigXsltTransform#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigXsltTransform/CS/members.cs#2)]
 [!code-vb[System.Security.Cryptography.Xml.XmlDsigXsltTransform#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigXsltTransform/VB/members.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlLicenseTransformUrl">
      <MemberSignature Language="C#" Value="public const string XmlLicenseTransformUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlLicenseTransformUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlLicenseTransformUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlLicenseTransformUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlLicenseTransformUrl;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示用來正規化簽章 XrML 授權之授權轉換演算法的統一資源識別元 (URI)。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.SignedXml.XmlLicenseTransformUrl>欄位是"urn: mpeg:mpeg21:2003:01-REL-R-NS:licenseTransform"  
  
 您可以使用這個欄位很方便提供項目用於 XMLDSIG URI 之屬性的其中一個值。  
  
 <xref:System.Security.Cryptography.Xml.XmlLicenseTransform>類別會實作所描述的轉換<xref:System.Security.Cryptography.Xml.SignedXml.XmlLicenseTransformUrl>欄位。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>