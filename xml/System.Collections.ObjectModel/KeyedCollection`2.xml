<Type Name="KeyedCollection&lt;TKey,TItem&gt;" FullName="System.Collections.ObjectModel.KeyedCollection&lt;TKey,TItem&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8ce2597c1f3d8e4d98d5761be237988390ae5ae8" />
    <Meta Name="ms.sourcegitcommit" Value="6ee2e6b2c5d7c5bd66feeb362d29e65fdf858836" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="11/15/2018" />
    <Meta Name="ms.locfileid" Value="51691530" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class KeyedCollection&lt;TKey,TItem&gt; : System.Collections.ObjectModel.Collection&lt;TItem&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit KeyedCollection`2&lt;TKey, TItem&gt; extends System.Collections.ObjectModel.Collection`1&lt;!TItem&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Collections.ObjectModel.KeyedCollection`2" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class KeyedCollection(Of TKey, TItem)&#xA;Inherits Collection(Of TItem)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TKey, typename TItem&gt;&#xA;public ref class KeyedCollection abstract : System::Collections::ObjectModel::Collection&lt;TItem&gt;" />
  <TypeSignature Language="F#" Value="type KeyedCollection&lt;'Key, 'Item&gt; = class&#xA;    inherit Collection&lt;'Item&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.ObjectModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TKey" />
    <TypeParameter Name="TItem" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Collections.ObjectModel.Collection&lt;TItem&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="T">TItem</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.Mscorlib_KeyedCollectionDebugView`2))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="TKey">集合中的索引鍵型別。</typeparam>
    <typeparam name="TItem">集合中項目的型別。</typeparam>
    <summary>為內嵌在值之索引鍵的集合，提供抽象基底類別。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.ObjectModel.KeyedCollection%602>類別會提供這兩種 o （1） 的索引擷取和接近 o （1） 的擷取做為索引鍵。 它是抽象型別，還是更精確地無限一組抽象型別，因為每個建構的泛型類型是抽象的基底類別。 若要使用<xref:System.Collections.ObjectModel.KeyedCollection%602>，衍生自適當的建構類型的集合類型。  
  
 <xref:System.Collections.ObjectModel.KeyedCollection%602>類別是根據集合之間的混合<xref:System.Collections.Generic.IList%601>泛型介面和集合，可根據<xref:System.Collections.Generic.IDictionary%602>泛型介面。 讓基礎的集合<xref:System.Collections.Generic.IList%601>泛型介面，<xref:System.Collections.ObjectModel.KeyedCollection%602>是項目的索引的清單。 讓基礎的集合<xref:System.Collections.Generic.IDictionary%602>泛型介面，<xref:System.Collections.ObjectModel.KeyedCollection%602>有與每個項目相關聯的索引鍵。  
  
 不同於字典的項目<xref:System.Collections.ObjectModel.KeyedCollection%602>不是索引鍵/值組; 相反地，整個項目是值，而索引鍵內嵌於值。  例如，集合的項目衍生自`KeyedCollection\<String,String>`(`KeyedCollection(Of String, String)` Visual Basic 中) 可能是 「 John Doe Jr.。 」 其中的值是 「 John Doe Jr.。 」 機碼為"Doe";包含整數索引鍵的員工記錄的集合無法衍生自或`KeyedCollection\<int,Employee>`。 抽象<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>方法會擷取項目中的索引鍵。  
  
 根據預設，<xref:System.Collections.ObjectModel.KeyedCollection%602>包含您可使用取得的查閱字典<xref:System.Collections.ObjectModel.KeyedCollection%602.Dictionary%2A>屬性。  當項目加入至<xref:System.Collections.ObjectModel.KeyedCollection%602>，項目索引鍵是擷取一次，並儲存在進行快速搜尋的查閱字典。 藉由指定字典建立臨界值，當您建立覆寫這個行為<xref:System.Collections.ObjectModel.KeyedCollection%602>。 第一次的項目數超過該臨界值時，會建立查閱字典。  如果您指定為-1 做為臨界值時，永遠不會建立查閱字典。  
  
> [!NOTE]
>  使用內部的查閱字典時，它包含在集合中的所有項目的參考如果`TItem`是參考類型，或複製的集合中的所有項目，如果`TItem`是實值類型。 因此，使用的查閱字典可能無法適當如果`TItem`是實值類型。  
  
 您可以使用來存取依其索引或索引鍵的項目<xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A>屬性。 您可以新增項目沒有索引鍵，但後續可以僅依索引存取這些項目。  
  
   
  
## Examples  
 本節包含兩個程式碼範例。 第一個範例顯示的最小的程式碼，才能衍生自<xref:System.Collections.ObjectModel.KeyedCollection%602>，並示範許多繼承的方法。 第二個範例示範如何覆寫的受保護的方法<xref:System.Collections.ObjectModel.KeyedCollection%602>以提供自訂行為。  
  
 **範例 1**  
  
 此程式碼範例顯示的最小的程式碼衍生的集合類別<xref:System.Collections.ObjectModel.KeyedCollection%602>： 覆寫<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>方法，並提供公用建構函式委派至基底類別建構函式。 程式碼範例也示範許多屬性和方法繼承自<xref:System.Collections.ObjectModel.KeyedCollection%602>和<xref:System.Collections.ObjectModel.Collection%601>類別。  
  
 `SimpleOrder`類別是非常簡單的申請清單，其中包含`OrderItem`物件，每一個都代表訂單中行項目。 索引鍵`OrderItem`不變，衍生自類別的一個重要考量<xref:System.Collections.ObjectModel.KeyedCollection%602>。 使用可變動索引鍵的程式碼範例，請參閱<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 **範例 2**  
  
 下列程式碼範例示範如何覆寫受保護<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>，以及<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>方法，以提供自訂的行為，如<xref:System.Collections.ObjectModel.Collection%601.Add%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>，和<xref:System.Collections.ObjectModel.Collection%601.Clear%2A>方法，以及設定預設<xref:System.Collections.ObjectModel.Collection%601.Item%2A>屬性 （C# 中為索引子）。 在此範例中提供的自訂行為是通知事件，名為`Changed`，這在每個覆寫方法結束時引發。  
  
 此程式碼範例會建立`SimpleOrder`類別，衍生自<xref:System.Collections.ObjectModel.KeyedCollection%602>和代表簡單的訂單。 訂購表單包含`OrderItem`物件代表的項目排序。 程式碼範例也會建立`SimpleOrderChangedEventArgs`類別來包含事件資訊，以及列舉型別來識別變更的類型。  
  
 在程式碼範例示範自訂行為，藉由在呼叫的屬性和方法的衍生類別中，`Main`方法的`Demo`類別。  
  
 此程式碼範例會使用不可變的索引鍵中的物件。 使用可變動索引鍵的程式碼範例，請參閱<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Collections.Specialized.StringDictionary" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected KeyedCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; KeyedCollection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 類別的新執行個體，此執行個體使用預設的等號比較子。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Collections.ObjectModel.KeyedCollection%602>建立與這個建構函式會使用預設泛型等號比較子的索引鍵，類型取自<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>。 若要指定不同的泛型等號比較子，請使用<xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%29>建構函式或<xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29>建構函式。  
  
 根據預設，<xref:System.Collections.ObjectModel.KeyedCollection%602>包含第一個項目新增時建立的查閱字典。 當項目加入至<xref:System.Collections.ObjectModel.KeyedCollection%602>，項目索引鍵是擷取一次，並儲存在進行快速搜尋的查閱字典。 使用覆寫這個行為<xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29>建構函式，並指定字典建立臨界值。  
  
> [!NOTE]
>  因為<xref:System.Collections.ObjectModel.KeyedCollection%602>類別是抽象的 (`MustInherit` Visual Basic 中)，您必須衍生自它，才能使用它。 在您的衍生類型的建構函式，呼叫適當<xref:System.Collections.ObjectModel.KeyedCollection%602>建構函式。 您不需要公開 （expose） 功能，例如相等比較子或建構函式的字典建立臨界值。  
  
 這個建構函式是 o （1） 的作業。  
  
   
  
## Examples  
 此程式碼範例顯示的最小的程式碼衍生的集合類別<xref:System.Collections.ObjectModel.KeyedCollection%602>： 覆寫<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>方法，並提供公用建構函式委派至基底類別建構函式。 程式碼範例也示範許多屬性和方法繼承自<xref:System.Collections.ObjectModel.KeyedCollection%602>和<xref:System.Collections.ObjectModel.Collection%601>類別。  
  
 `SimpleOrder`類別是非常簡單的申請清單，其中包含`OrderItem`物件，每一個都代表訂單中行項目。 索引鍵`OrderItem`不變，衍生自類別的一個重要考量<xref:System.Collections.ObjectModel.KeyedCollection%602>。 使用可變動索引鍵的程式碼範例，請參閱<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEqualityComparer`1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected KeyedCollection (System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEqualityComparer`1&lt;!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (comparer As IEqualityComparer(Of TKey))" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; KeyedCollection(System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="new System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt; : System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt;" Usage="new System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt; comparer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <param name="comparer">比較索引鍵時所要使用的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 泛型介面實作，或 <see langword="null" /> 表示為索引鍵型別使用預設等號比較子 (取自 <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />)。</param>
        <summary>初始化 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 類別的新執行個體，此執行個體使用指定的等號比較子。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據預設，<xref:System.Collections.ObjectModel.KeyedCollection%602>包含第一個項目新增時建立的查閱字典。 當項目加入至<xref:System.Collections.ObjectModel.KeyedCollection%602>，項目索引鍵是擷取一次，並儲存在進行快速搜尋的查閱字典。 使用覆寫這個行為<xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29>建構函式，並指定字典建立臨界值。  
  
> [!NOTE]
>  因為<xref:System.Collections.ObjectModel.KeyedCollection%602>類別是抽象的 (`MustInherit` Visual Basic 中)，您必須衍生自它，才能使用它。 在您的衍生類型的建構函式，呼叫適當<xref:System.Collections.ObjectModel.KeyedCollection%602>建構函式。 您不需要公開 （expose） 功能，例如相等比較子或建構函式的字典建立臨界值。  
  
 這個建構函式是 o （1） 的作業。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEqualityComparer`1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected KeyedCollection (System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer, int dictionaryCreationThreshold);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEqualityComparer`1&lt;!TKey&gt; comparer, int32 dictionaryCreationThreshold) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (comparer As IEqualityComparer(Of TKey), dictionaryCreationThreshold As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; KeyedCollection(System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer, int dictionaryCreationThreshold);" />
      <MemberSignature Language="F#" Value="new System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt; : System.Collections.Generic.IEqualityComparer&lt;'Key&gt; * int -&gt; System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt;" Usage="new System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt; (comparer, dictionaryCreationThreshold)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        <Parameter Name="dictionaryCreationThreshold" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="comparer">比較索引鍵時所要使用的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 泛型介面實作，或 <see langword="null" /> 表示為索引鍵型別使用預設等號比較子 (取自 <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />)。</param>
        <param name="dictionaryCreationThreshold">集合不必建立查閱字典就可以保存的項目數目 (當第一個項目加入後即建立查閱字典則為 0)，若指定不建立查閱字典則為 –1。</param>
        <summary>初始化 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 類別的新執行個體，此執行個體使用指定的等號比較子，並在超過指定的臨界值時，建立查閱字典。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據預設，<xref:System.Collections.ObjectModel.KeyedCollection%602>包含第一個項目新增時建立的查閱字典。 當項目加入至<xref:System.Collections.ObjectModel.KeyedCollection%602>，項目索引鍵是擷取一次，並儲存在進行快速搜尋的查閱字典。 這個建構函式可讓您覆寫該行為。 指定要新增的第一個項目時，請建立字典的 0、 1 建立字典，第二個項目新增時，等等。 如果您指定為-1 做為臨界值時，永遠不會建立查閱字典。  
  
 適用於非常小型集合中擷取速度的查閱字典所提供的改進可能不值得字典所需的額外記憶體。 設定臨界值，可讓您決定何時要做出取捨。  
  
> [!NOTE]
>  因為<xref:System.Collections.ObjectModel.KeyedCollection%602>類別是抽象的 (`MustInherit` Visual Basic 中)，您必須衍生自它，才能使用它。 在您的衍生類型的建構函式，呼叫適當<xref:System.Collections.ObjectModel.KeyedCollection%602>建構函式。 您不需要公開 （expose） 功能，例如相等比較子或建構函式的字典建立臨界值。  
  
 這個建構函式是 o （1） 的作業。  
  
   
  
## Examples  
 下列程式碼範例示範如何覆寫受保護<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>，以及<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>方法，以提供自訂的行為，如<xref:System.Collections.ObjectModel.Collection%601.Add%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>，和<xref:System.Collections.ObjectModel.Collection%601.Clear%2A>方法，以及設定預設<xref:System.Collections.ObjectModel.Collection%601.Item%2A>屬性 （C# 中為索引子）。 在此範例中提供的自訂行為是通知事件，名為`Changed`，這在每個覆寫方法結束時引發。  
  
 此程式碼範例會使用<xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29>建構函式包含臨界值為 0，以便在內部字典建立的物件第一次加入至集合。  
  
 此程式碼範例會建立`SimpleOrder`類別，衍生自<xref:System.Collections.ObjectModel.KeyedCollection%602>和代表簡單的訂單。 訂購表單包含`OrderItem`物件代表的項目排序。 程式碼範例也會建立`SimpleOrderChangedEventArgs`類別來包含事件資訊，以及列舉型別來識別變更的類型。  
  
 在程式碼範例示範自訂行為，藉由在呼叫的屬性和方法的衍生類別中，`Main`方法的`Demo`類別。  
  
 此程式碼範例會使用不可變的索引鍵中的物件。 使用可變動索引鍵的程式碼範例，請參閱<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="dictionaryCreationThreshold" /> 小於 –1。</exception>
        <altmember cref="T:System.Collections.Generic.IEqualityComparer`1" />
      </Docs>
    </Member>
    <Member MemberName="ChangeItemKey">
      <MemberSignature Language="C#" Value="protected void ChangeItemKey (TItem item, TKey newKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ChangeItemKey(!TItem item, !TKey newKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ChangeItemKey (item As TItem, newKey As TKey)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ChangeItemKey(TItem item, TKey newKey);" />
      <MemberSignature Language="F#" Value="member this.ChangeItemKey : 'Item * 'Key -&gt; unit" Usage="keyedCollection.ChangeItemKey (item, newKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="TItem" />
        <Parameter Name="newKey" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="item">要變更索引鍵的項目。</param>
        <param name="newKey">
          <paramref name="item" /> 的新索引鍵。</param>
        <summary>變更查閱字典中與指定的項目相關的索引鍵。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法不會修改索引鍵內嵌於`item`; 它只會取代儲存的查閱字典中的金鑰。  因此，如果`newKey`內嵌在索引鍵不同`item`，您無法存取`item`使用所傳回索引鍵<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>。  
  
 這個方法不會執行任何動作如果<xref:System.Collections.ObjectModel.KeyedCollection%602>沒有查閱字典。  
  
 在每個索引鍵<xref:System.Collections.ObjectModel.KeyedCollection%602>必須是唯一的。 金鑰不能是`null`。  
  
 這個方法是 o （1） 作業。  
  
## <a name="notes-for-implementers"></a>實作者的附註  
 修改機碼內嵌在項目之前，您必須呼叫這個方法，以更新中的查閱字典的索引鍵。 如果字典建立臨界值為 – 1，就不需要呼叫這個方法。  
  
 不會公開<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>做為衍生類別的公用方法的方法。 不當使用這個方法會將查閱字典同步的項目索引鍵。 例如，若要設定金鑰`null`並再將它設定為另一個值，將多個索引鍵的項目加入至的查閱字典。 公開 （expose) 此方法在內部以允許可變動的項目索引鍵： 索引鍵的項目變更時，這個方法用來變更查閱字典中的索引鍵。  
  
   
  
## Examples  
 下列程式碼範例示範如何覆寫受保護<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>方法，以支援可變動的索引鍵，以及如何覆寫保護<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>，和<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>方法，以維護的索引鍵的完整性和集合中。  
  
 此程式碼範例會建立`MutableKeys`集合，它是衍生自<xref:System.Collections.ObjectModel.KeyedCollection%602>，和`MutableKey`類別。 `MutableKey`類別具有可設定`Key`屬性。 當新的金鑰指派給屬性時，會呼叫屬性 setter `internal` (`Friend` Visual Basic 中)`ChangeKey`方法來測試是否有新的金鑰會與現有的索引鍵衝突的集合。 如果是的話，會擲回例外狀況，且屬性值不會變更。  
  
 為了維護之間的連線`MutableKey`物件和`MutableKeys`集合，以防止物件被插入兩個集合`MutableKey`類別具有`internal`(`Friend` Visual Basic 中) `Collection`欄位。 此欄位由受保護的方法，提供自訂行為中新增和移除項目集合，例如維護<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>方法。 欄位會設定後的項目加入至集合中移除項目時清除。  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="item" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="key" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">找不到 <paramref name="item" />。  
  
-或- 
 <paramref name="key" /> 已存在於 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 中。</exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)" />
        <altmember cref="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
      </Docs>
    </Member>
    <Member MemberName="ClearItems">
      <MemberSignature Language="C#" Value="protected override void ClearItems ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ClearItems() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub ClearItems ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ClearItems();" />
      <MemberSignature Language="F#" Value="override this.ClearItems : unit -&gt; unit" Usage="keyedCollection.ClearItems " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將所有元素從 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 移除。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果沒有查閱字典，這個方法會清除它，但不會刪除它。  
  
 如果項目數目已超過字典建立臨界值和<xref:System.Collections.ObjectModel.KeyedCollection%602>是使用查閱字典，它會繼續使用查閱字典，即使的項目數會再次低於閾值。  
  
 這個方法是 O (`n`) 運算，其中`n`是<xref:System.Collections.ObjectModel.Collection%601.Count%2A>。  
  
## <a name="notes-for-implementers"></a>實作者的附註  
 覆寫此方法以提供自訂的行為，如<xref:System.Collections.ObjectModel.Collection%601.Clear%2A>方法中，繼承自<xref:System.Collections.ObjectModel.Collection%601>泛型類別。  
  
 呼叫基底類別實作，這個方法，以清除基礎的集合，並清除的查閱字典。  
  
   
  
## Examples  
 本節包含示範如何覆寫的兩個程式碼範例<xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>方法，以清除集合中的所有物件提供自訂行為。 第一個範例會將自訂的通知事件加入與第二個物件的集合提供支援，可變動的索引鍵。  
  
 範例 1  
  
 下列程式碼範例示範如何覆寫受保護<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>，以及<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>方法，以提供自訂的行為，如<xref:System.Collections.ObjectModel.Collection%601.Add%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>，和<xref:System.Collections.ObjectModel.Collection%601.Clear%2A>方法，以及設定預設<xref:System.Collections.ObjectModel.Collection%601.Item%2A>屬性 （C# 中為索引子）。 在此範例中提供的自訂行為是通知事件，名為`Changed`，這在每個覆寫方法結束時引發。  
  
 此程式碼範例會建立`SimpleOrder`類別，衍生自<xref:System.Collections.ObjectModel.KeyedCollection%602>和代表簡單的訂單。 訂購表單包含`OrderItem`物件代表的項目排序。 程式碼範例也會建立`SimpleOrderChangedEventArgs`類別來包含事件資訊，以及列舉型別來識別變更的類型。  
  
 在程式碼範例示範自訂行為，藉由在呼叫的屬性和方法的衍生類別中，`Main`方法的`Demo`類別。  
  
 此程式碼範例會使用不可變的索引鍵中的物件。 使用可變動索引鍵的程式碼範例，請參閱<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 範例 2  
  
 下列程式碼範例示範如何覆寫受保護<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>方法，以支援可變動的索引鍵，以及如何覆寫保護<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>，和<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>方法，以維護的索引鍵的完整性和集合中。  
  
 此程式碼範例會建立`MutableKeys`集合，它是衍生自<xref:System.Collections.ObjectModel.KeyedCollection%602>，和`MutableKey`類別。 `MutableKey`類別具有可設定`Key`屬性。 當新的金鑰指派給屬性時，會呼叫屬性 setter `internal` (`Friend` Visual Basic 中)`ChangeKey`方法來測試是否有新的金鑰會與現有的索引鍵衝突的集合。 如果是的話，會擲回例外狀況，且屬性值不會變更。  
  
 為了維護之間的連線`MutableKey`物件和`MutableKeys`集合，以防止物件被插入兩個集合`MutableKey`類別具有`internal`(`Friend` Visual Basic 中) `Collection`欄位。 此欄位由受保護的方法，提供自訂行為中新增和移除項目集合，例如維護<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>方法。 欄位會設定後的項目加入至集合中移除項目時清除。  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Comparer">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEqualityComparer&lt;TKey&gt; Comparer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEqualityComparer`1&lt;!TKey&gt; Comparer" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ObjectModel.KeyedCollection`2.Comparer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Comparer As IEqualityComparer(Of TKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ Comparer { System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Comparer : System.Collections.Generic.IEqualityComparer&lt;'Key&gt;" Usage="System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt;.Comparer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEqualityComparer&lt;TKey&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得用來判斷集合中索引鍵是否相等的泛型等號比較子。</summary>
        <value>
          <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 泛型介面的實作，用來判斷集合中索引鍵是否相等。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 擷取這個屬性的值是一種 O(1) 運算。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (key As TKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(TKey key);" />
      <MemberSignature Language="F#" Value="override this.Contains : 'Key -&gt; bool" Usage="keyedCollection.Contains key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">要在 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 中尋找的索引鍵。</param>
        <summary>判斷集合是否包含具有指定之索引鍵的項目。</summary>
        <returns>如果 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 包含的元素具有指定索引鍵，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Collections.ObjectModel.KeyedCollection%602>查閱字典，`key`用來搜尋的字典。 如果沒有任何的查閱字典，每個元素的索引鍵所擷取<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>方法相較於指定的索引鍵和。  
  
 這個方法是 o （1） 運算，如果<xref:System.Collections.ObjectModel.KeyedCollection%602>查閱字典; 否則就是 O (`n`) 運算，其中`n`是<xref:System.Collections.ObjectModel.Collection%601.Count%2A>。  
  
   
  
## Examples  
 此程式碼範例顯示的最小的程式碼衍生的集合類別<xref:System.Collections.ObjectModel.KeyedCollection%602>： 覆寫<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>方法，並提供公用建構函式委派至基底類別建構函式。 程式碼範例也示範許多屬性和方法繼承自<xref:System.Collections.ObjectModel.KeyedCollection%602>和<xref:System.Collections.ObjectModel.Collection%601>類別。  
  
 `SimpleOrder`類別是非常簡單的申請清單，其中包含`OrderItem`物件，每一個都代表訂單中行項目。 索引鍵`OrderItem`不變，衍生自類別的一個重要考量<xref:System.Collections.ObjectModel.KeyedCollection%602>。 使用可變動索引鍵的程式碼範例，請參閱<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> 為 <see langword="null" />。</exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)" />
      </Docs>
    </Member>
    <Member MemberName="Dictionary">
      <MemberSignature Language="C#" Value="protected System.Collections.Generic.IDictionary&lt;TKey,TItem&gt; Dictionary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;!TKey, !TItem&gt; Dictionary" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Dictionary As IDictionary(Of TKey, TItem)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Generic::IDictionary&lt;TKey, TItem&gt; ^ Dictionary { System::Collections::Generic::IDictionary&lt;TKey, TItem&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Dictionary : System.Collections.Generic.IDictionary&lt;'Key, 'Item&gt;" Usage="System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt;.Dictionary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;TKey,TItem&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 的查閱字典。</summary>
        <value>
          <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 的查閱字典，如果有的話，否則為 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據預設，<xref:System.Collections.ObjectModel.KeyedCollection%602>包含第一個項目新增時建立的查閱字典。 當項目加入至<xref:System.Collections.ObjectModel.KeyedCollection%602>，項目索引鍵是擷取一次，並儲存在進行快速搜尋的查閱字典。 使用覆寫這個行為<xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29>建構函式，並指定字典建立臨界值。  
  
 擷取這個屬性的值是一種 O(1) 運算。  
  
   
  
## Examples  
 下列程式碼範例示範如何覆寫受保護<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>方法，以支援可變動的索引鍵，以及如何覆寫保護<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>，和<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>方法，以維護的索引鍵的完整性和集合中。  
  
 此程式碼範例會建立`MutableKeys`集合，它是衍生自<xref:System.Collections.ObjectModel.KeyedCollection%602>，和`MutableKey`類別。 `MutableKey`類別具有可設定`Key`屬性。 當新的金鑰指派給屬性時，會呼叫屬性 setter `internal` (`Friend` Visual Basic 中)`ChangeKey`方法來測試是否有新的金鑰會與現有的索引鍵衝突的集合。 如果是的話，會擲回例外狀況，且屬性值不會變更。  
  
 為了維護之間的連線`MutableKey`物件和`MutableKeys`集合，以防止物件被插入兩個集合`MutableKey`類別具有`internal`(`Friend` Visual Basic 中) `Collection`欄位。 此欄位由受保護的方法，提供自訂行為中新增和移除項目集合，例如維護<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>方法。 欄位會設定後的項目加入至集合中移除項目時清除。  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IDictionary`2" />
      </Docs>
    </Member>
    <Member MemberName="GetKeyForItem">
      <MemberSignature Language="C#" Value="protected abstract TKey GetKeyForItem (TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance !TKey GetKeyForItem(!TItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetKeyForItem (item As TItem) As TKey" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract TKey GetKeyForItem(TItem item);" />
      <MemberSignature Language="F#" Value="abstract member GetKeyForItem : 'Item -&gt; 'Key" Usage="keyedCollection.GetKeyForItem item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="TItem" />
      </Parameters>
      <Docs>
        <param name="item">要擷取索引鍵的來源項目。</param>
        <summary>在衍生類別中實作時，從指定的項目擷取索引鍵。</summary>
        <returns>指定之項目的索引鍵。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果不同於內嵌在索引鍵的查閱字典中的索引鍵`item`，您無法存取`item`使用所傳回索引鍵<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>。  
  
 您可以實作此方法以傳回`null`集合，其中包含不含索引鍵的項目，在此情況下存取的項目可以是只依其索引。 這個方法是 o （1） 作業。  
  
## <a name="notes-for-implementers"></a>實作者的附註  
 您必須覆寫此方法以提供一種方式從字典中的項目擷取索引鍵的字典。  
  
 這個方法會在內部呼叫。 您不需要讓它成為公用。  
  
   
  
## Examples  
 此程式碼範例顯示的最小的程式碼衍生的集合類別<xref:System.Collections.ObjectModel.KeyedCollection%602>： 覆寫<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>方法，並提供公用建構函式委派至基底類別建構函式。 程式碼範例也示範許多屬性和方法繼承自<xref:System.Collections.ObjectModel.KeyedCollection%602>和<xref:System.Collections.ObjectModel.Collection%601>類別。  
  
 `SimpleOrder`類別是非常簡單的申請清單，其中包含`OrderItem`物件，每一個都代表訂單中行項目。 索引鍵`OrderItem`不變，衍生自類別的一個重要考量<xref:System.Collections.ObjectModel.KeyedCollection%602>。 使用可變動索引鍵的程式碼範例，請參閱<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)" />
        <altmember cref="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
      </Docs>
    </Member>
    <Member MemberName="InsertItem">
      <MemberSignature Language="C#" Value="protected override void InsertItem (int index, TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InsertItem(int32 index, !TItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InsertItem (index As Integer, item As TItem)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InsertItem(int index, TItem item);" />
      <MemberSignature Language="F#" Value="override this.InsertItem : int * 'Item -&gt; unit" Usage="keyedCollection.InsertItem (index, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="TItem" />
      </Parameters>
      <Docs>
        <param name="index">應該插入 <paramref name="item" /> 之以零起始的索引。</param>
        <param name="item">要插入的物件。</param>
        <summary>將項目插入 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 中指定的索引處。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`index`等於<xref:System.Collections.ObjectModel.Collection%601.Count%2A>，`item`新增至結尾<xref:System.Collections.ObjectModel.KeyedCollection%602>。  
  
 這個方法是 O (`n`) 運算，其中`n`是<xref:System.Collections.ObjectModel.Collection%601.Count%2A>。  
  
 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> 會呼叫<xref:System.Collections.ObjectModel.Collection%601.Add%2A>和<xref:System.Collections.ObjectModel.Collection%601.Insert%2A>方法。  
  
## <a name="notes-for-implementers"></a>實作者的附註  
 覆寫此方法以提供自訂的行為，如<xref:System.Collections.ObjectModel.Collection%601.Add%2A>並<xref:System.Collections.ObjectModel.Collection%601.Insert%2A>方法，繼承自<xref:System.Collections.ObjectModel.Collection%601>泛型類別。  
  
 呼叫基礎集合中插入項目，以及更新的查閱字典，這個方法的基底類別實作。  
  
   
  
## Examples  
 本節包含示範如何覆寫的兩個程式碼範例<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>方法，以提供自訂行為加入，或將物件插入至集合。 第一個範例會將自訂的通知事件加入與第二個物件的集合提供支援，可變動的索引鍵。  
  
 範例 1  
  
 下列程式碼範例示範如何覆寫受保護<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>，以及<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>方法，以提供自訂的行為，如<xref:System.Collections.ObjectModel.Collection%601.Add%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>，和<xref:System.Collections.ObjectModel.Collection%601.Clear%2A>方法，以及設定預設<xref:System.Collections.ObjectModel.Collection%601.Item%2A>屬性 （C# 中為索引子）。 在此範例中提供的自訂行為是通知事件，名為`Changed`，這在每個覆寫方法結束時引發。  
  
 此程式碼範例會建立`SimpleOrder`類別，衍生自<xref:System.Collections.ObjectModel.KeyedCollection%602>和代表簡單的訂單。 訂購表單包含`OrderItem`物件代表的項目排序。 程式碼範例也會建立`SimpleOrderChangedEventArgs`類別來包含事件資訊，以及列舉型別來識別變更的類型。  
  
 在程式碼範例示範自訂行為，藉由在呼叫的屬性和方法的衍生類別中，`Main`方法的`Demo`類別。  
  
 此程式碼範例會使用不可變的索引鍵中的物件。 使用可變動索引鍵的程式碼範例，請參閱<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 範例 2  
  
 下列程式碼範例示範如何覆寫受保護<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>方法，以支援可變動的索引鍵，以及如何覆寫保護<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>，和<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>方法，以維護的索引鍵的完整性和集合中。  
  
 此程式碼範例會建立`MutableKeys`集合，它是衍生自<xref:System.Collections.ObjectModel.KeyedCollection%602>，和`MutableKey`類別。 `MutableKey`類別具有可設定`Key`屬性。 當新的金鑰指派給屬性時，會呼叫屬性 setter `internal` (`Friend` Visual Basic 中)`ChangeKey`方法來測試是否有新的金鑰會與現有的索引鍵衝突的集合。 如果是的話，會擲回例外狀況，且屬性值不會變更。  
  
 為了維護之間的連線`MutableKey`物件和`MutableKeys`集合，以防止物件被插入兩個集合`MutableKey`類別具有`internal`(`Friend` Visual Basic 中) `Collection`欄位。 此欄位由受保護的方法，提供自訂行為中新增和移除項目集合，例如維護<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>方法。 欄位會設定後的項目加入至集合中移除項目時清除。  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 小於 0。  
  
-或- 
 <paramref name="index" /> 大於 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />。</exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public TItem this[TKey key] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TItem Item(!TKey)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(key As TKey) As TItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TItem default[TKey] { TItem get(TKey key); };" />
      <MemberSignature Language="F#" Value="member this.Item('Key) : 'Item" Usage="System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt;.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">要取得的元素索引鍵。</param>
        <summary>取得具有指定索引鍵的項目。</summary>
        <value>具有指定之索引鍵的項目。 如果找不到具指定之索引鍵的項目，則會擲回例外狀況。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性讓您能夠使用下列語法來存取集合中的特定項目： `myCollection[key]` (`myCollection(key)` Visual Basic 中)。  
  
> [!NOTE]
>  這個屬性會區別繼承<xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType>屬性，可取得及設定的數值索引的項目。 不過，如果`TKey`別的<xref:System.Int32>，這個屬性加上遮罩的繼承的屬性。 在此情況下，您可以存取繼承的屬性轉型<xref:System.Collections.ObjectModel.KeyedCollection%602>與其基底類型。 例如， `KeyedCollection<int, MyType>` (`KeyedCollection(Of Integer, MyType)` Visual Basic 中`KeyedCollection<int, MyType^>`c + + 中) 可以轉換成`Collection<MyType>`(`Collection(Of MyType)`在 Visual Basic 中`Collection<MyType^>`c + + 中)。  
  
 如果<xref:System.Collections.ObjectModel.KeyedCollection%602>查閱字典，`key`用來從字典擷取項目。  如果沒有任何的查閱字典，每個元素的索引鍵所擷取<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>方法相較於指定的索引鍵和。  
  
 C# 語言使用關鍵字來定義索引，而不必實作<xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A>屬性。 Visual Basic 會將 <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A> 實作為預設屬性，這樣會提供相同的索引功能。  
  
 擷取這個屬性的值是 o （1） 運算，如果<xref:System.Collections.ObjectModel.KeyedCollection%602>查閱字典; 否則就是 O (`n`) 運算，其中`n`是<xref:System.Collections.ObjectModel.Collection%601.Count%2A>。  
  
   
  
## Examples  
 此程式碼範例顯示的最小的程式碼衍生的集合類別<xref:System.Collections.ObjectModel.KeyedCollection%602>： 覆寫<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>方法，並提供公用建構函式委派至基底類別建構函式。 程式碼範例也示範許多屬性和方法繼承自<xref:System.Collections.ObjectModel.KeyedCollection%602>和<xref:System.Collections.ObjectModel.Collection%601>類別。  
  
 在程式碼範例會呼叫這兩<xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A?displayProperty=nameWithType>屬性是唯讀的而且會擷取依索引鍵和<xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType>屬性，可加以設定，並依索引擷取。 它示範如何存取後者的屬性，當在衍生的集合中的物件具有整數索引鍵，無法區別整數索引擷取。  
  
 `SimpleOrder`類別是非常簡單的申請清單，其中包含`OrderItem`物件，每一個都代表訂單中行項目。 索引鍵`OrderItem`不變，衍生自類別的一個重要考量<xref:System.Collections.ObjectModel.KeyedCollection%602>。 使用可變動索引鍵的程式碼範例，請參閱<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException">具有指定之索引鍵的項目不存在於集合中。</exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Remove(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (key As TKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Remove(TKey key);" />
      <MemberSignature Language="F#" Value="override this.Remove : 'Key -&gt; bool" Usage="keyedCollection.Remove key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">要移除之項目的名稱。</param>
        <summary>將有指定索引鍵的元素從 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 移除。</summary>
        <returns>如果成功移除項目，則為 <see langword="true" />，否則為 <see langword="false" />。  如果在 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 中找不到 <paramref name="key" />，則這個方法也會傳回 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 元素的索引鍵也會移除從的查閱字典。  
  
 如果項目數目已超過字典建立臨界值和<xref:System.Collections.ObjectModel.KeyedCollection%602>是使用查閱字典，它會繼續使用查閱字典，即使的項目數會再次低於閾值。  
  
> [!NOTE]
>  若要自訂此方法的行為，請覆寫<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>方法。  
  
 這個方法是 O (`n`) 運算，其中`n`是<xref:System.Collections.ObjectModel.Collection%601.Count%2A>。  
  
   
  
## Examples  
 此程式碼範例顯示的最小的程式碼衍生的集合類別<xref:System.Collections.ObjectModel.KeyedCollection%602>： 覆寫<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>方法，並提供公用建構函式委派至基底類別建構函式。 程式碼範例也示範許多屬性和方法繼承自<xref:System.Collections.ObjectModel.KeyedCollection%602>和<xref:System.Collections.ObjectModel.Collection%601>類別。  
  
 此範例會示範<xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>方法繼承自<xref:System.Collections.ObjectModel.KeyedCollection%602>，以移除項目具有指定的索引鍵，以及<xref:System.Collections.ObjectModel.Collection%601.Remove%2A>和<xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A>方法繼承自<xref:System.Collections.ObjectModel.Collection%601>，其分別移除的物件和索引。  
  
 `SimpleOrder`類別是非常簡單的申請清單，其中包含`OrderItem`物件，每一個都代表訂單中行項目。 索引鍵`OrderItem`不變，衍生自類別的一個重要考量<xref:System.Collections.ObjectModel.KeyedCollection%602>。 使用可變動索引鍵的程式碼範例，請參閱<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> 為 <see langword="null" />。</exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems" />
      </Docs>
    </Member>
    <Member MemberName="RemoveItem">
      <MemberSignature Language="C#" Value="protected override void RemoveItem (int index);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RemoveItem(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub RemoveItem (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void RemoveItem(int index);" />
      <MemberSignature Language="F#" Value="override this.RemoveItem : int -&gt; unit" Usage="keyedCollection.RemoveItem index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">要移除的元素索引。</param>
        <summary>移除 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 中指定之索引處的項目。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 元素的索引鍵也會移除從的查閱字典。  
  
 如果項目數目已超過字典建立臨界值和<xref:System.Collections.ObjectModel.KeyedCollection%602>是使用查閱字典，它會繼續使用查閱字典，即使的項目數會再次低於閾值。  
  
 這個方法是 O (`n`) 運算，其中`n`是<xref:System.Collections.ObjectModel.Collection%601.Count%2A>。  
  
## <a name="notes-for-implementers"></a>實作者的附註  
 覆寫此方法以提供自訂的行為，如<xref:System.Collections.ObjectModel.Collection%601.Remove%28%600%29>並<xref:System.Collections.ObjectModel.Collection%601.RemoveAt%28System.Int32%29>方法，繼承自<xref:System.Collections.ObjectModel.Collection%601>泛型類別，而<xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%28%600%29>方法。  
  
 呼叫此方法，以從基礎集合中移除項目，並更新的查閱字典的基底類別實作。  
  
   
  
## Examples  
 本節包含示範如何覆寫的兩個程式碼範例<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>方法，以提供自訂的行為集合中移除物件。 第一個範例會將自訂的通知事件加入與第二個物件的集合提供支援，可變動的索引鍵。  
  
 範例 1  
  
 下列程式碼範例示範如何覆寫受保護<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>，以及<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>方法，以提供自訂的行為，如<xref:System.Collections.ObjectModel.Collection%601.Add%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>，和<xref:System.Collections.ObjectModel.Collection%601.Clear%2A>方法，以及設定預設<xref:System.Collections.ObjectModel.Collection%601.Item%2A>屬性 （C# 中為索引子）。 在此範例中提供的自訂行為是通知事件，名為`Changed`，這在每個覆寫方法結束時引發。  
  
 此程式碼範例會建立`SimpleOrder`類別，衍生自<xref:System.Collections.ObjectModel.KeyedCollection%602>和代表簡單的訂單。 訂購表單包含`OrderItem`物件代表的項目排序。 程式碼範例也會建立`SimpleOrderChangedEventArgs`類別來包含事件資訊，以及列舉型別來識別變更的類型。  
  
 在程式碼範例示範自訂行為，藉由在呼叫的屬性和方法的衍生類別中，`Main`方法的`Demo`類別。  
  
 此程式碼範例會使用不可變的索引鍵中的物件。 使用可變動索引鍵的程式碼範例，請參閱<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 範例 2  
  
 下列程式碼範例示範如何覆寫受保護<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>方法，以支援可變動的索引鍵，以及如何覆寫保護<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>，和<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>方法，以維護的索引鍵的完整性和集合中。  
  
 此程式碼範例會建立`MutableKeys`集合，它是衍生自<xref:System.Collections.ObjectModel.KeyedCollection%602>，和`MutableKey`類別。 `MutableKey`類別具有可設定`Key`屬性。 當新的金鑰指派給屬性時，會呼叫屬性 setter `internal` (`Friend` Visual Basic 中)`ChangeKey`方法來測試是否有新的金鑰會與現有的索引鍵衝突的集合。 如果是的話，會擲回例外狀況，且屬性值不會變更。  
  
 為了維護之間的連線`MutableKey`物件和`MutableKeys`集合，以防止物件被插入兩個集合`MutableKey`類別具有`internal`(`Friend` Visual Basic 中) `Collection`欄位。 此欄位由受保護的方法，提供自訂行為中新增和移除項目集合，例如維護<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>方法。 欄位會設定後的項目加入至集合中移除項目時清除。  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems" />
      </Docs>
    </Member>
    <Member MemberName="SetItem">
      <MemberSignature Language="C#" Value="protected override void SetItem (int index, TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetItem(int32 index, !TItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub SetItem (index As Integer, item As TItem)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void SetItem(int index, TItem item);" />
      <MemberSignature Language="F#" Value="override this.SetItem : int * 'Item -&gt; unit" Usage="keyedCollection.SetItem (index, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="TItem" />
      </Parameters>
      <Docs>
        <param name="index">要取代之項目的索引，而這個索引為以零起始。</param>
        <param name="item">新項目。</param>
        <summary>以指定的項目取代位於指定索引上的項目。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 會隨之更新的查閱字典。 亦即，被取代之項目的索引鍵移除查閱字典，並已加入新項目的索引鍵。  
  
 這個方法是 o （1） 作業。  
  
## <a name="notes-for-implementers"></a>實作者的附註  
 覆寫此方法以提供自訂的設定的行為<xref:System.Collections.ObjectModel.Collection%601.Item%2A>屬性繼承自<xref:System.Collections.ObjectModel.Collection%601>泛型類別。  
  
> [!NOTE]
>  這個方法不會影響行為的<xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A?displayProperty=nameWithType>屬性，這是唯讀狀態。  
  
 呼叫基底類別實作，這個方法來設定基礎集合中的項目並更新的查閱字典。  
  
   
  
## Examples  
 本節包含示範如何覆寫的兩個程式碼範例<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>方法，以提供自訂行為設定<xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType>屬性。 第一個範例會將自訂的通知事件加入與第二個物件的集合提供支援，可變動的索引鍵。  
  
 範例 1  
  
 下列程式碼範例示範如何覆寫受保護<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>，以及<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>方法，以提供自訂的行為，如<xref:System.Collections.ObjectModel.Collection%601.Add%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>，和<xref:System.Collections.ObjectModel.Collection%601.Clear%2A>方法，以及設定預設<xref:System.Collections.ObjectModel.Collection%601.Item%2A>屬性 （C# 中為索引子）。 在此範例中提供的自訂行為是通知事件，名為`Changed`，這在每個覆寫方法結束時引發。  
  
 此程式碼範例會建立`SimpleOrder`類別，衍生自<xref:System.Collections.ObjectModel.KeyedCollection%602>和代表簡單的訂單。 訂購表單包含`OrderItem`物件代表的項目排序。 程式碼範例也會建立`SimpleOrderChangedEventArgs`類別來包含事件資訊，以及列舉型別來識別變更的類型。  
  
 在程式碼範例示範自訂行為，藉由在呼叫的屬性和方法的衍生類別中，`Main`方法的`Demo`類別。  
  
 此程式碼範例會使用不可變的索引鍵中的物件。 使用可變動索引鍵的程式碼範例，請參閱<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 範例 2  
  
 下列程式碼範例示範如何覆寫受保護<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>方法，以支援可變動的索引鍵，以及如何覆寫保護<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>， <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>，和<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>方法，以維護的索引鍵的完整性和集合中。  
  
 此程式碼範例會建立`MutableKeys`集合，它是衍生自<xref:System.Collections.ObjectModel.KeyedCollection%602>，和`MutableKey`類別。 `MutableKey`類別具有可設定`Key`屬性。 當新的金鑰指派給屬性時，會呼叫屬性 setter `internal` (`Friend` Visual Basic 中)`ChangeKey`方法來測試是否有新的金鑰會與現有的索引鍵衝突的集合。 如果是的話，會擲回例外狀況，且屬性值不會變更。  
  
 為了維護之間的連線`MutableKey`物件和`MutableKeys`集合，以防止物件被插入兩個集合`MutableKey`類別具有`internal`(`Friend` Visual Basic 中) `Collection`欄位。 此欄位由受保護的方法，提供自訂行為中新增和移除項目集合，例如維護<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>方法。 欄位會設定後的項目加入至集合中移除項目時清除。  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)" />
      </Docs>
    </Member>
    <Member MemberName="TryGetValue">
      <MemberSignature Language="C#" Value="public bool TryGetValue (TKey key, out TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetValue(!TKey key, [out] !TItem&amp; item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.TryGetValue(`0,`1@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetValue (key As TKey, ByRef item As TItem) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetValue(TKey key, [Runtime::InteropServices::Out] TItem % item);" />
      <MemberSignature Language="F#" Value="member this.TryGetValue : 'Key *  -&gt; bool" Usage="keyedCollection.TryGetValue (key, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="item" Type="TItem" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>