<Type Name="XmlAttributes" FullName="System.Xml.Serialization.XmlAttributes">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="edc9671be617b74dce18228bd8abdf746446c9c8" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30720982" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XmlAttributes" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlAttributes extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Serialization.XmlAttributes" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlAttributes" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlAttributes" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示用來控制 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 序列化與還原序列化物件方式的屬性 (Attribute) 物件集合。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 建立<xref:System.Xml.Serialization.XmlAttributes>會覆寫預設值的程序方式<xref:System.Xml.Serialization.XmlSerializer>序列化類別執行個體。 例如，假設您想要序列化的 dll 無法存取來源所建立的物件。 使用<xref:System.Xml.Serialization.XmlAttributeOverrides>，您可以加強，或是控制如何將物件序列化。  
  
 成員<xref:System.Xml.Serialization.XmlAttributes>類別直接對應到一系列控制序列化的屬性類別。 例如，<xref:System.Xml.Serialization.XmlAttributes.XmlText%2A>屬性必須設定為<xref:System.Xml.Serialization.XmlTextAttribute>，可讓您覆寫序列化的欄位或屬性，藉由指示<xref:System.Xml.Serialization.XmlSerializer>序列化為 XML 文字的屬性值。 屬性，以控制序列化的完整清單，請參閱<xref:System.Xml.Serialization.XmlSerializer>。  
  
 如需有關使用<xref:System.Xml.Serialization.XmlAttributeOverrides>與<xref:System.Xml.Serialization.XmlAttributes>類別，請參閱[How to： 指定的 XML 資料流的替代項目名稱](~/docs/standard/serialization/how-to-specify-an-alternate-element-name-for-an-xml-stream.md)。  
  
   
  
## Examples  
 下列範例會序列化類別的執行個體`Orchestra`，其中包含名為的單一欄位`Instruments`所傳回的陣列`Instrument`物件。 名為第二個類別`Brass`繼承自`Instrument`類別。 此範例會建立<xref:System.Xml.Serialization.XmlAttributes>物件來覆寫`Instrument`欄位--允許欄位接受`Brass`物件-，並將<xref:System.Xml.Serialization.XmlAttributes>物件的執行個體<xref:System.Xml.Serialization.XmlAttributeOverrides>類別。  
  
 [!code-cpp[Classic XmlAttributes.XmlAttributes Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlAttributes.XmlAttributes Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlAttributes.XmlAttributes Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlAttributes.XmlAttributes Example/CS/source.cs#1)]
 [!code-vb[Classic XmlAttributes.XmlAttributes Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlAttributes.XmlAttributes Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xml.Serialization.XmlAttributeOverrides" />
    <altmember cref="T:System.Xml.Serialization.XmlSerializer" />
    <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Xml.Serialization.XmlAttributes" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlAttributes.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlAttributes();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Xml.Serialization.XmlAttributes" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例會序列化類別的執行個體`Orchestra`，其中包含名為的單一欄位`Instruments`所傳回的陣列`Instrument`物件。 名為第二個類別`Brass`繼承自`Instrument`類別。 此範例會建立<xref:System.Xml.Serialization.XmlAttributes>物件來覆寫`Instrument`欄位--允許欄位接受`Brass`物件-，並將<xref:System.Xml.Serialization.XmlAttributes>物件的執行個體<xref:System.Xml.Serialization.XmlAttributeOverrides>類別。  
  
 [!code-cpp[Classic XmlAttributes.XmlAttributes Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlAttributes.XmlAttributes Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlAttributes.XmlAttributes Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlAttributes.XmlAttributes Example/CS/source.cs#1)]
 [!code-vb[Classic XmlAttributes.XmlAttributes Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlAttributes.XmlAttributes Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlAttributes (System.Reflection.ICustomAttributeProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.ICustomAttributeProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlAttributes.#ctor(System.Reflection.ICustomAttributeProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (provider As ICustomAttributeProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlAttributes(System::Reflection::ICustomAttributeProvider ^ provider);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="provider" Type="System.Reflection.ICustomAttributeProvider" />
      </Parameters>
      <Docs>
        <param name="provider">類別，可為控制 XML 序列化的屬性提供替代實作。</param>
        <summary>初始化 <see cref="T:System.Xml.Serialization.XmlAttributes" /> 類別的新執行個體，並自訂 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 如何序列化和還原序列化物件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用的預設建構函式<xref:System.Xml.Serialization.XmlAttributes>類別，而不是使用這個建構函式。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlAnyAttribute">
      <MemberSignature Language="C#" Value="public System.Xml.Serialization.XmlAnyAttributeAttribute XmlAnyAttribute { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Serialization.XmlAnyAttributeAttribute XmlAnyAttribute" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlAttributes.XmlAnyAttribute" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlAnyAttribute As XmlAnyAttributeAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Serialization::XmlAnyAttributeAttribute ^ XmlAnyAttribute { System::Xml::Serialization::XmlAnyAttributeAttribute ^ get(); void set(System::Xml::Serialization::XmlAnyAttributeAttribute ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlAnyAttributeAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定要覆寫的 <see cref="T:System.Xml.Serialization.XmlAnyAttributeAttribute" />。</summary>
        <value>要覆寫的 <see cref="T:System.Xml.Serialization.XmlAnyAttributeAttribute" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Serialization.XmlAnyAttributeAttribute>可以套用至成員傳回的陣列<xref:System.Xml.XmlAttribute>上還原序列化的物件。 這可讓<xref:System.Xml.Serialization.XmlSerializer>還原序列化而沒有相對應的成員物件的任何屬性還原序列化-因此這些項目會以 「 不明 」 <xref:System.Xml.Serialization.XmlSerializer>。 當 XML 資料流已改變由 XML Web 服務，或所知的隨機資料一定會包含 XML 資料流，這非常有用。  
  
 <xref:System.Xml.Serialization.XmlAttributes.XmlAnyAttribute%2A>屬性可讓您覆寫的成員序列化<xref:System.Xml.Serialization.XmlAnyAttributeAttribute>已套用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlAnyElements">
      <MemberSignature Language="C#" Value="public System.Xml.Serialization.XmlAnyElementAttributes XmlAnyElements { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Serialization.XmlAnyElementAttributes XmlAnyElements" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlAttributes.XmlAnyElements" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property XmlAnyElements As XmlAnyElementAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Serialization::XmlAnyElementAttributes ^ XmlAnyElements { System::Xml::Serialization::XmlAnyElementAttributes ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlAnyElementAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得要覆寫的 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> 物件的集合。</summary>
        <value>
          <see cref="T:System.Xml.Serialization.XmlAnyElementAttributes" /> 物件，表示 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> 物件的集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Serialization.XmlAnyElementAttribute>可以套用至成員傳回的陣列<xref:System.Xml.XmlElement>上還原序列化的物件。 這可讓<xref:System.Xml.Serialization.XmlSerializer>還原序列化而沒有相對應的成員物件的任何項目還原序列化-因此這些項目會以 「 不明 」 <xref:System.Xml.Serialization.XmlSerializer>。 當 XML 資料流已改變由 XML Web 服務，或所知的隨機資料一定會包含 XML 資料流，這非常有用。  
  
 <xref:System.Xml.Serialization.XmlAttributes.XmlAnyElements%2A>屬性可讓您覆寫序列化成員，才能成為其成員函式的<xref:System.Xml.Serialization.XmlAnyElementAttribute>已套用。  
  
   
  
## Examples  
 下列範例會建立新<xref:System.Xml.Serialization.XmlAnyElementAttribute>物件，並將它加入至透過存取物件的集合<xref:System.Xml.Serialization.XmlAttributes.XmlAnyElements%2A>屬性。 <xref:System.Xml.Serialization.XmlAttributes>物件接著會新增至<xref:System.Xml.Serialization.XmlAttributeOverrides>物件用來建立<xref:System.Xml.Serialization.XmlSerializer>物件。 <xref:System.Xml.Serialization.XmlSerializer>用來序列化或還原序列化物件。 若要查看使用的效果<xref:System.Xml.Serialization.XmlAnyElementAttributes>屬性，建立 XML 文件藉由執行名為"UnknownElements.xml"`SerializeObject`方法中的`Main`方法。 編輯產生的文件，包括其他 （未知） 的項目。 標記為註解`SerializeObject`呼叫中`Main`方法，並取消註解的呼叫`DeserializeObject`方法，會列印出的名稱和任何的值未知的 XML 項目。  
  
 [!code-cpp[XmlAttributes.XmlAnyElements#1](~/samples/snippets/cpp/VS_Snippets_Remoting/XmlAttributes.XmlAnyElements/CPP/xmlanyover.cpp#1)]
 [!code-csharp[XmlAttributes.XmlAnyElements#1](~/samples/snippets/csharp/VS_Snippets_Remoting/XmlAttributes.XmlAnyElements/CS/xmlanyover.cs#1)]
 [!code-vb[XmlAttributes.XmlAnyElements#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/XmlAttributes.XmlAnyElements/VB/xmlanyover.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.Serialization.XmlAttributes.XmlAnyAttribute" />
      </Docs>
    </Member>
    <Member MemberName="XmlArray">
      <MemberSignature Language="C#" Value="public System.Xml.Serialization.XmlArrayAttribute XmlArray { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Serialization.XmlArrayAttribute XmlArray" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlAttributes.XmlArray" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlArray As XmlArrayAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Serialization::XmlArrayAttribute ^ XmlArray { System::Xml::Serialization::XmlArrayAttribute ^ get(); void set(System::Xml::Serialization::XmlArrayAttribute ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlArrayAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定物件，指定 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 如何序列化公用欄位或會傳回陣列的讀取/寫入屬性。</summary>
        <value>
          <see cref="T:System.Xml.Serialization.XmlArrayAttribute" />，指定 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 如何序列化公用欄位或會傳回陣列的讀取/寫入屬性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有兩種方式以公用欄位或公用讀取/寫入屬性，傳回陣列的已序列化<xref:System.Xml.Serialization.XmlSerializer>： 預設序列化，並控制的序列化。  
  
 在預設序列化，沒有屬性會套用至成員。 當序列化時，陣列會序列化為 XML 元素的名稱取自成員名稱的巢狀序列巢狀序列的 XML 項目。  
  
 若要更精確地控制序列化，套用<xref:System.Xml.Serialization.XmlArrayAttribute>欄位或屬性。 比方說，您可以變更產生的 XML 項目名稱與預設值為另一個名稱藉由設定<xref:System.Xml.Serialization.XmlArrayAttribute.ElementName%2A>屬性設為新值。  
  
 <xref:System.Xml.Serialization.XmlAttributes.XmlArray%2A>屬性可讓您覆寫預設序列化，以及藉由套用控制序列化<xref:System.Xml.Serialization.XmlArrayAttribute>的成員。 例如，您可以變更為新值從預設 （成員識別項） 產生的 XML 項目名稱。 此外，如果您套用<xref:System.Xml.Serialization.XmlArrayAttribute>給成員，它會覆寫任何<xref:System.Xml.Serialization.XmlArrayAttribute>，指派給<xref:System.Xml.Serialization.XmlAttributes.XmlArray%2A>屬性。  
  
   
  
## Examples  
 下列範例會序列化類別，其中包含名為的欄位`Members`傳回物件的陣列。 <xref:System.Xml.Serialization.XmlArrayAttribute>用來覆寫欄位的序列化和重新命名的項目名稱`Staff`。  
  
 [!code-cpp[Classic XmlAttributes.XmlArray Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlAttributes.XmlArray Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlAttributes.XmlArray Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlAttributes.XmlArray Example/CS/source.cs#1)]
 [!code-vb[Classic XmlAttributes.XmlArray Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlAttributes.XmlArray Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlArrayItems">
      <MemberSignature Language="C#" Value="public System.Xml.Serialization.XmlArrayItemAttributes XmlArrayItems { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Serialization.XmlArrayItemAttributes XmlArrayItems" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlAttributes.XmlArrayItems" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property XmlArrayItems As XmlArrayItemAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Serialization::XmlArrayItemAttributes ^ XmlArrayItems { System::Xml::Serialization::XmlArrayItemAttributes ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlArrayItemAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定物件集合，指定 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 如何序列化項目 (用來插入至公用欄位或讀取/寫入屬性所傳回的陣列)。</summary>
        <value>包含 <see cref="T:System.Xml.Serialization.XmlArrayItemAttributes" /> 物件集合的 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> 物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Serialization.XmlAttributes.XmlArrayItems%2A>屬性可讓您指定的衍生的類型，可以插入到公用欄位或公用讀取/寫入屬性所傳回的陣列。 針對每個您想要的欄位或屬性以接受新的類型，建立<xref:System.Xml.Serialization.XmlArrayItemAttribute>物件和<xref:System.Xml.Serialization.XmlArrayItemAttributes.Add%2A>它<xref:System.Xml.Serialization.XmlArrayItemAttributes>) 所傳回<xref:System.Xml.Serialization.XmlAttributes.XmlArrayItems%2A>屬性。 （新的類型必須衍生自已接受的欄位或屬性的型別）。<xref:System.Xml.Serialization.XmlAttributeOverrides.Add%2A> <xref:System.Xml.Serialization.XmlAttributes>物件<xref:System.Xml.Serialization.XmlAttributeOverrides>物件，並指定欄位或屬性，包含的物件類型和欄位或屬性的名稱。 建構<xref:System.Xml.Serialization.XmlSerializer>與<xref:System.Xml.Serialization.XmlAttributeOverrides>物件之前先呼叫<xref:System.Xml.Serialization.XmlSerializer.Serialize%2A>或<xref:System.Xml.Serialization.XmlSerializer.Deserialize%2A>方法。  
  
   
  
## Examples  
 下列範例會序列化類別，其中包含名為的欄位`Members`傳回物件的陣列。 兩個<xref:System.Xml.Serialization.XmlArrayItemAttribute>會建立物件，以便接受衍生自名為的基底類別的物件欄位`Member`。 每個物件加入至<xref:System.Xml.Serialization.XmlAttributes>透過<xref:System.Xml.Serialization.XmlAttributes.XmlArrayItems%2A>屬性。  
  
 [!code-cpp[Classic XmlAttributes.XmlArrayItems Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlAttributes.XmlArrayItems Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlAttributes.XmlArrayItems Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlAttributes.XmlArrayItems Example/CS/source.cs#1)]
 [!code-vb[Classic XmlAttributes.XmlArrayItems Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlAttributes.XmlArrayItems Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlAttribute">
      <MemberSignature Language="C#" Value="public System.Xml.Serialization.XmlAttributeAttribute XmlAttribute { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Serialization.XmlAttributeAttribute XmlAttribute" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlAttributes.XmlAttribute" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlAttribute As XmlAttributeAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Serialization::XmlAttributeAttribute ^ XmlAttribute { System::Xml::Serialization::XmlAttributeAttribute ^ get(); void set(System::Xml::Serialization::XmlAttributeAttribute ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlAttributeAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定物件，指定 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 如何將公用欄位或公用讀取/寫入屬性序列化為 XML 屬性。</summary>
        <value>
          <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" />，控制將公用欄位或讀取/寫入屬性 (Property) 序列化為 XML 屬性 (Attribute)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據預設，如果沒有屬性會套用至公用欄位或公用讀取/寫入屬性，它會序列化為 XML 項目。 您也可以指示<xref:System.Xml.Serialization.XmlSerializer>來產生 XML 屬性，藉由套用<xref:System.Xml.Serialization.XmlAttributeAttribute>欄位或屬性。  
  
 <xref:System.Xml.Serialization.XmlAttributes.XmlAttribute%2A>屬性可讓您覆寫預設序列化，以及藉由套用控制序列化<xref:System.Xml.Serialization.XmlAttributeAttribute>的成員。 若要這樣做，請建立<xref:System.Xml.Serialization.XmlAttributeAttribute>並設定其屬性 (例如<xref:System.Xml.Serialization.XmlAttributeAttribute.AttributeName%2A>)。 若要將新物件指派<xref:System.Xml.Serialization.XmlAttributes.XmlAttribute%2A>屬性<xref:System.Xml.Serialization.XmlAttributes>物件。 新增<xref:System.Xml.Serialization.XmlAttributes>物件<xref:System.Xml.Serialization.XmlAttributeOverrides>物件，並指定欄位或屬性，包含的物件類型和欄位或屬性的名稱。 最後，建立<xref:System.Xml.Serialization.XmlSerializer>使用<xref:System.Xml.Serialization.XmlAttributeOverrides>物件並呼叫<xref:System.Xml.Serialization.XmlSerializer.Serialize%2A>或<xref:System.Xml.Serialization.XmlSerializer.Deserialize%2A>方法。  
  
   
  
## Examples  
 下列範例會序列化類別，名為`Group`，包含屬性，名為`GroupName`;`GroupName`屬性序列化為 XML 屬性。 此範例會建立<xref:System.Xml.Serialization.XmlAttributeOverrides>和<xref:System.Xml.Serialization.XmlAttributes>覆寫欄位的預設序列化的物件。 這個範例會建立<xref:System.Xml.Serialization.XmlAttributeAttribute>特別覆寫屬性，以及的物件設定為<xref:System.Xml.Serialization.XmlAttributes.XmlAttribute%2A>屬性<xref:System.Xml.Serialization.XmlAttributes>物件加入至<xref:System.Xml.Serialization.XmlAttributeOverrides>覆寫指定的成員名稱的物件。 最後，<xref:System.Xml.Serialization.XmlSerializer>是建構及傳回使用<xref:System.Xml.Serialization.XmlAttributeOverrides>物件。  
  
 [!code-cpp[Classic XmlAttributes.XmlAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlAttributes.XmlAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlAttributes.XmlAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlAttributes.XmlAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic XmlAttributes.XmlAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlAttributes.XmlAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlChoiceIdentifier">
      <MemberSignature Language="C#" Value="public System.Xml.Serialization.XmlChoiceIdentifierAttribute XmlChoiceIdentifier { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Serialization.XmlChoiceIdentifierAttribute XmlChoiceIdentifier" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlAttributes.XmlChoiceIdentifier" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property XmlChoiceIdentifier As XmlChoiceIdentifierAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Serialization::XmlChoiceIdentifierAttribute ^ XmlChoiceIdentifier { System::Xml::Serialization::XmlChoiceIdentifierAttribute ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlChoiceIdentifierAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定物件，讓您在一組選項間進行區別。</summary>
        <value>
          <see cref="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute" />，可以套用至序列化為 <see langword="xsi:choice" /> 項目的類別成員。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDefaultValue">
      <MemberSignature Language="C#" Value="public object XmlDefaultValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object XmlDefaultValue" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlAttributes.XmlDefaultValue" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlDefaultValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ XmlDefaultValue { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 XML 項目或屬性的預設值。</summary>
        <value>
          <see cref="T:System.Object" />，表示 XML 項目或屬性的預設值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以藉由套用指定的 XML 項目或 XML 屬性的預設值<xref:System.ComponentModel.DefaultValueAttribute>成員。 若要檢查套用的值的結果，應用程式編譯為 DLL 或可執行檔，並將產生的檔案做為引數傳遞至 XML 結構描述定義工具 (XSD.exe)。 在 XML 結構描述文件中，預設值指派給`default`屬性。 在下列範例中的預設值為\<動物 > 項目，則 「 Dogs。 」  
  
```  
<?xml version="1.0"?>  
 <schema attributeFormDefault="qualified"   
 elementFormDefault="qualified" targetNamespace=""   
 xmlns="http://www.w3.org/2000/10/XMLSchema">  
   <element name="Pets" nullable="true" type="Pets"/>  
   <complexType name="Pets">  
     <sequence>  
       <element default="Dogs" name="Animal" nullable="true"   
        type="string" minOccurs="0"/>  
     </sequence>  
   </complexType>  
 </schema>  
```  
  
 若要覆寫預設值，建立<xref:System.Object>並將它指派給<xref:System.Xml.Serialization.XmlAttributes.XmlDefaultValue%2A>。  
  
 如果指派給欄位或屬性的值等於該欄位或屬性的預設值<xref:System.Xml.Serialization.XmlSerializer>不會序列化至 XML 執行個體的值。 這是因為指定的值可以復原從 XML 結構描述。 換句話說，欄位或屬性設為預設值是未設定的對等。 同樣地，如果未不設定任何值的欄位或屬性，如<xref:System.Xml.Serialization.XmlSerializer>使用結構描述中找到的預設值。 同時案例、 （將屬性設定為其預設值，或未設定），在 XML 文件執行個體不包含任何屬性的值。  
  
 您可以指派預設值，而不是結構描述使用類別建構函式。 如果您使用 Xsd.exe 從結構描述產生類別，您可以標記為註解或移除的所有 [System.ComponentModel.DefaultValueAttribute("myFieldName")] 屬性的類別檔案。  
  
   
  
## Examples  
 下列範例會示範名為類別`Pet`，其中包含具有預設值設定為"Dog"的欄位。 不過，此範例也會建立<xref:System.Xml.Serialization.XmlAttributes>物件，並設定其<xref:System.Xml.Serialization.XmlAttributes.XmlDefaultValue%2A>屬性為新的預設值 ("Cat")。 這會覆寫原始的預設值。 因此，如果欄位值設定為"Cat"，<xref:System.Xml.Serialization.XmlSerializer>會將它視為預設值，並不將其序列化。 如果設定為任何其他值，<xref:System.Xml.Serialization.XmlSerializer>序列化值。  
  
 [!code-cpp[Classic XmlAttributes.XmlDefaultValue Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlAttributes.XmlDefaultValue Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlAttributes.XmlDefaultValue Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlAttributes.XmlDefaultValue Example/CS/source.cs#1)]
 [!code-vb[Classic XmlAttributes.XmlDefaultValue Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlAttributes.XmlDefaultValue Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlElements">
      <MemberSignature Language="C#" Value="public System.Xml.Serialization.XmlElementAttributes XmlElements { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Serialization.XmlElementAttributes XmlElements" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlAttributes.XmlElements" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property XmlElements As XmlElementAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Serialization::XmlElementAttributes ^ XmlElements { System::Xml::Serialization::XmlElementAttributes ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlElementAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得物件的集合，指定 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 如何將公用欄位或讀取/寫入屬性序列化為 XML 項目。</summary>
        <value>包含 <see cref="T:System.Xml.Serialization.XmlElementAttributes" /> 物件集合的 <see cref="T:System.Xml.Serialization.XmlElementAttribute" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 針對每個覆寫的成員序列化為 XML 項目，您必須加入新<xref:System.Xml.Serialization.XmlElementAttribute>至<xref:System.Xml.Serialization.XmlElementAttributes>藉由呼叫<xref:System.Xml.Serialization.XmlElementAttributes.Add%2A>方法。 根據預設，<xref:System.Xml.Serialization.XmlElementAttributes>物件已建立並指派給<xref:System.Xml.Serialization.XmlAttributes.XmlElements%2A>屬性。  
  
   
  
## Examples  
 下列範例會序列化`Transportation`類別，其中包含名為的單一欄位`Vehicles`傳回<xref:System.Collections.ArrayList>。 此範例適用於兩個<xref:System.Xml.Serialization.XmlElementAttribute>屬性至`Vehicles`欄位。 此範例會建立兩個<xref:System.Xml.Serialization.XmlElementAttribute>物件，並將它們加入至<xref:System.Xml.Serialization.XmlElementAttributes>集合<xref:System.Xml.Serialization.XmlAttributes>物件。 若要允許要接受不同的物件類型的陣列<xref:System.Xml.Serialization.XmlAttributes>物件加入至<xref:System.Xml.Serialization.XmlAttributeOverrides>物件。  
  
 [!code-cpp[Classic XmlAttributes.XmlElements Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlAttributes.XmlElements Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlAttributes.XmlElements Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlAttributes.XmlElements Example/CS/source.cs#1)]
 [!code-vb[Classic XmlAttributes.XmlElements Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlAttributes.XmlElements Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlEnum">
      <MemberSignature Language="C#" Value="public System.Xml.Serialization.XmlEnumAttribute XmlEnum { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Serialization.XmlEnumAttribute XmlEnum" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlAttributes.XmlEnum" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlEnum As XmlEnumAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Serialization::XmlEnumAttribute ^ XmlEnum { System::Xml::Serialization::XmlEnumAttribute ^ get(); void set(System::Xml::Serialization::XmlEnumAttribute ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlEnumAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定物件，指定 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 如何序列化列舉型別 (Enumeration) 成員。</summary>
        <value>
          <see cref="T:System.Xml.Serialization.XmlEnumAttribute" />，指定 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 如何序列化列舉型別成員。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 對於每個您想要覆寫的識別項，您必須建立<xref:System.Xml.Serialization.XmlAttributes>物件，並設定<xref:System.Xml.Serialization.XmlAttributes.XmlEnum%2A>屬性<xref:System.Xml.Serialization.XmlEnumAttribute>會覆寫的識別項。 新增<xref:System.Xml.Serialization.XmlAttributes>物件<xref:System.Xml.Serialization.XmlAttributeOverrides>物件，並同時指定<xref:System.Type>的類別，其中包含列舉型別，並覆寫的成員名稱。  
  
   
  
## Examples  
 下列範例會序列化名為兩個類別`Food`和`FoodType`。 `FoodType`類別包含兩個列舉型別，會覆寫，且每個列舉，此範例會建立<xref:System.Xml.Serialization.XmlEnumAttribute>物件，它會指派<xref:System.Xml.Serialization.XmlAttributes.XmlEnum%2A>屬性<xref:System.Xml.Serialization.XmlAttributes>物件。 此範例會接著將<xref:System.Xml.Serialization.XmlAttributes>物件<xref:System.Xml.Serialization.XmlAttributeOverrides>物件，用來建立<xref:System.Xml.Serialization.XmlSerializer>。  
  
 [!code-cpp[Classic XmlAttributes.XmlEnum Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlAttributes.XmlEnum Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlAttributes.XmlEnum Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlAttributes.XmlEnum Example/CS/source.cs#1)]
 [!code-vb[Classic XmlAttributes.XmlEnum Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlAttributes.XmlEnum Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlIgnore">
      <MemberSignature Language="C#" Value="public bool XmlIgnore { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool XmlIgnore" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlAttributes.XmlIgnore" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlIgnore As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool XmlIgnore { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定數值，指定 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 是否要序列化公用欄位或公用讀取/寫入屬性。</summary>
        <value>
          如果 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 必須不序列化欄位或屬性，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據預設，所有公用欄位或公用讀取/寫入屬性會由序列化<xref:System.Xml.Serialization.XmlSerializer>。 也就是說，每個公用欄位或屬性的值會保存為 XML 項目或 XML 文件執行個體中的 XML 屬性。  
  
 若要覆寫欄位或屬性的預設序列化，請建立<xref:System.Xml.Serialization.XmlAttributes>物件，並設定其<xref:System.Xml.Serialization.XmlAttributes.XmlIgnore%2A>屬性`true`。 <xref:System.Xml.Serialization.XmlAttributeOverrides.Add%2A> 物件<xref:System.Xml.Serialization.XmlAttributeOverrides>物件，並指定包含的欄位或屬性，以略過的物件類型和欄位或屬性，以略過的名稱。  
  
 如果<xref:System.Xml.Serialization.XmlIgnoreAttribute>會套用至欄位或屬性中，欄位或屬性會被忽略。 不過您可以建立覆寫該行為<xref:System.Xml.Serialization.XmlAttributes>物件，並設定其<xref:System.Xml.Serialization.XmlAttributes.XmlIgnore%2A>屬性`false`，將它加入至<xref:System.Xml.Serialization.XmlAttributeOverrides>物件，指定的欄位或屬性，包含的物件類型和名稱欄位或屬性。  
  
   
  
## Examples  
 下列範例會序列化類別，名為`Group`，其中包含名為`Comment`的<xref:System.Xml.Serialization.XmlIgnoreAttribute>套用。 此範例會建立<xref:System.Xml.Serialization.XmlAttributes>物件和集合<xref:System.Xml.Serialization.XmlAttributes.XmlIgnore%2A>屬性`false`，藉此覆寫<xref:System.Xml.Serialization.XmlIgnoreAttribute>。  
  
 [!code-cpp[Classic XmlAttributes.XmlIgnore Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlAttributes.XmlIgnore Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlAttributes.XmlIgnore Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlAttributes.XmlIgnore Example/CS/source.cs#1)]
 [!code-vb[Classic XmlAttributes.XmlIgnore Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlAttributes.XmlIgnore Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Serialization.XmlIgnoreAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Xmlns">
      <MemberSignature Language="C#" Value="public bool Xmlns { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Xmlns" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlAttributes.Xmlns" />
      <MemberSignature Language="VB.NET" Value="Public Property Xmlns As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Xmlns { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定數值，指定當物件包含傳回已覆寫 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> 物件的成員時，是否要保留所有的命名空間宣告。</summary>
        <value>
          如果應該保留命名空間宣告，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例包含名為類別`Student`。 這個類別包含名為`MyNamespaces`傳回<xref:System.Xml.Serialization.XmlSerializerNamespaces>物件。 此範例會建立<xref:System.Xml.Serialization.XmlAttributes>物件加入至執行個體<xref:System.Xml.Serialization.XmlAttributeOverrides>類別。 <xref:System.Xml.Serialization.XmlAttributes.Xmlns%2A>屬性設定為`true`，它會指示<xref:System.Xml.Serialization.XmlSerializer>保留命名空間時的序列化`Student`物件會覆寫。  
  
 [!code-cpp[XmlAttributes.Xmlns property example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/XmlAttributes.Xmlns property example/CPP/xmlns.cpp#1)]
 [!code-csharp[XmlAttributes.Xmlns property example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/XmlAttributes.Xmlns property example/CS/xmlns.cs#1)]
 [!code-vb[XmlAttributes.Xmlns property example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/XmlAttributes.Xmlns property example/VB/xmlns.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlRoot">
      <MemberSignature Language="C#" Value="public System.Xml.Serialization.XmlRootAttribute XmlRoot { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Serialization.XmlRootAttribute XmlRoot" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlAttributes.XmlRoot" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlRoot As XmlRootAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Serialization::XmlRootAttribute ^ XmlRoot { System::Xml::Serialization::XmlRootAttribute ^ get(); void set(System::Xml::Serialization::XmlRootAttribute ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlRootAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定物件，指定 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 如何將類別序列化為 XML (Root Element)。</summary>
        <value>
          <see cref="T:System.Xml.Serialization.XmlRootAttribute" />，覆寫類別屬性為 XML 根項目。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例會建立<xref:System.Xml.Serialization.XmlAttributeOverrides>物件<xref:System.Xml.Serialization.XmlAttributes>物件，和<xref:System.Xml.Serialization.XmlRootAttribute>物件。 此範例將指派<xref:System.Xml.Serialization.XmlRootAttribute>至<xref:System.Xml.Serialization.XmlAttributes.XmlRoot%2A>屬性<xref:System.Xml.Serialization.XmlAttributes>物件，並將加入<xref:System.Xml.Serialization.XmlAttributes>物件<xref:System.Xml.Serialization.XmlAttributeOverrides>物件。 最後，此範例會取得<xref:System.Xml.Serialization.XmlAttributes>物件，並傳遞<xref:System.Type>要序列化的類別<xref:System.Xml.Serialization.XmlAttributeOverrides>物件。 (在此範例中，<xref:System.Type>是`Group`。)  
  
 [!code-cpp[Classic XmlAttributes.XmlRoot Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlAttributes.XmlRoot Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlAttributes.XmlRoot Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlAttributes.XmlRoot Example/CS/source.cs#1)]
 [!code-vb[Classic XmlAttributes.XmlRoot Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlAttributes.XmlRoot Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlText">
      <MemberSignature Language="C#" Value="public System.Xml.Serialization.XmlTextAttribute XmlText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Serialization.XmlTextAttribute XmlText" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlAttributes.XmlText" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlText As XmlTextAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Serialization::XmlTextAttribute ^ XmlText { System::Xml::Serialization::XmlTextAttribute ^ get(); void set(System::Xml::Serialization::XmlTextAttribute ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlTextAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定物件，指定 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 將公用欄位或公用讀取/寫入屬性序列化為 XML 文字。</summary>
        <value>
          <see cref="T:System.Xml.Serialization.XmlTextAttribute" />，覆寫公用屬性或欄位的預設序列化。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據預設，公用欄位或公用讀取/寫入屬性會序列化為 XML 項目由<xref:System.Xml.Serialization.XmlSerializer>。 不過，它可以強制的欄位或屬性序列化為 XML 文字，藉由套用<xref:System.Xml.Serialization.XmlTextAttribute>欄位或屬性。  
  
> [!NOTE]
>  <xref:System.Xml.Serialization.XmlTextAttribute>無法套用至欄位或屬性會傳回陣列。  
  
 若要覆寫的欄位或屬性 （也就不會傳回陣列） 的預設序列化，請建立<xref:System.Xml.Serialization.XmlTextAttribute>並將它指派給<xref:System.Xml.Serialization.XmlAttributes.XmlText%2A>屬性<xref:System.Xml.Serialization.XmlAttributes>物件。 新增<xref:System.Xml.Serialization.XmlAttributes>物件<xref:System.Xml.Serialization.XmlAttributeOverrides>物件，指定類型的物件，其中包含覆寫的欄位或屬性，以及覆寫的欄位或屬性的名稱。  
  
   
  
## Examples  
 下列範例會序列化命名的類別`Group`，其中包含名為的欄位`Comment`。 覆寫預設的方式<xref:System.Xml.Serialization.XmlSerializer>序列化 欄位中，此範例會建立<xref:System.Xml.Serialization.XmlAttributeOverrides>和<xref:System.Xml.Serialization.XmlAttributes>物件。 這個範例會建立<xref:System.Xml.Serialization.XmlTextAttribute>物件，它會指派<xref:System.Xml.Serialization.XmlAttributes.XmlText%2A>屬性，並將<xref:System.Xml.Serialization.XmlAttributes>物件 （序列化為 XML 文字欄位的名稱） 來<xref:System.Xml.Serialization.XmlAttributeOverrides>物件。 此範例會建立最後<xref:System.Xml.Serialization.XmlSerializer>使用<xref:System.Xml.Serialization.XmlAttributeOverrides>物件。  
  
 [!code-cpp[Classic XmlAttributes.XmlText Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlAttributes.XmlText Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlAttributes.XmlText Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlAttributes.XmlText Example/CS/source.cs#1)]
 [!code-vb[Classic XmlAttributes.XmlText Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlAttributes.XmlText Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlType">
      <MemberSignature Language="C#" Value="public System.Xml.Serialization.XmlTypeAttribute XmlType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Serialization.XmlTypeAttribute XmlType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlAttributes.XmlType" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlType As XmlTypeAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Serialization::XmlTypeAttribute ^ XmlType { System::Xml::Serialization::XmlTypeAttribute ^ get(); void set(System::Xml::Serialization::XmlTypeAttribute ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlTypeAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定物件，指定 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 如何序列化套用 <see cref="T:System.Xml.Serialization.XmlTypeAttribute" /> 的類別。</summary>
        <value>
          <see cref="T:System.Xml.Serialization.XmlTypeAttribute" />，會覆寫套用 <see cref="T:System.Xml.Serialization.XmlTypeAttribute" /> 至類別宣告 (Class Declaration)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Serialization.XmlTypeAttribute>可以用來控制如何將類型序列化的<xref:System.Xml.Serialization.XmlSerializer>。 例如，根據預設，當序列化的型別，<xref:System.Xml.Serialization.XmlSerializer>使用 XML 項目名稱與類別名稱。 藉由建立<xref:System.Xml.Serialization.XmlTypeAttribute>，設定<xref:System.Xml.Serialization.XmlAttributes.XmlType%2A>屬性給它，而且建立<xref:System.Xml.Serialization.XmlAttributeOverrides>物件，您可以變更 XML 項目名稱。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Xml.Serialization.XmlTypeAttribute>物件，並將其指派給<xref:System.Xml.Serialization.XmlAttributes.XmlType%2A>屬性<xref:System.Xml.Serialization.XmlAttributes>物件。  
  
 [!code-cpp[Classic XmlAttributes.XmlType Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlAttributes.XmlType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlAttributes.XmlType Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlAttributes.XmlType Example/CS/source.cs#1)]
 [!code-vb[Classic XmlAttributes.XmlType Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlAttributes.XmlType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>