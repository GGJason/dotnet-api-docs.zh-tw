<Type Name="XmlArrayItemAttribute" FullName="System.Xml.Serialization.XmlArrayItemAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="91439c735fd0ac54113bf71984159917e11e9291" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36439918" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XmlArrayItemAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlArrayItemAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Serialization.XmlArrayItemAttribute" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlArrayItemAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlArrayItemAttribute : Attribute" />
  <TypeSignature Language="F#" Value="type XmlArrayItemAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Field | System.AttributeTargets.Parameter | System.AttributeTargets.Property | System.AttributeTargets.ReturnValue, AllowMultiple=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示屬性，這個屬性會指定 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 可置於序列化陣列中的衍生型別。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Serialization.XmlArrayItemAttribute>屬於一系列屬性可控制如何<xref:System.Xml.Serialization.XmlSerializer>序列化或還原序列化物件。 如需類似屬性的完整清單，請參閱[屬性，控制 XML 序列化](~/docs/standard/serialization/attributes-that-control-xml-serialization.md)。  
  
 您可以套用<xref:System.Xml.Serialization.XmlArrayItemAttribute>傳回陣列，或提供存取任何公用讀取/寫入成員。 例如，傳回的集合，集合的物件陣列的欄位<xref:System.Collections.ArrayList>，或任何實作類別<xref:System.Collections.IEnumerable>介面。  
  
 <xref:System.Xml.Serialization.XmlArrayItemAttribute>支援多型-也就是說，它可讓<xref:System.Xml.Serialization.XmlSerializer>將衍生的物件新增至陣列。 例如，假設名為類別`Mammal`衍生自基底類別，名為`Animal`。 進一步假設具名的類別`MyAnimals`包含傳回陣列的欄位`Animal`物件。 允許<xref:System.Xml.Serialization.XmlSerializer>序列化兩者`Animal`和`Mammal`類型，套用<xref:System.Xml.Serialization.XmlArrayItemAttribute>欄位兩次，每次指定下列其中一種可接受。  
  
> [!NOTE]
>  您可以套用多個執行個體<xref:System.Xml.Serialization.XmlArrayItemAttribute>或<xref:System.Xml.Serialization.XmlElementAttribute>來指定可以插入陣列中的物件類型。  
  
> [!NOTE]
>  不支援序列化的欄位或屬性，傳回的介面的陣列。  
  
 如需屬性用法的詳細資訊，請參閱[屬性](~/docs/standard/attributes/index.md)。  
  
> [!NOTE]
>  您可以使用 word`XmlArrayItem`取代較長程式碼中<xref:System.Xml.Serialization.XmlArrayItemAttribute>。  
  
   
  
## Examples  
 下列範例會序列化類別，名為`Group`，其中包含名為的欄位`Employees`所傳回的陣列`Employee`物件。 範例會在套用<xref:System.Xml.Serialization.XmlArrayItemAttribute>到欄位，藉此指示<xref:System.Xml.Serialization.XmlSerializer>它可以插入基底類別的物件 (`Employee`) 型別和衍生的類別型別 (`Manager`) 序列化的陣列。  
  
 [!code-cpp[Classic XmlArrayItemAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlArrayItemAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic XmlArrayItemAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlArrayItemAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xml.Serialization.XmlArrayAttribute" />
    <altmember cref="T:System.Xml.Serialization.XmlSerializer" />
    <altmember cref="P:System.Xml.Serialization.XmlAttributes.XmlArrayItems" />
    <altmember cref="T:System.Xml.Serialization.XmlAttributeOverrides" />
    <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlArrayItemAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlArrayItemAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlArrayItemAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例會序列化類別，名為`Transportation`，其中包含名為的欄位`MyVehicles`所傳回的陣列`Vehicle`物件。 範例會在套用<xref:System.Xml.Serialization.XmlArrayItemAttribute>到欄位，讓<xref:System.Xml.Serialization.XmlSerializer>要插入的執行個體`Car`類別，衍生自`Vehicle`陣列中的類別。  
  
 [!code-cpp[Classic XmlArrayItemAttribute.XmlArrayItemAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.XmlArrayItemAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlArrayItemAttribute.XmlArrayItemAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.XmlArrayItemAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic XmlArrayItemAttribute.XmlArrayItemAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.XmlArrayItemAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlArrayItemAttribute (string elementName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string elementName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlArrayItemAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (elementName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlArrayItemAttribute(System::String ^ elementName);" />
      <MemberSignature Language="F#" Value="new System.Xml.Serialization.XmlArrayItemAttribute : string -&gt; System.Xml.Serialization.XmlArrayItemAttribute" Usage="new System.Xml.Serialization.XmlArrayItemAttribute elementName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">XML 項目的名稱。</param>
        <summary>初始化 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> 類別的新執行個體，指定 XML 文件中產生的 XML 項目名稱。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個多載設定<xref:System.Xml.Serialization.XmlArrayItemAttribute.ElementName%2A>屬性。  
  
 如果您想要不同的成員識別碼產生的 XML 項目的名稱，請使用此多載。  
  
 包含命名空間的 XML 文件可以包含多個版本的項目名稱。 如需詳細資訊，請參閱 <xref:System.Xml.Serialization.XmlArrayItemAttribute.ElementName%2A> 屬性。  
  
   
  
## Examples  
 下列範例會序列化類別，名為`Transportation`，其中包含名為的欄位`MyVehicles`所傳回的陣列`Vehicle`物件。 範例會在套用<xref:System.Xml.Serialization.XmlArrayItemAttribute>到欄位，讓<xref:System.Xml.Serialization.XmlSerializer>要插入的執行個體`Car`類別，衍生自`Vehicle`陣列中的類別。 同時套用此屬性，這個範例會設定<xref:System.Xml.Serialization.XmlArrayItemAttribute.ElementName%2A>屬性使用`elementName`參數。  
  
 [!code-cpp[Classic XmlArrayItemAttribute.XmlArrayItemAttribute1 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.XmlArrayItemAttribute1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlArrayItemAttribute.XmlArrayItemAttribute1 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.XmlArrayItemAttribute1 Example/CS/source.cs#1)]
 [!code-vb[Classic XmlArrayItemAttribute.XmlArrayItemAttribute1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.XmlArrayItemAttribute1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlArrayItemAttribute (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlArrayItemAttribute.#ctor(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlArrayItemAttribute(Type ^ type);" />
      <MemberSignature Language="F#" Value="new System.Xml.Serialization.XmlArrayItemAttribute : Type -&gt; System.Xml.Serialization.XmlArrayItemAttribute" Usage="new System.Xml.Serialization.XmlArrayItemAttribute type" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">要序列化的物件的 <see cref="T:System.Type" />。</param>
        <summary>初始化 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> 類別的新執行個體，指定可插入序列化陣列的 <see cref="T:System.Type" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例會序列化類別，名為`Transportation`，其中包含名為的欄位`MyVehicles`所傳回的陣列`Vehicle`物件。 範例會在套用<xref:System.Xml.Serialization.XmlArrayItemAttribute>到欄位，讓<xref:System.Xml.Serialization.XmlSerializer>要插入的執行個體`Car`類別，衍生自`Vehicle`陣列中的類別。 同時套用此屬性，這個範例會設定<xref:System.Xml.Serialization.XmlArrayItemAttribute.Type%2A>屬性使用`type`參數。  
  
 [!code-cpp[Classic XmlArrayItemAttribute.XmlArrayItemAttribute2 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.XmlArrayItemAttribute2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlArrayItemAttribute.XmlArrayItemAttribute2 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.XmlArrayItemAttribute2 Example/CS/source.cs#1)]
 [!code-vb[Classic XmlArrayItemAttribute.XmlArrayItemAttribute2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.XmlArrayItemAttribute2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlArrayItemAttribute (string elementName, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string elementName, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlArrayItemAttribute.#ctor(System.String,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlArrayItemAttribute(System::String ^ elementName, Type ^ type);" />
      <MemberSignature Language="F#" Value="new System.Xml.Serialization.XmlArrayItemAttribute : string * Type -&gt; System.Xml.Serialization.XmlArrayItemAttribute" Usage="new System.Xml.Serialization.XmlArrayItemAttribute (elementName, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="elementName">XML 項目的名稱。</param>
        <param name="type">要序列化的物件的 <see cref="T:System.Type" />。</param>
        <summary>初始化 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> 類別的新執行個體，指定 XML 文件中產生的 XML 項目名稱，以及可插入所產生之 XML 文件的 <see cref="T:System.Type" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個多載設定<xref:System.Xml.Serialization.XmlArrayItemAttribute.ElementName%2A>和<xref:System.Xml.Serialization.XmlArrayItemAttribute.Type%2A>屬性。  
  
 如果您想要不同的成員識別碼產生的 XML 項目的名稱，請使用此多載。  
  
 包含命名空間的 XML 文件可以包含多個版本的項目名稱。 如需詳細資訊，請參閱 <xref:System.Xml.Serialization.XmlArrayItemAttribute.ElementName%2A> 屬性。  
  
   
  
## Examples  
 下列範例會序列化類別，名為`Transportation`，其中包含名為的欄位`MyVehicles`所傳回的陣列`Vehicle`物件。 範例會在套用<xref:System.Xml.Serialization.XmlArrayItemAttribute>到欄位，讓<xref:System.Xml.Serialization.XmlSerializer>要插入的執行個體`Car`類別，衍生自`Vehicle`陣列中的類別。 同時套用此屬性，這個範例會設定<xref:System.Xml.Serialization.XmlArrayItemAttribute.ElementName%2A>屬性使用`elementName`參數，而<xref:System.Xml.Serialization.XmlArrayItemAttribute.Type%2A>屬性使用`type`參數。  
  
 [!code-cpp[Classic XmlArrayItemAttribute.XmlArrayItemAttribute3 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.XmlArrayItemAttribute3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlArrayItemAttribute.XmlArrayItemAttribute3 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.XmlArrayItemAttribute3 Example/CS/source.cs#1)]
 [!code-vb[Classic XmlArrayItemAttribute.XmlArrayItemAttribute3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.XmlArrayItemAttribute3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataType">
      <MemberSignature Language="C#" Value="public string DataType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlArrayItemAttribute.DataType" />
      <MemberSignature Language="VB.NET" Value="Public Property DataType As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataType { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataType : string with get, set" Usage="System.Xml.Serialization.XmlArrayItemAttribute.DataType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定產生的 XML 項目的 XML 資料型別。</summary>
        <value>XML 結構描述定義 (XSD) 資料型別，如全球資訊網協會 (www.w3.org ) 文件＜XML Schema Part 2: DataTypes＞中所定義。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表列出與它們對應的.NET 之 XML 結構描述簡單資料類型。  
  
 XML 結構描述`base64Binary`和`hexBinary`資料類型使用的陣列<xref:System.Byte>物件，並套用<xref:System.Xml.Serialization.XmlArrayItemAttribute>與<xref:System.Xml.Serialization.XmlArrayItemAttribute.DataType%2A>屬性設定為"base64Binary"或"hexBinary"，視需要。 XML 結構描述`time`和`date`資料類型，使用<xref:System.DateTime>輸入和套用<xref:System.Xml.Serialization.XmlArrayItemAttribute>與<xref:System.Xml.Serialization.XmlArrayItemAttribute.DataType%2A>設為 「 日期 」 或 「 時間 」。  
  
 對應到字串，每一個 XML 結構描述型別，套用<xref:System.Xml.Serialization.XmlArrayItemAttribute>具有其<xref:System.Xml.Serialization.XmlArrayItemAttribute.DataType%2A>屬性設定為 XML 結構描述類型。 不過，這不會變更序列化格式，只有該成員的結構描述。  
  
> [!NOTE]
>  屬性是區分大小寫，，因此您必須將它設定於其中一個 XML 結構描述資料類型。  
  
> [!NOTE]
>  將二進位資料做為 XML 項目會更有效率再將它傳遞為 XML 屬性。  
  
 如需有關 XML 結構描述資料類型的詳細資訊，請參閱全球資訊網協會 (www.w3.org) 文件 「 XML 結構描述第 2 部分： 資料類型。 」  
  
|XSD 資料類型|.NET 資料類型|  
|-------------------|--------------------|  
|anyURI|<xref:System.String>|  
|base64Binary|陣列<xref:System.Byte>物件|  
|boolean|<xref:System.Boolean>|  
|byte|<xref:System.SByte>|  
|date|<xref:System.DateTime>|  
|dateTime|<xref:System.DateTime>|  
|decimal|<xref:System.Decimal>|  
|double|<xref:System.Double>|  
|ENTITY|<xref:System.String>|  
|實體|<xref:System.String>|  
|float|<xref:System.Single>|  
|gDay|<xref:System.String>|  
|gMonth|<xref:System.String>|  
|gMonthDay|<xref:System.String>|  
|gYear|<xref:System.String>|  
|gYearMonth|<xref:System.String>|  
|hexBinary|陣列<xref:System.Byte>物件|  
|識別碼|<xref:System.String>|  
|IDREF|<xref:System.String>|  
|IDREFS|<xref:System.String>|  
|int|<xref:System.Int32>|  
|整數|<xref:System.String>|  
|語言|<xref:System.String>|  
|long|<xref:System.Int64>|  
|名稱|<xref:System.String>|  
|NCName|<xref:System.String>|  
|negativeInteger|<xref:System.String>|  
|NMTOKEN|<xref:System.String>|  
|NMTOKENS|<xref:System.String>|  
|normalizedString|<xref:System.String>|  
|nonNegativeInteger|<xref:System.String>|  
|nonPositiveInteger|<xref:System.String>|  
|NOTATION|<xref:System.String>|  
|positiveInteger|<xref:System.String>|  
|QName|<xref:System.Xml.XmlQualifiedName>|  
|持續期間|<xref:System.String>|  
|字串|<xref:System.String>|  
|short|<xref:System.Int16>|  
|時間|<xref:System.DateTime>|  
|token|<xref:System.String>|  
|unsignedByte|<xref:System.Byte>|  
|unsignedInt|<xref:System.UInt32>|  
|unsignedLong|<xref:System.UInt64>|  
|unsignedShort|<xref:System.UInt16>|  
  
   
  
## Examples  
 下列範例會序列化類別，名為`PurchaseOrder`。 數個執行個體<xref:System.Xml.Serialization.XmlArrayItemAttribute>類別套用至三個成員，而<xref:System.Xml.Serialization.XmlArrayItemAttribute.DataType%2A>每個執行個體的屬性設定為允許在陣列中的型別。  
  
 [!code-cpp[XmlArrayItemAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/XmlArrayItemAttribute Example/CPP/arrayitem.cpp#1)]
 [!code-csharp[XmlArrayItemAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/XmlArrayItemAttribute Example/CS/arrayitem.cs#1)]
 [!code-vb[XmlArrayItemAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/XmlArrayItemAttribute Example/VB/arrayitem.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ElementName">
      <MemberSignature Language="C#" Value="public string ElementName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ElementName" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlArrayItemAttribute.ElementName" />
      <MemberSignature Language="VB.NET" Value="Public Property ElementName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ElementName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ElementName : string with get, set" Usage="System.Xml.Serialization.XmlArrayItemAttribute.ElementName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定產生的 XML 項目的名稱。</summary>
        <value>產生的 XML 項目的名稱。 預設值為成員識別項。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定<xref:System.Xml.Serialization.XmlArrayItemAttribute.ElementName%2A>如果您想要不同的成員識別碼產生的 XML 項目的名稱。  
  
 您可以將設定為相同<xref:System.Xml.Serialization.XmlArrayAttribute.ElementName%2A>名為成員的多個類別成員，如果產生的 XML 文件會使用 XML 命名空間來區別具有相同的值。 如需有關如何使用 XML 文件中的命名空間和前置詞的名稱的詳細資訊，請參閱<xref:System.Xml.Serialization.XmlSerializerNamespaces>類別。  
  
   
  
## Examples  
 下列範例會設定<xref:System.Xml.Serialization.XmlArrayItemAttribute.ElementName%2A>屬性`Vehicle`和`Car`類別-藉此變更的 XML 項目名稱的<xref:System.Xml.Serialization.XmlSerializer>產生這些類別。  
  
 [!code-cpp[Classic XmlArrayItemAttribute.ElementName Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.ElementName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlArrayItemAttribute.ElementName Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.ElementName Example/CS/source.cs#1)]
 [!code-vb[Classic XmlArrayItemAttribute.ElementName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.ElementName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Form">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaForm Form { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.Schema.XmlSchemaForm Form" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlArrayItemAttribute.Form" />
      <MemberSignature Language="VB.NET" Value="Public Property Form As XmlSchemaForm" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaForm Form { System::Xml::Schema::XmlSchemaForm get(); void set(System::Xml::Schema::XmlSchemaForm value); };" />
      <MemberSignature Language="F#" Value="member this.Form : System.Xml.Schema.XmlSchemaForm with get, set" Usage="System.Xml.Serialization.XmlArrayItemAttribute.Form" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaForm</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出產生的 XML 項目名稱是否為限定的。</summary>
        <value>其中一個 <see cref="T:System.Xml.Schema.XmlSchemaForm" /> 值。 預設值為 <see langword="XmlSchemaForm.None" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Serialization.XmlAttributeAttribute.Form%2A>屬性會決定是否是 XML 元素名稱為限定，根據全球資訊網協會 (www.w3.org) 規格 」 中 XML 命名空間。 」  
  
 如果<xref:System.Xml.Serialization.XmlAttributeAttribute.Namespace%2A>屬性設定為任何值，正在嘗試設定<xref:System.Xml.Serialization.XmlElementAttribute.Form%2A>屬性`XmlSchemaForm.Unqualified`擲回例外狀況。  
  
 預設值為`XmlSchemaForm.None`，指示<xref:System.Xml.Serialization.XmlSerializer>來檢查 XML 文件，以判斷是否為限定的命名空間的結構描述。 針對項目，<xref:System.Xml.Serialization.XmlSerializer>會檢查結構描述項目屬性的值`elementFormDefault`。 屬性，它會檢查結構描述項目屬性的值`attributeFormDefault`。 例如，下列 XML 結構描述指出`Name`元素為限定，而`Number`項目是不合格。  
  
```  
<schema elementFormDefault="qualified"   
attributeFormDefault="unqualified">  
   <element name="Name"/>  
   <attribute name="Number"/>  
</schema>  
```  
  
   
  
## Examples  
 下列範例會設定<xref:System.Xml.Serialization.XmlArrayItemAttribute.Form%2A>屬性`Vehicle`類別`XmlSchemaForm.Unqualified`，而<xref:System.Xml.Serialization.XmlArrayItemAttribute.Form%2A>屬性`Car`類別`XmlSchemaForm.Qualified`。  
  
 [!code-cpp[Classic XmlArrayItemAttribute.Form Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.Form Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlArrayItemAttribute.Form Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.Form Example/CS/source.cs#1)]
 [!code-vb[Classic XmlArrayItemAttribute.Form Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.Form Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">
          <see cref="P:System.Xml.Serialization.XmlArrayItemAttribute.Form" /> 屬性設定為 <see langword="XmlSchemaForm.Unqualified" />，並且指定 <see cref="P:System.Xml.Serialization.XmlArrayItemAttribute.Namespace" /> 值。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNullable">
      <MemberSignature Language="C#" Value="public bool IsNullable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNullable" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlArrayItemAttribute.IsNullable" />
      <MemberSignature Language="VB.NET" Value="Public Property IsNullable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNullable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsNullable : bool with get, set" Usage="System.Xml.Serialization.XmlArrayItemAttribute.IsNullable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 是否必須將成員序列化為 <see langword="xsi:nil" /> 屬性設為 <see langword="true" /> 的空 XML 標記。</summary>
        <value>如果 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 產生 <see langword="true" /> 屬性，則為 <see langword="xsi:nil" />，否則為 <see langword="false" />，而且不會產生執行個體。 預設值為 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 結構的 XML 結構描述規格可讓 XML 文件明確表示項目的內容遺漏。 這類項目包含屬性`xsi:nil`設`true`。 如需詳細資訊，請參閱全球資訊網協會 (www.w3.org) 規格標題為 「 XML 結構描述第 1 部分： 結構。 」  
  
 如果<xref:System.Xml.Serialization.XmlArrayItemAttribute.IsNullable%2A>屬性是`true`、`xsi:nil`屬性就會產生的類別成員，已設定成`null`。 例如，如果您設定名為某個欄位`MyStringArray`至`null`、<xref:System.Xml.Serialization.XmlSerializer>會產生下列 XML 程式碼。  
  
```  
<MyStringArray xsi:nil = "true" />  
```  
  
 如果<xref:System.Xml.Serialization.XmlArrayItemAttribute.IsNullable%2A>屬性是`false`，會產生任何 XML 元素。  
  
> [!NOTE]
>  您不能套用<xref:System.Xml.Serialization.XmlArrayItemAttribute.IsNullable%2A>成員的屬性型別為實值類型，因為實值類型不能包含`null`。  
  
   
  
## Examples  
 下列範例會序列化類別，名為`Group`，其中包含名為的欄位`Employees`所傳回的陣列`Employee`物件。 名為第二個類別`Manager`衍生自`Employee`。 <xref:System.Xml.Serialization.XmlArrayItemAttribute>指定<xref:System.Xml.Serialization.XmlSerializer>插入兩者`Employee`和`Manager`陣列中的物件。 範例會設定<xref:System.Xml.Serialization.XmlArrayItemAttribute.IsNullable%2A>屬性，藉此告知<xref:System.Xml.Serialization.XmlSerializer>不是用來產生`xsi:nil`陣列中的屬性物件設為`null`。  
  
 [!code-cpp[Classic XmlArrayItemAttribute.IsNullable Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.IsNullable Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlArrayItemAttribute.IsNullable Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.IsNullable Example/CS/source.cs#1)]
 [!code-vb[Classic XmlArrayItemAttribute.IsNullable Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.IsNullable Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlArrayItemAttribute.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string with get, set" Usage="System.Xml.Serialization.XmlArrayItemAttribute.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定產生的 XML 項目之的命名空間。</summary>
        <value>產生的 XML 項目的命名空間。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Serialization.XmlArrayItemAttribute.Namespace%2A>屬性是否符合全球資訊網協會 (www.w3.org) 規格 」 中 XML 命名空間。 」  
  
 若要建立使用中的 XML 文件和相關聯的前置詞的命名空間，您必須建立<xref:System.Xml.Serialization.XmlSerializerNamespaces>其中包含所有的前置詞和命名空間組。 設定每個命名空間<xref:System.Xml.Serialization.XmlArrayAttribute>必須包含在<xref:System.Xml.Serialization.XmlSerializerNamespaces>。 當<xref:System.Xml.Serialization.XmlSerializer>文件中，會產生正確前置詞的項目名稱，每個陣列項目。  
  
   
  
## Examples  
 下列範例會套用<xref:System.Xml.Serialization.XmlArrayItemAttribute>並設定<xref:System.Xml.Serialization.XmlArrayItemAttribute.Namespace%2A>屬性。  
  
 [!code-cpp[Classic XmlArrayItemAttribute.Namespace Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.Namespace Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlArrayItemAttribute.Namespace Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.Namespace Example/CS/source.cs#1)]
 [!code-vb[Classic XmlArrayItemAttribute.Namespace Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.Namespace Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NestingLevel">
      <MemberSignature Language="C#" Value="public int NestingLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NestingLevel" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlArrayItemAttribute.NestingLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property NestingLevel As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int NestingLevel { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.NestingLevel : int with get, set" Usage="System.Xml.Serialization.XmlArrayItemAttribute.NestingLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> 影響的 XML 項目的階層架構中的層級。</summary>
        <value>在陣列組成之陣列的一組索引中，以零起始的索引。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XML 文件可以包含階層的 XML 項目。 若要表示這類階層，使用陣列的陣列。 在這類陣列中，每個索引代表階層中的層級。 因此，<xref:System.Xml.Serialization.XmlArrayItemAttribute.NestingLevel%2A>套用時，才會使用屬性<xref:System.Xml.Serialization.XmlArrayItemAttribute>傳回陣列的陣列的欄位。  
  
 當套用此屬性，指定這個屬性會影響設定的階層層級<xref:System.Xml.Serialization.XmlArrayItemAttribute.NestingLevel%2A>。 第一個索引一律具有的值為 0;因此它是選擇性的以設定其<xref:System.Xml.Serialization.XmlArrayItemAttribute.NestingLevel%2A>--<xref:System.Xml.Serialization.XmlArrayItemAttribute>沒有<xref:System.Xml.Serialization.XmlArrayItemAttribute.NestingLevel%2A>值會套用到第一個陣列索引。 只有後續<xref:System.Xml.Serialization.XmlArrayItemAttribute>物件需要<xref:System.Xml.Serialization.XmlArrayItemAttribute.NestingLevel%2A>（做為 1、 2、 3，依此類推） 指定的值。  
  
   
  
## Examples  
 下列範例會將三個<xref:System.Xml.Serialization.XmlArrayItemAttribute>屬性加入陣列的陣列。 若要指定的陣列的每個屬性會套用至，<xref:System.Xml.Serialization.XmlArrayItemAttribute.NestingLevel%2A>屬性設定為陣列的索引。  
  
 [!code-cpp[NestingLevel#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NestingLevel/cpp/nestinglevel.cpp#1)]
 [!code-csharp[NestingLevel#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NestingLevel/CS/nestinglevel.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public Type Type { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Type" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlArrayItemAttribute.Type" />
      <MemberSignature Language="VB.NET" Value="Public Property Type As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ Type { Type ^ get(); void set(Type ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Type : Type with get, set" Usage="System.Xml.Serialization.XmlArrayItemAttribute.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定陣列中允許的型別。</summary>
        <value>陣列中所允許的 <see cref="T:System.Type" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Xml.Serialization.XmlElementAttribute.Type%2A>覆寫針對指定類型的公用欄位或公用讀取/寫入屬性值的屬性。  
  
 如果欄位或屬性會傳回型別的陣列<xref:System.Object>，適用於多個執行個體<xref:System.Xml.Serialization.XmlArrayItemAttribute>欄位或屬性。 每個執行個體，請設定<xref:System.Xml.Serialization.XmlElementAttribute.Type%2A>可以插入到陣列的物件類型的屬性。  
  
 如果陣列包含只有基本型別，您不需要套用<xref:System.Xml.Serialization.XmlArrayItemAttribute>。 根據預設，<xref:System.Xml.Serialization.XmlSerializer>會產生一系列的元素，每個都有相同的項目名稱，每個值，但每個項目的型別設定為 XML 結構描述資料型別。 例如，下列程式碼：  
  
```  
' Visual Basic code  
Public Class Arrays  
   Public XSDTypes ()As Object= New Object(){"one", 2, 3.0}  
End Class  
// C# code  
public class MyArray{  
   // No XmlArrayItemAttribute is applied.  
   public object[] XSDTypes= new object[]{"one", 2, 3.2};  
}  
```  
  
 這段 XML 會產生結果：  
  
```  
<?xml version="1.0" encoding="utf-8"?>  
<Arrays xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">  
  <XSDTypes>  
    <Object xsi:type="xsd:string">one</Object>  
    <Object xsi:type="xsd:int">2</Object>  
    <Object xsi:type="xsd:double">3</Object>  
  </XSDTypes>  
</Arrays>  
```  
  
 不過，如果您指定<xref:System.Xml.Serialization.XmlArrayItemAttribute.Type%2A>使用.NET 型別名稱來產生每個基本類型，每個值的項目名稱的屬性。 例如下列程式碼：  
  
```  
' Visual Basic code  
Public Class Arrays  
   <XmlArrayItem(GetType(String)), _  
   XmlArrayItem(GetType(Integer)), _  
   XmlArrayItem(GetType(Double))> _  
   Public PrimitiveTypes () As Object = New Object(){"one", 2, 3.0}  
End Class  
// C# code  
public class Arrays{  
   [XmlArrayItem(typeof(string))]  
   [XmlArrayItem(typeof(int))]  
   [XmlArrayItem(typeof(double))]  
   public object [] PrimitiveTypes = new object[]{"one", 2, 3.0};  
}  
```  
  
 這段 XML 會產生結果：  
  
```  
<?xml version="1.0" encoding="utf-8"?>  
<Arrays xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">  
  <PrimitiveTypes>  
    <string>one</string>  
    <int>2</int>  
    <double>3</double>  
  </PrimitiveTypes>  
</Arrays>  
```  
  
   
  
## Examples  
 下列範例會序列化物件的陣列。 傳回陣列的欄位屬性具有兩個<xref:System.Xml.Serialization.XmlArrayItemAttribute>執行個體。 每個執行個體指示<xref:System.Xml.Serialization.XmlSerializer>接受指定<xref:System.Xml.Serialization.XmlArrayItemAttribute.Type%2A>陣列中。  
  
 [!code-cpp[Classic XmlArrayItemAttribute.Type Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.Type Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlArrayItemAttribute.Type Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.Type Example/CS/source.cs#1)]
 [!code-vb[Classic XmlArrayItemAttribute.Type Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.Type Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>