<Type Name="XmlSerializer" FullName="System.Xml.Serialization.XmlSerializer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="31c63a9049616269f6e937a0aa7c2d4b196dd59f" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39797423" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XmlSerializer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlSerializer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Serialization.XmlSerializer" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlSerializer" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlSerializer" />
  <TypeSignature Language="F#" Value="type XmlSerializer = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="b11ea-101">將物件序列化為 XML 文件，以及從 XML 文件將物件還原序列化。</span>
      <span class="sxs-lookup">
        <span data-stu-id="b11ea-101">Serializes and deserializes objects into and from XML documents.</span>
      </span>
      <span data-ttu-id="b11ea-102">
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> 可讓您控制如何將物件編碼為 XML。</span>
      <span class="sxs-lookup">
        <span data-stu-id="b11ea-102">The <see cref="T:System.Xml.Serialization.XmlSerializer" /> enables you to control how objects are encoded into XML.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b11ea-103">XML 序列化 (Serialization) 是將物件公用屬性和欄位轉換為儲存或傳輸所用的序列格式 (此處即為 XML) 的程。</span><span class="sxs-lookup"><span data-stu-id="b11ea-103">XML serialization is the process of converting an object's public properties and fields to a serial format (in this case, XML) for storage or transport.</span></span> <span data-ttu-id="b11ea-104">還原序列化會重新建立 XML 輸出從其原始狀態中的物件。</span><span class="sxs-lookup"><span data-stu-id="b11ea-104">Deserialization re-creates the object in its original state from the XML output.</span></span> <span data-ttu-id="b11ea-105">您可以將序列化成資料流或緩衝區中儲存物件狀態的方式。</span><span class="sxs-lookup"><span data-stu-id="b11ea-105">You can think of serialization as a way of saving the state of an object into a stream or buffer.</span></span> <span data-ttu-id="b11ea-106">例如，ASP.NET 會使用<xref:System.Xml.Serialization.XmlSerializer>類別來編碼 XML Web 服務訊息。</span><span class="sxs-lookup"><span data-stu-id="b11ea-106">For example, ASP.NET uses the <xref:System.Xml.Serialization.XmlSerializer> class to encode XML Web service messages.</span></span>  
  
 <span data-ttu-id="b11ea-107">您物件中的資料是用程式語言來描述的，該程式語言會建構如類別、欄位、屬性、基本型別 (Primitive Type)、陣列，甚至是以 <xref:System.Xml.XmlElement> 或 <xref:System.Xml.XmlAttribute> 物件為格式的內嵌 XML。</span><span class="sxs-lookup"><span data-stu-id="b11ea-107">The data in your objects is described using programming language constructs like classes, fields, properties, primitive types, arrays, and even embedded XML in the form of <xref:System.Xml.XmlElement> or <xref:System.Xml.XmlAttribute> objects.</span></span> <span data-ttu-id="b11ea-108">您可以選擇建立您自己的類別、 屬性或使用附註[XML 結構描述定義工具 (Xsd.exe)](http://msdn.microsoft.com/library/a6e6e65c-347f-4494-9457-653bf29baac2)產生根據現有 XML 結構描述定義 (XSD) 文件的類別。</span><span class="sxs-lookup"><span data-stu-id="b11ea-108">You have the option of creating your own classes, annotated with attributes, or using the [XML Schema Definition Tool (Xsd.exe)](http://msdn.microsoft.com/library/a6e6e65c-347f-4494-9457-653bf29baac2) to generate the classes based on an existing XML Schema definition (XSD) document.</span></span> <span data-ttu-id="b11ea-109">如果您有 XML 結構描述時，您可以執行 Xsd.exe 產生一組強型別為結構描述並以符合結構描述時序列化的屬性註解類別。</span><span class="sxs-lookup"><span data-stu-id="b11ea-109">If you have an XML Schema, you can run the Xsd.exe to produce a set of classes that are strongly typed to the schema and annotated with attributes to adhere to the schema when serialized.</span></span>  
  
 <span data-ttu-id="b11ea-110">物件與 XML 之間傳輸資料需要從 XML 結構描述的程式設計語言建構和程式語言建構的 XML 結構描述的對應。</span><span class="sxs-lookup"><span data-stu-id="b11ea-110">To transfer data between objects and XML requires a mapping from the programming language constructs to XML schema and from the XML schema to the programming language constructs.</span></span> <span data-ttu-id="b11ea-111"><xref:System.Xml.Serialization.XmlSerializer>和相關的工具，像是 Xsd.exe 提供這兩種技術，同時設計階段與執行階段之間的橋樑。</span><span class="sxs-lookup"><span data-stu-id="b11ea-111">The <xref:System.Xml.Serialization.XmlSerializer> and related tools like Xsd.exe provide the bridge between these two technologies at both design time and runtime.</span></span> <span data-ttu-id="b11ea-112">在設計階段，請使用 Xsd.exe，從您的自訂類別產生 XML 結構描述文件 (.xsd) 或產生從指定的結構描述的類別。</span><span class="sxs-lookup"><span data-stu-id="b11ea-112">At design time, use the Xsd.exe to produce an XML schema document (.xsd) from your custom classes or to produce classes from a given schema.</span></span> <span data-ttu-id="b11ea-113">在任一情況下，類別會以屬性註解自訂指示<xref:System.Xml.Serialization.XmlSerializer>如何將 XML 結構描述系統和 common language runtime 之間對應。</span><span class="sxs-lookup"><span data-stu-id="b11ea-113">In either case, the classes are annotated with custom attributes to instruct the <xref:System.Xml.Serialization.XmlSerializer> how to map between the XML schema system and the common language runtime.</span></span> <span data-ttu-id="b11ea-114">在執行階段類別的執行個體可以序列化指定的結構描述的 XML 文件。</span><span class="sxs-lookup"><span data-stu-id="b11ea-114">At runtime, instances of the classes can be serialized into XML documents that follow the given schema.</span></span> <span data-ttu-id="b11ea-115">同樣地，這些 XML 文件可以還原序列化成執行階段物件。</span><span class="sxs-lookup"><span data-stu-id="b11ea-115">Likewise, these XML documents can be deserialized into runtime objects.</span></span> <span data-ttu-id="b11ea-116">請注意，XML 結構描述是選擇性，不需要在設計階段或執行階段。</span><span class="sxs-lookup"><span data-stu-id="b11ea-116">Note that the XML schema is optional, and not required at design time or runtime.</span></span>  
  
## <a name="controlling-generated-xml"></a><span data-ttu-id="b11ea-117">控制產生的 XML</span><span class="sxs-lookup"><span data-stu-id="b11ea-117">Controlling Generated XML</span></span>  
 <span data-ttu-id="b11ea-118">若要控制所產生的 XML，您可以套用特殊屬性至類別和成員。</span><span class="sxs-lookup"><span data-stu-id="b11ea-118">To control the generated XML, you can apply special attributes to classes and members.</span></span> <span data-ttu-id="b11ea-119">例如，若要指定不同的 XML 項目名稱，套用<xref:System.Xml.Serialization.XmlElementAttribute>為公用欄位或屬性，並將<xref:System.Xml.Serialization.XmlElementAttribute.ElementName%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="b11ea-119">For example, to specify a different XML element name, apply an <xref:System.Xml.Serialization.XmlElementAttribute> to a public field or property, and set the <xref:System.Xml.Serialization.XmlElementAttribute.ElementName%2A> property.</span></span> <span data-ttu-id="b11ea-120">相似的屬性完整清單，請參閱 <<c0> [ 屬性控制 XML 序列化的](http://msdn.microsoft.com/library/414b820f-a696-4206-b576-2711d85490c7)。</span><span class="sxs-lookup"><span data-stu-id="b11ea-120">For a complete list of similar attributes, see [Attributes That Control XML Serialization](http://msdn.microsoft.com/library/414b820f-a696-4206-b576-2711d85490c7).</span></span> <span data-ttu-id="b11ea-121">您也可以實作<xref:System.Xml.Serialization.IXmlSerializable>介面來控制 XML 輸出。</span><span class="sxs-lookup"><span data-stu-id="b11ea-121">You can also implement the <xref:System.Xml.Serialization.IXmlSerializable> interface to control the XML output.</span></span>  
  
 <span data-ttu-id="b11ea-122">如果產生的 XML 必須符合全球寬協會 (www.w3.org) 文件的第 5 節中，"Simple Object Access Protocol (SOAP) 1.1 」，您必須建構<xref:System.Xml.Serialization.XmlSerializer>與<xref:System.Xml.Serialization.XmlTypeMapping>。</span><span class="sxs-lookup"><span data-stu-id="b11ea-122">If the XML generated must conform to section 5 of the World Wide Consortium (www.w3.org) document, "Simple Object Access Protocol (SOAP) 1.1", you must construct the <xref:System.Xml.Serialization.XmlSerializer> with an <xref:System.Xml.Serialization.XmlTypeMapping>.</span></span> <span data-ttu-id="b11ea-123">若要進一步控制編碼 SOAP XML，使用 列出的屬性[控制編碼 SOAP 序列化的屬性](http://msdn.microsoft.com/library/93ee258c-9c0f-4a08-897c-c10db7a00f91)。</span><span class="sxs-lookup"><span data-stu-id="b11ea-123">To further control the encoded SOAP XML, use the attributes listed in [Attributes That Control Encoded SOAP Serialization](http://msdn.microsoft.com/library/93ee258c-9c0f-4a08-897c-c10db7a00f91).</span></span>  
  
 <span data-ttu-id="b11ea-124">使用<xref:System.Xml.Serialization.XmlSerializer>您可以利用使用強型別類別，但仍有 XML 的彈性。</span><span class="sxs-lookup"><span data-stu-id="b11ea-124">With the <xref:System.Xml.Serialization.XmlSerializer> you can take advantage of working with strongly typed classes and still have the flexibility of XML.</span></span> <span data-ttu-id="b11ea-125">使用欄位或屬性的型別<xref:System.Xml.XmlElement>，<xref:System.Xml.XmlAttribute>或<xref:System.Xml.XmlNode>在強類型類別中，您可以直接將 XML 物件讀取 XML 文件的組件。</span><span class="sxs-lookup"><span data-stu-id="b11ea-125">Using fields or properties of type <xref:System.Xml.XmlElement>, <xref:System.Xml.XmlAttribute> or <xref:System.Xml.XmlNode> in your strongly typed classes, you can read parts of the XML document directly into XML objects.</span></span>  
  
 <span data-ttu-id="b11ea-126">如果您使用可延伸的 XML 結構描述時，您也可以使用<xref:System.Xml.Serialization.XmlAnyElementAttribute>和<xref:System.Xml.Serialization.XmlAnyAttributeAttribute>序列化和還原序列化的原始結構描述中找不到元素或屬性的屬性。</span><span class="sxs-lookup"><span data-stu-id="b11ea-126">If you work with extensible XML schemas, you can also use the <xref:System.Xml.Serialization.XmlAnyElementAttribute> and <xref:System.Xml.Serialization.XmlAnyAttributeAttribute> attributes to serialize and deserialize elements or attributes that are not found in the original schema.</span></span> <span data-ttu-id="b11ea-127">若要使用的物件，套用<xref:System.Xml.Serialization.XmlAnyElementAttribute>的欄位，傳回的陣列<xref:System.Xml.XmlElement>物件，或套用<xref:System.Xml.Serialization.XmlAnyAttributeAttribute>的欄位，傳回的陣列<xref:System.Xml.XmlAttribute>物件。</span><span class="sxs-lookup"><span data-stu-id="b11ea-127">To use the objects, apply an <xref:System.Xml.Serialization.XmlAnyElementAttribute> to a field that returns an array of <xref:System.Xml.XmlElement> objects, or apply an <xref:System.Xml.Serialization.XmlAnyAttributeAttribute> to a field that returns an array of <xref:System.Xml.XmlAttribute> objects.</span></span>  
  
 <span data-ttu-id="b11ea-128">如果屬性或欄位傳回複雜物件 (例如陣列或類別執行個體)，<xref:System.Xml.Serialization.XmlSerializer> 會將它轉換為主要 XML 文件中的巢狀項目。</span><span class="sxs-lookup"><span data-stu-id="b11ea-128">If a property or field returns a complex object (such as an array or a class instance), the <xref:System.Xml.Serialization.XmlSerializer> converts it to an element nested within the main XML document.</span></span> <span data-ttu-id="b11ea-129">例如，下列程式碼中的第一個類別會傳回第二個類別的執行個體。</span><span class="sxs-lookup"><span data-stu-id="b11ea-129">For example, the first class in the following code returns an instance of the second class.</span></span>  
  
```vb  
Public Class MyClass  
    Public MyObjectProperty As MyObject  
End Class  
  
Public Class MyObject  
    Public ObjectName As String  
End Class  
```  
  
```csharp  
public class MyClass  
{  
    public MyObject MyObjectProperty;  
}  
public class MyObject  
{  
    public string ObjectName;  
}  
```  
  
 <span data-ttu-id="b11ea-130">序列化，XML 輸出看起來像這樣：</span><span class="sxs-lookup"><span data-stu-id="b11ea-130">The serialized, XML output looks like this:</span></span>  
  
```  
<MyClass>  
  <MyObjectProperty>  
  <ObjectName>My String</ObjectName>  
  </MyObjectProperty>  
</MyClass>  
```  
  
 <span data-ttu-id="b11ea-131">如果結構描述包含的項目，是選擇性的 (minOccurs = '0')，或結構描述會包含預設值，如果您有兩個選項。</span><span class="sxs-lookup"><span data-stu-id="b11ea-131">If a schema includes an element that is optional (minOccurs = '0'), or if the schema includes a default value, you have two options.</span></span> <span data-ttu-id="b11ea-132">其中一個選項是使用<xref:System.ComponentModel.DefaultValueAttribute?displayProperty=nameWithType>指定預設值，如下列程式碼所示。</span><span class="sxs-lookup"><span data-stu-id="b11ea-132">One option is to use <xref:System.ComponentModel.DefaultValueAttribute?displayProperty=nameWithType> to specify the default value, as shown in the following code.</span></span>  
  
```vb  
Public Class PurchaseOrder  
    <System.ComponentModel.DefaultValueAttribute ("2002")> _  
    Public Year As String  
End Class  
```  
  
```csharp  
public class PurchaseOrder  
{  
    [System.ComponentModel.DefaultValueAttribute ("2002")]  
    public string Year;  
}  
```  
  
 <span data-ttu-id="b11ea-133">另一個選項是使用特殊的模式來建立可辨識的布林值欄位<xref:System.Xml.Serialization.XmlSerializer>，並套用<xref:System.Xml.Serialization.XmlIgnoreAttribute>欄位。</span><span class="sxs-lookup"><span data-stu-id="b11ea-133">Another option is to use a special pattern to create a Boolean field recognized by the <xref:System.Xml.Serialization.XmlSerializer>, and to apply the <xref:System.Xml.Serialization.XmlIgnoreAttribute> to the field.</span></span> <span data-ttu-id="b11ea-134">模式的形式建立`propertyNameSpecified`。</span><span class="sxs-lookup"><span data-stu-id="b11ea-134">The pattern is created in the form of `propertyNameSpecified`.</span></span> <span data-ttu-id="b11ea-135">例如，如果沒有名為"MyFirstName 」 也會建立一個名為"MyFirstNameSpecified 」 欄位的欄位，會指示<xref:System.Xml.Serialization.XmlSerializer>是否要產生名為"MyFirstName"的 XML 項目。</span><span class="sxs-lookup"><span data-stu-id="b11ea-135">For example, if there is a field named "MyFirstName" you would also create a field named "MyFirstNameSpecified" that instructs the <xref:System.Xml.Serialization.XmlSerializer> whether to generate the XML element named "MyFirstName".</span></span> <span data-ttu-id="b11ea-136">這在下列範例中顯示。</span><span class="sxs-lookup"><span data-stu-id="b11ea-136">This is shown in the following example.</span></span>  
  
```vb  
Public Class OptionalOrder  
    ' This field's value should not be serialized   
    ' if it is uninitialized.  
    Public FirstOrder As String  
  
    ' Use the XmlIgnoreAttribute to ignore the   
    ' special field named "FirstOrderSpecified".  
    <System.Xml.Serialization.XmlIgnoreAttribute> _  
    Public FirstOrderSpecified As Boolean  
End Class  
```  
  
```csharp  
public class OptionalOrder  
{  
    // This field should not be serialized   
    // if it is uninitialized.  
    public string FirstOrder;  
  
    // Use the XmlIgnoreAttribute to ignore the   
    // special field named "FirstOrderSpecified".  
    [System.Xml.Serialization.XmlIgnoreAttribute]  
    public bool FirstOrderSpecified;  
}  
```  
  
## <a name="overriding-default-serialization"></a><span data-ttu-id="b11ea-137">覆寫預設的序列化</span><span class="sxs-lookup"><span data-stu-id="b11ea-137">Overriding Default Serialization</span></span>  
 <span data-ttu-id="b11ea-138">您可以藉由建立其中一個適當的屬性，並將它新增至執行個體也覆寫的任何一組物件和其欄位和屬性的序列化<xref:System.Xml.Serialization.XmlAttributes>類別。</span><span class="sxs-lookup"><span data-stu-id="b11ea-138">You can also override the serialization of any set of objects and their fields and properties by creating one of the appropriate attributes, and adding it to an instance of the <xref:System.Xml.Serialization.XmlAttributes> class.</span></span> <span data-ttu-id="b11ea-139">覆寫序列化以這種方式有兩個用途： 首先，您可以控制和擴充在 DLL 中，找到的物件序列化，即使您沒有存取來源;第二，您可以建立一組可序列化的類別，但是序列化的物件，以多種方式。</span><span class="sxs-lookup"><span data-stu-id="b11ea-139">Overriding serialization in this way has two uses: first, you can control and augment the serialization of objects found in a DLL, even if you do not have access to the source; second, you can create one set of serializable classes, but serialize the objects in multiple ways.</span></span> <span data-ttu-id="b11ea-140">如需詳細資訊，請參閱 <<c0> <xref:System.Xml.Serialization.XmlAttributeOverrides> 類別以及[如何： 控制序列化的衍生類別](http://msdn.microsoft.com/library/caa92596-9e15-4d91-acbe-56911ef47a84)。</span><span class="sxs-lookup"><span data-stu-id="b11ea-140">For more details, see the <xref:System.Xml.Serialization.XmlAttributeOverrides> class and [How to: Control Serialization of Derived Classes](http://msdn.microsoft.com/library/caa92596-9e15-4d91-acbe-56911ef47a84).</span></span>  
  
 <span data-ttu-id="b11ea-141">若要將物件序列化，呼叫<xref:System.Xml.Serialization.XmlSerializer.Serialize%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b11ea-141">To serialize an object, call the <xref:System.Xml.Serialization.XmlSerializer.Serialize%2A> method.</span></span> <span data-ttu-id="b11ea-142">若要還原序列化物件，呼叫<xref:System.Xml.Serialization.XmlSerializer.Deserialize%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b11ea-142">To deserialize an object, call the <xref:System.Xml.Serialization.XmlSerializer.Deserialize%2A> method.</span></span>  
  
 <span data-ttu-id="b11ea-143">若要加入的 XML 文件中的 XML 命名空間，請參閱<xref:System.Xml.Serialization.XmlSerializerNamespaces>。</span><span class="sxs-lookup"><span data-stu-id="b11ea-143">To add XML namespaces to an XML document, see <xref:System.Xml.Serialization.XmlSerializerNamespaces>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b11ea-144"><xref:System.Xml.Serialization.XmlSerializer>提供特殊處理，就可以類別可實作<xref:System.Collections.IEnumerable>或<xref:System.Collections.ICollection>。</span><span class="sxs-lookup"><span data-stu-id="b11ea-144">The <xref:System.Xml.Serialization.XmlSerializer> gives special treatment to classes that implement <xref:System.Collections.IEnumerable> or <xref:System.Collections.ICollection>.</span></span> <span data-ttu-id="b11ea-145">實作 <xref:System.Collections.IEnumerable> 的類別必須實作只取單一參數的公用 `Add` 方法。</span><span class="sxs-lookup"><span data-stu-id="b11ea-145">A class that implements <xref:System.Collections.IEnumerable> must implement a public `Add` method that takes a single parameter.</span></span> <span data-ttu-id="b11ea-146">`Add`方法的參數必須屬於相同的型別傳回的`Current`屬性傳回的值`GetEnumerator`，或其中一個該類型的基底。</span><span class="sxs-lookup"><span data-stu-id="b11ea-146">The `Add` method's parameter must be of the same type as is returned from the `Current` property on the value returned from `GetEnumerator`, or one of that type's bases.</span></span> <span data-ttu-id="b11ea-147">類別若實作<xref:System.Collections.ICollection>(例如<xref:System.Collections.CollectionBase>) 除了<xref:System.Collections.IEnumerable>必須具有公用`Item`編製索引的屬性 （C# 中的索引子），會接受一個整數，而且必須具有公用`Count`屬於整數類型的屬性。</span><span class="sxs-lookup"><span data-stu-id="b11ea-147">A class that implements <xref:System.Collections.ICollection> (such as <xref:System.Collections.CollectionBase>) in addition to <xref:System.Collections.IEnumerable> must have a public `Item` indexed property (indexer in C#) that takes an integer, and it must have a public `Count` property of type integer.</span></span> <span data-ttu-id="b11ea-148">參數`Add`方法必須是相同的型別，傳回的`Item`屬性或其中一個該類型的基底。</span><span class="sxs-lookup"><span data-stu-id="b11ea-148">The parameter to the `Add` method must be the same type as is returned from the `Item` property, or one of that type's bases.</span></span> <span data-ttu-id="b11ea-149">為類別實作<xref:System.Collections.ICollection>，要序列化的值擷取自索引`Item`屬性，不是藉由呼叫`GetEnumerator`。</span><span class="sxs-lookup"><span data-stu-id="b11ea-149">For classes that implement <xref:System.Collections.ICollection>, values to be serialized are retrieved from the indexed `Item` property, not by calling `GetEnumerator`.</span></span>  
  
 <span data-ttu-id="b11ea-150">您必須具有寫入權限的暫存目錄 （如 TEMP 環境變數所定義） 將物件還原序列化。</span><span class="sxs-lookup"><span data-stu-id="b11ea-150">You must have permission to write to the temporary directory (as defined by the TEMP environment variable) to deserialize an object.</span></span>  
  
## <a name="dynamically-generated-assemblies"></a><span data-ttu-id="b11ea-151">以動態方式產生的組件</span><span class="sxs-lookup"><span data-stu-id="b11ea-151">Dynamically Generated Assemblies</span></span>  
 <span data-ttu-id="b11ea-152">若要增加效能，XML 序列化基礎結構會動態產生序列化和還原序列化指定的類型的組件。</span><span class="sxs-lookup"><span data-stu-id="b11ea-152">To increase performance, the XML serialization infrastructure dynamically generates assemblies to serialize and deserialize specified types.</span></span> <span data-ttu-id="b11ea-153">基礎結構會尋找並重複使用這些組件。</span><span class="sxs-lookup"><span data-stu-id="b11ea-153">The infrastructure finds and reuses those assemblies.</span></span> <span data-ttu-id="b11ea-154">只有在使用下列建構函式時，就會發生這種行為：</span><span class="sxs-lookup"><span data-stu-id="b11ea-154">This behavior occurs only when using the following constructors:</span></span>  
  
 <xref:System.Xml.Serialization.XmlSerializer.%23ctor%28System.Type%29?displayProperty=nameWithType>  
  
 <xref:System.Xml.Serialization.XmlSerializer.%23ctor%28System.Type%2CSystem.String%29?displayProperty=nameWithType>  
  
 <span data-ttu-id="b11ea-155">如果您使用任何其他建構函式時，多個相同的組件版本產生並永遠不會卸載，而導致記憶體流失和效能不佳。</span><span class="sxs-lookup"><span data-stu-id="b11ea-155">If you use any of the other constructors, multiple versions of the same assembly are generated and never unloaded, which results in a memory leak and poor performance.</span></span> <span data-ttu-id="b11ea-156">最簡單的解決方法是使用其中一個先前所述的兩個建構函式。</span><span class="sxs-lookup"><span data-stu-id="b11ea-156">The easiest solution is to use one of the previously mentioned two constructors.</span></span> <span data-ttu-id="b11ea-157">否則，您必須快取中的組件<xref:System.Collections.Hashtable>，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="b11ea-157">Otherwise, you must cache the assemblies in a <xref:System.Collections.Hashtable>, as shown in the following example.</span></span>  
  
```csharp  
Hashtable serializers = new Hashtable();  
  
// Use the constructor that takes a type and XmlRootAttribute.  
XmlSerializer s = new XmlSerializer(typeof(MyClass), myRoot);  
  
// Implement a method named GenerateKey that creates unique keys   
// for each instance of the XmlSerializer. The code should take   
// into account all parameters passed to the XmlSerializer   
// constructor.  
object key = GenerateKey(typeof(MyClass), myRoot);  
  
// Check the local cache for a matching serializer.  
XmlSerializer ser = (XmlSerializer)serializers[key];  
if (ser == null)   
{  
    ser = new XmlSerializer(typeof(MyClass), myRoot);  
    // Cache the serializer.  
    serializers[key] = ser;  
}  
else  
{  
    // Use the serializer to serialize, or deserialize.  
}  
```  
  
```vb  
Dim serializers As New Hashtable()  
  
' Use the constructor that takes a type and XmlRootAttribute.  
Dim s As New XmlSerializer(GetType([MyClass]), myRoot)  
  
' Implement a method named GenerateKey that creates unique keys   
' for each instance of the XmlSerializer. The code should take   
' into account all parameters passed to the XmlSerializer   
' constructor.  
Dim key As Object = GenerateKey(GetType([MyClass]), myRoot)  
  
' Check the local cache for a matching serializer.  
Dim ser As XmlSerializer = CType(serializers(key), XmlSerializer)  
  
If ser Is Nothing Then  
    ser = New XmlSerializer(GetType([MyClass]), myRoot)  
    ' Cache the serializer.  
    serializers(key) = ser  
Else   
    ' Use the serializer to serialize, or deserialize.  
End If  
```  
  
## <a name="serialization-of-arraylist-and-generic-list"></a><span data-ttu-id="b11ea-158">序列化 ArrayList 以及泛型清單</span><span class="sxs-lookup"><span data-stu-id="b11ea-158">Serialization of ArrayList and Generic List</span></span>  
 <span data-ttu-id="b11ea-159"><xref:System.Xml.Serialization.XmlSerializer>無法序列化或還原序列化下列：</span><span class="sxs-lookup"><span data-stu-id="b11ea-159">The <xref:System.Xml.Serialization.XmlSerializer> cannot serialize or deserialize the following:</span></span>  
  
-   <span data-ttu-id="b11ea-160">陣列 <xref:System.Collections.ArrayList></span><span class="sxs-lookup"><span data-stu-id="b11ea-160">Arrays of <xref:System.Collections.ArrayList></span></span>  
  
-   <span data-ttu-id="b11ea-161">陣列 <xref:System.Collections.Generic.List%601></span><span class="sxs-lookup"><span data-stu-id="b11ea-161">Arrays of <xref:System.Collections.Generic.List%601></span></span>  
  
## <a name="serialization-of-enumerations-of-unsigned-long"></a><span data-ttu-id="b11ea-162">列舉的 Unsigned Long 的序列化</span><span class="sxs-lookup"><span data-stu-id="b11ea-162">Serialization of Enumerations of Unsigned Long</span></span>  
 <span data-ttu-id="b11ea-163"><xref:System.Xml.Serialization.XmlSerializer>無法具現化序列化列舉型別，如果下列條件成立： 列舉型別是不帶正負號長時間的型別 (`ulong` C# 中) 和列舉型別包含任何成員的值大於9,223,372,036,854,775,807。</span><span class="sxs-lookup"><span data-stu-id="b11ea-163">The <xref:System.Xml.Serialization.XmlSerializer> cannot be instantiated to serialize an enumeration if the following conditions are true: The enumeration is of type unsigned long (`ulong` in C#) and the enumeration contains any member with a value larger than 9,223,372,036,854,775,807.</span></span> <span data-ttu-id="b11ea-164">例如，下列不可序列化。</span><span class="sxs-lookup"><span data-stu-id="b11ea-164">For example, the following cannot be serialized.</span></span>  
  
```  
public enum LargeNumbers: ulong  
{  
    a = 9223372036854775808  
}  
// At runtime, the following code will fail.  
xmlSerializer mySerializer=new XmlSerializer(typeof(LargeNumbers));  
```  
  
## <a name="objects-marked-with-the-obsolete-attribute-no-longer-serialized"></a><span data-ttu-id="b11ea-165">標記為過時的屬性不會再序列化的物件</span><span class="sxs-lookup"><span data-stu-id="b11ea-165">Objects marked with the Obsolete Attribute no longer serialized</span></span>  
 <span data-ttu-id="b11ea-166">在  [!INCLUDE[netfx35_short](~/includes/netfx35-short-md.md)] <xref:System.Xml.Serialization.XmlSerializer>類別不會再序列化的物件標示為`[Obsolete]`。</span><span class="sxs-lookup"><span data-stu-id="b11ea-166">In the [!INCLUDE[netfx35_short](~/includes/netfx35-short-md.md)] the <xref:System.Xml.Serialization.XmlSerializer> class no longer serializes objects that are marked as `[Obsolete]`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b11ea-167">下列範例包含兩個主要類別：`PurchaseOrder`和`Test`。</span><span class="sxs-lookup"><span data-stu-id="b11ea-167">The following example contains two main classes: `PurchaseOrder` and `Test`.</span></span> <span data-ttu-id="b11ea-168">`PurchaseOrder`類別包含單一的採購單的相關資訊。</span><span class="sxs-lookup"><span data-stu-id="b11ea-168">The `PurchaseOrder` class contains information about a single purchase.</span></span> <span data-ttu-id="b11ea-169">`Test`類別包含建立訂單，以及讀取建立的訂單的方法。</span><span class="sxs-lookup"><span data-stu-id="b11ea-169">The `Test` class contains the methods that create the purchase order, and that read the created purchase order.</span></span>  
  
 [!code-cpp[Classic XmlSerializer Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlSerializer Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlSerializer Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlSerializer Example/CS/source.cs#1)]
 [!code-vb[Classic XmlSerializer Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlSerializer Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="b11ea-170">此型別具備執行緒安全。</span>
      <span class="sxs-lookup">
        <span data-stu-id="b11ea-170">This type is thread safe.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Xml.Serialization.XmlAttributeOverrides" />
    <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
    <altmember cref="T:System.Xml.Serialization.XmlSerializer" />
    <altmember cref="P:System.Xml.Serialization.XmlAttributes.XmlText" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b11ea-171">初始化 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-171">Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XmlSerializer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XmlSerializer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b11ea-172">初始化 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-172">Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSerializer (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSerializer(Type ^ type);" />
      <MemberSignature Language="F#" Value="new System.Xml.Serialization.XmlSerializer : Type -&gt; System.Xml.Serialization.XmlSerializer" Usage="new System.Xml.Serialization.XmlSerializer type" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="b11ea-173">這個 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 可序列化的物件型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-173">The type of the object that this <see cref="T:System.Xml.Serialization.XmlSerializer" /> can serialize.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b11ea-174">初始化 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 類別的新執行個體，該類別可將指定型別的物件序列化為 XML 文件，並可將 XML 文件還原序列化為指定型別的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-174">Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class that can serialize objects of the specified type into XML documents, and deserialize XML documents into objects of the specified type.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b11ea-175">通常，應用程式會定義數個類別<xref:System.Xml.Serialization.XmlSerializer>將轉換成單一的 XML 執行個體文件。</span><span class="sxs-lookup"><span data-stu-id="b11ea-175">Commonly, an application defines several classes that the <xref:System.Xml.Serialization.XmlSerializer> converts into a single XML-instance document.</span></span> <span data-ttu-id="b11ea-176">不過，<xref:System.Xml.Serialization.XmlSerializer>必須知道只有一個型別，表示 XML 根項目類別的型別。</span><span class="sxs-lookup"><span data-stu-id="b11ea-176">However, the <xref:System.Xml.Serialization.XmlSerializer> must know only one type--the type of the class that represents the XML root element.</span></span> <span data-ttu-id="b11ea-177"><xref:System.Xml.Serialization.XmlSerializer>會自動將序列化所有從屬的類別執行個體。</span><span class="sxs-lookup"><span data-stu-id="b11ea-177">The <xref:System.Xml.Serialization.XmlSerializer> automatically serializes all subordinate class instances.</span></span> <span data-ttu-id="b11ea-178">同樣地，XML 根項目類型是為了還原序列化。</span><span class="sxs-lookup"><span data-stu-id="b11ea-178">Similarly, only the type of the XML root element is required for deserialization.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b11ea-179">下列範例會建構<xref:System.Xml.Serialization.XmlSerializer>，將名為物件的序列化`Widget`。</span><span class="sxs-lookup"><span data-stu-id="b11ea-179">The following example constructs an <xref:System.Xml.Serialization.XmlSerializer> that serializes an object named `Widget`.</span></span> <span data-ttu-id="b11ea-180">範例會設定各種屬性的物件，再呼叫<xref:System.Xml.Serialization.XmlSerializer.Serialize%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b11ea-180">The example sets various properties of the object before calling the <xref:System.Xml.Serialization.XmlSerializer.Serialize%2A> method.</span></span>  
  
 [!code-cpp[Classic XmlSerializer.XmlSerializer6 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlSerializer.XmlSerializer6 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlSerializer.XmlSerializer6 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlSerializer.XmlSerializer6 Example/CS/source.cs#1)]
 [!code-vb[Classic XmlSerializer.XmlSerializer6 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlSerializer.XmlSerializer6 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)" />
        <altmember cref="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)" />
        <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSerializer (System.Xml.Serialization.XmlTypeMapping xmlTypeMapping);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.Serialization.XmlTypeMapping xmlTypeMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Xml.Serialization.XmlTypeMapping)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSerializer(System::Xml::Serialization::XmlTypeMapping ^ xmlTypeMapping);" />
      <MemberSignature Language="F#" Value="new System.Xml.Serialization.XmlSerializer : System.Xml.Serialization.XmlTypeMapping -&gt; System.Xml.Serialization.XmlSerializer" Usage="new System.Xml.Serialization.XmlSerializer xmlTypeMapping" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="xmlTypeMapping" Type="System.Xml.Serialization.XmlTypeMapping" />
      </Parameters>
      <Docs>
        <param name="xmlTypeMapping">
          <span data-ttu-id="b11ea-181">將某個型別對應至另一個型別的 <see cref="T:System.Xml.Serialization.XmlTypeMapping" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-181">An <see cref="T:System.Xml.Serialization.XmlTypeMapping" /> that maps one type to another.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b11ea-182">使用將一個型別對應到另一個型別的物件，初始化 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 類別的執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-182">Initializes an instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class using an object that maps one type to another.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b11ea-183">這個建構函式用來建立<xref:System.Xml.Serialization.XmlSerializer>將物件序列化為 SOAP 訊息。</span><span class="sxs-lookup"><span data-stu-id="b11ea-183">This constructor is used to create an <xref:System.Xml.Serialization.XmlSerializer> when you serialize an object into a SOAP message.</span></span> <span data-ttu-id="b11ea-184">若要控制產生的 SOAP 訊息，請使用 特殊屬性 （"Soap"這個字的開頭） 中找到<xref:System.Xml.Serialization>命名空間。</span><span class="sxs-lookup"><span data-stu-id="b11ea-184">To control the SOAP messages generated, use the special attributes (beginning with the word "Soap") found in the <xref:System.Xml.Serialization> namespace.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b11ea-185">下列範例會序列化類別，名為`Group`。</span><span class="sxs-lookup"><span data-stu-id="b11ea-185">The following example serializes a class named `Group`.</span></span> <span data-ttu-id="b11ea-186">序列化`GroupName`，`IgnoreThis`欄位和成員`GroupType`列舉型別會覆寫。</span><span class="sxs-lookup"><span data-stu-id="b11ea-186">The serialization of the `GroupName`, `IgnoreThis` fields, and the members of the `GroupType` enumeration are overridden.</span></span> <span data-ttu-id="b11ea-187">在`CreateOverrideSerializer`方法，<xref:System.Xml.Serialization.SoapAttributeOverrides>物件會建立，並針對每個覆寫的成員或列舉型別，則<xref:System.Xml.Serialization.SoapAttributes>物件會透過適當的屬性設定，並加入<xref:System.Xml.Serialization.SoapAttributeOverrides>物件。</span><span class="sxs-lookup"><span data-stu-id="b11ea-187">In the `CreateOverrideSerializer` method, a <xref:System.Xml.Serialization.SoapAttributeOverrides> object is created, and for each overridden member or enumeration, a <xref:System.Xml.Serialization.SoapAttributes> object is created with the appropriate property set and added to the <xref:System.Xml.Serialization.SoapAttributeOverrides> object.</span></span> <span data-ttu-id="b11ea-188"><xref:System.Xml.Serialization.XmlMapping>物件使用建立<xref:System.Xml.Serialization.SoapAttributeOverrides>物件，而且<xref:System.Xml.Serialization.XmlMapping>物件用來建立<xref:System.Xml.Serialization.XmlSerializer>會覆寫預設序列化。</span><span class="sxs-lookup"><span data-stu-id="b11ea-188">An <xref:System.Xml.Serialization.XmlMapping> object is created using the <xref:System.Xml.Serialization.SoapAttributeOverrides> object, and that <xref:System.Xml.Serialization.XmlMapping> object is used to create the <xref:System.Xml.Serialization.XmlSerializer> that overrides the default serialization.</span></span>  
  
 [!code-cpp[SoapAttributesOverrides#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SoapAttributesOverrides/CPP/soapover.cpp#1)]
 [!code-csharp[SoapAttributesOverrides#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SoapAttributesOverrides/CS/soapover.cs#1)]
 [!code-vb[SoapAttributesOverrides#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SoapAttributesOverrides/VB/SoapOver.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSerializer (Type type, string defaultNamespace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type type, string defaultNamespace) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSerializer(Type ^ type, System::String ^ defaultNamespace);" />
      <MemberSignature Language="F#" Value="new System.Xml.Serialization.XmlSerializer : Type * string -&gt; System.Xml.Serialization.XmlSerializer" Usage="new System.Xml.Serialization.XmlSerializer (type, defaultNamespace)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="defaultNamespace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="b11ea-189">這個 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 可序列化的物件型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-189">The type of the object that this <see cref="T:System.Xml.Serialization.XmlSerializer" /> can serialize.</span>
          </span>
        </param>
        <param name="defaultNamespace">
          <span data-ttu-id="b11ea-190">用於所有 XML 項目的預設命名空間。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-190">The default namespace to use for all the XML elements.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b11ea-191">初始化 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 類別的新執行個體，該類別可將指定型別的物件序列化為 XML 文件，並可將 XML 文件還原序列化為指定型別的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-191">Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class that can serialize objects of the specified type into XML documents, and deserialize XML documents into objects of the specified type.</span>
          </span>
          <span data-ttu-id="b11ea-192">指定所有 XML 項目的預設命名空間。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-192">Specifies the default namespace for all the XML elements.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b11ea-193">下列範例會建構<xref:System.Xml.Serialization.XmlSerializer>，將名為物件的序列化`Widget`。</span><span class="sxs-lookup"><span data-stu-id="b11ea-193">The following example constructs an <xref:System.Xml.Serialization.XmlSerializer> that serializes an object named `Widget`.</span></span> <span data-ttu-id="b11ea-194">範例會設定各種屬性的物件，再呼叫<xref:System.Xml.Serialization.XmlSerializer.Serialize%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b11ea-194">The example sets various properties of the object before calling the <xref:System.Xml.Serialization.XmlSerializer.Serialize%2A> method.</span></span>  
  
 [!code-cpp[Classic XmlSerializer.XmlSerializer1 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlSerializer.XmlSerializer1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlSerializer.XmlSerializer1 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlSerializer.XmlSerializer1 Example/CS/source.cs#1)]
 [!code-vb[Classic XmlSerializer.XmlSerializer1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlSerializer.XmlSerializer1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSerializer (Type type, Type[] extraTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type type, class System.Type[] extraTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Type[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSerializer(Type ^ type, cli::array &lt;Type ^&gt; ^ extraTypes);" />
      <MemberSignature Language="F#" Value="new System.Xml.Serialization.XmlSerializer : Type * Type[] -&gt; System.Xml.Serialization.XmlSerializer" Usage="new System.Xml.Serialization.XmlSerializer (type, extraTypes)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="extraTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="b11ea-195">這個 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 可序列化的物件型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-195">The type of the object that this <see cref="T:System.Xml.Serialization.XmlSerializer" /> can serialize.</span>
          </span>
        </param>
        <param name="extraTypes">
          <span data-ttu-id="b11ea-196">要序列化之其他物件型別的 <see cref="T:System.Type" /> 陣列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-196">A <see cref="T:System.Type" /> array of additional object types to serialize.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b11ea-197">初始化 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 類別的新執行個體，該類別可將指定型別的物件序列化為 XML 文件，並可將 XML 文件還原序列化為指定型別的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-197">Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class that can serialize objects of the specified type into XML documents, and deserialize XML documents into object of a specified type.</span>
          </span>
          <span data-ttu-id="b11ea-198">如果屬性或欄位傳回陣列，<paramref name="extraTypes" /> 參數就會指定可插入陣列的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-198">If a property or field returns an array, the <paramref name="extraTypes" /> parameter specifies objects that can be inserted into the array.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b11ea-199">根據預設，如果公用屬性或欄位傳回物件或物件的陣列，也會自動序列化的物件類型。</span><span class="sxs-lookup"><span data-stu-id="b11ea-199">By default, if a public property or field returns an object, or array of objects, the object types are automatically serialized.</span></span> <span data-ttu-id="b11ea-200">不過，如果類別包含的欄位或屬性的傳回型別的陣列<xref:System.Object>，可以插入任何物件，該陣列。</span><span class="sxs-lookup"><span data-stu-id="b11ea-200">However, if a class contains a field or property that returns an array of type <xref:System.Object>, any object can be inserted into that array.</span></span> <span data-ttu-id="b11ea-201">在此情況下，<xref:System.Xml.Serialization.XmlSerializer>預期會插入到的所有可能的物件類型，必須指示<xref:System.Object>陣列。</span><span class="sxs-lookup"><span data-stu-id="b11ea-201">In that case, the <xref:System.Xml.Serialization.XmlSerializer> must be instructed to expect all the possible object types that are inserted into the <xref:System.Object> array.</span></span> <span data-ttu-id="b11ea-202">若要這樣做，請使用`extraTypes`參數來指定額外的物件類型以序列化或還原序列化。</span><span class="sxs-lookup"><span data-stu-id="b11ea-202">To do this, use the `extraTypes` parameter to specify the extra object types to serialize or deserialize.</span></span>  
  
 <span data-ttu-id="b11ea-203">您也可以使用`extraTypes`參數來指定型別衍生自基底類別。</span><span class="sxs-lookup"><span data-stu-id="b11ea-203">You can also use the `extraTypes` parameter to specify types derived from a base class.</span></span> <span data-ttu-id="b11ea-204">例如，假設名為基底類別`Phone`存在，和類別，名為`InternationalPhone`從它衍生。</span><span class="sxs-lookup"><span data-stu-id="b11ea-204">For example, suppose a base class named `Phone` exists, and a class named `InternationalPhone` derives from it.</span></span> <span data-ttu-id="b11ea-205">使用`extraTypes`參數來指定衍生型別。</span><span class="sxs-lookup"><span data-stu-id="b11ea-205">Use the `extraTypes` parameter to specify the derived type as well.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b11ea-206">下列範例將序列化類別，其中包含公用欄位，會傳回物件的陣列執行的個體。</span><span class="sxs-lookup"><span data-stu-id="b11ea-206">The following example serializes an instance of a class that contains a public field that returns an array of objects.</span></span> <span data-ttu-id="b11ea-207">`extraTypes`參數的<xref:System.Xml.Serialization.XmlSerializer>建構函式會指定陣列中的可序列化的物件類型。</span><span class="sxs-lookup"><span data-stu-id="b11ea-207">The `extraTypes` parameter of the <xref:System.Xml.Serialization.XmlSerializer> constructor specifies the types of the objects that can be serialized in the array.</span></span>  
  
 [!code-cpp[Classic XmlSerializer.XmlSerializer3 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlSerializer.XmlSerializer3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlSerializer.XmlSerializer3 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlSerializer.XmlSerializer3 Example/CS/source.cs#1)]
 [!code-vb[Classic XmlSerializer.XmlSerializer3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlSerializer.XmlSerializer3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSerializer (Type type, System.Xml.Serialization.XmlAttributeOverrides overrides);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type type, class System.Xml.Serialization.XmlAttributeOverrides overrides) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSerializer(Type ^ type, System::Xml::Serialization::XmlAttributeOverrides ^ overrides);" />
      <MemberSignature Language="F#" Value="new System.Xml.Serialization.XmlSerializer : Type * System.Xml.Serialization.XmlAttributeOverrides -&gt; System.Xml.Serialization.XmlSerializer" Usage="new System.Xml.Serialization.XmlSerializer (type, overrides)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="overrides" Type="System.Xml.Serialization.XmlAttributeOverrides" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="b11ea-208">要序列化的物件型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-208">The type of the object to serialize.</span>
          </span>
        </param>
        <param name="overrides">
          <span data-ttu-id="b11ea-209">
            <see cref="T:System.Xml.Serialization.XmlAttributeOverrides" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-209">An <see cref="T:System.Xml.Serialization.XmlAttributeOverrides" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b11ea-210">初始化 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 類別的新執行個體，該類別可將指定型別的物件序列化為 XML 文件，並可將 XML 文件還原序列化為指定型別的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-210">Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class that can serialize objects of the specified type into XML documents, and deserialize XML documents into objects of the specified type.</span>
          </span>
          <span data-ttu-id="b11ea-211">每個要序列化的物件本身會包含類別執行個體，這個多載可以其他類別覆寫。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-211">Each object to be serialized can itself contain instances of classes, which this overload can override with other classes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b11ea-212">`overrides`參數可以用來控制欄位和屬性在 XML 中的編碼方式。</span><span class="sxs-lookup"><span data-stu-id="b11ea-212">The `overrides` parameter can be used to control how fields and properties are encoded in XML.</span></span> <span data-ttu-id="b11ea-213">這些設定會覆寫已存在的物件的任何屬性。</span><span class="sxs-lookup"><span data-stu-id="b11ea-213">These settings override any attributes that already exist on the objects.</span></span> <span data-ttu-id="b11ea-214">無法修改原始碼或多個編碼所需的相同的類別時，這非常有用。</span><span class="sxs-lookup"><span data-stu-id="b11ea-214">This can be useful when the source code cannot be modified or multiple encodings are required for the same classes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b11ea-215">下列範例將序列化的類別，定義在 DLL 中，以及若要這樣做，請覆寫在 DLL 中找到的公用成員的執行個體。</span><span class="sxs-lookup"><span data-stu-id="b11ea-215">The following example serializes an instance of a class that is defined in a DLL and to do so, overrides the public members found in the DLL.</span></span>  
  
 [!code-cpp[Classic XmlSerializer.XmlSerializer4 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlSerializer.XmlSerializer4 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlSerializer.XmlSerializer4 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlSerializer.XmlSerializer4 Example/CS/source.cs#1)]
 [!code-vb[Classic XmlSerializer.XmlSerializer4 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlSerializer.XmlSerializer4 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Serialization.XmlAttributeOverrides" />
        <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSerializer (Type type, System.Xml.Serialization.XmlRootAttribute root);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type type, class System.Xml.Serialization.XmlRootAttribute root) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlRootAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSerializer(Type ^ type, System::Xml::Serialization::XmlRootAttribute ^ root);" />
      <MemberSignature Language="F#" Value="new System.Xml.Serialization.XmlSerializer : Type * System.Xml.Serialization.XmlRootAttribute -&gt; System.Xml.Serialization.XmlSerializer" Usage="new System.Xml.Serialization.XmlSerializer (type, root)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="root" Type="System.Xml.Serialization.XmlRootAttribute" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="b11ea-216">這個 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 可序列化的物件型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-216">The type of the object that this <see cref="T:System.Xml.Serialization.XmlSerializer" /> can serialize.</span>
          </span>
        </param>
        <param name="root">
          <span data-ttu-id="b11ea-217">表示 XML 根項目的 <see cref="T:System.Xml.Serialization.XmlRootAttribute" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-217">An <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> that represents the XML root element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b11ea-218">初始化 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 類別的新執行個體，該類別可將指定型別的物件序列化為 XML 文件，並可將 XML 文件還原序列化為指定型別的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-218">Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class that can serialize objects of the specified type into XML documents, and deserialize an XML document into object of the specified type.</span>
          </span>
          <span data-ttu-id="b11ea-219">它還指定做為 XML 根項目的類別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-219">It also specifies the class to use as the XML root element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b11ea-220">XML 文件根元素會括住所有其他項目。</span><span class="sxs-lookup"><span data-stu-id="b11ea-220">The root element of an XML document encloses all the other elements.</span></span> <span data-ttu-id="b11ea-221">根據預設，該物件指定`type`參數序列化為根項目。</span><span class="sxs-lookup"><span data-stu-id="b11ea-221">By default, the object specified by the `type` parameter is serialized as the root element.</span></span> <span data-ttu-id="b11ea-222">屬性，例如 XML 項目名稱的根項目，取自`type`物件。</span><span class="sxs-lookup"><span data-stu-id="b11ea-222">Properties, such as the XML element name of the root element, are taken from the `type` object.</span></span> <span data-ttu-id="b11ea-223">不過，`root`參數可讓您藉由指定取代預設的物件資訊<xref:System.Xml.Serialization.XmlRootAttribute>; 物件可讓您設定不同的命名空間、 項目名稱等等。</span><span class="sxs-lookup"><span data-stu-id="b11ea-223">However, the `root` parameter allows you to replace the default object's information by specifying an <xref:System.Xml.Serialization.XmlRootAttribute>; the object allows you to set a different namespace, element name, and so on.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b11ea-224">下列範例會建構<xref:System.Xml.Serialization.XmlSerializer>使用<xref:System.Xml.Serialization.XmlRootAttribute>，其中包含各種屬性的 XML 根項目，例如命名空間和項目名稱。</span><span class="sxs-lookup"><span data-stu-id="b11ea-224">The following example constructs an <xref:System.Xml.Serialization.XmlSerializer> that uses an <xref:System.Xml.Serialization.XmlRootAttribute> that contains various properties of the XML root element, such as its namespace and element name.</span></span>  
  
 [!code-cpp[Classic XmlSerializer.XmlSerializer2 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlSerializer.XmlSerializer2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlSerializer.XmlSerializer2 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlSerializer.XmlSerializer2 Example/CS/source.cs#1)]
 [!code-vb[Classic XmlSerializer.XmlSerializer2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlSerializer.XmlSerializer2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSerializer (Type type, System.Xml.Serialization.XmlAttributeOverrides overrides, Type[] extraTypes, System.Xml.Serialization.XmlRootAttribute root, string defaultNamespace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type type, class System.Xml.Serialization.XmlAttributeOverrides overrides, class System.Type[] extraTypes, class System.Xml.Serialization.XmlRootAttribute root, string defaultNamespace) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSerializer(Type ^ type, System::Xml::Serialization::XmlAttributeOverrides ^ overrides, cli::array &lt;Type ^&gt; ^ extraTypes, System::Xml::Serialization::XmlRootAttribute ^ root, System::String ^ defaultNamespace);" />
      <MemberSignature Language="F#" Value="new System.Xml.Serialization.XmlSerializer : Type * System.Xml.Serialization.XmlAttributeOverrides * Type[] * System.Xml.Serialization.XmlRootAttribute * string -&gt; System.Xml.Serialization.XmlSerializer" Usage="new System.Xml.Serialization.XmlSerializer (type, overrides, extraTypes, root, defaultNamespace)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="overrides" Type="System.Xml.Serialization.XmlAttributeOverrides" />
        <Parameter Name="extraTypes" Type="System.Type[]" />
        <Parameter Name="root" Type="System.Xml.Serialization.XmlRootAttribute" />
        <Parameter Name="defaultNamespace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="b11ea-225">這個 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 可序列化的物件型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-225">The type of the object that this <see cref="T:System.Xml.Serialization.XmlSerializer" /> can serialize.</span>
          </span>
        </param>
        <param name="overrides">
          <span data-ttu-id="b11ea-226">
            <see cref="T:System.Xml.Serialization.XmlAttributeOverrides" />，可延伸或覆寫在 <c>type</c> 參數中指定的類別行為。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-226">An <see cref="T:System.Xml.Serialization.XmlAttributeOverrides" /> that extends or overrides the behavior of the class specified in the <c>type</c> parameter.</span>
          </span>
        </param>
        <param name="extraTypes">
          <span data-ttu-id="b11ea-227">要序列化之其他物件型別的 <see cref="T:System.Type" /> 陣列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-227">A <see cref="T:System.Type" /> array of additional object types to serialize.</span>
          </span>
        </param>
        <param name="root">
          <span data-ttu-id="b11ea-228">定義 XML 根項目屬性的 <see cref="T:System.Xml.Serialization.XmlRootAttribute" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-228">An <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> that defines the XML root element properties.</span>
          </span>
        </param>
        <param name="defaultNamespace">
          <span data-ttu-id="b11ea-229">XML 文件中所有 XML 項目的預設命名空間。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-229">The default namespace of all XML elements in the XML document.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b11ea-230">初始化 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 類別的新執行個體，該類別可將 <see cref="T:System.Object" /> 型別的物件序列化為 XML 文件執行個體，並可將 XML 文件執行個體還原序列化為 <see cref="T:System.Object" /> 型別的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-230">Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class that can serialize objects of type <see cref="T:System.Object" /> into XML document instances, and deserialize XML document instances into objects of type <see cref="T:System.Object" />.</span>
          </span>
          <span data-ttu-id="b11ea-231">每個要序列化的物件本身都可包含類別的執行個體，這個多載會使用其他類別對其進行覆寫。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-231">Each object to be serialized can itself contain instances of classes, which this overload overrides with other classes.</span>
          </span>
          <span data-ttu-id="b11ea-232">這個多載也會指定所有 XML 項目的預設命名空間，以及要做為 XML 根項目的類別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-232">This overload also specifies the default namespace for all the XML elements and the class to use as the XML root element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b11ea-233">`overrides`參數可讓您建立的 [XmlSerializer 建構函式 (類型、 XmlAttributeOverrides，類型\<xref:System.Xml.Serialization.XmlSerializer > 可序列化的類別，延伸或覆寫行為基底類別。</span><span class="sxs-lookup"><span data-stu-id="b11ea-233">The `overrides` parameter allows for the creation of an [XmlSerializer Constructor (Type, XmlAttributeOverrides, Type\<xref:System.Xml.Serialization.XmlSerializer> that serializes a class that extends or overrides the behavior of a base class.</span></span> <span data-ttu-id="b11ea-234">比方說，假設 DLL，就可以建立一個類別，繼承或延伸 DLL 中包含的類別。</span><span class="sxs-lookup"><span data-stu-id="b11ea-234">For example, given a DLL, it is possible to create a class that inherits or extends a class contained in the DLL.</span></span> <span data-ttu-id="b11ea-235">若要序列化這種類別，您必須使用的執行個體 [XmlSerializer 建構函式 (類型、 XmlAttributeOverrides，類型\<xref:System.Xml.Serialization.XmlAttributeOverrides > 類別 [XmlSerializer 建構函式 （在建構時型別，XmlAttributeOverrides，型別\<xref:System.Xml.Serialization.XmlSerializer >。</span><span class="sxs-lookup"><span data-stu-id="b11ea-235">To serialize such a class, you must use an instance of the [XmlSerializer Constructor (Type, XmlAttributeOverrides, Type\<xref:System.Xml.Serialization.XmlAttributeOverrides> class when constructing the [XmlSerializer Constructor (Type, XmlAttributeOverrides, Type\<xref:System.Xml.Serialization.XmlSerializer>.</span></span> <span data-ttu-id="b11ea-236">如需詳細資訊，請參閱 [XmlSerializer 建構函式 (類型、 XmlAttributeOverrides，類型\<xref:System.Xml.Serialization.XmlAttributeOverrides >。</span><span class="sxs-lookup"><span data-stu-id="b11ea-236">For more details, see [XmlSerializer Constructor (Type, XmlAttributeOverrides, Type\<xref:System.Xml.Serialization.XmlAttributeOverrides>.</span></span>  
  
 <span data-ttu-id="b11ea-237">根據預設，如果公用屬性或欄位傳回物件或物件的陣列，也會自動序列化的物件類型。</span><span class="sxs-lookup"><span data-stu-id="b11ea-237">By default, if a public property or field returns an object, or array of objects, the object types are automatically serialized.</span></span> <span data-ttu-id="b11ea-238">不過，如果類別包含的欄位或屬性的傳回類型的陣列 [XmlSerializer 建構函式 (類型、 XmlAttributeOverrides，類型\<system.object> >，可以插入任何物件，該陣列。</span><span class="sxs-lookup"><span data-stu-id="b11ea-238">However, if a class contains a field or property that returns an array of type [XmlSerializer Constructor (Type, XmlAttributeOverrides, Type\<xref:System.Object>, any object can be inserted into that array.</span></span> <span data-ttu-id="b11ea-239">在此情況下，[XmlSerializer 建構函式 (類型、 XmlAttributeOverrides，類型\<xref:System.Xml.Serialization.XmlSerializer > 預期會插入到 [XmlSerializer 的所有可能的物件類型，必須指示建構函式 (類型、 XmlAttributeOverrides，類型\<system.object> > 陣列。</span><span class="sxs-lookup"><span data-stu-id="b11ea-239">In that case, the [XmlSerializer Constructor (Type, XmlAttributeOverrides, Type\<xref:System.Xml.Serialization.XmlSerializer> must be instructed to expect all the possible object types that are inserted into the [XmlSerializer Constructor (Type, XmlAttributeOverrides, Type\<xref:System.Object> array.</span></span> <span data-ttu-id="b11ea-240">若要這樣做，請使用`extraTypes`參數來指定額外的物件類型以序列化或還原序列化。</span><span class="sxs-lookup"><span data-stu-id="b11ea-240">To do this, use the `extraTypes` parameter to specify the extra object types to serialize or deserialize.</span></span>  
  
 <span data-ttu-id="b11ea-241">XML 文件根元素會括住所有其他項目。</span><span class="sxs-lookup"><span data-stu-id="b11ea-241">The root element of an XML document encloses all the other elements.</span></span> <span data-ttu-id="b11ea-242">根據預設，該物件指定`type`參數序列化為根項目。</span><span class="sxs-lookup"><span data-stu-id="b11ea-242">By default, the object specified by the `type` parameter is serialized as the root element.</span></span> <span data-ttu-id="b11ea-243">屬性，例如根項目的 XML 項目名稱取自`type`物件。</span><span class="sxs-lookup"><span data-stu-id="b11ea-243">Properties, such as the XML element name of the root element are taken from the `type` object.</span></span> <span data-ttu-id="b11ea-244">不過，`root`參數可讓您藉由指定取代預設物件的資訊 [XmlSerializer 建構函式 (類型、 XmlAttributeOverrides，類型\<xref:System.Xml.Serialization.XmlRootAttribute >;物件可讓您設定不同的命名空間、 項目名稱等等。</span><span class="sxs-lookup"><span data-stu-id="b11ea-244">However, the `root` parameter allows you to replace the default object's information by specifying an [XmlSerializer Constructor (Type, XmlAttributeOverrides, Type\<xref:System.Xml.Serialization.XmlRootAttribute>; the object allows you to set a different namespace, element name, and so on.</span></span>  
  
 <span data-ttu-id="b11ea-245">使用`defaultName`參數來指定所產生的所有 XML 項目的預設命名空間 [XmlSerializer 建構函式 (類型、 XmlAttributeOverrides，類型\<xref:System.Xml.Serialization.XmlSerializer >。</span><span class="sxs-lookup"><span data-stu-id="b11ea-245">Use the `defaultName` parameter to specify the default namespace of all XML elements generated by the [XmlSerializer Constructor (Type, XmlAttributeOverrides, Type\<xref:System.Xml.Serialization.XmlSerializer>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b11ea-246">下列範例將序列化的類別，定義在 DLL 中，以及若要這樣做，請覆寫在類別中找到的公用成員的執行個體。</span><span class="sxs-lookup"><span data-stu-id="b11ea-246">The following example serializes an instance of a class that is defined in a DLL and to do so, overrides the public members found in the class.</span></span> <span data-ttu-id="b11ea-247">此範例也指定額外的類型、 所有的 XML 項目，並使用提供的 XML 根項目資訊類別的預設命名空間陣列。</span><span class="sxs-lookup"><span data-stu-id="b11ea-247">The example also specifies an array of extra types, the default namespace for all XML elements, and the class to use that provides the XML root element information.</span></span> <span data-ttu-id="b11ea-248">此範例假設，開頭的程式碼編譯成 DLL，名為`HighSchool`。</span><span class="sxs-lookup"><span data-stu-id="b11ea-248">The example assumes that the code at the beginning has been compiled into a DLL named `HighSchool`.</span></span>  
  
 [!code-cpp[Classic XmlSerializer.XmlSerializer Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlSerializer.XmlSerializer Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlSerializer.XmlSerializer Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlSerializer.XmlSerializer Example/CS/source.cs#1)]
 [!code-vb[Classic XmlSerializer.XmlSerializer Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlSerializer.XmlSerializer Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Serialization.XmlAttributeOverrides" />
        <altmember cref="T:System.Xml.Serialization.XmlRootAttribute" />
        <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSerializer (Type type, System.Xml.Serialization.XmlAttributeOverrides overrides, Type[] extraTypes, System.Xml.Serialization.XmlRootAttribute root, string defaultNamespace, string location);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type type, class System.Xml.Serialization.XmlAttributeOverrides overrides, class System.Type[] extraTypes, class System.Xml.Serialization.XmlRootAttribute root, string defaultNamespace, string location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSerializer(Type ^ type, System::Xml::Serialization::XmlAttributeOverrides ^ overrides, cli::array &lt;Type ^&gt; ^ extraTypes, System::Xml::Serialization::XmlRootAttribute ^ root, System::String ^ defaultNamespace, System::String ^ location);" />
      <MemberSignature Language="F#" Value="new System.Xml.Serialization.XmlSerializer : Type * System.Xml.Serialization.XmlAttributeOverrides * Type[] * System.Xml.Serialization.XmlRootAttribute * string * string -&gt; System.Xml.Serialization.XmlSerializer" Usage="new System.Xml.Serialization.XmlSerializer (type, overrides, extraTypes, root, defaultNamespace, location)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="overrides" Type="System.Xml.Serialization.XmlAttributeOverrides" />
        <Parameter Name="extraTypes" Type="System.Type[]" />
        <Parameter Name="root" Type="System.Xml.Serialization.XmlRootAttribute" />
        <Parameter Name="defaultNamespace" Type="System.String" />
        <Parameter Name="location" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="b11ea-249">這個 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 可序列化的物件型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-249">The type of the object that this <see cref="T:System.Xml.Serialization.XmlSerializer" /> can serialize.</span>
          </span>
        </param>
        <param name="overrides">
          <span data-ttu-id="b11ea-250">
            <see cref="T:System.Xml.Serialization.XmlAttributeOverrides" />，可延伸或覆寫在 <c>type</c> 參數中指定的類別行為。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-250">An <see cref="T:System.Xml.Serialization.XmlAttributeOverrides" /> that extends or overrides the behavior of the class specified in the <c>type</c> parameter.</span>
          </span>
        </param>
        <param name="extraTypes">
          <span data-ttu-id="b11ea-251">要序列化之其他物件型別的 <see cref="T:System.Type" /> 陣列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-251">A <see cref="T:System.Type" /> array of additional object types to serialize.</span>
          </span>
        </param>
        <param name="root">
          <span data-ttu-id="b11ea-252">定義 XML 根項目屬性的 <see cref="T:System.Xml.Serialization.XmlRootAttribute" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-252">An <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> that defines the XML root element properties.</span>
          </span>
        </param>
        <param name="defaultNamespace">
          <span data-ttu-id="b11ea-253">XML 文件中所有 XML 項目的預設命名空間。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-253">The default namespace of all XML elements in the XML document.</span>
          </span>
        </param>
        <param name="location">
          <span data-ttu-id="b11ea-254">型別的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-254">The location of the types.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b11ea-255">初始化 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 類別的新執行個體，該類別可將 <see cref="T:System.Object" /> 型別的物件序列化為 XML 文件執行個體，並可將 XML 文件執行個體還原序列化為 <see cref="T:System.Object" /> 型別的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-255">Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class that can serialize objects of type <see cref="T:System.Object" /> into XML document instances, and deserialize XML document instances into objects of type <see cref="T:System.Object" />.</span>
          </span>
          <span data-ttu-id="b11ea-256">每個要序列化的物件本身都可包含類別的執行個體，這個多載會使用其他類別對其進行覆寫。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-256">Each object to be serialized can itself contain instances of classes, which this overload overrides with other classes.</span>
          </span>
          <span data-ttu-id="b11ea-257">這個多載也會指定所有 XML 項目的預設命名空間，以及要做為 XML 根項目的類別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-257">This overload also specifies the default namespace for all the XML elements and the class to use as the XML root element.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSerializer (Type type, System.Xml.Serialization.XmlAttributeOverrides overrides, Type[] extraTypes, System.Xml.Serialization.XmlRootAttribute root, string defaultNamespace, string location, System.Security.Policy.Evidence evidence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type type, class System.Xml.Serialization.XmlAttributeOverrides overrides, class System.Type[] extraTypes, class System.Xml.Serialization.XmlRootAttribute root, string defaultNamespace, string location, class System.Security.Policy.Evidence evidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String,System.String,System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSerializer(Type ^ type, System::Xml::Serialization::XmlAttributeOverrides ^ overrides, cli::array &lt;Type ^&gt; ^ extraTypes, System::Xml::Serialization::XmlRootAttribute ^ root, System::String ^ defaultNamespace, System::String ^ location, System::Security::Policy::Evidence ^ evidence);" />
      <MemberSignature Language="F#" Value="new System.Xml.Serialization.XmlSerializer : Type * System.Xml.Serialization.XmlAttributeOverrides * Type[] * System.Xml.Serialization.XmlRootAttribute * string * string * System.Security.Policy.Evidence -&gt; System.Xml.Serialization.XmlSerializer" Usage="new System.Xml.Serialization.XmlSerializer (type, overrides, extraTypes, root, defaultNamespace, location, evidence)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0">
          <AttributeName>System.Obsolete("This method is obsolete and will be removed in a future release of the .NET Framework. Please use a XmlSerializer constructor overload which does not take an Evidence parameter. See http://go2.microsoft.com/fwlink/?LinkId=131738 for more information.")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="overrides" Type="System.Xml.Serialization.XmlAttributeOverrides" />
        <Parameter Name="extraTypes" Type="System.Type[]" />
        <Parameter Name="root" Type="System.Xml.Serialization.XmlRootAttribute" />
        <Parameter Name="defaultNamespace" Type="System.String" />
        <Parameter Name="location" Type="System.String" />
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="b11ea-258">這個 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 可序列化的物件型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-258">The type of the object that this <see cref="T:System.Xml.Serialization.XmlSerializer" /> can serialize.</span>
          </span>
        </param>
        <param name="overrides">
          <span data-ttu-id="b11ea-259">
            <see cref="T:System.Xml.Serialization.XmlAttributeOverrides" />，可延伸或覆寫在 <c>type</c> 參數中指定的類別行為。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-259">An <see cref="T:System.Xml.Serialization.XmlAttributeOverrides" /> that extends or overrides the behavior of the class specified in the <c>type</c> parameter.</span>
          </span>
        </param>
        <param name="extraTypes">
          <span data-ttu-id="b11ea-260">要序列化之其他物件型別的 <see cref="T:System.Type" /> 陣列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-260">A <see cref="T:System.Type" /> array of additional object types to serialize.</span>
          </span>
        </param>
        <param name="root">
          <span data-ttu-id="b11ea-261">定義 XML 根項目屬性的 <see cref="T:System.Xml.Serialization.XmlRootAttribute" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-261">An <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> that defines the XML root element properties.</span>
          </span>
        </param>
        <param name="defaultNamespace">
          <span data-ttu-id="b11ea-262">XML 文件中所有 XML 項目的預設命名空間。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-262">The default namespace of all XML elements in the XML document.</span>
          </span>
        </param>
        <param name="location">
          <span data-ttu-id="b11ea-263">型別的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-263">The location of the types.</span>
          </span>
        </param>
        <param name="evidence">
          <span data-ttu-id="b11ea-264">
            <see cref="T:System.Security.Policy.Evidence" /> 類別的執行個體，包含存取型別所需的認證。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-264">An instance of the <see cref="T:System.Security.Policy.Evidence" /> class that contains credentials required to access types.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b11ea-265">初始化 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 類別的新執行個體，該類別可將指定型別的物件序列化為 XML 文件執行個體，並可將 XML 文件執行個體還原序列化為指定型別的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-265">Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class that can serialize objects of the specified type into XML document instances, and deserialize XML document instances into objects of the specified type.</span>
          </span>
          <span data-ttu-id="b11ea-266">這個多載可讓您提供序列化或還原序列化作業期間遇到的其他型別，以及所有 XML 項目的預設命名空間、用做 XML 根項目的類別及其位置，和存取所需的認證。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-266">This overload allows you to supply other types that can be encountered during a serialization or deserialization operation, as well as a default namespace for all XML elements, the class to use as the XML root element, its location, and credentials required for access.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b11ea-267">可讓您更精確地控制對暫存目錄的存取，並防止程式碼資料隱碼攻擊和弱點攻擊。</span><span class="sxs-lookup"><span data-stu-id="b11ea-267">Allows more precise control over access to a temporary directory and prevents code injection and exploitation.</span></span> <span data-ttu-id="b11ea-268">若要使用這個方法，指定的位置，並只讓特定使用者存取。</span><span class="sxs-lookup"><span data-stu-id="b11ea-268">To use this method, specify a location and give access only to specific users.</span></span> <span data-ttu-id="b11ea-269">系統管理員可以設定原則以符合辨識項的權限的辨識項清單。</span><span class="sxs-lookup"><span data-stu-id="b11ea-269">Administrators can set up policies with evidence lists that match evidence to permissions.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanDeserialize">
      <MemberSignature Language="C#" Value="public virtual bool CanDeserialize (System.Xml.XmlReader xmlReader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanDeserialize(class System.Xml.XmlReader xmlReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.CanDeserialize(System.Xml.XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanDeserialize(System::Xml::XmlReader ^ xmlReader);" />
      <MemberSignature Language="F#" Value="abstract member CanDeserialize : System.Xml.XmlReader -&gt; bool&#xA;override this.CanDeserialize : System.Xml.XmlReader -&gt; bool" Usage="xmlSerializer.CanDeserialize xmlReader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlReader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="xmlReader">
          <span data-ttu-id="b11ea-270">
            <see cref="T:System.Xml.XmlReader" />，指向要還原序列化的文件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-270">An <see cref="T:System.Xml.XmlReader" /> that points to the document to deserialize.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b11ea-271">取得值，指出這個 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 是否可以還原序列化指定的 XML 文件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-271">Gets a value that indicates whether this <see cref="T:System.Xml.Serialization.XmlSerializer" /> can deserialize a specified XML document.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b11ea-272">如果這個 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 可以還原序列化 <see cref="T:System.Xml.XmlReader" /> 所指向的物件，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-272">
              <see langword="true" /> if this <see cref="T:System.Xml.Serialization.XmlSerializer" /> can deserialize the object that the <see cref="T:System.Xml.XmlReader" /> points to; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b11ea-273">下列範例會呼叫<xref:System.Xml.Serialization.XmlSerializer.CanDeserialize%2A>方法來檢查是否可以還原序列化的 XML 文件。</span><span class="sxs-lookup"><span data-stu-id="b11ea-273">The following example calls the <xref:System.Xml.Serialization.XmlSerializer.CanDeserialize%2A> method to check whether an XML document can be deserialized.</span></span>  
  
 [!code-cpp[Classic XmlSerializer.CanDeserialize Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlSerializer.CanDeserialize Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlSerializer.CanDeserialize Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlSerializer.CanDeserialize Example/CS/source.cs#1)]
 [!code-vb[Classic XmlSerializer.CanDeserialize Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlSerializer.CanDeserialize Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)" />
      </Docs>
    </Member>
    <Member MemberName="CreateReader">
      <MemberSignature Language="C#" Value="protected virtual System.Xml.Serialization.XmlSerializationReader CreateReader ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xml.Serialization.XmlSerializationReader CreateReader() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.CreateReader" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateReader () As XmlSerializationReader" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xml::Serialization::XmlSerializationReader ^ CreateReader();" />
      <MemberSignature Language="F#" Value="abstract member CreateReader : unit -&gt; System.Xml.Serialization.XmlSerializationReader&#xA;override this.CreateReader : unit -&gt; System.Xml.Serialization.XmlSerializationReader" Usage="xmlSerializer.CreateReader " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlSerializationReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b11ea-274">傳回物件，該物件用於讀取要序列化的 XML 文件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-274">Returns an object used to read the XML document to be serialized.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b11ea-275">
            <see cref="T:System.Xml.Serialization.XmlSerializationReader" />，用於讀取 XML 文件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-275">An <see cref="T:System.Xml.Serialization.XmlSerializationReader" /> used to read the XML document.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="b11ea-276">當方法在子代類別中未覆寫時，會嘗試存取該方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-276">Any attempt is made to access the method when the method is not overridden in a descendant class.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateWriter">
      <MemberSignature Language="C#" Value="protected virtual System.Xml.Serialization.XmlSerializationWriter CreateWriter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xml.Serialization.XmlSerializationWriter CreateWriter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.CreateWriter" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateWriter () As XmlSerializationWriter" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xml::Serialization::XmlSerializationWriter ^ CreateWriter();" />
      <MemberSignature Language="F#" Value="abstract member CreateWriter : unit -&gt; System.Xml.Serialization.XmlSerializationWriter&#xA;override this.CreateWriter : unit -&gt; System.Xml.Serialization.XmlSerializationWriter" Usage="xmlSerializer.CreateWriter " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlSerializationWriter</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b11ea-277">在衍生類別中覆寫時，傳回用於序列化物件的寫入器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-277">When overridden in a derived class, returns a writer used to serialize the object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b11ea-278">實作 <see cref="T:System.Xml.Serialization.XmlSerializationWriter" /> 類別的執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-278">An instance that implements the <see cref="T:System.Xml.Serialization.XmlSerializationWriter" /> class.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="b11ea-279">當方法在子代類別中未覆寫時，會嘗試存取該方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-279">Any attempt is made to access the method when the method is not overridden in a descendant class.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Deserialize">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b11ea-280">將 XML 文件還原序列化。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-280">Deserializes an XML document.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public object Deserialize (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Deserialize(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Deserialize(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="member this.Deserialize : System.IO.Stream -&gt; obj" Usage="xmlSerializer.Deserialize stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="b11ea-281">
            <see cref="T:System.IO.Stream" />，包含要還原序列化的 XML 文件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-281">The <see cref="T:System.IO.Stream" /> that contains the XML document to deserialize.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b11ea-282">還原序列化指定 <see cref="T:System.IO.Stream" /> 所包含的 XML 文件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-282">Deserializes the XML document contained by the specified <see cref="T:System.IO.Stream" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b11ea-283">要進行還原序列化的 <see cref="T:System.Object" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-283">The <see cref="T:System.Object" /> being deserialized.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b11ea-284">還原序列化是讀取 XML 文件，並建構物件，強型別為 XML 結構描述 (XSD) 文件的程序。</span><span class="sxs-lookup"><span data-stu-id="b11ea-284">Deserialization is the process of reading an XML document and constructing an object that is strongly typed to the XML Schema (XSD) of the document.</span></span>  
  
 <span data-ttu-id="b11ea-285">之前還原序列化，<xref:System.Xml.Serialization.XmlSerializer>必須使用正在還原序列化的物件型別來建構。</span><span class="sxs-lookup"><span data-stu-id="b11ea-285">Before deserializing, an <xref:System.Xml.Serialization.XmlSerializer> must be constructed using the type of the object that is being deserialized.</span></span>  
  
 <span data-ttu-id="b11ea-286">使用`stream`參數來指定物件衍生自<xref:System.IO.Stream>類別，其設計目的是要寫入資料流。</span><span class="sxs-lookup"><span data-stu-id="b11ea-286">Use the `stream` parameter to specify an object that derives from the <xref:System.IO.Stream> class, which is designed to write to streams.</span></span> <span data-ttu-id="b11ea-287">衍生自類別<xref:System.IO.Stream>類別包括：</span><span class="sxs-lookup"><span data-stu-id="b11ea-287">Classes that derive from the <xref:System.IO.Stream> class include:</span></span>  
  
-   <xref:System.IO.BufferedStream>  
  
-   <xref:System.IO.FileStream>  
  
-   <xref:System.IO.MemoryStream>  
  
-   <xref:System.Net.Sockets.NetworkStream>  
  
-   <xref:System.Security.Cryptography.CryptoStream>  
  
> [!NOTE]
>  <span data-ttu-id="b11ea-288"><xref:System.Xml.Serialization.XmlSerializer>無法還原序列化下列： 陣列<xref:System.Collections.ArrayList>和陣列<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="b11ea-288">The <xref:System.Xml.Serialization.XmlSerializer> cannot deserialize the following: arrays of <xref:System.Collections.ArrayList> and arrays of <xref:System.Collections.Generic.List%601>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b11ea-289">下列範例會還原序列化的物件使用<xref:System.IO.Stream>物件。</span><span class="sxs-lookup"><span data-stu-id="b11ea-289">The following example deserializes an object using a <xref:System.IO.Stream> object.</span></span>  
  
 [!code-cpp[Classic XmlSerializer.Deserialize Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlSerializer.Deserialize Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlSerializer.Deserialize Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlSerializer.Deserialize Example/CS/source.cs#1)]
 [!code-vb[Classic XmlSerializer.Deserialize Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlSerializer.Deserialize Example/VB/source.vb#1)]
 [!code-xml[Classic XmlSerializer.Deserialize Example#1](~/samples/snippets/common/VS_Snippets_Remoting/Classic XmlSerializer.Deserialize Example/Common/simple.xml#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
        <altmember cref="M:System.Xml.Serialization.XmlSerializer.CanDeserialize(System.Xml.XmlReader)" />
        <altmember cref="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public object Deserialize (System.IO.TextReader textReader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Deserialize(class System.IO.TextReader textReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Deserialize(System::IO::TextReader ^ textReader);" />
      <MemberSignature Language="F#" Value="member this.Deserialize : System.IO.TextReader -&gt; obj" Usage="xmlSerializer.Deserialize textReader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textReader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="textReader">
          <span data-ttu-id="b11ea-290">
            <see cref="T:System.IO.TextReader" />，包含要還原序列化的 XML 文件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-290">The <see cref="T:System.IO.TextReader" /> that contains the XML document to deserialize.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b11ea-291">還原序列化指定 <see cref="T:System.IO.TextReader" /> 所包含的 XML 文件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-291">Deserializes the XML document contained by the specified <see cref="T:System.IO.TextReader" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b11ea-292">要進行還原序列化的 <see cref="T:System.Object" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-292">The <see cref="T:System.Object" /> being deserialized.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b11ea-293">還原序列化是讀取 XML 文件的執行個體，並建構物件，強型別為 XML 結構描述 (XSD) 文件的程序。</span><span class="sxs-lookup"><span data-stu-id="b11ea-293">Deserialization is the process of reading an instance of an XML document and constructing an object that is strongly typed to the XML Schema (XSD) of the document.</span></span>  
  
 <span data-ttu-id="b11ea-294">之前還原序列化，<xref:System.Xml.Serialization.XmlSerializer>必須使用正在還原序列化的物件型別來建構。</span><span class="sxs-lookup"><span data-stu-id="b11ea-294">Before deserializing, an <xref:System.Xml.Serialization.XmlSerializer> must be constructed using the type of the object that is being deserialized.</span></span>  
  
 <span data-ttu-id="b11ea-295">繼承自類別<xref:System.IO.TextReader>包括<xref:System.IO.StringReader>和<xref:System.IO.StreamReader>。</span><span class="sxs-lookup"><span data-stu-id="b11ea-295">Classes that inherit from <xref:System.IO.TextReader> include <xref:System.IO.StringReader> and <xref:System.IO.StreamReader>.</span></span> <span data-ttu-id="b11ea-296">如果您使用<xref:System.IO.StreamReader>將物件還原序列化，您必須建構<xref:System.IO.StreamReader>適當<xref:System.Text.Encoding>。</span><span class="sxs-lookup"><span data-stu-id="b11ea-296">If you are using a <xref:System.IO.StreamReader> to deserialize an object, you must construct the <xref:System.IO.StreamReader> with an appropriate <xref:System.Text.Encoding>.</span></span> <span data-ttu-id="b11ea-297">指定 XML 文件的編碼會被忽略。</span><span class="sxs-lookup"><span data-stu-id="b11ea-297">The encoding specified by the XML document is ignored.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b11ea-298">若要使用的 XML 文件所指定的編碼方式，使用<xref:System.Xml.Serialization.XmlSerializer.Deserialize%2A>多載，<xref:System.Xml.XmlReader>改。</span><span class="sxs-lookup"><span data-stu-id="b11ea-298">To use the encoding specified by the XML document, use the <xref:System.Xml.Serialization.XmlSerializer.Deserialize%2A> overload that takes an <xref:System.Xml.XmlReader> instead.</span></span> <span data-ttu-id="b11ea-299"><xref:System.Xml.XmlReader>會自動偵測並使用 XML 文件所指定的編碼方式。</span><span class="sxs-lookup"><span data-stu-id="b11ea-299">The <xref:System.Xml.XmlReader> automatically detects and uses the encoding specified by the XML document.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b11ea-300"><xref:System.Xml.Serialization.XmlSerializer>無法還原序列化下列： 陣列<xref:System.Collections.ArrayList>和陣列<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="b11ea-300">The <xref:System.Xml.Serialization.XmlSerializer> cannot deserialize the following: arrays of <xref:System.Collections.ArrayList> and arrays of <xref:System.Collections.Generic.List%601>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b11ea-301">下列範例會還原序列化的物件使用<xref:System.IO.TextReader>物件。</span><span class="sxs-lookup"><span data-stu-id="b11ea-301">The following example deserializes an object using a <xref:System.IO.TextReader> object.</span></span>  
  
 [!code-cpp[Classic XmlSerializer.Deserialize1 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlSerializer.Deserialize1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlSerializer.Deserialize1 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlSerializer.Deserialize1 Example/CS/source.cs#1)]
 [!code-vb[Classic XmlSerializer.Deserialize1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlSerializer.Deserialize1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b11ea-302">在還原序列化期間發生錯誤。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-302">An error occurred during deserialization.</span>
          </span>
          <span data-ttu-id="b11ea-303">可以使用 <see cref="P:System.Exception.InnerException" /> 屬性取得原始例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-303">The original exception is available using the <see cref="P:System.Exception.InnerException" /> property.</span>
          </span>
        </exception>
        <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
        <altmember cref="M:System.Xml.Serialization.XmlSerializer.CanDeserialize(System.Xml.XmlReader)" />
        <altmember cref="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="protected virtual object Deserialize (System.Xml.Serialization.XmlSerializationReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object Deserialize(class System.Xml.Serialization.XmlSerializationReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.Serialization.XmlSerializationReader)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Deserialize (reader As XmlSerializationReader) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Object ^ Deserialize(System::Xml::Serialization::XmlSerializationReader ^ reader);" />
      <MemberSignature Language="F#" Value="abstract member Deserialize : System.Xml.Serialization.XmlSerializationReader -&gt; obj&#xA;override this.Deserialize : System.Xml.Serialization.XmlSerializationReader -&gt; obj" Usage="xmlSerializer.Deserialize reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.Serialization.XmlSerializationReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="b11ea-304">
            <see cref="T:System.Xml.Serialization.XmlSerializationReader" />，包含要還原序列化的 XML 文件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-304">The <see cref="T:System.Xml.Serialization.XmlSerializationReader" /> that contains the XML document to deserialize.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b11ea-305">還原序列化指定 <see cref="T:System.Xml.Serialization.XmlSerializationReader" /> 所包含的 XML 文件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-305">Deserializes the XML document contained by the specified <see cref="T:System.Xml.Serialization.XmlSerializationReader" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b11ea-306">已還原序列化的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-306">The deserialized object.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="b11ea-307">當方法在子代類別中未覆寫時，會嘗試存取該方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-307">Any attempt is made to access the method when the method is not overridden in a descendant class.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public object Deserialize (System.Xml.XmlReader xmlReader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Deserialize(class System.Xml.XmlReader xmlReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Deserialize(System::Xml::XmlReader ^ xmlReader);" />
      <MemberSignature Language="F#" Value="member this.Deserialize : System.Xml.XmlReader -&gt; obj" Usage="xmlSerializer.Deserialize xmlReader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlReader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="xmlReader">
          <span data-ttu-id="b11ea-308">
            <see cref="T:System.Xml.XmlReader" />，包含要還原序列化的 XML 文件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-308">The <see cref="T:System.Xml.XmlReader" /> that contains the XML document to deserialize.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b11ea-309">還原序列化指定 <see cref="T:System.Xml.XmlReader" /> 所包含的 XML 文件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-309">Deserializes the XML document contained by the specified <see cref="T:System.Xml.XmlReader" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b11ea-310">要進行還原序列化的 <see cref="T:System.Object" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-310">The <see cref="T:System.Object" /> being deserialized.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b11ea-311">還原序列化是讀取 XML 文件的執行個體，並建構物件，強型別為 XML 結構描述 (XSD) 文件的程序。</span><span class="sxs-lookup"><span data-stu-id="b11ea-311">Deserialization is the process of reading an instance of an XML document and constructing an object that is strongly typed to the XML Schema (XSD) of the document.</span></span>  
  
 <span data-ttu-id="b11ea-312">之前還原序列化，<xref:System.Xml.Serialization.XmlSerializer>必須使用正在還原序列化的物件型別來建構。</span><span class="sxs-lookup"><span data-stu-id="b11ea-312">Before deserializing, an <xref:System.Xml.Serialization.XmlSerializer> must be constructed using the type of the object that is being deserialized.</span></span>  
  
 <span data-ttu-id="b11ea-313"><xref:System.Xml.XmlReader>會自動偵測並使用 XML 文件所指定的編碼方式。</span><span class="sxs-lookup"><span data-stu-id="b11ea-313">The <xref:System.Xml.XmlReader> automatically detects and uses the encoding specified by the XML document.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b11ea-314"><xref:System.Xml.Serialization.XmlSerializer>無法還原序列化下列： 陣列<xref:System.Collections.ArrayList>和陣列<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="b11ea-314">The <xref:System.Xml.Serialization.XmlSerializer> cannot deserialize the following: arrays of <xref:System.Collections.ArrayList> and arrays of <xref:System.Collections.Generic.List%601>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b11ea-315">下列範例會還原序列化的物件使用<xref:System.Xml.XmlReader>。</span><span class="sxs-lookup"><span data-stu-id="b11ea-315">The following example deserializes an object using an <xref:System.Xml.XmlReader>.</span></span>  
  
 [!code-cpp[Classic XmlSerializer.Deserialize2 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlSerializer.Deserialize2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlSerializer.Deserialize2 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlSerializer.Deserialize2 Example/CS/source.cs#1)]
 [!code-vb[Classic XmlSerializer.Deserialize2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlSerializer.Deserialize2 Example/VB/source.vb#1)]
 [!code-xml[Classic XmlSerializer.Deserialize2 Example#1](~/samples/snippets/common/VS_Snippets_Remoting/Classic XmlSerializer.Deserialize2 Example/Common/simple.xml#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b11ea-316">在還原序列化期間發生錯誤。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-316">An error occurred during deserialization.</span>
          </span>
          <span data-ttu-id="b11ea-317">可以使用 <see cref="P:System.Exception.InnerException" /> 屬性取得原始例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-317">The original exception is available using the <see cref="P:System.Exception.InnerException" /> property.</span>
          </span>
        </exception>
        <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
        <altmember cref="M:System.Xml.Serialization.XmlSerializer.CanDeserialize(System.Xml.XmlReader)" />
        <altmember cref="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public object Deserialize (System.Xml.XmlReader xmlReader, string encodingStyle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Deserialize(class System.Xml.XmlReader xmlReader, string encodingStyle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Deserialize(System::Xml::XmlReader ^ xmlReader, System::String ^ encodingStyle);" />
      <MemberSignature Language="F#" Value="member this.Deserialize : System.Xml.XmlReader * string -&gt; obj" Usage="xmlSerializer.Deserialize (xmlReader, encodingStyle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlReader" Type="System.Xml.XmlReader" />
        <Parameter Name="encodingStyle" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xmlReader">
          <span data-ttu-id="b11ea-318">
            <see cref="T:System.Xml.XmlReader" />，包含要還原序列化的 XML 文件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-318">The <see cref="T:System.Xml.XmlReader" /> that contains the XML document to deserialize.</span>
          </span>
        </param>
        <param name="encodingStyle">
          <span data-ttu-id="b11ea-319">序列化 XML 的編碼樣式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-319">The encoding style of the serialized XML.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b11ea-320">還原序列化指定 <see cref="T:System.Xml.XmlReader" /> 和編碼樣式所包含的 XML 文件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-320">Deserializes the XML document contained by the specified <see cref="T:System.Xml.XmlReader" /> and encoding style.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b11ea-321">已還原序列化的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-321">The deserialized object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b11ea-322">還原序列化是讀取 XML 文件的執行個體，並建構物件，強型別為 XML 結構描述 (XSD) 文件的程序。</span><span class="sxs-lookup"><span data-stu-id="b11ea-322">Deserialization is the process of reading an instance of an XML document and constructing an object that is strongly typed to the XML Schema (XSD) of the document.</span></span>  
  
 <span data-ttu-id="b11ea-323">之前還原序列化，<xref:System.Xml.Serialization.XmlSerializer>必須使用正在還原序列化的物件型別來建構。</span><span class="sxs-lookup"><span data-stu-id="b11ea-323">Before deserializing, an <xref:System.Xml.Serialization.XmlSerializer> must be constructed using the type of the object that is being deserialized.</span></span>  
  
 <span data-ttu-id="b11ea-324">設定`encodingStyle`參數，以 「http://schemas.xmlsoap.org/soap/encoding/ 「 的 SOAP 1.1 版支援的編碼。否則，請將它設定為"http://www.w3.org/2001/12/soap-encoding"for SOAP 1.2 版的編碼方式。</span><span class="sxs-lookup"><span data-stu-id="b11ea-324">Set the `encodingStyle` parameter to "http://schemas.xmlsoap.org/soap/encoding/ " for SOAP version 1.1 encoding; otherwise, set it to "http://www.w3.org/2001/12/soap-encoding" for SOAP version 1.2 encoding.</span></span>  
  
 <span data-ttu-id="b11ea-325">**附註**<xref:System.Xml.Serialization.XmlSerializer>無法還原序列化下列： 陣列<xref:System.Collections.ArrayList>和陣列<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="b11ea-325">**Note** The <xref:System.Xml.Serialization.XmlSerializer> cannot deserialize the following: arrays of <xref:System.Collections.ArrayList> and arrays of <xref:System.Collections.Generic.List%601>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b11ea-326">在還原序列化期間發生錯誤。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-326">An error occurred during deserialization.</span>
          </span>
          <span data-ttu-id="b11ea-327">可以使用 <see cref="P:System.Exception.InnerException" /> 屬性取得原始例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-327">The original exception is available using the <see cref="P:System.Exception.InnerException" /> property.</span>
          </span>
        </exception>
        <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
        <altmember cref="M:System.Xml.Serialization.XmlSerializer.CanDeserialize(System.Xml.XmlReader)" />
        <altmember cref="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public object Deserialize (System.Xml.XmlReader xmlReader, System.Xml.Serialization.XmlDeserializationEvents events);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Deserialize(class System.Xml.XmlReader xmlReader, valuetype System.Xml.Serialization.XmlDeserializationEvents events) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader,System.Xml.Serialization.XmlDeserializationEvents)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Deserialize(System::Xml::XmlReader ^ xmlReader, System::Xml::Serialization::XmlDeserializationEvents events);" />
      <MemberSignature Language="F#" Value="member this.Deserialize : System.Xml.XmlReader * System.Xml.Serialization.XmlDeserializationEvents -&gt; obj" Usage="xmlSerializer.Deserialize (xmlReader, events)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlReader" Type="System.Xml.XmlReader" />
        <Parameter Name="events" Type="System.Xml.Serialization.XmlDeserializationEvents" />
      </Parameters>
      <Docs>
        <param name="xmlReader">
          <span data-ttu-id="b11ea-328">
            <see cref="T:System.Xml.XmlReader" />，包含要還原序列化的文件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-328">The <see cref="T:System.Xml.XmlReader" /> that contains the document to deserialize.</span>
          </span>
        </param>
        <param name="events">
          <span data-ttu-id="b11ea-329">
            <see cref="T:System.Xml.Serialization.XmlDeserializationEvents" /> 類別的執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-329">An instance of the <see cref="T:System.Xml.Serialization.XmlDeserializationEvents" /> class.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b11ea-330">還原序列化指定 <see cref="T:System.Xml.XmlReader" /> 包含的 XML 文件，並允許覆寫還原序列化期間發生的事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-330">Deserializes an XML document contained by the specified <see cref="T:System.Xml.XmlReader" /> and allows the overriding of events that occur during deserialization.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b11ea-331">要進行還原序列化的 <see cref="T:System.Object" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-331">The <see cref="T:System.Object" /> being deserialized.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b11ea-332">正在還原序列化的物件。</span><span class="sxs-lookup"><span data-stu-id="b11ea-332">The object being deserialized.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public object Deserialize (System.Xml.XmlReader xmlReader, string encodingStyle, System.Xml.Serialization.XmlDeserializationEvents events);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Deserialize(class System.Xml.XmlReader xmlReader, string encodingStyle, valuetype System.Xml.Serialization.XmlDeserializationEvents events) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader,System.String,System.Xml.Serialization.XmlDeserializationEvents)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Deserialize(System::Xml::XmlReader ^ xmlReader, System::String ^ encodingStyle, System::Xml::Serialization::XmlDeserializationEvents events);" />
      <MemberSignature Language="F#" Value="member this.Deserialize : System.Xml.XmlReader * string * System.Xml.Serialization.XmlDeserializationEvents -&gt; obj" Usage="xmlSerializer.Deserialize (xmlReader, encodingStyle, events)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlReader" Type="System.Xml.XmlReader" />
        <Parameter Name="encodingStyle" Type="System.String" />
        <Parameter Name="events" Type="System.Xml.Serialization.XmlDeserializationEvents" />
      </Parameters>
      <Docs>
        <param name="xmlReader">
          <span data-ttu-id="b11ea-333">
            <see cref="T:System.Xml.XmlReader" /> 類別的執行個體，用於讀取文件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-333">An instance of the <see cref="T:System.Xml.XmlReader" /> class used to read the document.</span>
          </span>
        </param>
        <param name="encodingStyle">
          <span data-ttu-id="b11ea-334">使用的編碼方式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-334">The encoding used.</span>
          </span>
        </param>
        <param name="events">
          <span data-ttu-id="b11ea-335">
            <see cref="T:System.Xml.Serialization.XmlDeserializationEvents" /> 類別的執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-335">An instance of the <see cref="T:System.Xml.Serialization.XmlDeserializationEvents" /> class.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b11ea-336">使用指定 <see cref="T:System.Xml.XmlReader" /> 包含的資料，還原序列化物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-336">Deserializes the object using the data contained by the specified <see cref="T:System.Xml.XmlReader" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b11ea-337">正在還原序列化的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-337">The object being deserialized.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b11ea-338">這個方法是未知的標頭的 Web 服務的案例只序列化所需的項目。</span><span class="sxs-lookup"><span data-stu-id="b11ea-338">This method is required for deserialization of unknown headers for Web Service scenarios only.</span></span> <span data-ttu-id="b11ea-339">這個方法可讓您避免 Web 服務方法中的事件同步處理。</span><span class="sxs-lookup"><span data-stu-id="b11ea-339">This method allows you to avoid event synchronization in Web Service methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="FromMappings">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b11ea-340">傳回指定對應的 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 類別執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-340">Returns an instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class from the specified mappings.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FromMappings">
      <MemberSignature Language="C#" Value="public static System.Xml.Serialization.XmlSerializer[] FromMappings (System.Xml.Serialization.XmlMapping[] mappings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Serialization.XmlSerializer[] FromMappings(class System.Xml.Serialization.XmlMapping[] mappings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.FromMappings(System.Xml.Serialization.XmlMapping[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromMappings (mappings As XmlMapping()) As XmlSerializer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Xml::Serialization::XmlSerializer ^&gt; ^ FromMappings(cli::array &lt;System::Xml::Serialization::XmlMapping ^&gt; ^ mappings);" />
      <MemberSignature Language="F#" Value="static member FromMappings : System.Xml.Serialization.XmlMapping[] -&gt; System.Xml.Serialization.XmlSerializer[]" Usage="System.Xml.Serialization.XmlSerializer.FromMappings mappings" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlSerializer[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mappings" Type="System.Xml.Serialization.XmlMapping[]" />
      </Parameters>
      <Docs>
        <param name="mappings">
          <span data-ttu-id="b11ea-341">
            <see cref="T:System.Xml.Serialization.XmlTypeMapping" /> 陣列，將一個型別對應至另一個型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-341">An array of <see cref="T:System.Xml.Serialization.XmlTypeMapping" /> that maps one type to another.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b11ea-342">傳回建立自 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 物件陣列的 <see cref="T:System.Xml.Serialization.XmlTypeMapping" /> 物件陣列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-342">Returns an array of <see cref="T:System.Xml.Serialization.XmlSerializer" /> objects created from an array of <see cref="T:System.Xml.Serialization.XmlTypeMapping" /> objects.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b11ea-343">
            <see cref="T:System.Xml.Serialization.XmlSerializer" /> 物件的陣列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-343">An array of <see cref="T:System.Xml.Serialization.XmlSerializer" /> objects.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromMappings">
      <MemberSignature Language="C#" Value="public static System.Xml.Serialization.XmlSerializer[] FromMappings (System.Xml.Serialization.XmlMapping[] mappings, System.Security.Policy.Evidence evidence);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Serialization.XmlSerializer[] FromMappings(class System.Xml.Serialization.XmlMapping[] mappings, class System.Security.Policy.Evidence evidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.FromMappings(System.Xml.Serialization.XmlMapping[],System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Xml::Serialization::XmlSerializer ^&gt; ^ FromMappings(cli::array &lt;System::Xml::Serialization::XmlMapping ^&gt; ^ mappings, System::Security::Policy::Evidence ^ evidence);" />
      <MemberSignature Language="F#" Value="static member FromMappings : System.Xml.Serialization.XmlMapping[] * System.Security.Policy.Evidence -&gt; System.Xml.Serialization.XmlSerializer[]" Usage="System.Xml.Serialization.XmlSerializer.FromMappings (mappings, evidence)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0">
          <AttributeName>System.Obsolete("This method is obsolete and will be removed in a future release of the .NET Framework. Please use an overload of FromMappings which does not take an Evidence parameter. See http://go2.microsoft.com/fwlink/?LinkId=131738 for more information.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlSerializer[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mappings" Type="System.Xml.Serialization.XmlMapping[]" />
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="mappings">
          <span data-ttu-id="b11ea-344">
            <see cref="T:System.Xml.Serialization.XmlMapping" /> 物件的陣列，用於將一個型別對應至另一個型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-344">An array of <see cref="T:System.Xml.Serialization.XmlMapping" /> objects used to map one type to another.</span>
          </span>
        </param>
        <param name="evidence">
          <span data-ttu-id="b11ea-345">
            <see cref="T:System.Security.Policy.Evidence" /> 類別的執行個體，包含顯示到 Common Language Runtime 原則系統的裝載和組件資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-345">An instance of the <see cref="T:System.Security.Policy.Evidence" /> class that contains host and assembly data presented to the common language runtime policy system.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b11ea-346">傳回 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 類別的執行個體，該執行個體建立自一個 XML 型別至另一個 XML 型別的對應。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-346">Returns an instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class created from mappings of one XML type to another.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b11ea-347">
            <see cref="T:System.Xml.Serialization.XmlSerializer" /> 類別的執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-347">An instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromMappings">
      <MemberSignature Language="C#" Value="public static System.Xml.Serialization.XmlSerializer[] FromMappings (System.Xml.Serialization.XmlMapping[] mappings, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Serialization.XmlSerializer[] FromMappings(class System.Xml.Serialization.XmlMapping[] mappings, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.FromMappings(System.Xml.Serialization.XmlMapping[],System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Xml::Serialization::XmlSerializer ^&gt; ^ FromMappings(cli::array &lt;System::Xml::Serialization::XmlMapping ^&gt; ^ mappings, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member FromMappings : System.Xml.Serialization.XmlMapping[] * Type -&gt; System.Xml.Serialization.XmlSerializer[]" Usage="System.Xml.Serialization.XmlSerializer.FromMappings (mappings, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlSerializer[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mappings" Type="System.Xml.Serialization.XmlMapping[]" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="mappings">
          <span data-ttu-id="b11ea-348">
            <see cref="T:System.Xml.Serialization.XmlMapping" /> 物件的陣列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-348">An array of <see cref="T:System.Xml.Serialization.XmlMapping" /> objects.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="b11ea-349">還原序列化物件的 <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-349">The <see cref="T:System.Type" /> of the deserialized object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b11ea-350">傳回指定對應的 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 類別執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-350">Returns an instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class from the specified mappings.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b11ea-351">
            <see cref="T:System.Xml.Serialization.XmlSerializer" /> 類別的執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-351">An instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromTypes">
      <MemberSignature Language="C#" Value="public static System.Xml.Serialization.XmlSerializer[] FromTypes (Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Serialization.XmlSerializer[] FromTypes(class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.FromTypes(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromTypes (types As Type()) As XmlSerializer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Xml::Serialization::XmlSerializer ^&gt; ^ FromTypes(cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="static member FromTypes : Type[] -&gt; System.Xml.Serialization.XmlSerializer[]" Usage="System.Xml.Serialization.XmlSerializer.FromTypes types" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlSerializer[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="types">
          <span data-ttu-id="b11ea-352">
            <see cref="T:System.Type" /> 物件的陣列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-352">An array of <see cref="T:System.Type" /> objects.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b11ea-353">傳回由型別陣列建立的 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 物件的陣列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-353">Returns an array of <see cref="T:System.Xml.Serialization.XmlSerializer" /> objects created from an array of types.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b11ea-354">
            <see cref="T:System.Xml.Serialization.XmlSerializer" /> 物件的陣列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-354">An array of <see cref="T:System.Xml.Serialization.XmlSerializer" /> objects.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b11ea-355"><xref:System.Xml.Serialization.XmlSerializer.FromTypes%2A>方法可讓您有效率地建立各種<xref:System.Xml.Serialization.XmlSerializer>物件來處理陣列<xref:System.Type>物件。</span><span class="sxs-lookup"><span data-stu-id="b11ea-355">The <xref:System.Xml.Serialization.XmlSerializer.FromTypes%2A> method allows you to efficiently create an array of <xref:System.Xml.Serialization.XmlSerializer> objects for processing an array of <xref:System.Type> objects.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b11ea-356">下列範例會使用<xref:System.Xml.Serialization.XmlSerializer.FromTypes%2A>方法傳回的陣列<xref:System.Xml.Serialization.XmlSerializer>物件。</span><span class="sxs-lookup"><span data-stu-id="b11ea-356">The following example uses the <xref:System.Xml.Serialization.XmlSerializer.FromTypes%2A> method to return an array of <xref:System.Xml.Serialization.XmlSerializer> objects.</span></span> <span data-ttu-id="b11ea-357">程式碼包含三個類別定義每個用來建立陣列<xref:System.Type>物件。</span><span class="sxs-lookup"><span data-stu-id="b11ea-357">The code includes three class definitions that are each used to create an array of <xref:System.Type> objects.</span></span>  
  
 [!code-cpp[Classic XmlSerializer.FromTypes Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlSerializer.FromTypes Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlSerializer.FromTypes Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlSerializer.FromTypes Example/CS/source.cs#1)]
 [!code-vb[Classic XmlSerializer.FromTypes Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlSerializer.FromTypes Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GenerateSerializer">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b11ea-358">傳回包含具型別序列化程式的組件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-358">Returns an assembly that contains typed serializers.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b11ea-359">[XML 序列化程式產生器工具 (Sgen.exe)](~/docs/standard/serialization/xml-serializer-generator-tool-sgen-exe.md)建立類型的 XML 序列化組件中指定的組件，以改善執行時間效能<xref:System.Xml.Serialization.XmlSerializer>在序列化或還原序列化的物件指定的型別。</span><span class="sxs-lookup"><span data-stu-id="b11ea-359">The [XML Serializer Generator Tool (Sgen.exe)](~/docs/standard/serialization/xml-serializer-generator-tool-sgen-exe.md) creates an XML serialization assembly for types in a specified assembly to improve the run-time performance of an <xref:System.Xml.Serialization.XmlSerializer> when it serializes or deserializes objects of the specified types.</span></span> <span data-ttu-id="b11ea-360">使用<xref:System.Xml.Serialization.XmlSerializer.GetXmlSerializerAssemblyName%2A>來傳回這類組件的名稱。</span><span class="sxs-lookup"><span data-stu-id="b11ea-360">Use the <xref:System.Xml.Serialization.XmlSerializer.GetXmlSerializerAssemblyName%2A> to return the name of such an assembly.</span></span>  
  
 <span data-ttu-id="b11ea-361">如果在散發這類組件會呼叫 Web 服務用戶端應用程式時，您可以套用<xref:System.Xml.Serialization.XmlSerializerAssemblyAttribute>用戶端類型，以指定的組件名稱與位置。</span><span class="sxs-lookup"><span data-stu-id="b11ea-361">If you are distributing such an assembly as part of a client application that calls a Web service, you can apply the <xref:System.Xml.Serialization.XmlSerializerAssemblyAttribute> to the client type to specify the location and name of the assembly.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GenerateSerializer">
      <MemberSignature Language="C#" Value="public static System.Reflection.Assembly GenerateSerializer (Type[] types, System.Xml.Serialization.XmlMapping[] mappings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Assembly GenerateSerializer(class System.Type[] types, class System.Xml.Serialization.XmlMapping[] mappings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.GenerateSerializer(System.Type[],System.Xml.Serialization.XmlMapping[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GenerateSerializer (types As Type(), mappings As XmlMapping()) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Assembly ^ GenerateSerializer(cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Xml::Serialization::XmlMapping ^&gt; ^ mappings);" />
      <MemberSignature Language="F#" Value="static member GenerateSerializer : Type[] * System.Xml.Serialization.XmlMapping[] -&gt; System.Reflection.Assembly" Usage="System.Xml.Serialization.XmlSerializer.GenerateSerializer (types, mappings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="mappings" Type="System.Xml.Serialization.XmlMapping[]" />
      </Parameters>
      <Docs>
        <param name="types">
          <span data-ttu-id="b11ea-362">型別集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-362">A collection of types.</span>
          </span>
        </param>
        <param name="mappings">
          <span data-ttu-id="b11ea-363">
            <see cref="T:System.Xml.Serialization.XmlMapping" /> 物件集合，用於將一個型別轉換為另一個型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-363">A collection of <see cref="T:System.Xml.Serialization.XmlMapping" /> objects used to convert one type to another.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b11ea-364">使用指定的對應傳回組件，該組件包含自訂序列化程式，用於序列化或還原序列化指定的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-364">Returns an assembly that contains custom-made serializers used to serialize or deserialize the specified type or types, using the specified mappings.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b11ea-365">
            <see cref="T:System.Reflection.Assembly" /> 物件，包含所提供型別和對應的序列化程式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-365">An <see cref="T:System.Reflection.Assembly" /> object that contains serializers for the supplied types and mappings.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateSerializer">
      <MemberSignature Language="C#" Value="public static System.Reflection.Assembly GenerateSerializer (Type[] types, System.Xml.Serialization.XmlMapping[] mappings, System.CodeDom.Compiler.CompilerParameters parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Assembly GenerateSerializer(class System.Type[] types, class System.Xml.Serialization.XmlMapping[] mappings, class System.CodeDom.Compiler.CompilerParameters parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.GenerateSerializer(System.Type[],System.Xml.Serialization.XmlMapping[],System.CodeDom.Compiler.CompilerParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GenerateSerializer (types As Type(), mappings As XmlMapping(), parameters As CompilerParameters) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Assembly ^ GenerateSerializer(cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Xml::Serialization::XmlMapping ^&gt; ^ mappings, System::CodeDom::Compiler::CompilerParameters ^ parameters);" />
      <MemberSignature Language="F#" Value="static member GenerateSerializer : Type[] * System.Xml.Serialization.XmlMapping[] * System.CodeDom.Compiler.CompilerParameters -&gt; System.Reflection.Assembly" Usage="System.Xml.Serialization.XmlSerializer.GenerateSerializer (types, mappings, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="mappings" Type="System.Xml.Serialization.XmlMapping[]" />
        <Parameter Name="parameters" Type="System.CodeDom.Compiler.CompilerParameters" />
      </Parameters>
      <Docs>
        <param name="types">
          <span data-ttu-id="b11ea-366">型別 <see cref="T:System.Type" /> 的陣列，包含用於序列化和還原序列化資料的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-366">An array of type <see cref="T:System.Type" /> that contains objects used to serialize and deserialize data.</span>
          </span>
        </param>
        <param name="mappings">
          <span data-ttu-id="b11ea-367">型別 <see cref="T:System.Xml.Serialization.XmlMapping" /> 的陣列，將 XML 資料對應至型別資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-367">An array of type <see cref="T:System.Xml.Serialization.XmlMapping" /> that maps the XML data to the type data.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="b11ea-368">
            <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 類別的執行個體，表示用於叫用編譯器的參數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-368">An instance of the <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> class that represents the parameters used to invoke a compiler.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b11ea-369">使用指定的對應、編譯器設定和選項傳回組件，該組件包含自訂序列化程式，用於序列化或還原序列化指定的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-369">Returns an assembly that contains custom-made serializers used to serialize or deserialize the specified type or types, using the specified mappings and compiler settings and options.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b11ea-370">
            <see cref="T:System.Reflection.Assembly" />，包含 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 的特殊版本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-370">An <see cref="T:System.Reflection.Assembly" /> that contains special versions of the <see cref="T:System.Xml.Serialization.XmlSerializer" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetXmlSerializerAssemblyName">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b11ea-371">傳回組件名稱，該組件包含一個或多個 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 版本，是為序列化或還原序列化特定型別建立的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-371">Returns the name of the assembly that contains one or more versions of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> especially created to serialize or deserialize specific types.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b11ea-372">[XML 序列化程式產生器工具 (Sgen.exe)](~/docs/standard/serialization/xml-serializer-generator-tool-sgen-exe.md)建立類型的 XML 序列化組件中指定的組件，以改善執行時間效能<xref:System.Xml.Serialization.XmlSerializer>在序列化或還原序列化的物件指定的型別。</span><span class="sxs-lookup"><span data-stu-id="b11ea-372">The [XML Serializer Generator Tool (Sgen.exe)](~/docs/standard/serialization/xml-serializer-generator-tool-sgen-exe.md) creates an XML serialization assembly for types in a specified assembly to improve the run-time performance of an <xref:System.Xml.Serialization.XmlSerializer> when it serializes or deserializes objects of the specified types.</span></span> <span data-ttu-id="b11ea-373">使用<xref:System.Xml.Serialization.XmlSerializer.GetXmlSerializerAssemblyName%2A>來傳回這類組件的名稱。</span><span class="sxs-lookup"><span data-stu-id="b11ea-373">Use the <xref:System.Xml.Serialization.XmlSerializer.GetXmlSerializerAssemblyName%2A> to return the name of such an assembly.</span></span>  
  
 <span data-ttu-id="b11ea-374">如果在散發這類組件會呼叫 Web 服務用戶端應用程式時，您可以套用<xref:System.Xml.Serialization.XmlSerializerAssemblyAttribute>用戶端類型，以指定的組件名稱與位置。</span><span class="sxs-lookup"><span data-stu-id="b11ea-374">If you are distributing such an assembly as part of a client application that calls a Web service, you can apply the <xref:System.Xml.Serialization.XmlSerializerAssemblyAttribute> to the client type to specify the location and name of the assembly.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetXmlSerializerAssemblyName">
      <MemberSignature Language="C#" Value="public static string GetXmlSerializerAssemblyName (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetXmlSerializerAssemblyName(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.GetXmlSerializerAssemblyName(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetXmlSerializerAssemblyName(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member GetXmlSerializerAssemblyName : Type -&gt; string" Usage="System.Xml.Serialization.XmlSerializer.GetXmlSerializerAssemblyName type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="b11ea-375">正在還原序列化的 <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-375">The <see cref="T:System.Type" /> you are deserializing.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b11ea-376">傳回組件名稱，該組件包含一個或多個 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 版本，是為序列化或還原序列化特定型別建立的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-376">Returns the name of the assembly that contains one or more versions of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> especially created to serialize or deserialize the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b11ea-377">組件名稱，該組件包含型別的 <see cref="T:System.Xml.Serialization.XmlSerializer" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-377">The name of the assembly that contains an <see cref="T:System.Xml.Serialization.XmlSerializer" /> for the type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b11ea-378">[XML 序列化程式產生器工具 (Sgen.exe)](~/docs/standard/serialization/xml-serializer-generator-tool-sgen-exe.md)建立類型的 XML 序列化組件中指定的組件，以改善執行時間效能<xref:System.Xml.Serialization.XmlSerializer>在序列化或還原序列化的物件指定的型別。</span><span class="sxs-lookup"><span data-stu-id="b11ea-378">The [XML Serializer Generator Tool (Sgen.exe)](~/docs/standard/serialization/xml-serializer-generator-tool-sgen-exe.md) creates an XML serialization assembly for types in a specified assembly to improve the run-time performance of an <xref:System.Xml.Serialization.XmlSerializer> when it serializes or deserializes objects of the specified types.</span></span> <span data-ttu-id="b11ea-379">使用<xref:System.Xml.Serialization.XmlSerializer.GetXmlSerializerAssemblyName%2A>來傳回這類組件的名稱。</span><span class="sxs-lookup"><span data-stu-id="b11ea-379">Use the <xref:System.Xml.Serialization.XmlSerializer.GetXmlSerializerAssemblyName%2A> to return the name of such an assembly.</span></span>  
  
 <span data-ttu-id="b11ea-380">如果在散發這類組件會呼叫 Web 服務用戶端應用程式時，您可以套用<xref:System.Xml.Serialization.XmlSerializerAssemblyAttribute>用戶端類型，以指定的組件名稱與位置。</span><span class="sxs-lookup"><span data-stu-id="b11ea-380">If you are distributing such an assembly as part of a client application that calls a Web service, you can apply the <xref:System.Xml.Serialization.XmlSerializerAssemblyAttribute> to the client type to specify the location and name of the assembly.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetXmlSerializerAssemblyName">
      <MemberSignature Language="C#" Value="public static string GetXmlSerializerAssemblyName (Type type, string defaultNamespace);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetXmlSerializerAssemblyName(class System.Type type, string defaultNamespace) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.GetXmlSerializerAssemblyName(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetXmlSerializerAssemblyName(Type ^ type, System::String ^ defaultNamespace);" />
      <MemberSignature Language="F#" Value="static member GetXmlSerializerAssemblyName : Type * string -&gt; string" Usage="System.Xml.Serialization.XmlSerializer.GetXmlSerializerAssemblyName (type, defaultNamespace)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="defaultNamespace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="b11ea-381">您所要的 <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-381">The <see cref="T:System.Type" /> you are interested in.</span>
          </span>
        </param>
        <param name="defaultNamespace">
          <span data-ttu-id="b11ea-382">型別的命名空間。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-382">The namespace of the type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b11ea-383">傳回組件名稱，該組件包含指定命名空間中指定型別的序列化程式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-383">Returns the name of the assembly that contains the serializer for the specified type in the specified namespace.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b11ea-384">組件名稱，該組件包含特別建置的序列化程式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-384">The name of the assembly that contains specially built serializers.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b11ea-385">[XML 序列化程式產生器工具 (Sgen.exe)](~/docs/standard/serialization/xml-serializer-generator-tool-sgen-exe.md)建立類型的 XML 序列化組件中指定的組件，以改善執行時間效能<xref:System.Xml.Serialization.XmlSerializer>在序列化或還原序列化的物件指定的型別。</span><span class="sxs-lookup"><span data-stu-id="b11ea-385">The [XML Serializer Generator Tool (Sgen.exe)](~/docs/standard/serialization/xml-serializer-generator-tool-sgen-exe.md) creates an XML serialization assembly for types in a specified assembly to improve the run-time performance of an <xref:System.Xml.Serialization.XmlSerializer> when it serializes or deserializes objects of the specified types.</span></span> <span data-ttu-id="b11ea-386">使用<xref:System.Xml.Serialization.XmlSerializer.GetXmlSerializerAssemblyName%2A>來傳回這類組件的名稱。</span><span class="sxs-lookup"><span data-stu-id="b11ea-386">Use the <xref:System.Xml.Serialization.XmlSerializer.GetXmlSerializerAssemblyName%2A> to return the name of such an assembly.</span></span>  
  
 <span data-ttu-id="b11ea-387">如果在散發這類組件會呼叫 Web 服務用戶端應用程式時，您可以套用<xref:System.Xml.Serialization.XmlSerializerAssemblyAttribute>用戶端類型，以指定的組件名稱與位置。</span><span class="sxs-lookup"><span data-stu-id="b11ea-387">If you are distributing such an assembly as part of a client application that calls a Web service, you can apply the <xref:System.Xml.Serialization.XmlSerializerAssemblyAttribute> to the client type to specify the location and name of the assembly.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Serialize">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b11ea-388">將物件序列化成為 XML 文件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-388">Serializes an object into an XML document.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public void Serialize (System.IO.Stream stream, object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Serialize(class System.IO.Stream stream, object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Serialize(System::IO::Stream ^ stream, System::Object ^ o);" />
      <MemberSignature Language="F#" Value="member this.Serialize : System.IO.Stream * obj -&gt; unit" Usage="xmlSerializer.Serialize (stream, o)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="b11ea-389">用來寫入 XML 文件的 <see cref="T:System.IO.Stream" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-389">The <see cref="T:System.IO.Stream" /> used to write the XML document.</span>
          </span>
        </param>
        <param name="o">
          <span data-ttu-id="b11ea-390">要序列化的 <see cref="T:System.Object" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-390">The <see cref="T:System.Object" /> to serialize.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b11ea-391">序列化指定的 <see cref="T:System.Object" />，並使用指定的 <see cref="T:System.IO.Stream" /> 將 XML 文件寫入檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-391">Serializes the specified <see cref="T:System.Object" /> and writes the XML document to a file using the specified <see cref="T:System.IO.Stream" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b11ea-392"><xref:System.Xml.Serialization.XmlSerializer.Serialize%2A>方法會將公用欄位和讀取/寫入屬性的物件轉換成 XML。</span><span class="sxs-lookup"><span data-stu-id="b11ea-392">The <xref:System.Xml.Serialization.XmlSerializer.Serialize%2A> method converts the public fields and read/write properties of an object into XML.</span></span> <span data-ttu-id="b11ea-393">它不會轉換方法、 索引子、 私用欄位或唯讀屬性。</span><span class="sxs-lookup"><span data-stu-id="b11ea-393">It does not convert methods, indexers, private fields, or read-only properties.</span></span> <span data-ttu-id="b11ea-394">若要序列化的所有物件的欄位和屬性，公用和私用，使用<xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>。</span><span class="sxs-lookup"><span data-stu-id="b11ea-394">To serialize all of an object's fields and properties, both public and private, use the <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>.</span></span>  
  
 <span data-ttu-id="b11ea-395">在 `stream`參數，指定物件衍生自抽象<xref:System.IO.Stream>類別。</span><span class="sxs-lookup"><span data-stu-id="b11ea-395">In the `stream` parameter, specify an object that derives from the abstract <xref:System.IO.Stream> class.</span></span> <span data-ttu-id="b11ea-396">衍生自類別<xref:System.IO.Stream>包括：</span><span class="sxs-lookup"><span data-stu-id="b11ea-396">Classes that derive from <xref:System.IO.Stream> include:</span></span>  
  
-   <xref:System.IO.BufferedStream>  
  
-   <xref:System.IO.FileStream>  
  
-   <xref:System.IO.MemoryStream>  
  
-   <xref:System.Net.Sockets.NetworkStream>  
  
-   <xref:System.Security.Cryptography.CryptoStream>  
  
> [!NOTE]
>  <span data-ttu-id="b11ea-397"><xref:System.Xml.Serialization.XmlSerializer>無法序列化下列： 陣列<xref:System.Collections.ArrayList>和陣列<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="b11ea-397">The <xref:System.Xml.Serialization.XmlSerializer> cannot serialize the following: arrays of <xref:System.Collections.ArrayList> and arrays of <xref:System.Collections.Generic.List%601>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b11ea-398">下列範例會序列化物件使用<xref:System.IO.Stream>物件。</span><span class="sxs-lookup"><span data-stu-id="b11ea-398">The following example serializes an object using a <xref:System.IO.Stream> object.</span></span>  
  
 [!code-cpp[Classic XmlSerializer.Serialize2 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlSerializer.Serialize2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlSerializer.Serialize2 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlSerializer.Serialize2 Example/CS/source.cs#1)]
 [!code-vb[Classic XmlSerializer.Serialize2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlSerializer.Serialize2 Example/VB/source.vb#1)]
 [!code-xml[Classic XmlSerializer.Serialize2 Example#1](~/samples/snippets/common/VS_Snippets_Remoting/Classic XmlSerializer.Serialize2 Example/Common/simple.xml#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b11ea-399">在序列化期間發生錯誤。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-399">An error occurred during serialization.</span>
          </span>
          <span data-ttu-id="b11ea-400">可以使用 <see cref="P:System.Exception.InnerException" /> 屬性取得原始例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-400">The original exception is available using the <see cref="P:System.Exception.InnerException" /> property.</span>
          </span>
        </exception>
        <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
        <altmember cref="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)" />
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public void Serialize (System.IO.TextWriter textWriter, object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Serialize(class System.IO.TextWriter textWriter, object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Serialize(System::IO::TextWriter ^ textWriter, System::Object ^ o);" />
      <MemberSignature Language="F#" Value="member this.Serialize : System.IO.TextWriter * obj -&gt; unit" Usage="xmlSerializer.Serialize (textWriter, o)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textWriter" Type="System.IO.TextWriter" />
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="textWriter">
          <span data-ttu-id="b11ea-401">用來寫入 XML 文件的 <see cref="T:System.IO.TextWriter" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-401">The <see cref="T:System.IO.TextWriter" /> used to write the XML document.</span>
          </span>
        </param>
        <param name="o">
          <span data-ttu-id="b11ea-402">要序列化的 <see cref="T:System.Object" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-402">The <see cref="T:System.Object" /> to serialize.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b11ea-403">序列化指定的 <see cref="T:System.Object" />，並使用指定的 <see cref="T:System.IO.TextWriter" /> 將 XML 文件寫入檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-403">Serializes the specified <see cref="T:System.Object" /> and writes the XML document to a file using the specified <see cref="T:System.IO.TextWriter" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b11ea-404"><xref:System.Xml.Serialization.XmlSerializer.Serialize%2A>方法會將公用欄位和讀取/寫入屬性的物件轉換成 XML。</span><span class="sxs-lookup"><span data-stu-id="b11ea-404">The <xref:System.Xml.Serialization.XmlSerializer.Serialize%2A> method converts the public fields and read/write properties of an object into XML.</span></span> <span data-ttu-id="b11ea-405">它不會轉換方法、 索引子、 私用欄位或唯讀屬性。</span><span class="sxs-lookup"><span data-stu-id="b11ea-405">It does not convert methods, indexers, private fields, or read-only properties.</span></span> <span data-ttu-id="b11ea-406">若要序列化物件的所有欄位和屬性，公用和私用，使用<xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>。</span><span class="sxs-lookup"><span data-stu-id="b11ea-406">To serialize all an object's fields and properties, both public and private, use the <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>.</span></span>  
  
 <span data-ttu-id="b11ea-407">在 `textWriter`參數，指定物件衍生自抽象<xref:System.IO.TextWriter>類別。</span><span class="sxs-lookup"><span data-stu-id="b11ea-407">In the `textWriter` parameter, specify an object that derives from the abstract <xref:System.IO.TextWriter> class.</span></span> <span data-ttu-id="b11ea-408">衍生自類別<xref:System.IO.TextWriter>包括：</span><span class="sxs-lookup"><span data-stu-id="b11ea-408">Classes that derive from <xref:System.IO.TextWriter> include:</span></span>  
  
-   <xref:System.IO.StreamWriter>  
  
-   <xref:System.IO.StringWriter>  
  
-   <xref:System.CodeDom.Compiler.IndentedTextWriter>  
  
> [!NOTE]
>  <span data-ttu-id="b11ea-409"><xref:System.Xml.Serialization.XmlSerializer>無法序列化下列： 陣列<xref:System.Collections.ArrayList>和陣列<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="b11ea-409">The <xref:System.Xml.Serialization.XmlSerializer> cannot serialize the following: arrays of <xref:System.Collections.ArrayList> and arrays of <xref:System.Collections.Generic.List%601>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b11ea-410">下列範例會序列化物件使用<xref:System.IO.TextWriter>。</span><span class="sxs-lookup"><span data-stu-id="b11ea-410">The following example serializes an object using a <xref:System.IO.TextWriter>.</span></span>  
  
 [!code-cpp[Classic XmlSerializer.Serialize Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlSerializer.Serialize Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlSerializer.Serialize Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlSerializer.Serialize Example/CS/source.cs#1)]
 [!code-vb[Classic XmlSerializer.Serialize Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlSerializer.Serialize Example/VB/source.vb#1)]
 [!code-xml[Classic XmlSerializer.Serialize Example#1](~/samples/snippets/common/VS_Snippets_Remoting/Classic XmlSerializer.Serialize Example/Common/simple.xml#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="protected virtual void Serialize (object o, System.Xml.Serialization.XmlSerializationWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Serialize(object o, class System.Xml.Serialization.XmlSerializationWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Object,System.Xml.Serialization.XmlSerializationWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Serialize (o As Object, writer As XmlSerializationWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Serialize(System::Object ^ o, System::Xml::Serialization::XmlSerializationWriter ^ writer);" />
      <MemberSignature Language="F#" Value="abstract member Serialize : obj * System.Xml.Serialization.XmlSerializationWriter -&gt; unit&#xA;override this.Serialize : obj * System.Xml.Serialization.XmlSerializationWriter -&gt; unit" Usage="xmlSerializer.Serialize (o, writer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
        <Parameter Name="writer" Type="System.Xml.Serialization.XmlSerializationWriter" />
      </Parameters>
      <Docs>
        <param name="o">
          <span data-ttu-id="b11ea-411">要序列化的 <see cref="T:System.Object" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-411">The <see cref="T:System.Object" /> to serialize.</span>
          </span>
        </param>
        <param name="writer">
          <span data-ttu-id="b11ea-412">用來寫入 XML 文件的 <see cref="T:System.Xml.Serialization.XmlSerializationWriter" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-412">The <see cref="T:System.Xml.Serialization.XmlSerializationWriter" /> used to write the XML document.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b11ea-413">序列化指定的 <see cref="T:System.Object" />，並使用指定的 <see cref="T:System.Xml.Serialization.XmlSerializationWriter" /> 將 XML 文件寫入檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-413">Serializes the specified <see cref="T:System.Object" /> and writes the XML document to a file using the specified <see cref="T:System.Xml.Serialization.XmlSerializationWriter" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="b11ea-414">當方法在子代類別中未覆寫時，會嘗試存取該方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-414">Any attempt is made to access the method when the method is not overridden in a descendant class.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public void Serialize (System.Xml.XmlWriter xmlWriter, object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Serialize(class System.Xml.XmlWriter xmlWriter, object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Serialize(System::Xml::XmlWriter ^ xmlWriter, System::Object ^ o);" />
      <MemberSignature Language="F#" Value="member this.Serialize : System.Xml.XmlWriter * obj -&gt; unit" Usage="xmlSerializer.Serialize (xmlWriter, o)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlWriter" Type="System.Xml.XmlWriter" />
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="xmlWriter">
          <span data-ttu-id="b11ea-415">用來寫入 XML 文件的 <see cref="T:System.Xml.XmlWriter" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-415">The <see cref="T:System.Xml.XmlWriter" /> used to write the XML document.</span>
          </span>
        </param>
        <param name="o">
          <span data-ttu-id="b11ea-416">要序列化的 <see cref="T:System.Object" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-416">The <see cref="T:System.Object" /> to serialize.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b11ea-417">序列化指定的 <see cref="T:System.Object" />，並使用指定的 <see cref="T:System.Xml.XmlWriter" /> 將 XML 文件寫入檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-417">Serializes the specified <see cref="T:System.Object" /> and writes the XML document to a file using the specified <see cref="T:System.Xml.XmlWriter" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b11ea-418"><xref:System.Xml.Serialization.XmlSerializer.Serialize%2A>方法會將公用欄位和讀取/寫入屬性的物件轉換成 XML。</span><span class="sxs-lookup"><span data-stu-id="b11ea-418">The <xref:System.Xml.Serialization.XmlSerializer.Serialize%2A> method converts the public fields and read/write properties of an object into XML.</span></span> <span data-ttu-id="b11ea-419">它不會轉換方法、 索引子、 私用欄位或唯讀屬性。</span><span class="sxs-lookup"><span data-stu-id="b11ea-419">It does not convert methods, indexers, private fields, or read-only properties.</span></span> <span data-ttu-id="b11ea-420">若要序列化物件的所有欄位和屬性，公用和私用，使用<xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>。</span><span class="sxs-lookup"><span data-stu-id="b11ea-420">To serialize all an object's fields and properties, both public and private, use the <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>.</span></span>  
  
 <span data-ttu-id="b11ea-421">在 `xmlWriter`參數，指定物件衍生自抽象<xref:System.Xml.XmlWriter>類別。</span><span class="sxs-lookup"><span data-stu-id="b11ea-421">In the `xmlWriter` parameter, specify an object that derives from the abstract <xref:System.Xml.XmlWriter> class.</span></span> <span data-ttu-id="b11ea-422"><xref:System.Xml.XmlTextWriter>衍生自<xref:System.Xml.XmlWriter>。</span><span class="sxs-lookup"><span data-stu-id="b11ea-422">The <xref:System.Xml.XmlTextWriter> derives from the <xref:System.Xml.XmlWriter>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b11ea-423"><xref:System.Xml.Serialization.XmlSerializer>無法序列化下列： 陣列<xref:System.Collections.ArrayList>和陣列<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="b11ea-423">The <xref:System.Xml.Serialization.XmlSerializer> cannot serialize the following: arrays of <xref:System.Collections.ArrayList> and arrays of <xref:System.Collections.Generic.List%601>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b11ea-424">下列範例會序列化物件使用<xref:System.Xml.XmlWriter>。</span><span class="sxs-lookup"><span data-stu-id="b11ea-424">The following example serializes an object using an <xref:System.Xml.XmlWriter>.</span></span>  
  
 [!code-cpp[Classic XmlSerializer.Serialize4 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlSerializer.Serialize4 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlSerializer.Serialize4 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlSerializer.Serialize4 Example/CS/source.cs#1)]
 [!code-vb[Classic XmlSerializer.Serialize4 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlSerializer.Serialize4 Example/VB/source.vb#1)]
 [!code-xml[Classic XmlSerializer.Serialize4 Example#1](~/samples/snippets/common/VS_Snippets_Remoting/Classic XmlSerializer.Serialize4 Example/Common/simple.xml#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b11ea-425">在序列化期間發生錯誤。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-425">An error occurred during serialization.</span>
          </span>
          <span data-ttu-id="b11ea-426">可以使用 <see cref="P:System.Exception.InnerException" /> 屬性取得原始例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-426">The original exception is available using the <see cref="P:System.Exception.InnerException" /> property.</span>
          </span>
        </exception>
        <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
        <altmember cref="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)" />
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public void Serialize (System.IO.Stream stream, object o, System.Xml.Serialization.XmlSerializerNamespaces namespaces);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Serialize(class System.IO.Stream stream, object o, class System.Xml.Serialization.XmlSerializerNamespaces namespaces) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Serialize(System::IO::Stream ^ stream, System::Object ^ o, System::Xml::Serialization::XmlSerializerNamespaces ^ namespaces);" />
      <MemberSignature Language="F#" Value="member this.Serialize : System.IO.Stream * obj * System.Xml.Serialization.XmlSerializerNamespaces -&gt; unit" Usage="xmlSerializer.Serialize (stream, o, namespaces)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="o" Type="System.Object" />
        <Parameter Name="namespaces" Type="System.Xml.Serialization.XmlSerializerNamespaces" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="b11ea-427">用來寫入 XML 文件的 <see cref="T:System.IO.Stream" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-427">The <see cref="T:System.IO.Stream" /> used to write the XML document.</span>
          </span>
        </param>
        <param name="o">
          <span data-ttu-id="b11ea-428">要序列化的 <see cref="T:System.Object" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-428">The <see cref="T:System.Object" /> to serialize.</span>
          </span>
        </param>
        <param name="namespaces">
          <span data-ttu-id="b11ea-429">物件所參考的 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-429">The <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> referenced by the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b11ea-430">序列化指定的 <see cref="T:System.Object" />，並使用指定的 <see cref="T:System.IO.Stream" /> 將 XML 文件寫入檔案，以參考指定的命名空間。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-430">Serializes the specified <see cref="T:System.Object" /> and writes the XML document to a file using the specified <see cref="T:System.IO.Stream" /> that references the specified namespaces.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b11ea-431">當<xref:System.Xml.Serialization.XmlSerializer.Serialize%2A>叫用方法、 公用欄位和讀取/寫入屬性的物件轉換成 XML。</span><span class="sxs-lookup"><span data-stu-id="b11ea-431">When the <xref:System.Xml.Serialization.XmlSerializer.Serialize%2A> method is invoked, the public fields and read/write properties of an object are converted into XML.</span></span> <span data-ttu-id="b11ea-432">不會序列化方法、 索引子、 私用欄位和唯讀屬性。</span><span class="sxs-lookup"><span data-stu-id="b11ea-432">Methods, indexers, private fields, and read-only properties are not serialized.</span></span> <span data-ttu-id="b11ea-433">若要序列化的所有欄位和屬性，公用和私用，使用<xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>。</span><span class="sxs-lookup"><span data-stu-id="b11ea-433">To serialize all fields and properties, both public and private, use the <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>.</span></span>  
  
 <span data-ttu-id="b11ea-434">使用`stream`參數來指定衍生自抽象物件<xref:System.IO.Stream>類別，其設計目的是要寫入資料流。</span><span class="sxs-lookup"><span data-stu-id="b11ea-434">Use the `stream` parameter to specify an object that derives from the abstract <xref:System.IO.Stream> class, which is designed to write to streams.</span></span> <span data-ttu-id="b11ea-435">衍生自類別<xref:System.IO.Stream>類別包括：</span><span class="sxs-lookup"><span data-stu-id="b11ea-435">Classes that derive from the <xref:System.IO.Stream> class include:</span></span>  
  
-   <xref:System.IO.BufferedStream>  
  
-   <xref:System.IO.FileStream>  
  
-   <xref:System.IO.MemoryStream>  
  
-   <xref:System.Net.Sockets.NetworkStream>  
  
-   <xref:System.Security.Cryptography.CryptoStream>  
  
> [!NOTE]
>  <span data-ttu-id="b11ea-436"><xref:System.Xml.Serialization.XmlSerializer>無法序列化下列： 陣列<xref:System.Collections.ArrayList>和陣列<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="b11ea-436">The <xref:System.Xml.Serialization.XmlSerializer> cannot serialize the following: arrays of <xref:System.Collections.ArrayList> and arrays of <xref:System.Collections.Generic.List%601>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b11ea-437">下列範例會將與物件的序列化<xref:System.IO.Stream>物件。</span><span class="sxs-lookup"><span data-stu-id="b11ea-437">The following example serializes an object with a <xref:System.IO.Stream> object.</span></span> <span data-ttu-id="b11ea-438">此範例也會建立<xref:System.Xml.Serialization.XmlSerializerNamespaces>並將兩個命名空間加入至物件。</span><span class="sxs-lookup"><span data-stu-id="b11ea-438">The example also creates an <xref:System.Xml.Serialization.XmlSerializerNamespaces> and adds two namespaces to the object.</span></span> <span data-ttu-id="b11ea-439">定義序列化的物件的類別也化<xref:System.Xml.Serialization.XmlElementAttribute>屬性來指定每個項目的命名空間。</span><span class="sxs-lookup"><span data-stu-id="b11ea-439">The class that defines the serialized object is also attributed with <xref:System.Xml.Serialization.XmlElementAttribute> attributes to specify the namespace for each element.</span></span>  
  
 [!code-cpp[Classic XmlSerializer.Serialize3 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlSerializer.Serialize3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlSerializer.Serialize3 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlSerializer.Serialize3 Example/CS/source.cs#1)]
 [!code-vb[Classic XmlSerializer.Serialize3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlSerializer.Serialize3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b11ea-440">在序列化期間發生錯誤。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-440">An error occurred during serialization.</span>
          </span>
          <span data-ttu-id="b11ea-441">可以使用 <see cref="P:System.Exception.InnerException" /> 屬性取得原始例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-441">The original exception is available using the <see cref="P:System.Exception.InnerException" /> property.</span>
          </span>
        </exception>
        <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
        <altmember cref="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)" />
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public void Serialize (System.IO.TextWriter textWriter, object o, System.Xml.Serialization.XmlSerializerNamespaces namespaces);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Serialize(class System.IO.TextWriter textWriter, object o, class System.Xml.Serialization.XmlSerializerNamespaces namespaces) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Serialize(System::IO::TextWriter ^ textWriter, System::Object ^ o, System::Xml::Serialization::XmlSerializerNamespaces ^ namespaces);" />
      <MemberSignature Language="F#" Value="member this.Serialize : System.IO.TextWriter * obj * System.Xml.Serialization.XmlSerializerNamespaces -&gt; unit" Usage="xmlSerializer.Serialize (textWriter, o, namespaces)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textWriter" Type="System.IO.TextWriter" />
        <Parameter Name="o" Type="System.Object" />
        <Parameter Name="namespaces" Type="System.Xml.Serialization.XmlSerializerNamespaces" />
      </Parameters>
      <Docs>
        <param name="textWriter">
          <span data-ttu-id="b11ea-442">用來寫入 XML 文件的 <see cref="T:System.IO.TextWriter" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-442">The <see cref="T:System.IO.TextWriter" /> used to write the XML document.</span>
          </span>
        </param>
        <param name="o">
          <span data-ttu-id="b11ea-443">要序列化的 <see cref="T:System.Object" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-443">The <see cref="T:System.Object" /> to serialize.</span>
          </span>
        </param>
        <param name="namespaces">
          <span data-ttu-id="b11ea-444">
            <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" />，包含產生之 XML 文件的命名空間。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-444">The <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> that contains namespaces for the generated XML document.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b11ea-445">將指定的 <see cref="T:System.Object" /> 序列化，使用指定的 <see cref="T:System.IO.TextWriter" /> 將 XML 文件寫入檔案，並參考指定的命名空間。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-445">Serializes the specified <see cref="T:System.Object" /> and writes the XML document to a file using the specified <see cref="T:System.IO.TextWriter" /> and references the specified namespaces.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b11ea-446">當<xref:System.Xml.Serialization.XmlSerializer.Serialize%2A>叫用方法的公用欄位和讀取/寫入屬性的物件轉換成 XML。</span><span class="sxs-lookup"><span data-stu-id="b11ea-446">When the <xref:System.Xml.Serialization.XmlSerializer.Serialize%2A> method is invoked the public fields and read/write properties of an object are converted into XML.</span></span> <span data-ttu-id="b11ea-447">不會序列化方法、 索引子、 私用欄位和唯讀屬性。</span><span class="sxs-lookup"><span data-stu-id="b11ea-447">Methods, indexers, private fields, and read-only properties are not serialized.</span></span> <span data-ttu-id="b11ea-448">若要序列化的所有欄位和屬性，公用和私用，使用<xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>。</span><span class="sxs-lookup"><span data-stu-id="b11ea-448">To serialize all fields and properties, both public and private, use the <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>.</span></span>  
  
 <span data-ttu-id="b11ea-449">使用`textWriter`參數來指定衍生自抽象物件<xref:System.IO.TextWriter>類別。</span><span class="sxs-lookup"><span data-stu-id="b11ea-449">Use the `textWriter` parameter to specify an object that derives from the abstract <xref:System.IO.TextWriter> class.</span></span> <span data-ttu-id="b11ea-450">衍生自類別<xref:System.IO.TextWriter>類別包括：</span><span class="sxs-lookup"><span data-stu-id="b11ea-450">Classes that derive from <xref:System.IO.TextWriter> class include:</span></span>  
  
-   <xref:System.IO.StreamWriter>  
  
-   <xref:System.IO.StringWriter>  
  
-   <xref:System.CodeDom.Compiler.IndentedTextWriter>  
  
> [!NOTE]
>  <span data-ttu-id="b11ea-451"><xref:System.Xml.Serialization.XmlSerializer>無法序列化下列： 陣列<xref:System.Collections.ArrayList>和陣列<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="b11ea-451">The <xref:System.Xml.Serialization.XmlSerializer> cannot serialize the following: arrays of <xref:System.Collections.ArrayList> and arrays of <xref:System.Collections.Generic.List%601>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b11ea-452">下列範例會將與物件的序列化<xref:System.IO.TextWriter>。</span><span class="sxs-lookup"><span data-stu-id="b11ea-452">The following example serializes an object with a <xref:System.IO.TextWriter>.</span></span> <span data-ttu-id="b11ea-453">此範例也會建立<xref:System.Xml.Serialization.XmlSerializerNamespaces>物件並將兩個命名空間加入至物件。</span><span class="sxs-lookup"><span data-stu-id="b11ea-453">The example also creates an <xref:System.Xml.Serialization.XmlSerializerNamespaces> object and adds two namespaces to the object.</span></span> <span data-ttu-id="b11ea-454">定義序列化的物件的類別也化<xref:System.Xml.Serialization.XmlElementAttribute>屬性來指定每個項目的命名空間。</span><span class="sxs-lookup"><span data-stu-id="b11ea-454">The class that defines the serialized object is also attributed with <xref:System.Xml.Serialization.XmlElementAttribute> attributes to specify the namespace for each element.</span></span>  
  
 [!code-cpp[Classic XmlSerializer.Serialize1 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlSerializer.Serialize1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlSerializer.Serialize1 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlSerializer.Serialize1 Example/CS/source.cs#1)]
 [!code-vb[Classic XmlSerializer.Serialize1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlSerializer.Serialize1 Example/VB/source.vb#1)]
 [!code-xml[Classic XmlSerializer.Serialize1 Example#1](~/samples/snippets/common/VS_Snippets_Remoting/Classic XmlSerializer.Serialize1 Example/Common/simple.xml#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b11ea-455">在序列化期間發生錯誤。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-455">An error occurred during serialization.</span>
          </span>
          <span data-ttu-id="b11ea-456">可以使用 <see cref="P:System.Exception.InnerException" /> 屬性取得原始例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-456">The original exception is available using the <see cref="P:System.Exception.InnerException" /> property.</span>
          </span>
        </exception>
        <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public void Serialize (System.Xml.XmlWriter xmlWriter, object o, System.Xml.Serialization.XmlSerializerNamespaces namespaces);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Serialize(class System.Xml.XmlWriter xmlWriter, object o, class System.Xml.Serialization.XmlSerializerNamespaces namespaces) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Serialize(System::Xml::XmlWriter ^ xmlWriter, System::Object ^ o, System::Xml::Serialization::XmlSerializerNamespaces ^ namespaces);" />
      <MemberSignature Language="F#" Value="member this.Serialize : System.Xml.XmlWriter * obj * System.Xml.Serialization.XmlSerializerNamespaces -&gt; unit" Usage="xmlSerializer.Serialize (xmlWriter, o, namespaces)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlWriter" Type="System.Xml.XmlWriter" />
        <Parameter Name="o" Type="System.Object" />
        <Parameter Name="namespaces" Type="System.Xml.Serialization.XmlSerializerNamespaces" />
      </Parameters>
      <Docs>
        <param name="xmlWriter">
          <span data-ttu-id="b11ea-457">用來寫入 XML 文件的 <see cref="T:System.Xml.XmlWriter" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-457">The <see cref="T:System.Xml.XmlWriter" /> used to write the XML document.</span>
          </span>
        </param>
        <param name="o">
          <span data-ttu-id="b11ea-458">要序列化的 <see cref="T:System.Object" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-458">The <see cref="T:System.Object" /> to serialize.</span>
          </span>
        </param>
        <param name="namespaces">
          <span data-ttu-id="b11ea-459">物件所參考的 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-459">The <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> referenced by the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b11ea-460">將指定的 <see cref="T:System.Object" /> 序列化，使用指定的 <see cref="T:System.Xml.XmlWriter" /> 將 XML 文件寫入檔案，並參考指定的命名空間。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-460">Serializes the specified <see cref="T:System.Object" /> and writes the XML document to a file using the specified <see cref="T:System.Xml.XmlWriter" /> and references the specified namespaces.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b11ea-461">當<xref:System.Xml.Serialization.XmlSerializer.Serialize%2A>叫用方法、 公用欄位和讀取/寫入屬性的物件轉換成 XML。</span><span class="sxs-lookup"><span data-stu-id="b11ea-461">When the <xref:System.Xml.Serialization.XmlSerializer.Serialize%2A> method is invoked, the public fields and read/write properties of an object are converted into XML.</span></span> <span data-ttu-id="b11ea-462">不會序列化方法、 索引子、 私用欄位和唯讀屬性。</span><span class="sxs-lookup"><span data-stu-id="b11ea-462">Methods, indexers, private fields, and read-only properties are not serialized.</span></span> <span data-ttu-id="b11ea-463">若要序列化的所有欄位和屬性，公用和私用，使用<xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>。</span><span class="sxs-lookup"><span data-stu-id="b11ea-463">To serialize all fields and properties, both public and private, use the <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>.</span></span>  
  
 <span data-ttu-id="b11ea-464">使用`xmlWriter`參數來指定衍生自抽象物件<xref:System.Xml.XmlWriter>類別，其設計目的是要寫入 XML 文件。</span><span class="sxs-lookup"><span data-stu-id="b11ea-464">Use the `xmlWriter` parameter to specify an object that derives from the abstract <xref:System.Xml.XmlWriter> class, which is designed to write XML documents.</span></span> <span data-ttu-id="b11ea-465"><xref:System.Xml.XmlTextWriter>衍生自<xref:System.Xml.XmlWriter>。</span><span class="sxs-lookup"><span data-stu-id="b11ea-465">The <xref:System.Xml.XmlTextWriter> derives from the <xref:System.Xml.XmlWriter>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b11ea-466"><xref:System.Xml.Serialization.XmlSerializer>無法序列化下列： 陣列<xref:System.Collections.ArrayList>和陣列<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="b11ea-466">The <xref:System.Xml.Serialization.XmlSerializer> cannot serialize the following: arrays of <xref:System.Collections.ArrayList> and arrays of <xref:System.Collections.Generic.List%601>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b11ea-467">下列範例會將與物件的序列化<xref:System.Xml.XmlWriter>。</span><span class="sxs-lookup"><span data-stu-id="b11ea-467">The following example serializes an object with an <xref:System.Xml.XmlWriter>.</span></span> <span data-ttu-id="b11ea-468">此範例也會建立<xref:System.Xml.Serialization.XmlSerializerNamespaces>並將兩個命名空間加入至物件。</span><span class="sxs-lookup"><span data-stu-id="b11ea-468">The example also creates an <xref:System.Xml.Serialization.XmlSerializerNamespaces> and adds two namespaces to the object.</span></span> <span data-ttu-id="b11ea-469">數個執行個體<xref:System.Xml.Serialization.XmlElementAttribute>類別會套用至類別成員，指定每個項目命名空間。</span><span class="sxs-lookup"><span data-stu-id="b11ea-469">Several instances of the <xref:System.Xml.Serialization.XmlElementAttribute> class are applied to the class members to specify the namespace for each element.</span></span>  
  
 [!code-cpp[Classic XmlSerializer.Serialize5 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlSerializer.Serialize5 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlSerializer.Serialize5 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlSerializer.Serialize5 Example/CS/source.cs#1)]
 [!code-vb[Classic XmlSerializer.Serialize5 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlSerializer.Serialize5 Example/VB/source.vb#1)]
 [!code-xml[Classic XmlSerializer.Serialize5 Example#1](~/samples/snippets/common/VS_Snippets_Remoting/Classic XmlSerializer.Serialize5 Example/Common/simple.xml#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b11ea-470">在序列化期間發生錯誤。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-470">An error occurred during serialization.</span>
          </span>
          <span data-ttu-id="b11ea-471">可以使用 <see cref="P:System.Exception.InnerException" /> 屬性取得原始例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-471">The original exception is available using the <see cref="P:System.Exception.InnerException" /> property.</span>
          </span>
        </exception>
        <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
        <altmember cref="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)" />
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public void Serialize (System.Xml.XmlWriter xmlWriter, object o, System.Xml.Serialization.XmlSerializerNamespaces namespaces, string encodingStyle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Serialize(class System.Xml.XmlWriter xmlWriter, object o, class System.Xml.Serialization.XmlSerializerNamespaces namespaces, string encodingStyle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Serialize(System::Xml::XmlWriter ^ xmlWriter, System::Object ^ o, System::Xml::Serialization::XmlSerializerNamespaces ^ namespaces, System::String ^ encodingStyle);" />
      <MemberSignature Language="F#" Value="member this.Serialize : System.Xml.XmlWriter * obj * System.Xml.Serialization.XmlSerializerNamespaces * string -&gt; unit" Usage="xmlSerializer.Serialize (xmlWriter, o, namespaces, encodingStyle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlWriter" Type="System.Xml.XmlWriter" />
        <Parameter Name="o" Type="System.Object" />
        <Parameter Name="namespaces" Type="System.Xml.Serialization.XmlSerializerNamespaces" />
        <Parameter Name="encodingStyle" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xmlWriter">
          <span data-ttu-id="b11ea-472">用來寫入 XML 文件的 <see cref="T:System.Xml.XmlWriter" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-472">The <see cref="T:System.Xml.XmlWriter" /> used to write the XML document.</span>
          </span>
        </param>
        <param name="o">
          <span data-ttu-id="b11ea-473">要序列化的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-473">The object to serialize.</span>
          </span>
        </param>
        <param name="namespaces">
          <span data-ttu-id="b11ea-474">物件所參考的 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-474">The <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> referenced by the object.</span>
          </span>
        </param>
        <param name="encodingStyle">
          <span data-ttu-id="b11ea-475">序列化 XML 的編碼樣式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-475">The encoding style of the serialized XML.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b11ea-476">序列化指定的物件，使用指定的 <see cref="T:System.Xml.XmlWriter" /> 將 XML 文件寫入檔案，並參考指定的命名空間和編碼樣式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-476">Serializes the specified object and writes the XML document to a file using the specified <see cref="T:System.Xml.XmlWriter" /> and references the specified namespaces and encoding style.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b11ea-477">當<xref:System.Xml.Serialization.XmlSerializer.Serialize%2A>叫用方法、 公用欄位和讀取/寫入屬性的物件轉換成 XML。</span><span class="sxs-lookup"><span data-stu-id="b11ea-477">When the <xref:System.Xml.Serialization.XmlSerializer.Serialize%2A> method is invoked, the public fields and read/write properties of an object are converted into XML.</span></span> <span data-ttu-id="b11ea-478">不會序列化方法、 索引子、 私用欄位和唯讀屬性。</span><span class="sxs-lookup"><span data-stu-id="b11ea-478">Methods, indexers, private fields, and read-only properties are not serialized.</span></span> <span data-ttu-id="b11ea-479">若要序列化的所有欄位和屬性，公用和私用，使用<xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>。</span><span class="sxs-lookup"><span data-stu-id="b11ea-479">To serialize all fields and properties, both public and private, use the <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>.</span></span>  
  
 <span data-ttu-id="b11ea-480">使用`xmlWriter`參數來指定衍生自抽象物件<xref:System.Xml.XmlWriter>類別，其設計目的是要寫入 XML 文件。</span><span class="sxs-lookup"><span data-stu-id="b11ea-480">Use the `xmlWriter` parameter to specify an object that derives from the abstract <xref:System.Xml.XmlWriter> class, which is designed to write XML documents.</span></span> <span data-ttu-id="b11ea-481"><xref:System.Xml.XmlTextWriter>衍生自<xref:System.Xml.XmlWriter>。</span><span class="sxs-lookup"><span data-stu-id="b11ea-481">The <xref:System.Xml.XmlTextWriter> derives from the <xref:System.Xml.XmlWriter>.</span></span>  
  
 <span data-ttu-id="b11ea-482">設定`encodingStyle`參數 」http://schemas.xmlsoap.org/soap/encoding/"如 SOAP 1.1 版支援的編碼。 否則，請將它設定為"http://www.w3.org/2001/12/soap-encoding"for SOAP 1.2 版的編碼方式。</span><span class="sxs-lookup"><span data-stu-id="b11ea-482">Set the `encodingStyle` parameter to "http://schemas.xmlsoap.org/soap/encoding/" for SOAP version 1.1 encoding; otherwise, set it to "http://www.w3.org/2001/12/soap-encoding" for SOAP version 1.2 encoding.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b11ea-483"><xref:System.Xml.Serialization.XmlSerializer>無法序列化下列： 陣列<xref:System.Collections.ArrayList>和陣列<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="b11ea-483">The <xref:System.Xml.Serialization.XmlSerializer> cannot serialize the following: arrays of <xref:System.Collections.ArrayList> and arrays of <xref:System.Collections.Generic.List%601>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b11ea-484">在序列化期間發生錯誤。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-484">An error occurred during serialization.</span>
          </span>
          <span data-ttu-id="b11ea-485">可以使用 <see cref="P:System.Exception.InnerException" /> 屬性取得原始例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-485">The original exception is available using the <see cref="P:System.Exception.InnerException" /> property.</span>
          </span>
        </exception>
        <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
        <altmember cref="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)" />
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public void Serialize (System.Xml.XmlWriter xmlWriter, object o, System.Xml.Serialization.XmlSerializerNamespaces namespaces, string encodingStyle, string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Serialize(class System.Xml.XmlWriter xmlWriter, object o, class System.Xml.Serialization.XmlSerializerNamespaces namespaces, string encodingStyle, string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Serialize(System::Xml::XmlWriter ^ xmlWriter, System::Object ^ o, System::Xml::Serialization::XmlSerializerNamespaces ^ namespaces, System::String ^ encodingStyle, System::String ^ id);" />
      <MemberSignature Language="F#" Value="member this.Serialize : System.Xml.XmlWriter * obj * System.Xml.Serialization.XmlSerializerNamespaces * string * string -&gt; unit" Usage="xmlSerializer.Serialize (xmlWriter, o, namespaces, encodingStyle, id)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlWriter" Type="System.Xml.XmlWriter" />
        <Parameter Name="o" Type="System.Object" />
        <Parameter Name="namespaces" Type="System.Xml.Serialization.XmlSerializerNamespaces" />
        <Parameter Name="encodingStyle" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xmlWriter">
          <span data-ttu-id="b11ea-486">用來寫入 XML 文件的 <see cref="T:System.Xml.XmlWriter" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-486">The <see cref="T:System.Xml.XmlWriter" /> used to write the XML document.</span>
          </span>
        </param>
        <param name="o">
          <span data-ttu-id="b11ea-487">要序列化的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-487">The object to serialize.</span>
          </span>
        </param>
        <param name="namespaces">
          <span data-ttu-id="b11ea-488">
            <see langword="XmlSerializaerNamespaces" /> 執行個體，包含要使用的命名空間和前置詞。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-488">An instance of the <see langword="XmlSerializaerNamespaces" /> that contains namespaces and prefixes to use.</span>
          </span>
        </param>
        <param name="encodingStyle">
          <span data-ttu-id="b11ea-489">文件中使用的編碼方式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-489">The encoding used in the document.</span>
          </span>
        </param>
        <param name="id">
          <span data-ttu-id="b11ea-490">若為 SOAP 編碼的訊息，則為用於產生 ID 屬性的基底。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-490">For SOAP encoded messages, the base used to generate id attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b11ea-491">序列化指定的 <see cref="T:System.Object" />，並使用指定的 <see cref="T:System.Xml.XmlWriter" />、XML 命名空間和編碼方式，將 XML 文件寫入檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-491">Serializes the specified <see cref="T:System.Object" /> and writes the XML document to a file using the specified <see cref="T:System.Xml.XmlWriter" />, XML namespaces, and encoding.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b11ea-492">*識別碼*參數提供基底用來建立 SOAP 識別碼的字串。</span><span class="sxs-lookup"><span data-stu-id="b11ea-492">The *id* parameter supplies the base string used to create SOAP ids.</span></span> <span data-ttu-id="b11ea-493">根據預設，這些是 「 id1"、"id2"等等。</span><span class="sxs-lookup"><span data-stu-id="b11ea-493">By default, these are "id1", "id2" and so on.</span></span> <span data-ttu-id="b11ea-494">但如果參數設定為"myBase 」 所產生的值是"myBaseid1"，"myBaseid2"，依此類推。</span><span class="sxs-lookup"><span data-stu-id="b11ea-494">But if the parameter is set to "myBase" the generated values are "myBaseid1", "myBaseid2" and so on.</span></span> <span data-ttu-id="b11ea-495">這項功能用來跨整個 SOAP 訊息建立唯一的識別碼值。</span><span class="sxs-lookup"><span data-stu-id="b11ea-495">This functionality is used to create unique id values across the whole SOAP message.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnknownAttribute">
      <MemberSignature Language="C#" Value="public event System.Xml.Serialization.XmlAttributeEventHandler UnknownAttribute;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Xml.Serialization.XmlAttributeEventHandler UnknownAttribute" />
      <MemberSignature Language="DocId" Value="E:System.Xml.Serialization.XmlSerializer.UnknownAttribute" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UnknownAttribute As XmlAttributeEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Xml::Serialization::XmlAttributeEventHandler ^ UnknownAttribute;" />
      <MemberSignature Language="F#" Value="member this.UnknownAttribute : System.Xml.Serialization.XmlAttributeEventHandler " Usage="member this.UnknownAttribute : System.Xml.Serialization.XmlAttributeEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlAttributeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b11ea-496">當還原序列化期間，<see cref="T:System.Xml.Serialization.XmlSerializer" /> 遭遇未知型別的 XML 屬性時發生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-496">Occurs when the <see cref="T:System.Xml.Serialization.XmlSerializer" /> encounters an XML attribute of unknown type during deserialization.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b11ea-497">根據預設之後呼叫,<xref:System.Xml.Serialization.XmlSerializer.Deserialize%2A>方法，<xref:System.Xml.Serialization.XmlSerializer>會忽略未知型別的 XML 屬性。</span><span class="sxs-lookup"><span data-stu-id="b11ea-497">By default, after calling the <xref:System.Xml.Serialization.XmlSerializer.Deserialize%2A> method, the <xref:System.Xml.Serialization.XmlSerializer> ignores XML attributes of unknown types.</span></span> <span data-ttu-id="b11ea-498">不過，您可以使用這個事件來處理這種節點型別。</span><span class="sxs-lookup"><span data-stu-id="b11ea-498">However, you can use this event to handle such node types.</span></span>  
  
 <span data-ttu-id="b11ea-499">如果正在還原序列化類別的執行個體包含的欄位，傳回的陣列<xref:System.Xml.XmlAttribute>物件和<xref:System.Xml.Serialization.XmlAnyAttributeAttribute>已套用至欄位，<xref:System.Xml.Serialization.XmlSerializer.UnknownAttribute>事件不會發生。</span><span class="sxs-lookup"><span data-stu-id="b11ea-499">If the instance of the class being deserialized contains a field that returns an array of <xref:System.Xml.XmlAttribute> objects and an <xref:System.Xml.Serialization.XmlAnyAttributeAttribute> has been applied to the field, the <xref:System.Xml.Serialization.XmlSerializer.UnknownAttribute> event does not occur.</span></span> <span data-ttu-id="b11ea-500">相反地，所有的未知的 XML 屬性會收集到的陣列。</span><span class="sxs-lookup"><span data-stu-id="b11ea-500">Instead, all unknown XML attributes are collected into the array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b11ea-501">下列範例會列印任何未知的屬性時發生還原序列化的 XML 文件的相關資訊。</span><span class="sxs-lookup"><span data-stu-id="b11ea-501">The following example prints information about any unknown attributes encountered while deserializing an XML document.</span></span>  
  
 [!code-cpp[Classic XmlSerializer.UnknownAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlSerializer.UnknownAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlSerializer.UnknownAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlSerializer.UnknownAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic XmlSerializer.UnknownAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlSerializer.UnknownAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Serialization.XmlAnyAttributeAttribute" />
        <altmember cref="M:System.Xml.Serialization.XmlSerializer.CanDeserialize(System.Xml.XmlReader)" />
        <altmember cref="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)" />
        <altmember cref="E:System.Xml.Serialization.XmlSerializer.UnknownNode" />
        <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
      </Docs>
    </Member>
    <Member MemberName="UnknownElement">
      <MemberSignature Language="C#" Value="public event System.Xml.Serialization.XmlElementEventHandler UnknownElement;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Xml.Serialization.XmlElementEventHandler UnknownElement" />
      <MemberSignature Language="DocId" Value="E:System.Xml.Serialization.XmlSerializer.UnknownElement" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UnknownElement As XmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Xml::Serialization::XmlElementEventHandler ^ UnknownElement;" />
      <MemberSignature Language="F#" Value="member this.UnknownElement : System.Xml.Serialization.XmlElementEventHandler " Usage="member this.UnknownElement : System.Xml.Serialization.XmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b11ea-502">當還原序列化期間，<see cref="T:System.Xml.Serialization.XmlSerializer" /> 遭遇未知型別的 XML 項目時發生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-502">Occurs when the <see cref="T:System.Xml.Serialization.XmlSerializer" /> encounters an XML element of unknown type during deserialization.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b11ea-503">根據預設之後呼叫,<xref:System.Xml.Serialization.XmlSerializer.Deserialize%2A>方法，<xref:System.Xml.Serialization.XmlSerializer>會忽略未知型別的 XML 屬性。</span><span class="sxs-lookup"><span data-stu-id="b11ea-503">By default, after calling the <xref:System.Xml.Serialization.XmlSerializer.Deserialize%2A> method, the <xref:System.Xml.Serialization.XmlSerializer> ignores XML attributes of unknown types.</span></span> <span data-ttu-id="b11ea-504">不過，您可以使用這個事件來處理這種節點型別。</span><span class="sxs-lookup"><span data-stu-id="b11ea-504">However, you can use this event to handle such node types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b11ea-505">如果<xref:System.Xml.Serialization.XmlAnyElementAttribute>套用至傳回陣列的欄位<xref:System.Xml.XmlElement>物件時，所有未知的項目會收集陣列中。</span><span class="sxs-lookup"><span data-stu-id="b11ea-505">If the <xref:System.Xml.Serialization.XmlAnyElementAttribute> is applied to a field that returns an array of <xref:System.Xml.XmlElement> objects, all unknown elements are collected in the array.</span></span> <span data-ttu-id="b11ea-506">在此情況下，<xref:System.Xml.Serialization.XmlSerializer.UnknownElement>事件不會發生。</span><span class="sxs-lookup"><span data-stu-id="b11ea-506">In that case, the <xref:System.Xml.Serialization.XmlSerializer.UnknownElement> event does not occur.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b11ea-507">下列範例會還原序列化的類別，名為`Group`從名為 UnknownElements.xml 檔案。</span><span class="sxs-lookup"><span data-stu-id="b11ea-507">The following example deserializes a class named `Group` from a file named UnknownElements.xml.</span></span> <span data-ttu-id="b11ea-508">在類別中，沒有對應成員的檔案中找到的項目，是每當<xref:System.Xml.Serialization.XmlSerializer.UnknownElement>就會發生事件。</span><span class="sxs-lookup"><span data-stu-id="b11ea-508">Whenever an element is found in the file that has no corresponding member in the class, the <xref:System.Xml.Serialization.XmlSerializer.UnknownElement> event occurs.</span></span> <span data-ttu-id="b11ea-509">若要嘗試的範例，請將下列 XML 程式碼貼入名為 UnknownElements.xml 的檔案。</span><span class="sxs-lookup"><span data-stu-id="b11ea-509">To try the example, paste the following XML code into a file named UnknownElements.xml.</span></span>  
  
```  
<?xml version="1.0" encoding="utf-8"?>  
<Group xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">  
  <GroupName>MyGroup</GroupName>  
  <GroupSize>Large</GroupSize>  
  <GroupNumber>444</GroupNumber>  
  <GroupBase>West</GroupBase>  
</Group>  
```  
  
 [!code-cpp[XmlSerializer.UnknownElement Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/XmlSerializer.UnknownElement Example/CPP/unknownelement.cpp#1)]
 [!code-csharp[XmlSerializer.UnknownElement Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/XmlSerializer.UnknownElement Example/CS/unknownelement.cs#1)]
 [!code-vb[XmlSerializer.UnknownElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/XmlSerializer.UnknownElement Example/VB/unknownelement.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />
        <altmember cref="E:System.Xml.Serialization.XmlSerializer.UnknownNode" />
        <altmember cref="E:System.Xml.Serialization.XmlSerializer.UnknownAttribute" />
        <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
      </Docs>
    </Member>
    <Member MemberName="UnknownNode">
      <MemberSignature Language="C#" Value="public event System.Xml.Serialization.XmlNodeEventHandler UnknownNode;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Xml.Serialization.XmlNodeEventHandler UnknownNode" />
      <MemberSignature Language="DocId" Value="E:System.Xml.Serialization.XmlSerializer.UnknownNode" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UnknownNode As XmlNodeEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Xml::Serialization::XmlNodeEventHandler ^ UnknownNode;" />
      <MemberSignature Language="F#" Value="member this.UnknownNode : System.Xml.Serialization.XmlNodeEventHandler " Usage="member this.UnknownNode : System.Xml.Serialization.XmlNodeEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlNodeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b11ea-510">當還原序列化期間，<see cref="T:System.Xml.Serialization.XmlSerializer" /> 遭遇未知型別的 XML 節點時發生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-510">Occurs when the <see cref="T:System.Xml.Serialization.XmlSerializer" /> encounters an XML node of unknown type during deserialization.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b11ea-511">根據預設之後呼叫,<xref:System.Xml.Serialization.XmlSerializer.Deserialize%2A>方法，<xref:System.Xml.Serialization.XmlSerializer>會忽略未知的類型的 XML 節點。</span><span class="sxs-lookup"><span data-stu-id="b11ea-511">By default, after calling the <xref:System.Xml.Serialization.XmlSerializer.Deserialize%2A> method, the <xref:System.Xml.Serialization.XmlSerializer> ignores XML nodes of unknown types.</span></span> <span data-ttu-id="b11ea-512">不過，您可以使用這個事件來處理這種節點型別。</span><span class="sxs-lookup"><span data-stu-id="b11ea-512">However, you can use this event to handle such node types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b11ea-513">下列範例會列印任何發生未知的節點類型。</span><span class="sxs-lookup"><span data-stu-id="b11ea-513">The following example prints the type of any encountered unknown node.</span></span>  
  
 [!code-cpp[Classic XmlSerializer.UnknownNode Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlSerializer.UnknownNode Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlSerializer.UnknownNode Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlSerializer.UnknownNode Example/CS/source.cs#1)]
 [!code-vb[Classic XmlSerializer.UnknownNode Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlSerializer.UnknownNode Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />
        <altmember cref="T:System.Xml.Serialization.XmlAnyAttributeAttribute" />
        <altmember cref="M:System.Xml.Serialization.XmlSerializer.CanDeserialize(System.Xml.XmlReader)" />
        <altmember cref="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)" />
        <altmember cref="E:System.Xml.Serialization.XmlSerializer.UnknownAttribute" />
        <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
      </Docs>
    </Member>
    <Member MemberName="UnreferencedObject">
      <MemberSignature Language="C#" Value="public event System.Xml.Serialization.UnreferencedObjectEventHandler UnreferencedObject;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Xml.Serialization.UnreferencedObjectEventHandler UnreferencedObject" />
      <MemberSignature Language="DocId" Value="E:System.Xml.Serialization.XmlSerializer.UnreferencedObject" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UnreferencedObject As UnreferencedObjectEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Xml::Serialization::UnreferencedObjectEventHandler ^ UnreferencedObject;" />
      <MemberSignature Language="F#" Value="member this.UnreferencedObject : System.Xml.Serialization.UnreferencedObjectEventHandler " Usage="member this.UnreferencedObject : System.Xml.Serialization.UnreferencedObjectEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.UnreferencedObjectEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b11ea-514">在 SOAP 編碼的 XML 資料流還原序列化期間，<see cref="T:System.Xml.Serialization.XmlSerializer" /> 遇到未使用 (未參考) 的可辨認型別時發生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b11ea-514">Occurs during deserialization of a SOAP-encoded XML stream, when the <see cref="T:System.Xml.Serialization.XmlSerializer" /> encounters a recognized type that is not used or is unreferenced.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b11ea-515"><xref:System.Xml.Serialization.XmlSerializer.UnreferencedObject>才會發生事件時<xref:System.Xml.Serialization.XmlSerializer>用來還原序列化 XML 文件，其中包含 SOAP 訊息，以符合全球資訊網協會 (www.w3.org) 文件 < Simple Object Access Protocol (SOAP) 1.1 」 的第 5 節。</span><span class="sxs-lookup"><span data-stu-id="b11ea-515">The <xref:System.Xml.Serialization.XmlSerializer.UnreferencedObject> event only occurs when the <xref:System.Xml.Serialization.XmlSerializer> is used to deserialize an XML document that contains a SOAP message that conforms to section 5 of the World Wide Web Consortium (www.w3.org) document, "Simple Object Access Protocol (SOAP) 1.1".</span></span>  
  
 <span data-ttu-id="b11ea-516">遵循第 5 節的文件是以特殊格式。</span><span class="sxs-lookup"><span data-stu-id="b11ea-516">Documents that conform to section 5 are in a special format.</span></span> <span data-ttu-id="b11ea-517">最起碼，這類文件會包含 SOAP 訊息的主體。</span><span class="sxs-lookup"><span data-stu-id="b11ea-517">At the very least, such a document includes the main body of the SOAP message.</span></span> <span data-ttu-id="b11ea-518">不過，而不是所有型別定義內嵌文件中，某些型別定義可以編碼為文件中的最上層項目參考。</span><span class="sxs-lookup"><span data-stu-id="b11ea-518">However, rather than having all types defined inline in the document, some type definitions can be encoded as references to top-level elements in the document.</span></span> <span data-ttu-id="b11ea-519">因此，對於所參考的主要本文中找到每個項目，必須有對應的項目，其中包含的型別定義。</span><span class="sxs-lookup"><span data-stu-id="b11ea-519">Thus, for every element found in the main body that is a reference, there must be a corresponding element that contains the type definition.</span></span> <span data-ttu-id="b11ea-520">若要將建立相互關聯之參考項目的類型定義，具有型別定義`id`屬性設定為唯一字串識別碼和參考的項目已`href`屬性會參考相同的識別碼。</span><span class="sxs-lookup"><span data-stu-id="b11ea-520">To correlate the referencing element and the type definition, the type definition has an `id` attribute set to a unique string ID and the referencing element has an `href` attribute that references the same ID.</span></span>  
  
```  
<Group xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" id="id1" n1:GroupName=".NET" GroupNumber="ZDI=" CreationDate="2002-05-02" xmlns:n1="http:'www.cpandl.com">  
    <PosInt xsi:type="xsd:nonNegativeInteger">10000</PosInt>  
    <GroupVehicle href="#id2" />  
  </Group>  
  <Vehicle id="id2" n1:type="Vehicle" xmlns:n1="http://www.w3.org/2001/XMLSchema-instance">  
    <licenseNumber xmlns:q1="http://www.w3.org/2001/XMLSchema" n1:type="q1:string">1234</licenseNumber>  
  </Vehicle>  
```  
  
 <span data-ttu-id="b11ea-521"><xref:System.Xml.Serialization.XmlSerializer.UnreferencedObject>事件發生時，文件中找到的類型定義但沒有主體中的參數會參考它。</span><span class="sxs-lookup"><span data-stu-id="b11ea-521">The <xref:System.Xml.Serialization.XmlSerializer.UnreferencedObject> event occur when there is a type definition found in the document, but no parameter in the main body references it.</span></span> <span data-ttu-id="b11ea-522">發生事件時，您可以藉由檢查擷取的未參考物件的 XML 型別<xref:System.Xml.Serialization.UnreferencedObjectEventArgs.UnreferencedObject%2A>屬性<xref:System.Xml.Serialization.UnreferencedObjectEventArgs>類別。</span><span class="sxs-lookup"><span data-stu-id="b11ea-522">When the event occurs, you can retrieve the XML type of the unreferenced object by examining the <xref:System.Xml.Serialization.UnreferencedObjectEventArgs.UnreferencedObject%2A> property of the <xref:System.Xml.Serialization.UnreferencedObjectEventArgs> class.</span></span> <span data-ttu-id="b11ea-523">物件的 XML 識別碼由<xref:System.Xml.Serialization.UnreferencedObjectEventArgs.UnreferencedId%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="b11ea-523">The XML ID of the object is returned by the <xref:System.Xml.Serialization.UnreferencedObjectEventArgs.UnreferencedId%2A> property.</span></span>  
  
 <span data-ttu-id="b11ea-524"><xref:System.Xml.Serialization.XmlSerializer.UnreferencedObject>事件不應該與混淆<xref:System.Xml.Serialization.XmlSerializer.UnknownElement>和<xref:System.Xml.Serialization.XmlSerializer.UnknownNode>沒有對應到 XML 節點或項目類型的類別成員時，發生的事件。</span><span class="sxs-lookup"><span data-stu-id="b11ea-524">The <xref:System.Xml.Serialization.XmlSerializer.UnreferencedObject> event should not be confused with the <xref:System.Xml.Serialization.XmlSerializer.UnknownElement> and <xref:System.Xml.Serialization.XmlSerializer.UnknownNode> events, which occur when there is no class member that corresponds to the XML node or element type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b11ea-525">下列範例會將<xref:System.Xml.Serialization.UnreferencedObjectEventHandler>至<xref:System.Xml.Serialization.XmlSerializer>。</span><span class="sxs-lookup"><span data-stu-id="b11ea-525">The following example adds an <xref:System.Xml.Serialization.UnreferencedObjectEventHandler> to an <xref:System.Xml.Serialization.XmlSerializer>.</span></span> <span data-ttu-id="b11ea-526">事件由處理`Serializer``_``UnreferencedObject`方法。</span><span class="sxs-lookup"><span data-stu-id="b11ea-526">The event is handled by the `Serializer``_``UnreferencedObject` method.</span></span> <span data-ttu-id="b11ea-527">要執行範例，剪下並貼入名為"UnrefObj.xml"的檔案中的下列 XML 程式碼。</span><span class="sxs-lookup"><span data-stu-id="b11ea-527">To run the example, cut and paste the following XML into a file named "UnrefObj.xml".</span></span>  
  
```  
<wrapper>  
  <Group xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" id="id1" n1:GroupName=".NET" xmlns:n1="http://www.cpandl.com">  
   </Group>  
<Vehicle id="id2" n1:type="Vehicle" xmlns:n1="http://www.w3.org/2001/XMLSchema-instance">  
    <licenseNumber xmlns:q1="http://www.w3.org/2001/XMLSchema" n1:type="q1:string">ABCD</licenseNumber>  
  </Vehicle>  
<Vehicle id="id3" n1:type="Vehicle" xmlns:n1="http://www.w3.org/2001/XMLSchema-instance">  
    <licenseNumber xmlns:q1="http://www.w3.org/2001/XMLSchema" n1:type="q1:string">1234</licenseNumber>  
  </Vehicle>  
</wrapper>  
```  
  
 [!code-cpp[UnreferencedObject Event Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/UnreferencedObject Event Example/CPP/unrefobj.cpp#1)]
 [!code-csharp[UnreferencedObject Event Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/UnreferencedObject Event Example/CS/unrefobj.cs#1)]
 [!code-vb[UnreferencedObject Event Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/UnreferencedObject Event Example/VB/unrefobj.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
      </Docs>
    </Member>
  </Members>
</Type>