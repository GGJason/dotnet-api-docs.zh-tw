<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IXmlSerializable.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac58155c578ca3a365629ee4d705a95789ebfd67428.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8155c578ca3a365629ee4d705a95789ebfd67428</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xml.Serialization.IXmlSerializable">
          <source>Provides custom formatting for XML serialization and deserialization.</source>
          <target state="translated">為 XML 序列化和還原序列化提供自訂格式。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.IXmlSerializable">
          <source>There are two reasons to implement this interface.</source>
          <target state="translated">有兩個原因，若要實作這個介面。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.IXmlSerializable">
          <source>The first is to control how your object is serialized or deserialized by the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>.</source>
          <target state="translated">第一個方法是控制如何序列化或還原序列化的物件<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.IXmlSerializable">
          <source>For example, you can chunk data into bytes instead of buffering large data sets, and also avoid the inflation that occurs when the data is encoded using Base64 encoding.</source>
          <target state="translated">例如，您可以資料分成而不是緩衝處理大型資料集，位元組區塊，並還可避免對資料進行編碼使用 Base64 編碼時所發生的擴大。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.IXmlSerializable">
          <source>To control the serialization, implement the <ph id="ph1">&lt;xref:System.Xml.Serialization.IXmlSerializable.ReadXml%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Xml.Serialization.IXmlSerializable.WriteXml%2A&gt;</ph> methods to control the <ph id="ph3">&lt;xref:System.Xml.XmlReader&gt;</ph> and <ph id="ph4">&lt;xref:System.Xml.XmlWriter&gt;</ph> classes used to read and write the XML.</source>
          <target state="translated">若要控制序列化，實作<ph id="ph1">&lt;xref:System.Xml.Serialization.IXmlSerializable.ReadXml%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Xml.Serialization.IXmlSerializable.WriteXml%2A&gt;</ph>方法來控制<ph id="ph3">&lt;xref:System.Xml.XmlReader&gt;</ph>和<ph id="ph4">&lt;xref:System.Xml.XmlWriter&gt;</ph>類別用來讀取和寫入 XML。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.IXmlSerializable">
          <source>For an example of this, see <bpt id="p1">[</bpt>How to: Chunk Serialized Data<ept id="p1">](~/docs/standard/serialization/how-to-chunk-serialized-data.md)</ept>.</source>
          <target state="translated">這個範例，請參閱<bpt id="p1">[</bpt>How to： 區塊序列化資料<ept id="p1">](~/docs/standard/serialization/how-to-chunk-serialized-data.md)</ept>。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.IXmlSerializable">
          <source>The second reason is to be able to control the schema.</source>
          <target state="translated">第二個原因是要能夠控制結構描述。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.IXmlSerializable">
          <source>To enable this, you must apply the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSchemaProviderAttribute&gt;</ph> to the serializable type, and specify the name of the static member that returns the schema.</source>
          <target state="translated">若要啟用此功能，您必須套用<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSchemaProviderAttribute&gt;</ph>以可序列化類型，並指定傳回的結構描述之靜態成員的名稱。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.IXmlSerializable">
          <source>See the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSchemaProviderAttribute&gt;</ph> for an example.</source>
          <target state="translated">請參閱<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSchemaProviderAttribute&gt;</ph>的範例。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.IXmlSerializable">
          <source>A class that implements the interface must have a parameterless constructor.</source>
          <target state="translated">實作介面的類別必須具有無參數建構函式。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.IXmlSerializable">
          <source>This is a requirement of the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> class.</source>
          <target state="translated">這是一個必要條件<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>類別。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.IXmlSerializable">
          <source>The following example code shows an implementation of the <ph id="ph1">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph> interface that serializes a private field.</source>
          <target state="translated">下列範例程式碼顯示實作<ph id="ph1">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>序列化私用欄位的介面。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.IXmlSerializable.GetSchema">
          <source>This method is reserved and should not be used.</source>
          <target state="translated">這個方法已保留且不應使用。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.IXmlSerializable.GetSchema">
          <source>When implementing the <ph id="ph1">&lt;see langword="IXmlSerializable" /&gt;</ph> interface, you should return <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <ph id="ph4">&lt;see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" /&gt;</ph> to the class.</source>
          <target state="translated">實作 <ph id="ph1">&lt;see langword="IXmlSerializable" /&gt;</ph> 介面時，您應該從這個方法傳回 <ph id="ph2">&lt;see langword="null" /&gt;</ph> (在 Visual Basic 中為 <ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>)，而且如果需要指定自訂結構描述，請改為將 <ph id="ph4">&lt;see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" /&gt;</ph> 套用至類別。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.IXmlSerializable.GetSchema">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchema" /&gt;</ph> that describes the XML representation of the object that is produced by the <ph id="ph2">&lt;see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /&gt;</ph> method and consumed by the <ph id="ph3">&lt;see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchema" /&gt;</ph>，描述物件的 XML 表示，該物件由 <ph id="ph2">&lt;see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /&gt;</ph> 方法產生，由 <ph id="ph3">&lt;see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /&gt;</ph> 方法取用。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.IXmlSerializable.GetSchema">
          <source>When serializing or deserializing an object, the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> class does not perform XML validation.</source>
          <target state="translated">當序列化或還原序列化物件，<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>類別不會執行 XML 驗證。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.IXmlSerializable.GetSchema">
          <source>For this reason, it is often safe to omit schema information by providing a trivial implementation of this method, for example by returning <ph id="ph1">`null`</ph> (<ph id="ph2">`Nothing`</ph> in Visual Basic).</source>
          <target state="translated">基於這個理由，通常很安全，使其省略結構描述資訊提供一般實作這個方法，例如藉由傳回<ph id="ph1">`null`</ph>(<ph id="ph2">`Nothing`</ph>在 Visual Basic 中)。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.IXmlSerializable.GetSchema">
          <source>If providing schema information is necessary, you should use the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSchemaProviderAttribute&gt;</ph> attribute.</source>
          <target state="translated">如果您不需要提供結構描述資訊，您應該使用<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSchemaProviderAttribute&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.IXmlSerializable.GetSchema">
          <source>The <ph id="ph1">`GetSchema`</ph> method should still return <ph id="ph2">`null`</ph> (or <ph id="ph3">`Nothing`</ph>).</source>
          <target state="translated"><ph id="ph1">`GetSchema`</ph>方法仍應傳回<ph id="ph2">`null`</ph>(或<ph id="ph3">`Nothing`</ph>)。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.IXmlSerializable.GetSchema">
          <source>Some <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> types as well as legacy custom types implementing the <ph id="ph2">`IXmlSerializable`</ph> interface may be using <ph id="ph3">`GetSchema`</ph> instead of <ph id="ph4">`XmlSchemaProvider`</ph>.</source>
          <target state="translated">某些<ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>型別以及舊版實作的自訂型別<ph id="ph2">`IXmlSerializable`</ph>可能使用介面<ph id="ph3">`GetSchema`</ph>而不是<ph id="ph4">`XmlSchemaProvider`</ph>。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.IXmlSerializable.GetSchema">
          <source>In this case, the method returns an accurate XML schema that describes the XML representation of the object generated by the <ph id="ph1">&lt;xref:System.Data.DataSet.WriteXml%2A&gt;</ph> method.</source>
          <target state="translated">在此情況下，方法會傳回正確的 XML 結構描述，描述所產生之物件的 XML 表示<ph id="ph1">&lt;xref:System.Data.DataSet.WriteXml%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> stream from which the object is deserialized.</source>
          <target state="translated">還原序列化物件的 <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> 資料流。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)">
          <source>Generates an object from its XML representation.</source>
          <target state="translated">從物件的 XML 表示產生該物件。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.IXmlSerializable.ReadXml%2A&gt;</ph> method must reconstitute your object using the information that was written by the <ph id="ph2">&lt;xref:System.Xml.Serialization.IXmlSerializable.WriteXml%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Serialization.IXmlSerializable.ReadXml%2A&gt;</ph>方法必須 deserialization 物件使用的資訊，由寫入<ph id="ph2">&lt;xref:System.Xml.Serialization.IXmlSerializable.WriteXml%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)">
          <source>When this method is called, the reader is positioned on the start tag that wraps the information for your type.</source>
          <target state="translated">呼叫這個方法時，讀取器位於包裝您的類型資訊的開始標記上。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)">
          <source>That is, directly on the start tag that indicates the beginning of a serialized object.</source>
          <target state="translated">也就是直接在開始標記上，表示已序列化物件的開頭。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)">
          <source>When this method returns, it must have read the entire element from beginning to end, including all of its contents.</source>
          <target state="translated">此方法傳回時，它必須有讀取整個項目從開始到結束，包括其所有內容。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)">
          <source>Unlike the <ph id="ph1">&lt;xref:System.Xml.Serialization.IXmlSerializable.WriteXml%2A&gt;</ph> method, the framework does not handle the wrapper element automatically.</source>
          <target state="translated">不同於<ph id="ph1">&lt;xref:System.Xml.Serialization.IXmlSerializable.WriteXml%2A&gt;</ph>方法，此架構不會自動處理的包裝函式項目。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)">
          <source>Your implementation must do so.</source>
          <target state="translated">您的實作必須這麼做。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)">
          <source>Failing to observe these positioning rules may cause code to generate unexpected runtime exceptions or corrupt data.</source>
          <target state="translated">無法看到這些位置的規則可能會導致程式碼來產生意外發生執行階段例外狀況或損毀的資料。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)">
          <source>When implementing this method, you should consider the possibility that a malicious user might provide a well-formed but invalid XML representation in order to disable or otherwise alter the behavior of your application.</source>
          <target state="translated">當實作這個方法，您應該考慮可能性惡意使用者可能會提供格式正確，但不正確的 XML 表示，以停用或變更您的應用程式的行為。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)">
          <source>The following example illustrates an implementation of the <ph id="ph1">&lt;xref:System.Xml.Serialization.IXmlSerializable.ReadXml%2A&gt;</ph> method.</source>
          <target state="translated">下列範例說明實作<ph id="ph1">&lt;xref:System.Xml.Serialization.IXmlSerializable.ReadXml%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)">
          <source>The following example illustrates the use of the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> class to deserialize this object.</source>
          <target state="translated">下列範例說明使用<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>還原序列化此物件的類別。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> stream to which the object is serialized.</source>
          <target state="translated">序列化物件的目標 <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> 資料流。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)">
          <source>Converts an object into its XML representation.</source>
          <target state="translated">將物件轉換成其 XML 表示。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.IXmlSerializable.WriteXml%2A&gt;</ph> implementation you provide should write out the XML representation of the object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Serialization.IXmlSerializable.WriteXml%2A&gt;</ph>您提供的實作應該寫出物件的 XML 表示法。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)">
          <source>The framework writes a wrapper element and positions the XML writer after its start.</source>
          <target state="translated">架構會寫入包裝函式項目並放在其開始之後的 XML 寫入器。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)">
          <source>Your implementation may write its contents, including child elements.</source>
          <target state="translated">您的實作可能會撰寫其內容，包括子項目。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)">
          <source>The framework then closes the wrapper element.</source>
          <target state="translated">架構，然後關閉包裝函式項目。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)">
          <source>Write sufficient information to the <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> stream to allow the <ph id="ph2">&lt;xref:System.Xml.Serialization.IXmlSerializable.ReadXml%2A&gt;</ph> method to reconstitute your object.</source>
          <target state="translated">將足夠的資訊寫入<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>允許的資料流<ph id="ph2">&lt;xref:System.Xml.Serialization.IXmlSerializable.ReadXml%2A&gt;</ph>以重新構成您物件的方法。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)">
          <source>For example, if your object state includes an array variable, be sure to write the length of the array, or use a parent element to contain the elements that describe the array values, so that you know how many values to read when the object is reconstituted.</source>
          <target state="translated">比方說，如果您的物件狀態會包括陣列變數，務必要寫入的陣列長度或用於父項目包含描述陣列值的項目，好讓您知道要讀取時重新組成物件的多少值。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)">
          <source>The following example illustrates an implementation of the <ph id="ph1">&lt;xref:System.Xml.Serialization.IXmlSerializable.WriteXml%2A&gt;</ph> method.</source>
          <target state="translated">下列範例說明實作<ph id="ph1">&lt;xref:System.Xml.Serialization.IXmlSerializable.WriteXml%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)">
          <source>The following example illustrates the use of the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> class to deserialize this object.</source>
          <target state="translated">下列範例說明使用<ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>還原序列化此物件的類別。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>