<Type Name="SoapTypeAttribute" FullName="System.Xml.Serialization.SoapTypeAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="497180de179783fdc43fdf8a25df58e504b99def" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36440112" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SoapTypeAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SoapTypeAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Serialization.SoapTypeAttribute" />
  <TypeSignature Language="VB.NET" Value="Public Class SoapTypeAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class SoapTypeAttribute : Attribute" />
  <TypeSignature Language="F#" Value="type SoapTypeAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Enum | System.AttributeTargets.Interface | System.AttributeTargets.Struct)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>控制類別執行個體被序列化為 SOAP 編碼 XML 時，<see cref="T:System.Xml.Serialization.XmlSerializer" /> 所產生的結構描述。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Serialization.SoapTypeAttribute>類別屬於一系列屬性可控制如何<xref:System.Xml.Serialization.XmlSerializer>序列化或還原序列化的物件做為編碼的 SOAP XML。 所產生的 XML 符合全球資訊網協會 (www.w3.org) 文件，而 「 簡單物件存取通訊協定 (SOAP) 1.1 」 的第 5 節。 如需類似屬性的完整清單，請參閱[屬性，控制編碼 SOAP 序列化](~/docs/standard/serialization/attributes-that-control-encoded-soap-serialization.md)。  
  
 若要序列化的物件做為編碼的 SOAP 訊息，建構<xref:System.Xml.Serialization.XmlSerializer>使用<xref:System.Xml.Serialization.XmlTypeMapping>以建立<xref:System.Xml.Serialization.SoapReflectionImporter.ImportTypeMapping%2A>方法<xref:System.Xml.Serialization.SoapReflectionImporter>類別。  
  
 <xref:System.Xml.Serialization.SoapTypeAttribute>只可以套用至類別宣告。  
  
 <xref:System.Xml.Serialization.SoapTypeAttribute.IncludeInSchema%2A>屬性會決定是否要產生的 XML 項目類型包含在產生的 XML 資料流的 XML 結構描述文件 (.xsd)。 若要查看結構描述，請將類別編譯為 DLL 檔案。 將所產生的檔案傳遞的引數為[XML 結構描述定義工具 (Xsd.exe)](~/docs/standard/serialization/xml-schema-definition-tool-xsd-exe.md)。 此工具會產生 XML 結構描述的執行個體所序列化的類別時產生的 XML 資料流<xref:System.Xml.Serialization.XmlSerializer>類別。  
  
 設定不同的命名空間會導致 Xsd.exe 寫入序列化類別時產生的 XML 資料流不同的結構描述 (.xsd) 檔案。  
  
   
  
## Examples  
 下列範例會序列化類別，名為`Group`。 <xref:System.Xml.Serialization.SoapTypeAttribute>與套用至類別、<xref:System.Xml.Serialization.SoapTypeAttribute.TypeName%2A>設為"SoapGroupType"。 <xref:System.Xml.Serialization.SoapTypeAttribute>也覆寫，變更<xref:System.Xml.Serialization.SoapTypeAttribute.TypeName%2A>到 「 小組 」。 這兩個版本都會加以序列化，導致兩個檔案： SoapType.xml 和 SoapType2.xml。  
  
 [!code-cpp[SoapTypeAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SoapTypeAttribute Example/CPP/soaptype.cpp#1)]
 [!code-csharp[SoapTypeAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SoapTypeAttribute Example/CS/soaptype.cs#1)]
 [!code-vb[SoapTypeAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SoapTypeAttribute Example/VB/soaptype.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Xml.Serialization.SoapTypeAttribute" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SoapTypeAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.SoapTypeAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SoapTypeAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Xml.Serialization.SoapTypeAttribute" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 建立<xref:System.Xml.Serialization.SoapTypeAttribute>時覆寫之型別的序列化。 若要將物件指派<xref:System.Xml.Serialization.SoapAttributes.SoapType%2A>屬性<xref:System.Xml.Serialization.SoapAttributes>並加入<xref:System.Xml.Serialization.SoapAttributes>至<xref:System.Xml.Serialization.SoapAttributeOverrides>。 請參閱<xref:System.Xml.Serialization.SoapAttributeOverrides>如需詳細資訊覆寫 SOAP 序列化類別概觀。  
  
   
  
## Examples  
 下列範例會序列化類別，名為`Group`。 <xref:System.Xml.Serialization.SoapTypeAttribute>會套用到與類別<xref:System.Xml.Serialization.SoapTypeAttribute.TypeName%2A>設為"SoapGroupType"。 <xref:System.Xml.Serialization.SoapTypeAttribute>也覆寫，變更<xref:System.Xml.Serialization.SoapTypeAttribute.TypeName%2A>到 「 小組 」。 這兩個版本都會加以序列化，導致兩個檔案： SoapType.xml 和 SoapType2.xml。  
  
 [!code-cpp[SoapTypeAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SoapTypeAttribute Example/CPP/soaptype.cpp#1)]
 [!code-csharp[SoapTypeAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SoapTypeAttribute Example/CS/soaptype.cs#1)]
 [!code-vb[SoapTypeAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SoapTypeAttribute Example/VB/soaptype.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SoapTypeAttribute (string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.SoapTypeAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (typeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SoapTypeAttribute(System::String ^ typeName);" />
      <MemberSignature Language="F#" Value="new System.Xml.Serialization.SoapTypeAttribute : string -&gt; System.Xml.Serialization.SoapTypeAttribute" Usage="new System.Xml.Serialization.SoapTypeAttribute typeName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="typeName">XML 型別的名稱，是 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 序列化類別執行個體時所產生的 (並且對類別執行個體進行還原序列化時所辨識的)。</param>
        <summary>初始化 <see cref="T:System.Xml.Serialization.SoapTypeAttribute" /> 類別的新執行個體，並指定 XML 型別的名稱。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 建立<xref:System.Xml.Serialization.SoapTypeAttribute>時覆寫之型別的序列化。 若要將物件指派<xref:System.Xml.Serialization.SoapAttributes.SoapType%2A>屬性<xref:System.Xml.Serialization.SoapAttributes>並加入<xref:System.Xml.Serialization.SoapAttributes>至<xref:System.Xml.Serialization.SoapAttributeOverrides>。 請參閱<xref:System.Xml.Serialization.SoapAttributeOverrides>如需詳細資訊覆寫 SOAP 序列化類別概觀。  
  
   
  
## Examples  
 下列範例會序列化類別，名為`Group`。 <xref:System.Xml.Serialization.SoapTypeAttribute>會套用到與類別<xref:System.Xml.Serialization.SoapTypeAttribute.TypeName%2A>設為"SoapGroupType"。 <xref:System.Xml.Serialization.SoapTypeAttribute>也覆寫，變更<xref:System.Xml.Serialization.SoapTypeAttribute.TypeName%2A>到 「 小組 」。 這兩個版本都會加以序列化，導致兩個檔案： SoapType.xml 和 SoapType2.xml。  
  
 [!code-cpp[SoapTypeAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SoapTypeAttribute Example/CPP/soaptype.cpp#1)]
 [!code-csharp[SoapTypeAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SoapTypeAttribute Example/CS/soaptype.cs#1)]
 [!code-vb[SoapTypeAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SoapTypeAttribute Example/VB/soaptype.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SoapTypeAttribute (string typeName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string typeName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.SoapTypeAttribute.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (typeName As String, ns As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SoapTypeAttribute(System::String ^ typeName, System::String ^ ns);" />
      <MemberSignature Language="F#" Value="new System.Xml.Serialization.SoapTypeAttribute : string * string -&gt; System.Xml.Serialization.SoapTypeAttribute" Usage="new System.Xml.Serialization.SoapTypeAttribute (typeName, ns)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="typeName">XML 型別的名稱，是 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 序列化類別執行個體時所產生的 (並且對類別執行個體進行還原序列化時所辨識的)。</param>
        <param name="ns">型別的 XML 命名空間。</param>
        <summary>初始化 <see cref="T:System.Xml.Serialization.SoapTypeAttribute" /> 類別的新執行個體，並指定該型別的名稱和 XML 命名空間。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 建立<xref:System.Xml.Serialization.SoapTypeAttribute>時覆寫之型別的序列化。 若要將物件指派<xref:System.Xml.Serialization.SoapAttributes.SoapType%2A>屬性<xref:System.Xml.Serialization.SoapAttributes>並加入<xref:System.Xml.Serialization.SoapAttributes>至<xref:System.Xml.Serialization.SoapAttributeOverrides>。 請參閱<xref:System.Xml.Serialization.SoapAttributeOverrides>如需有關覆寫 SOAP 序列化類別概觀。  
  
 如果您設定<xref:System.Xml.Serialization.SoapTypeAttribute.Namespace%2A>多個類型的值 (亦即，如果您將屬性套用至使用不同的多個類別<xref:System.Xml.Serialization.SoapTypeAttribute.Namespace%2A>每個值)，則[XML 結構描述定義工具 (Xsd.exe)](~/docs/standard/serialization/xml-schema-definition-tool-xsd-exe.md)會產生不同的每個類型的結構描述檔案 (.xsd)。 這是因為每種類型的設定不同的命名空間呈現每個型別不同於其他項目，讓所需的每個型別寫出做為獨立的實體。  
  
   
  
## Examples  
 下列範例會序列化類別，名為`Group`。 <xref:System.Xml.Serialization.SoapTypeAttribute>會套用到與類別<xref:System.Xml.Serialization.SoapTypeAttribute.TypeName%2A>設為"SoapGroupType"。 <xref:System.Xml.Serialization.SoapTypeAttribute>也覆寫，變更<xref:System.Xml.Serialization.SoapTypeAttribute.TypeName%2A>到 「 小組 」。 這兩個版本都會加以序列化，導致兩個檔案： SoapType.xml 和 SoapType2.xml。  
  
 [!code-cpp[SoapTypeAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SoapTypeAttribute Example/CPP/soaptype.cpp#1)]
 [!code-csharp[SoapTypeAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SoapTypeAttribute Example/CS/soaptype.cs#1)]
 [!code-vb[SoapTypeAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SoapTypeAttribute Example/VB/soaptype.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IncludeInSchema">
      <MemberSignature Language="C#" Value="public bool IncludeInSchema { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IncludeInSchema" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.SoapTypeAttribute.IncludeInSchema" />
      <MemberSignature Language="VB.NET" Value="Public Property IncludeInSchema As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IncludeInSchema { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IncludeInSchema : bool with get, set" Usage="System.Xml.Serialization.SoapTypeAttribute.IncludeInSchema" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出是否將型別包含在 SOAP 編碼的 XML 結構描述文件中。</summary>
        <value>若要在 SOAP 編碼 XML 結構描述文件中包含型別，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 套用<xref:System.Xml.Serialization.SoapTypeAttribute>至類別宣告中，指定是否要包含在 XML 結構描述文件中的型別。 若要查看設定之屬性的結果<xref:System.Xml.Serialization.SoapTypeAttribute>類別，並編譯為可執行檔或 DLL，應用程式同時傳遞至所產生的檔案[XML 結構描述定義工具 (Xsd.exe)](~/docs/standard/serialization/xml-schema-definition-tool-xsd-exe.md)。 工具會將結構描述，包括 XML 資料流序列化類別時產生的型別定義。  
  
   
  
## Examples  
 下列範例會序列化類別，名為`Group`。 <xref:System.Xml.Serialization.SoapTypeAttribute>會套用到與類別<xref:System.Xml.Serialization.SoapTypeAttribute.TypeName%2A>設為"SoapGroupType"。 <xref:System.Xml.Serialization.SoapTypeAttribute>也覆寫，變更<xref:System.Xml.Serialization.SoapTypeAttribute.TypeName%2A>到 「 小組 」。 這兩個版本都會加以序列化，導致兩個檔案： SoapType.xml 和 SoapType2.xml。  
  
 [!code-cpp[SoapTypeAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SoapTypeAttribute Example/CPP/soaptype.cpp#1)]
 [!code-csharp[SoapTypeAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SoapTypeAttribute Example/CS/soaptype.cs#1)]
 [!code-vb[SoapTypeAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SoapTypeAttribute Example/VB/soaptype.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.SoapTypeAttribute.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string with get, set" Usage="System.Xml.Serialization.SoapTypeAttribute.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 XML 型別的命名空間。</summary>
        <value>XML 型別的命名空間。 預設為空字串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果您設定<xref:System.Xml.Serialization.SoapTypeAttribute.Namespace%2A>多個類型的值 (亦即，如果您將屬性套用至使用不同的多個類別<xref:System.Xml.Serialization.SoapTypeAttribute.Namespace%2A>每個值)，則[XML 結構描述定義工具 (Xsd.exe)](~/docs/standard/serialization/xml-schema-definition-tool-xsd-exe.md)會產生不同的每個類型的結構描述檔案 (.xsd)。 這是因為每種類型的設定不同的命名空間呈現每個型別不同於其他項目，讓所需的每個型別寫出做為獨立的實體。  
  
   
  
## Examples  
 下列範例會序列化類別，名為`Group`。 <xref:System.Xml.Serialization.SoapTypeAttribute>會套用到與類別<xref:System.Xml.Serialization.SoapTypeAttribute.TypeName%2A>設為"SoapGroupType"。 <xref:System.Xml.Serialization.SoapTypeAttribute>也覆寫，變更<xref:System.Xml.Serialization.SoapTypeAttribute.TypeName%2A>到 「 小組 」。 這兩個版本都會加以序列化，導致兩個檔案： SoapType.xml 和 SoapType2.xml。  
  
 [!code-cpp[SoapTypeAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SoapTypeAttribute Example/CPP/soaptype.cpp#1)]
 [!code-csharp[SoapTypeAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SoapTypeAttribute Example/CS/soaptype.cs#1)]
 [!code-vb[SoapTypeAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SoapTypeAttribute Example/VB/soaptype.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public string TypeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TypeName" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.SoapTypeAttribute.TypeName" />
      <MemberSignature Language="VB.NET" Value="Public Property TypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TypeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TypeName : string with get, set" Usage="System.Xml.Serialization.SoapTypeAttribute.TypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 XML 型別的名稱。</summary>
        <value>XML 型別的名稱。 預設為類別名稱。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 套用<xref:System.Xml.Serialization.SoapTypeAttribute>類別來指定 XML 類型的命名空間、 XML 的型別名稱，以及是否要包含在 XML 結構描述文件中的型別。 若要查看設定結果<xref:System.Xml.Serialization.SoapTypeAttribute>物件的屬性，您應用程式編譯為可執行檔或 DLL，並傳遞至所產生的檔案[XML 結構描述定義工具 (Xsd.exe)](~/docs/standard/serialization/xml-schema-definition-tool-xsd-exe.md)。 工具會將結構描述，包括類型定義。  
  
   
  
## Examples  
 下列範例會序列化類別，名為`Group`。 <xref:System.Xml.Serialization.SoapTypeAttribute>會套用到與類別<xref:System.Xml.Serialization.SoapTypeAttribute.TypeName%2A>設為"SoapGroupType"。 <xref:System.Xml.Serialization.SoapTypeAttribute>也覆寫，變更<xref:System.Xml.Serialization.SoapTypeAttribute.TypeName%2A>到 「 小組 」。 這兩個版本都會加以序列化，導致兩個檔案： SoapType.xml 和 SoapType2.xml。  
  
 [!code-cpp[SoapTypeAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SoapTypeAttribute Example/CPP/soaptype.cpp#1)]
 [!code-csharp[SoapTypeAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SoapTypeAttribute Example/CS/soaptype.cs#1)]
 [!code-vb[SoapTypeAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SoapTypeAttribute Example/VB/soaptype.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>