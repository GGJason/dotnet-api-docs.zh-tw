<Type Name="ObjectQuery&lt;T&gt;" FullName="System.Data.Objects.ObjectQuery&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8527b392b7347bbac99bcbc2e1d96eef4687848b" /><Meta Name="ms.sourcegitcommit" Value="42a3c35677e9d87eeb503607ae50c9d39827d414" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="12/17/2018" /><Meta Name="ms.locfileid" Value="53490579" /></Metadata><TypeSignature Language="C#" Value="public class ObjectQuery&lt;T&gt; : System.Data.Objects.ObjectQuery, System.Collections.Generic.IEnumerable&lt;T&gt;, System.ComponentModel.IListSource, System.Linq.IOrderedQueryable&lt;T&gt;, System.Linq.IQueryable&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ObjectQuery`1&lt;T&gt; extends System.Data.Objects.ObjectQuery implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.IEnumerable, class System.ComponentModel.IListSource, class System.Linq.IOrderedQueryable, class System.Linq.IOrderedQueryable`1&lt;!T&gt;, class System.Linq.IQueryable, class System.Linq.IQueryable`1&lt;!T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Data.Objects.ObjectQuery`1" />
  <TypeSignature Language="VB.NET" Value="Public Class ObjectQuery(Of T)&#xA;Inherits ObjectQuery&#xA;Implements IEnumerable(Of T), IListSource, IOrderedQueryable(Of T), IQueryable(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class ObjectQuery : System::Data::Objects::ObjectQuery, System::Collections::Generic::IEnumerable&lt;T&gt;, System::ComponentModel::IListSource, System::Linq::IOrderedQueryable&lt;T&gt;, System::Linq::IQueryable&lt;T&gt;" />
  <TypeSignature Language="F#" Value="type ObjectQuery&lt;'T&gt; = class&#xA;    inherit ObjectQuery&#xA;    interface seq&lt;'T&gt;&#xA;    interface IEnumerable&#xA;    interface IQueryable&lt;'T&gt;&#xA;    interface IQueryable&#xA;    interface IOrderedQueryable&lt;'T&gt;&#xA;    interface IOrderedQueryable&#xA;    interface IListSource" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Data.Objects.ObjectQuery</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.IListSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IOrderedQueryable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IOrderedQueryable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable&lt;T&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">查詢的實體類型。</typeparam>
    <summary>表示在指定的物件內容中針對概念模型的具類型查詢。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectQuery%601> 泛型類別 (Class) 表示傳回零個或多個特定型別物件之集合的查詢。 您必須先定義 <xref:System.Data.Objects.ObjectContext>，然後才能執行物件查詢。 此內容提供了撰寫及執行查詢所需的連接和中繼資料 (Metadata) 資訊。 以下情況下會執行物件查詢：  
  
-   當它有作用時，例如在 `foreach` (C#) 或 `For Each` (Visual Basic) 列舉型別期間。  
  
-   指派它來填滿 <xref:System.Collections.Generic.List%601> 集合時。  
  
-   明確呼叫 <xref:System.Data.Objects.ObjectQuery%601.Execute%2A> 方法時。  
  
 您可以使用 [!INCLUDE[esql](~/includes/esql-md.md)] 陳述式 (Statement) 或 LINQ 查詢來建立查詢本身，也可以使用此類別所包含的查詢產生器方法，以累加方式建置 (Build) 此查詢。 在每種情況下，結果都是新的 <xref:System.Data.Objects.ObjectQuery%601> 執行個體，而且在您明確執行或列舉此執行個體時，它就會將查詢傳送至資料來源以便執行並且傳回結果。  
  
 雖然 <xref:System.Data.Objects.ObjectQuery%601> 通常是實體 (Entity) 類型，但是它也可以是 <xref:System.Data.Common.DbDataRecord> 型別 (匿名型別的投影) 或基本型別 (Primitive Type) (例如整數或字串)。 如需詳細資訊，請參閱 <<c0> [ 物件查詢](https://msdn.microsoft.com/library/0768033c-876f-471d-85d5-264884349276)。  
  
   
  
## Examples  
 本主題中的範例根據[AdventureWorks Sales Model](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)。  
  
 此範例將示範如何建構 <xref:System.Data.Objects.ObjectQuery%601> 類別的執行個體。  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/9e7d8837-28c5-429d-a824-7bafb59724cf">Entity SQL 語言</related>
    <related type="Article" href="https://msdn.microsoft.com/library/641f9b68-9046-47a1-abb0-1c8eaeda0e2d">LINQ to Entities</related>
    <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">以物件形式查詢資料 (Entity Framework)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectQuery%601> 可初始化，好讓它代表單一純量結果，而不是純量結果的集合。 某些擴充方法必須將集合結果當做輸入。 在此情況下，當呼叫其中一個方法時會擲回 <xref:System.ArgumentException>。 如需詳細資訊，請參閱 <<c0> [ 物件查詢](https://msdn.microsoft.com/library/0768033c-876f-471d-85d5-264884349276)。  
  
 當您的應用程式產生在執行階段的 Entity SQL 查詢時，您應該注意資料來源的任何命令長度限制。 Entity SQL 不會強制限制在查詢中的命令文字的長度。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">查詢資料當做物件及塑造結果 (Entity Framework)</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectQuery (string commandText, System.Data.Objects.ObjectContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string commandText, class System.Data.Objects.ObjectContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Objects.ObjectContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (commandText As String, context As ObjectContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectQuery(System::String ^ commandText, System::Data::Objects::ObjectContext ^ context);" />
      <MemberSignature Language="F#" Value="new System.Data.Objects.ObjectQuery&lt;'T&gt; : string * System.Data.Objects.ObjectContext -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="new System.Data.Objects.ObjectQuery&lt;'T&gt; (commandText, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="commandText" Type="System.String" />
        <Parameter Name="context" Type="System.Data.Objects.ObjectContext" />
      </Parameters>
      <Docs>
        <param name="commandText">[!INCLUDE[esql](~/includes/esql-md.md)] 查詢。</param>
        <param name="context">要在上面執行查詢的 <see cref="T:System.Data.Objects.ObjectContext" />。</param>
        <summary>使用指定的 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 命令當做初始查詢，建立新的 [!INCLUDE[esql](~/includes/esql-md.md)] 執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當您的應用程式產生在執行階段的 Entity SQL 查詢時，您應該注意資料來源的任何命令長度限制。 Entity SQL 不會強制限制在查詢中的命令文字的長度。  
  
   
  
## Examples  
 本主題中的範例根據[AdventureWorks Sales Model](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)。 此範例將示範如何建構 <xref:System.Data.Objects.ObjectQuery%601> 類別的執行個體。  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">以物件形式查詢資料 (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectQuery (string commandText, System.Data.Objects.ObjectContext context, System.Data.Objects.MergeOption mergeOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string commandText, class System.Data.Objects.ObjectContext context, valuetype System.Data.Objects.MergeOption mergeOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Objects.ObjectContext,System.Data.Objects.MergeOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectQuery(System::String ^ commandText, System::Data::Objects::ObjectContext ^ context, System::Data::Objects::MergeOption mergeOption);" />
      <MemberSignature Language="F#" Value="new System.Data.Objects.ObjectQuery&lt;'T&gt; : string * System.Data.Objects.ObjectContext * System.Data.Objects.MergeOption -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="new System.Data.Objects.ObjectQuery&lt;'T&gt; (commandText, context, mergeOption)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="commandText" Type="System.String" />
        <Parameter Name="context" Type="System.Data.Objects.ObjectContext" />
        <Parameter Name="mergeOption" Type="System.Data.Objects.MergeOption" />
      </Parameters>
      <Docs>
        <param name="commandText">[!INCLUDE[esql](~/includes/esql-md.md)] 查詢。</param>
        <param name="context">要在上面執行查詢的 <see cref="T:System.Data.Objects.ObjectContext" />。</param>
        <param name="mergeOption">指定透過這個查詢所擷取的實體如何與已經從先前針對相同 <see cref="T:System.Data.Objects.ObjectContext" /> 的查詢所傳回的實體合併。</param>
        <summary>使用指定的 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 命令當做初始查詢和指定的合併選項，建立新的 [!INCLUDE[esql](~/includes/esql-md.md)] 執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當您的應用程式產生在執行階段的 Entity SQL 查詢時，您應該注意資料來源的任何命令長度限制。 Entity SQL 不會強制限制在查詢中的命令文字的長度。  
  
   
  
## Examples  
 這個範例根據[AdventureWorks Sales Model](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)。 <xref:System.Data.Objects.ObjectQuery%601> 是使用指定的查詢、<xref:System.Data.Objects.ObjectContext> 和 <xref:System.Data.Objects.MergeOption> 初始化的。  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Select](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_select)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Select](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_select)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Distinct">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Distinct ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Distinct() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Distinct" />
      <MemberSignature Language="VB.NET" Value="Public Function Distinct () As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Distinct();" />
      <MemberSignature Language="F#" Value="member this.Distinct : unit -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Distinct " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將查詢限制為唯一的結果。</summary>
        <returns>新的 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 執行個體，它就相當於套用了 <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/select-entity-sql">SELECT DISTINCT</see> 的原始執行個體。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個查詢產生器方法會傳回<xref:System.Data.Objects.ObjectQuery%601>相當於原始查詢的執行個體[SELECT DISTINCT](~/docs/framework/data/adonet/ef/language-reference/select-entity-sql.md)套用。  
  
 `DISTINCT`無法將運算子套用至物件 （例如 ntext) 資料來源中包含的非可比較的資料行的對應。  
  
   
  
## Examples  
 本主題中的範例根據[AdventureWorks Sales Model](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)。 此範例會使用 <xref:System.Data.Objects.ObjectQuery%601.UnionAll%2A> 方法來建立新的 <xref:System.Data.Objects.ObjectQuery%601> 物件。 然後，它會針對新的 <xref:System.Data.Objects.ObjectQuery%601.Distinct%2A> 物件呼叫 <xref:System.Data.Objects.ObjectQuery%601>，以便取得這個查詢的唯一結果。  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Distinct_UnionAll](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_distinct_unionall)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Distinct_UnionAll](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_distinct_unionall)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">以物件形式查詢資料 (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Except">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Except (System.Data.Objects.ObjectQuery&lt;T&gt; query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Except(class System.Data.Objects.ObjectQuery`1&lt;!T&gt; query) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Except(System.Data.Objects.ObjectQuery{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Except (query As ObjectQuery(Of T)) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Except(System::Data::Objects::ObjectQuery&lt;T&gt; ^ query);" />
      <MemberSignature Language="F#" Value="member this.Except : System.Data.Objects.ObjectQuery&lt;'T&gt; -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Except query" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.Data.Objects.ObjectQuery&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="query"><see cref="T:System.Data.Objects.ObjectQuery`1" />，它代表要從查詢中排除的結果。</param>
        <summary>根據另一個物件查詢的結果，透過排除結果限制查詢結果。</summary>
        <returns>新的 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 執行個體，其相當於根據指定的 <paramref name="query" /> 套用了 <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/except-entity-sql">EXCEPT</see> 的原始執行個體。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所提供`query`定義要排除必須的結果會與相容的類型或相同型別的<xref:System.Data.Objects.ObjectQuery%601>。  
  
 定義的參數中提供`query`中所定義的參數與合併<xref:System.Data.Objects.ObjectQuery%601>執行個體。 參數在結合的 <xref:System.Data.Objects.ObjectParameterCollection> 中必須是唯一的。 結合的集合中不能有兩個參數同名。 如需詳細資訊，請參閱 <<c0> [ 查詢產生器方法](https://msdn.microsoft.com/library/05685434-05e6-41c2-8d5e-8933b88a40b0)。  
  
 結果查詢會從在上面呼叫 <xref:System.Data.Objects.ObjectQuery%601> 的 <xref:System.Data.Objects.ObjectQuery%601.Except%2A> 執行個體繼承連接。  
  
   
  
## Examples  
 這個範例根據[AdventureWorks Sales Model](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)。 此範例會使用 <xref:System.Data.Objects.ObjectQuery%601.Except%2A> 方法來建立新的 <xref:System.Data.Objects.ObjectQuery%601> 物件，然後逐一查看新查詢的結果。  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Except](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_except)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Except](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_except)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="query" /> 參數是 <see langword="null" /> 或空字串。</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">查詢資料當做物件及塑造結果 (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectResult&lt;T&gt; Execute (System.Data.Objects.MergeOption mergeOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectResult`1&lt;!T&gt; Execute(valuetype System.Data.Objects.MergeOption mergeOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Execute(System.Data.Objects.MergeOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectResult&lt;T&gt; ^ Execute(System::Data::Objects::MergeOption mergeOption);" />
      <MemberSignature Language="F#" Value="override this.Execute : System.Data.Objects.MergeOption -&gt; System.Data.Objects.ObjectResult&lt;'T&gt;" Usage="objectQuery.Execute mergeOption" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectResult&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mergeOption" Type="System.Data.Objects.MergeOption" />
      </Parameters>
      <Docs>
        <param name="mergeOption">要在執行查詢時使用的 <see cref="T:System.Data.Objects.MergeOption" />。 預設為 <see cref="F:System.Data.Objects.MergeOption.AppendOnly" />。</param>
        <summary>使用指定的合併選項執行物件查詢。</summary>
        <returns><see cref="T:System.Data.Objects.ObjectResult`1" />，其中包含查詢所傳回之實體 (Entity) 物件的集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 物件查詢的預設合併選項是 <xref:System.Data.Objects.MergeOption.AppendOnly>。 如需詳細資訊，請參閱 <<c0> [ 識別解析、 狀態管理和變更追蹤](https://msdn.microsoft.com/library/3bd49311-0e72-4ea4-8355-38fe57036ba0)。  
  
   
  
## Examples  
 這個範例根據[AdventureWorks Sales Model](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)。 此範例會從 <xref:System.Data.Objects.ObjectResult%601> 方法傳回 <xref:System.Data.Objects.ObjectQuery.Execute%2A>。 然後，它會取得列舉值並且逐一查看查詢結果。 最後，它會釋放列舉值和 <xref:System.Data.Objects.ObjectResult%601> 物件。  
  
 [!code-csharp[DP ObjectServices Concepts#QueryResult](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#queryresult)]
 [!code-vb[DP ObjectServices Concepts#QueryResult](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#queryresult)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">以物件形式查詢資料 (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;System.Data.Common.DbDataRecord&gt; GroupBy (string keys, string projection, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;class System.Data.Common.DbDataRecord&gt; GroupBy(string keys, string projection, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.GroupBy(System.String,System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GroupBy (keys As String, projection As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of DbDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;System::Data::Common::DbDataRecord ^&gt; ^ GroupBy(System::String ^ keys, System::String ^ projection, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.GroupBy : string * string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectQuery&lt;System.Data.Common.DbDataRecord&gt;" Usage="objectQuery.GroupBy (keys, projection, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;System.Data.Common.DbDataRecord&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
        <Parameter Name="projection" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="keys">分組結果所依據的索引鍵資料行。</param>
        <param name="projection">定義投影之選取屬性的清單。</param>
        <param name="parameters">這個方法所使用的零個或多個參數。</param>
        <summary>依據指定的準則，分組查詢結果。</summary>
        <returns>屬於類型 <see cref="T:System.Data.Common.DbDataRecord" /> 的新 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 執行個體，它就相當於套用了 <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/group-by-entity-sql">GROUP BY</see> 的原始執行個體。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectQuery%601.GroupBy%2A> 適用於所指定的投影`projection`參數。 這表示，<xref:System.Data.Objects.ObjectQuery%601> 方法所傳回的 <xref:System.Data.Objects.ObjectQuery%601.GroupBy%2A> 一律屬於 <xref:System.Data.Common.DbDataRecord> 型別。 如需詳細資訊，請參閱 <<c0> [ 物件查詢](https://msdn.microsoft.com/library/0768033c-876f-471d-85d5-264884349276)。  
  
   
  
## Examples  
 這個範例根據[AdventureWorks Sales Model](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)。  
  
 這個範例會建立新的 <xref:System.Data.Objects.ObjectQuery%601> 物件，其中包含依據產品名稱分組現有查詢的結果。  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_GroupBy](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_groupby)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_GroupBy](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_groupby)]  
  
 這個範例會傳回一組包含的巢狀的資料記錄`Contact.LastName`資料行分組，且依字母順序排序的第一個字母`Contact.LastName`。  
  
 [!code-csharp[DP ObjectServices Concepts#Projection_GroupBy](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#projection_groupby)]
 [!code-vb[DP ObjectServices Concepts#Projection_GroupBy](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#projection_groupby)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="query" /> 參數是 <see langword="null" /> 或空字串。  
  
-或- 
<paramref name="projection" /> 參數是 <see langword="null" /> 或空字串。</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">以物件形式查詢資料 (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Include">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Include (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Include(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Include(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Include (path As String) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Include(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.Include : string -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Include path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">要在查詢結果中傳回之相關物件的點分隔清單。</param>
        <summary>指定要包含在查詢結果中的相關物件。</summary>
        <returns>含有已定義之查詢路徑的新 <see cref="T:System.Data.Objects.ObjectQuery`1" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 查詢路徑可以搭配 Entity SQL 和 LINQ 查詢使用。  
  
 路徑是全部包含的。 例如，如果包含呼叫表示`Include("Orders.OrderLines")`，不僅`OrderLines`會包含在內，但也`Orders`。 如需詳細資訊，請參閱 <<c0> [ 載入相關物件](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896272(v=vs.100))。  
  
 當您呼叫 <xref:System.Data.Objects.ObjectQuery%601.Include%2A> 方法時，此查詢路徑只適用於 <xref:System.Data.Objects.ObjectQuery%601> 的傳回執行個體。 其他 <xref:System.Data.Objects.ObjectQuery%601> 執行個體和物件內容本身則不會受到影響。  
  
 由於 <xref:System.Data.Objects.ObjectQuery%601.Include%2A> 方法會傳回查詢物件，因此您可以針對 <xref:System.Data.Objects.ObjectQuery%601> 多次呼叫這個方法來指定查詢的多個路徑，如下列範例所示：  
  
 [!code-csharp[DP ObjectServices Concepts#SpanOnlyWithMultiplePaths](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#spanonlywithmultiplepaths)]
 [!code-vb[DP ObjectServices Concepts#SpanOnlyWithMultiplePaths](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#spanonlywithmultiplepaths)]  
  
   
  
## Examples  
 [!code-csharp[DP ObjectServices Concepts#QueryWithSpan](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#querywithspan)]
 [!code-vb[DP ObjectServices Concepts#QueryWithSpan](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#querywithspan)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 為 <see langword="empty" />。</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">以物件形式查詢資料 (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Intersect (System.Data.Objects.ObjectQuery&lt;T&gt; query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Intersect(class System.Data.Objects.ObjectQuery`1&lt;!T&gt; query) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Intersect(System.Data.Objects.ObjectQuery{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Intersect (query As ObjectQuery(Of T)) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Intersect(System::Data::Objects::ObjectQuery&lt;T&gt; ^ query);" />
      <MemberSignature Language="F#" Value="member this.Intersect : System.Data.Objects.ObjectQuery&lt;'T&gt; -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Intersect query" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.Data.Objects.ObjectQuery&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="query"><see cref="T:System.Data.Objects.ObjectQuery`1" />，它代表要包含在查詢中的結果。</param>
        <summary>透過僅包含存在另一個物件查詢中的結果，限制查詢結果。</summary>
        <returns>新的 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 執行個體，它就相當於根據指定的 <paramref name="query" /> 套用了 <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/intersect-entity-sql">INTERSECT</see> 的原始執行個體。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 提供`query`定義要包含必須的結果會與相容的類型或相同型別的<xref:System.Data.Objects.ObjectQuery%601>。  
  
 定義的參數中提供`query`中所定義的參數與合併<xref:System.Data.Objects.ObjectQuery%601>執行個體。 參數在結合的 <xref:System.Data.Objects.ObjectParameterCollection> 中必須是唯一的。 結合的集合中不能有兩個參數同名。 如需詳細資訊，請參閱 <<c0> [ 查詢產生器方法](https://msdn.microsoft.com/library/05685434-05e6-41c2-8d5e-8933b88a40b0)。  
  
 結果查詢會從在上面呼叫 <xref:System.Data.Objects.ObjectQuery%601> 方法的 <xref:System.Data.Objects.ObjectQuery%601.Intersect%2A> 執行個體繼承連接。  
  
   
  
## Examples  
 本主題中的範例根據[AdventureWorks Sales Model](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)。 這個範例會建立新的 <xref:System.Data.Objects.ObjectQuery%601> 物件，其中包含其他兩個查詢的結果。  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Intersect](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_intersect)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Intersect](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_intersect)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="query" /> 參數是 <see langword="null" />，或者空字串。</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">以物件形式查詢資料 (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.ObjectQuery`1.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Data.Objects.ObjectQuery&lt;'T&gt;.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定這個物件查詢的名稱。</summary>
        <value><see langword="string" /> 值，為這個 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 的名稱。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 建構查詢產生器方法時，物件查詢的名稱會依據名稱識別序列 (Sequence) 中的目前物件查詢。 根據預設，查詢名稱是`it`。 在 <xref:System.Data.Objects.ObjectQuery`1.Where*> 方法內部的聯結 (Join) 中或 <xref:System.Data.Objects.ObjectQuery`1.SelectValue*> 方法中參考目前序列時，這可能會很有用。 如需詳細資訊，請參閱 <<c0> [ 查詢產生器方法](https://msdn.microsoft.com/library/05685434-05e6-41c2-8d5e-8933b88a40b0)。  
  
 當您設定 <xref:System.Data.Objects.ObjectQuery%601.Name%2A> 的 <xref:System.Data.Objects.ObjectQuery%601> 屬性時，該值會變成後續方法中的別名 (Alias)。  
  
 <xref:System.Data.Objects.ObjectQuery%601.Name%2A> 屬性的值必須以字母為開頭，而且可以包含字母、數字和底線。  
  
   
  
## Examples  
 這個範例會將第一個 <xref:System.Data.Objects.ObjectQuery%601> 的名稱設定為 "product"，然後在後續 <xref:System.Data.Objects.ObjectQuery%601.OrderBy%2A> 方法中使用此別名。 本主題中的範例根據[AdventureWorks Sales Model](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)。  
  
 [!code-csharp[DP ObjectServices Concepts#QueryWithAliasNamed](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#querywithaliasnamed)]
 [!code-vb[DP ObjectServices Concepts#QueryWithAliasNamed](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#querywithaliasnamed)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">設定時所指定的值無效。</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">以物件形式查詢資料 (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="OfType&lt;TResultType&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;TResultType&gt; OfType&lt;TResultType&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!!TResultType&gt; OfType&lt;TResultType&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.OfType``1" />
      <MemberSignature Language="VB.NET" Value="Public Function OfType(Of TResultType) () As ObjectQuery(Of TResultType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResultType&gt;&#xA; System::Data::Objects::ObjectQuery&lt;TResultType&gt; ^ OfType();" />
      <MemberSignature Language="F#" Value="member this.OfType : unit -&gt; System.Data.Objects.ObjectQuery&lt;'ResultType&gt;" Usage="objectQuery.OfType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;TResultType&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResultType" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TResultType">使用套用的篩選執行查詢時所傳回之 <see cref="T:System.Data.Objects.ObjectResult`1" /> 的型別。</typeparam>
        <summary>將查詢限制為只有特定型別的結果。</summary>
        <returns>新的 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 執行個體，它就相當於套用了 <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/oftype-entity-sql">OFTYPE</see> 的原始執行個體。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
<xref:System.Data.Objects.ObjectQuery`1.OfType*> 是用來依據特定實體或複雜類型，篩選查詢結果。 這可支援含有物件繼承的概念模型。 如需詳細資訊，請參閱[實體資料模型：繼承](~/docs/framework/data/adonet/entity-data-model-inheritance.md)。

<xref:System.Data.Objects.ObjectQuery`1.OfType*>方法只能套用至<xref:System.Data.Objects.ObjectQuery%601>之實體類型或複雜 EDM 中所定義的型別。
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.EntitySqlException">指定的型別無效。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/be01614e-070e-41be-9746-bb674b41e488(v=vs.90)">HOW TO：使用每個階層的資料表繼承來建立和執行物件查詢 (Entity Framework)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">以物件形式查詢資料 (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="OrderBy">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; OrderBy (string keys, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; OrderBy(string keys, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.OrderBy(System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function OrderBy (keys As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ OrderBy(System::String ^ keys, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.OrderBy : string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.OrderBy (keys, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="keys">排序結果所依據的索引鍵資料行。</param>
        <param name="parameters">這個方法所使用的零個或多個參數。</param>
        <summary>依據指定的準則，排序查詢結果。</summary>
        <returns>新的 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 執行個體，它就相當於套用了 <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/order-by-entity-sql">ORDER BY</see> 的原始執行個體。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 無法確保結果在巢狀查詢中的排序。  
  
 <xref:System.Data.Objects.ObjectQuery%601.OrderBy%2A> 應該一律是序列中的最終查詢產生器方法。  
  
   
  
## Examples  
 這個範例根據[AdventureWorks Sales Model](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)。 此範例會建立新<xref:System.Data.Objects.ObjectQuery%601>物件，其中包含排序現有查詢的結果`ProductID`。  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_OrderBy](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_orderby)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_OrderBy](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_orderby)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="keys" /> 或 <paramref name="parameters" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="key" /> 為空字串。</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">以物件形式查詢資料 (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;System.Data.Common.DbDataRecord&gt; Select (string projection, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;class System.Data.Common.DbDataRecord&gt; Select(string projection, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Select(System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Select (projection As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of DbDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;System::Data::Common::DbDataRecord ^&gt; ^ Select(System::String ^ projection, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.Select : string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectQuery&lt;System.Data.Common.DbDataRecord&gt;" Usage="objectQuery.Select (projection, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;System.Data.Common.DbDataRecord&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projection" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="projection">定義投影之選取屬性的清單。</param>
        <param name="parameters">這個方法所使用的零個或多個參數。</param>
        <summary>將查詢結果限制為只有定義在指定之投影中的屬性。</summary>
        <returns>屬於類型 <see cref="T:System.Data.Common.DbDataRecord" /> 的新 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 執行個體，它就相當於套用了 <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/select-entity-sql">SELECT</see> 的原始執行個體。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectQuery%601.Select%2A> 適用於所指定的投影`projection`參數。 <xref:System.Data.Objects.ObjectQuery%601> 方法所傳回的 <xref:System.Data.Objects.ObjectQuery%601.Select%2A> 一律屬於 <xref:System.Data.Common.DbDataRecord> 資料列型別。 您可以使用 <xref:System.Data.Objects.ObjectQuery`1.SelectValue*> 方法來傳回屬於簡單型別、實體類型或複雜類型的值。 如需詳細資訊，請參閱 < [LINQ to Entities](~/docs/framework/data/adonet/ef/language-reference/linq-to-entities.md)。  
  
 當投影包含導覽屬性時，查詢結果就會包含巢狀 <xref:System.Data.Common.DbDataRecord> 物件的集合。 如需詳細資訊，請參閱[＜How to：使用導覽屬性導覽關聯性](https://msdn.microsoft.com/library/b1d71c7d-16a7-4b46-96ac-690176bd5057)。  
  
   
  
## Examples  
 這個範例根據[AdventureWorks Sales Model](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)。 此範例會建立新<xref:System.Data.Objects.ObjectQuery%601>其結果會包含的資料記錄`ProductID`此查詢的結果的欄位。  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Select](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_select)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Select](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_select)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="projection" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="parameters" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="projection" /> 為空字串。</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">以物件形式查詢資料 (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="SelectValue&lt;TResultType&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;TResultType&gt; SelectValue&lt;TResultType&gt; (string projection, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!!TResultType&gt; SelectValue&lt;TResultType&gt;(string projection, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.SelectValue``1(System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function SelectValue(Of TResultType) (projection As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of TResultType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResultType&gt;&#xA; System::Data::Objects::ObjectQuery&lt;TResultType&gt; ^ SelectValue(System::String ^ projection, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.SelectValue : string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectQuery&lt;'ResultType&gt;" Usage="objectQuery.SelectValue (projection, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;TResultType&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResultType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="projection" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TResultType"><see cref="T:System.Data.Objects.ObjectQuery`1" /> 方法所傳回之 <see cref="M:System.Data.Objects.ObjectQuery`1.SelectValue``1(System.String,System.Data.Objects.ObjectParameter[])" /> 的型別。</typeparam>
        <param name="projection">投影清單。</param>
        <param name="parameters">一組選擇性查詢參數，而且這些參數在剖析時應該位於範圍中。</param>
        <summary>將查詢結果限制為只有投影中指定的屬性。</summary>
        <returns>型別與特定投影相容的新 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 執行個體。 傳回的 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 就相當於套用了 <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/select-entity-sql">SELECT VALUE</see> 的原始執行個體。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectQuery`1.SelectValue*> 是用來傳回屬於簡單型別、實體類型或複雜類型的值。 您可以針對需要資料列型別而非實值型別 (Value Type) 的投影，使用 <xref:System.Data.Objects.ObjectQuery%601.Select%2A> 方法。 如需詳細資訊，請參閱 <<c0> [ 物件查詢](https://msdn.microsoft.com/library/0768033c-876f-471d-85d5-264884349276)。  
  
 <xref:System.Data.Objects.ObjectQuery`1.SelectValue*>方法適用於所指定的投影`projection`參數。 <xref:System.Data.Objects.ObjectQuery%601> 方法所傳回的 <xref:System.Data.Objects.ObjectQuery`1.SelectValue*> 必須屬於與投影相容的實值型別，而且其型別必須與 <xref:System.Data.Objects.ObjectQuery`1.SelectValue*> 的型別相同。  
  
   
  
## Examples  
 這個範例根據[AdventureWorks Sales Model](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)。 此範例會建立新<xref:System.Data.Objects.ObjectQuery%601>包含結果的一連串`ProductID`從現有的查詢結果投影的值。  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_SelectValue](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_selectvalue)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_SelectValue](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_selectvalue)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="projection" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="parameters" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="projection" /> 為空字串。</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">以物件形式查詢資料 (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Skip">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Skip (string keys, string count, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Skip(string keys, string count, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Skip(System.String,System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Skip (keys As String, count As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Skip(System::String ^ keys, System::String ^ count, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.Skip : string * string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Skip (keys, count, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
        <Parameter Name="count" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="keys">排序結果所依據的索引鍵資料行。</param>
        <param name="count">要略過的結果數目。 這個數字必須是常數或參數參考。</param>
        <param name="parameters">一組選擇性查詢參數，而且這些參數在剖析時應該位於範圍中。</param>
        <summary>依據指定的準則，排序查詢結果，並且略過指定的結果數目。</summary>
        <returns>新的 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 執行個體，它就相當於套用了 <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/order-by-entity-sql">ORDER BY</see> 和 [SKIP](~/docs/framework/data/adonet/ef/language-reference/skip-entity-sql.md) 的原始執行個體。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectQuery%601.Skip%2A> 方法無法在 <xref:System.Data.Objects.ObjectQuery%601.Top%2A> 方法之後使用。 當您使用<xref:System.Data.Objects.ObjectQuery%601.Top%2A>之後<xref:System.Data.Objects.ObjectQuery%601.Skip%2A>，其運作方式如同[限制](~/docs/framework/data/adonet/ef/language-reference/limit-entity-sql.md)子句的陳述式。  
  
   
  
## Examples  
 這個範例會取得五`Product`物件後面略過在查詢結果中，依排序的前三個`Product.ListPrice`。  
  
 [!code-csharp[DP ObjectServices Concepts#Projection_SkipLimit](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#projection_skiplimit)]
 [!code-vb[DP ObjectServices Concepts#Projection_SkipLimit](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#projection_skiplimit)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">任何引數是 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="keys" /> 為空字串。  
  
-或- 
 <paramref name="count" /> 為空字串。</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">以物件形式查詢資料 (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;T&gt; IEnumerable&lt;T&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.System#Collections#Generic#IEnumerable&lt;T&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;T&gt; ^ System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;T&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回逐一查看查詢結果的列舉值。</summary>
        <returns>可用來逐一查看結果的 <see cref="T:System.Collections.Generic.IEnumerator`1" /> 物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫 <xref:System.Data.Objects.ObjectQuery%601.System%23Collections%23Generic%23IEnumerable%7BT%7D%23GetEnumerator%2A> 就會執行此查詢。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">以物件形式查詢資料 (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Top">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Top (string count, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Top(string count, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Top(System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Top (count As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Top(System::String ^ count, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.Top : string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Top (count, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="count" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="count">結果中的項目數 (成為字串)。</param>
        <param name="parameters">一組選擇性查詢參數，而且這些參數在剖析時應該位於範圍中。</param>
        <summary>將查詢結果限制為指定的項目數。</summary>
        <returns>新的 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 執行個體，它就相當於套用了 <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/top-entity-sql">TOP</see> 的原始執行個體。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 除非查詢已排序，否則 <xref:System.Data.Objects.ObjectQuery%601.Top%2A> 不具決定性。  
  
 當您使用<xref:System.Data.Objects.ObjectQuery%601.Top%2A>方法之後<xref:System.Data.Objects.ObjectQuery%601.Skip%2A>方法，其運作方式如同[限制](~/docs/framework/data/adonet/ef/language-reference/limit-entity-sql.md)聲明[ORDER BY](~/docs/framework/data/adonet/ef/language-reference/order-by-entity-sql.md)子句。  
  
   
  
## Examples  
 這些範例根據[AdventureWorks Sales Model](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)。  
  
 這個範例會建立新的 <xref:System.Data.Objects.ObjectQuery%601>，其中包含現有查詢的前兩個結果。  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Top](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_top)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Top](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_top)]  
  
 這個範例會取得五`Product`物件後面略過在查詢結果中，依排序的前三個`Product.ListPrice`。 <xref:System.Data.Objects.ObjectQuery%601.Top%2A> 而非[限制](~/docs/framework/data/adonet/ef/language-reference/limit-entity-sql.md)進行分頁。  
  
 [!code-csharp[DP ObjectServices Concepts#Projection_SkipLimit](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#projection_skiplimit)]
 [!code-vb[DP ObjectServices Concepts#Projection_SkipLimit](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#projection_skiplimit)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="count" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="count" /> 為空字串。</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">以物件形式查詢資料 (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Union (System.Data.Objects.ObjectQuery&lt;T&gt; query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Union(class System.Data.Objects.ObjectQuery`1&lt;!T&gt; query) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Union(System.Data.Objects.ObjectQuery{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Union (query As ObjectQuery(Of T)) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Union(System::Data::Objects::ObjectQuery&lt;T&gt; ^ query);" />
      <MemberSignature Language="F#" Value="member this.Union : System.Data.Objects.ObjectQuery&lt;'T&gt; -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Union query" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.Data.Objects.ObjectQuery&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="query"><see cref="T:System.Data.Objects.ObjectQuery`1" />，它代表要加入的結果。</param>
        <summary>結合此查詢的結果與另一個物件查詢的結果，但不包含任何重複項目。</summary>
        <returns>新的 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 執行個體，它就相當於套用了 <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/union-entity-sql">UNION</see> 以便新增指定之 <paramref name="query" /> 之結果的原始執行個體。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectQuery%601.Union%2A> 將提供的結果`query`沒有任何重複項目。  
  
 所提供`query`定義要加入必須的結果是相同的型別或可提升為這個類型的型別<xref:System.Data.Objects.ObjectQuery%601>。 例如，以下是有效因為`DiscontinuedProducts`可以提升為`Products`:  
  
```  
ObjectQuery<Product>.Union(ObjectQuery<DiscontinuedProduct>)  
```  
  
 下列會擲回例外狀況，因為`Products`不可提升為`DiscontinuedProducts`。  
  
```  
ObjectQuery <DiscontinuedProduct>.Union(ObjectQuery<Product>)   
```  
  
 針對<xref:System.Data.Objects.ObjectQuery%601>型別的<xref:System.Data.Common.DbDataRecord>，這兩個查詢中的記錄必須具有相同數目的資料行和類型的資料行中<xref:System.Data.Common.DbDataRecord>傳遞`query`必須可提升為型別中的資料行<xref:System.Data.Common.DbDataRecord>的<xref:System.Data.Objects.ObjectQuery%601>.  
  
 定義的參數中提供`query`中所定義的參數與合併<xref:System.Data.Objects.ObjectQuery%601>執行個體。 參數在結合的 <xref:System.Data.Objects.ObjectParameterCollection> 中必須是唯一的。 結合的集合中不能有兩個參數同名。 如需詳細資訊，請參閱 <<c0> [ 查詢產生器方法](https://msdn.microsoft.com/library/05685434-05e6-41c2-8d5e-8933b88a40b0)。  
  
 結果查詢會從在上面呼叫 <xref:System.Data.Objects.ObjectQuery%601> 的 <xref:System.Data.Objects.ObjectQuery%601.Union%2A> 執行個體繼承連接。  
  
   
  
## Examples  
 這個範例根據[AdventureWorks Sales Model](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)。 此範例會使用 <xref:System.Data.Objects.ObjectQuery%601.Union%2A> 方法來建立新的 <xref:System.Data.Objects.ObjectQuery%601> 物件。  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Distinct_Union](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_distinct_union)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Distinct_Union](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_distinct_union)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="query" /> 參數為 <see langword="null" />。</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">以物件形式查詢資料 (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="UnionAll">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; UnionAll (System.Data.Objects.ObjectQuery&lt;T&gt; query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; UnionAll(class System.Data.Objects.ObjectQuery`1&lt;!T&gt; query) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.UnionAll(System.Data.Objects.ObjectQuery{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function UnionAll (query As ObjectQuery(Of T)) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ UnionAll(System::Data::Objects::ObjectQuery&lt;T&gt; ^ query);" />
      <MemberSignature Language="F#" Value="member this.UnionAll : System.Data.Objects.ObjectQuery&lt;'T&gt; -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.UnionAll query" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.Data.Objects.ObjectQuery&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="query"><see cref="T:System.Data.Objects.ObjectQuery`1" />，它代表要加入的結果。</param>
        <summary>結合此查詢的結果與另一個物件查詢的結果，而且包括所有重複項目。</summary>
        <returns>新的 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 執行個體，它就相當於套用了 <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/union-entity-sql">UNION ALL</see> 以便新增指定之 <paramref name="query" /> 之結果的原始執行個體。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectQuery%601.UnionAll%2A> 將提供的結果`query`包括所有重複項目。  
  
 所提供`query`定義要加入必須結果是相同的型別或可提升為這個類型的型別<xref:System.Data.Objects.ObjectQuery%601>。 例如，以下是有效因為`DiscontinuedProducts`可以提升為`Products`:  
  
```  
ObjectQuery<Product>.Union(ObjectQuery<DiscontinuedProduct>)  
```  
  
 下列會擲回例外狀況，因為`Products`不可提升為`DiscontinuedProducts`。  
  
```  
ObjectQuery <DiscontinuedProduct>.Union(ObjectQuery<Product>)   
```  
  
 針對<xref:System.Data.Objects.ObjectQuery%601>型別的<xref:System.Data.Common.DbDataRecord>，這兩個查詢中的記錄必須具有相同數目的資料行和類型的資料行中<xref:System.Data.Common.DbDataRecord>傳遞`query`必須可提升為型別中的資料行<xref:System.Data.Common.DbDataRecord>的<xref:System.Data.Objects.ObjectQuery%601>.  
  
 定義的參數中提供`query`中所定義的參數與合併<xref:System.Data.Objects.ObjectQuery%601>執行個體。 參數在結合的 <xref:System.Data.Objects.ObjectParameterCollection> 中必須是唯一的。 結合的集合中不能有兩個參數同名。 如需詳細資訊，請參閱 <<c0> [ 查詢產生器方法](https://msdn.microsoft.com/library/05685434-05e6-41c2-8d5e-8933b88a40b0)。  
  
 結果查詢會從在上面呼叫 <xref:System.Data.Objects.ObjectQuery%601> 的 <xref:System.Data.Objects.ObjectQuery%601.UnionAll%2A> 執行個體繼承連接。  
  
   
  
## Examples  
 本主題中的範例根據[AdventureWorks Sales Model](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)。 此範例會使用 <xref:System.Data.Objects.ObjectQuery%601.UnionAll%2A> 方法來建立新的 <xref:System.Data.Objects.ObjectQuery%601> 物件。 然後，它會針對新的 <xref:System.Data.Objects.ObjectQuery%601.Distinct%2A> 物件呼叫 <xref:System.Data.Objects.ObjectQuery%601> 方法，以便取得這個查詢的唯一結果。  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Distinct_UnionAll](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_distinct_unionall)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Distinct_UnionAll](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_distinct_unionall)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="query" /> 參數為 <see langword="null" />。</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">以物件形式查詢資料 (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Where">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Where (string predicate, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Where(string predicate, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Where(System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Where (predicate As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Where(System::String ^ predicate, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.Where : string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Where (predicate, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="predicate">篩選述詞 (Predicate)。</param>
        <param name="parameters">這個方法所使用的零個或多個參數。</param>
        <summary>將查詢限制為符合指定之篩選準則的結果。</summary>
        <returns>新的 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 執行個體，它就相當於套用了 <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/where-entity-sql">WHERE</see> 的原始執行個體。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 這個範例根據[AdventureWorks Sales Model](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)。 此範例會建立新的 <xref:System.Data.Objects.ObjectQuery%601>，其中包含依據下列準則篩選現有查詢的結果：`"it.ProductID = 900"`。  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Where](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_where)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Where](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_where)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="predicate" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="parameters" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="predicate" /> 為空字串。</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">以物件形式查詢資料 (Entity Framework)</related>
      </Docs>
    </Member>
  </Members>
</Type>