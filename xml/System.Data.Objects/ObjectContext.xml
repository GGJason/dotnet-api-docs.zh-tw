<Type Name="ObjectContext" FullName="System.Data.Objects.ObjectContext">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="51c71be75cc70c048fa0c0cbaefc74b5bb82d40c" />
    <Meta Name="ms.sourcegitcommit" Value="ad09e88f48ca55b181e8d272cfc3742eadc3f939" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/08/2018" />
    <Meta Name="ms.locfileid" Value="35231069" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ObjectContext : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ObjectContext extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Data.Objects.ObjectContext" />
  <TypeSignature Language="VB.NET" Value="Public Class ObjectContext&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class ObjectContext : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>提供以物件形式查詢和使用實體 (Entity) 資料的機能。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Data.Objects.ObjectContext> 類別不具備執行緒安全。 中的資料物件的完整性<xref:System.Data.Objects.ObjectContext>無法確保在多執行緒案例中。  
  
 <xref:System.Data.Objects.ObjectContext>類別是做為概念模型中定義的實體類型的執行個體的物件與資料互動的主要類別。 <xref:System.Data.Objects.ObjectContext> 類別的執行個體會封裝下列項目：  
  
-   資料庫的連接 (以 <xref:System.Data.EntityClient.EntityConnection> 物件的形式)。  
  
-   描述模型的中繼資料 (以 <xref:System.Data.Metadata.Edm.MetadataWorkspace> 物件的形式)。  
  
-   管理保存在快取中之物件的 <xref:System.Data.Objects.ObjectStateManager> 物件。  
  
 當 Entity Data Model 工具產生物件層代表概念模型時，此類別代表<xref:System.Data.Metadata.Edm.EntityContainer>模型衍生自<xref:System.Data.Objects.ObjectContext>。  
  
   
  
## Examples  
 這個範例根據[AdventureWorks Sales Model](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)。 此範例將示範如何建構 <xref:System.Data.Objects.ObjectContext>。  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectContext](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectcontext)]
 [!code-vb[DP ObjectServices Concepts#ObjectContext](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectcontext)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Data.Objects.ObjectContext" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectContext (System.Data.EntityClient.EntityConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.EntityClient.EntityConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.#ctor(System.Data.EntityClient.EntityConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connection As EntityConnection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectContext(System::Data::EntityClient::EntityConnection ^ connection);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.EntityClient.EntityConnection" />
      </Parameters>
      <Docs>
        <param name="connection">
          <see cref="T:System.Data.EntityClient.EntityConnection" />，其中包含模型的參考與資料來源連接的參考。</param>
        <summary>使用給定的連接，初始化 <see cref="T:System.Data.Objects.ObjectContext" /> 類別的新執行個體。 在建構期間，系統會從 <see cref="T:System.Data.EntityClient.EntityConnection" /> 物件中擷取中繼資料工作空間。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="connection" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="connection" /> 無效。  -或-  中繼資料工作空間無效。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectContext (string connectionString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectContext(System::String ^ connectionString);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">連接字串，它也會提供中繼資料資訊的存取權。</param>
        <summary>使用給定的連接字串和預設實體容器名稱，初始化 <see cref="T:System.Data.Objects.ObjectContext" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `connectionString`是一個字串，包含所需的概念模型，並連接到資料來源資訊。 <xref:System.Data.EntityClient.EntityConnectionStringBuilder> 類別可用來正確格式化此字串。  
  
 產生應用程式的組態檔中儲存的具名的連接字串中。 可以提供這個具名的連接字串，而不是`connectionString`參數具現化時<xref:System.Data.Objects.ObjectContext>類別。  
  
   
  
## Examples  
 本主題中的範例根據[AdventureWorks Sales Model](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)。 此範例將示範如何建構 <xref:System.Data.Objects.ObjectContext>。  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectContext](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectcontext)]
 [!code-vb[DP ObjectServices Concepts#ObjectContext](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectcontext)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="connectionString" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="connectionString" /> 無效。  -或-  中繼資料工作空間無效。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ObjectContext (System.Data.EntityClient.EntityConnection connection, string defaultContainerName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Data.EntityClient.EntityConnection connection, string defaultContainerName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.#ctor(System.Data.EntityClient.EntityConnection,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (connection As EntityConnection, defaultContainerName As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ObjectContext(System::Data::EntityClient::EntityConnection ^ connection, System::String ^ defaultContainerName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.EntityClient.EntityConnection" />
        <Parameter Name="defaultContainerName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connection">
          <see cref="T:System.Data.EntityClient.EntityConnection" />，其中包含模型的參考與資料來源連接的參考。</param>
        <param name="defaultContainerName">預設實體容器的名稱。 當您透過這個方法設定 <c>defaultContainerName</c> 時，此屬性會變成唯讀的。</param>
        <summary>使用給定的連接和實體容器名稱，初始化 <see cref="T:System.Data.Objects.ObjectContext" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="connection" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="connection" />、<paramref name="defaultContainerName" /> 或中繼資料工作區無效。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ObjectContext (string connectionString, string defaultContainerName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string connectionString, string defaultContainerName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (connectionString As String, defaultContainerName As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ObjectContext(System::String ^ connectionString, System::String ^ defaultContainerName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="defaultContainerName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">連接字串，它也會提供中繼資料資訊的存取權。</param>
        <param name="defaultContainerName">預設實體容器的名稱。 當您透過這個方法設定 <c>defaultContainerName</c> 時，此屬性會變成唯讀的。</param>
        <summary>使用給定的連接字串 (Connection String) 和實體容器 (Container) 名稱，初始化 <see cref="T:System.Data.Objects.ObjectContext" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `connectionString`是一個字串，包含所需的概念模型，並連接到資料來源資訊。 <xref:System.Data.EntityClient.EntityConnectionStringBuilder> 類別可用來正確格式化此字串。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="connectionString" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="connectionString" />、<paramref name="defaultContainerName" /> 或中繼資料工作區無效。</exception>
      </Docs>
    </Member>
    <Member MemberName="AcceptAllChanges">
      <MemberSignature Language="C#" Value="public void AcceptAllChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcceptAllChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.AcceptAllChanges" />
      <MemberSignature Language="VB.NET" Value="Public Sub AcceptAllChanges ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AcceptAllChanges();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>接受對物件內容中之物件所做的所有變更。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 接受在 <xref:System.Data.Objects.ObjectStateManager> 中針對所有相關聯項目所做的變更，所以其結果狀態是未變更或已中斷連結。  
  
 這個方法會逐一查看 <xref:System.Data.Objects.ObjectStateEntry> 內部所有「已加入」或「已修改」的 <xref:System.Data.Objects.ObjectStateManager> 物件，然後將項目的狀態設定為「未變更」。 「已刪除」的項目會成為已中斷連結。  
  
 如果<xref:System.Data.Objects.ObjectContext.SaveChanges%2A>方法呼叫和<xref:System.Data.Objects.SaveOptions.AcceptAllChangesAfterSave>未指定，使用者必須先呼叫<xref:System.Data.Objects.ObjectContext.AcceptAllChanges%2A>方法。 <xref:System.Data.Objects.ObjectContext.AcceptAllChanges%2A> 方法在交易已失敗而且使用者想要重試的案例中很有用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddObject">
      <MemberSignature Language="C#" Value="public void AddObject (string entitySetName, object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddObject(string entitySetName, object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.AddObject(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddObject (entitySetName As String, entity As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddObject(System::String ^ entitySetName, System::Object ^ entity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entitySetName" Type="System.String" />
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entitySetName">表示實體集名稱 (可能會選擇性地由實體容器名稱限定)。</param>
        <param name="entity">要加入的 <see cref="T:System.Object" />。</param>
        <summary>將物件加入至物件內容。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以在 <xref:System.Data.Objects.ObjectContext.AddObject%2A> 上呼叫 <xref:System.Data.Objects.ObjectContext>，以便將此物件加入至物件內容。 請於此物件為新物件 (還不在資料來源中) 時執行此動作。 如需詳細資訊，請參閱[附加和卸離物件](http://msdn.microsoft.com/library/41d5c1ef-1b78-4502-aa10-7e1438d62d23)。  
  
 物件會加入至處於 <xref:System.Data.Objects.ObjectStateManager>、<xref:System.Data.EntityState.Detached> 或 <xref:System.Data.EntityState.Deleted> 狀態中的 <xref:System.Data.EntityState.Added>。  
  
 當您建立與物件內容中另一個物件相關的新物件時，請使用下列其中一種方法來加入此物件：  
  
-   針對 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A> 呼叫 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 方法並指定相關物件。 請針對一對多關聯性 (One-To-Many Relationship) 或多對多關聯性 (Many-To-Many Relationship) 進行此步驟。  
  
-   將 <xref:System.Data.Objects.DataClasses.EntityReference%601.Value%2A> 的 <xref:System.Data.Objects.DataClasses.EntityReference%601> 屬性設定為相關物件。 請針對一對一關聯性 (One-To-One Relationship) 或多對一關聯性 (Many-To-One Relationship) 進行此步驟。  
  
 如需詳細資訊，請參閱[建立、 新增、 修改和刪除物件](http://msdn.microsoft.com/library/f76f1fad-c553-4b59-820b-89b3dec2fad1)。  
  
 如果物件處於已卸離的狀態不可以有<xref:System.Data.EntityKey>。  
  
 規則`entitySetName`格式如下：  
  
-   如果<xref:System.Data.Objects.ObjectContext.DefaultContainerName%2A>屬性是`null`，然後在`entitySetName`必須是完整限定為在*\<實體容器名稱 >*。*\<實體集名稱 >*。  
  
-   如果<xref:System.Data.Objects.ObjectContext.DefaultContainerName%2A>不`null`，然後在`entitySetName`可以是*\<實體容器名稱 >*。*\<實體集名稱 >* 或*\<實體集名稱 >*。  
  
 如果`object`具有<xref:System.Data.EntityKey>和`entitySetName`具有值，然後在<xref:System.Data.Metadata.Edm.EntitySet>實體的索引鍵必須符合<xref:System.Data.Metadata.Edm.EntitySet>，找不到根據`entitySetName`和實體容器名稱。  
  
   
  
## Examples  
 這個範例根據[AdventureWorks Sales Model](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)。 此範例會加入新的產品，並將變更儲存到資料庫。  
  
 [!code-csharp[DP ObjectServices Concepts#AddObject](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#addobject)]
 [!code-vb[DP ObjectServices Concepts#AddObject](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#addobject)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="entity" /> 參數為 <see langword="null" />。  -或-  <paramref name="entitySetName" /> 不合格。</exception>
        <altmember cref="M:System.Data.Objects.ObjectSet`1.AddObject(`0)" />
      </Docs>
    </Member>
    <Member MemberName="ApplyCurrentValues&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public TEntity ApplyCurrentValues&lt;TEntity&gt; (string entitySetName, TEntity currentEntity) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TEntity ApplyCurrentValues&lt;class TEntity&gt;(string entitySetName, !!TEntity currentEntity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.ApplyCurrentValues``1(System.String,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Function ApplyCurrentValues(Of TEntity As Class) (entitySetName As String, currentEntity As TEntity) As TEntity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; where TEntity : class TEntity ApplyCurrentValues(System::String ^ entitySetName, TEntity currentEntity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEntity</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entitySetName" Type="System.String" />
        <Parameter Name="currentEntity" Type="TEntity" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">物件的實體型別。</typeparam>
        <param name="entitySetName">此物件所屬之實體集的名稱。</param>
        <param name="currentEntity">具有要套用至原始物件之屬性更新的已中斷連結物件。 <c>currentEntity</c> 的實體索引鍵必須符合 <see cref="T:System.Data.Objects.ObjectContext" /> 中項目的 <see cref="P:System.Data.Objects.ObjectStateEntry.EntityKey" /> 屬性。</param>
        <summary>將純量值從提供的物件複製到 <see cref="T:System.Data.Objects.ObjectContext" /> 中具有相同索引鍵的物件。</summary>
        <returns>更新的物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.ApplyCurrentValues%2A>方法用來將外之物件所做的變更套用<xref:System.Data.Objects.ObjectContext>，例如 Web 服務接收的中斷連結物件。 此方法將純量值從提供的物件複製到中的物件<xref:System.Data.Objects.ObjectContext>中具有相同索引鍵。 您可以使用<xref:System.Data.EntityKey>的資料來源擷取這個物件的執行個體中斷連結的物件。 如需詳細資訊，請參閱[如何： 傳回特定的物件使用其索引鍵](http://msdn.microsoft.com/library/2e9902af-29b0-4e5d-92db-03dfe6ec49bd)。 任何物件的原始值不同的值會標示為已修改。 請注意，相關物件的方法不適的目前值`currentEntity`。  
  
 如果您有目前值的圖形，並想要套用的原始值，呼叫<xref:System.Data.Objects.ObjectContext.ApplyOriginalValues%2A>方法。  
  
 您也可以使用<xref:System.Data.Objects.ObjectSet%601.ApplyCurrentValues%2A>的<xref:System.Data.Objects.ObjectSet%601>或<xref:System.Data.Objects.ObjectStateEntry.ApplyCurrentValues%2A>方法<xref:System.Data.Objects.ObjectStateEntry>。 如需詳細資訊，請參閱[建置多層式架構應用程式](http://msdn.microsoft.com/library/9439d2ba-6b5f-44e8-be65-8a442d922cbb)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="entitySetName" /> 或 <paramref name="current" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="entitySetName" /> 的 <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 不符合物件之 <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 的 <see cref="T:System.Data.EntityKey" />。  -或-  物件的狀態不是 <see cref="T:System.Data.Objects.ObjectStateManager" />，或是狀態是 <see cref="F:System.Data.EntityState.Detached" />。  -或-  提供物件的實體索引鍵無效。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="entitySetName" /> 為空字串。</exception>
        <altmember cref="M:System.Data.Objects.ObjectSet`1.ApplyCurrentValues(`0)" />
        <altmember cref="M:System.Data.Objects.ObjectStateEntry.ApplyCurrentValues(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ApplyOriginalValues&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public TEntity ApplyOriginalValues&lt;TEntity&gt; (string entitySetName, TEntity originalEntity) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TEntity ApplyOriginalValues&lt;class TEntity&gt;(string entitySetName, !!TEntity originalEntity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.ApplyOriginalValues``1(System.String,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Function ApplyOriginalValues(Of TEntity As Class) (entitySetName As String, originalEntity As TEntity) As TEntity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; where TEntity : class TEntity ApplyOriginalValues(System::String ^ entitySetName, TEntity originalEntity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEntity</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entitySetName" Type="System.String" />
        <Parameter Name="originalEntity" Type="TEntity" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">實體物件的型別。</typeparam>
        <param name="entitySetName">此物件所屬之實體集的名稱。</param>
        <param name="originalEntity">具有要套用至物件之原始值的已中斷連結物件。 <c>originalEntity</c> 的實體索引鍵必須符合 <see cref="T:System.Data.Objects.ObjectContext" /> 中項目的 <see cref="P:System.Data.Objects.ObjectStateEntry.EntityKey" /> 屬性。</param>
        <summary>從提供的物件將純量值複製至 <see cref="T:System.Data.Objects.ObjectContext" /> 中具有相同索引鍵之物件的原始值組。</summary>
        <returns>更新的物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.ApplyOriginalValues%2A>方法用來將外之物件所做的變更套用<xref:System.Data.Objects.ObjectContext>，例如 Web 服務接收的中斷連結物件。 此方法將純量值從提供的物件複製到中的物件<xref:System.Data.Objects.ObjectContext>中具有相同索引鍵。 您可以使用<xref:System.Data.EntityKey>的資料來源擷取這個物件的執行個體中斷連結的物件。 如需詳細資訊，請參閱[如何： 傳回特定的物件使用其索引鍵](http://msdn.microsoft.com/library/2e9902af-29b0-4e5d-92db-03dfe6ec49bd)。 不同於目前的值物件的任何值都標示為已修改。 請注意，相關物件的方法不適的目前值`originalEntity`。  
  
 如果您有原始值的圖形，並想要套用目前的值，呼叫<xref:System.Data.Objects.ObjectContext.ApplyCurrentValues%2A>方法。  
  
 您也可以使用<xref:System.Data.Objects.ObjectSet%601.ApplyOriginalValues%2A>的<xref:System.Data.Objects.ObjectSet%601>或<xref:System.Data.Objects.ObjectStateEntry.ApplyOriginalValues%2A>方法<xref:System.Data.Objects.ObjectStateEntry>。 如需詳細資訊，請參閱[建置多層式架構應用程式](http://msdn.microsoft.com/library/9439d2ba-6b5f-44e8-be65-8a442d922cbb)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="entitySetName" /> 或 <paramref name="original" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="entitySetName" /> 的 <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 不符合物件之 <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 的 <see cref="T:System.Data.EntityKey" />。  -或-  <see cref="T:System.Data.Objects.ObjectStateManager" /> 中找不到物件的 <see cref="T:System.Data.Objects.ObjectStateEntry" />。 -或-  物件處於 <see cref="F:System.Data.EntityState.Added" /> 或 <see cref="F:System.Data.EntityState.Detached" /> 狀態。  -或-  提供物件的實體索引鍵無效，或有屬性變更。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="entitySetName" /> 為空字串。</exception>
        <altmember cref="M:System.Data.Objects.ObjectSet`1.ApplyOriginalValues(`0)" />
        <altmember cref="M:System.Data.Objects.ObjectStateEntry.ApplyOriginalValues(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ApplyPropertyChanges">
      <MemberSignature Language="C#" Value="public void ApplyPropertyChanges (string entitySetName, object changed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ApplyPropertyChanges(string entitySetName, object changed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.ApplyPropertyChanges(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyPropertyChanges (entitySetName As String, changed As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyPropertyChanges(System::String ^ entitySetName, System::Object ^ changed);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("Use ApplyCurrentValues instead")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entitySetName" Type="System.String" />
        <Parameter Name="changed" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entitySetName">此物件所屬之實體集的名稱。</param>
        <param name="changed">具有要套用至原始物件之屬性更新的已中斷連結物件。</param>
        <summary>將已中斷連結物件中的屬性變更套用至已經附加至物件內容的物件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.ApplyCurrentValues%2A> 方法是用來將已修改且已中斷連結版本之物件中的屬性變更套用至附加至 <xref:System.Data.Objects.ObjectContext> 的原始版本。 這會支援 Web 服務等案例，其中實體物件已中斷連結並且傳送至進行屬性更新的遠端應用程式。 這個方法可讓您更輕鬆地將這些變更套用回原始物件。  
  
 在 <xref:System.Data.Objects.ObjectContext.ApplyCurrentValues%2A> 之後，此物件會處於 <xref:System.Data.EntityState.Modified> 狀態中。 您必須呼叫 <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> 方法來更新資料來源。  
  
 原始物件必須存在 <xref:System.Data.Objects.ObjectStateManager> 中，而且必須處於 <xref:System.Data.EntityState.Modified> 或 <xref:System.Data.EntityState.Unchanged> 狀態中。 如果已修改之屬性中的，只會修改原始物件`changed`物件。  
  
 提供之物件的 <xref:System.Data.Objects.DataClasses.EntityObject.EntityKey%2A> 屬性必須設定為有效的 <xref:System.Data.EntityKey>。  
  
 <xref:System.Data.Objects.ObjectContext.ApplyCurrentValues%2A> 不會影響導覽屬性或相關物件。  
  
 <xref:System.Data.Objects.ObjectContext.ApplyCurrentValues%2A> 只會針對此型別設定存在實體中繼資料中的屬性。 例如，加入部分類別中的屬性就不會包含在 <xref:System.Data.Objects.ObjectContext.ApplyCurrentValues%2A> 作業中。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">當 <paramref name="entitySetName" /> 為 <see langword="null" /> 或空字串時。  -或-  當 <paramref name="changed" /> 為 <see langword="null" /> 時。</exception>
        <exception cref="T:System.InvalidOperationException">當 <paramref name="entitySetName" /> 的 <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 不符合物件之 <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 的 <see cref="T:System.Data.EntityKey" /> 時。  -或-  當實體處於 <see cref="F:System.Data.EntityState.Modified" /> 或 <see cref="F:System.Data.EntityState.Unchanged" /> 以外的狀態時。  -或-  原始物件沒有附加至內容。</exception>
        <exception cref="T:System.ArgumentException">當 <paramref name="changed" /> 物件的型別與原始物件的型別不同時。</exception>
      </Docs>
    </Member>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (System.Data.Objects.DataClasses.IEntityWithKey entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Attach(class System.Data.Objects.DataClasses.IEntityWithKey entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.Attach(System.Data.Objects.DataClasses.IEntityWithKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As IEntityWithKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(System::Data::Objects::DataClasses::IEntityWithKey ^ entity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Data.Objects.DataClasses.IEntityWithKey" />
      </Parameters>
      <Docs>
        <param name="entity">要附加的物件。</param>
        <summary>當物件具有實體索引鍵時，將物件或物件圖形附加至物件內容。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以在 <xref:System.Data.Objects.ObjectContext.Attach%2A> 上呼叫 <xref:System.Data.Objects.ObjectContext>，以便將此物件附加到物件內容。 請於此物件已經在資料來源中但目前未附加到此內容時執行此動作。 如需詳細資訊，請參閱[自訂物件](http://msdn.microsoft.com/library/af6f07ce-2261-4c65-87cf-d018ad082921)。  
  
 <xref:System.Data.Objects.ObjectContext.Attach%2A> 是用來附加物件或物件圖形中的最上層物件。  
  
 所附加的物件必須實作 <xref:System.Data.Objects.DataClasses.IEntityWithKey> 來公開 (Expose) <xref:System.Data.EntityKey>。 所有產生的實體類別都會實作 <xref:System.Data.Objects.DataClasses.IEntityWithKey>。  
  
 當您附加的相關的物件時，您也必須呼叫`Attach`上<xref:System.Data.Objects.DataClasses.EntityReference%601>或<xref:System.Data.Objects.DataClasses.EntityCollection%601>定義關聯性。  
  
 這個方法會呼叫 <xref:System.Data.Objects.ObjectContext.AttachTo%2A> 方法。  
  
 下列考量適用於附加物件時：  
  
-   如果所附加的物件有相關物件，這些物件也會附加到物件內容。  
  
-   物件會加入至處於未變更狀態中的物件內容。  
  
-   傳遞給 <xref:System.Data.Objects.ObjectContext.Attach%2A> 方法的物件必須具有有效的 <xref:System.Data.Objects.DataClasses.EntityObject.EntityKey%2A> 值。 如果此物件的 <xref:System.Data.Objects.DataClasses.EntityObject.EntityKey%2A> 值無效，請使用 <xref:System.Data.Objects.ObjectContext.AttachTo%2A> 方法來指定實體集的名稱。  
  
   
  
## Examples  
 本主題中的範例根據[AdventureWorks Sales Model](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)。 在這個範例中，我們將附加兩個物件，然後定義其關聯性。  
  
 [!code-csharp[DP ObjectServices Concepts#AttachRelatedObjects](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#attachrelatedobjects)]
 [!code-vb[DP ObjectServices Concepts#AttachRelatedObjects](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#attachrelatedobjects)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="entity" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">無效的實體索引鍵。</exception>
        <altmember cref="M:System.Data.Objects.ObjectSet`1.Attach(`0)" />
      </Docs>
    </Member>
    <Member MemberName="AttachTo">
      <MemberSignature Language="C#" Value="public void AttachTo (string entitySetName, object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AttachTo(string entitySetName, object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.AttachTo(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AttachTo (entitySetName As String, entity As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AttachTo(System::String ^ entitySetName, System::Object ^ entity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entitySetName" Type="System.String" />
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entitySetName">表示實體集名稱 (可能會選擇性地由實體容器名稱限定)。</param>
        <param name="entity">要附加的 <see cref="T:System.Object" />。</param>
        <summary>將物件或物件圖形附加至位於特定實體集中的物件內容。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫<xref:System.Data.Objects.ObjectContext.AttachTo%2A>上<xref:System.Data.Objects.ObjectContext>來將物件附加至物件內容中設定的特定實體或如果物件具有`null`(`Nothing`在 Visual Basic 中)<xref:System.Data.EntityKey>值。 如需詳細資訊，請參閱[附加和卸離物件](http://msdn.microsoft.com/library/41d5c1ef-1b78-4502-aa10-7e1438d62d23)。  
  
 所附加的物件可以是單一物件或圖形的一部分。  
  
 規則`entitySetName`格式如下：  
  
-   如果<xref:System.Data.Objects.ObjectContext.DefaultContainerName%2A>屬性是`null`，然後在`entitySetName`必須是完整限定為在*\<實體容器名稱 >*。*\<實體集名稱 >*。  
  
-   如果<xref:System.Data.Objects.ObjectContext.DefaultContainerName%2A>不`null`，然後在`entitySetName`可以是*\<實體容器名稱 >*。*\<實體集名稱 >* 或*\<實體集名稱 >*。  
  
 所附加的物件不需要具有相關聯的 <xref:System.Data.EntityKey>。 如果物件沒有實體索引鍵，然後`entitySetName`不可為空字串。  
  
 如果要附加的物件具有<xref:System.Data.EntityKey>和`entitySetName`具有值，然後在<xref:System.Data.Metadata.Edm.EntitySet>實體的索引鍵必須符合<xref:System.Data.Metadata.Edm.EntitySet>，找不到根據`entitySetName`和實體容器名稱。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="entity" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">無效的實體集。  -或-  此物件具有暫存索引鍵。  -或-  此物件具有 <see cref="T:System.Data.EntityKey" /> 而且 <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 不符合傳入當作方法引數的實體集。  -或-  此物件沒有 <see cref="T:System.Data.EntityKey" /> 而且沒有提供任何實體集。  -或-  物件圖形中的任何物件都具有暫存 <see cref="T:System.Data.EntityKey" />。  -或-  物件圖形中的任何物件都具有無效的 <see cref="T:System.Data.EntityKey" /> (例如，索引鍵中的值不符合物件中的值)。  -或-  根據指定的 <paramref name="entitySetName" /> 名稱和實體容器名稱找不到實體集。  -或-  物件圖形中的任何物件都已經存在另一個狀態管理員中。</exception>
        <altmember cref="M:System.Data.Objects.ObjectSet`1.Attach(`0)" />
      </Docs>
    </Member>
    <Member MemberName="CommandTimeout">
      <MemberSignature Language="C#" Value="public Nullable&lt;int&gt; CommandTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int32&gt; CommandTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.ObjectContext.CommandTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandTimeout As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;int&gt; CommandTimeout { Nullable&lt;int&gt; get(); void set(Nullable&lt;int&gt; value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定所有物件內容作業的逾時值 (以秒為單位)。 <see langword="null" /> 值表示將會使用基礎提供者 (Provider) 的預設值。</summary>
        <value>
          <see cref="T:System.Int32" /> 值，它是逾時值 (以秒為單位)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 物件查詢和 <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> 作業的預設逾時是由基礎連接提供者所定義。 但是，您可以在 <xref:System.Data.Objects.ObjectContext.CommandTimeout%2A> 上使用 <xref:System.Data.Objects.ObjectContext> 屬性來覆寫這個預設逾時值，如下列範例所示。  
  
 [!code-csharp[DP ObjectServices Concepts#QueryTimeout](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#querytimeout)]
 [!code-vb[DP ObjectServices Concepts#QueryTimeout](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#querytimeout)]  
  
 當您具有複雜的查詢，或是當其他效能問題造成查詢或 <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> 的呼叫經常逾時的時候，請進行這項處理。  
  
   
  
## Examples  
 [物件查詢](http://msdn.microsoft.com/library/0768033c-876f-471d-85d5-264884349276)  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">逾時值小於 0。</exception>
      </Docs>
    </Member>
    <Member MemberName="Connection">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbConnection Connection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbConnection Connection" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.ObjectContext.Connection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Connection As DbConnection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbConnection ^ Connection { System::Data::Common::DbConnection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得物件內容所使用的連接。</summary>
        <value>成為連接的 <see cref="T:System.Data.Common.DbConnection" /> 物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性會傳回傳遞給建構函式 (Constructor) 或在建構期間建立的連接物件。 連接的擁有權是由使用的建構函式所決定。  
  
   
  
## Examples  
 這個範例會建立 <xref:System.Data.EntityClient.EntityConnection> 物件，然後將它傳遞至長時間執行之 <xref:System.Data.Objects.ObjectContext> 的建構函式中。 連接已手動開啟。 <xref:System.Data.EntityClient.EntityConnection> 物件和 <xref:System.Data.Objects.ObjectContext> 物件則已手動處置。  
  
 [!code-csharp[DP ObjectServices Concepts#OpenEntityConnection](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#openentityconnection)]
 [!code-vb[DP ObjectServices Concepts#OpenEntityConnection](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#openentityconnection)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">當已處置 <see cref="T:System.Data.Objects.ObjectContext" /> 執行個體時。</exception>
      </Docs>
    </Member>
    <Member MemberName="ContextOptions">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectContextOptions ContextOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Objects.ObjectContextOptions ContextOptions" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.ObjectContext.ContextOptions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContextOptions As ObjectContextOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Objects::ObjectContextOptions ^ ContextOptions { System::Data::Objects::ObjectContextOptions ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectContextOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.Data.Objects.ObjectContextOptions" /> 執行個體，這個執行個體包含影響 <see cref="T:System.Data.Objects.ObjectContext" /> 之行為的選項。</summary>
        <value>
          <see cref="T:System.Data.Objects.ObjectContextOptions" /> 執行個體，包含影響 <see cref="T:System.Data.Objects.ObjectContext" /> 之行為的選項。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDatabase">
      <MemberSignature Language="C#" Value="public void CreateDatabase ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CreateDatabase() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.CreateDatabase" />
      <MemberSignature Language="VB.NET" Value="Public Sub CreateDatabase ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CreateDatabase();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>使用目前資料來源連接和 <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" /> 中的中繼資料，建立資料庫。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫<xref:System.Data.Objects.ObjectContext.CreateDatabaseScript%2A>若要檢視資料定義語言 (DDL) 指令碼。 呼叫<xref:System.Data.Objects.ObjectContext.CreateDatabase%2A>執行指令碼。  
  
 大部分的工作委派給<xref:System.Data.Common.DbProviderServices.CreateDatabase%2A>方法。  
  
 如需詳細資訊，請參閱[使用資料定義語言](~/docs/framework/data/adonet/ef/working-with-data-definition-language.md)。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.Objects.ObjectContext.CreateDatabaseScript" />
        <altmember cref="M:System.Data.Objects.ObjectContext.DatabaseExists" />
      </Docs>
    </Member>
    <Member MemberName="CreateDatabaseScript">
      <MemberSignature Language="C#" Value="public string CreateDatabaseScript ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string CreateDatabaseScript() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.CreateDatabaseScript" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateDatabaseScript () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ CreateDatabaseScript();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>產生資料定義語言 (DDL) 指令碼，這個指令碼會針對 <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" /> 中的中繼資料建立結構描述物件 (資料表、主索引鍵、外部索引鍵)。 <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" /> 會從存放結構定義語言 (SSDL) 檔載入中繼資料。</summary>
        <returns>DDL 指令碼，這個指令碼會針對 <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" /> 中的中繼資料建立結構描述物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫<xref:System.Data.Objects.ObjectContext.CreateDatabaseScript%2A>檢視 DDL 指令碼。 呼叫<xref:System.Data.Objects.ObjectContext.CreateDatabase%2A>執行指令碼。  
  
 大部分的工作委派給<xref:System.Data.Common.DbProviderServices.CreateDatabase%2A>方法。  
  
 如需詳細資訊，請參閱[使用資料定義語言](~/docs/framework/data/adonet/ef/working-with-data-definition-language.md)。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.Objects.ObjectContext.CreateDatabase" />
        <altmember cref="M:System.Data.Objects.ObjectContext.DatabaseExists" />
      </Docs>
    </Member>
    <Member MemberName="CreateEntityKey">
      <MemberSignature Language="C#" Value="public System.Data.EntityKey CreateEntityKey (string entitySetName, object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.EntityKey CreateEntityKey(string entitySetName, object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.CreateEntityKey(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateEntityKey (entitySetName As String, entity As Object) As EntityKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::EntityKey ^ CreateEntityKey(System::String ^ entitySetName, System::Object ^ entity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.EntityKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entitySetName" Type="System.String" />
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entitySetName">此實體物件所屬之實體集的完整限定名稱。</param>
        <param name="entity">要擷取其實體索引鍵的物件。</param>
        <summary>建立特定物件的實體索引鍵，或傳回實體索引鍵 (如果已經存在的話)。</summary>
        <returns>物件的 <see cref="T:System.Data.EntityKey" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Data.EntityKey>不存在的`entity`、<xref:System.Data.Objects.ObjectContext.CreateEntityKey%2A>方法會為它建立新的金鑰。  
  
 這個方法是用來判斷具有相同 <xref:System.Data.EntityKey> 的物件是否已經附加至 <xref:System.Data.Objects.ObjectContext>。 如果已經附加具有相同 <xref:System.Data.EntityKey> 的物件，就會引發例外狀況。 您可以先使用 <xref:System.Data.Objects.ObjectContext.CreateEntityKey%2A> 方法來嘗試擷取已中斷連結物件的 <xref:System.Data.EntityKey>，然後再呼叫 <xref:System.Data.Objects.ObjectContext.Attach%2A> 方法。  
  
   
  
## Examples  
 本主題中的範例根據[AdventureWorks Sales Model](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)。 在這個範例中，<xref:System.Data.Objects.ObjectContext.CreateEntityKey%2A> 是用來擷取現有物件的實體索引鍵。  
  
 [!code-csharp[DP ObjectServices Concepts#ApplyItemUpdatesGetObject](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#applyitemupdatesgetobject)]
 [!code-vb[DP ObjectServices Concepts#ApplyItemUpdatesGetObject](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#applyitemupdatesgetobject)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">當任一個參數是 <see langword="null" /> 時。</exception>
        <exception cref="T:System.ArgumentException">當 <paramref name="entitySetName" /> 是空的。  -或-  當 <paramref name="entity" /> 物件的型別不存在於實體集時。  -或-  當 <paramref name="entitySetName" /> 不完整時。</exception>
        <exception cref="T:System.InvalidOperationException">無法根據提供的參數成功建構實體索引鍵時。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateObject&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T CreateObject&lt;T&gt; () where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T CreateObject&lt;class T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.CreateObject``1" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateObject(Of T As Class) () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class T CreateObject();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">要傳回的物件型別。</typeparam>
        <summary>建立和傳回所要求之類型的執行個體。</summary>
        <returns>所要求之型別 <paramref name="T" /> 的執行個體，或可讓 <paramref name="T" /> 與 Entity Framework 一起使用之衍生型別的執行個體。 傳回的物件是所要求型別的執行個體，或是可讓要求的型別與 Entity Framework 搭配使用的衍生型別執行個體。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.CreateObject%2A>方法 POCO 自訂資料類別一起用來確定傳回的物件可以正確管理由 Entity Framework。 如需詳細資訊，請參閱[POCO 建立 Proxy 需求](http://msdn.microsoft.com/library/dcdbf982-9b9d-4582-806a-64de4a1c03c8)和[處理 POCO 實體](http://msdn.microsoft.com/library/5e0fb82a-b6d1-41a1-b37b-c12db61629d3)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateObjectSet&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectSet&lt;TEntity&gt; CreateObjectSet&lt;TEntity&gt; () where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectSet`1&lt;!!TEntity&gt; CreateObjectSet&lt;class TEntity&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.CreateObjectSet``1" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateObjectSet(Of TEntity As Class) () As ObjectSet(Of TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; where TEntity : class System::Data::Objects::ObjectSet&lt;TEntity&gt; ^ CreateObjectSet();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectSet&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TEntity">所要求之 <see cref="T:System.Data.Objects.ObjectSet`1" /> 的實體型別。</typeparam>
        <summary>建立新的 <see cref="T:System.Data.Objects.ObjectSet`1" /> 執行個體，這個執行個體用來查詢、加入、修改和刪除指定之實體型別的物件。</summary>
        <returns>新 <see cref="T:System.Data.Objects.ObjectSet`1" /> 執行個體。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Data.Objects.ObjectContext.DefaultContainerName" /> 屬性未在 <see cref="T:System.Data.Objects.ObjectContext" /> 直接設定。  -或-  指定的型別屬於一個以上的實體集。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateObjectSet&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectSet&lt;TEntity&gt; CreateObjectSet&lt;TEntity&gt; (string entitySetName) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectSet`1&lt;!!TEntity&gt; CreateObjectSet&lt;class TEntity&gt;(string entitySetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.CreateObjectSet``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateObjectSet(Of TEntity As Class) (entitySetName As String) As ObjectSet(Of TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; where TEntity : class System::Data::Objects::ObjectSet&lt;TEntity&gt; ^ CreateObjectSet(System::String ^ entitySetName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectSet&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entitySetName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">所要求之 <see cref="T:System.Data.Objects.ObjectSet`1" /> 的實體型別。</typeparam>
        <param name="entitySetName">所傳回之 <see cref="T:System.Data.Objects.ObjectSet`1" /> 的實體集名稱。 如果 <see cref="P:System.Data.Objects.ObjectContext.DefaultContainerName" /> 上未設定 <see cref="T:System.Data.Objects.ObjectContext" /> 屬性，則必須由預設容器名稱來限定字串。</param>
        <summary>建立新的 <see cref="T:System.Data.Objects.ObjectSet`1" /> 執行個體，這個執行個體用來查詢、加入、修改和刪除具有指定之型別和指定之實體集名稱的物件。</summary>
        <returns>新 <see cref="T:System.Data.Objects.ObjectSet`1" /> 執行個體。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="entitySetName" /> 的 <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 不符合物件之 <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 的 <see cref="T:System.Data.EntityKey" />。  -或-  <see cref="T:System.Data.Objects.ObjectContext" /> 上未設定 <see cref="P:System.Data.Objects.ObjectContext.DefaultContainerName" /> 屬性，而且名稱不符合 <paramref name="entitySetName" /> 參數的一部分。  -或-  指定的型別屬於一個以上的實體集。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateProxyTypes">
      <MemberSignature Language="C#" Value="public void CreateProxyTypes (System.Collections.Generic.IEnumerable&lt;Type&gt; types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CreateProxyTypes(class System.Collections.Generic.IEnumerable`1&lt;class System.Type&gt; types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.CreateProxyTypes(System.Collections.Generic.IEnumerable{System.Type})" />
      <MemberSignature Language="VB.NET" Value="Public Sub CreateProxyTypes (types As IEnumerable(Of Type))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CreateProxyTypes(System::Collections::Generic::IEnumerable&lt;Type ^&gt; ^ types);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="System.Collections.Generic.IEnumerable&lt;System.Type&gt;" />
      </Parameters>
      <Docs>
        <param name="types">
          <see cref="T:System.Type" /> 物件的列舉，這些物件表示對應至概念模型的自訂資料類別。</param>
        <summary>針對所提供之列舉中的每一個型別，產生可以與 Entity Framework 一起使用的對等型別。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 中的個別類型`types`不會對應至概念模型中實體類型的列舉型別會被忽略。  
  
 如需詳細資訊，請參閱[POCO 建立 Proxy 需求](http://msdn.microsoft.com/library/dcdbf982-9b9d-4582-806a-64de4a1c03c8)和[處理 POCO 實體](http://msdn.microsoft.com/library/5e0fb82a-b6d1-41a1-b37b-c12db61629d3)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateQuery&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; CreateQuery&lt;T&gt; (string queryString, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!!T&gt; CreateQuery&lt;T&gt;(string queryString, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.CreateQuery``1(System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateQuery(Of T) (queryString As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ CreateQuery(System::String ^ queryString, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryString" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T">傳回之 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 的實體類型。</typeparam>
        <param name="queryString">要執行的查詢字串。</param>
        <param name="parameters">要傳遞給查詢的參數。</param>
        <summary>使用指定的查詢字串，在目前的物件內容中建立 <see cref="T:System.Data.Objects.ObjectQuery`1" />。</summary>
        <returns>指定之型別的 <see cref="T:System.Data.Objects.ObjectQuery`1" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用 <xref:System.Data.Objects.ObjectContext.CreateQuery%2A> 來建立屬於目前物件內容之指定型別的 <xref:System.Data.Objects.ObjectQuery%601>。  
  
   
  
## Examples  
 這個範例根據[AdventureWorks Sales Model](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)。  
  
 此範例會建立簡單查詢，並且逐一查看結果的集合。  
  
 [!code-csharp[DP ObjectServices Concepts#CreateQuery](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#createquery)]
 [!code-vb[DP ObjectServices Concepts#CreateQuery](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#createquery)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="queryString" /> 或 <paramref name="parameters" /> 參數為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DatabaseExists">
      <MemberSignature Language="C#" Value="public bool DatabaseExists ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool DatabaseExists() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.DatabaseExists" />
      <MemberSignature Language="VB.NET" Value="Public Function DatabaseExists () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool DatabaseExists();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>檢查在目前資料來源連接中指定為資料庫的資料庫是否存在於資料來源上。</summary>
        <returns>如果資料庫存在，則為 <see langword="true" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 大部分的工作委派給<xref:System.Data.Common.DbProviderServices.DatabaseExists%2A>方法。  
  
 如需詳細資訊，請參閱[使用資料定義語言](~/docs/framework/data/adonet/ef/working-with-data-definition-language.md)。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.Objects.ObjectContext.CreateDatabase" />
        <altmember cref="M:System.Data.Objects.ObjectContext.CreateDatabaseScript" />
      </Docs>
    </Member>
    <Member MemberName="DefaultContainerName">
      <MemberSignature Language="C#" Value="public string DefaultContainerName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DefaultContainerName" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.ObjectContext.DefaultContainerName" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultContainerName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DefaultContainerName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定預設容器名稱。</summary>
        <value>
          <see cref="T:System.String" />，它是預設容器名稱。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.DefaultContainerName%2A> 永遠不會傳回`null`; 它會傳回集合或空字串的值。 使用者可以將這個屬性設定為`null`，但名稱在內部將設定為空字串，所以使用者永遠不需要檢查這兩個空字串和`null`。  
  
 預設容器名稱也會定義成建構函式的一部分。 如果您透過受保護的建構函式設定預設容器名稱，此屬性會變成唯讀的。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteDatabase">
      <MemberSignature Language="C#" Value="public void DeleteDatabase ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteDatabase() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.DeleteDatabase" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteDatabase ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteDatabase();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>刪除在目前資料來源連接中指定為資料庫的資料庫。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 大部分的工作委派給<xref:System.Data.Common.DbProviderServices.DeleteDatabase%2A>方法。  
  
 如需詳細資訊，請參閱[使用資料定義語言](~/docs/framework/data/adonet/ef/working-with-data-definition-language.md)。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.Objects.ObjectContext.CreateDatabase" />
        <altmember cref="M:System.Data.Objects.ObjectContext.CreateDatabaseScript" />
        <altmember cref="M:System.Data.Objects.ObjectContext.DatabaseExists" />
      </Docs>
    </Member>
    <Member MemberName="DeleteObject">
      <MemberSignature Language="C#" Value="public void DeleteObject (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteObject(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.DeleteObject(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteObject (entity As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteObject(System::Object ^ entity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">指定要刪除之實體的物件。 此物件可以處於任何狀態中，但 <see cref="F:System.Data.EntityState.Detached" /> 除外。</param>
        <summary>將物件標記為待刪除。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 從 <xref:System.Data.Objects.ObjectStateManager> 將物件標記為待刪除。 呼叫 <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> 方法時，就會在資料來源中刪除此物件。  
  
 刪除父物件也會刪除條件約束關聯性中的所有子物件。 這個結果與在關聯性的關聯上啟用 `CascadeDelete` 屬性相同。  
  
 <xref:System.Data.Objects.ObjectContext.DeleteObject%2A>已刪除的物件上呼叫方法。  
  
   
  
## Examples  
 這些範例根據[AdventureWorks Sales Model](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)。  
  
 這個範例會建構<xref:System.Data.EntityKey>特定 productid，使用資料來源中擷取產品物件的索引鍵，會刪除產品，並儲存變更到資料庫。  
  
 [!code-csharp[DP ObjectServices Concepts#DeleteObject](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#deleteobject)]
 [!code-vb[DP ObjectServices Concepts#DeleteObject](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#deleteobject)]  
  
 這個範例會刪除現有的訂單項目、 加入新項目，並將變更儲存到資料庫。  
  
 [!code-csharp[DP ObjectServices Concepts#SaveChanges](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#savechanges)]
 [!code-vb[DP ObjectServices Concepts#SaveChanges](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#savechanges)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="entity" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="entity" /> 不存在。</exception>
        <altmember cref="M:System.Data.Objects.ObjectSet`1.DeleteObject(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Detach">
      <MemberSignature Language="C#" Value="public void Detach (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Detach(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.Detach(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Detach (entity As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Detach(System::Object ^ entity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">要中斷連結的物件。 只會移除「實體」<c></c>。如果有任何由相同 <see cref="T:System.Data.Objects.ObjectStateManager" /> 所追蹤的相關物件存在，這些物件將不會自動中斷連結。</param>
        <summary>從物件內容中移除物件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 從 <xref:System.Data.Objects.ObjectStateManager> 中移除此物件。 這會停用該物件的變更追蹤和識別 (Identity) 解析。 如需詳細資訊，請參閱[附加和卸離物件](http://msdn.microsoft.com/library/41d5c1ef-1b78-4502-aa10-7e1438d62d23)。  
  
 呼叫 <xref:System.Data.Objects.ObjectContext.Detach%2A> 方法之後，系統將不再保留指向此物件的參考，而且可能會由記憶體回收行程收集這些參考。  
  
> [!NOTE]
>  只有當使用者程式碼沒有已中斷連結物件的任何參考時，才可以進行記憶體回收。  
  
 下列考量適用於中斷連結物件時：  
  
-   <xref:System.Data.Objects.ObjectContext.Detach%2A> 只會影響傳遞給此方法的特定物件。 如果中斷連結的物件在物件內容中有相關物件，這些物件並不會中斷連結。  
  
-   中斷連結物件不會影響資料來源中的資料。  
  
-   在中斷連結作業期間，不會強制執行串聯 (Cascade) 刪除指示詞和參考條件約束 (Constraint)。  
  
 如需詳細資訊，請參閱[附加和卸離物件](http://msdn.microsoft.com/library/41d5c1ef-1b78-4502-aa10-7e1438d62d23)。  
  
   
  
## Examples  
 [!code-csharp[DP ObjectServices Concepts#DetachObjects](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#detachobjects)]
 [!code-vb[DP ObjectServices Concepts#DetachObjects](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#detachobjects)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="entity" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="entity" /> 沒有與這個 <see cref="T:System.Data.Objects.ObjectContext" /> 相關聯 (例如，新建立而且尚未與任何內容相關聯，或者透過某些其他內容取得，或者已經中斷連結)。</exception>
        <altmember cref="M:System.Data.Objects.ObjectSet`1.Detach(`0)" />
      </Docs>
    </Member>
    <Member MemberName="DetectChanges">
      <MemberSignature Language="C#" Value="public void DetectChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DetectChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.DetectChanges" />
      <MemberSignature Language="VB.NET" Value="Public Sub DetectChanges ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DetectChanges();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>確保 <see cref="T:System.Data.Objects.ObjectStateEntry" /> 變更與 <see cref="T:System.Data.Objects.ObjectStateManager" /> 所追蹤之所有物件中的變更同步化。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>釋放物件內容所使用的資源。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>釋放物件內容所使用的資源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果它由 Entity Framework 所開啟，這個方法會關閉連接。 之後<xref:System.Data.Objects.ObjectContext.Dispose%2A>呼叫時，需要開啟連接，例如執行查詢，或呼叫的作業<xref:System.Data.Objects.ObjectQuery.ToTraceString%2A>方法，將會導致例外狀況。 不需要開啟連接的作業 (例如撰寫查詢或附加物件) 就不會導致例外狀況。 <xref:System.Data.Objects.ObjectContext.Dispose%2A>方法不會關閉任何明確開啟的連接。  
  
 限制的範圍<xref:System.Data.Objects.ObjectContext>內`using`區塊 (`Using`在 Visual Basic 中) 可確保正確地處置資源。 如需詳細資訊，請參閱[管理連接與交易](http://msdn.microsoft.com/library/b6659d2a-9a45-4e98-acaa-d7a8029e5b99)。  
  
 <xref:System.Data.Objects.ObjectContext.Dispose>方法呼叫`virtual`(`Overridable`在 Visual Basic 中)<xref:System.Data.Objects.ObjectContext.Dispose%28System.Boolean%29>方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
        <summary>釋放物件內容所使用的資源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會關閉連接。 之後<xref:System.Data.Objects.ObjectContext.Dispose%2A>呼叫時，需要開啟連接，例如執行查詢，或呼叫的作業<xref:System.Data.Objects.ObjectQuery.ToTraceString%2A>方法，將會導致例外狀況。 不需要開啟連接的作業 (例如撰寫查詢或附加物件) 就不會導致例外狀況。  
  
 限制的範圍<xref:System.Data.Objects.ObjectContext>內`using`區塊 (`Using`在 Visual Basic 中) 可確保正確地處置資源。 如需詳細資訊，請參閱[管理連接與交易](http://msdn.microsoft.com/library/b6659d2a-9a45-4e98-acaa-d7a8029e5b99)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteFunction">
      <MemberSignature Language="C#" Value="public int ExecuteFunction (string functionName, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ExecuteFunction(string functionName, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.ExecuteFunction(System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteFunction (functionName As String, ParamArray parameters As ObjectParameter()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ExecuteFunction(System::String ^ functionName, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="functionName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="functionName">預存程序或函式的名稱。 可以包含容器名稱的名稱，例如 <c>&lt;容器名稱&gt;.&lt;函式名稱&gt;</c>。 已知預設容器名稱時，只需要函式名稱。</param>
        <param name="parameters">
          <see cref="T:System.Data.Objects.ObjectParameter" /> 物件的陣列。</param>
        <summary>執行資料來源中所定義和以概念模型表示的預存程序或函式、捨棄函式傳回的任何結果，然後傳回受執行所影響的資料列數目。</summary>
        <returns>受影響的資料列數目。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="function" /> 為 null 或空白  -或-  找不到 <paramref name="function" />。</exception>
        <exception cref="T:System.InvalidOperationException">實體讀取器 (Reader) 不支援這個 <paramref name="function" />。  -或-  讀取器與 <paramref name="function" /> 的型別不相符。</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteFunction&lt;TElement&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectResult&lt;TElement&gt; ExecuteFunction&lt;TElement&gt; (string functionName, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectResult`1&lt;!!TElement&gt; ExecuteFunction&lt;TElement&gt;(string functionName, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.ExecuteFunction``1(System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteFunction(Of TElement) (functionName As String, ParamArray parameters As ObjectParameter()) As ObjectResult(Of TElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TElement&gt;&#xA; System::Data::Objects::ObjectResult&lt;TElement&gt; ^ ExecuteFunction(System::String ^ functionName, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectResult&lt;TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="functionName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TElement">針對資料來源執行此函式時，所傳回之 <see cref="T:System.Data.Objects.ObjectResult`1" /> 的實體類型。 此類型必須實作 <see cref="T:System.Data.Objects.DataClasses.IEntityWithChangeTracker" />。</typeparam>
        <param name="functionName">預存程序或函式的名稱。 可以包含容器名稱的名稱，例如 <c>&lt;容器名稱&gt;.&lt;函式名稱&gt;</c>。 已知預設容器名稱時，只需要函式名稱。</param>
        <param name="parameters">
          <see cref="T:System.Data.Objects.ObjectParameter" /> 物件的陣列。</param>
        <summary>使用指定的參數，執行資料來源中所定義且在概念模型中有所對應的預存程序或函式。 傳回具型別的 <see cref="T:System.Data.Objects.ObjectResult`1" />。</summary>
        <returns>預存程序所傳回之資料的 <see cref="T:System.Data.Objects.ObjectResult`1" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.ExecuteFunction%2A>方法是用來執行預存程序或函式與資料來源中定義概念模型中表示的 helper 方法。 Entity Data Model 工具產生概念模型中的每個方法。 這些方法會呼叫強型別`ExecuteFunction`傳回具型別的<xref:System.Data.Objects.ObjectResult%601>。 如需詳細資訊，請參閱[使用預存程序 （一個架構） 的應用程式程式碼](http://msdn.microsoft.com/library/d13dd33f-fcf9-4e86-bd00-74bc31521536)。  
  
 參數陣列中必須有函式的所有參數，並針對匯入函式，包括的函式本身類型的中繼資料會檢查所有的型別。 `null` CLR 實值型別允許值。 參數驗證是由提供者執行的。  
  
 <xref:System.Data.Objects.ObjectContext.ExecuteFunction%2A>方法會使用<xref:System.Data.Objects.MergeOption>值<xref:System.Data.Objects.MergeOption.AppendOnly>。 因此，如果物件已經存在物件內容中，它將不會載入資料來源。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="function" /> 為 null 或空白  -或-  找不到 <paramref name="function" />。</exception>
        <exception cref="T:System.InvalidOperationException">實體讀取器 (Reader) 不支援這個 <paramref name="function" />。  -或-  讀取器與 <paramref name="function" /> 的型別不相符。</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteFunction&lt;TElement&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectResult&lt;TElement&gt; ExecuteFunction&lt;TElement&gt; (string functionName, System.Data.Objects.MergeOption mergeOption, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectResult`1&lt;!!TElement&gt; ExecuteFunction&lt;TElement&gt;(string functionName, valuetype System.Data.Objects.MergeOption mergeOption, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.ExecuteFunction``1(System.String,System.Data.Objects.MergeOption,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TElement&gt;&#xA; System::Data::Objects::ObjectResult&lt;TElement&gt; ^ ExecuteFunction(System::String ^ functionName, System::Data::Objects::MergeOption mergeOption, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectResult&lt;TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="functionName" Type="System.String" />
        <Parameter Name="mergeOption" Type="System.Data.Objects.MergeOption" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TElement">針對資料來源執行此函式時，所傳回之 <see cref="T:System.Data.Objects.ObjectResult`1" /> 的實體類型。 此類型必須實作 <see cref="T:System.Data.Objects.DataClasses.IEntityWithChangeTracker" />。</typeparam>
        <param name="functionName">預存程序或函式的名稱。 可以包含容器名稱的名稱，例如 <c>&lt;容器名稱&gt;.&lt;函式名稱&gt;</c>。 已知預設容器名稱時，只需要函式名稱。</param>
        <param name="mergeOption">要在執行查詢時使用的 <see cref="T:System.Data.Objects.MergeOption" />。</param>
        <param name="parameters">
          <see cref="T:System.Data.Objects.ObjectParameter" /> 物件的陣列。</param>
        <summary>使用指定的參數和合併選項，執行資料來源中所定義和以概念模型表示之指定的預存程序或函式。 傳回具型別的 <see cref="T:System.Data.Objects.ObjectResult`1" />。</summary>
        <returns>預存程序所傳回之資料的 <see cref="T:System.Data.Objects.ObjectResult`1" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.ExecuteFunction%2A>方法是用來執行預存程序或函式與資料來源中定義概念模型中表示的 helper 方法。 Entity Data Model 工具產生概念模型中的每個方法。 這些方法會呼叫強型別`ExecuteFunction`傳回具型別的<xref:System.Data.Objects.ObjectResult%601>。 如需詳細資訊，請參閱[使用預存程序 （一個架構） 的應用程式程式碼](http://msdn.microsoft.com/library/d13dd33f-fcf9-4e86-bd00-74bc31521536)。  
  
 參數陣列中必須有函式的所有參數，並針對匯入函式，包括的函式本身類型的中繼資料會檢查所有的型別。 `null` CLR 實值型別允許值。 參數驗證是由提供者執行的。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="function" /> 為 null 或空白  -或-  找不到 <paramref name="function" />。</exception>
        <exception cref="T:System.InvalidOperationException">實體讀取器 (Reader) 不支援這個 <paramref name="function" />。  -或-  讀取器與 <paramref name="function" /> 的型別不相符。</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteStoreCommand">
      <MemberSignature Language="C#" Value="public int ExecuteStoreCommand (string commandText, params object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ExecuteStoreCommand(string commandText, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.ExecuteStoreCommand(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteStoreCommand (commandText As String, ParamArray parameters As Object()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ExecuteStoreCommand(System::String ^ commandText, ... cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandText" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="commandText">要使用資料來源的原生語言來執行之命令。</param>
        <param name="parameters">要傳遞至命令的參數陣列。</param>
        <summary>使用現有的連接，直接針對資料來源執行任意命令。</summary>
        <returns>受影響的資料列數目。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用參數型命令 (Parameterized Command) 有助於防衛 SQL 插入式攻擊，在此類攻擊中，攻擊者會將命令「插入」至 SQL 陳述式而危及伺服器的安全。 參數化的命令會從外部來源接收的值會傳遞做為值，並不屬於 SQL 陳述式，以及確保所防衛 SQL 資料隱碼攻擊。 如此一來，在資料來源不會執行插入值的 SQL 命令。 而是只將其做為參數值評估。 除了安全性優點，參數化的命令會提供便利的方法，用來組織與 SQL 陳述式或預存程序傳遞的值。  
  
 `parameters` 值可以是 <xref:System.Data.Common.DbParameter> 物件的陣列或參數值的陣列。 如果只有提供值時，陣列<xref:System.Data.Common.DbParameter>根據順序而定的值陣列中建立物件。  
  
 如果目前的交易存在目前的交易內容中執行存放區命令。  
  
 如需詳細資訊，請參閱:  
  
 [直接執行存放區命令](http://msdn.microsoft.com/library/5708d0a2-3f76-4825-978a-d06ff5c4bb3d)和  
  
 [如何： 直接執行命令，針對資料來源](http://msdn.microsoft.com/library/def3cc87-cfff-4dee-83cf-1a40c73a2d01)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteStoreQuery&lt;TElement&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectResult&lt;TElement&gt; ExecuteStoreQuery&lt;TElement&gt; (string commandText, params object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectResult`1&lt;!!TElement&gt; ExecuteStoreQuery&lt;TElement&gt;(string commandText, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteStoreQuery(Of TElement) (commandText As String, ParamArray parameters As Object()) As ObjectResult(Of TElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TElement&gt;&#xA; System::Data::Objects::ObjectResult&lt;TElement&gt; ^ ExecuteStoreQuery(System::String ^ commandText, ... cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectResult&lt;TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="commandText" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TElement">To be added.</typeparam>
        <param name="commandText">要使用資料來源的原生語言來執行之命令。</param>
        <param name="parameters">要傳遞至命令的參數陣列。</param>
        <summary>直接針對資料來源執行查詢，並傳回具型別的結果序列。</summary>
        <returns>型別為 <paramref name="TResult" /> 之物件的列舉。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.ExecuteStoreQuery%2A>方法會使用現有的連接來執行任意命令，直接針對資料來源。 如果此類交易存在，則會在目前交易的內容中執行存放區命令。  
  
 呼叫 <xref:System.Data.Objects.ObjectContext.ExecuteStoreQuery%2A> 方法相當於呼叫 <xref:System.Data.Common.DbCommand.ExecuteReader%2A> 類別的 <xref:System.Data.Common.DbCommand> 方法，只有 <xref:System.Data.Objects.ObjectContext.ExecuteStoreQuery%2A> 會傳回實體，而 <xref:System.Data.Common.DbCommand.ExecuteReader%2A> 會傳回 <xref:System.Data.Common.DbDataReader> 中的屬性值。  
  
 呼叫<xref:System.Data.Objects.ObjectContext.ExecuteStoreQuery%2A>與指定之實體集名稱，如果您想要追蹤結果。  
  
 呼叫<xref:System.Data.Objects.ObjectContext.Translate%2A>方法來轉譯<xref:System.Data.Common.DbDataReader>為實體物件的讀取器包含對應至指定的實體類型的資料列時。  
  
 使用參數型命令 (Parameterized Command) 有助於防衛 SQL 插入式攻擊，在此類攻擊中，攻擊者會將命令「插入」至 SQL 陳述式而危及伺服器的安全。 參數化的命令會從外部來源接收的值會傳遞做為值，並不屬於 SQL 陳述式，以及確保所防衛 SQL 資料隱碼攻擊。 如此一來，在資料來源不會執行插入值的 SQL 命令。 而是只將其做為參數值評估。 除了安全性優點，參數化的命令會提供便利的方法，用來組織與 SQL 陳述式或預存程序傳遞的值。  
  
 `parameters` 值可以是 <xref:System.Data.Common.DbParameter> 物件的陣列或參數值的陣列。 如果只有提供值時，陣列<xref:System.Data.Common.DbParameter>根據順序而定的值陣列中建立物件。  
  
 如需詳細資訊，請參閱:  
  
 [直接執行存放區命令](http://msdn.microsoft.com/library/5708d0a2-3f76-4825-978a-d06ff5c4bb3d)和  
  
 [如何： 直接執行命令，針對資料來源](http://msdn.microsoft.com/library/def3cc87-cfff-4dee-83cf-1a40c73a2d01)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteStoreQuery&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectResult&lt;TEntity&gt; ExecuteStoreQuery&lt;TEntity&gt; (string commandText, string entitySetName, System.Data.Objects.MergeOption mergeOption, params object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectResult`1&lt;!!TEntity&gt; ExecuteStoreQuery&lt;TEntity&gt;(string commandText, string entitySetName, valuetype System.Data.Objects.MergeOption mergeOption, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.String,System.Data.Objects.MergeOption,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; System::Data::Objects::ObjectResult&lt;TEntity&gt; ^ ExecuteStoreQuery(System::String ^ commandText, System::String ^ entitySetName, System::Data::Objects::MergeOption mergeOption, ... cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectResult&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="commandText" Type="System.String" />
        <Parameter Name="entitySetName" Type="System.String" />
        <Parameter Name="mergeOption" Type="System.Data.Objects.MergeOption" />
        <Parameter Name="parameters" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TEntity">To be added.</typeparam>
        <param name="commandText">要使用資料來源的原生語言來執行之命令。</param>
        <param name="entitySetName">
          <c>TResult</c> 類型的實體集。 如果未提供實體集名稱，則不會追蹤結果。</param>
        <param name="mergeOption">要在執行查詢時使用的 <see cref="T:System.Data.Objects.MergeOption" />。 預設值為 <see cref="F:System.Data.Objects.MergeOption.AppendOnly" />。</param>
        <param name="parameters">要傳遞至命令的參數陣列。</param>
        <summary>直接針對資料來源執行查詢，並傳回具型別的結果序列。 指定實體集和合併選項，以便能夠以實體形式追蹤查詢結果。</summary>
        <returns>型別為 <paramref name="TResult" /> 之物件的列舉。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.ExecuteStoreQuery%2A>方法會使用現有的連接來執行任意命令，直接針對資料來源。 如果此類交易存在，則會在目前交易的內容中執行存放區命令。  
  
 呼叫 <xref:System.Data.Objects.ObjectContext.ExecuteStoreQuery%2A> 方法相當於呼叫 <xref:System.Data.Common.DbCommand.ExecuteReader%2A> 類別的 <xref:System.Data.Common.DbCommand> 方法，只有 <xref:System.Data.Objects.ObjectContext.ExecuteStoreQuery%2A> 會傳回實體，而 <xref:System.Data.Common.DbCommand.ExecuteReader%2A> 會傳回 <xref:System.Data.Common.DbDataReader> 中的屬性值。  
  
 指定的實體集名稱，如果您想要追蹤的實體為結果。  
  
 呼叫<xref:System.Data.Objects.ObjectContext.Translate%2A>方法來轉譯<xref:System.Data.Common.DbDataReader>為實體物件的讀取器包含對應至指定的實體類型的資料列時。  
  
 使用參數型命令 (Parameterized Command) 有助於防衛 SQL 插入式攻擊，在此類攻擊中，攻擊者會將命令「插入」至 SQL 陳述式而危及伺服器的安全。 參數化的命令會從外部來源接收的值會傳遞做為值，並不屬於 SQL 陳述式，以及確保所防衛 SQL 資料隱碼攻擊。 如此一來，在資料來源不會執行插入值的 SQL 命令。 而是只將其做為參數值評估。 除了安全性優點，參數化的命令會提供便利的方法，用來組織與 SQL 陳述式或預存程序傳遞的值。  
  
 `parameters` 值可以是 <xref:System.Data.Common.DbParameter> 物件的陣列或參數值的陣列。 如果只有提供值時，陣列<xref:System.Data.Common.DbParameter>根據順序而定的值陣列中建立物件。  
  
 如需詳細資訊，請參閱:  
  
 [直接執行存放區命令](http://msdn.microsoft.com/library/5708d0a2-3f76-4825-978a-d06ff5c4bb3d)和  
  
 [如何： 直接執行命令，針對資料來源](http://msdn.microsoft.com/library/def3cc87-cfff-4dee-83cf-1a40c73a2d01)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetKnownProxyTypes">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Type&gt; GetKnownProxyTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Type&gt; GetKnownProxyTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.GetKnownProxyTypes" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetKnownProxyTypes () As IEnumerable(Of Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;Type ^&gt; ^ GetKnownProxyTypes();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回所有現有的 Proxy 型別。</summary>
        <returns>所有現有 Proxy 型別的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.GetKnownProxyTypes%2A> Proxy 物件產生啟用 POCO 實體時，方法使用。 如需詳細資訊，請參閱[POCO 建立 Proxy 需求](http://msdn.microsoft.com/library/dcdbf982-9b9d-4582-806a-64de4a1c03c8)和[處理 POCO 實體](http://msdn.microsoft.com/library/5e0fb82a-b6d1-41a1-b37b-c12db61629d3)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObjectByKey">
      <MemberSignature Language="C#" Value="public object GetObjectByKey (System.Data.EntityKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetObjectByKey(class System.Data.EntityKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.GetObjectByKey(System.Data.EntityKey)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetObjectByKey (key As EntityKey) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetObjectByKey(System::Data::EntityKey ^ key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Data.EntityKey" />
      </Parameters>
      <Docs>
        <param name="key">要尋找之物件的索引鍵。</param>
        <summary>傳回具有指定之實體索引鍵的物件。</summary>
        <returns>
          <see cref="T:System.Object" />，它是實體類型的執行個體。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.GetObjectByKey%2A> 會嘗試從 <xref:System.Data.EntityKey> 擷取具有指定之 <xref:System.Data.Objects.ObjectStateManager> 的物件。 如果此物件目前尚未載入物件內容中，系統就會執行查詢，以便嘗試從資料來源中傳回此物件。 如需詳細資訊，請參閱[物件查詢](http://msdn.microsoft.com/library/0768033c-876f-471d-85d5-264884349276)。  
  
 找不到此物件時，<xref:System.Data.Objects.ObjectContext.GetObjectByKey%2A> 就會引發 <xref:System.Data.ObjectNotFoundException>。 若要避免處理這個例外狀況，請改用 <xref:System.Data.Objects.ObjectContext.TryGetObjectByKey%2A> 方法。  
  
 這個方法將會傳回處於 <xref:System.Data.EntityState.Deleted> 狀態中的物件。  
  
 暫存索引鍵無法用來從資料來源中傳回物件。  
  
   
  
## Examples  
 這個範例根據[AdventureWorks Sales Model](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)。 此範例會針對給定型別的實體建立 <xref:System.Data.EntityKey>，然後依據索引鍵擷取實體。  
  
 [!code-csharp[DP ObjectServices Concepts#EntityKeyClass_GetObjectByKey](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#entitykeyclass_getobjectbykey)]
 [!code-vb[DP ObjectServices Concepts#EntityKeyClass_GetObjectByKey](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#entitykeyclass_getobjectbykey)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Data.ObjectNotFoundException">在 <see cref="T:System.Data.Objects.ObjectStateManager" /> 或資料來源中找不到此物件。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetObjectType">
      <MemberSignature Language="C#" Value="public static Type GetObjectType (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetObjectType(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.GetObjectType(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetObjectType(Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">Proxy 物件的 <see cref="T:System.Type" />。</param>
        <summary>傳回與所指定型別的 Proxy 物件相關聯的 POCO 實體的實體型別。</summary>
        <returns>相關聯 POCO 實體的 <see cref="T:System.Type" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.GetObjectType%2A> Proxy 物件產生啟用 POCO 實體時，方法使用。 如需詳細資訊，請參閱[POCO 建立 Proxy 需求](http://msdn.microsoft.com/library/dcdbf982-9b9d-4582-806a-64de4a1c03c8)和[處理 POCO 實體](http://msdn.microsoft.com/library/5e0fb82a-b6d1-41a1-b37b-c12db61629d3)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="LoadProperty">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>在您使用 POCO 自訂資料類別時，明確地載入相關的物件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當使用 POCO 自訂資料類別，相關的物件不能明確地載入像 Entity Data Model 工具所產生的實體類型的執行個體。 這是因為這些工具會產生導覽屬性會傳回<xref:System.Data.Objects.DataClasses.EntityCollection%601>或<xref:System.Data.Objects.DataClasses.EntityReference%601>相關物件時<xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A>上呼叫<xref:System.Data.Objects.DataClasses.RelatedEnd>。 POCO 實體仍然可以藉由使用消極式載入設定載入<xref:System.Data.Objects.ObjectContextOptions.LazyLoadingEnabled%2A>屬性`true`的執行個體上<xref:System.Data.Objects.ObjectContextOptions>所傳回<xref:System.Data.Objects.ObjectContext.ContextOptions%2A?displayProperty=nameWithType>屬性，或使用積極式載入與<xref:System.Data.Objects.ObjectQuery%601.Include%2A>方法<xref:System.Data.Objects.ObjectQuery%601>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="LoadProperty">
      <MemberSignature Language="C#" Value="public void LoadProperty (object entity, string navigationProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadProperty(object entity, string navigationProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.LoadProperty(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadProperty (entity As Object, navigationProperty As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadProperty(System::Object ^ entity, System::String ^ navigationProperty);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
        <Parameter Name="navigationProperty" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="entity">要載入相關物件的目標實體。</param>
        <param name="navigationProperty">巡覽屬性的名稱，這個屬性會傳回要載入的相關物件。</param>
        <summary>由指定的巡覽屬性和使用預設合併選項，明確地載入所提供之物件的相關物件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.LoadProperty%2A>必須呼叫方法，以達到明確載入，當您使用 POCO 自訂資料類別。  
  
 在呼叫<xref:System.Data.Objects.ObjectContext.LoadProperty%2A>，相關的物件可以透過來源實體的導覽屬性來存取。  
  
 當使用 POCO 自訂資料類別，相關的物件不能明確地載入像 Entity Data Model 工具所產生的實體類型的執行個體。 這是因為這些工具會產生導覽屬性會傳回<xref:System.Data.Objects.DataClasses.EntityCollection%601>或<xref:System.Data.Objects.DataClasses.EntityReference%601>相關物件時<xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A>上呼叫<xref:System.Data.Objects.DataClasses.RelatedEnd>。 POCO 實體仍然可以藉由使用消極式載入設定載入<xref:System.Data.Objects.ObjectContextOptions.LazyLoadingEnabled%2A>屬性`true`的執行個體上<xref:System.Data.Objects.ObjectContextOptions>所傳回<xref:System.Data.Objects.ObjectContext.ContextOptions%2A?displayProperty=nameWithType>屬性，或使用積極式載入與<xref:System.Data.Objects.ObjectQuery%601.Include%2A>方法<xref:System.Data.Objects.ObjectQuery%601>.  
  
 當<xref:System.Data.Objects.ObjectContext.LoadProperty%2A>呼叫方法時，會將物件載入<xref:System.Data.Objects.ObjectContext>使用預設<xref:System.Data.Objects.MergeOption>值<xref:System.Data.Objects.MergeOption.AppendOnly>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="entity" /> 的狀態為 <see cref="F:System.Data.EntityState.Detached" />、<see cref="F:System.Data.EntityState.Added" /> 或 <see cref="F:System.Data.EntityState.Deleted" />，  -或-  <paramref name="entity" /> 附加至 <see cref="T:System.Data.Objects.ObjectContext" /> 的另一個執行個體。</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadProperty">
      <MemberSignature Language="C#" Value="public void LoadProperty (object entity, string navigationProperty, System.Data.Objects.MergeOption mergeOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadProperty(object entity, string navigationProperty, valuetype System.Data.Objects.MergeOption mergeOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.LoadProperty(System.Object,System.String,System.Data.Objects.MergeOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadProperty(System::Object ^ entity, System::String ^ navigationProperty, System::Data::Objects::MergeOption mergeOption);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
        <Parameter Name="navigationProperty" Type="System.String" />
        <Parameter Name="mergeOption" Type="System.Data.Objects.MergeOption" />
      </Parameters>
      <Docs>
        <param name="entity">要載入相關物件的目標實體。</param>
        <param name="navigationProperty">巡覽屬性的名稱，這個屬性會傳回要載入的相關物件。</param>
        <param name="mergeOption">在您載入相關物件時所要使用的 <see cref="T:System.Data.Objects.MergeOption" /> 值。</param>
        <summary>由指定的巡覽屬性和使用指定的合併選項，明確地載入所提供之物件的相關物件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.LoadProperty%2A>必須呼叫方法，以達到明確載入，當您使用 POCO 自訂資料類別。  
  
 在呼叫<xref:System.Data.Objects.ObjectContext.LoadProperty%2A>，相關的物件可以透過來源實體的導覽屬性來存取。  
  
 當使用 POCO 自訂資料類別，相關的物件不能明確地載入像 Entity Data Model 工具所產生的實體類型的執行個體。 這是因為這些工具會產生導覽屬性會傳回<xref:System.Data.Objects.DataClasses.EntityCollection%601>或<xref:System.Data.Objects.DataClasses.EntityReference%601>相關物件時<xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A>上呼叫<xref:System.Data.Objects.DataClasses.RelatedEnd>。 POCO 實體仍然可以藉由使用消極式載入設定載入<xref:System.Data.Objects.ObjectContextOptions.LazyLoadingEnabled%2A>屬性`true`的執行個體上<xref:System.Data.Objects.ObjectContextOptions>所傳回<xref:System.Data.Objects.ObjectContext.ContextOptions%2A?displayProperty=nameWithType>屬性，或使用積極式載入與<xref:System.Data.Objects.ObjectQuery%601.Include%2A>方法<xref:System.Data.Objects.ObjectQuery%601>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="entity" /> 的狀態為 <see cref="F:System.Data.EntityState.Detached" />、<see cref="F:System.Data.EntityState.Added," /> 或 <see cref="F:System.Data.EntityState.Deleted" />，  -或-  <paramref name="entity" /> 附加至 <see cref="T:System.Data.Objects.ObjectContext" /> 的另一個執行個體。</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadProperty&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public void LoadProperty&lt;TEntity&gt; (TEntity entity, System.Linq.Expressions.Expression&lt;Func&lt;TEntity,object&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadProperty&lt;TEntity&gt;(!!TEntity entity, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TEntity, object&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.LoadProperty``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadProperty(Of TEntity) (entity As TEntity, selector As Expression(Of Func(Of TEntity, Object)))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; void LoadProperty(TEntity entity, System::Linq::Expressions::Expression&lt;Func&lt;TEntity, System::Object ^&gt; ^&gt; ^ selector);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TEntity,System.Object&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">To be added.</typeparam>
        <param name="entity">要載入相關物件的來源物件。</param>
        <param name="selector">定義要載入之相關物件的 LINQ 運算式。</param>
        <summary>由指定的 LINQ 查詢和使用預設的合併選項，明確地載入所提供之物件的相關物件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.LoadProperty%2A>必須呼叫方法，以達到明確載入，當您使用 POCO 自訂資料類別。  
  
 在呼叫<xref:System.Data.Objects.ObjectContext.LoadProperty%2A>，相關的物件可以透過來源實體的導覽屬性來存取。  
  
 要載入之屬性由 LINQ 運算式指定，必須為簡單的屬性成員存取，格式為`(entity) => entity.PropertyName`，其中*PropertyName*會傳回要載入相關的物件的導覽屬性。 如果使用其他形式的 LINQ 運算式，會發生例外狀況。  
  
 當使用 POCO 自訂資料類別，相關的物件不能明確地載入像 Entity Data Model 工具所產生的實體類型的執行個體。 這是因為這些工具會產生導覽屬性會傳回<xref:System.Data.Objects.DataClasses.EntityCollection%601>或<xref:System.Data.Objects.DataClasses.EntityReference%601>相關物件時<xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A>上呼叫<xref:System.Data.Objects.DataClasses.RelatedEnd>。 POCO 實體仍然可以藉由使用消極式載入設定載入<xref:System.Data.Objects.ObjectContextOptions.LazyLoadingEnabled%2A>屬性`true`的執行個體上<xref:System.Data.Objects.ObjectContextOptions>所傳回<xref:System.Data.Objects.ObjectContext.ContextOptions%2A?displayProperty=nameWithType>屬性，或使用積極式載入與<xref:System.Data.Objects.ObjectQuery%601.Include%2A>方法<xref:System.Data.Objects.ObjectQuery%601>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="selector" /> 不會提供有效的輸入參數。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="selector" /> 為 null。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="entity" /> 的狀態為 <see cref="F:System.Data.EntityState.Detached" />、<see cref="F:System.Data.EntityState.Added," /> 或 <see cref="F:System.Data.EntityState.Deleted" />，  -或-  <paramref name="entity" /> 附加至 <see cref="T:System.Data.Objects.ObjectContext" /> 的另一個執行個體。</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadProperty&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public void LoadProperty&lt;TEntity&gt; (TEntity entity, System.Linq.Expressions.Expression&lt;Func&lt;TEntity,object&gt;&gt; selector, System.Data.Objects.MergeOption mergeOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadProperty&lt;TEntity&gt;(!!TEntity entity, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TEntity, object&gt;&gt; selector, valuetype System.Data.Objects.MergeOption mergeOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.LoadProperty``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Data.Objects.MergeOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; void LoadProperty(TEntity entity, System::Linq::Expressions::Expression&lt;Func&lt;TEntity, System::Object ^&gt; ^&gt; ^ selector, System::Data::Objects::MergeOption mergeOption);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TEntity,System.Object&gt;&gt;" />
        <Parameter Name="mergeOption" Type="System.Data.Objects.MergeOption" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">To be added.</typeparam>
        <param name="entity">要載入相關物件的來源物件。</param>
        <param name="selector">定義要載入之相關物件的 LINQ 運算式。</param>
        <param name="mergeOption">在您載入相關物件時所要使用的 <see cref="T:System.Data.Objects.MergeOption" /> 值。</param>
        <summary>由指定的 LINQ 查詢和使用指定的合併選項，明確地載入所提供之物件的相關物件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.LoadProperty%2A>必須呼叫方法，以達到明確載入，當您使用 POCO 自訂資料類別。  
  
 在呼叫<xref:System.Data.Objects.ObjectContext.LoadProperty%2A>，相關的物件可以透過來源實體的導覽屬性來存取。  
  
 要載入之屬性由 LINQ 運算式指定，必須為簡單的屬性成員存取，格式為`(entity) => entity.PropertyName`其中*PropertyName*會傳回要載入相關的物件的導覽屬性。 如果使用其他形式的 LINQ 運算式，會發生例外狀況。  
  
 當使用 POCO 自訂資料類別，相關的物件不能明確地載入像 Entity Data Model 工具所產生的實體類型的執行個體。 這是因為這些工具會產生導覽屬性會傳回<xref:System.Data.Objects.DataClasses.EntityCollection%601>或<xref:System.Data.Objects.DataClasses.EntityReference%601>相關物件時<xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A>上呼叫<xref:System.Data.Objects.DataClasses.RelatedEnd>。 POCO 實體仍然可以藉由使用消極式載入設定載入<xref:System.Data.Objects.ObjectContextOptions.LazyLoadingEnabled%2A>屬性`true`的執行個體上<xref:System.Data.Objects.ObjectContextOptions>所傳回<xref:System.Data.Objects.ObjectContext.ContextOptions%2A?displayProperty=nameWithType>屬性，或使用積極式載入與<xref:System.Data.Objects.ObjectQuery%601.Include%2A>方法<xref:System.Data.Objects.ObjectQuery%601>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="selector" /> 不會提供有效的輸入參數。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="selector" /> 為 null。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="entity" /> 的狀態為 <see cref="F:System.Data.EntityState.Detached" />、<see cref="F:System.Data.EntityState.Added," /> 或 <see cref="F:System.Data.EntityState.Deleted" />，  -或-  <paramref name="entity" /> 附加至 <see cref="T:System.Data.Objects.ObjectContext" /> 的另一個執行個體。</exception>
      </Docs>
    </Member>
    <Member MemberName="MetadataWorkspace">
      <MemberSignature Language="C#" Value="public System.Data.Metadata.Edm.MetadataWorkspace MetadataWorkspace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Metadata.Edm.MetadataWorkspace MetadataWorkspace" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.ObjectContext.MetadataWorkspace" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MetadataWorkspace As MetadataWorkspace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Metadata::Edm::MetadataWorkspace ^ MetadataWorkspace { System::Data::Metadata::Edm::MetadataWorkspace ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Metadata.Edm.MetadataWorkspace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得內容物件所使用的中繼資料工作空間。</summary>
        <value>與這個 <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> 相關聯的 <see cref="T:System.Data.Objects.ObjectContext" /> 物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Metadata.Edm.MetadataWorkspace> 類別是中央執行階段 API，可讓您用來在應用程式的內容中與 Entity Data Model (EDM) 中繼資料互動。 如需詳細資訊，請參閱[中繼資料工作空間](http://msdn.microsoft.com/library/601aee56-3eda-4caa-9082-a01df76c5e84)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObjectMaterialized">
      <MemberSignature Language="C#" Value="public event System.Data.Objects.ObjectMaterializedEventHandler ObjectMaterialized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.Objects.ObjectMaterializedEventHandler ObjectMaterialized" />
      <MemberSignature Language="DocId" Value="E:System.Data.Objects.ObjectContext.ObjectMaterialized" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ObjectMaterialized As ObjectMaterializedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::Objects::ObjectMaterializedEventHandler ^ ObjectMaterialized;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectMaterializedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在查詢或載入作業中從資料來源中的資料建立新的實體物件時發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所有純量、 複雜之後, 會引發這個事件，並參考內容物件，但在載入集合之前，已設定。 如果具有相同索引鍵值的物件存在物件內容中，Entity Framework 將無法重新建立物件，並不會引發這個事件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObjectStateManager">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectStateManager ObjectStateManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Objects.ObjectStateManager ObjectStateManager" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.ObjectContext.ObjectStateManager" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ObjectStateManager As ObjectStateManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Objects::ObjectStateManager ^ ObjectStateManager { System::Data::Objects::ObjectStateManager ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectStateManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得內容物件用來追蹤物件變更的物件狀態管理員。</summary>
        <value>這個 <see cref="T:System.Data.Objects.ObjectStateManager" /> 所使用的 <see cref="T:System.Data.Objects.ObjectContext" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 這些範例根據[AdventureWorks Sales Model](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)。 這個範例會從 <xref:System.Data.Objects.ObjectStateManager> 中取得 <xref:System.Data.Objects.ObjectContext> 並且使用此狀態管理員來存取內容中的物件。  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectStateManager](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectstatemanager)]
 [!code-vb[DP ObjectServices Concepts#ObjectStateManager](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectstatemanager)]  
  
 這個範例會針對傳回的 <xref:System.Data.Objects.ObjectStateManager.TryGetObjectStateEntry%2A> 使用 <xref:System.Data.Objects.ObjectStateManager> 方法，以便根據實體索引鍵取得物件。  
  
 [!code-csharp[DP ObjectServices Concepts#ApplyItemUpdates](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#applyitemupdates)]
 [!code-vb[DP ObjectServices Concepts#ApplyItemUpdates](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#applyitemupdates)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryProvider">
      <MemberSignature Language="C#" Value="protected internal System.Linq.IQueryProvider QueryProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.IQueryProvider QueryProvider" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.ObjectContext.QueryProvider" />
      <MemberSignature Language="VB.NET" Value="Protected Friend ReadOnly Property QueryProvider As IQueryProvider" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Linq::IQueryProvider ^ QueryProvider { System::Linq::IQueryProvider ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得與這個物件內容相關聯的 LINQ 查詢提供者。</summary>
        <value>這個物件內容所使用的 <see cref="T:System.Linq.IQueryProvider" /> 執行個體。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Refresh">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>使用資料來源中的資料，更新物件內容中的特定物件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 重新整理物件的順序不具決定性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public void Refresh (System.Data.Objects.RefreshMode refreshMode, System.Collections.IEnumerable collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Refresh(valuetype System.Data.Objects.RefreshMode refreshMode, class System.Collections.IEnumerable collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.Refresh(System.Data.Objects.RefreshMode,System.Collections.IEnumerable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Refresh(System::Data::Objects::RefreshMode refreshMode, System::Collections::IEnumerable ^ collection);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="refreshMode" Type="System.Data.Objects.RefreshMode" />
        <Parameter Name="collection" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="refreshMode">
          <see cref="T:System.Data.Objects.RefreshMode" /> 值，指出是否會以資料來源中的屬性值覆寫物件內容中的屬性變更。</param>
        <param name="collection">要重新整理之物件的 <see cref="T:System.Collections.IEnumerable" /> 集合。</param>
        <summary>使用資料來源中的資料，更新物件內容中的物件集合。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法具有雙重用途：允許使用資料來源中的資料來重新整理物件內容中的物件，以及成為用以解決衝突的機制。 如需詳細資訊，請參閱[儲存的變更和管理並行](http://msdn.microsoft.com/library/b8378601-4f26-4a05-a24a-f50aeb68610e)。  
  
 重新整理物件的順序不具決定性。  
  
 呼叫 <xref:System.Data.Objects.ObjectContext.Refresh%2A> 方法之後，雖然系統一定會使用資料來源的值來更新物件的原始值，但是不一定會使用資料來源的值來更新目前的值。 這會因 <xref:System.Data.Objects.RefreshMode> 值而不同。 <xref:System.Data.Objects.RefreshMode.StoreWins>模式表示應該更新在集合中的物件，以符合資料來源的值。 <xref:System.Data.Objects.RefreshMode.ClientWins> 表示物件內容中的變更會保存，即使已有其他變更資料來源中。  
  
 若要確保物件已經由資料來源端邏輯所更新，您可以在呼叫 <xref:System.Data.Objects.ObjectContext.Refresh%2A> 方法之後，使用 <xref:System.Data.Objects.RefreshMode.StoreWins> 來呼叫 <xref:System.Data.Objects.ObjectContext.SaveChanges%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="collection" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="refreshMode" /> 無效。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="collection" /> 是空的。  -或-  物件沒有附加至內容。</exception>
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public void Refresh (System.Data.Objects.RefreshMode refreshMode, object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Refresh(valuetype System.Data.Objects.RefreshMode refreshMode, object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.Refresh(System.Data.Objects.RefreshMode,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Refresh(System::Data::Objects::RefreshMode refreshMode, System::Object ^ entity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="refreshMode" Type="System.Data.Objects.RefreshMode" />
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="refreshMode">其中一個 <see cref="T:System.Data.Objects.RefreshMode" /> 值，它會指定要用於重新整理 <see cref="T:System.Data.Objects.ObjectStateManager" /> 的模式。</param>
        <param name="entity">要重新整理的物件。</param>
        <summary>使用資料來源中的資料，更新物件內容中的物件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.Refresh%2A> 具有雙重用途：允許使用資料來源中的資料來重新整理物件，以及成為用以解決衝突的機制。 如需詳細資訊，請參閱[儲存的變更和管理並行](http://msdn.microsoft.com/library/b8378601-4f26-4a05-a24a-f50aeb68610e)。  
  
 重新整理物件的順序不具決定性。  
  
 呼叫 <xref:System.Data.Objects.ObjectContext.Refresh%2A> 方法之後，雖然系統一定會使用資料來源的值來更新物件的原始值，但是不一定會使用資料來源的值來更新目前的值。 這會因 <xref:System.Data.Objects.RefreshMode> 而不同。 <xref:System.Data.Objects.RefreshMode.StoreWins> 模式表示此物件應該更新為符合資料來源的值。 <xref:System.Data.Objects.RefreshMode.ClientWins> 值表示只會保存物件內容中的變更，即使資料來源中已經有其他變更也一樣。  
  
 若要確保物件已經由資料來源端邏輯所更新，您可以在呼叫 <xref:System.Data.Objects.ObjectContext.Refresh%2A> 方法之後，使用 <xref:System.Data.Objects.RefreshMode.StoreWins> 值來呼叫 <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> 方法。  
  
   
  
## Examples  
 這個範例根據[AdventureWorks Sales Model](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)。 此範例會嘗試儲存變更，而且這可能會導致並行衝突。 然後，它會示範如何透過重新整理物件內容，然後重新儲存變更，解決並行衝突。  
  
 [!code-csharp[DP ObjectServices Concepts#Concurrency](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#concurrency)]
 [!code-vb[DP ObjectServices Concepts#Concurrency](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#concurrency)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="collection" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="refreshMode" /> 無效。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="collection" /> 是空的。  -或-  物件沒有附加至內容。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SaveChanges">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將所有更新保存至資料來源。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SaveChanges">
      <MemberSignature Language="C#" Value="public int SaveChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 SaveChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.SaveChanges" />
      <MemberSignature Language="VB.NET" Value="Public Function SaveChanges () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int SaveChanges();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將所有更新保存至資料來源並且重設物件內容中的變更追蹤。</summary>
        <returns>呼叫 <see cref="F:System.Data.EntityState.Added" /> 時處於 <see cref="F:System.Data.EntityState.Modified" />、<see cref="F:System.Data.EntityState.Deleted" /> 或 <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" /> 狀態中的物件數目。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要確保用戶端的物件已經由資料來源端邏輯所更新，您可以在呼叫 <xref:System.Data.Objects.ObjectContext.Refresh%2A> 之後，使用 <xref:System.Data.Objects.RefreshMode.StoreWins> 值來呼叫 <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> 方法。 如需詳細資訊，請參閱[儲存的變更和管理並行](http://msdn.microsoft.com/library/b8378601-4f26-4a05-a24a-f50aeb68610e)。  
  
 <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> 在交易內的運作方式。 <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> 將會回復該交易，並擲回例外狀況，如果任何一個中途<xref:System.Data.Objects.ObjectStateEntry>無法保存物件。  
  
 如果已經發生開放式並行存取違規，就會擲回 <xref:System.Data.OptimisticConcurrencyException>。 您可以透過攔截開放式並行存取違規、使用 <xref:System.Data.Objects.ObjectContext.Refresh%2A> 或 <xref:System.Data.Objects.RefreshMode.StoreWins> 值來呼叫 <xref:System.Data.Objects.RefreshMode.ClientWins> 方法，然後再次呼叫 <xref:System.Data.Objects.ObjectContext.SaveChanges%2A>，解決開放式並行存取違規。 如需詳細資訊，請參閱[如何： 管理物件內容中的資料並行](http://msdn.microsoft.com/library/25ffe70d-ce97-4f0a-8ae0-22b7c40f748a)。  
  
   
  
## Examples  
 這個範例根據[AdventureWorks Sales Model](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)。 這個範例會嘗試儲存可能導致並行衝突的變更。 然後，它會示範如何透過重新整理物件內容，然後重新儲存變更，解決並行衝突。  
  
 [!code-csharp[DP ObjectServices Concepts#Concurrency](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#concurrency)]
 [!code-vb[DP ObjectServices Concepts#Concurrency](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#concurrency)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.OptimisticConcurrencyException">在資料來源中已經發生開放式並行存取 (Optimistic Concurrency) 違規。</exception>
      </Docs>
    </Member>
    <Member MemberName="SaveChanges">
      <MemberSignature Language="C#" Value="public int SaveChanges (bool acceptChangesDuringSave);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 SaveChanges(bool acceptChangesDuringSave) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.SaveChanges(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function SaveChanges (acceptChangesDuringSave As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int SaveChanges(bool acceptChangesDuringSave);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("Use SaveChanges(SaveOptions options) instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="acceptChangesDuringSave" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="acceptChangesDuringSave">用戶端異動支援需要這個參數。 如果為 <see langword="true" />，就會在 <see cref="M:System.Data.Objects.ObjectContext.SaveChanges(System.Boolean)" /> 完成之後，重設所有物件的變更追蹤。 如果為 <see langword="false" />，您就必須在 <see cref="M:System.Data.Objects.ObjectContext.AcceptAllChanges" /> 之後呼叫 <see cref="M:System.Data.Objects.ObjectContext.SaveChanges(System.Boolean)" /> 方法。</param>
        <summary>將所有更新保存至資料來源，並且選擇性地重設物件內容中的變更追蹤。</summary>
        <returns>呼叫 <see cref="F:System.Data.EntityState.Added" /> 時處於 <see cref="F:System.Data.EntityState.Modified" />、<see cref="F:System.Data.EntityState.Deleted" /> 或 <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" /> 狀態中的物件數目。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫<xref:System.Data.Objects.ObjectContext.SaveChanges%28System.Data.Objects.SaveOptions%29>方法改為。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.OptimisticConcurrencyException">已經發生開放式並行存取違規。</exception>
      </Docs>
    </Member>
    <Member MemberName="SaveChanges">
      <MemberSignature Language="C#" Value="public virtual int SaveChanges (System.Data.Objects.SaveOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 SaveChanges(valuetype System.Data.Objects.SaveOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.SaveChanges(System.Data.Objects.SaveOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SaveChanges (options As SaveOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int SaveChanges(System::Data::Objects::SaveOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.Data.Objects.SaveOptions" />
      </Parameters>
      <Docs>
        <param name="options">決定作業行為的 <see cref="T:System.Data.Objects.SaveOptions" /> 值。</param>
        <summary>使用指定的 <see cref="T:System.Data.Objects.SaveOptions" />，將所有更新保存至資料來源。</summary>
        <returns>呼叫 <see cref="F:System.Data.EntityState.Added" /> 時處於 <see cref="F:System.Data.EntityState.Modified" />、<see cref="F:System.Data.EntityState.Deleted" /> 或 <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" /> 狀態中的物件數目。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用這個特定的多載<xref:System.Data.Objects.ObjectContext.SaveChanges%2A>可能是確保<xref:System.Data.Objects.ObjectContext.DetectChanges%2A>之前，您將變更儲存至資料來源或是呼叫<xref:System.Data.Objects.ObjectContext.AcceptAllChanges%2A>稱為之後您將變更儲存至資料來源。  
  
 這個列舉型別的<xref:System.FlagsAttribute>，允許其成員值的位元組合。  
  
 若要確定用戶端上的物件，已由資料來源端邏輯所更新，您可以呼叫<xref:System.Data.Objects.ObjectContext.Refresh%2A>方法<xref:System.Data.Objects.RefreshMode.StoreWins>值之後呼叫<xref:System.Data.Objects.ObjectContext.SaveChanges%2A>。 <xref:System.Data.Objects.ObjectContext.SaveChanges%2A>方法可在交易中運作。 <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> 將會回復該交易，並擲回例外狀況，如果任何一個中途<xref:System.Data.Objects.ObjectStateEntry>無法保存物件。  
  
 如果已經發生開放式並行存取違規，就會擲回 <xref:System.Data.OptimisticConcurrencyException>。 您可以透過攔截開放式並行存取違規、使用 <xref:System.Data.Objects.ObjectContext.Refresh%2A> 或 <xref:System.Data.Objects.RefreshMode.StoreWins> 值來呼叫 <xref:System.Data.Objects.RefreshMode.ClientWins> 方法，然後再次呼叫 <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> 方法，解決開放式並行存取違規。 如需詳細資訊，請參閱[如何： 管理物件內容中的資料並行](http://msdn.microsoft.com/library/25ffe70d-ce97-4f0a-8ae0-22b7c40f748a)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.OptimisticConcurrencyException">已經發生開放式並行存取違規。</exception>
      </Docs>
    </Member>
    <Member MemberName="SavingChanges">
      <MemberSignature Language="C#" Value="public event EventHandler SavingChanges;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SavingChanges" />
      <MemberSignature Language="DocId" Value="E:System.Data.Objects.ObjectContext.SavingChanges" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SavingChanges As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ SavingChanges;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>當變更儲存至資料來源時發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.SavingChanges> 事件會針對 <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> 在 <xref:System.Data.Objects.ObjectContext> 作業的開頭引發。 這個事件通常是在新值寫入資料庫之前，用來驗證變更的物件。  
  
   
  
## Examples  
 這個範例根據[AdventureWorks Sales Model](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)。 這會針對執行實體狀態驗證的 <xref:System.Data.Objects.ObjectContext.SavingChanges> 事件註冊處理常式。  
  
 [!code-csharp[DP ObjectServices Concepts#SavingChanges](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#savingchanges)]
 [!code-vb[DP ObjectServices Concepts#SavingChanges](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#savingchanges)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Translate&lt;TElement&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectResult&lt;TElement&gt; Translate&lt;TElement&gt; (System.Data.Common.DbDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectResult`1&lt;!!TElement&gt; Translate&lt;TElement&gt;(class System.Data.Common.DbDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.Translate``1(System.Data.Common.DbDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function Translate(Of TElement) (reader As DbDataReader) As ObjectResult(Of TElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TElement&gt;&#xA; System::Data::Objects::ObjectResult&lt;TElement&gt; ^ Translate(System::Data::Common::DbDataReader ^ reader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectResult&lt;TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" />
      </Parameters>
      <Docs>
        <typeparam name="TElement">To be added.</typeparam>
        <param name="reader">
          <see cref="T:System.Data.Common.DbDataReader" />，包含要轉譯為實體物件的實體資料。</param>
        <summary>將包含實體資料之資料列的 <see cref="T:System.Data.Common.DbDataReader" />，轉譯成所要求的實體型別。</summary>
        <returns>型別為 <paramref name="TResult" /> 之物件的列舉。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.Translate%2A>方法用來將實體資料從轉譯<xref:System.Data.Common.DbDataReader>為要求類型的物件。 此程序會自動執行時<xref:System.Data.Objects.ObjectQuery%601>會執行，以傳回實體資料。 <xref:System.Data.Objects.ObjectContext.Translate%2A>方法可讓您執行標準的 ADO.NET 查詢對資料來源，並將傳回的資料列轉譯成實體物件。  
  
 提供<xref:System.Data.Common.DbDataReader>必須包含對應到要求的實體類型的資料。  
  
 如需詳細資訊，請參閱:  
  
 [直接執行存放區命令](http://msdn.microsoft.com/library/5708d0a2-3f76-4825-978a-d06ff5c4bb3d)和  
  
 [如何： 直接執行命令，針對資料來源](http://msdn.microsoft.com/library/def3cc87-cfff-4dee-83cf-1a40c73a2d01)  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">當 <paramref name="reader" /> 為 <see langword="null" /> 時。</exception>
      </Docs>
    </Member>
    <Member MemberName="Translate&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectResult&lt;TEntity&gt; Translate&lt;TEntity&gt; (System.Data.Common.DbDataReader reader, string entitySetName, System.Data.Objects.MergeOption mergeOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectResult`1&lt;!!TEntity&gt; Translate&lt;TEntity&gt;(class System.Data.Common.DbDataReader reader, string entitySetName, valuetype System.Data.Objects.MergeOption mergeOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.Translate``1(System.Data.Common.DbDataReader,System.String,System.Data.Objects.MergeOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; System::Data::Objects::ObjectResult&lt;TEntity&gt; ^ Translate(System::Data::Common::DbDataReader ^ reader, System::String ^ entitySetName, System::Data::Objects::MergeOption mergeOption);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectResult&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" />
        <Parameter Name="entitySetName" Type="System.String" />
        <Parameter Name="mergeOption" Type="System.Data.Objects.MergeOption" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">To be added.</typeparam>
        <param name="reader">
          <see cref="T:System.Data.Common.DbDataReader" />，包含要轉譯為實體物件的實體資料。</param>
        <param name="entitySetName">
          <c>TResult</c> 類型的實體集。</param>
        <param name="mergeOption">在轉譯的物件加入至物件內容時所要使用的 <see cref="T:System.Data.Objects.MergeOption" />。 預設值為 <see cref="F:System.Data.Objects.MergeOption.AppendOnly" />。</param>
        <summary>在特定的實體集並使用指定的合併選項，將包含實體資料之資料列的 <see cref="T:System.Data.Common.DbDataReader" /> 轉譯為所要求之實體型別的物件。</summary>
        <returns>型別為 <paramref name="TResult" /> 之物件的列舉。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.Translate%2A>方法用來將實體資料從轉譯<xref:System.Data.Common.DbDataReader>為要求類型的物件。 此程序會自動執行時<xref:System.Data.Objects.ObjectQuery%601>會執行，以傳回實體資料。 <xref:System.Data.Objects.ObjectContext.Translate%2A>方法可讓您執行標準的 ADO.NET 查詢對資料來源，並將傳回的資料列轉譯成實體物件。  
  
 提供<xref:System.Data.Common.DbDataReader>必須包含對應到要求的實體類型的資料。  
  
 如需詳細資訊，請參閱:  
  
 [直接執行存放區命令](http://msdn.microsoft.com/library/5708d0a2-3f76-4825-978a-d06ff5c4bb3d)和  
  
 [如何： 直接執行命令，針對資料來源](http://msdn.microsoft.com/library/def3cc87-cfff-4dee-83cf-1a40c73a2d01)  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">當 <paramref name="reader" /> 為 <see langword="null" /> 時。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">當提供的 <paramref name="mergeOption" /> 不是有效的 <see cref="T:System.Data.Objects.MergeOption" /> 值時。</exception>
        <exception cref="T:System.InvalidOperationException">當提供的 <paramref name="entitySetName" /> 不是 <paramref name="TResult" /> 型別的有效實體集時。</exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetObjectByKey">
      <MemberSignature Language="C#" Value="public bool TryGetObjectByKey (System.Data.EntityKey key, out object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetObjectByKey(class System.Data.EntityKey key, [out] object&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.TryGetObjectByKey(System.Data.EntityKey,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetObjectByKey (key As EntityKey, ByRef value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetObjectByKey(System::Data::EntityKey ^ key, [Runtime::InteropServices::Out] System::Object ^ % value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Data.EntityKey" />
        <Parameter Name="value" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key">要尋找之物件的索引鍵。</param>
        <param name="value">在這個方法傳回時，它會包含此物件。</param>
        <summary>傳回具有指定之實體索引鍵的物件。</summary>
        <returns>如果擷取物件成功，則為 <see langword="true" />。 如果 <paramref name="key" /> 是暫存的、連接為 <see langword="false" /> 或 <paramref name="value" /> 為 <see langword="null" />，則為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.TryGetObjectByKey%2A> 會嘗試從 <xref:System.Data.EntityKey> 擷取具有指定之 <xref:System.Data.Objects.ObjectStateManager> 的物件。 如果此物件目前尚未載入物件內容中，系統就會執行查詢，以便嘗試從資料來源中傳回此物件。 如需詳細資訊，請參閱[物件查詢](http://msdn.microsoft.com/library/0768033c-876f-471d-85d5-264884349276)。  
  
 您可以使用 <xref:System.Data.Objects.ObjectContext.TryGetObjectByKey%2A> 方法來避免處理找不到此物件時，<xref:System.Data.ObjectNotFoundException> 所引發的 <xref:System.Data.Objects.ObjectContext.GetObjectByKey%2A>。  
  
 這個方法將會傳回處於 <xref:System.Data.EntityState.Deleted> 狀態中的物件。  
  
 暫存索引鍵無法用來從資料來源中傳回物件。  
  
 <xref:System.Data.Objects.ObjectContext.TryGetObjectByKey%2A>方法適用於標準.NET`TryParse`圖樣<xref:System.Data.Objects.ObjectContext.GetObjectByKey%2A>方法，傳回`false`時<xref:System.Data.ObjectNotFoundException>攔截。  
  
   
  
## Examples  
 本主題中的範例根據[AdventureWorks Sales Model](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)。 此範例會針對給定型別的實體建立 <xref:System.Data.EntityKey>，然後嘗試依據索引鍵擷取實體。  
  
 [!code-csharp[DP ObjectServices Concepts#EntityKeyClass_TryGetObjectByKey](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#entitykeyclass_trygetobjectbykey)]
 [!code-vb[DP ObjectServices Concepts#EntityKeyClass_TryGetObjectByKey](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#entitykeyclass_trygetobjectbykey)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="key" /> 的不相容中繼資料。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
  </Members>
</Type>