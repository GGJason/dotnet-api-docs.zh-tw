<Type Name="ListDictionary" FullName="System.Collections.Specialized.ListDictionary">
  <TypeSignature Language="C#" Value="public class ListDictionary : System.Collections.IDictionary" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit ListDictionary extends System.Object implements class System.Collections.ICollection, class System.Collections.IDictionary, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Specialized.ListDictionary" />
  <TypeSignature Language="VB.NET" Value="Public Class ListDictionary&#xA;Implements IDictionary" />
  <TypeSignature Language="C++ CLI" Value="public ref class ListDictionary : System::Collections::IDictionary" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.Specialized</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IDictionary</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="6058f-101">使用單向連結串列 (Singly-Linked List) 實作 <see langword="IDictionary" />。</span><span class="sxs-lookup"><span data-stu-id="6058f-101">Implements <see langword="IDictionary" /> using a singly linked list.</span></span> <span data-ttu-id="6058f-102">建議用於通常少於 10 個項目的集合。</span><span class="sxs-lookup"><span data-stu-id="6058f-102">Recommended for collections that typically include fewer than 10 items.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6058f-103">這是簡單的實作<xref:System.Collections.IDictionary>使用單向連結的清單。</span><span class="sxs-lookup"><span data-stu-id="6058f-103">This is a simple implementation of <xref:System.Collections.IDictionary> using a singly linked list.</span></span> <span data-ttu-id="6058f-104">它會比小又快<xref:System.Collections.Hashtable>如果項目數目是 10 個或更少。</span><span class="sxs-lookup"><span data-stu-id="6058f-104">It is smaller and faster than a <xref:System.Collections.Hashtable> if the number of elements is 10 or less.</span></span> <span data-ttu-id="6058f-105">此外，這不應該使用如果效能是很重要的元素數目很大。</span><span class="sxs-lookup"><span data-stu-id="6058f-105">This should not be used if performance is important for large numbers of elements.</span></span>  
  
 <span data-ttu-id="6058f-106">中的項目<xref:System.Collections.Specialized.ListDictionary>不在任何保證順序; 程式碼不應該依賴目前的順序。</span><span class="sxs-lookup"><span data-stu-id="6058f-106">Items in a <xref:System.Collections.Specialized.ListDictionary> are not in any guaranteed order; code should not depend on the current order.</span></span> <span data-ttu-id="6058f-107"><xref:System.Collections.Specialized.ListDictionary>實作快速擷取做為索引鍵; 實際內部項目的順序視實作而定也可能在未來變更的產品版本。</span><span class="sxs-lookup"><span data-stu-id="6058f-107">The <xref:System.Collections.Specialized.ListDictionary> is implemented for fast keyed retrieval; the actual internal order of items is implementation-dependent and could change in future versions of the product.</span></span>  
  
 <span data-ttu-id="6058f-108">成員，例如<xref:System.Collections.Specialized.ListDictionary.Item%2A>， <xref:System.Collections.Specialized.ListDictionary.Add%2A>， <xref:System.Collections.Specialized.ListDictionary.Remove%2A>，和<xref:System.Collections.Specialized.ListDictionary.Contains%2A>是 O (`n`) 作業，其中`n`是<xref:System.Collections.Specialized.ListDictionary.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="6058f-108">Members, such as <xref:System.Collections.Specialized.ListDictionary.Item%2A>, <xref:System.Collections.Specialized.ListDictionary.Add%2A>, <xref:System.Collections.Specialized.ListDictionary.Remove%2A>, and <xref:System.Collections.Specialized.ListDictionary.Contains%2A> are O(`n`) operations, where `n` is <xref:System.Collections.Specialized.ListDictionary.Count%2A>.</span></span>  
  
 <span data-ttu-id="6058f-109">金鑰不能`null`，但是值可以。</span><span class="sxs-lookup"><span data-stu-id="6058f-109">A key cannot be `null`, but a value can.</span></span>  
  
 <span data-ttu-id="6058f-110">`foreach` C# 語言的陳述式 (`for each`在 Visual Basic 中) 傳回集合中的項目類型的物件。</span><span class="sxs-lookup"><span data-stu-id="6058f-110">The `foreach` statement of the C# language (`for each` in Visual Basic) returns an object of the type of the elements in the collection.</span></span> <span data-ttu-id="6058f-111">因為每個項目<xref:System.Collections.Specialized.ListDictionary>是索引鍵/值組，項目型別不是索引鍵的類型或值的類型。</span><span class="sxs-lookup"><span data-stu-id="6058f-111">Since each element of the <xref:System.Collections.Specialized.ListDictionary> is a key/value pair, the element type is not the type of the key or the type of the value.</span></span> <span data-ttu-id="6058f-112">相反地，項目型別是<xref:System.Collections.DictionaryEntry>。</span><span class="sxs-lookup"><span data-stu-id="6058f-112">Instead, the element type is <xref:System.Collections.DictionaryEntry>.</span></span> <span data-ttu-id="6058f-113">例如: </span><span class="sxs-lookup"><span data-stu-id="6058f-113">For example:</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary2#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CPP/source2.cpp#3)]
 [!code-csharp[System.Collections.Specialized.ListDictionary2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CS/source2.cs#3)]
 [!code-vb[System.Collections.Specialized.ListDictionary2#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/VB/source2.vb#3)]  
  
 <span data-ttu-id="6058f-114">`foreach`陳述式是包裝函式，只允許讀取，不寫入至集合的列舉值。</span><span class="sxs-lookup"><span data-stu-id="6058f-114">The `foreach` statement is a wrapper around the enumerator, which only allows reading from, not writing to, the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6058f-115">下列程式碼範例示範幾個屬性和方法<xref:System.Collections.Specialized.ListDictionary>。</span><span class="sxs-lookup"><span data-stu-id="6058f-115">The following code example demonstrates several of the properties and methods of <xref:System.Collections.Specialized.ListDictionary>.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CPP/listdictionary.cpp#1)]
 [!code-csharp[System.Collections.Specialized.ListDictionary2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CS/listdictionary.cs#1)]
 [!code-vb[System.Collections.Specialized.ListDictionary2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/VB/listdictionary.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="6058f-116">公用靜態 (<see langword="Shared" />在 Visual Basic 中) 這種類型的成員都具備執行緒安全。</span><span class="sxs-lookup"><span data-stu-id="6058f-116">Public static (<see langword="Shared" /> in Visual Basic) members of this type are thread safe.</span></span> <span data-ttu-id="6058f-117">不保證任何執行個體成員是安全執行緒。</span><span class="sxs-lookup"><span data-stu-id="6058f-117">Any instance members are not guaranteed to be thread safe.</span></span>  
  
 <span data-ttu-id="6058f-118">此實作不會提供同步處理 （安全執行緒） 包裝函式<see cref="T:System.Collections.Specialized.ListDictionary" />，但在衍生的類別可以建立自己的同步的版本<see cref="T:System.Collections.Specialized.ListDictionary" />使用<see cref="P:System.Collections.Specialized.ListDictionary.SyncRoot" />屬性。</span><span class="sxs-lookup"><span data-stu-id="6058f-118">This implementation does not provide a synchronized (thread safe) wrapper for a <see cref="T:System.Collections.Specialized.ListDictionary" />, but derived classes can create their own synchronized versions of the <see cref="T:System.Collections.Specialized.ListDictionary" /> using the <see cref="P:System.Collections.Specialized.ListDictionary.SyncRoot" /> property.</span></span>  
  
 <span data-ttu-id="6058f-119">透過集合進行列舉在本質上並非安全執行緒程序。</span><span class="sxs-lookup"><span data-stu-id="6058f-119">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="6058f-120">即使集合經過同步化，其他的執行緒仍可修改該集合，使列舉值擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6058f-120">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="6058f-121">若要保證列舉過程的執行緒安全，您可以在整個列舉過程中鎖定集合，或攔截由其他執行緒的變更所造成的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6058f-121">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span></threadsafe>
    <altmember cref="T:System.Collections.IDictionary" />
    <altmember cref="T:System.Collections.Hashtable" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6058f-122">初始化 <see cref="T:System.Collections.Specialized.ListDictionary" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="6058f-122">Initializes a new instance of the <see cref="T:System.Collections.Specialized.ListDictionary" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListDictionary ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.ListDictionary.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ListDictionary();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6058f-123">使用預設比較子 (Comparer) 來建立空的 <see cref="T:System.Collections.Specialized.ListDictionary" />。</span><span class="sxs-lookup"><span data-stu-id="6058f-123">Creates an empty <see cref="T:System.Collections.Specialized.ListDictionary" /> using the default comparer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6058f-124">比較子判斷兩個索引鍵是否相等。</span><span class="sxs-lookup"><span data-stu-id="6058f-124">The comparer determines whether two keys are equal.</span></span> <span data-ttu-id="6058f-125">在每個索引鍵<xref:System.Collections.Specialized.ListDictionary>必須是唯一的。</span><span class="sxs-lookup"><span data-stu-id="6058f-125">Every key in a <xref:System.Collections.Specialized.ListDictionary> must be unique.</span></span> <span data-ttu-id="6058f-126">預設比較子是索引鍵的實作<xref:System.Object.Equals%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6058f-126">The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="6058f-127">這個建構函式是 o （1） 運算。</span><span class="sxs-lookup"><span data-stu-id="6058f-127">This constructor is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6058f-128">下列程式碼範例示範幾個屬性和方法<xref:System.Collections.Specialized.ListDictionary>。</span><span class="sxs-lookup"><span data-stu-id="6058f-128">The following code example demonstrates several of the properties and methods of <xref:System.Collections.Specialized.ListDictionary>.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CPP/listdictionary.cpp#1)]
 [!code-csharp[System.Collections.Specialized.ListDictionary2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CS/listdictionary.cs#1)]
 [!code-vb[System.Collections.Specialized.ListDictionary2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/VB/listdictionary.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListDictionary (System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.ListDictionary.#ctor(System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (comparer As IComparer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ListDictionary(System::Collections::IComparer ^ comparer);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="comparer"><span data-ttu-id="6058f-129"><see cref="T:System.Collections.IComparer" />，可用來判斷兩個索引鍵是否相等。</span><span class="sxs-lookup"><span data-stu-id="6058f-129">The <see cref="T:System.Collections.IComparer" /> to use to determine whether two keys are equal.</span></span>  
  
 <span data-ttu-id="6058f-130">-或-</span><span class="sxs-lookup"><span data-stu-id="6058f-130">-or-</span></span>  
  
 <span data-ttu-id="6058f-131">表示使用預設比較子的 <see langword="null" />，預設比較子是每個索引鍵的  <see cref="M:System.Object.Equals(System.Object)" /> 實作。</span><span class="sxs-lookup"><span data-stu-id="6058f-131"><see langword="null" /> to use the default comparer, which is each key's implementation of <see cref="M:System.Object.Equals(System.Object)" />.</span></span></param>
        <summary><span data-ttu-id="6058f-132">使用指定的比較子來建立空的 <see cref="T:System.Collections.Specialized.ListDictionary" />。</span><span class="sxs-lookup"><span data-stu-id="6058f-132">Creates an empty <see cref="T:System.Collections.Specialized.ListDictionary" /> using the specified comparer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6058f-133">比較子判斷兩個索引鍵是否相等。</span><span class="sxs-lookup"><span data-stu-id="6058f-133">The comparer determines whether two keys are equal.</span></span> <span data-ttu-id="6058f-134">在每個索引鍵<xref:System.Collections.Specialized.ListDictionary>必須是唯一的。</span><span class="sxs-lookup"><span data-stu-id="6058f-134">Every key in a <xref:System.Collections.Specialized.ListDictionary> must be unique.</span></span> <span data-ttu-id="6058f-135">預設比較子是索引鍵的實作<xref:System.Object.Equals%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6058f-135">The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="6058f-136">自訂比較子，可讓這種情況下，進行不區分大小寫字串的查詢時。</span><span class="sxs-lookup"><span data-stu-id="6058f-136">The custom comparer enables such scenarios as doing lookups with case-insensitive strings.</span></span>  
  
 <span data-ttu-id="6058f-137">這個建構函式是 o （1） 運算。</span><span class="sxs-lookup"><span data-stu-id="6058f-137">This constructor is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (object key, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(object key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.ListDictionary.Add(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (key As Object, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Add(System::Object ^ key, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Add(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="6058f-138">要加入的項目索引鍵。</span><span class="sxs-lookup"><span data-stu-id="6058f-138">The key of the entry to add.</span></span></param>
        <param name="value"><span data-ttu-id="6058f-139">要加入的項目值。</span><span class="sxs-lookup"><span data-stu-id="6058f-139">The value of the entry to add.</span></span> <span data-ttu-id="6058f-140">這個值可以是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6058f-140">The value can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="6058f-141">將有指定索引鍵和數值的項目加入 <see cref="T:System.Collections.Specialized.ListDictionary" />。</span><span class="sxs-lookup"><span data-stu-id="6058f-141">Adds an entry with the specified key and value into the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6058f-142">具有其狀態和其雜湊碼值之間沒有關聯的物件通常不應做為索引鍵。</span><span class="sxs-lookup"><span data-stu-id="6058f-142">An object that has no correlation between its state and its hash code value should typically not be used as the key.</span></span> <span data-ttu-id="6058f-143">例如，字串物件做為索引鍵是優於使用 StringBuilder 物件。</span><span class="sxs-lookup"><span data-stu-id="6058f-143">For example, String objects are better than StringBuilder objects for use as keys.</span></span>  
  
 <span data-ttu-id="6058f-144">您也可以使用<xref:System.Collections.Specialized.ListDictionary.Item%2A>加入新項目，藉由設定機碼值的屬性不存在於<xref:System.Collections.Specialized.ListDictionary>; 例如， `myCollection["myNonexistentKey"] = myValue`。</span><span class="sxs-lookup"><span data-stu-id="6058f-144">You can also use the <xref:System.Collections.Specialized.ListDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.Specialized.ListDictionary>; for example, `myCollection["myNonexistentKey"] = myValue`.</span></span> <span data-ttu-id="6058f-145">不過，如果指定的索引鍵已存在於<xref:System.Collections.Specialized.ListDictionary>，設定<xref:System.Collections.Specialized.ListDictionary.Item%2A>屬性會覆寫舊的值。</span><span class="sxs-lookup"><span data-stu-id="6058f-145">However, if the specified key already exists in the <xref:System.Collections.Specialized.ListDictionary>, setting the <xref:System.Collections.Specialized.ListDictionary.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="6058f-146">相反地，<xref:System.Collections.Specialized.ListDictionary.Add%2A>方法不會修改現有的項目。</span><span class="sxs-lookup"><span data-stu-id="6058f-146">In contrast, the <xref:System.Collections.Specialized.ListDictionary.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="6058f-147">這個方法是 O (`n`) 作業，其中`n`是<xref:System.Collections.Specialized.ListDictionary.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="6058f-147">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.ListDictionary.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6058f-148">下列程式碼範例將加入和移除項目從<xref:System.Collections.Specialized.ListDictionary>。</span><span class="sxs-lookup"><span data-stu-id="6058f-148">The following code example adds to and removes elements from a <xref:System.Collections.Specialized.ListDictionary>.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary_AddRemove#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_AddRemove/CPP/listdictionary_addremove.cpp#1)]
 [!code-csharp[System.Collections.Specialized.ListDictionary_AddRemove#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_AddRemove/CS/listdictionary_addremove.cs#1)]
 [!code-vb[System.Collections.Specialized.ListDictionary_AddRemove#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_AddRemove/VB/listdictionary_addremove.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6058f-149"><paramref name="key" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6058f-149"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6058f-150">具有相同索引鍵的項目已經存在 <see cref="T:System.Collections.Specialized.ListDictionary" /> 中。</span><span class="sxs-lookup"><span data-stu-id="6058f-150">An entry with the same key already exists in the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span></span></exception>
        <altmember cref="M:System.Collections.Specialized.ListDictionary.Remove(System.Object)" />
        <altmember cref="P:System.Collections.Specialized.ListDictionary.Item(System.Object)" />
        <altmember cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.ListDictionary.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6058f-151">移除 <see cref="T:System.Collections.Specialized.ListDictionary" /> 的所有項目。</span><span class="sxs-lookup"><span data-stu-id="6058f-151">Removes all entries from the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6058f-152"><xref:System.Collections.Specialized.ListDictionary.Count%2A> 已設為零，並從項目集合的其他物件的參考也會釋放。</span><span class="sxs-lookup"><span data-stu-id="6058f-152"><xref:System.Collections.Specialized.ListDictionary.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.</span></span>  
  
 <span data-ttu-id="6058f-153">這個方法是一種 o （1） 運算。</span><span class="sxs-lookup"><span data-stu-id="6058f-153">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6058f-154">下列程式碼範例將加入和移除項目從<xref:System.Collections.Specialized.ListDictionary>。</span><span class="sxs-lookup"><span data-stu-id="6058f-154">The following code example adds to and removes elements from a <xref:System.Collections.Specialized.ListDictionary>.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary_AddRemove#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_AddRemove/CPP/listdictionary_addremove.cpp#1)]
 [!code-csharp[System.Collections.Specialized.ListDictionary_AddRemove#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_AddRemove/CS/listdictionary_addremove.cs#1)]
 [!code-vb[System.Collections.Specialized.ListDictionary_AddRemove#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_AddRemove/VB/listdictionary_addremove.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.IDictionary.Clear" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (object key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.ListDictionary.Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (key As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(System::Object ^ key);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="6058f-155">要在 <see cref="T:System.Collections.Specialized.ListDictionary" /> 中尋找的索引鍵。</span><span class="sxs-lookup"><span data-stu-id="6058f-155">The key to locate in the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span></span></param>
        <summary><span data-ttu-id="6058f-156">判斷 <see cref="T:System.Collections.Specialized.ListDictionary" /> 是否包含特定索引鍵。</span><span class="sxs-lookup"><span data-stu-id="6058f-156">Determines whether the <see cref="T:System.Collections.Specialized.ListDictionary" /> contains a specific key.</span></span></summary>
        <returns>
          <span data-ttu-id="6058f-157">如果 <see cref="T:System.Collections.Specialized.ListDictionary" /> 包含具有指定索引鍵的項目，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6058f-157"><see langword="true" /> if the <see cref="T:System.Collections.Specialized.ListDictionary" /> contains an entry with the specified key; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6058f-158">這個方法是 O (`n`) 作業，其中`n`是<xref:System.Collections.Specialized.ListDictionary.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="6058f-158">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.ListDictionary.Count%2A>.</span></span>  
  
 <span data-ttu-id="6058f-159">從.NET Framework 2.0 開始，這個方法會使用集合的物件<xref:System.Object.Equals%2A>和<xref:System.IComparable.CompareTo%2A>方法`key`來判斷是否`item`存在。</span><span class="sxs-lookup"><span data-stu-id="6058f-159">Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `key` to determine whether `item` exists.</span></span> <span data-ttu-id="6058f-160">在舊版的.NET Framework 中，藉由進行這項判斷<xref:System.Object.Equals%2A>和<xref:System.IComparable.CompareTo%2A>方法`item`參數集合中的物件。</span><span class="sxs-lookup"><span data-stu-id="6058f-160">In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6058f-161">下列程式碼範例中的項目會搜尋<xref:System.Collections.Specialized.ListDictionary>。</span><span class="sxs-lookup"><span data-stu-id="6058f-161">The following code example searches for an element in a <xref:System.Collections.Specialized.ListDictionary>.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary_Contains#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Contains/CPP/listdictionary_contains.cpp#1)]
 [!code-csharp[System.Collections.Specialized.ListDictionary_Contains#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Contains/CS/listdictionary_contains.cs#1)]
 [!code-vb[System.Collections.Specialized.ListDictionary_Contains#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Contains/VB/listdictionary_contains.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6058f-162"><paramref name="key" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6058f-162"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.ListDictionary.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ array, int index);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="6058f-163">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.DictionaryEntry" /> 複製過來的 <see cref="T:System.Collections.Specialized.ListDictionary" /> 物件之目的端。</span><span class="sxs-lookup"><span data-stu-id="6058f-163">The one-dimensional <see cref="T:System.Array" /> that is the destination of the <see cref="T:System.Collections.DictionaryEntry" /> objects copied from <see cref="T:System.Collections.Specialized.ListDictionary" />.</span></span> <span data-ttu-id="6058f-164"><see cref="T:System.Array" /> 必須有以零為起始的索引。</span><span class="sxs-lookup"><span data-stu-id="6058f-164">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <param name="index"><span data-ttu-id="6058f-165"><c>array</c> 中以零起始的索引，複製作業從此處開始。</span><span class="sxs-lookup"><span data-stu-id="6058f-165">The zero-based index in <c>array</c> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="6058f-166">將 <see cref="T:System.Collections.Specialized.ListDictionary" /> 項目複製到一維 <see cref="T:System.Array" /> 執行個體的指定索引處。</span><span class="sxs-lookup"><span data-stu-id="6058f-166">Copies the <see cref="T:System.Collections.Specialized.ListDictionary" /> entries to a one-dimensional <see cref="T:System.Array" /> instance at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6058f-167">將元素複製到<xref:System.Array>以相同的順序，以列舉值逐一<xref:System.Collections.Specialized.ListDictionary>。</span><span class="sxs-lookup"><span data-stu-id="6058f-167">The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Specialized.ListDictionary>.</span></span>  
  
 <span data-ttu-id="6058f-168">若要複製中的索引鍵<xref:System.Collections.Specialized.ListDictionary>，使用`ListDictionary.Keys.CopyTo`。</span><span class="sxs-lookup"><span data-stu-id="6058f-168">To copy only the keys in the <xref:System.Collections.Specialized.ListDictionary>, use `ListDictionary.Keys.CopyTo`.</span></span>  
  
 <span data-ttu-id="6058f-169">若要複製的值中<xref:System.Collections.Specialized.ListDictionary>，使用`ListDictionary.Values.CopyTo`。</span><span class="sxs-lookup"><span data-stu-id="6058f-169">To copy only the values in the <xref:System.Collections.Specialized.ListDictionary>, use `ListDictionary.Values.CopyTo`.</span></span>  
  
 <span data-ttu-id="6058f-170">這個方法是 O (`n`) 作業，其中`n`是<xref:System.Collections.Specialized.ListDictionary.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="6058f-170">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.ListDictionary.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6058f-171">下列程式碼範例會將複製的項目<xref:System.Collections.Specialized.ListDictionary>到陣列。</span><span class="sxs-lookup"><span data-stu-id="6058f-171">The following code example copies the elements of a <xref:System.Collections.Specialized.ListDictionary> to an array.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary_CopyTo#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_CopyTo/CPP/listdictionary_copyto.cpp#1)]
 [!code-csharp[System.Collections.Specialized.ListDictionary_CopyTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_CopyTo/CS/listdictionary_copyto.cs#1)]
 [!code-vb[System.Collections.Specialized.ListDictionary_CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_CopyTo/VB/listdictionary_copyto.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6058f-172"><paramref name="array" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6058f-172"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="6058f-173"><paramref name="index" /> 小於零。</span><span class="sxs-lookup"><span data-stu-id="6058f-173"><paramref name="index" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6058f-174"><paramref name="array" /> 是多維的。</span><span class="sxs-lookup"><span data-stu-id="6058f-174"><paramref name="array" /> is multidimensional.</span></span>  
  
 <span data-ttu-id="6058f-175">-或-</span><span class="sxs-lookup"><span data-stu-id="6058f-175">-or-</span></span>  
  
 <span data-ttu-id="6058f-176">來源 <see cref="T:System.Collections.Specialized.ListDictionary" /> 中的項目數大於 <paramref name="index" /> 到目的 <paramref name="array" /> 結尾的可用空間。</span><span class="sxs-lookup"><span data-stu-id="6058f-176">The number of elements in the source <see cref="T:System.Collections.Specialized.ListDictionary" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="6058f-177">來源 <see cref="T:System.Collections.Specialized.ListDictionary" /> 的類型無法自動轉換成目的 <paramref name="array" /> 的類型。</span><span class="sxs-lookup"><span data-stu-id="6058f-177">The type of the source <see cref="T:System.Collections.Specialized.ListDictionary" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span></span></exception>
        <altmember cref="T:System.Array" />
        <altmember cref="T:System.Collections.DictionaryEntry" />
        <altmember cref="M:System.Collections.Specialized.ListDictionary.GetEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Specialized.ListDictionary.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6058f-178">取得 <see cref="T:System.Collections.Specialized.ListDictionary" /> 中所包含的索引鍵/值組數目。</span><span class="sxs-lookup"><span data-stu-id="6058f-178">Gets the number of key/value pairs contained in the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span></span></summary>
        <value><span data-ttu-id="6058f-179"><see cref="T:System.Collections.Specialized.ListDictionary" /> 中所包含的索引鍵/值組數目。</span><span class="sxs-lookup"><span data-stu-id="6058f-179">The number of key/value pairs contained in the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6058f-180">擷取這個屬性的值是一種 O(1) 運算。</span><span class="sxs-lookup"><span data-stu-id="6058f-180">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6058f-181">下列程式碼範例會列舉項目<xref:System.Collections.Specialized.ListDictionary>。</span><span class="sxs-lookup"><span data-stu-id="6058f-181">The following code example enumerates the elements of a <xref:System.Collections.Specialized.ListDictionary>.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CPP/listdictionary_enumerator.cpp#1)]
 [!code-csharp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CS/listdictionary_enumerator.cs#1)]
 [!code-vb[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/VB/listdictionary_enumerator.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IDictionaryEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IDictionaryEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.ListDictionary.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IDictionaryEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IDictionaryEnumerator ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionaryEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6058f-182">傳回透過 <see cref="T:System.Collections.IDictionaryEnumerator" /> 重複的 <see cref="T:System.Collections.Specialized.ListDictionary" />。</span><span class="sxs-lookup"><span data-stu-id="6058f-182">Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> that iterates through the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span></span></summary>
        <returns><span data-ttu-id="6058f-183"><see cref="T:System.Collections.IDictionaryEnumerator" /> 的 <see cref="T:System.Collections.Specialized.ListDictionary" />。</span><span class="sxs-lookup"><span data-stu-id="6058f-183">An <see cref="T:System.Collections.IDictionaryEnumerator" /> for the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6058f-184">C# 語言的 `foreach` 陳述式 (在 Visual Basic 中為 `for each`) 會隱藏列舉值的複雜度。</span><span class="sxs-lookup"><span data-stu-id="6058f-184">The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.</span></span>  <span data-ttu-id="6058f-185">因此，建議您使用 `foreach`，而不要直接使用列舉值。</span><span class="sxs-lookup"><span data-stu-id="6058f-185">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="6058f-186">列舉程式可以用來讀取集合中的資料，但是無法用來修改基礎集合。</span><span class="sxs-lookup"><span data-stu-id="6058f-186">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="6058f-187">一開始，列舉程式位在集合中的第一個項目之前。</span><span class="sxs-lookup"><span data-stu-id="6058f-187">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="6058f-188"><xref:System.Collections.IEnumerator.Reset%2A> 也會將列舉值帶回至這個位置。</span><span class="sxs-lookup"><span data-stu-id="6058f-188"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span>  <span data-ttu-id="6058f-189">在這個位置上，<xref:System.Collections.IEnumerator.Current%2A> 並未定義。</span><span class="sxs-lookup"><span data-stu-id="6058f-189">At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="6058f-190">因此，在讀取 <xref:System.Collections.IEnumerator.MoveNext%2A> 的值之前，必須呼叫 <xref:System.Collections.IEnumerator.Current%2A> 以將列舉值前移至集合的第一個項目。</span><span class="sxs-lookup"><span data-stu-id="6058f-190">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="6058f-191"><xref:System.Collections.IEnumerator.Current%2A> 會傳回相同的物件直到呼叫 <xref:System.Collections.IEnumerator.MoveNext%2A> 或 <xref:System.Collections.IEnumerator.Reset%2A>。</span><span class="sxs-lookup"><span data-stu-id="6058f-191"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="6058f-192"><xref:System.Collections.IEnumerator.MoveNext%2A> 會將 <xref:System.Collections.IEnumerator.Current%2A> 設定為下一個項目。</span><span class="sxs-lookup"><span data-stu-id="6058f-192"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="6058f-193">如果<xref:System.Collections.IEnumerator.MoveNext%2A>超過集合的列舉值的結尾會位於集合中的最後一個元素之後和<xref:System.Collections.IEnumerator.MoveNext%2A>傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="6058f-193">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="6058f-194">列舉值位於這個位置上，後續呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>也會傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="6058f-194">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="6058f-195">如果最後一個呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>傳回`false`，<xref:System.Collections.IEnumerator.Current%2A>是未定義。</span><span class="sxs-lookup"><span data-stu-id="6058f-195">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="6058f-196">若要再次將 <xref:System.Collections.IEnumerator.Current%2A> 設定為集合的第一個元素，您可以在呼叫 <xref:System.Collections.IEnumerator.Reset%2A> 之後，接著呼叫 <xref:System.Collections.IEnumerator.MoveNext%2A>。</span><span class="sxs-lookup"><span data-stu-id="6058f-196">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="6058f-197">只要集合維持不變，列舉程式就持續有效。</span><span class="sxs-lookup"><span data-stu-id="6058f-197">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="6058f-198">如果對集合進行變更，例如加入、修改或刪除項目，列舉程式會永久失效，且其行為未定義。</span><span class="sxs-lookup"><span data-stu-id="6058f-198">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</span></span>  
  
 <span data-ttu-id="6058f-199">列舉程式沒有集合的獨佔存取權，因此，列舉集合內容本質上並不是安全的執行緒程序。</span><span class="sxs-lookup"><span data-stu-id="6058f-199">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="6058f-200">若要確保列舉期間的執行緒安全性，您可以在整個列舉期間鎖定集合。</span><span class="sxs-lookup"><span data-stu-id="6058f-200">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="6058f-201">若要讓多重執行緒能夠存取集合以便進行讀取和寫入，您必須實作自己的同步處理。</span><span class="sxs-lookup"><span data-stu-id="6058f-201">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="6058f-202">這個方法是一種 o （1） 運算。</span><span class="sxs-lookup"><span data-stu-id="6058f-202">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6058f-203">下列程式碼範例會列舉項目<xref:System.Collections.Specialized.ListDictionary>。</span><span class="sxs-lookup"><span data-stu-id="6058f-203">The following code example enumerates the elements of a <xref:System.Collections.Specialized.ListDictionary>.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CPP/listdictionary_enumerator.cpp#1)]
 [!code-csharp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CS/listdictionary_enumerator.cs#1)]
 [!code-vb[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/VB/listdictionary_enumerator.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="IsFixedSize">
      <MemberSignature Language="C#" Value="public bool IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Specialized.ListDictionary.IsFixedSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFixedSize As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFixedSize { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6058f-204">取得值，指出 <see cref="T:System.Collections.Specialized.ListDictionary" /> 是否有固定的大小。</span><span class="sxs-lookup"><span data-stu-id="6058f-204">Gets a value indicating whether the <see cref="T:System.Collections.Specialized.ListDictionary" /> has a fixed size.</span></span></summary>
        <value><span data-ttu-id="6058f-205">這個屬性永遠會傳回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6058f-205">This property always returns <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6058f-206"><xref:System.Collections.Specialized.ListDictionary> 實作<xref:System.Collections.Specialized.ListDictionary.IsFixedSize%2A>屬性因為的需要<xref:System.Collections.IDictionary?displayProperty=nameWithType>介面。</span><span class="sxs-lookup"><span data-stu-id="6058f-206"><xref:System.Collections.Specialized.ListDictionary> implements the <xref:System.Collections.Specialized.ListDictionary.IsFixedSize%2A> property because it is required by the <xref:System.Collections.IDictionary?displayProperty=nameWithType> interface.</span></span>  
  
 <span data-ttu-id="6058f-207">具有固定大小的集合不允許在集合建立後新增或移除項目，但允許對現有項目進行修改。</span><span class="sxs-lookup"><span data-stu-id="6058f-207">A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.</span></span>  
  
 <span data-ttu-id="6058f-208">具有固定大小的集合是唯讀的集合只以防止新增或移除項目; 包裝函式因此，如果變更基礎的集合，包括新增或移除項目，固定大小的集合會反映這些變更。</span><span class="sxs-lookup"><span data-stu-id="6058f-208">A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</span></span>  
  
 <span data-ttu-id="6058f-209">擷取這個屬性的值是一種 O(1) 運算。</span><span class="sxs-lookup"><span data-stu-id="6058f-209">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Specialized.ListDictionary.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6058f-210">取得值，指出 <see cref="T:System.Collections.Specialized.ListDictionary" /> 是否唯讀。</span><span class="sxs-lookup"><span data-stu-id="6058f-210">Gets a value indicating whether the <see cref="T:System.Collections.Specialized.ListDictionary" /> is read-only.</span></span></summary>
        <value><span data-ttu-id="6058f-211">這個屬性永遠會傳回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6058f-211">This property always returns <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6058f-212"><xref:System.Collections.Specialized.ListDictionary> 實作<xref:System.Collections.Specialized.ListDictionary.IsReadOnly%2A>屬性因為的需要<xref:System.Collections.IDictionary?displayProperty=nameWithType>介面。</span><span class="sxs-lookup"><span data-stu-id="6058f-212"><xref:System.Collections.Specialized.ListDictionary> implements the <xref:System.Collections.Specialized.ListDictionary.IsReadOnly%2A> property because it is required by the <xref:System.Collections.IDictionary?displayProperty=nameWithType> interface.</span></span>  
  
 <span data-ttu-id="6058f-213">唯讀的集合不允許在集合建立後增加、移除或修改項目。</span><span class="sxs-lookup"><span data-stu-id="6058f-213">A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</span></span>  
  
 <span data-ttu-id="6058f-214">是唯讀的集合是唯讀的集合只具有可防止修改集合的包裝函式因此，如果基礎集合進行變更，唯讀的集合會反映這些變更。</span><span class="sxs-lookup"><span data-stu-id="6058f-214">A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</span></span>  
  
 <span data-ttu-id="6058f-215">擷取這個屬性的值是一種 O(1) 運算。</span><span class="sxs-lookup"><span data-stu-id="6058f-215">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Specialized.ListDictionary.IsSynchronized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSynchronized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSynchronized { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6058f-216">取得值，指出 <see cref="T:System.Collections.Specialized.ListDictionary" /> 是否為同步 (安全執行緒)。</span><span class="sxs-lookup"><span data-stu-id="6058f-216">Gets a value indicating whether the <see cref="T:System.Collections.Specialized.ListDictionary" /> is synchronized (thread safe).</span></span></summary>
        <value><span data-ttu-id="6058f-217">這個屬性永遠會傳回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6058f-217">This property always returns <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6058f-218"><xref:System.Collections.Specialized.ListDictionary> 實作<xref:System.Collections.Specialized.ListDictionary.IsSynchronized%2A>屬性因為的需要<xref:System.Collections.ICollection?displayProperty=nameWithType>介面。</span><span class="sxs-lookup"><span data-stu-id="6058f-218"><xref:System.Collections.Specialized.ListDictionary> implements the <xref:System.Collections.Specialized.ListDictionary.IsSynchronized%2A> property because it is required by the <xref:System.Collections.ICollection?displayProperty=nameWithType> interface.</span></span>  
  
 <span data-ttu-id="6058f-219">在衍生的類別可以提供的同步化的版本<xref:System.Collections.Specialized.ListDictionary>使用<xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="6058f-219">Derived classes can provide a synchronized version of the <xref:System.Collections.Specialized.ListDictionary> using the <xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> property.</span></span>  
  
 <span data-ttu-id="6058f-220">透過集合進行列舉在本質上並非安全執行緒程序。</span><span class="sxs-lookup"><span data-stu-id="6058f-220">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="6058f-221">即使集合經過同步化，其他的執行緒仍可修改該集合，使列舉值擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6058f-221">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="6058f-222">若要保證列舉過程的執行緒安全，您可以在整個列舉過程中鎖定集合，或攔截由其他執行緒的變更所造成的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6058f-222">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6058f-223">下列程式碼範例示範如何鎖定集合使用<xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A>在整個列舉過程。</span><span class="sxs-lookup"><span data-stu-id="6058f-223">The following code example shows how to lock the collection using the <xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> during the entire enumeration.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary2#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CPP/source2.cpp#2)]
 [!code-csharp[System.Collections.Specialized.ListDictionary2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CS/source2.cs#2)]
 [!code-vb[System.Collections.Specialized.ListDictionary2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/VB/source2.vb#2)]  
  
 <span data-ttu-id="6058f-224">擷取這個屬性的值是一種 O(1) 運算。</span><span class="sxs-lookup"><span data-stu-id="6058f-224">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.Specialized.ListDictionary.SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[object key] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(object)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Specialized.ListDictionary.Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(key As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[System::Object ^] { System::Object ^ get(System::Object ^ key); void set(System::Object ^ key, System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.Item(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="6058f-225">索引鍵，要讀取或設定其值。</span><span class="sxs-lookup"><span data-stu-id="6058f-225">The key whose value to get or set.</span></span></param>
        <summary><span data-ttu-id="6058f-226">取得或設定與指定之索引鍵相關聯的值。</span><span class="sxs-lookup"><span data-stu-id="6058f-226">Gets or sets the value associated with the specified key.</span></span></summary>
        <value><span data-ttu-id="6058f-227">與指定之索引鍵關聯的值。</span><span class="sxs-lookup"><span data-stu-id="6058f-227">The value associated with the specified key.</span></span> <span data-ttu-id="6058f-228">如果找不到指定的索引鍵，嘗試取得它將傳回 <see langword="null" />，而嘗試設定它將以指定的索引鍵建立新的項目。</span><span class="sxs-lookup"><span data-stu-id="6058f-228">If the specified key is not found, attempting to get it returns <see langword="null" />, and attempting to set it creates a new entry using the specified key.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6058f-229">這個屬性可以使用下列語法提供存取集合中特定元素的能力：`myCollection[key]`。</span><span class="sxs-lookup"><span data-stu-id="6058f-229">This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]`.</span></span>  
  
 <span data-ttu-id="6058f-230">您也可以使用<xref:System.Collections.Specialized.ListDictionary.Item%2A>加入新項目，藉由設定機碼值的屬性不存在於<xref:System.Collections.Specialized.ListDictionary>; 例如， `myCollection["myNonexistentKey"] = myValue`。</span><span class="sxs-lookup"><span data-stu-id="6058f-230">You can also use the <xref:System.Collections.Specialized.ListDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.Specialized.ListDictionary>; for example, `myCollection["myNonexistentKey"] = myValue`.</span></span> <span data-ttu-id="6058f-231">不過，如果指定的索引鍵已存在於<xref:System.Collections.Specialized.ListDictionary>，設定<xref:System.Collections.Specialized.ListDictionary.Item%2A>屬性會覆寫舊的值。</span><span class="sxs-lookup"><span data-stu-id="6058f-231">However, if the specified key already exists in the <xref:System.Collections.Specialized.ListDictionary>, setting the <xref:System.Collections.Specialized.ListDictionary.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="6058f-232">相反地，<xref:System.Collections.Specialized.ListDictionary.Add%2A>方法不會修改現有的項目。</span><span class="sxs-lookup"><span data-stu-id="6058f-232">In contrast, the <xref:System.Collections.Specialized.ListDictionary.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="6058f-233">金鑰不能`null`，但是值可以。</span><span class="sxs-lookup"><span data-stu-id="6058f-233">A key cannot be `null`, but a value can.</span></span> <span data-ttu-id="6058f-234">若要在區別`null`傳回因為找不到指定的索引鍵和`null`傳回指定之索引鍵的值，所以`null`，使用<xref:System.Collections.Specialized.ListDictionary.Contains%2A>方法來判斷是否索引鍵存在於清單中。</span><span class="sxs-lookup"><span data-stu-id="6058f-234">To distinguish between `null` that is returned because the specified key is not found and `null` that is returned because the value of the specified key is `null`, use the <xref:System.Collections.Specialized.ListDictionary.Contains%2A> method to determine if the key exists in the list.</span></span>  
  
 <span data-ttu-id="6058f-235">C# 語言使用關鍵字來定義索引，而不必實作<xref:System.Collections.Specialized.ListDictionary.Item%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="6058f-235">The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.Specialized.ListDictionary.Item%2A> property.</span></span> <span data-ttu-id="6058f-236">Visual Basic 會將 <xref:System.Collections.Specialized.ListDictionary.Item%2A> 實作為預設屬性，這樣會提供相同的索引功能。</span><span class="sxs-lookup"><span data-stu-id="6058f-236">Visual Basic implements <xref:System.Collections.Specialized.ListDictionary.Item%2A> as a default property, which provides the same indexing functionality.</span></span>  
  
 <span data-ttu-id="6058f-237">這個方法是 O (`n`) 作業，其中`n`是<xref:System.Collections.Specialized.ListDictionary.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="6058f-237">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.ListDictionary.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6058f-238">下列程式碼範例會列舉項目<xref:System.Collections.Specialized.ListDictionary>。</span><span class="sxs-lookup"><span data-stu-id="6058f-238">The following code example enumerates the elements of a <xref:System.Collections.Specialized.ListDictionary>.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CPP/listdictionary_enumerator.cpp#1)]
 [!code-csharp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CS/listdictionary_enumerator.cs#1)]
 [!code-vb[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/VB/listdictionary_enumerator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6058f-239"><paramref name="key" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6058f-239"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Collections.Specialized.ListDictionary.Add(System.Object,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Keys">
      <MemberSignature Language="C#" Value="public System.Collections.ICollection Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection Keys" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Specialized.ListDictionary.Keys" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Keys As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ICollection ^ Keys { System::Collections::ICollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.Keys</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6058f-240">取得含有 <see cref="T:System.Collections.ICollection" /> 中的索引鍵的 <see cref="T:System.Collections.Specialized.ListDictionary" />。</span><span class="sxs-lookup"><span data-stu-id="6058f-240">Gets an <see cref="T:System.Collections.ICollection" /> containing the keys in the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span></span></summary>
        <value><span data-ttu-id="6058f-241"><see cref="T:System.Collections.ICollection" />，含有 <see cref="T:System.Collections.Specialized.ListDictionary" /> 中的索引鍵。</span><span class="sxs-lookup"><span data-stu-id="6058f-241">An <see cref="T:System.Collections.ICollection" /> containing the keys in the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6058f-242">中值的順序<xref:System.Collections.ICollection>並未指定，但它是關聯值中的相同順序<xref:System.Collections.ICollection>傳回<xref:System.Collections.Specialized.ListDictionary.Values%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="6058f-242">The order of the values in the <xref:System.Collections.ICollection> is unspecified, but it is the same order as the associated values in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.Specialized.ListDictionary.Values%2A> method.</span></span>  
  
 <span data-ttu-id="6058f-243">傳回<xref:System.Collections.ICollection>不是靜態的複本; 相反地，<xref:System.Collections.ICollection>中原始的索引鍵是指回<xref:System.Collections.Specialized.ListDictionary>。</span><span class="sxs-lookup"><span data-stu-id="6058f-243">The returned <xref:System.Collections.ICollection> is not a static copy; instead, the <xref:System.Collections.ICollection> refers back to the keys in the original <xref:System.Collections.Specialized.ListDictionary>.</span></span> <span data-ttu-id="6058f-244">因此，變更為<xref:System.Collections.Specialized.ListDictionary>才會反映在繼續<xref:System.Collections.ICollection>。</span><span class="sxs-lookup"><span data-stu-id="6058f-244">Therefore, changes to the <xref:System.Collections.Specialized.ListDictionary> continue to be reflected in the <xref:System.Collections.ICollection>.</span></span>  
  
 <span data-ttu-id="6058f-245">擷取這個屬性的值是一種 O(1) 運算。</span><span class="sxs-lookup"><span data-stu-id="6058f-245">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6058f-246">下列程式碼範例會列舉項目<xref:System.Collections.Specialized.ListDictionary>。</span><span class="sxs-lookup"><span data-stu-id="6058f-246">The following code example enumerates the elements of a <xref:System.Collections.Specialized.ListDictionary>.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CPP/listdictionary_enumerator.cpp#1)]
 [!code-csharp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CS/listdictionary_enumerator.cs#1)]
 [!code-vb[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/VB/listdictionary_enumerator.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="P:System.Collections.Specialized.ListDictionary.Values" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (object key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Remove(object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.ListDictionary.Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (key As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Remove(System::Object ^ key);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="6058f-247">要移除的項目的索引鍵。</span><span class="sxs-lookup"><span data-stu-id="6058f-247">The key of the entry to remove.</span></span></param>
        <summary><span data-ttu-id="6058f-248">將有指定索引鍵的項目從 <see cref="T:System.Collections.Specialized.ListDictionary" /> 移除。</span><span class="sxs-lookup"><span data-stu-id="6058f-248">Removes the entry with the specified key from the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6058f-249">如果<xref:System.Collections.Specialized.ListDictionary>不包含具有指定之索引鍵項目<xref:System.Collections.Specialized.ListDictionary>維持不變。</span><span class="sxs-lookup"><span data-stu-id="6058f-249">If the <xref:System.Collections.Specialized.ListDictionary> does not contain an element with the specified key, the <xref:System.Collections.Specialized.ListDictionary> remains unchanged.</span></span> <span data-ttu-id="6058f-250">不會有例外狀況擲回。</span><span class="sxs-lookup"><span data-stu-id="6058f-250">No exception is thrown.</span></span>  
  
 <span data-ttu-id="6058f-251">這個方法是 O (`n`) 作業，其中`n`是<xref:System.Collections.Specialized.ListDictionary.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="6058f-251">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.ListDictionary.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6058f-252">下列程式碼範例將加入和移除項目從<xref:System.Collections.Specialized.ListDictionary>。</span><span class="sxs-lookup"><span data-stu-id="6058f-252">The following code example adds to and removes elements from a <xref:System.Collections.Specialized.ListDictionary>.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary_AddRemove#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_AddRemove/CPP/listdictionary_addremove.cpp#1)]
 [!code-csharp[System.Collections.Specialized.ListDictionary_AddRemove#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_AddRemove/CS/listdictionary_addremove.cs#1)]
 [!code-vb[System.Collections.Specialized.ListDictionary_AddRemove#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_AddRemove/VB/listdictionary_addremove.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6058f-253"><paramref name="key" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6058f-253"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Collections.Specialized.ListDictionary.Add(System.Object,System.Object)" />
        <altmember cref="M:System.Collections.IDictionary.Remove(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Specialized.ListDictionary.SyncRoot" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SyncRoot As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SyncRoot { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6058f-254">取得可用以同步存取 <see cref="T:System.Collections.Specialized.ListDictionary" /> 的物件。</span><span class="sxs-lookup"><span data-stu-id="6058f-254">Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span></span></summary>
        <value><span data-ttu-id="6058f-255">可用以同步存取 <see cref="T:System.Collections.Specialized.ListDictionary" /> 的物件。</span><span class="sxs-lookup"><span data-stu-id="6058f-255">An object that can be used to synchronize access to the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6058f-256">在衍生的類別可以提供自己的同步處理的版本<xref:System.Collections.Specialized.ListDictionary>使用<xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="6058f-256">Derived classes can provide their own synchronized version of the <xref:System.Collections.Specialized.ListDictionary> using the <xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> property.</span></span> <span data-ttu-id="6058f-257">同步處理的程式碼必須在上執行作業<xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A>的<xref:System.Collections.Specialized.ListDictionary>、 直接依據<xref:System.Collections.Specialized.ListDictionary>。</span><span class="sxs-lookup"><span data-stu-id="6058f-257">The synchronizing code must perform operations on the <xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> of the <xref:System.Collections.Specialized.ListDictionary>, not directly on the <xref:System.Collections.Specialized.ListDictionary>.</span></span> <span data-ttu-id="6058f-258">如此可確保衍生自其他物件的集合可以正常運作，</span><span class="sxs-lookup"><span data-stu-id="6058f-258">This ensures proper operation of collections that are derived from other objects.</span></span> <span data-ttu-id="6058f-259">具體而言，保持正常的同步處理與其他可能同時修改的執行緒<xref:System.Collections.Specialized.ListDictionary>物件。</span><span class="sxs-lookup"><span data-stu-id="6058f-259">Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.Specialized.ListDictionary> object.</span></span>  
  
 <span data-ttu-id="6058f-260">透過集合進行列舉在本質上並非安全執行緒程序。</span><span class="sxs-lookup"><span data-stu-id="6058f-260">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="6058f-261">即使集合經過同步化，其他的執行緒仍可修改該集合，使列舉值擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6058f-261">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="6058f-262">若要保證列舉過程的執行緒安全，您可以在整個列舉過程中鎖定集合，或攔截由其他執行緒的變更所造成的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6058f-262">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6058f-263">下列程式碼範例示範如何鎖定集合使用<xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A>在整個列舉過程。</span><span class="sxs-lookup"><span data-stu-id="6058f-263">The following code example shows how to lock the collection using the <xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> during the entire enumeration.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary2#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CPP/source2.cpp#2)]
 [!code-csharp[System.Collections.Specialized.ListDictionary2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CS/source2.cs#2)]
 [!code-vb[System.Collections.Specialized.ListDictionary2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/VB/source2.vb#2)]  
  
 <span data-ttu-id="6058f-264">擷取這個屬性的值是一種 O(1) 運算。</span><span class="sxs-lookup"><span data-stu-id="6058f-264">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.Specialized.ListDictionary.IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.ListDictionary.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6058f-265">傳回透過 <see cref="T:System.Collections.IEnumerator" /> 重複的 <see cref="T:System.Collections.Specialized.ListDictionary" />。</span><span class="sxs-lookup"><span data-stu-id="6058f-265">Returns an <see cref="T:System.Collections.IEnumerator" /> that iterates through the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span></span></summary>
        <returns><span data-ttu-id="6058f-266"><see cref="T:System.Collections.IEnumerator" /> 的 <see cref="T:System.Collections.Specialized.ListDictionary" />。</span><span class="sxs-lookup"><span data-stu-id="6058f-266">An <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6058f-267">C# 語言的 `foreach` 陳述式 (在 Visual Basic 中為 `for each`) 會隱藏列舉值的複雜度。</span><span class="sxs-lookup"><span data-stu-id="6058f-267">The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.</span></span>  <span data-ttu-id="6058f-268">因此，建議您使用 `foreach`，而不要直接使用列舉值。</span><span class="sxs-lookup"><span data-stu-id="6058f-268">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="6058f-269">列舉程式可以用來讀取集合中的資料，但是無法用來修改基礎集合。</span><span class="sxs-lookup"><span data-stu-id="6058f-269">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="6058f-270">一開始，列舉程式位在集合中的第一個項目之前。</span><span class="sxs-lookup"><span data-stu-id="6058f-270">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="6058f-271"><xref:System.Collections.IEnumerator.Reset%2A> 也會將列舉值帶回至這個位置。</span><span class="sxs-lookup"><span data-stu-id="6058f-271"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span> <span data-ttu-id="6058f-272">在這個位置上，呼叫<xref:System.Collections.IEnumerator.Current%2A>擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6058f-272">At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception.</span></span> <span data-ttu-id="6058f-273">因此，在讀取 <xref:System.Collections.IEnumerator.MoveNext%2A> 的值之前，必須呼叫 <xref:System.Collections.IEnumerator.Current%2A> 以將列舉值前移至集合的第一個項目。</span><span class="sxs-lookup"><span data-stu-id="6058f-273">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="6058f-274"><xref:System.Collections.IEnumerator.Current%2A> 會傳回相同的物件直到呼叫 <xref:System.Collections.IEnumerator.MoveNext%2A> 或 <xref:System.Collections.IEnumerator.Reset%2A>。</span><span class="sxs-lookup"><span data-stu-id="6058f-274"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="6058f-275"><xref:System.Collections.IEnumerator.MoveNext%2A> 會將 <xref:System.Collections.IEnumerator.Current%2A> 設定為下一個項目。</span><span class="sxs-lookup"><span data-stu-id="6058f-275"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="6058f-276">如果<xref:System.Collections.IEnumerator.MoveNext%2A>超過集合的列舉值的結尾會位於集合中的最後一個元素之後和<xref:System.Collections.IEnumerator.MoveNext%2A>傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="6058f-276">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="6058f-277">列舉值位於這個位置上，後續呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>也會傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="6058f-277">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="6058f-278">如果最後一個呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>傳回`false`，則呼叫<xref:System.Collections.IEnumerator.Current%2A>擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6058f-278">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception.</span></span> <span data-ttu-id="6058f-279">若要再次將 <xref:System.Collections.IEnumerator.Current%2A> 設定為集合的第一個元素，您可以在呼叫 <xref:System.Collections.IEnumerator.Reset%2A> 之後，接著呼叫 <xref:System.Collections.IEnumerator.MoveNext%2A>。</span><span class="sxs-lookup"><span data-stu-id="6058f-279">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="6058f-280">只要集合維持不變，列舉程式就持續有效。</span><span class="sxs-lookup"><span data-stu-id="6058f-280">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="6058f-281">如果變更集合，例如加入、 修改或刪除項目，列舉程式會永久失效，而且下次呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>或<xref:System.Collections.IEnumerator.Reset%2A>會擲回<xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="6058f-281">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="6058f-282">如果之間修改集合<xref:System.Collections.IEnumerator.MoveNext%2A>和<xref:System.Collections.IEnumerator.Current%2A>，<xref:System.Collections.IEnumerator.Current%2A>傳回項目所設定，即使列舉值已經無效。</span><span class="sxs-lookup"><span data-stu-id="6058f-282">If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.</span></span>  
  
 <span data-ttu-id="6058f-283">列舉程式沒有集合的獨佔存取權，因此，列舉集合內容本質上並不是安全的執行緒程序。</span><span class="sxs-lookup"><span data-stu-id="6058f-283">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="6058f-284">即使集合經過同步化，其他的執行緒仍可修改該集合，使列舉值擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6058f-284">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="6058f-285">若要保證列舉過程的執行緒安全，您可以在整個列舉過程中鎖定集合，或攔截由其他執行緒的變更所造成的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6058f-285">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
 <span data-ttu-id="6058f-286">這個方法是一種 o （1） 運算。</span><span class="sxs-lookup"><span data-stu-id="6058f-286">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6058f-287">下列程式碼範例會列舉項目<xref:System.Collections.Specialized.ListDictionary>。</span><span class="sxs-lookup"><span data-stu-id="6058f-287">The following code example enumerates the elements of a <xref:System.Collections.Specialized.ListDictionary>.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CPP/listdictionary_enumerator.cpp#1)]
 [!code-csharp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CS/listdictionary_enumerator.cs#1)]
 [!code-vb[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/VB/listdictionary_enumerator.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="Values">
      <MemberSignature Language="C#" Value="public System.Collections.ICollection Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection Values" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Specialized.ListDictionary.Values" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Values As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ICollection ^ Values { System::Collections::ICollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.Values</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6058f-288">取得 <see cref="T:System.Collections.ICollection" />，包含 <see cref="T:System.Collections.Specialized.ListDictionary" /> 中的值。</span><span class="sxs-lookup"><span data-stu-id="6058f-288">Gets an <see cref="T:System.Collections.ICollection" /> containing the values in the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span></span></summary>
        <value><span data-ttu-id="6058f-289"><see cref="T:System.Collections.ICollection" />，包含 <see cref="T:System.Collections.Specialized.ListDictionary" /> 中的值。</span><span class="sxs-lookup"><span data-stu-id="6058f-289">An <see cref="T:System.Collections.ICollection" /> containing the values in the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6058f-290">中值的順序<xref:System.Collections.ICollection>並未指定，但它是關聯的索引鍵中的相同順序<xref:System.Collections.ICollection>傳回<xref:System.Collections.Specialized.ListDictionary.Keys%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="6058f-290">The order of the values in the <xref:System.Collections.ICollection> is unspecified, but it is the same order as the associated keys in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.Specialized.ListDictionary.Keys%2A> method.</span></span>  
  
 <span data-ttu-id="6058f-291">傳回<xref:System.Collections.ICollection>不是靜態的複本; 相反地，<xref:System.Collections.ICollection>中原始的值是指回<xref:System.Collections.Specialized.ListDictionary>。</span><span class="sxs-lookup"><span data-stu-id="6058f-291">The returned <xref:System.Collections.ICollection> is not a static copy; instead, the <xref:System.Collections.ICollection> refers back to the values in the original <xref:System.Collections.Specialized.ListDictionary>.</span></span> <span data-ttu-id="6058f-292">因此，變更為<xref:System.Collections.Specialized.ListDictionary>才會反映在繼續<xref:System.Collections.ICollection>。</span><span class="sxs-lookup"><span data-stu-id="6058f-292">Therefore, changes to the <xref:System.Collections.Specialized.ListDictionary> continue to be reflected in the <xref:System.Collections.ICollection>.</span></span>  
  
 <span data-ttu-id="6058f-293">擷取這個屬性的值是一種 O(1) 運算。</span><span class="sxs-lookup"><span data-stu-id="6058f-293">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6058f-294">下列程式碼範例會列舉項目<xref:System.Collections.Specialized.ListDictionary>。</span><span class="sxs-lookup"><span data-stu-id="6058f-294">The following code example enumerates the elements of a <xref:System.Collections.Specialized.ListDictionary>.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CPP/listdictionary_enumerator.cpp#1)]
 [!code-csharp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CS/listdictionary_enumerator.cs#1)]
 [!code-vb[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/VB/listdictionary_enumerator.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="P:System.Collections.Specialized.ListDictionary.Keys" />
      </Docs>
    </Member>
  </Members>
</Type>