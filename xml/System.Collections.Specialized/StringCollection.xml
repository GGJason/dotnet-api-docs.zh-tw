<Type Name="StringCollection" FullName="System.Collections.Specialized.StringCollection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="161e6349e24d6a2f0668496206d7048ef1155437" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30370742" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class StringCollection : System.Collections.IList" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit StringCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Specialized.StringCollection" />
  <TypeSignature Language="VB.NET" Value="Public Class StringCollection&#xA;Implements IList" />
  <TypeSignature Language="C++ CLI" Value="public ref class StringCollection : System::Collections::IList" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.Specialized</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>代表字串的集合。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Specialized.StringCollection> 接受`null`有效的值，並允許重複的項目。  
  
 字串比較會區分大小寫。  
  
 可以使用整數索引來存取此集合中的項目。  在此集合中的索引都以零為起始。  
  
   
  
## Examples  
 下列程式碼範例示範幾個屬性和方法<xref:System.Collections.Specialized.StringCollection>。  
  
 [!code-cpp[System.Collections.Specialized.StringCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.StringCollection2/CPP/stringcollection.cpp#1)]
 [!code-csharp[System.Collections.Specialized.StringCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.StringCollection2/CS/stringcollection.cs#1)]
 [!code-vb[System.Collections.Specialized.StringCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.StringCollection2/VB/stringcollection.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>公用靜態 (<see langword="Shared" />在 Visual Basic 中) 這種類型的成員都具備執行緒安全。 不保證任何執行個體成員是安全執行緒。  
  
 此實作不會提供同步處理 （安全執行緒） 包裝函式<see cref="T:System.Collections.Specialized.StringCollection" />，但在衍生的類別可以建立自己的同步的版本<see cref="T:System.Collections.Specialized.StringCollection" />使用<see cref="P:System.Collections.Specialized.StringCollection.SyncRoot" />屬性。  
  
 透過集合進行列舉在本質上並不是執行緒安全的程序。 即使集合經過同步化，其他的執行緒仍可修改該集合，使列舉值擲回例外狀況。 若要保證列舉過程的執行緒安全，您可以在整個列舉過程中鎖定集合，或攔截由其他執行緒的變更所造成的例外狀況。</threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StringCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.StringCollection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StringCollection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Collections.Specialized.StringCollection" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式是 o （1） 運算。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public int Add (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Add(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.StringCollection.Add(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (value As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Add(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">加入至 <see cref="T:System.Collections.Specialized.StringCollection" /> 結尾的字串。 這個值可以是 <see langword="null" />。</param>
        <summary>將字串加入 <see cref="T:System.Collections.Specialized.StringCollection" /> 的結尾。</summary>
        <returns>要插入新元素處的以零起始的索引。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Specialized.StringCollection> 接受`null`有效的值，並允許重複的項目。  
  
 如果<xref:System.Collections.Specialized.StringCollection.Count%2A>小於比容量，這個方法是一種 o （1） 運算。 如果需要增加，以容納新項目容量，這個方法會變成 O (`n`) 作業，其中`n`是<xref:System.Collections.Specialized.StringCollection.Count%2A>。  
  
   
  
## Examples  
 下列程式碼範例會將新項目<xref:System.Collections.Specialized.StringCollection>。  
  
 [!code-cpp[System.Collections.Specialized.StringCollectionAdd#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.StringCollectionAdd/CPP/stringcollectionadd.cpp#1)]
 [!code-csharp[System.Collections.Specialized.StringCollectionAdd#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.StringCollectionAdd/CS/stringcollectionadd.cs#1)]
 [!code-vb[System.Collections.Specialized.StringCollectionAdd#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.StringCollectionAdd/VB/stringcollectionadd.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Specialized.StringCollection.AddRange(System.String[])" />
        <altmember cref="P:System.Collections.Specialized.StringCollection.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (string[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(string[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.StringCollection.AddRange(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRange (value As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRange(cli::array &lt;System::String ^&gt; ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="value">要加入至 <see cref="T:System.Collections.Specialized.StringCollection" /> 結尾的字串陣列。 陣列本身不能是 <see langword="null" />，但它可以包含為 <see langword="null" /> 的元素。</param>
        <summary>將字串陣列的元素複製到 <see cref="T:System.Collections.Specialized.StringCollection" /> 的結尾。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Specialized.StringCollection> 接受`null`有效的值，並允許重複的項目。  
  
 如果<xref:System.Collections.Specialized.StringCollection>可容納新項目，而不會增加容量，這個方法是 O (`n`) 作業，其中`n`是要加入的項目數。 如果需要增加，以容納新項目容量，這個方法會變成 O (`n` + `m`) 作業，其中`n`是要加入的項目數和`m`是<xref:System.Collections.Specialized.StringCollection.Count%2A>。  
  
   
  
## Examples  
 下列程式碼範例會將新項目<xref:System.Collections.Specialized.StringCollection>。  
  
 [!code-cpp[System.Collections.Specialized.StringCollectionAdd#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.StringCollectionAdd/CPP/stringcollectionadd.cpp#1)]
 [!code-csharp[System.Collections.Specialized.StringCollectionAdd#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.StringCollectionAdd/CS/stringcollectionadd.cs#1)]
 [!code-vb[System.Collections.Specialized.StringCollectionAdd#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.StringCollectionAdd/VB/stringcollectionadd.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> 為 <see langword="null" />。</exception>
        <altmember cref="M:System.Collections.Specialized.StringCollection.Add(System.String)" />
        <altmember cref="P:System.Collections.Specialized.StringCollection.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.StringCollection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將所有字串從 <see cref="T:System.Collections.Specialized.StringCollection" /> 移除。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Specialized.StringCollection.Count%2A> 已設為零，並從項目集合的其他物件的參考也會釋放。  
  
 這個方法是 O (`n`) 作業，其中`n`是<xref:System.Collections.Specialized.StringCollection.Count%2A>。  
  
   
  
## Examples  
 下列程式碼範例會移除項目從<xref:System.Collections.Specialized.StringCollection>。  
  
 [!code-cpp[System.Collections.Specialized.StringCollectionRemove#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.StringCollectionRemove/CPP/stringcollectionremove.cpp#1)]
 [!code-csharp[System.Collections.Specialized.StringCollectionRemove#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.StringCollectionRemove/CS/stringcollectionremove.cs#1)]
 [!code-vb[System.Collections.Specialized.StringCollectionRemove#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.StringCollectionRemove/VB/stringcollectionremove.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.Specialized.StringCollection.Count" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.StringCollection.Contains(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">要在 <see cref="T:System.Collections.Specialized.StringCollection" /> 中尋找的字串。 這個值可以是 <see langword="null" />。</param>
        <summary>判斷指定的字串是否在 <see cref="T:System.Collections.Specialized.StringCollection" /> 中。</summary>
        <returns>
          如果在 <see langword="true" /> 中找到 <paramref name="value" />，則為 <see cref="T:System.Collections.Specialized.StringCollection" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Specialized.StringCollection.Contains%2A>方法可以確認是否存在字串，然後再執行進一步的作業。  
  
 這個方法會判斷是否相等，藉由呼叫<xref:System.Object.Equals%2A?displayProperty=nameWithType>。 字串比較會區分大小寫。  
  
 這個方法會執行線性搜尋;因此，這個方法是 O (`n`) 作業，其中`n`是<xref:System.Collections.Specialized.StringCollection.Count%2A>。  
  
 從.NET Framework 2.0 開始，這個方法會使用集合的物件<xref:System.Object.Equals%2A>和<xref:System.IComparable.CompareTo%2A>方法`item`來判斷項目是否存在。 在舊版的.NET Framework 中，藉由進行這項判斷<xref:System.Object.Equals%2A>和<xref:System.IComparable.CompareTo%2A>方法`item`參數集合中的物件。  
  
   
  
## Examples  
 下列程式碼範例會搜尋<xref:System.Collections.Specialized.StringCollection>的項目。  
  
 [!code-cpp[System.Collections.Specialized.StringCollectionContains#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.StringCollectionContains/CPP/stringcollectioncontains.cpp#1)]
 [!code-csharp[System.Collections.Specialized.StringCollectionContains#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.StringCollectionContains/CS/stringcollectioncontains.cs#1)]
 [!code-vb[System.Collections.Specialized.StringCollectionContains#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.StringCollectionContains/VB/stringcollectioncontains.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Specialized.StringCollection.IndexOf(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (string[] array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(string[] array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.StringCollection.CopyTo(System.String[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As String(), index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;System::String ^&gt; ^ array, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.String[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">字串的一維陣列，是從 <see cref="T:System.Collections.Specialized.StringCollection" /> 複製的元素之目的端。 <see cref="T:System.Array" /> 必須有以零為起始的索引。</param>
        <param name="index">
          <c>array</c> 中以零起始的索引，複製作業從此處開始。</param>
        <summary>複製整個 <see cref="T:System.Collections.Specialized.StringCollection" /> 值至字串的一維陣列，由目標陣列的指定索引開始。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定的陣列必須是相容的類型。  
  
 將元素複製到<xref:System.Array>所在的相同順序的列舉值<xref:System.Collections.Specialized.StringCollection>逐一<xref:System.Collections.Specialized.StringCollection>。  
  
 這個方法是 O (`n`) 作業，其中`n`是<xref:System.Collections.Specialized.StringCollection.Count%2A>。  
  
   
  
## Examples  
 下列程式碼範例複製<xref:System.Collections.Specialized.StringCollection>到陣列。  
  
 [!code-cpp[System.Collections.Specialized.StringCollectionCopyTo#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.StringCollectionCopyTo/CPP/stringcollectioncopyto.cpp#1)]
 [!code-csharp[System.Collections.Specialized.StringCollectionCopyTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.StringCollectionCopyTo/CS/stringcollectioncopyto.cs#1)]
 [!code-vb[System.Collections.Specialized.StringCollectionCopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.StringCollectionCopyTo/VB/stringcollectioncopyto.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="array" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 小於零。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="array" /> 是多維的。  
  
 -或-  
  
 來源 <see cref="T:System.Collections.Specialized.StringCollection" /> 中的項目數大於 <paramref name="index" /> 到目的 <paramref name="array" /> 結尾的可用空間。</exception>
        <exception cref="T:System.InvalidCastException">來源 <see cref="T:System.Collections.Specialized.StringCollection" /> 的類型無法自動轉換成目的 <paramref name="array" /> 的類型。</exception>
        <altmember cref="T:System.Array" />
        <altmember cref="M:System.Collections.Specialized.StringCollection.GetEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Specialized.StringCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得在 <see cref="T:System.Collections.Specialized.StringCollection" /> 中所包含的字串數目。</summary>
        <value>在 <see cref="T:System.Collections.Specialized.StringCollection" /> 中所包含的字串數目。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 擷取這個屬性的值是一種 O(1) 運算。  
  
   
  
## Examples  
 下列程式碼範例複製<xref:System.Collections.Specialized.StringCollection>到陣列。  
  
 [!code-cpp[System.Collections.Specialized.StringCollectionCopyTo#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.StringCollectionCopyTo/CPP/stringcollectioncopyto.cpp#1)]
 [!code-csharp[System.Collections.Specialized.StringCollectionCopyTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.StringCollectionCopyTo/CS/stringcollectioncopyto.cs#1)]
 [!code-vb[System.Collections.Specialized.StringCollectionCopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.StringCollectionCopyTo/VB/stringcollectioncopyto.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.StringEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Specialized.StringEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.StringCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As StringEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Specialized::StringEnumerator ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.StringEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回逐一查看 <see cref="T:System.Collections.Specialized.StringEnumerator" /> 的 <see cref="T:System.Collections.Specialized.StringCollection" />。</summary>
        <returns>
          <see cref="T:System.Collections.Specialized.StringEnumerator" /> 的 <see cref="T:System.Collections.Specialized.StringCollection" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [Visual Basic、 C#]  
  
 C# 語言的 `foreach` 陳述式 (在 Visual Basic 中為 `for each`) 會隱藏列舉值的複雜度。  因此，建議您使用 `foreach`，而不要直接使用列舉值。  
  
 列舉程式可以用來讀取集合中的資料，但是無法用來修改基礎集合。  
  
 一開始，列舉程式位在集合中的第一個項目之前。 <xref:System.Collections.Specialized.StringEnumerator.Reset%2A> 也會將列舉值帶回至這個位置。  在這個位置上，<xref:System.Collections.Specialized.StringEnumerator.Current%2A> 並未定義。 因此，在讀取 <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> 的值之前，必須呼叫 <xref:System.Collections.Specialized.StringEnumerator.Current%2A> 以將列舉值前移至集合的第一個項目。  
  
 <xref:System.Collections.Specialized.StringEnumerator.Current%2A> 會傳回相同的物件直到呼叫 <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> 或 <xref:System.Collections.Specialized.StringEnumerator.Reset%2A>。 <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> 會將 <xref:System.Collections.Specialized.StringEnumerator.Current%2A> 設定為下一個項目。  
  
 如果<xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>超過集合的列舉值的結尾會位於集合中的最後一個元素之後和<xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>傳回`false`。 列舉值位於這個位置上，後續呼叫<xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>也會傳回`false`。 如果最後一個呼叫<xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>傳回`false`，<xref:System.Collections.Specialized.StringEnumerator.Current%2A>是未定義。 若要再次將 <xref:System.Collections.Specialized.StringEnumerator.Current%2A> 設定為集合的第一個元素，您可以在呼叫 <xref:System.Collections.Specialized.StringEnumerator.Reset%2A> 之後，接著呼叫 <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>。  
  
 只要集合維持不變，列舉程式就持續有效。 如果對集合進行變更，例如加入、修改或刪除項目，列舉程式會永久失效，且其行為未定義。  
  
 列舉值對集合並沒有獨佔存取，因此列舉集合在本質上並非安全執行緒的程序。  若要確保列舉期間的執行緒安全性，您可以在整個列舉期間鎖定集合。  若要讓多重執行緒能夠存取集合以便進行讀取和寫入，您必須實作自己的同步處理。  
  
 這個方法是一種 o （1） 運算。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Specialized.StringEnumerator" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.StringCollection.IndexOf(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">要尋找的字串。 這個值可以是 <see langword="null" />。</param>
        <summary>搜尋指定的字串，並傳回在 <see cref="T:System.Collections.Specialized.StringCollection" /> 中第一個符合項目之以零起始的索引。</summary>
        <returns>如果在 <see cref="T:System.Collections.Specialized.StringCollection" /> 中找到的話，則為 <paramref name="value" /> 的第一個符合項目之以零起始的索引，否則為 -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會判斷是否相等，藉由呼叫<xref:System.Object.Equals%2A?displayProperty=nameWithType>。 字串比較會區分大小寫。  
  
 這個方法會執行線性搜尋;因此，這個方法是 O (`n`) 作業，其中`n`是<xref:System.Collections.Specialized.StringCollection.Count%2A>。  
  
 從.NET Framework 2.0 開始，這個方法會使用集合的物件<xref:System.Object.Equals%2A>和<xref:System.IComparable.CompareTo%2A>方法`item`來判斷項目是否存在。 在舊版的.NET Framework 中，藉由進行這項判斷<xref:System.Object.Equals%2A>和<xref:System.IComparable.CompareTo%2A>方法`item`參數集合中的物件。  
  
   
  
## Examples  
 下列程式碼範例會搜尋<xref:System.Collections.Specialized.StringCollection>的項目。  
  
 [!code-cpp[System.Collections.Specialized.StringCollectionContains#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.StringCollectionContains/CPP/stringcollectioncontains.cpp#1)]
 [!code-csharp[System.Collections.Specialized.StringCollectionContains#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.StringCollectionContains/CS/stringcollectioncontains.cs#1)]
 [!code-vb[System.Collections.Specialized.StringCollectionContains#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.StringCollectionContains/VB/stringcollectioncontains.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Specialized.StringCollection.Contains(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (int index, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Insert(int32 index, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.StringCollection.Insert(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Insert (index As Integer, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Insert(int index, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="index">要在該處插入「值」<c></c>之以零為起始的索引。</param>
        <param name="value">要插入的字串。 這個值可以是 <see langword="null" />。</param>
        <summary>將字串插入至指定索引位置的 <see cref="T:System.Collections.Specialized.StringCollection" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 重複字串中允許<xref:System.Collections.Specialized.StringCollection>。  
  
 如果`index`等於<xref:System.Collections.Specialized.StringCollection.Count%2A>，`value`加入至結尾<xref:System.Collections.Specialized.StringCollection>。  
  
 在連續項目的集合 (例如清單) 中，後面接著插入點的項目會向下移動以容納新項目。 如果集合具有索引，則移動之項目的索引也會更新。 集合的項目若在概念上群組成 Bucket (例如雜湊資料表)，則不適用這項行為。  
  
 這個方法是 O (`n`) 作業，其中`n`是<xref:System.Collections.Specialized.StringCollection.Count%2A>。  
  
   
  
## Examples  
 下列程式碼範例會將新項目<xref:System.Collections.Specialized.StringCollection>。  
  
 [!code-cpp[System.Collections.Specialized.StringCollectionAdd#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.StringCollectionAdd/CPP/stringcollectionadd.cpp#1)]
 [!code-csharp[System.Collections.Specialized.StringCollectionAdd#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.StringCollectionAdd/CS/stringcollectionadd.cs#1)]
 [!code-vb[System.Collections.Specialized.StringCollectionAdd#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.StringCollectionAdd/VB/stringcollectionadd.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 小於零。  
  
 -或-  
  
 <paramref name="index" /> 大於 <see cref="P:System.Collections.Specialized.StringCollection.Count" />。</exception>
        <altmember cref="P:System.Collections.Specialized.StringCollection.Count" />
        <altmember cref="M:System.Collections.Specialized.StringCollection.Add(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Specialized.StringCollection.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出 <see cref="T:System.Collections.Specialized.StringCollection" /> 是否唯讀。</summary>
        <value>這個屬性永遠會傳回 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Specialized.StringCollection> 實作<xref:System.Collections.Specialized.StringCollection.IsReadOnly%2A>屬性因為的需要<xref:System.Collections.IList?displayProperty=nameWithType>介面。  
  
 唯讀的集合不允許在集合建立後增加、移除或修改項目。  
  
 是唯讀的集合是唯讀的集合只具有可防止修改集合的包裝函式因此，如果基礎集合進行變更，唯讀的集合會反映這些變更。  
  
 A<xref:System.Collections.Specialized.StringCollection>執行個體永遠是可寫入。  
  
 擷取這個屬性的值是一種 O(1) 運算。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Specialized.StringCollection.IsSynchronized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSynchronized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSynchronized { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，這個值表示對 <see cref="T:System.Collections.Specialized.StringCollection" /> 的存取是否同步 (安全執行緒)。</summary>
        <value>這個屬性永遠會傳回 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Specialized.StringCollection> 實作<xref:System.Collections.Specialized.StringCollection.IsSynchronized%2A>屬性因為的需要<xref:System.Collections.ICollection>介面。  
  
 透過集合進行列舉在本質上並不是執行緒安全的程序。 即使集合經過同步化，其他的執行緒仍可修改該集合，使列舉值擲回例外狀況。 若要保證列舉過程的執行緒安全，您可以在整個列舉過程中鎖定集合，或攔截由其他執行緒的變更所造成的例外狀況。  
  
 下列程式碼範例示範如何鎖定集合使用<xref:System.Collections.Specialized.StringCollection.SyncRoot%2A>在整個列舉過程：  
  
 [!code-cpp[System.Collections.Specialized.StringCollection2#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.StringCollection2/CPP/remarks.cpp#2)]
 [!code-csharp[System.Collections.Specialized.StringCollection2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.StringCollection2/CS/remarks.cs#2)]
 [!code-vb[System.Collections.Specialized.StringCollection2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.StringCollection2/VB/remarks.vb#2)]  
  
 擷取這個屬性的值是一種 O(1) 運算。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.Specialized.StringCollection.SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public string this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Specialized.StringCollection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(index As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ default[int] { System::String ^ get(int index); void set(int index, System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">要取得或設定的項目之以零起始的索引。</param>
        <summary>在指定的索引位置上取得或設定項目。</summary>
        <value>在指定索引上的項目。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性可以使用下列語法提供存取集合中特定元素的能力：`myCollection[index]`。  
  
 <xref:System.Collections.Specialized.StringCollection> 接受`null`有效的值，並允許重複的項目。  
  
 C# 語言使用關鍵字來定義索引，而不必實作<xref:System.Collections.Specialized.StringCollection.Item%2A>屬性。 Visual Basic 會將 <xref:System.Collections.Specialized.StringCollection.Item%2A> 實作為預設屬性，這樣會提供相同的索引功能。  
  
 擷取這個屬性的值是 o （1） 運算。設定屬性，也是一種 o （1） 運算。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 小於零。  
  
 -或-  
  
 <paramref name="index" /> 等於或大於 <see cref="P:System.Collections.Specialized.StringCollection.Count" />。</exception>
        <altmember cref="P:System.Collections.Specialized.StringCollection.Count" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.StringCollection.Remove(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">要從 <see cref="T:System.Collections.Specialized.StringCollection" /> 移除的字串。 這個值可以是 <see langword="null" />。</param>
        <summary>從 <see cref="T:System.Collections.Specialized.StringCollection" /> 移除特定字串的第一個符合項目。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 重複字串中允許<xref:System.Collections.Specialized.StringCollection>。 會移除第一次出現。 若要移除所有出現的指定字串，請使用`RemoveAt(IndexOf(value))`重複時<xref:System.Collections.Specialized.StringCollection.IndexOf%2A>不會傳回-1。  
  
 如果<xref:System.Collections.Specialized.StringCollection>不包含指定的物件，<xref:System.Collections.Specialized.StringCollection>維持不變。 不會有例外狀況擲回。  
  
 在相鄰元素的集合中，例如清單，接在移除的元素之後的元素會向上移動以佔用空出的位置。 如果集合具有索引，則移動之項目的索引也會更新。 集合的項目若在概念上群組成 Bucket (例如雜湊資料表)，則不適用這項行為。  
  
 這個方法會判斷是否相等，藉由呼叫<xref:System.Object.Equals%2A?displayProperty=nameWithType>。 字串比較會區分大小寫。  
  
 這個方法會執行線性搜尋;因此，這個方法是 O (`n`) 作業，其中`n`是<xref:System.Collections.Specialized.StringCollection.Count%2A>。  
  
   
  
## Examples  
 下列程式碼範例會移除項目從<xref:System.Collections.Specialized.StringCollection>。  
  
 [!code-cpp[System.Collections.Specialized.StringCollectionRemove#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.StringCollectionRemove/CPP/stringcollectionremove.cpp#1)]
 [!code-csharp[System.Collections.Specialized.StringCollectionRemove#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.StringCollectionRemove/CS/stringcollectionremove.cs#1)]
 [!code-vb[System.Collections.Specialized.StringCollectionRemove#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.StringCollectionRemove/VB/stringcollectionremove.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.StringCollection.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveAt(int index);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">要移除的字串之以零起始的索引。</param>
        <summary>移除 <see cref="T:System.Collections.Specialized.StringCollection" /> 的指定索引處的字串。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在相鄰元素的集合中，例如清單，接在移除的元素之後的元素會向上移動以佔用空出的位置。 如果集合具有索引，則移動之項目的索引也會更新。 集合的項目若在概念上群組成 Bucket (例如雜湊資料表)，則不適用這項行為。  
  
 這個方法是 O (`n`) 作業，其中`n`是<xref:System.Collections.Specialized.StringCollection.Count%2A>。  
  
   
  
## Examples  
 下列程式碼範例會移除項目從<xref:System.Collections.Specialized.StringCollection>。  
  
 [!code-cpp[System.Collections.Specialized.StringCollectionRemove#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.StringCollectionRemove/CPP/stringcollectionremove.cpp#1)]
 [!code-csharp[System.Collections.Specialized.StringCollectionRemove#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.StringCollectionRemove/CS/stringcollectionremove.cs#1)]
 [!code-vb[System.Collections.Specialized.StringCollectionRemove#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.StringCollectionRemove/VB/stringcollectionremove.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 小於零。  
  
 -或-  
  
 <paramref name="index" /> 等於或大於 <see cref="P:System.Collections.Specialized.StringCollection.Count" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Specialized.StringCollection.SyncRoot" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SyncRoot As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SyncRoot { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得可用以同步存取 <see cref="T:System.Collections.Specialized.StringCollection" /> 的物件。</summary>
        <value>可用以同步存取 <see cref="T:System.Collections.Specialized.StringCollection" /> 的物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在衍生的類別可以提供自己的同步處理的版本<xref:System.Collections.Specialized.StringCollection>使用<xref:System.Collections.Specialized.StringCollection.SyncRoot%2A>屬性。 同步處理的程式碼必須在上執行作業<xref:System.Collections.Specialized.StringCollection.SyncRoot%2A>的<xref:System.Collections.Specialized.StringCollection>、 直接依據<xref:System.Collections.Specialized.StringCollection>。 如此可確保衍生自其他物件的集合可以正常運作， 具體而言，保持正常的同步處理與其他可能同時修改的執行緒<xref:System.Collections.Specialized.StringCollection>物件。  
  
 透過集合進行列舉在本質上並不是執行緒安全的程序。 即使集合經過同步化，其他的執行緒仍可修改該集合，使列舉值擲回例外狀況。 若要保證列舉過程的執行緒安全，您可以在整個列舉過程中鎖定集合，或攔截由其他執行緒的變更所造成的例外狀況。  
  
 下列程式碼範例示範如何鎖定集合使用<xref:System.Collections.Specialized.StringCollection.SyncRoot%2A>在整個列舉過程：  
  
 [!code-cpp[System.Collections.Specialized.StringCollection2#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.StringCollection2/CPP/remarks.cpp#2)]
 [!code-csharp[System.Collections.Specialized.StringCollection2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.StringCollection2/CS/remarks.cs#2)]
 [!code-vb[System.Collections.Specialized.StringCollection2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.StringCollection2/VB/remarks.vb#2)]  
  
 擷取這個屬性的值是一種 O(1) 運算。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.Specialized.StringCollection.IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.StringCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int index) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.Specialized.StringCollection" /> 複製過來之項目的目的端。 <see cref="T:System.Array" /> 必須有以零為起始的索引。</param>
        <param name="index">
          <c>array</c> 中以零起始的索引，複製作業從此處開始。</param>
        <summary>從目標陣列的指定索引開始，將整個 <see cref="T:System.Collections.Specialized.StringCollection" /> 複製到相容的一維 <see cref="T:System.Array" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定的陣列必須是相容的類型。  
  
 這個方法會使用<xref:System.Array.Copy%2A?displayProperty=nameWithType>複製項目。  
  
 這個方法是 O (`n`) 作業，其中`n`是<xref:System.Collections.Specialized.StringCollection.Count%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="array" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 小於零。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="array" /> 是多維的。  
  
 -或-  
  
 來源 <see cref="T:System.Collections.Specialized.StringCollection" /> 中的項目數大於 <paramref name="index" /> 到目的 <paramref name="array" /> 結尾的可用空間。</exception>
        <exception cref="T:System.InvalidCastException">來源 <see cref="T:System.Collections.Specialized.StringCollection" /> 的類型無法自動轉換成目的 <paramref name="array" /> 的類型。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.StringCollection.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回逐一查看 <see cref="T:System.Collections.IEnumerator" /> 的 <see cref="T:System.Collections.Specialized.StringCollection" />。</summary>
        <returns>
          <see cref="T:System.Collections.IEnumerator" /> 的 <see cref="T:System.Collections.Specialized.StringCollection" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [Visual Basic、 C#]  
  
 C# 語言的 `foreach` 陳述式 (在 Visual Basic 中為 `for each`) 會隱藏列舉值的複雜度。  因此，建議您使用 `foreach`，而不要直接使用列舉值。  
  
 列舉程式可以用來讀取集合中的資料，但是無法用來修改基礎集合。  
  
 一開始，列舉程式位在集合中的第一個項目之前。 <xref:System.Collections.IEnumerator.Reset%2A> 也會將列舉值帶回至這個位置。 在這個位置上，呼叫<xref:System.Collections.IEnumerator.Current%2A>擲回例外狀況。 因此，在讀取 <xref:System.Collections.IEnumerator.MoveNext%2A> 的值之前，必須呼叫 <xref:System.Collections.IEnumerator.Current%2A> 以將列舉值前移至集合的第一個項目。  
  
 <xref:System.Collections.IEnumerator.Current%2A> 會傳回相同的物件直到呼叫 <xref:System.Collections.IEnumerator.MoveNext%2A> 或 <xref:System.Collections.IEnumerator.Reset%2A>。 <xref:System.Collections.IEnumerator.MoveNext%2A> 會將 <xref:System.Collections.IEnumerator.Current%2A> 設定為下一個項目。  
  
 如果<xref:System.Collections.IEnumerator.MoveNext%2A>超過集合的列舉值的結尾會位於集合中的最後一個元素之後和<xref:System.Collections.IEnumerator.MoveNext%2A>傳回`false`。 列舉值位於這個位置上，後續呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>也會傳回`false`。 如果最後一個呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>傳回`false`，則呼叫<xref:System.Collections.IEnumerator.Current%2A>擲回例外狀況。 若要再次將 <xref:System.Collections.IEnumerator.Current%2A> 設定為集合的第一個元素，您可以在呼叫 <xref:System.Collections.IEnumerator.Reset%2A> 之後，接著呼叫 <xref:System.Collections.IEnumerator.MoveNext%2A>。  
  
 只要集合維持不變，列舉程式就持續有效。 如果變更集合，例如加入、 修改或刪除項目，列舉程式會永久失效，而且下次呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>或<xref:System.Collections.IEnumerator.Reset%2A>會擲回<xref:System.InvalidOperationException>。 如果之間修改集合<xref:System.Collections.IEnumerator.MoveNext%2A>和<xref:System.Collections.IEnumerator.Current%2A>，<xref:System.Collections.IEnumerator.Current%2A>傳回項目所設定，即使列舉值已經無效。  
  
 列舉值對集合並沒有獨佔存取，因此列舉集合在本質上並非安全執行緒的程序。 即使集合經過同步化，其他的執行緒仍可修改該集合，使列舉值擲回例外狀況。 若要保證列舉過程的執行緒安全，您可以在整個列舉過程中鎖定集合，或攔截由其他執行緒的變更所造成的例外狀況。  
  
 這個方法是一種 o （1） 運算。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Specialized.StringEnumerator" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.StringCollection.System#Collections#IList#Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Add (value As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.Add(System::Object ^ value) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">要新增至 <see cref="T:System.Object" /> 尾端的 <see cref="T:System.Collections.Specialized.StringCollection" />。 這個值可以是 <see langword="null" />。</param>
        <summary>將物件加入至 <see cref="T:System.Collections.Specialized.StringCollection" /> 的末端。</summary>
        <returns>已加入 <paramref name="value" /> 的 <see cref="T:System.Collections.Specialized.StringCollection" /> 索引。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Specialized.StringCollection> 接受`null`有效的值，並允許重複的項目。  
  
 如果<xref:System.Collections.Specialized.StringCollection.Count%2A>已等於容量，容量<xref:System.Collections.Specialized.StringCollection>增加的自動重新配置內部的陣列，並加入新項目之前現有的項目複製到新陣列。  
  
 如果<xref:System.Collections.Specialized.StringCollection.Count%2A>小於比容量，這個方法是一種 o （1） 運算。 如果需要增加，以容納新項目容量，這個方法會變成 O (`n`) 作業，其中`n`是<xref:System.Collections.Specialized.StringCollection.Count%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <see cref="T:System.Collections.Specialized.StringCollection" /> 是唯讀的。  
  
 -或-  
  
 <see cref="T:System.Collections.Specialized.StringCollection" /> 具有固定的大小。</exception>
        <altmember cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />
        <altmember cref="M:System.Collections.IList.Remove(System.Object)" />
        <altmember cref="P:System.Collections.Specialized.StringCollection.Count" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.StringCollection.System#Collections#IList#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (value As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IList.Contains(System::Object ^ value) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">要在 <see cref="T:System.Collections.Specialized.StringCollection" /> 中尋找的 <see cref="T:System.Object" />。 這個值可以是 <see langword="null" />。</param>
        <summary>判斷某項目是否在 <see cref="T:System.Collections.Specialized.StringCollection" /> 中。</summary>
        <returns>
          如果在 <see langword="true" /> 中找到 <paramref name="value" />，則為 <see cref="T:System.Collections.Specialized.StringCollection" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會判斷是否相等，藉由呼叫<xref:System.Object.Equals%2A?displayProperty=nameWithType>。  
  
 這個方法會執行線性搜尋;因此，這個方法是 O (`n`) 作業，其中`n`是<xref:System.Collections.Specialized.StringCollection.Count%2A>。  
  
 從.NET Framework 2.0 開始，這個方法會使用集合的物件<xref:System.Object.Equals%2A>和<xref:System.IComparable.CompareTo%2A>方法`item`來判斷項目是否存在。 在舊版的.NET Framework 中，藉由進行這項判斷<xref:System.Object.Equals%2A>和<xref:System.IComparable.CompareTo%2A>方法`item`參數集合中的物件。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.IList.IndexOf(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.StringCollection.System#Collections#IList#IndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (value As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.IndexOf(System::Object ^ value) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.IndexOf(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">要在 <see cref="T:System.Collections.Specialized.StringCollection" /> 中尋找的 <see cref="T:System.Object" />。 這個值可以是 <see langword="null" />。</param>
        <summary>搜尋指定的 <see cref="T:System.Object" />，並傳回在整個 <see cref="T:System.Collections.Specialized.StringCollection" /> 中第一個符合元素之以零起始的索引。</summary>
        <returns>整個 <paramref name="value" /> 中第一個出現 <see cref="T:System.Collections.Specialized.StringCollection" /> 之以零為起始的索引 (如有找到)，否則為 -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Specialized.StringCollection>搜尋向前第一個項目開始和結束時間的最後一個元素。  
  
 這個方法會判斷是否相等，藉由呼叫<xref:System.Object.Equals%2A?displayProperty=nameWithType>。  
  
 這個方法會執行線性搜尋;因此，這個方法是 O (`n`) 作業，其中`n`是<xref:System.Collections.Specialized.StringCollection.Count%2A>。  
  
 從.NET Framework 2.0 開始，這個方法會使用集合的物件<xref:System.Object.Equals%2A>和<xref:System.IComparable.CompareTo%2A>方法`item`來判斷項目是否存在。 在舊版的.NET Framework 中，藉由進行這項判斷<xref:System.Object.Equals%2A>和<xref:System.IComparable.CompareTo%2A>方法`item`參數集合中的物件。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.IList.Contains(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.StringCollection.System#Collections#IList#Insert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, value As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Insert(int index, System::Object ^ value) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Insert(System.Int32,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">應該插入 <c>value</c> 之以零啟始的索引。</param>
        <param name="value">要插入的 <see cref="T:System.Object" />。 這個值可以是 <see langword="null" />。</param>
        <summary>將項目插入至 <see cref="T:System.Collections.Specialized.StringCollection" /> 中指定的索引位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Collections.Specialized.StringCollection.Count%2A>已等於容量，容量<xref:System.Collections.Specialized.StringCollection>增加的自動重新配置內部的陣列，並加入新項目之前現有的項目複製到新陣列。  
  
 如果`index`等於<xref:System.Collections.Specialized.StringCollection.Count%2A>，`value`加入至結尾<xref:System.Collections.Specialized.StringCollection>。  
  
 在連續項目的集合 (例如清單) 中，後面接著插入點的項目會向下移動以容納新項目。 如果集合具有索引，則移動之項目的索引也會更新。 集合的項目若在概念上群組成 Bucket (例如雜湊資料表)，則不適用這項行為。  
  
 這個方法是 O (`n`) 作業，其中`n`是<xref:System.Collections.Specialized.StringCollection.Count%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 小於零。  
  
 -或-  
  
 <paramref name="index" /> 大於 <see cref="P:System.Collections.Specialized.StringCollection.Count" />。</exception>
        <exception cref="T:System.NotSupportedException">
          <see cref="T:System.Collections.Specialized.StringCollection" /> 是唯讀的。  
  
 -或-  
  
 <see cref="T:System.Collections.Specialized.StringCollection" /> 具有固定的大小。</exception>
        <altmember cref="M:System.Collections.IList.Add(System.Object)" />
        <altmember cref="M:System.Collections.IList.Remove(System.Object)" />
        <altmember cref="P:System.Collections.Specialized.StringCollection.Count" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Specialized.StringCollection.System#Collections#IList#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.IList.IsFixedSize { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出 <see cref="T:System.Collections.Specialized.StringCollection" /> 物件是否具有固定的大小。</summary>
        <value>
          如果 <see cref="T:System.Collections.Specialized.StringCollection" /> 物件有固定大小，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 具有固定大小的集合不允許集合建立後，但允許修改現有的項目後新增或移除項目。  
  
 具有固定大小的集合是唯讀的集合只以防止新增或移除項目; 包裝函式因此，如果變更基礎的集合，包括新增或移除項目，固定大小的集合會反映這些變更。  
  
 擷取這個屬性的值是一種 O(1) 運算。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Specialized.StringCollection.System#Collections#IList#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements IList.IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.IList.IsReadOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，這個值表示 <see cref="T:System.Collections.Specialized.StringCollection" /> 物件是否唯讀。</summary>
        <value>
          如果 <see cref="T:System.Collections.Specialized.StringCollection" /> 物件是唯讀，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 唯讀的集合不允許在集合建立後增加、移除或修改項目。  
  
 是唯讀的集合是唯讀的集合只具有可防止修改集合的包裝函式因此，如果基礎集合進行變更，唯讀的集合會反映這些變更。  
  
 擷取這個屬性的值是一種 O(1) 運算。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Specialized.StringCollection.System#Collections#IList#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Object Implements IList.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IList.Item[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">要取得或設定之以零為起始的項目索引。</param>
        <summary>在指定的索引位置上取得或設定項目。</summary>
        <value>在指定索引上的項目。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Thismethod 提供可以使用下列語法存取集合中的特定元素的能力： `myCollection[index]`。  
  
 C# 語言使用[這](~/docs/csharp/language-reference/keywords/this.md)關鍵字定義索引，而不必實作<xref:System.Collections.Specialized.StringCollection.System%23Collections%23IList%23Item%2A>屬性。 Visual Basic 會將 <xref:System.Collections.Specialized.StringCollection.System%23Collections%23IList%23Item%2A> 實作為預設屬性，這樣會提供相同的索引功能。  
  
 <xref:System.Collections.Specialized.StringCollection> 接受`null`有效的值，並允許重複的項目。  
  
 擷取這個屬性的值是 o （1） 運算。設定屬性，也是一種 o （1） 運算。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 小於零。  
  
 -或-  
  
 <paramref name="index" /> 等於或大於 <see cref="P:System.Collections.Specialized.StringCollection.Count" />。</exception>
        <altmember cref="P:System.Collections.Specialized.StringCollection.Count" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.StringCollection.System#Collections#IList#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (value As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Remove(System::Object ^ value) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">要從 <see cref="T:System.Object" /> 移除的 <see cref="T:System.Collections.Specialized.StringCollection" />。 這個值可以是 <see langword="null" />。</param>
        <summary>從 <see cref="T:System.Collections.Specialized.StringCollection" /> 移除特定物件之第一個符合的元素。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Collections.Specialized.StringCollection>不包含指定的物件，<xref:System.Collections.Specialized.StringCollection>維持不變。 不會有例外狀況擲回。  
  
 在相鄰元素的集合中，例如清單，接在移除的元素之後的元素會向上移動以佔用空出的位置。 如果集合具有索引，則移動之項目的索引也會更新。 集合的項目若在概念上群組成 Bucket (例如雜湊資料表)，則不適用這項行為。  
  
 這個方法會判斷是否相等，藉由呼叫<xref:System.Object.Equals%2A?displayProperty=nameWithType>。  
  
 這個方法會執行線性搜尋;因此，這個方法是 O (`n`) 作業，其中`n`是<xref:System.Collections.Specialized.StringCollection.Count%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <see cref="T:System.Collections.Specialized.StringCollection" /> 是唯讀的。  
  
 -或-  
  
 <see cref="T:System.Collections.Specialized.StringCollection" /> 具有固定的大小。</exception>
        <altmember cref="M:System.Collections.IList.Add(System.Object)" />
        <altmember cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />
        <altmember cref="P:System.Collections.Specialized.StringCollection.Count" />
      </Docs>
    </Member>
  </Members>
</Type>