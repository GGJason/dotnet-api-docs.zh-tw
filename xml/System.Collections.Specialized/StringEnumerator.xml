<Type Name="StringEnumerator" FullName="System.Collections.Specialized.StringEnumerator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c041a8b7314667b2cd66b4388f0771909ef8bb23" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37700209" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class StringEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit StringEnumerator extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Specialized.StringEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public Class StringEnumerator" />
  <TypeSignature Language="C++ CLI" Value="public ref class StringEnumerator" />
  <TypeSignature Language="F#" Value="type StringEnumerator = class" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.Specialized</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>支援在 <see cref="T:System.Collections.Specialized.StringCollection" /> 上的簡易反覆運算。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 C# 語言的 `foreach` 陳述式 (在 Visual Basic 中為 `for each`) 會隱藏列舉值的複雜度。  因此，建議您使用 `foreach`，而不要直接使用列舉值。  
  
 列舉程式可以用來讀取集合中的資料，但是無法用來修改基礎集合。  
  
 一開始，列舉程式位在集合中的第一個項目之前。 <xref:System.Collections.Specialized.StringEnumerator.Reset%2A> 也會將列舉值帶回至這個位置。 在這個位置上，呼叫<xref:System.Collections.Specialized.StringEnumerator.Current%2A>會擲回例外狀況。 因此，在讀取 <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> 的值之前，必須呼叫 <xref:System.Collections.Specialized.StringEnumerator.Current%2A> 以將列舉值前移至集合的第一個項目。  
  
 <xref:System.Collections.Specialized.StringEnumerator.Current%2A> 會傳回相同的物件直到呼叫 <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> 或 <xref:System.Collections.Specialized.StringEnumerator.Reset%2A>。 <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> 會將 <xref:System.Collections.Specialized.StringEnumerator.Current%2A> 設定為下一個項目。  
  
 如果<xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>集合，也就是列舉值的結尾是否位於集合中的最後一個元素之後的階段和<xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>傳回`false`。 列舉值位於此位置，後續呼叫<xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>也會傳回`false`。 如果上次呼叫<xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>傳回`false`，則呼叫<xref:System.Collections.Specialized.StringEnumerator.Current%2A>會擲回例外狀況。 若要再次將 <xref:System.Collections.Specialized.StringEnumerator.Current%2A> 設定為集合的第一個元素，您可以在呼叫 <xref:System.Collections.Specialized.StringEnumerator.Reset%2A> 之後，接著呼叫 <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>。  
  
 只要集合維持不變，列舉程式就持續有效。 如果變更集合，例如加入、 修改或刪除元素，列舉值會將永久失效，而且下次呼叫<xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>或是<xref:System.Collections.Specialized.StringEnumerator.Reset%2A>就會擲回<xref:System.InvalidOperationException>。 如果集合已修改之間<xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>並<xref:System.Collections.Specialized.StringEnumerator.Current%2A>，<xref:System.Collections.Specialized.StringEnumerator.Current%2A>傳回設定為，項目，即使已經無效列舉值。  
  
 列舉程式沒有集合的獨佔存取權，因此，列舉集合內容本質上並不是安全的執行緒程序。 即使集合經過同步化，其他的執行緒仍可修改該集合，使列舉值擲回例外狀況。 若要保證列舉過程的執行緒安全，您可以在整個列舉過程中鎖定集合，或攔截由其他執行緒的變更所造成的例外狀況。  
  
   
  
## Examples  
 下列程式碼範例示範數個屬性和方法<xref:System.Collections.Specialized.StringEnumerator>。  
  
 [!code-cpp[System.Collections.Specialized.StringEnumerator2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.StringEnumerator2/CPP/stringenumerator.cpp#1)]
 [!code-csharp[System.Collections.Specialized.StringEnumerator2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.StringEnumerator2/CS/stringenumerator.cs#1)]
 [!code-vb[System.Collections.Specialized.StringEnumerator2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.StringEnumerator2/VB/stringenumerator.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>公用靜態 (<see langword="Shared" /> Visual Basic 中) 的這種類型的成員都是安全執行緒。 不保證任何執行個體成員是安全執行緒。  透過集合進行列舉在本質上並非安全執行緒程序。 即使集合經過同步化，其他的執行緒仍可修改該集合，使列舉值擲回例外狀況。 若要保證列舉過程的執行緒安全，您可以在整個列舉過程中鎖定集合，或攔截由其他執行緒的變更所造成的例外狀況。</threadsafe>
    <altmember cref="T:System.Collections.IEnumerable" />
    <altmember cref="T:System.Collections.IEnumerator" />
    <altmember cref="T:System.Collections.Specialized.StringCollection" />
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public string Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Current" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Specialized.StringEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Current { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : string" Usage="System.Collections.Specialized.StringEnumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得集合中目前的項目。</summary>
        <value>集合中目前的項目。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 建立列舉值之後或在後<xref:System.Collections.Specialized.StringEnumerator.Reset%2A>呼叫時，<xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>列舉值前進到第一個元素的集合，再讀取的值時必須呼叫<xref:System.Collections.Specialized.StringEnumerator.Current%2A>; 否則<xref:System.Collections.Specialized.StringEnumerator.Current%2A>是未定義。  
  
 <xref:System.Collections.Specialized.StringEnumerator.Current%2A> 如果上次呼叫也會發生例外狀況<xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>傳回`false`，表示集合的結尾。  
  
 <xref:System.Collections.Specialized.StringEnumerator.Current%2A> 不會移動的列舉值，以及連續呼叫位置<xref:System.Collections.Specialized.StringEnumerator.Current%2A>傳回相同的物件，直到<xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>或<xref:System.Collections.Specialized.StringEnumerator.Reset%2A>呼叫。  
  
 只要集合維持不變，列舉程式就持續有效。 如果變更集合，例如加入、 修改或刪除元素，列舉值會將永久失效，而且下次呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>或是<xref:System.Collections.IEnumerator.Reset%2A>就會擲回<xref:System.InvalidOperationException>。 如果集合已修改之間<xref:System.Collections.IEnumerator.MoveNext%2A>並<xref:System.Collections.IEnumerator.Current%2A>，<xref:System.Collections.IEnumerator.Current%2A>傳回設定為，項目，即使已經無效列舉值。  
  
   
  
## Examples  
 下列程式碼範例示範數個屬性和方法<xref:System.Collections.Specialized.StringEnumerator>。  
  
 [!code-cpp[System.Collections.Specialized.StringEnumerator2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.StringEnumerator2/CPP/stringenumerator.cpp#1)]
 [!code-csharp[System.Collections.Specialized.StringEnumerator2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.StringEnumerator2/CS/stringenumerator.cs#1)]
 [!code-vb[System.Collections.Specialized.StringEnumerator2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.StringEnumerator2/VB/stringenumerator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">列舉值位於集合的第一個項目之前，或最後一個項目之後。</exception>
        <altmember cref="M:System.Collections.Specialized.StringEnumerator.MoveNext" />
        <altmember cref="M:System.Collections.Specialized.StringEnumerator.Reset" />
        <altmember cref="P:System.Collections.IEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.StringEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext();" />
      <MemberSignature Language="F#" Value="member this.MoveNext : unit -&gt; bool" Usage="stringEnumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將列舉值往前推至下集合中的下一個項目。</summary>
        <returns>如果列舉值成功地前移至下一個項目，則為 <see langword="true" />，如果列舉值已超過集合的結尾，則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 建立列舉值之後或在後<xref:System.Collections.Specialized.StringEnumerator.Reset%2A>是呼叫，列舉值位於集合中，以及第一次呼叫的第一個項目之前<xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>集合的第一個項目上方移動，列舉值。  
  
 如果<xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>集合，也就是列舉值的結尾是否位於集合中的最後一個元素之後的階段和<xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>傳回`false`。 列舉值位於此位置，後續呼叫<xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>也會傳回`false`直到<xref:System.Collections.Specialized.StringEnumerator.Reset%2A>呼叫。  
  
 只要集合維持不變，列舉程式就持續有效。 如果變更集合，例如加入、 修改或刪除元素，列舉值會將永久失效，而且下次呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>或是<xref:System.Collections.IEnumerator.Reset%2A>就會擲回<xref:System.InvalidOperationException>。 如果集合已修改之間<xref:System.Collections.IEnumerator.MoveNext%2A>並<xref:System.Collections.IEnumerator.Current%2A>，<xref:System.Collections.IEnumerator.Current%2A>傳回設定為，項目，即使已經無效列舉值。  
  
   
  
## Examples  
 下列程式碼範例示範數個屬性和方法<xref:System.Collections.Specialized.StringEnumerator>。  
  
 [!code-cpp[System.Collections.Specialized.StringEnumerator2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.StringEnumerator2/CPP/stringenumerator.cpp#1)]
 [!code-csharp[System.Collections.Specialized.StringEnumerator2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.StringEnumerator2/CS/stringenumerator.cs#1)]
 [!code-vb[System.Collections.Specialized.StringEnumerator2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.StringEnumerator2/VB/stringenumerator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在建立列舉值之後，會修改集合。</exception>
        <altmember cref="P:System.Collections.Specialized.StringEnumerator.Current" />
        <altmember cref="M:System.Collections.Specialized.StringEnumerator.Reset" />
        <altmember cref="M:System.Collections.IEnumerator.MoveNext" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.StringEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="stringEnumerator.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>設定列舉值至它的初始位置，這是在集合中第一個元素之前。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Specialized.StringEnumerator.Reset%2A> 將列舉值移至集合中，第一個元素之前的開頭。 在後<xref:System.Collections.Specialized.StringEnumerator.Reset%2A>，<xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>列舉值前進到第一個元素的集合，再讀取的值時必須呼叫<xref:System.Collections.Specialized.StringEnumerator.Current%2A>。  
  
   
  
## Examples  
 下列程式碼範例示範數個屬性和方法<xref:System.Collections.Specialized.StringEnumerator>。  
  
 [!code-cpp[System.Collections.Specialized.StringEnumerator2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.StringEnumerator2/CPP/stringenumerator.cpp#1)]
 [!code-csharp[System.Collections.Specialized.StringEnumerator2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.StringEnumerator2/CS/stringenumerator.cs#1)]
 [!code-vb[System.Collections.Specialized.StringEnumerator2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.StringEnumerator2/VB/stringenumerator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在建立列舉值之後，會修改集合。</exception>
        <altmember cref="M:System.Collections.Specialized.StringEnumerator.MoveNext" />
        <altmember cref="P:System.Collections.Specialized.StringEnumerator.Current" />
        <altmember cref="M:System.Collections.IEnumerator.Reset" />
      </Docs>
    </Member>
  </Members>
</Type>