<Type Name="AsyncResult" FullName="System.Runtime.Remoting.Messaging.AsyncResult">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d8dcfaa989a8bc907f295feb15394366e5aa96ac" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class AsyncResult : IAsyncResult, System.Runtime.Remoting.Messaging.IMessageSink" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi beforefieldinit AsyncResult extends System.Object implements class System.IAsyncResult, class System.Runtime.Remoting.Messaging.IMessageSink" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Remoting.Messaging.AsyncResult" />
  <TypeSignature Language="VB.NET" Value="Public Class AsyncResult&#xA;Implements IAsyncResult, IMessageSink" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncResult : IAsyncResult, System::Runtime::Remoting::Messaging::IMessageSink" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IAsyncResult</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Remoting.Messaging.IMessageSink</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="24eeb-101">封裝委派上非同步作業的結果。</span>
      <span class="sxs-lookup">
        <span data-stu-id="24eeb-101">Encapsulates the results of an asynchronous operation on a delegate.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24eeb-102"><xref:System.Runtime.Remoting.Messaging.AsyncResult>類別會搭配搭配使用委派的非同步方法呼叫。</span><span class="sxs-lookup"><span data-stu-id="24eeb-102">The <xref:System.Runtime.Remoting.Messaging.AsyncResult> class is used in conjunction with asynchronous method calls made using delegates.</span></span> <span data-ttu-id="24eeb-103"><xref:System.IAsyncResult>從委派的傳回`BeginInvoke`方法可以轉換成<xref:System.Runtime.Remoting.Messaging.AsyncResult>。</span><span class="sxs-lookup"><span data-stu-id="24eeb-103">The <xref:System.IAsyncResult> returned from the delegate's `BeginInvoke` method can be cast to an <xref:System.Runtime.Remoting.Messaging.AsyncResult>.</span></span> <span data-ttu-id="24eeb-104"><xref:System.Runtime.Remoting.Messaging.AsyncResult>具有<xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A>屬性可保存委派物件上叫用非同步呼叫。</span><span class="sxs-lookup"><span data-stu-id="24eeb-104">The <xref:System.Runtime.Remoting.Messaging.AsyncResult> has the <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A> property that holds the delegate object on which the asynchronous call was invoked.</span></span>  
  
 <span data-ttu-id="24eeb-105">如需有關`BeginInvoke`和非同步呼叫使用委派，請參閱[非同步程式設計使用委派](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-using-delegates.md)。</span><span class="sxs-lookup"><span data-stu-id="24eeb-105">For more information about `BeginInvoke` and asynchronous calls using delegates, see [Asynchronous Programming Using Delegates](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-using-delegates.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="24eeb-106">下列範例示範如何使用<xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A>屬性來取得<xref:System.Threading.WaitHandle>，以及如何等候非同步呼叫的委派。</span><span class="sxs-lookup"><span data-stu-id="24eeb-106">The following example demonstrates how to use the <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A> property to get a <xref:System.Threading.WaitHandle>, and how to wait for an asynchronous call on a delegate.</span></span> <span data-ttu-id="24eeb-107">非同步呼叫完成時， <xref:System.Threading.WaitHandle> 會收到信號，且您可以呼叫 <xref:System.Threading.WaitHandle.WaitOne%2A> 方法來等候它。</span><span class="sxs-lookup"><span data-stu-id="24eeb-107">The <xref:System.Threading.WaitHandle> is signaled when the asynchronous call completes, and you can wait for it by calling the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span>  
  
 <span data-ttu-id="24eeb-108">此範例包含兩個類別，包含方法，這個方法會以非同步方式呼叫的類別和類別，其中包含`Main`進行呼叫的方法。</span><span class="sxs-lookup"><span data-stu-id="24eeb-108">The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the `Main` method that makes the call.</span></span>  
  
 <span data-ttu-id="24eeb-109">如需詳細資訊和使用委派來以非同步方式呼叫方法的更多範例，請參閱[呼叫同步方法以非同步方式](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)。</span><span class="sxs-lookup"><span data-stu-id="24eeb-109">For more information and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#3](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/waithandle.cpp#3)]
[!code-csharp[AsyncDelegateExamples#3](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/waithandle.cs#3)]
[!code-vb[AsyncDelegateExamples#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/WaitHandle.vb#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AsyncDelegate">
      <MemberSignature Language="C#" Value="public virtual object AsyncDelegate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object AsyncDelegate" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property AsyncDelegate As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ AsyncDelegate { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="24eeb-110">取得叫用非同步呼叫時所在的委派物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="24eeb-110">Gets the delegate object on which the asynchronous call was invoked.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="24eeb-111">叫用非同步呼叫時所在的委派物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="24eeb-111">The delegate object on which the asynchronous call was invoked.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24eeb-112"><xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A>屬性都可以轉換成實際的使用者定義委派類別。</span><span class="sxs-lookup"><span data-stu-id="24eeb-112">The <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A> property can be cast to the actual class of the user-defined delegate.</span></span>  
  
 <span data-ttu-id="24eeb-113">例如，如果用來進行非同步呼叫的委派型別的`MyDelegate`，這個屬性所傳回的委派必須轉換成`MyDelegate`。</span><span class="sxs-lookup"><span data-stu-id="24eeb-113">For example, if the delegate that was used to make the asynchronous call is of type `MyDelegate`, the delegate that is returned by this property must be cast to `MyDelegate`.</span></span> <span data-ttu-id="24eeb-114">回呼方法接著便可以呼叫的委派`EndInvoke`具有正確的簽章，以取得結果的非同步方法呼叫的方法。</span><span class="sxs-lookup"><span data-stu-id="24eeb-114">The callback method can then call the delegate's `EndInvoke` method with the correct signature, in order to obtain the results of the asynchronous method call.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="24eeb-115">下列程式碼範例示範如何使用<xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A>屬性來取得委派，用來進行非同步呼叫中，若要呼叫`EndInvoke`。</span><span class="sxs-lookup"><span data-stu-id="24eeb-115">The following code example demonstrates how to use the <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A> property to get the delegate that was used to make the asynchronous call, in order to call `EndInvoke`.</span></span> <span data-ttu-id="24eeb-116">中的範例轉換<xref:System.IAsyncResult>，這是唯一的回呼方法中，參數為<xref:System.Runtime.Remoting.Messaging.AsyncResult>物件。</span><span class="sxs-lookup"><span data-stu-id="24eeb-116">The example casts the <xref:System.IAsyncResult>, which is the only parameter of the callback method, to an <xref:System.Runtime.Remoting.Messaging.AsyncResult> object.</span></span>  
  
 <span data-ttu-id="24eeb-117">此範例包含兩個類別，包含方法，這個方法會以非同步方式呼叫的類別和類別，其中包含`Main`進行呼叫的方法。</span><span class="sxs-lookup"><span data-stu-id="24eeb-117">The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the `Main` method that makes the call.</span></span>  
  
 <span data-ttu-id="24eeb-118">如需詳細資訊的方式這個回呼範例才能運作，並以非同步的方式呼叫方法的多個範例使用委派，請參閱[呼叫同步方法以非同步方式](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)。</span><span class="sxs-lookup"><span data-stu-id="24eeb-118">For more information on the way this callback example works, and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#5](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/callback.cpp#5)]
[!code-csharp[AsyncDelegateExamples#5](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/callback.cs#5)]
[!code-vb[AsyncDelegateExamples#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/callback.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsyncProcessMessage">
      <MemberSignature Language="C#" Value="public virtual System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage (System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(class System.Runtime.Remoting.Messaging.IMessage msg, class System.Runtime.Remoting.Messaging.IMessageSink replySink) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AsyncProcessMessage (msg As IMessage, replySink As IMessageSink) As IMessageCtrl" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Runtime::Remoting::Messaging::IMessageCtrl ^ AsyncProcessMessage(System::Runtime::Remoting::Messaging::IMessage ^ msg, System::Runtime::Remoting::Messaging::IMessageSink ^ replySink);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Remoting.Messaging.IMessageSink.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.Messaging.IMessageCtrl</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Runtime.Remoting.Messaging.IMessage" />
        <Parameter Name="replySink" Type="System.Runtime.Remoting.Messaging.IMessageSink" />
      </Parameters>
      <Docs>
        <param name="msg">
          <span data-ttu-id="24eeb-119">要求 <see cref="T:System.Runtime.Remoting.Messaging.IMessage" /> 介面。</span>
          <span class="sxs-lookup">
            <span data-stu-id="24eeb-119">The request <see cref="T:System.Runtime.Remoting.Messaging.IMessage" /> interface.</span>
          </span>
        </param>
        <param name="replySink">
          <span data-ttu-id="24eeb-120">回應 <see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" /> 介面。</span>
          <span class="sxs-lookup">
            <span data-stu-id="24eeb-120">The response <see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" /> interface.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="24eeb-121">實作 <see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" /> 介面。</span>
          <span class="sxs-lookup">
            <span data-stu-id="24eeb-121">Implements the <see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" /> interface.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="24eeb-122">沒有傳回值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="24eeb-122">No value is returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24eeb-123"><xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage%2A>方法<xref:System.Runtime.Remoting.Messaging.IMessageSink>介面無關<xref:System.Runtime.Remoting.Messaging.AsyncResult>類別。</span><span class="sxs-lookup"><span data-stu-id="24eeb-123">The <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage%2A> method of the <xref:System.Runtime.Remoting.Messaging.IMessageSink> interface is not relevant to the <xref:System.Runtime.Remoting.Messaging.AsyncResult> class.</span></span> <span data-ttu-id="24eeb-124">由實作<xref:System.Runtime.Remoting.Messaging.AsyncResult>會擲回<xref:System.NotSupportedException>。</span><span class="sxs-lookup"><span data-stu-id="24eeb-124">Implementation by <xref:System.Runtime.Remoting.Messaging.AsyncResult> throws a <xref:System.NotSupportedException>.</span></span> <span data-ttu-id="24eeb-125">相反地，取得<xref:System.Runtime.Remoting.Messaging.AsyncResult>透過將轉型<xref:System.IAsyncResult>發出使用委派非同步呼叫所傳回的介面。</span><span class="sxs-lookup"><span data-stu-id="24eeb-125">Instead, obtain an <xref:System.Runtime.Remoting.Messaging.AsyncResult> by casting the <xref:System.IAsyncResult> interface returned by an asynchronous call made using a delegate.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsyncState">
      <MemberSignature Language="C#" Value="public virtual object AsyncState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object AsyncState" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property AsyncState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ AsyncState { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.AsyncState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="24eeb-126">取得被當做 <see langword="BeginInvoke" /> 方法呼叫的最後參數來提供的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="24eeb-126">Gets the object provided as the last parameter of a <see langword="BeginInvoke" /> method call.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="24eeb-127">被當做 <see langword="BeginInvoke" /> 方法呼叫的最後參數來提供的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="24eeb-127">The object provided as the last parameter of a <see langword="BeginInvoke" /> method call.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24eeb-128">如需有關`BeginInvoke`方法，請參閱[非同步程式設計使用委派](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-using-delegates.md)。</span><span class="sxs-lookup"><span data-stu-id="24eeb-128">For more information about the `BeginInvoke` method, see [Asynchronous Programming Using Delegates](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-using-delegates.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="24eeb-129">下列程式碼範例示範如何<xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState%2A>屬性用來將資訊傳遞至回呼方法。</span><span class="sxs-lookup"><span data-stu-id="24eeb-129">The following code example demonstrates how the <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState%2A> property is used to pass information to a callback method.</span></span> <span data-ttu-id="24eeb-130">最後一個參數`BeginInvoke`方法呼叫是格式字串，回呼方法會用它來格式化輸出訊息。</span><span class="sxs-lookup"><span data-stu-id="24eeb-130">The last parameter of the `BeginInvoke` method call is a format string, which the callback method uses to format an output message.</span></span>  
  
 <span data-ttu-id="24eeb-131">此範例包含兩個類別，包含方法，這個方法會以非同步方式呼叫的類別和類別，其中包含`Main`進行呼叫的方法。</span><span class="sxs-lookup"><span data-stu-id="24eeb-131">The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the `Main` method that makes the call.</span></span>  
  
 <span data-ttu-id="24eeb-132">如需詳細資訊的方式這個回呼範例才能運作，並以非同步的方式呼叫方法的多個範例使用委派，請參閱[呼叫同步方法以非同步方式](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)。</span><span class="sxs-lookup"><span data-stu-id="24eeb-132">For more information on the way this callback example works, and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#5](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/callback.cpp#5)]
[!code-csharp[AsyncDelegateExamples#5](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/callback.cs#5)]
[!code-vb[AsyncDelegateExamples#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/callback.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsyncWaitHandle">
      <MemberSignature Language="C#" Value="public virtual System.Threading.WaitHandle AsyncWaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle AsyncWaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property AsyncWaitHandle As WaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Threading::WaitHandle ^ AsyncWaitHandle { System::Threading::WaitHandle ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.AsyncWaitHandle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="24eeb-133">取得 <see cref="T:System.Threading.WaitHandle" />，它會封裝 Win32 同步控制代碼並允許各種同步配置的實作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="24eeb-133">Gets a <see cref="T:System.Threading.WaitHandle" /> that encapsulates Win32 synchronization handles, and allows the implementation of various synchronization schemes.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="24eeb-134">
            <see cref="T:System.Threading.WaitHandle" />，封裝 Win32 同步控制代碼，並允許各種同步配置的實作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="24eeb-134">A <see cref="T:System.Threading.WaitHandle" /> that encapsulates Win32 synchronization handles, and allows the implementation of various synchronization schemes.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24eeb-135"><xref:System.Threading.WaitHandle>傳回此方法的非同步作業完成時自動收到信號。</span><span class="sxs-lookup"><span data-stu-id="24eeb-135">The <xref:System.Threading.WaitHandle> returned by this method is automatically signaled when the asynchronous operation has completed.</span></span>  
  
 <span data-ttu-id="24eeb-136">等候控制代碼不會自動關閉當您呼叫`EndInvoke`上用來進行非同步方法呼叫的委派。</span><span class="sxs-lookup"><span data-stu-id="24eeb-136">The wait handle is not closed automatically when you call `EndInvoke` on the delegate that was used to make the asynchronous method call.</span></span> <span data-ttu-id="24eeb-137">如果您釋放所有等候控制代碼的參考，當記憶體回收收回等候控制代碼時，系統資源就會釋放。</span><span class="sxs-lookup"><span data-stu-id="24eeb-137">If you release all references to the wait handle, system resources are freed when garbage collection reclaims the wait handle.</span></span> <span data-ttu-id="24eeb-138">若要釋放系統資源，當您使用完等候控制代碼，呼叫<xref:System.Threading.WaitHandle.Close%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="24eeb-138">To free the system resources as soon as you are finished using the wait handle, call the <xref:System.Threading.WaitHandle.Close%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="24eeb-139">明確地關閉或處置可處置的物件時，記憶體回收會更有效率。</span><span class="sxs-lookup"><span data-stu-id="24eeb-139">Garbage collection works more efficiently when disposable objects are explicitly closed or disposed.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="24eeb-140"><xref:System.Threading.WaitHandle>中包含<xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A>屬性可用來非同步呼叫完成之前會封鎖目前的執行緒。</span><span class="sxs-lookup"><span data-stu-id="24eeb-140">The <xref:System.Threading.WaitHandle> contained in the <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A> property can be used to block the current thread until the asynchronous call is complete.</span></span> <span data-ttu-id="24eeb-141">不過，<xref:System.Threading.WaitHandle>將會忽略<xref:System.AsyncCallback>，如果有指定期間`BeginInvoke`呼叫。</span><span class="sxs-lookup"><span data-stu-id="24eeb-141">However the <xref:System.Threading.WaitHandle> will ignore the <xref:System.AsyncCallback>, if one was specified during the `BeginInvoke` call.</span></span> <span data-ttu-id="24eeb-142">因此，情況會發生在應用程式關閉之前<xref:System.AsyncCallback>已完成執行，即使<xref:System.Threading.WaitHandle>用來非同步呼叫完成的區塊。</span><span class="sxs-lookup"><span data-stu-id="24eeb-142">Therefore, a situation can occur where the application shuts down before the <xref:System.AsyncCallback> has finished executing, even if a <xref:System.Threading.WaitHandle> is used to block until the asynchronous call completion.</span></span> <span data-ttu-id="24eeb-143">如需這種情況的範例，請參閱範例的<xref:System.Runtime.Remoting.Messaging.AsyncResult>類別，並移除<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>陳述式。</span><span class="sxs-lookup"><span data-stu-id="24eeb-143">For an example of such a situation, see the example for the <xref:System.Runtime.Remoting.Messaging.AsyncResult> class, and remove the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> statement.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="24eeb-144">下列範例示範如何使用<xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A>屬性來取得<xref:System.Threading.WaitHandle>，以及如何等候非同步呼叫的委派。</span><span class="sxs-lookup"><span data-stu-id="24eeb-144">The following example demonstrates how to use the <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A> property to get a <xref:System.Threading.WaitHandle>, and how to wait for an asynchronous call on a delegate.</span></span> <span data-ttu-id="24eeb-145">非同步呼叫完成時， <xref:System.Threading.WaitHandle> 會收到信號，且您可以呼叫 <xref:System.Threading.WaitHandle.WaitOne%2A> 方法來等候它。</span><span class="sxs-lookup"><span data-stu-id="24eeb-145">The <xref:System.Threading.WaitHandle> is signaled when the asynchronous call completes, and you can wait for it by calling the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span>  
  
 <span data-ttu-id="24eeb-146">此範例包含兩個類別，包含方法，這個方法會以非同步方式呼叫的類別和類別，其中包含`Main`進行呼叫的方法。</span><span class="sxs-lookup"><span data-stu-id="24eeb-146">The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the `Main` method that makes the call.</span></span>  
  
 <span data-ttu-id="24eeb-147">如需詳細資訊和使用委派來以非同步方式呼叫方法的更多範例，請參閱[呼叫同步方法以非同步方式](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)。</span><span class="sxs-lookup"><span data-stu-id="24eeb-147">For more information and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#3](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/waithandle.cpp#3)]
[!code-csharp[AsyncDelegateExamples#3](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/waithandle.cs#3)]
[!code-vb[AsyncDelegateExamples#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/WaitHandle.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
      </Docs>
    </Member>
    <Member MemberName="CompletedSynchronously">
      <MemberSignature Language="C#" Value="public virtual bool CompletedSynchronously { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CompletedSynchronously" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CompletedSynchronously As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CompletedSynchronously { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.CompletedSynchronously</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="24eeb-148">取得值，指出 <see langword="BeginInvoke" /> 呼叫是否同步完成。</span>
          <span class="sxs-lookup">
            <span data-stu-id="24eeb-148">Gets a value indicating whether the <see langword="BeginInvoke" /> call completed synchronously.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="24eeb-149">如果 <see langword="true" /> 呼叫同步完成，則為 <see langword="BeginInvoke" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="24eeb-149">
              <see langword="true" /> if the <see langword="BeginInvoke" /> call completed synchronously; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24eeb-150">如果它偵測到的`BeginInvoke`呼叫已完成同步在<xref:System.AsyncCallback>委派，它是可能性呼叫 BeginInvoke 執行緒目前的執行緒。</span><span class="sxs-lookup"><span data-stu-id="24eeb-150">If it is detected that the `BeginInvoke` call completed synchronously in the <xref:System.AsyncCallback> delegate, it is probable that the thread that called BeginInvoke is the current thread.</span></span> <span data-ttu-id="24eeb-151">大部分的提供者的<xref:System.IAsyncResult>介面不會使用的功能，而且會傳回預設值`false`。</span><span class="sxs-lookup"><span data-stu-id="24eeb-151">Most providers of the <xref:System.IAsyncResult> interface will not use the capability and will return a default `false`.</span></span>  
  
 <span data-ttu-id="24eeb-152">目前的實作<xref:System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously%2A>一律會傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="24eeb-152">Current implementation of <xref:System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously%2A> always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInvokeCalled">
      <MemberSignature Language="C#" Value="public bool EndInvokeCalled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EndInvokeCalled" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Messaging.AsyncResult.EndInvokeCalled" />
      <MemberSignature Language="VB.NET" Value="Public Property EndInvokeCalled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EndInvokeCalled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="24eeb-153">取得或設定值，指出是否已經在目前 <see cref="T:System.Runtime.Remoting.Messaging.AsyncResult" /> 上呼叫 <see langword="EndInvoke" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="24eeb-153">Gets or sets a value indicating whether <see langword="EndInvoke" /> has been called on the current <see cref="T:System.Runtime.Remoting.Messaging.AsyncResult" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="24eeb-154">如果已經在目前 <see cref="T:System.Runtime.Remoting.Messaging.AsyncResult" /> 上呼叫 <see langword="true" />，則為 <see langword="EndInvoke" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="24eeb-154">
              <see langword="true" /> if <see langword="EndInvoke" /> has been called on the current <see cref="T:System.Runtime.Remoting.Messaging.AsyncResult" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetReplyMessage">
      <MemberSignature Language="C#" Value="public virtual System.Runtime.Remoting.Messaging.IMessage GetReplyMessage ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.Messaging.IMessage GetReplyMessage() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetReplyMessage () As IMessage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Runtime::Remoting::Messaging::IMessage ^ GetReplyMessage();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.Messaging.IMessage</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="24eeb-155">取得非同步呼叫的回應訊息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="24eeb-155">Gets the response message for the asynchronous call.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="24eeb-156">遠端訊息，其應當表示遠端物件上方法呼叫的回應。</span>
          <span class="sxs-lookup">
            <span data-stu-id="24eeb-156">A remoting message that should represent a response to a method call on a remote object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24eeb-157"><xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A>方法可以傳回的物件之後<xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A>方法呼叫。</span><span class="sxs-lookup"><span data-stu-id="24eeb-157">The <xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A> method can return an object after the <xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A> method is called.</span></span> <span data-ttu-id="24eeb-158"><xref:System.Runtime.Remoting.Messaging.IMessage>傳回值可以轉換成<xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage>。</span><span class="sxs-lookup"><span data-stu-id="24eeb-158">The <xref:System.Runtime.Remoting.Messaging.IMessage> return value can be cast to an <xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage>.</span></span>  
  
 <span data-ttu-id="24eeb-159">不過，您不需要直接呼叫其中一種方法。</span><span class="sxs-lookup"><span data-stu-id="24eeb-159">However, you do not need to call either of these methods directly.</span></span> <span data-ttu-id="24eeb-160">它們適用於.NET Framework 的遠端執行功能基礎結構。</span><span class="sxs-lookup"><span data-stu-id="24eeb-160">They are intended for use by the remoting infrastructure of the .NET Framework.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCompleted">
      <MemberSignature Language="C#" Value="public virtual bool IsCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompleted" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsCompleted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsCompleted { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.IsCompleted</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="24eeb-161">取得或設定值，指出伺服器是否已經完成呼叫。</span>
          <span class="sxs-lookup">
            <span data-stu-id="24eeb-161">Gets a value indicating whether the server has completed the call.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="24eeb-162">在伺服器已經完成呼叫之後，為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="24eeb-162">
              <see langword="true" /> after the server has completed the call; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24eeb-163">伺服器必須使用任何用戶端提供以外的資源所同意時它會設定之後，共用語意<xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A>屬性`true`。</span><span class="sxs-lookup"><span data-stu-id="24eeb-163">The server must not use any client supplied resources outside of the agreed upon sharing semantics after it sets the <xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A> property to `true`.</span></span> <span data-ttu-id="24eeb-164">因此，它是安全的用戶端来終結的資源之後<xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A>屬性會傳回`true`。</span><span class="sxs-lookup"><span data-stu-id="24eeb-164">Thus, it is safe for the client to destroy the resources after the <xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A> property returns `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="24eeb-165">下列範例示範如何使用<xref:System.IAsyncResult.IsCompleted%2A>屬性<xref:System.Runtime.Remoting.Messaging.AsyncResult>傳回`BeginInvoke`找出非同步呼叫完成時。</span><span class="sxs-lookup"><span data-stu-id="24eeb-165">The following example shows how to use the <xref:System.IAsyncResult.IsCompleted%2A> property of the <xref:System.Runtime.Remoting.Messaging.AsyncResult> returned by `BeginInvoke` to discover when an asynchronous call completes.</span></span> <span data-ttu-id="24eeb-166">從服役於使用者介面的執行緒進行非同步呼叫時，您有可能會執行這項操作。</span><span class="sxs-lookup"><span data-stu-id="24eeb-166">You might do this when making the asynchronous call from a thread that services the user interface.</span></span> <span data-ttu-id="24eeb-167">輪詢完成這個動作，可在非同步呼叫於 <xref:System.Threading.ThreadPool> 執行緒上執行的同時，讓呼叫執行緒能夠繼續執行。</span><span class="sxs-lookup"><span data-stu-id="24eeb-167">Polling for completion allows the calling thread to continue executing while the asynchronous call executes on a <xref:System.Threading.ThreadPool> thread.</span></span>  
  
 <span data-ttu-id="24eeb-168">此範例包含兩個類別，包含方法，這個方法會以非同步方式呼叫的類別和類別，其中包含`Main`進行呼叫的方法。</span><span class="sxs-lookup"><span data-stu-id="24eeb-168">The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the `Main` method that makes the call.</span></span>  
  
 <span data-ttu-id="24eeb-169">如需詳細資訊和使用委派來以非同步方式呼叫方法的更多範例，請參閱[呼叫同步方法以非同步方式](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)。</span><span class="sxs-lookup"><span data-stu-id="24eeb-169">For more information and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#4](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/polling.cpp#4)]
[!code-csharp[AsyncDelegateExamples#4](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/polling.cs#4)]
[!code-vb[AsyncDelegateExamples#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/polling.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextSink">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.Messaging.IMessageSink NextSink { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.Remoting.Messaging.IMessageSink NextSink" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Messaging.AsyncResult.NextSink" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NextSink As IMessageSink" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::Remoting::Messaging::IMessageSink ^ NextSink { System::Runtime::Remoting::Messaging::IMessageSink ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.Remoting.Messaging.IMessageSink.NextSink</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.Messaging.IMessageSink</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="24eeb-170">取得接收鏈結中的下一個訊息接收。</span>
          <span class="sxs-lookup">
            <span data-stu-id="24eeb-170">Gets the next message sink in the sink chain.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="24eeb-171">
            <see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" /> 介面，表示接收鏈結中的下一個訊息接收。</span>
          <span class="sxs-lookup">
            <span data-stu-id="24eeb-171">An <see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" /> interface that represents the next message sink in the sink chain.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24eeb-172">目前的實作<xref:System.Runtime.Remoting.Messaging.AsyncResult.NextSink%2A>傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="24eeb-172">The current implementation of <xref:System.Runtime.Remoting.Messaging.AsyncResult.NextSink%2A> returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetMessageCtrl">
      <MemberSignature Language="C#" Value="public virtual void SetMessageCtrl (System.Runtime.Remoting.Messaging.IMessageCtrl mc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetMessageCtrl(class System.Runtime.Remoting.Messaging.IMessageCtrl mc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl(System.Runtime.Remoting.Messaging.IMessageCtrl)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetMessageCtrl (mc As IMessageCtrl)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetMessageCtrl(System::Runtime::Remoting::Messaging::IMessageCtrl ^ mc);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mc" Type="System.Runtime.Remoting.Messaging.IMessageCtrl" />
      </Parameters>
      <Docs>
        <param name="mc">
          <span data-ttu-id="24eeb-173">目前遠端方法呼叫的 <see cref="T:System.Runtime.Remoting.Messaging.IMessageCtrl" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="24eeb-173">The <see cref="T:System.Runtime.Remoting.Messaging.IMessageCtrl" /> for the current remote method call.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="24eeb-174">設定目前遠端方法呼叫的 <see cref="T:System.Runtime.Remoting.Messaging.IMessageCtrl" />，以便提供非同步訊息分派之後控制它們的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="24eeb-174">Sets an <see cref="T:System.Runtime.Remoting.Messaging.IMessageCtrl" /> for the current remote method call, which provides a way to control asynchronous messages after they have been dispatched.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24eeb-175">您不需要呼叫<xref:System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="24eeb-175">You do not need to call the <xref:System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SyncProcessMessage">
      <MemberSignature Language="C#" Value="public virtual System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage (System.Runtime.Remoting.Messaging.IMessage msg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(class System.Runtime.Remoting.Messaging.IMessage msg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SyncProcessMessage (msg As IMessage) As IMessage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Runtime::Remoting::Messaging::IMessage ^ SyncProcessMessage(System::Runtime::Remoting::Messaging::IMessage ^ msg);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Remoting.Messaging.IMessageSink.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.Messaging.IMessage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Runtime.Remoting.Messaging.IMessage" />
      </Parameters>
      <Docs>
        <param name="msg">
          <span data-ttu-id="24eeb-176">遠端物件上之方法呼叫的回應訊息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="24eeb-176">A response message to a method call on a remote object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="24eeb-177">同步處理由遠端物件上之方法呼叫所傳回的回應訊息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="24eeb-177">Synchronously processes a response message returned by a method call on a remote object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="24eeb-178">傳回 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="24eeb-178">Returns <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24eeb-179"><xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A>方法實作<xref:System.Runtime.Remoting.Messaging.IMessageSink>介面。</span><span class="sxs-lookup"><span data-stu-id="24eeb-179">The <xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A> method implements the <xref:System.Runtime.Remoting.Messaging.IMessageSink> interface.</span></span> <span data-ttu-id="24eeb-180">您不需要直接呼叫這個方法。</span><span class="sxs-lookup"><span data-stu-id="24eeb-180">You do not need to call this method directly.</span></span> <span data-ttu-id="24eeb-181">它適用於.NET Framework 的遠端執行功能基礎結構。</span><span class="sxs-lookup"><span data-stu-id="24eeb-181">It is intended for use by the remoting infrastructure of the .NET Framework.</span></span>  
  
 <span data-ttu-id="24eeb-182"><xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A> 叫用的消費者程式碼<xref:System.AsyncCallback>委派。</span><span class="sxs-lookup"><span data-stu-id="24eeb-182"><xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A> invokes the consumer code's <xref:System.AsyncCallback> delegate.</span></span> <span data-ttu-id="24eeb-183">它也會設定<xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage>所傳回的執行個體<xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="24eeb-183">It also sets the <xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage> instance returned by the <xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A> method.</span></span> <span data-ttu-id="24eeb-184">如果`msg`參數的類型是<xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage>，相同的物件由<xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A>。</span><span class="sxs-lookup"><span data-stu-id="24eeb-184">If the `msg` parameter is of type <xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage>, the same object is returned by <xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A>.</span></span> <span data-ttu-id="24eeb-185">否則，會傳回回覆訊息，其中包含遠端處理的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="24eeb-185">Otherwise, a reply message that contains a remoting exception is returned.</span></span>  
  
 <span data-ttu-id="24eeb-186"><xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A> 所傳回的值也會修改<xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="24eeb-186"><xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A> also modifies the value returned by the <xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>