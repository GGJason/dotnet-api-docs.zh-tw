<Type Name="ILogicalThreadAffinative" FullName="System.Runtime.Remoting.Messaging.ILogicalThreadAffinative">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6e46d8f9078c9c12b300e78d9e3a0d0bdce1eded" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36535377" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ILogicalThreadAffinative" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ILogicalThreadAffinative" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative" />
  <TypeSignature Language="VB.NET" Value="Public Interface ILogicalThreadAffinative" />
  <TypeSignature Language="C++ CLI" Value="public interface class ILogicalThreadAffinative" />
  <TypeSignature Language="F#" Value="type ILogicalThreadAffinative = interface" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="924c5-101">標記可以傳播到 <see cref="T:System.AppDomain" /> 中的 <see cref="T:System.Runtime.Remoting.Messaging.LogicalCallContext" /> 之外的物件。</span>
      <span class="sxs-lookup">
        <span data-stu-id="924c5-101">Marks an object that can propagate outside of an <see cref="T:System.AppDomain" /> in a <see cref="T:System.Runtime.Remoting.Messaging.LogicalCallContext" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="924c5-102">當進行遠端方法呼叫，以在另一個物件<xref:System.AppDomain>，目前<xref:System.Runtime.Remoting.Messaging.CallContext>類別會產生<xref:System.Runtime.Remoting.Messaging.LogicalCallContext>，以及與遠端位置呼叫傳送。</span><span class="sxs-lookup"><span data-stu-id="924c5-102">When a remote method call is made to an object in another <xref:System.AppDomain>, the current <xref:System.Runtime.Remoting.Messaging.CallContext> class generates a <xref:System.Runtime.Remoting.Messaging.LogicalCallContext> that travels along with the call to the remote location.</span></span> <span data-ttu-id="924c5-103">只有物件該公開<xref:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative>介面，並儲存在<xref:System.Runtime.Remoting.Messaging.CallContext>外傳播<xref:System.AppDomain>。</span><span class="sxs-lookup"><span data-stu-id="924c5-103">Only objects that expose the <xref:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative> interface and are stored in the <xref:System.Runtime.Remoting.Messaging.CallContext> are propagated outside the <xref:System.AppDomain>.</span></span> <span data-ttu-id="924c5-104">不支援這個介面的物件就不會傳輸在<xref:System.Runtime.Remoting.Messaging.LogicalCallContext>具有遠端方法呼叫的執行個體。</span><span class="sxs-lookup"><span data-stu-id="924c5-104">Objects that do not support this interface are not transmitted in <xref:System.Runtime.Remoting.Messaging.LogicalCallContext> instances with remote method calls.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="924c5-105">下列程式碼範例示範如何使用<xref:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative>介面來傳送[Principal 和 Identity 物件](~/docs/standard/security/principal-and-identity-objects.md)識別的遠端位置。</span><span class="sxs-lookup"><span data-stu-id="924c5-105">The following code example demonstrates the use of the <xref:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative> interface to transmit [Principal and Identity Objects](~/docs/standard/security/principal-and-identity-objects.md) to a remote location for identification.</span></span> <span data-ttu-id="924c5-106">若要檢視的程式碼`HelloServiceClass`範例中使用的類別，請參閱範例<xref:System.Runtime.Remoting.Messaging.CallContext.GetData%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="924c5-106">To view the code for the `HelloServiceClass` class used in the sample, see the example for the <xref:System.Runtime.Remoting.Messaging.CallContext.GetData%2A> method.</span></span> <span data-ttu-id="924c5-107">若要檢視此範例中使用的伺服器類別的程式碼，請參閱範例<xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType%2A>類別。</span><span class="sxs-lookup"><span data-stu-id="924c5-107">To view the code for the server class used in this sample, see example for the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType%2A> class.</span></span> <span data-ttu-id="924c5-108">若要檢視範例中使用的用戶端類別的程式碼，請參閱範例<xref:System.Runtime.Remoting.Messaging.CallContext>類別。</span><span class="sxs-lookup"><span data-stu-id="924c5-108">To view the code for the client class used in the sample, see the example for the <xref:System.Runtime.Remoting.Messaging.CallContext> class.</span></span>  
  
 [!code-cpp[CallContext#2](~/samples/snippets/cpp/VS_Snippets_Remoting/CallContext/CPP/service.cpp#2)]
 [!code-csharp[CallContext#2](~/samples/snippets/csharp/VS_Snippets_Remoting/CallContext/CS/service.cs#2)]
 [!code-vb[CallContext#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/CallContext/VB/service.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>