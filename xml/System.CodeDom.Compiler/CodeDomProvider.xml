<Type Name="CodeDomProvider" FullName="System.CodeDom.Compiler.CodeDomProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3cd6391acbb63e22a350d0f119e03fa9818cfdba" />
    <Meta Name="ms.sourcegitcommit" Value="254e16ae65e82f4aa59360cd8572b36b6b5b2f80" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/05/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class CodeDomProvider : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit CodeDomProvider extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.CodeDom.Compiler.CodeDomProvider" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class CodeDomProvider&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class CodeDomProvider abstract : System::ComponentModel::Component" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.CodeDom</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="76208-101">提供基底類別 (Base Class) 給 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 實作。</span>
      <span class="sxs-lookup">
        <span data-stu-id="76208-101">Provides a base class for <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> implementations.</span>
      </span>
      <span data-ttu-id="76208-102">這個類別是抽象的。</span>
      <span class="sxs-lookup">
        <span data-stu-id="76208-102">This class is abstract.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="76208-103">A<xref:System.CodeDom.Compiler.CodeDomProvider>可用來建立和擷取程式碼產生器和程式碼編譯器的執行個體。</span><span class="sxs-lookup"><span data-stu-id="76208-103">A <xref:System.CodeDom.Compiler.CodeDomProvider> can be used to create and retrieve instances of code generators and code compilers.</span></span> <span data-ttu-id="76208-104">程式碼產生器可以用來產生特定語言的程式碼，且程式碼編譯器可將程式碼編譯為組件。</span><span class="sxs-lookup"><span data-stu-id="76208-104">Code generators can be used to generate code in a particular language, and code compilers can be used to compile code into assemblies.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="76208-105">在[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]、 方法可在程式碼產生器和程式碼編譯器都可以直接從程式碼提供者。</span><span class="sxs-lookup"><span data-stu-id="76208-105">In the [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)], the methods made available in the code generator and code compiler are available directly from the code provider.</span></span> <span data-ttu-id="76208-106">您不需要呼叫<xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A>或<xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A>存取方法，而且這些方法會標示為過時。</span><span class="sxs-lookup"><span data-stu-id="76208-106">You do not need to call <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> or <xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A> to access the methods, and those methods are marked as obsolete.</span></span> <span data-ttu-id="76208-107">這適用於已存在和新的程式碼提供者實作。</span><span class="sxs-lookup"><span data-stu-id="76208-107">This applies to preexisting as well as new code provider implementations.</span></span>  
  
 <span data-ttu-id="76208-108">A<xref:System.CodeDom.Compiler.CodeDomProvider>實作通常會提供程式碼來產生程式碼和管理單一的程式語言的編譯產生及/或程式碼編譯介面。</span><span class="sxs-lookup"><span data-stu-id="76208-108">A <xref:System.CodeDom.Compiler.CodeDomProvider> implementation typically provides code generation and/or code compilation interfaces for generating code and managing compilation for a single programming language.</span></span> <span data-ttu-id="76208-109">支援數種語言<xref:System.CodeDom.Compiler.CodeDomProvider>隨附的實作[!INCLUDE[winsdklong](~/includes/winsdklong-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="76208-109">Several languages are supported by <xref:System.CodeDom.Compiler.CodeDomProvider> implementations that ship with the [!INCLUDE[winsdklong](~/includes/winsdklong-md.md)].</span></span> <span data-ttu-id="76208-110">這些語言包括 C#、 Visual Basic、 c + + 和 JScript。</span><span class="sxs-lookup"><span data-stu-id="76208-110">These languages include C#, Visual Basic, C++, and JScript.</span></span> <span data-ttu-id="76208-111">開發人員或廠商編譯器可以實作<xref:System.CodeDom.Compiler.ICodeGenerator>和<xref:System.CodeDom.Compiler.ICodeCompiler>介面，並提供<xref:System.CodeDom.Compiler.CodeDomProvider>延伸 CodeDOM 其他程式設計語言的支援。</span><span class="sxs-lookup"><span data-stu-id="76208-111">Developers or compiler vendors can implement the <xref:System.CodeDom.Compiler.ICodeGenerator> and <xref:System.CodeDom.Compiler.ICodeCompiler> interfaces and provide a <xref:System.CodeDom.Compiler.CodeDomProvider> that extends CodeDOM support to other programming languages.</span></span>  
  
 <span data-ttu-id="76208-112">[ &lt;System.codedom&gt;元素](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)機器組態檔 (Machine.config) 提供開發人員和編譯器廠商，以加入其他的組態設定的機制<xref:System.CodeDom.Compiler.CodeDomProvider>實作。</span><span class="sxs-lookup"><span data-stu-id="76208-112">The [&lt;system.codedom&gt; Element](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) in the machine configuration file (Machine.config) provides a mechanism for developers and compiler vendors to add configuration settings for additional <xref:System.CodeDom.Compiler.CodeDomProvider> implementations.</span></span>  
  
 <span data-ttu-id="76208-113"><xref:System.CodeDom.Compiler.CodeDomProvider>類別提供靜態方法來探索及列舉<xref:System.CodeDom.Compiler.CodeDomProvider>實作的電腦上。</span><span class="sxs-lookup"><span data-stu-id="76208-113">The <xref:System.CodeDom.Compiler.CodeDomProvider> class provides static methods to discover and enumerate the <xref:System.CodeDom.Compiler.CodeDomProvider> implementations on a computer.</span></span> <span data-ttu-id="76208-114"><xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A>方法會傳回所有的設定<xref:System.CodeDom.Compiler.CodeDomProvider>實作的電腦上。</span><span class="sxs-lookup"><span data-stu-id="76208-114">The <xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A> method returns the settings for all <xref:System.CodeDom.Compiler.CodeDomProvider> implementations on a computer.</span></span> <span data-ttu-id="76208-115"><xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A>方法會傳回特定的設定<xref:System.CodeDom.Compiler.CodeDomProvider>實作中，以程式設計的語言名稱。</span><span class="sxs-lookup"><span data-stu-id="76208-115">The <xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A> method returns the settings for a specific <xref:System.CodeDom.Compiler.CodeDomProvider> implementation, based on the programming language name.</span></span> <span data-ttu-id="76208-116"><xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A>方法傳回的執行個體<xref:System.CodeDom.Compiler.CodeDomProvider>特定語言的實作。</span><span class="sxs-lookup"><span data-stu-id="76208-116">The <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> method returns an instance of a <xref:System.CodeDom.Compiler.CodeDomProvider> implementation for a specific language.</span></span>  
  
 <span data-ttu-id="76208-117">如需有關組態檔中的語言提供者設定的詳細資訊，請參閱[編譯器和語言提供者設定結構描述](http://msdn.microsoft.com/library/c020b139-8699-4f0d-9ac9-70d0c5b2a8c8)。</span><span class="sxs-lookup"><span data-stu-id="76208-117">For more details on language provider settings in the configuration file, see [Compiler and Language Provider Settings Schema](http://msdn.microsoft.com/library/c020b139-8699-4f0d-9ac9-70d0c5b2a8c8).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="76208-118">此類別可讓連結要求和繼承要求在類別層級。</span><span class="sxs-lookup"><span data-stu-id="76208-118">This class makes a link demand and an inheritance demand at the class level.</span></span> <span data-ttu-id="76208-119">A<xref:System.Security.SecurityException>立即呼叫者或衍生的類別不具有完全信任權限時，會擲回。</span><span class="sxs-lookup"><span data-stu-id="76208-119">A <xref:System.Security.SecurityException> is thrown if either the immediate caller or the derived class does not have full trust permission.</span></span> <span data-ttu-id="76208-120">如需安全性需求的詳細資訊，請參閱[連結要求](~/docs/framework/misc/link-demands.md)和[繼承要求](http://msdn.microsoft.com/library/28b9adbb-8f08-4f10-b856-dbf59eb932d9)。</span><span class="sxs-lookup"><span data-stu-id="76208-120">For details about security demands, see [Link Demands](~/docs/framework/misc/link-demands.md) and [Inheritance Demands](http://msdn.microsoft.com/library/28b9adbb-8f08-4f10-b856-dbf59eb932d9).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="76208-121">下列範例程式可以產生和編譯的程式會列印"Hello World"使用 CodeDOM 模型為基礎的原始碼<xref:System.Console>類別。</span><span class="sxs-lookup"><span data-stu-id="76208-121">The following example program can generate and compile source code based on a CodeDOM model of a program that prints "Hello World" using the <xref:System.Console> class.</span></span> <span data-ttu-id="76208-122">提供 Windows Form 使用者介面。</span><span class="sxs-lookup"><span data-stu-id="76208-122">A Windows Forms user interface is provided.</span></span> <span data-ttu-id="76208-123">使用者可以選取目標程式語言，從多個選項： C#、 Visual Basic 和 JScript。</span><span class="sxs-lookup"><span data-stu-id="76208-123">The user can select the target programming language from several selections: C#, Visual Basic, and JScript.</span></span>  
  
 [!code-cpp[CodeDomExample#1](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDomExample/CPP/source.cpp#1)]
 [!code-csharp[CodeDomExample#1](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDomExample/CS/source.cs#1)]
 [!code-vb[CodeDomExample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomExample/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
      <span data-ttu-id="76208-124">針對完全信任立即呼叫者。</span>
      <span class="sxs-lookup">
        <span data-stu-id="76208-124">for full trust for the immediate caller.</span>
      </span>
      <span data-ttu-id="76208-125">這個類別無法供部分信任程式碼。</span>
      <span class="sxs-lookup">
        <span data-stu-id="76208-125">This class cannot be used by partially trusted code.</span>
      </span>
    </permission>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">
      <span data-ttu-id="76208-126">針對繼承者完全信任。</span>
      <span class="sxs-lookup">
        <span data-stu-id="76208-126">for full trust for inheritors.</span>
      </span>
      <span data-ttu-id="76208-127">這個類別無法被繼承，部分信任程式碼。</span>
      <span class="sxs-lookup">
        <span data-stu-id="76208-127">This class cannot be inherited by partially trusted code.</span>
      </span>
    </permission>
    <block subset="none" type="overrides">
      <para>
        <span data-ttu-id="76208-128">在.NET framework 1.0 和 1.1 版中，程式碼提供者所組成的實作<see cref="T:System.CodeDom.Compiler.CodeDomProvider" />， <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />， <see cref="T:System.CodeDom.Compiler.ICodeParser" />，和<see cref="T:System.CodeDom.Compiler.ICodeCompiler" />。</span>
        <span class="sxs-lookup">
          <span data-stu-id="76208-128">In the .NET Framework versions 1.0 and 1.1, code providers consist of implementations of <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />, <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />, <see cref="T:System.CodeDom.Compiler.ICodeParser" />, and <see cref="T:System.CodeDom.Compiler.ICodeCompiler" />.</span>
        </span>
        <span data-ttu-id="76208-129">在[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]、 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />， <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser" />，和<see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" />方法已過時，以及的方法<see cref="T:System.CodeDom.Compiler.ICodeGenerator" />和<see cref="T:System.CodeDom.Compiler.ICodeCompiler" />直接用於<see cref="T:System.CodeDom.Compiler.CodeDomProvider" />類別。</span>
        <span class="sxs-lookup">
          <span data-stu-id="76208-129">In the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />, <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser" />, and <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> methods are obsolete, and the methods of <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> and <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> are directly available in the <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> class.</span>
        </span>
        <span data-ttu-id="76208-130">您應該在您的程式碼提供者實作中覆寫這些方法，並呼叫基底的方法。</span>
        <span class="sxs-lookup">
          <span data-stu-id="76208-130">You should override those methods in your code provider implementation and not call the base methods.</span>
        </span>
      </para>
    </block>
    <altmember cref="T:System.CodeDom.Compiler.CompilerInfo" />
    <altmember cref="T:Microsoft.CSharp.CSharpCodeProvider" />
    <altmember cref="T:Microsoft.VisualBasic.VBCodeProvider" />
    <altmember cref="T:Microsoft.JScript.JScriptCodeProvider" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CodeDomProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; CodeDomProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="76208-131">初始化 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-131">Initializes a new instance of the <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="76208-132">針對完全信任立即呼叫者。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-132">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="76208-133">這個類別無法供部分信任程式碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-133">This class cannot be used by partially trusted code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="CompileAssemblyFromDom">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.CompilerResults CompileAssemblyFromDom (System.CodeDom.Compiler.CompilerParameters options, params System.CodeDom.CodeCompileUnit[] compilationUnits);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.CompilerResults CompileAssemblyFromDom(class System.CodeDom.Compiler.CompilerParameters options, class System.CodeDom.CodeCompileUnit[] compilationUnits) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CompileAssemblyFromDom (options As CompilerParameters, ParamArray compilationUnits As CodeCompileUnit()) As CompilerResults" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::CompilerResults ^ CompileAssemblyFromDom(System::CodeDom::Compiler::CompilerParameters ^ options, ... cli::array &lt;System::CodeDom::CodeCompileUnit ^&gt; ^ compilationUnits);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerResults</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.CodeDom.Compiler.CompilerParameters" />
        <Parameter Name="compilationUnits" Type="System.CodeDom.CodeCompileUnit[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="options">
          <span data-ttu-id="76208-134">
            <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 物件，指示編譯的設定值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-134">A <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> object that indicates the settings for the compilation.</span>
          </span>
        </param>
        <param name="compilationUnits">
          <span data-ttu-id="76208-135">
            <see cref="T:System.CodeDom.CodeCompileUnit" /> 型別的陣列，表示要編譯的程式碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-135">An array of type <see cref="T:System.CodeDom.CodeCompileUnit" /> that indicates the code to compile.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="76208-136">使用指定的編譯器設定，根據 <see cref="N:System.CodeDom" /> 物件之指定陣列所包含的 <see cref="T:System.CodeDom.CodeCompileUnit" /> 樹狀結構，編譯一個組件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-136">Compiles an assembly based on the <see cref="N:System.CodeDom" /> trees contained in the specified array of <see cref="T:System.CodeDom.CodeCompileUnit" /> objects, using the specified compiler settings.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="76208-137">
            <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 物件，指示編譯的結果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-137">A <see cref="T:System.CodeDom.Compiler.CompilerResults" /> object that indicates the results of the compilation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="76208-138">在.NET framework 1.0 和 1.1 版中，這個方法由<xref:System.CodeDom.Compiler.ICodeCompiler>所傳回的實作<xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A>的提供者的方法。</span><span class="sxs-lookup"><span data-stu-id="76208-138">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeCompiler> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A> method of the provider.</span></span> <span data-ttu-id="76208-139">在 2.0 版中，呼叫這個方法可以是直接在程式碼提供者即使它不會覆寫程式碼提供者。</span><span class="sxs-lookup"><span data-stu-id="76208-139">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="76208-140">如果程式碼提供者不會覆寫這個方法，<xref:System.CodeDom.Compiler.ICodeCompiler>實作會呼叫基底類別。</span><span class="sxs-lookup"><span data-stu-id="76208-140">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeCompiler> implementation is called by the base class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="76208-141">此方法或 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> 方法都沒有在衍生類別中覆寫。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-141">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> method is overridden in a derived class.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="76208-142">如果您覆寫這個方法，您必須呼叫基底類別的對應方法。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-142">If you override this method, you must not call the corresponding method of the base class.</span>
            </span>
            <span data-ttu-id="76208-143">基底類別方法會建立使用過時的衍生類別中的產生器<see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" />與預先存在的提供者，使用程式碼編譯器的相容性的方法。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-143">The base-class method creates a generator in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> method for compatibility with preexisting providers that use code compilers.</span>
            </span>
            <span data-ttu-id="76208-144">基底類別方法依序呼叫的對應方法<see cref="T:System.CodeDom.Compiler.ICodeCompiler" />執行此功能的實作。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-144">The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> implementation to perform this function.</span>
            </span>
            <span data-ttu-id="76208-145">您會收到<see cref="T:System.NotImplementedException" />如果您不使用程式碼編譯器的程式碼提供者呼叫基底類別方法。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-145">You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code compiler.</span>
            </span>
          </para>
        </block>
        <altmember cref="T:System.CodeDom.Compiler.CompilerParameters" />
        <altmember cref="T:System.CodeDom.CodeCompileUnit" />
        <altmember cref="T:System.CodeDom.Compiler.CompilerResults" />
      </Docs>
    </Member>
    <Member MemberName="CompileAssemblyFromFile">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.CompilerResults CompileAssemblyFromFile (System.CodeDom.Compiler.CompilerParameters options, params string[] fileNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.CompilerResults CompileAssemblyFromFile(class System.CodeDom.Compiler.CompilerParameters options, string[] fileNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CompileAssemblyFromFile (options As CompilerParameters, ParamArray fileNames As String()) As CompilerResults" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::CompilerResults ^ CompileAssemblyFromFile(System::CodeDom::Compiler::CompilerParameters ^ options, ... cli::array &lt;System::String ^&gt; ^ fileNames);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerResults</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.CodeDom.Compiler.CompilerParameters" />
        <Parameter Name="fileNames" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="options">
          <span data-ttu-id="76208-146">
            <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 物件，指示編譯的設定值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-146">A <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> object that indicates the settings for the compilation.</span>
          </span>
        </param>
        <param name="fileNames">
          <span data-ttu-id="76208-147">要編譯的檔案名稱陣列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-147">An array of the names of the files to compile.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="76208-148">使用指定的編譯器設定，在指定檔案所包含的原始程式碼中，編譯組件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-148">Compiles an assembly from the source code contained in the specified files, using the specified compiler settings.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="76208-149">
            <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 物件，表示編譯的結果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-149">A <see cref="T:System.CodeDom.Compiler.CompilerResults" /> object that indicates the results of compilation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="76208-150">在.NET framework 1.0 和 1.1 版中，這個方法由<xref:System.CodeDom.Compiler.ICodeCompiler>所傳回的實作<xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A>的提供者的方法。</span><span class="sxs-lookup"><span data-stu-id="76208-150">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeCompiler> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A> method of the provider.</span></span> <span data-ttu-id="76208-151">在 2.0 版中，呼叫這個方法可以是直接在程式碼提供者即使它不會覆寫程式碼提供者。</span><span class="sxs-lookup"><span data-stu-id="76208-151">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="76208-152">如果程式碼提供者不會覆寫這個方法，<xref:System.CodeDom.Compiler.ICodeCompiler>實作會呼叫基底類別。</span><span class="sxs-lookup"><span data-stu-id="76208-152">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeCompiler> implementation is called by the base class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="76208-153">此方法或 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> 方法都沒有在衍生類別中覆寫。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-153">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> method is overridden in a derived class.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="76208-154">如果您覆寫這個方法，您必須呼叫基底類別的對應方法。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-154">If you override this method, you must not call the corresponding method of the base class.</span>
            </span>
            <span data-ttu-id="76208-155">基底類別方法會建立使用過時的衍生類別中的產生器<see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" />與預先存在的提供者，使用程式碼編譯器的相容性的方法。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-155">The base-class method creates a generator in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> method for compatibility with preexisting providers that use code compilers.</span>
            </span>
            <span data-ttu-id="76208-156">基底類別方法依序呼叫的對應方法<see cref="T:System.CodeDom.Compiler.ICodeCompiler" />執行此功能的實作。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-156">The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> implementation to perform this function.</span>
            </span>
            <span data-ttu-id="76208-157">您會收到<see cref="T:System.NotImplementedException" />如果您不使用程式碼編譯器的程式碼提供者呼叫基底類別方法。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-157">You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code compiler.</span>
            </span>
          </para>
        </block>
        <altmember cref="T:System.CodeDom.Compiler.CompilerParameters" />
        <altmember cref="T:System.CodeDom.Compiler.CompilerResults" />
      </Docs>
    </Member>
    <Member MemberName="CompileAssemblyFromSource">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.CompilerResults CompileAssemblyFromSource (System.CodeDom.Compiler.CompilerParameters options, params string[] sources);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.CompilerResults CompileAssemblyFromSource(class System.CodeDom.Compiler.CompilerParameters options, string[] sources) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CompileAssemblyFromSource (options As CompilerParameters, ParamArray sources As String()) As CompilerResults" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::CompilerResults ^ CompileAssemblyFromSource(System::CodeDom::Compiler::CompilerParameters ^ options, ... cli::array &lt;System::String ^&gt; ^ sources);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerResults</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.CodeDom.Compiler.CompilerParameters" />
        <Parameter Name="sources" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="options">
          <span data-ttu-id="76208-158">
            <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 物件，指示這個編譯的編譯器設定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-158">A <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> object that indicates the compiler settings for this compilation.</span>
          </span>
        </param>
        <param name="sources">
          <span data-ttu-id="76208-159">要編譯的原始程式碼字串陣列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-159">An array of source code strings to compile.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="76208-160">使用指定的編譯器設定，在含有原始程式碼的指定陣列中，編譯一個組件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-160">Compiles an assembly from the specified array of strings containing source code, using the specified compiler settings.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="76208-161">
            <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 物件，表示編譯的結果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-161">A <see cref="T:System.CodeDom.Compiler.CompilerResults" /> object that indicates the results of compilation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="76208-162">在.NET framework 1.0 和 1.1 版中，這個方法由<xref:System.CodeDom.Compiler.ICodeCompiler>所傳回的實作<xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A>的提供者的方法。</span><span class="sxs-lookup"><span data-stu-id="76208-162">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeCompiler> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A> method of the provider.</span></span> <span data-ttu-id="76208-163">在 2.0 版中，呼叫這個方法可以是直接在程式碼提供者即使它不會覆寫程式碼提供者。</span><span class="sxs-lookup"><span data-stu-id="76208-163">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="76208-164">如果程式碼提供者不會覆寫這個方法，<xref:System.CodeDom.Compiler.ICodeCompiler>實作會呼叫基底類別。</span><span class="sxs-lookup"><span data-stu-id="76208-164">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeCompiler> implementation is called by the base class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="76208-165">此方法或 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> 方法都沒有在衍生類別中覆寫。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-165">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> method is overridden in a derived class.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="76208-166">如果您覆寫這個方法，您必須呼叫基底類別的對應方法。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-166">If you override this method, you must not call the corresponding method of the base class.</span>
            </span>
            <span data-ttu-id="76208-167">基底類別方法會建立使用過時的衍生類別中的產生器<see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" />與預先存在的提供者，使用程式碼編譯器的相容性的方法。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-167">The base-class method creates a generator in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> method for compatibility with preexisting providers that use code compilers.</span>
            </span>
            <span data-ttu-id="76208-168">基底類別方法依序呼叫的對應方法<see cref="T:System.CodeDom.Compiler.ICodeCompiler" />執行此功能的實作。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-168">The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> implementation to perform this function.</span>
            </span>
            <span data-ttu-id="76208-169">您會收到<see cref="T:System.NotImplementedException" />如果您不使用程式碼編譯器的程式碼提供者呼叫基底類別方法。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-169">You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code compiler.</span>
            </span>
          </para>
        </block>
        <altmember cref="T:System.CodeDom.Compiler.CompilerParameters" />
        <altmember cref="T:System.CodeDom.Compiler.CompilerResults" />
      </Docs>
    </Member>
    <Member MemberName="CreateCompiler">
      <MemberSignature Language="C#" Value="public abstract System.CodeDom.Compiler.ICodeCompiler CreateCompiler ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.ICodeCompiler CreateCompiler() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function CreateCompiler () As ICodeCompiler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::CodeDom::Compiler::ICodeCompiler ^ CreateCompiler();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("ICodeCompiler is obsolete")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.ICodeCompiler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="76208-170">在衍生類別中覆寫時，請建立新的程式碼編譯器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-170">When overridden in a derived class, creates a new code compiler.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="76208-171">
            <see cref="T:System.CodeDom.Compiler.ICodeCompiler" />，可以用來編譯以 <see cref="N:System.CodeDom" /> 為基礎的原始程式碼表示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-171">An <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> that can be used for compilation of <see cref="N:System.CodeDom" /> based source code representations.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="76208-172">這個方法已過時中[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="76208-172">This method is obsolete in the [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)].</span></span> <span data-ttu-id="76208-173">建議的替代方式是呼叫<xref:System.CodeDom.Compiler.ICodeCompiler>直接用於程式碼提供者的方法。</span><span class="sxs-lookup"><span data-stu-id="76208-173">The recommended alternative is to call the <xref:System.CodeDom.Compiler.ICodeCompiler> methods that are directly available in the code provider.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="76208-174">在[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]，您應該實作<see cref="T:System.CodeDom.Compiler.ICodeCompiler" />中的成員<see cref="T:System.CodeDom.Compiler.CodeDomProvider" />類別，並擲回<see cref="T:System.NotSupportedException" />當呼叫此方法。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-174">In the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], you should implement the <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> members in the <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> class and throw a <see cref="T:System.NotSupportedException" /> when this method is called.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CreateEscapedIdentifier">
      <MemberSignature Language="C#" Value="public virtual string CreateEscapedIdentifier (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string CreateEscapedIdentifier(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateEscapedIdentifier (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ CreateEscapedIdentifier(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="76208-175">要建立逸出識別項的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-175">The string for which to create an escaped identifier.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="76208-176">為指定值建立逸出識別項。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-176">Creates an escaped identifier for the specified value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="76208-177">值的逸出識別項。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-177">The escaped identifier for the value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="76208-178"><xref:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier%2A> 測試與任何保留的識別項的衝突是否或語言關鍵字，如果是的話，會傳回具有特定語言的逸出程式碼格式設定的對等名稱。</span><span class="sxs-lookup"><span data-stu-id="76208-178"><xref:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier%2A> tests whether the identifier conflicts with any reserved or language keywords, and if so, returns an equivalent name with language-specific escape code formatting.</span></span> <span data-ttu-id="76208-179">這被指逸出識別項。</span><span class="sxs-lookup"><span data-stu-id="76208-179">This is referred to an escaped identifier.</span></span> <span data-ttu-id="76208-180">逸出識別項包含相同`value`但加上逸出程式碼格式，以便區別的關鍵字。</span><span class="sxs-lookup"><span data-stu-id="76208-180">The escaped identifier contains the same `value` but has escape-code formatting added to differentiate the identifier from the keyword.</span></span> <span data-ttu-id="76208-181">兩個實作的範例是前面`value`與"@"或方括號`value`與"["和"]"。</span><span class="sxs-lookup"><span data-stu-id="76208-181">Two implementation examples are preceding the `value` with "@" or bracketing the `value` with "[" and "]".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="76208-182">在.NET framework 1.0 和 1.1 版中，這個方法由<xref:System.CodeDom.Compiler.ICodeGenerator>所傳回的實作<xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A>的提供者的方法。</span><span class="sxs-lookup"><span data-stu-id="76208-182">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> method of the provider.</span></span> <span data-ttu-id="76208-183">在 2.0 版中，呼叫這個方法可以是直接在程式碼提供者即使它不會覆寫程式碼提供者。</span><span class="sxs-lookup"><span data-stu-id="76208-183">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="76208-184">如果程式碼提供者不會覆寫這個方法，<xref:System.CodeDom.Compiler.ICodeGenerator>實作會呼叫基底類別。</span><span class="sxs-lookup"><span data-stu-id="76208-184">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation is called by the base class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="76208-185">此方法或 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 方法都沒有在衍生類別中覆寫。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-185">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method is overridden in a derived class.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="76208-186">如果您覆寫這個方法，您必須呼叫基底類別的對應方法。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-186">If you override this method, you must not call the corresponding method of the base class.</span>
            </span>
            <span data-ttu-id="76208-187">基底類別方法會建立使用過時的衍生類別中的產生器<see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />與預先存在的提供者，使用程式碼產生器的相容性的方法。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-187">The base-class method creates a generator in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method for compatibility with preexisting providers that use code generators.</span>
            </span>
            <span data-ttu-id="76208-188">基底類別方法依序呼叫的對應方法<see cref="T:System.CodeDom.Compiler.ICodeGenerator" />執行此功能的實作。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-188">The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementation to perform this function.</span>
            </span>
            <span data-ttu-id="76208-189">您會收到<see cref="T:System.NotImplementedException" />如果您不使用程式碼產生器的程式碼提供者呼叫基底類別方法。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-189">You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code generator.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateGenerator">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="76208-190">在衍生類別中覆寫時，請建立新的程式碼產生器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-190">When overridden in a derived class, creates a new code generator.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateGenerator">
      <MemberSignature Language="C#" Value="public abstract System.CodeDom.Compiler.ICodeGenerator CreateGenerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.ICodeGenerator CreateGenerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function CreateGenerator () As ICodeGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::CodeDom::Compiler::ICodeGenerator ^ CreateGenerator();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("ICodeGenerator is obsolete")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.ICodeGenerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="76208-191">在衍生類別中覆寫時，請建立新的程式碼產生器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-191">When overridden in a derived class, creates a new code generator.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="76208-192">
            <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />，可以用來產生以 <see cref="N:System.CodeDom" /> 為基礎的原始程式碼表示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-192">An <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> that can be used to generate <see cref="N:System.CodeDom" /> based source code representations.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="76208-193">這個方法已過時中[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="76208-193">This method is obsolete in the [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)].</span></span> <span data-ttu-id="76208-194">建議的替代方式是呼叫<xref:System.CodeDom.Compiler.ICodeGenerator>方法中直接提供<xref:System.CodeDom.Compiler.CodeDomProvider>類別。</span><span class="sxs-lookup"><span data-stu-id="76208-194">The recommended alternative is to call the <xref:System.CodeDom.Compiler.ICodeGenerator> methods that are directly available in the <xref:System.CodeDom.Compiler.CodeDomProvider> class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="76208-195">在[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]，您應該實作<see cref="T:System.CodeDom.Compiler.ICodeGenerator" />中的成員<see cref="T:System.CodeDom.Compiler.CodeDomProvider" />類別，並擲回<see cref="T:System.NotSupportedException" />當呼叫此方法。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-195">In the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], you should implement the <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> members in the <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> class and throw a <see cref="T:System.NotSupportedException" /> when this method is called.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CreateGenerator">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.ICodeGenerator CreateGenerator (System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.ICodeGenerator CreateGenerator(class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateGenerator (output As TextWriter) As ICodeGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::ICodeGenerator ^ CreateGenerator(System::IO::TextWriter ^ output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.ICodeGenerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="output">
          <span data-ttu-id="76208-196">用來輸出的 <see cref="T:System.IO.TextWriter" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-196">A <see cref="T:System.IO.TextWriter" /> to use to output.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="76208-197">在衍生類別中覆寫時，請使用指定的輸出 <see cref="T:System.IO.TextWriter" /> 建立新的程式碼產生器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-197">When overridden in a derived class, creates a new code generator using the specified <see cref="T:System.IO.TextWriter" /> for output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="76208-198">
            <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />，可以用來產生以 <see cref="N:System.CodeDom" /> 為基礎的原始程式碼表示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-198">An <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> that can be used to generate <see cref="N:System.CodeDom" /> based source code representations.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="76208-199">這個方法會使用指定<xref:System.IO.TextWriter>輸出。</span><span class="sxs-lookup"><span data-stu-id="76208-199">This method uses the specified <xref:System.IO.TextWriter> for output.</span></span> <span data-ttu-id="76208-200">這個方法支援多個累加地更新原始碼的最佳化程式碼產生。</span><span class="sxs-lookup"><span data-stu-id="76208-200">This method supports more optimized code generation that incrementally updates the source code.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="76208-201">基底類別實作會呼叫<xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A>方法中的過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]且導致<xref:System.NotSupportedException>如果<xref:System.CodeDom.Compiler.ICodeGenerator>就不會傳回物件。</span><span class="sxs-lookup"><span data-stu-id="76208-201">The base class implementation calls the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> method, which is obsolete in the [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)] and results in a <xref:System.NotSupportedException> if an <xref:System.CodeDom.Compiler.ICodeGenerator> object is not returned.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="CreateGenerator">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.ICodeGenerator CreateGenerator (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.ICodeGenerator CreateGenerator(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateGenerator (fileName As String) As ICodeGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::ICodeGenerator ^ CreateGenerator(System::String ^ fileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.ICodeGenerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="76208-202">要輸出的檔案名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-202">The file name to output to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="76208-203">在衍生類別中覆寫時，請使用指定的輸出檔名建立新的程式碼產生器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-203">When overridden in a derived class, creates a new code generator using the specified file name for output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="76208-204">
            <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />，可以用來產生以 <see cref="N:System.CodeDom" /> 為基礎的原始程式碼表示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-204">An <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> that can be used to generate <see cref="N:System.CodeDom" /> based source code representations.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="76208-205">這個方法會使用指定的檔案名稱的輸出。</span><span class="sxs-lookup"><span data-stu-id="76208-205">This method uses the specified file name for output.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="76208-206">基底類別實作會呼叫<xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A>方法中的過時[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]且導致<xref:System.NotSupportedException>如果<xref:System.CodeDom.Compiler.ICodeGenerator>就不會傳回物件。</span><span class="sxs-lookup"><span data-stu-id="76208-206">The base class implementation calls the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> method, which is obsolete in the [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)] and results in a <xref:System.NotSupportedException> if an <xref:System.CodeDom.Compiler.ICodeGenerator> object is not returned.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateParser">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.ICodeParser CreateParser ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.ICodeParser CreateParser() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateParser () As ICodeParser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::ICodeParser ^ CreateParser();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("ICodeParser is obsolete")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.ICodeParser</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="76208-207">在衍生類別中覆寫時，請建立新的程式碼剖析器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-207">When overridden in a derived class, creates a new code parser.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="76208-208">可以用來剖析原始程式碼的 <see cref="T:System.CodeDom.Compiler.ICodeParser" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-208">An <see cref="T:System.CodeDom.Compiler.ICodeParser" /> that can be used to parse source code.</span>
          </span>
          <span data-ttu-id="76208-209">這個基底實作一定會傳回 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-209">The base implementation always returns <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateProvider">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="76208-210">取得指定語言的 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-210">Gets a <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> instance for the specified language.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateProvider">
      <MemberSignature Language="C#" Value="public static System.CodeDom.Compiler.CodeDomProvider CreateProvider (string language);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.Compiler.CodeDomProvider CreateProvider(string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateProvider (language As String) As CodeDomProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::Compiler::CodeDomProvider ^ CreateProvider(System::String ^ language);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CodeDomProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="language" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="language">
          <span data-ttu-id="76208-211">語言名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-211">The language name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="76208-212">取得指定語言的 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-212">Gets a <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> instance for the specified language.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="76208-213">為特定語言名稱實作的 CodeDOM 提供者。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-213">A CodeDOM provider that is implemented for the specified language name.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="76208-214">這個方法最常用於可能選擇性地使用數個提供者的其中一個應用程式中建立程式碼提供者執行個體。</span><span class="sxs-lookup"><span data-stu-id="76208-214">This method is most commonly used to create an instance of a code provider in an application that may optionally use one of several providers.</span></span> <span data-ttu-id="76208-215"><xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> 可讓您在執行階段指定您想要具現化的程式碼提供者。</span><span class="sxs-lookup"><span data-stu-id="76208-215"><xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> allows you to specify at run time the code provider you wish to instantiate.</span></span> <span data-ttu-id="76208-216">如果您知道哪一個程式碼提供者所使用的設計階段，您應該建立該程式碼提供者的執行個體而使用<xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="76208-216">If you know at design time which code provider is to be used, you should create an instance of that code provider rather than use the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> method.</span></span>  
  
 <span data-ttu-id="76208-217"><xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A>方法會傳回<xref:System.CodeDom.Compiler.CodeDomProvider>執行個體做為特定的語言名稱，則類似於呼叫<xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType>語言提供者型別方法。</span><span class="sxs-lookup"><span data-stu-id="76208-217">The <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> method returns a <xref:System.CodeDom.Compiler.CodeDomProvider> instance for a specific language name; it is similar to calling the <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> method with the language provider type.</span></span> <span data-ttu-id="76208-218">使用<xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A>當您想要以動態方式找出的語言名稱的設定提供者實作。</span><span class="sxs-lookup"><span data-stu-id="76208-218">Use <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> when you want to dynamically find a configured provider implementation for a language name.</span></span>  
  
 <span data-ttu-id="76208-219">如果一個以上的提供者實作設定的語言名稱<xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A>傳回最後一個相符的組態項目的提供者執行個體。</span><span class="sxs-lookup"><span data-stu-id="76208-219">If more than one provider implementation is configured for the language name, <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> returns a provider instance for the last matching configuration element.</span></span>  
  
 <span data-ttu-id="76208-220">使用<xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29?displayProperty=nameWithType>方法多載，當您想要的特定語言提供者實作。</span><span class="sxs-lookup"><span data-stu-id="76208-220">Use the <xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29?displayProperty=nameWithType> method overload when you want a specific language provider implementation.</span></span> <span data-ttu-id="76208-221">例如，使用<xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A>方法來取得提供者執行個體支援的語言名稱`"CSharp"`; 使用<xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29?displayProperty=nameWithType>方法多載來取得提供者執行個體，專為<xref:Microsoft.CSharp.CSharpCodeProvider?displayProperty=nameWithType>實作。</span><span class="sxs-lookup"><span data-stu-id="76208-221">For example, use the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> method to get a provider instance that supports the language name `"CSharp"`; use the <xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29?displayProperty=nameWithType> method overload to get a provider instance specifically for the <xref:Microsoft.CSharp.CSharpCodeProvider?displayProperty=nameWithType> implementation.</span></span> <span data-ttu-id="76208-222">您應該使用 [\]，CultureInfo、 物件\<xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%2CSystem.Object%5B%5D%29?displayProperty=nameWithType > 如果您有多個語言的程式碼提供者，而且您想要的特定程式碼提供者具現化的方法。</span><span class="sxs-lookup"><span data-stu-id="76208-222">You should use the [\], CultureInfo, Object\<xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> method if you have multiple code providers for a language and you desire to instantiate a specific code provider.</span></span>  
  
 <span data-ttu-id="76208-223"><xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A>方法會檢查是否至少一個提供者實作都支援特定的語言。</span><span class="sxs-lookup"><span data-stu-id="76208-223">The <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A> method checks whether at least one provider implementation supports a specific language.</span></span> <span data-ttu-id="76208-224">您可以驗證使用語言名稱<xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A>再傳遞給<xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A>。</span><span class="sxs-lookup"><span data-stu-id="76208-224">You can validate a language name using <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A> before passing it to <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A>.</span></span> <span data-ttu-id="76208-225">如果您傳遞至不支援的語言名稱<xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A><xref:System.Configuration.ConfigurationException?displayProperty=nameWithType>就會擲回。</span><span class="sxs-lookup"><span data-stu-id="76208-225">If you pass an unsupported language name to <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> a <xref:System.Configuration.ConfigurationException?displayProperty=nameWithType> is thrown.</span></span>  
  
 <span data-ttu-id="76208-226"><xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A>方法可以用來判斷所有<xref:System.CodeDom.Compiler.CodeDomProvider>實作的電腦上，包括開發人員和中所識別的編譯器廠商所提供的其他實作[ &lt;system.codedom&gt;元素](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)電腦組態檔 (Machine.config) 中。</span><span class="sxs-lookup"><span data-stu-id="76208-226">The <xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A> method can be used to determine all <xref:System.CodeDom.Compiler.CodeDomProvider> implementations on a computer, including additional implementations provided by developers and compiler vendors that are identified in the [&lt;system.codedom&gt; Element](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) in the machine configuration file (Machine.config).</span></span>  
  
 <span data-ttu-id="76208-227"><xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A>方法傳回的執行個體<xref:System.CodeDom.Compiler.CodeDomProvider>特定語言的實作。</span><span class="sxs-lookup"><span data-stu-id="76208-227">The <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> method returns an instance of a <xref:System.CodeDom.Compiler.CodeDomProvider> implementation for a specific language.</span></span>  
  
 <span data-ttu-id="76208-228">語言名稱不區分大小寫。</span><span class="sxs-lookup"><span data-stu-id="76208-228">Language names are case-insensitive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="76208-229">下列程式碼範例會判斷<xref:System.CodeDom.Compiler.CodeDomProvider>實作的輸入的語言，並顯示語言提供者設定的設定。</span><span class="sxs-lookup"><span data-stu-id="76208-229">The following code example determines the <xref:System.CodeDom.Compiler.CodeDomProvider> implementation for an input language and displays the configured settings for the language provider.</span></span> <span data-ttu-id="76208-230">這個程式碼範例是針對所提供之較大範例的一部分<xref:System.CodeDom.Compiler.CompilerInfo>類別。</span><span class="sxs-lookup"><span data-stu-id="76208-230">This code example is part of a larger example provided for the <xref:System.CodeDom.Compiler.CompilerInfo> class.</span></span>  
  
 [!code-cpp[CodeDom_CompilerInfo#6](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#6)]
 [!code-csharp[CodeDom_CompilerInfo#6](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#6)]
 [!code-vb[CodeDom_CompilerInfo#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">
          <span data-ttu-id="76208-231">
            <paramref name="language" /> 在這部電腦上沒有已設定的提供者。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-231">The <paramref name="language" /> does not have a configured provider on this computer.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="76208-232">
            <paramref name="language" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-232">The <paramref name="language" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="76208-233">呼叫端沒有必要的權限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-233">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="76208-234">針對完全信任立即呼叫者。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-234">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="76208-235">這個成員無法供部分信任的程式碼使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-235">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateProvider">
      <MemberSignature Language="C#" Value="public static System.CodeDom.Compiler.CodeDomProvider CreateProvider (string language, System.Collections.Generic.IDictionary&lt;string,string&gt; providerOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.Compiler.CodeDomProvider CreateProvider(string language, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; providerOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateProvider (language As String, providerOptions As IDictionary(Of String, String)) As CodeDomProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::Compiler::CodeDomProvider ^ CreateProvider(System::String ^ language, System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ providerOptions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CodeDomProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="language" Type="System.String" />
        <Parameter Name="providerOptions" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="language">
          <span data-ttu-id="76208-236">語言名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-236">The language name.</span>
          </span>
        </param>
        <param name="providerOptions">
          <span data-ttu-id="76208-237">來自組態檔的提供者選項集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-237">A collection of provider options from the configuration file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="76208-238">取得指定之語言和提供者選項的 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-238">Gets a <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> instance for the specified language and provider options.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="76208-239">為特定語言名稱和選項實作的 CodeDOM 提供者。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-239">A CodeDOM provider that is implemented for the specified language name and options.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="76208-240">這個方法最常用於可能選擇性地使用數個提供者的其中一個應用程式中建立程式碼提供者執行個體。</span><span class="sxs-lookup"><span data-stu-id="76208-240">This method is most commonly used to create an instance of a code provider in an application that may optionally use one of several providers.</span></span> <span data-ttu-id="76208-241"><xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29> 可讓您在執行階段指定您想要具現化的程式碼提供者版本。</span><span class="sxs-lookup"><span data-stu-id="76208-241"><xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29> enables you to specify at run time the version of the code provider you want to instantiate.</span></span> <span data-ttu-id="76208-242">如果您知道哪一個程式碼提供者所使用的設計階段，您應該建立該程式碼提供者，而不是使用執行個體<xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29>方法。</span><span class="sxs-lookup"><span data-stu-id="76208-242">If you know at design time which code provider is to be used, you should create an instance of that code provider instead of using the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29> method.</span></span>  
  
 <span data-ttu-id="76208-243">使用<xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29>當您想要以動態方式找出設定提供者實作以特定語言和選項。</span><span class="sxs-lookup"><span data-stu-id="76208-243">Use <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29> when you want to dynamically find a configured provider implementation for a specific language and options.</span></span> <span data-ttu-id="76208-244">語言名稱不區分大小寫。</span><span class="sxs-lookup"><span data-stu-id="76208-244">Language names are case-insensitive.</span></span> <span data-ttu-id="76208-245">如需支援的提供者選項的資訊，請參閱特定的 CodeDOM 提供者文件。</span><span class="sxs-lookup"><span data-stu-id="76208-245">For information about supported provider options, see the specific CodeDOM provider documentation.</span></span>  
  
 <span data-ttu-id="76208-246">驗證提供者和呼叫提供者，如果一個以上的提供者實作設定的語言名稱的相關資訊，請參閱的 < 備註 > 一節<xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%29>方法。</span><span class="sxs-lookup"><span data-stu-id="76208-246">For information about validating a provider and calling a provider if more than one provider implementation is configured for the language name, see the Remarks section of the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%29> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="76208-247">下列範例示範如何建立提供者執行個體使用`providerOptions`參數。</span><span class="sxs-lookup"><span data-stu-id="76208-247">The following example shows how to create an instance of a provider by using the `providerOptions` parameter.</span></span>  
  
 [!code-csharp[CodeDomProvider.ProviderOptions#1](~/samples/snippets/csharp/VS_Snippets_CLR/codedomprovider.provideroptions/cs/program.cs#1)]
 [!code-vb[CodeDomProvider.ProviderOptions#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/codedomprovider.provideroptions/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateValidIdentifier">
      <MemberSignature Language="C#" Value="public virtual string CreateValidIdentifier (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string CreateValidIdentifier(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateValidIdentifier (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ CreateValidIdentifier(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="76208-248">要產生有效識別項的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-248">The string for which to generate a valid identifier.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="76208-249">為指定值建立有效的識別項。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-249">Creates a valid identifier for the specified value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="76208-250">指定值的有效識別項。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-250">A valid identifier for the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="76208-251"><xref:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier%2A> 測試是否與保留衝突的識別項或多個語言關鍵字，如果，嘗試傳回有效的識別項名稱，並不會衝突。</span><span class="sxs-lookup"><span data-stu-id="76208-251"><xref:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier%2A> tests whether the identifier conflicts with reserved or language keywords, and if so, attempts to return a valid identifier name that does not conflict.</span></span> <span data-ttu-id="76208-252">傳回的識別項通常只會稍微修改，以便識別項區別的關鍵字;例如，名稱可能會加底線 ("_") 字元。</span><span class="sxs-lookup"><span data-stu-id="76208-252">Usually the returned identifier is only slightly modified to differentiate the identifier from the keyword; for example, the name might be preceded by the underscore ("_") character.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="76208-253">在.NET framework 1.0 和 1.1 版中，這個方法由<xref:System.CodeDom.Compiler.ICodeGenerator>所傳回的實作<xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A>的提供者的方法。</span><span class="sxs-lookup"><span data-stu-id="76208-253">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> method of the provider.</span></span> <span data-ttu-id="76208-254">在 2.0 版中，呼叫這個方法可以是直接在程式碼提供者即使它不會覆寫程式碼提供者。</span><span class="sxs-lookup"><span data-stu-id="76208-254">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="76208-255">如果程式碼提供者不會覆寫這個方法，<xref:System.CodeDom.Compiler.ICodeGenerator>實作會呼叫基底類別。</span><span class="sxs-lookup"><span data-stu-id="76208-255">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation is called by the base class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="76208-256">此方法或 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 方法都沒有在衍生類別中覆寫。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-256">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method is overridden in a derived class.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="76208-257">如果您覆寫這個方法，您必須呼叫基底類別的對應方法。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-257">If you override this method, you must not call the corresponding method of the base class.</span>
            </span>
            <span data-ttu-id="76208-258">基底類別方法會建立使用過時的衍生類別中的產生器<see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />與預先存在的提供者，使用程式碼產生器的相容性的方法。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-258">The base-class method creates a generator in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method for compatibility with preexisting providers that use code generators.</span>
            </span>
            <span data-ttu-id="76208-259">基底類別方法依序呼叫的對應方法<see cref="T:System.CodeDom.Compiler.ICodeGenerator" />執行此功能的實作。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-259">The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementation to perform this function.</span>
            </span>
            <span data-ttu-id="76208-260">您會收到<see cref="T:System.NotImplementedException" />如果您不使用程式碼產生器的程式碼提供者呼叫基底類別方法。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-260">You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code generator.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="FileExtension">
      <MemberSignature Language="C#" Value="public virtual string FileExtension { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FileExtension" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CodeDomProvider.FileExtension" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property FileExtension As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ FileExtension { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="76208-261">取得目前語言的原始程式碼檔案所使用的預設副檔名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-261">Gets the default file name extension to use for source code files in the current language.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="76208-262">對應至目前語言的原始程式碼的檔案名稱的副檔名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-262">A file name extension corresponding to the extension of the source files of the current language.</span>
          </span>
          <span data-ttu-id="76208-263">這個基底實作一定會傳回 <see cref="F:System.String.Empty" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-263">The base implementation always returns <see cref="F:System.String.Empty" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="76208-264">這個屬性供程式碼產生器和程式碼編譯器，指出應該產生或使用檔案的副檔名。</span><span class="sxs-lookup"><span data-stu-id="76208-264">This property is used by code generators and code compilers to indicate what file extensions should be generated or used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="76208-265">下列程式碼範例建立的執行個體<xref:Microsoft.VisualBasic.VBCodeProvider?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="76208-265">The following code example creates an instance of <xref:Microsoft.VisualBasic.VBCodeProvider?displayProperty=nameWithType>.</span></span> <span data-ttu-id="76208-266">這個範例會顯示提供者名稱、 雜湊程式碼和預設副檔名為新的提供者執行個體。</span><span class="sxs-lookup"><span data-stu-id="76208-266">The example displays the provider name, hash code and default file name extension for the new provider instance.</span></span>  
  
 [!code-cpp[CodeDom_CompilerInfo#3](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#3)]
 [!code-csharp[CodeDom_CompilerInfo#3](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#3)]
 [!code-vb[CodeDom_CompilerInfo#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromCompileUnit">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromCompileUnit (System.CodeDom.CodeCompileUnit compileUnit, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromCompileUnit(class System.CodeDom.CodeCompileUnit compileUnit, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateCodeFromCompileUnit (compileUnit As CodeCompileUnit, writer As TextWriter, options As CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromCompileUnit(System::CodeDom::CodeCompileUnit ^ compileUnit, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="compileUnit" Type="System.CodeDom.CodeCompileUnit" />
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Parameters>
      <Docs>
        <param name="compileUnit">
          <span data-ttu-id="76208-267">要為其產生程式碼的 <see cref="T:System.CodeDom.CodeCompileUnit" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-267">A <see cref="T:System.CodeDom.CodeCompileUnit" /> for which to generate code.</span>
          </span>
        </param>
        <param name="writer">
          <span data-ttu-id="76208-268">接收輸出程式碼的 <see cref="T:System.IO.TextWriter" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-268">The <see cref="T:System.IO.TextWriter" /> to which the output code is sent.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="76208-269">
            <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />，表示要用來產生程式碼的選項。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-269">A <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> that indicates the options to use for generating code.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="76208-270">產生指定程式碼文件物件模型 (CodeDOM) 編譯單位 (Compilation Unit) 的程式碼，並使用指定的選項將其傳送至指定的文字寫入器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-270">Generates code for the specified Code Document Object Model (CodeDOM) compilation unit and sends it to the specified text writer, using the specified options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="76208-271">在.NET framework 1.0 和 1.1 版中，這個方法由<xref:System.CodeDom.Compiler.ICodeGenerator>所傳回的實作<xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A>的提供者的方法。</span><span class="sxs-lookup"><span data-stu-id="76208-271">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> method of the provider.</span></span> <span data-ttu-id="76208-272">在 2.0 版中，呼叫這個方法可以是直接在程式碼提供者即使它不會覆寫程式碼提供者。</span><span class="sxs-lookup"><span data-stu-id="76208-272">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="76208-273">如果程式碼提供者不會覆寫這個方法，<xref:System.CodeDom.Compiler.ICodeGenerator>實作會呼叫基底類別。</span><span class="sxs-lookup"><span data-stu-id="76208-273">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation is called by the base class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="76208-274">下列程式碼範例示範使用<xref:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit%2A>方法來產生程式碼中的"Hello World"應用程式<xref:System.CodeDom.CodeCompileUnit>。</span><span class="sxs-lookup"><span data-stu-id="76208-274">The following code example shows the use of the <xref:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit%2A> method to generate code for a "Hello World" application from a <xref:System.CodeDom.CodeCompileUnit>.</span></span> <span data-ttu-id="76208-275">這個範例是針對所提供之較大範例的一部分<xref:System.CodeDom.Compiler.CodeDomProvider>類別。</span><span class="sxs-lookup"><span data-stu-id="76208-275">This example is part of a larger example provided for the <xref:System.CodeDom.Compiler.CodeDomProvider> class.</span></span>  
  
 [!code-cpp[CodeDomExample#3](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDomExample/CPP/source.cpp#3)]
 [!code-csharp[CodeDomExample#3](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDomExample/CS/source.cs#3)]
 [!code-vb[CodeDomExample#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomExample/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="76208-276">此方法或 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 方法都沒有在衍生類別中覆寫。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-276">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method is overridden in a derived class.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="76208-277">如果您覆寫這個方法，您必須呼叫基底類別的對應方法。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-277">If you override this method, you must not call the corresponding method of the base class.</span>
            </span>
            <span data-ttu-id="76208-278">基底類別方法會建立使用過時的衍生類別中的產生器<see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />與預先存在的提供者，使用程式碼產生器的相容性的方法。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-278">The base-class method creates a generator in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method for compatibility with preexisting providers that use code generators.</span>
            </span>
            <span data-ttu-id="76208-279">基底類別方法依序呼叫的對應方法<see cref="T:System.CodeDom.Compiler.ICodeGenerator" />執行此功能的實作。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-279">The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementation to perform this function.</span>
            </span>
            <span data-ttu-id="76208-280">您會收到<see cref="T:System.NotImplementedException" />如果您不使用程式碼產生器的程式碼提供者呼叫基底類別方法。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-280">You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code generator.</span>
            </span>
          </para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeExpression" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromExpression">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromExpression (System.CodeDom.CodeExpression expression, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromExpression(class System.CodeDom.CodeExpression expression, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateCodeFromExpression (expression As CodeExpression, writer As TextWriter, options As CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromExpression(System::CodeDom::CodeExpression ^ expression, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.CodeDom.CodeExpression" />
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="76208-281">
            <see cref="T:System.CodeDom.CodeExpression" /> 物件，指示要為其產生程式碼的運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-281">A <see cref="T:System.CodeDom.CodeExpression" /> object that indicates the expression for which to generate code.</span>
          </span>
        </param>
        <param name="writer">
          <span data-ttu-id="76208-282">接收輸出程式碼的 <see cref="T:System.IO.TextWriter" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-282">The <see cref="T:System.IO.TextWriter" /> to which output code is sent.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="76208-283">
            <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />，表示要用來產生程式碼的選項。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-283">A <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> that indicates the options to use for generating code.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="76208-284">產生指定程式碼文件物件模型 (CodeDOM) 運算式的程式碼，並使用指定的選項將其傳送至指定的文字寫入器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-284">Generates code for the specified Code Document Object Model (CodeDOM) expression and sends it to the specified text writer, using the specified options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="76208-285">在.NET framework 1.0 和 1.1 版中，這個方法由<xref:System.CodeDom.Compiler.ICodeGenerator>所傳回的實作<xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A>的提供者的方法。</span><span class="sxs-lookup"><span data-stu-id="76208-285">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> method of the provider.</span></span> <span data-ttu-id="76208-286">在 2.0 版中，呼叫這個方法可以是直接在程式碼提供者即使它不會覆寫程式碼提供者。</span><span class="sxs-lookup"><span data-stu-id="76208-286">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="76208-287">如果程式碼提供者不會覆寫這個方法，<xref:System.CodeDom.Compiler.ICodeGenerator>實作會呼叫基底類別。</span><span class="sxs-lookup"><span data-stu-id="76208-287">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation is called by the base class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="76208-288">此方法或 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 方法都沒有在衍生類別中覆寫。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-288">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method is overridden in a derived class.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="76208-289">如果您覆寫這個方法，您必須呼叫基底類別的對應方法。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-289">If you override this method, you must not call the corresponding method of the base class.</span>
            </span>
            <span data-ttu-id="76208-290">基底類別方法會建立使用過時的衍生類別中的產生器<see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />與預先存在的提供者，使用程式碼產生器的相容性的方法。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-290">The base-class method creates a generator in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method for compatibility with preexisting providers that use code generators.</span>
            </span>
            <span data-ttu-id="76208-291">基底類別方法依序呼叫的對應方法<see cref="T:System.CodeDom.Compiler.ICodeGenerator" />執行此功能的實作。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-291">The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementation to perform this function.</span>
            </span>
            <span data-ttu-id="76208-292">您會收到<see cref="T:System.NotImplementedException" />如果您不使用程式碼產生器的程式碼提供者呼叫基底類別方法。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-292">You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code generator.</span>
            </span>
          </para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeExpression" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromMember">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromMember (System.CodeDom.CodeTypeMember member, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromMember(class System.CodeDom.CodeTypeMember member, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateCodeFromMember (member As CodeTypeMember, writer As TextWriter, options As CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromMember(System::CodeDom::CodeTypeMember ^ member, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.CodeDom.CodeTypeMember" />
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Parameters>
      <Docs>
        <param name="member">
          <span data-ttu-id="76208-293">
            <see cref="T:System.CodeDom.CodeTypeMember" /> 物件，指示要為其產生程式碼的成員。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-293">A <see cref="T:System.CodeDom.CodeTypeMember" /> object that indicates the member for which to generate code.</span>
          </span>
        </param>
        <param name="writer">
          <span data-ttu-id="76208-294">接收輸出程式碼的 <see cref="T:System.IO.TextWriter" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-294">The <see cref="T:System.IO.TextWriter" /> to which output code is sent.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="76208-295">
            <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />，表示要用來產生程式碼的選項。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-295">A <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> that indicates the options to use for generating code.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="76208-296">產生指定程式碼文件物件模型 (CodeDOM) 成員宣告的程式碼，並使用指定的選項將其傳送至指定的文字寫入器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-296">Generates code for the specified Code Document Object Model (CodeDOM) member declaration and sends it to the specified text writer, using the specified options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="76208-297">基底類別實作會擲回<xref:System.NotImplementedException>。</span><span class="sxs-lookup"><span data-stu-id="76208-297">The base class implementation throws a <xref:System.NotImplementedException>.</span></span> <span data-ttu-id="76208-298">請參閱<xref:Microsoft.CSharp.CSharpCodeProvider.GenerateCodeFromMember%2A?displayProperty=nameWithType>文件描述此方法的實作。</span><span class="sxs-lookup"><span data-stu-id="76208-298">See <xref:Microsoft.CSharp.CSharpCodeProvider.GenerateCodeFromMember%2A?displayProperty=nameWithType> for documentation describing an implementation of this method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="76208-299">下列程式碼範例示範使用<xref:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember%2A>方法由實作<xref:Microsoft.CSharp.CSharpCodeProvider>和<xref:Microsoft.VisualBasic.VBCodeProvider>類別。</span><span class="sxs-lookup"><span data-stu-id="76208-299">The following code example shows the use of the <xref:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember%2A> method as implemented by the <xref:Microsoft.CSharp.CSharpCodeProvider> and <xref:Microsoft.VisualBasic.VBCodeProvider> classes.</span></span>  
  
 [!code-csharp[CodeDom_GenerateCodeFromMember#1](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_GenerateCodeFromMember/cs/program.cs#1)]
 [!code-vb[CodeDom_GenerateCodeFromMember#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_GenerateCodeFromMember/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="76208-300">不可以在衍生類別中覆寫這個方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-300">This method is not overridden in a derived class.</span>
          </span>
        </exception>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeTypeMember" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromNamespace">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromNamespace (System.CodeDom.CodeNamespace codeNamespace, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromNamespace(class System.CodeDom.CodeNamespace codeNamespace, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromNamespace(System::CodeDom::CodeNamespace ^ codeNamespace, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codeNamespace" Type="System.CodeDom.CodeNamespace" />
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Parameters>
      <Docs>
        <param name="codeNamespace">
          <span data-ttu-id="76208-301">
            <see cref="T:System.CodeDom.CodeNamespace" /> 物件，指示要為其產生程式碼的命名空間。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-301">A <see cref="T:System.CodeDom.CodeNamespace" /> object that indicates the namespace for which to generate code.</span>
          </span>
        </param>
        <param name="writer">
          <span data-ttu-id="76208-302">接收輸出程式碼的 <see cref="T:System.IO.TextWriter" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-302">The <see cref="T:System.IO.TextWriter" /> to which output code is sent.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="76208-303">
            <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />，表示要用來產生程式碼的選項。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-303">A <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> that indicates the options to use for generating code.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="76208-304">產生指定程式碼文件物件模型 (CodeDOM) 命名空間的程式碼，並使用指定選項將其傳送至指定的文字寫入器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-304">Generates code for the specified Code Document Object Model (CodeDOM) namespace and sends it to the specified text writer, using the specified options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="76208-305">在.NET framework 1.0 和 1.1 版中，這個方法由<xref:System.CodeDom.Compiler.ICodeGenerator>所傳回的實作<xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A>的提供者的方法。</span><span class="sxs-lookup"><span data-stu-id="76208-305">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> method of the provider.</span></span> <span data-ttu-id="76208-306">在 2.0 版中，呼叫這個方法可以是直接在程式碼提供者即使它不會覆寫程式碼提供者。</span><span class="sxs-lookup"><span data-stu-id="76208-306">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="76208-307">如果程式碼提供者不會覆寫這個方法，<xref:System.CodeDom.Compiler.ICodeGenerator>實作會呼叫基底類別。</span><span class="sxs-lookup"><span data-stu-id="76208-307">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation is called by the base class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="76208-308">此方法或 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 方法都沒有在衍生類別中覆寫。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-308">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method is overridden in a derived class.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="76208-309">如果您覆寫這個方法，您必須呼叫基底類別的對應方法。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-309">If you override this method, you must not call the corresponding method of the base class.</span>
            </span>
            <span data-ttu-id="76208-310">基底類別方法會建立使用過時的衍生類別中的產生器<see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />與預先存在的提供者，使用程式碼產生器的相容性的方法。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-310">The base-class method creates a generator in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method for compatibility with preexisting providers that use code generators.</span>
            </span>
            <span data-ttu-id="76208-311">基底類別方法依序呼叫的對應方法<see cref="T:System.CodeDom.Compiler.ICodeGenerator" />執行此功能的實作。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-311">The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementation to perform this function.</span>
            </span>
            <span data-ttu-id="76208-312">您會收到<see cref="T:System.NotImplementedException" />如果您不使用程式碼產生器的程式碼提供者呼叫基底類別方法。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-312">You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code generator.</span>
            </span>
          </para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeNamespace" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromStatement">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromStatement (System.CodeDom.CodeStatement statement, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromStatement(class System.CodeDom.CodeStatement statement, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateCodeFromStatement (statement As CodeStatement, writer As TextWriter, options As CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromStatement(System::CodeDom::CodeStatement ^ statement, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="statement" Type="System.CodeDom.CodeStatement" />
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Parameters>
      <Docs>
        <param name="statement">
          <span data-ttu-id="76208-313">
            <see cref="T:System.CodeDom.CodeStatement" />，包含要為其產生程式碼的 CodeDOM 項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-313">A <see cref="T:System.CodeDom.CodeStatement" /> containing the CodeDOM elements for which to generate code.</span>
          </span>
        </param>
        <param name="writer">
          <span data-ttu-id="76208-314">接收輸出程式碼的 <see cref="T:System.IO.TextWriter" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-314">The <see cref="T:System.IO.TextWriter" /> to which output code is sent.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="76208-315">
            <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />，表示要用來產生程式碼的選項。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-315">A <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> that indicates the options to use for generating code.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="76208-316">產生指定程式碼文件物件模型 (CodeDOM) 陳述式的程式碼，並使用指定選項將其傳送至指定的文字寫入器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-316">Generates code for the specified Code Document Object Model (CodeDOM) statement and sends it to the specified text writer, using the specified options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="76208-317">在.NET framework 1.0 和 1.1 版中，這個方法由<xref:System.CodeDom.Compiler.ICodeGenerator>所傳回的實作<xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A>的提供者的方法。</span><span class="sxs-lookup"><span data-stu-id="76208-317">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> method of the provider.</span></span> <span data-ttu-id="76208-318">在 2.0 版中，呼叫這個方法可以是直接在程式碼提供者即使它不會覆寫程式碼提供者。</span><span class="sxs-lookup"><span data-stu-id="76208-318">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="76208-319">如果程式碼提供者不會覆寫這個方法，<xref:System.CodeDom.Compiler.ICodeGenerator>實作會呼叫基底類別。</span><span class="sxs-lookup"><span data-stu-id="76208-319">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation is called by the base class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="76208-320">此方法或 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 方法都沒有在衍生類別中覆寫。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-320">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method is overridden in a derived class.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="76208-321">如果您覆寫這個方法，您必須呼叫基底類別的對應方法。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-321">If you override this method, you must not call the corresponding method of the base class.</span>
            </span>
            <span data-ttu-id="76208-322">基底類別方法會建立使用過時的衍生類別中的產生器<see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />與預先存在的提供者，使用程式碼產生器的相容性的方法。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-322">The base-class method creates a generator in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method for compatibility with preexisting providers that use code generators.</span>
            </span>
            <span data-ttu-id="76208-323">基底類別方法依序呼叫的對應方法<see cref="T:System.CodeDom.Compiler.ICodeGenerator" />執行此功能的實作。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-323">The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementation to perform this function.</span>
            </span>
            <span data-ttu-id="76208-324">您會收到<see cref="T:System.NotImplementedException" />如果您不使用程式碼產生器的程式碼提供者呼叫基底類別方法。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-324">You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code generator.</span>
            </span>
          </para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeStatement" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromType">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromType (System.CodeDom.CodeTypeDeclaration codeType, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromType(class System.CodeDom.CodeTypeDeclaration codeType, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateCodeFromType (codeType As CodeTypeDeclaration, writer As TextWriter, options As CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromType(System::CodeDom::CodeTypeDeclaration ^ codeType, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codeType" Type="System.CodeDom.CodeTypeDeclaration" />
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Parameters>
      <Docs>
        <param name="codeType">
          <span data-ttu-id="76208-325">
            <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 物件，指示要為其產生程式碼的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-325">A <see cref="T:System.CodeDom.CodeTypeDeclaration" /> object that indicates the type for which to generate code.</span>
          </span>
        </param>
        <param name="writer">
          <span data-ttu-id="76208-326">接收輸出程式碼的 <see cref="T:System.IO.TextWriter" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-326">The <see cref="T:System.IO.TextWriter" /> to which output code is sent.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="76208-327">
            <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />，表示要用來產生程式碼的選項。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-327">A <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> that indicates the options to use for generating code.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="76208-328">產生指定程式碼文件物件模型 (CodeDOM) 型別宣告的程式碼，並使用指定選項將其傳送至指定的文字寫入器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-328">Generates code for the specified Code Document Object Model (CodeDOM) type declaration and sends it to the specified text writer, using the specified options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="76208-329">在.NET framework 1.0 和 1.1 版中，這個方法由<xref:System.CodeDom.Compiler.ICodeGenerator>所傳回的實作<xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A>的提供者的方法。</span><span class="sxs-lookup"><span data-stu-id="76208-329">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> method of the provider.</span></span> <span data-ttu-id="76208-330">在 2.0 版中，呼叫這個方法可以是直接在程式碼提供者即使它不會覆寫程式碼提供者。</span><span class="sxs-lookup"><span data-stu-id="76208-330">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="76208-331">如果程式碼提供者不會覆寫這個方法，<xref:System.CodeDom.Compiler.ICodeGenerator>實作會呼叫基底類別。</span><span class="sxs-lookup"><span data-stu-id="76208-331">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation is called by the base class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="76208-332">此方法或 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 方法都沒有在衍生類別中覆寫。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-332">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method is overridden in a derived class.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="76208-333">如果您覆寫這個方法，您必須呼叫基底類別的對應方法。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-333">If you override this method, you must not call the corresponding method of the base class.</span>
            </span>
            <span data-ttu-id="76208-334">基底類別方法會建立使用過時的衍生類別中的產生器<see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />與預先存在的提供者，使用程式碼產生器的相容性的方法。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-334">The base-class method creates a generator in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method for compatibility with preexisting providers that use code generators.</span>
            </span>
            <span data-ttu-id="76208-335">基底類別方法依序呼叫的對應方法<see cref="T:System.CodeDom.Compiler.ICodeGenerator" />執行此功能的實作。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-335">The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementation to perform this function.</span>
            </span>
            <span data-ttu-id="76208-336">您會收到<see cref="T:System.NotImplementedException" />如果您不使用程式碼產生器的程式碼提供者呼叫基底類別方法。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-336">You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code generator.</span>
            </span>
          </para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GetAllCompilerInfo">
      <MemberSignature Language="C#" Value="public static System.CodeDom.Compiler.CompilerInfo[] GetAllCompilerInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.Compiler.CompilerInfo[] GetAllCompilerInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAllCompilerInfo () As CompilerInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::CodeDom::Compiler::CompilerInfo ^&gt; ^ GetAllCompilerInfo();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="76208-337">傳回這部電腦的語言提供者和編譯器組態設定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-337">Returns the language provider and compiler configuration settings for this computer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="76208-338">
            <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> 型別的陣列，表示所有已設定 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 實作的設定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-338">An array of type <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> representing the settings of all configured <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> implementations.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="76208-339">使用<xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A>方法來列舉電腦上的語言提供者設定。</span><span class="sxs-lookup"><span data-stu-id="76208-339">Use the <xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A> method to enumerate the language provider settings on a computer.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="76208-340">在[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]，.NET Framework 所提供的預設語言提供者中未指定[ &lt;system.codedom&gt;元素](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)編譯器組態區段，並不能移除，因此這個方法會傳回預設的提供者和組態檔中指定任何資訊。</span><span class="sxs-lookup"><span data-stu-id="76208-340">In the [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)], the default language providers supplied by the .NET Framework are not specified in the [&lt;system.codedom&gt; Element](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) compiler configuration section and cannot be removed, so this method returns information about the default providers and any specified in the configuration file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="76208-341">下列程式碼範例會列舉電腦上的語言提供者，並顯示每個語言提供者的組態和編譯器設定。</span><span class="sxs-lookup"><span data-stu-id="76208-341">The following code example enumerates the language providers on the computer and displays the configuration and compiler settings for each language provider.</span></span> <span data-ttu-id="76208-342">這個程式碼範例是針對所提供之較大範例的一部分<xref:System.CodeDom.Compiler.CompilerInfo>類別。</span><span class="sxs-lookup"><span data-stu-id="76208-342">This code example is part of a larger example provided for the <xref:System.CodeDom.Compiler.CompilerInfo> class.</span></span>  
  
 [!code-cpp[CodeDom_CompilerInfo#8](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#8)]
 [!code-csharp[CodeDom_CompilerInfo#8](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#8)]
 [!code-vb[CodeDom_CompilerInfo#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="76208-343">呼叫端沒有必要的權限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-343">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="76208-344">針對完全信任立即呼叫者。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-344">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="76208-345">這個成員無法供部分信任的程式碼使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-345">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="T:System.CodeDom.Compiler.CompilerInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetCompilerInfo">
      <MemberSignature Language="C#" Value="public static System.CodeDom.Compiler.CompilerInfo GetCompilerInfo (string language);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.Compiler.CompilerInfo GetCompilerInfo(string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCompilerInfo (language As String) As CompilerInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::Compiler::CompilerInfo ^ GetCompilerInfo(System::String ^ language);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="language" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="language">
          <span data-ttu-id="76208-346">語言名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-346">A language name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="76208-347">傳回指定語言的語言提供者和編譯器組態設定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-347">Returns the language provider and compiler configuration settings for the specified language.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="76208-348">已設定 <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> 實作設定填入的 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-348">A <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> object populated with settings of the configured <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> implementation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="76208-349">[ &lt;System.codedom&gt;元素](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)機器組態檔包含每個語言提供者和編譯器組態設定<xref:System.CodeDom.Compiler.CodeDomProvider>電腦上的實作。</span><span class="sxs-lookup"><span data-stu-id="76208-349">The [&lt;system.codedom&gt; Element](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) in the machine configuration file contains the language provider and compiler configuration settings for each <xref:System.CodeDom.Compiler.CodeDomProvider> implementation on the computer.</span></span> <span data-ttu-id="76208-350">電腦組態檔的相關資訊，請參閱中的電腦組態檔區段[設定應用程式](http://msdn.microsoft.com/library/86bd26d3-737e-4484-9782-19b17f34cd1f)。</span><span class="sxs-lookup"><span data-stu-id="76208-350">For information about machine configuration files, see the Machine Configuration Files section in [Configuring Apps](http://msdn.microsoft.com/library/86bd26d3-737e-4484-9782-19b17f34cd1f).</span></span> <span data-ttu-id="76208-351"><xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A>方法會搜尋指定的語言名稱的每個提供者組態項目。</span><span class="sxs-lookup"><span data-stu-id="76208-351">The <xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A> method searches each provider configuration element for the specified language name.</span></span> <span data-ttu-id="76208-352">傳回<xref:System.CodeDom.Compiler.CompilerInfo>執行個體會包含設定的語言提供者和編譯器設定。</span><span class="sxs-lookup"><span data-stu-id="76208-352">The returned <xref:System.CodeDom.Compiler.CompilerInfo> instance contains the configured language provider and compiler settings.</span></span>  
  
 <span data-ttu-id="76208-353"><xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A>方法會檢查是否至少一個提供者實作都支援特定的語言。</span><span class="sxs-lookup"><span data-stu-id="76208-353">The <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A> method checks whether at least one provider implementation supports a specific language.</span></span> <span data-ttu-id="76208-354">您可以驗證使用語言名稱<xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A>再傳遞給<xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A>。</span><span class="sxs-lookup"><span data-stu-id="76208-354">You can validate a language name using <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A> before passing it to <xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A>.</span></span> <span data-ttu-id="76208-355">這可避免擲回<xref:System.Configuration.ConfigurationException?displayProperty=nameWithType>存取時<xref:System.CodeDom.Compiler.CompilerInfo>不支援的語言名稱的執行個體。</span><span class="sxs-lookup"><span data-stu-id="76208-355">This prevents throwing a <xref:System.Configuration.ConfigurationException?displayProperty=nameWithType> when you access the <xref:System.CodeDom.Compiler.CompilerInfo> instance for an unsupported language name.</span></span>  
  
 <span data-ttu-id="76208-356">如果一個以上的提供者實作名稱所設定的輸入的語言，<xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A>組態項目會傳回來自最後一個相符的提供者設定。</span><span class="sxs-lookup"><span data-stu-id="76208-356">If more than one provider implementation is configured for the input language name, <xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A> returns the settings from the last matching provider configuration element.</span></span>  
  
 <span data-ttu-id="76208-357">語言名稱不區分大小寫。</span><span class="sxs-lookup"><span data-stu-id="76208-357">Language names are case-insensitive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="76208-358">下列程式碼範例會判斷<xref:System.CodeDom.Compiler.CodeDomProvider>實作的輸入的語言，並顯示語言提供者設定的設定。</span><span class="sxs-lookup"><span data-stu-id="76208-358">The following code example determines the <xref:System.CodeDom.Compiler.CodeDomProvider> implementation for an input language and displays the configured settings for the language provider.</span></span> <span data-ttu-id="76208-359">這個程式碼範例是針對所提供之較大範例的一部分<xref:System.CodeDom.Compiler.CompilerInfo>類別。</span><span class="sxs-lookup"><span data-stu-id="76208-359">This code example is part of a larger example provided for the <xref:System.CodeDom.Compiler.CompilerInfo> class.</span></span>  
  
 [!code-cpp[CodeDom_CompilerInfo#6](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#6)]
 [!code-csharp[CodeDom_CompilerInfo#6](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#6)]
 [!code-vb[CodeDom_CompilerInfo#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationException">
          <span data-ttu-id="76208-360">
            <paramref name="language" /> 在這部電腦上沒有已設定的提供者。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-360">The <paramref name="language" /> does not have a configured provider on this computer.</span>
          </span>
        </exception>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">
          <span data-ttu-id="76208-361">
            <paramref name="language" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-361">The <paramref name="language" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="76208-362">呼叫端沒有必要的權限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-362">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="76208-363">針對完全信任立即呼叫者。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-363">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="76208-364">這個成員無法供部分信任的程式碼使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-364">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="T:System.CodeDom.Compiler.CompilerInfo" />
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetConverter">
      <MemberSignature Language="C#" Value="public virtual System.ComponentModel.TypeConverter GetConverter (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ComponentModel.TypeConverter GetConverter(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GetConverter(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::ComponentModel::TypeConverter ^ GetConverter(Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.TypeConverter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="76208-365">物件的類型，要為其擷取類型轉換子。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-365">The type of object to retrieve a type converter for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="76208-366">取得指定資料型別的 <see cref="T:System.ComponentModel.TypeConverter" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-366">Gets a <see cref="T:System.ComponentModel.TypeConverter" /> for the specified data type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="76208-367">如果找不到特定型別的 <see cref="T:System.ComponentModel.TypeConverter" />，則為特定型別的 <see cref="T:System.ComponentModel.TypeConverter" /> 或 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-367">A <see cref="T:System.ComponentModel.TypeConverter" /> for the specified type, or <see langword="null" /> if a <see cref="T:System.ComponentModel.TypeConverter" /> for the specified type cannot be found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="76208-368">在衍生的類別可以覆寫這個方法以提供特定類型的型別轉換子的特定資料類型。</span><span class="sxs-lookup"><span data-stu-id="76208-368">A derived class can override this method to provide specific types of type converters for specific data types.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.TypeConverter" />
      </Docs>
    </Member>
    <Member MemberName="GetLanguageFromExtension">
      <MemberSignature Language="C#" Value="public static string GetLanguageFromExtension (string extension);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetLanguageFromExtension(string extension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetLanguageFromExtension (extension As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetLanguageFromExtension(System::String ^ extension);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extension" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="extension">
          <span data-ttu-id="76208-369">副檔名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-369">A file name extension.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="76208-370">傳回與指定副檔名關聯的語言名稱，如 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 編譯器組態區段的設定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-370">Returns a language name associated with the specified file name extension, as configured in the <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> compiler configuration section.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="76208-371">與指定副檔名關聯的語言名稱，如 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 編譯器組態設定的設定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-371">A language name associated with the file name extension, as configured in the <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> compiler configuration settings.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="76208-372">[ &lt;System.codedom&gt;元素](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)機器組態檔 (Machine.config) 包含每個語言提供者和編譯器組態設定<xref:System.CodeDom.Compiler.CodeDomProvider>上的實作電腦。</span><span class="sxs-lookup"><span data-stu-id="76208-372">The [&lt;system.codedom&gt; Element](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) in the machine configuration file (Machine.config) contains the language provider and compiler configuration settings for each <xref:System.CodeDom.Compiler.CodeDomProvider> implementation on the computer.</span></span> <span data-ttu-id="76208-373"><xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A>方法會搜尋指定的檔案名稱副檔名的每個提供者組態項目。</span><span class="sxs-lookup"><span data-stu-id="76208-373">The <xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A> method searches each provider configuration element for the specified file name extension.</span></span>  
  
 <span data-ttu-id="76208-374"><xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A>方法會檢查是否至少一個提供者實作都支援特定的副檔名。</span><span class="sxs-lookup"><span data-stu-id="76208-374">The <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A> method checks whether at least one provider implementation supports a specific file name extension.</span></span> <span data-ttu-id="76208-375">您可以驗證檔案名稱副檔名 using<xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A>再傳遞給<xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A>。</span><span class="sxs-lookup"><span data-stu-id="76208-375">You can validate a file name extension using <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A> before passing it to <xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A>.</span></span> <span data-ttu-id="76208-376">這可防止<xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A>擲回<xref:System.Configuration.ConfigurationException?displayProperty=nameWithType>不支援的檔案名稱副檔名。</span><span class="sxs-lookup"><span data-stu-id="76208-376">This prevents <xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A> from throwing a <xref:System.Configuration.ConfigurationException?displayProperty=nameWithType> for an unsupported file name extension.</span></span>  
  
 <span data-ttu-id="76208-377">如果提供者實作支援的輸入的檔案名稱副檔名，而且有多個支援的語言，然後設定該提供者，<xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A>傳回該提供者的第一個語言名稱。</span><span class="sxs-lookup"><span data-stu-id="76208-377">If a provider implementation supports the input file name extension, and there are multiple supported languages configured for that provider, then <xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A> returns the first language name for that provider.</span></span> <span data-ttu-id="76208-378">如果輸入的檔案名稱副檔名，設定一個以上的提供者實作<xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A>從傳回的語言名稱最後一個相符的提供者組態項目。</span><span class="sxs-lookup"><span data-stu-id="76208-378">If more than one provider implementation is configured for the input file name extension, <xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A> returns the language name from the last matching provider configuration element.</span></span>  
  
 <span data-ttu-id="76208-379">語言名稱和檔案名稱的副檔名不區分大小寫。</span><span class="sxs-lookup"><span data-stu-id="76208-379">Language names and file name extensions are case-insensitive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="76208-380">下列程式碼範例會判斷<xref:System.CodeDom.Compiler.CodeDomProvider>實作輸入的檔案名稱副檔名，並顯示語言提供者設定的設定。</span><span class="sxs-lookup"><span data-stu-id="76208-380">The following code example determines the <xref:System.CodeDom.Compiler.CodeDomProvider> implementation for an input file name extension and displays the configured settings for the language provider.</span></span> <span data-ttu-id="76208-381">這個程式碼範例是針對所提供之較大範例的一部分<xref:System.CodeDom.Compiler.CompilerInfo>類別。</span><span class="sxs-lookup"><span data-stu-id="76208-381">This code example is part of a larger example provided for the <xref:System.CodeDom.Compiler.CompilerInfo> class.</span></span>  
  
 [!code-cpp[CodeDom_CompilerInfo#5](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#5)]
 [!code-csharp[CodeDom_CompilerInfo#5](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#5)]
 [!code-vb[CodeDom_CompilerInfo#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationException">
          <span data-ttu-id="76208-382">
            <paramref name="extension" /> 在這部電腦上沒有已設定的語言提供者。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-382">The <paramref name="extension" /> does not have a configured language provider on this computer.</span>
          </span>
        </exception>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">
          <span data-ttu-id="76208-383">
            <paramref name="extension" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-383">The <paramref name="extension" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="76208-384">呼叫端沒有必要的權限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-384">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="76208-385">針對完全信任立即呼叫者。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-385">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="76208-386">這個成員無法供部分信任的程式碼使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-386">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)" />
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeOutput">
      <MemberSignature Language="C#" Value="public virtual string GetTypeOutput (System.CodeDom.CodeTypeReference type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetTypeOutput(class System.CodeDom.CodeTypeReference type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTypeOutput (type As CodeTypeReference) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetTypeOutput(System::CodeDom::CodeTypeReference ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.CodeDom.CodeTypeReference" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="76208-387">
            <see cref="T:System.CodeDom.CodeTypeReference" />，表示要傳回的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-387">A <see cref="T:System.CodeDom.CodeTypeReference" /> that indicates the type to return.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="76208-388">取得由指定的 <see cref="T:System.CodeDom.CodeTypeReference" /> 所指示的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-388">Gets the type indicated by the specified <see cref="T:System.CodeDom.CodeTypeReference" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="76208-389">指定型別的文字表示，針對這個程式碼產生器產生程式碼所使用的語言格式化。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-389">A text representation of the specified type, formatted for the language in which code is generated by this code generator.</span>
          </span>
          <span data-ttu-id="76208-390">例如，在 Visual Basic 中，傳入 <see cref="T:System.CodeDom.CodeTypeReference" /> 型別的 <see cref="T:System.Int32" /> 會傳回 "Integer"。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-390">In Visual Basic, for example, passing in a <see cref="T:System.CodeDom.CodeTypeReference" /> for the <see cref="T:System.Int32" /> type will return "Integer".</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="76208-391">在.NET framework 1.0 和 1.1 版中，這個方法由<xref:System.CodeDom.Compiler.ICodeGenerator>所傳回的實作<xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A>的提供者的方法。</span><span class="sxs-lookup"><span data-stu-id="76208-391">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> method of the provider.</span></span> <span data-ttu-id="76208-392">在 2.0 版中，呼叫這個方法可以是直接在程式碼提供者即使它不會覆寫程式碼提供者。</span><span class="sxs-lookup"><span data-stu-id="76208-392">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="76208-393">如果程式碼提供者不會覆寫這個方法，<xref:System.CodeDom.Compiler.ICodeGenerator>實作會呼叫基底類別。</span><span class="sxs-lookup"><span data-stu-id="76208-393">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation is called by the base class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="76208-394">此方法或 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 方法都沒有在衍生類別中覆寫。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-394">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method is overridden in a derived class.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="76208-395">如果您覆寫這個方法，您必須呼叫基底類別的對應方法。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-395">If you override this method, you must not call the corresponding method of the base class.</span>
            </span>
            <span data-ttu-id="76208-396">基底類別方法會建立使用過時的衍生類別中的產生器<see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />與預先存在的提供者，使用程式碼產生器的相容性的方法。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-396">The base-class method creates a generator in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method for compatibility with preexisting providers that use code generators.</span>
            </span>
            <span data-ttu-id="76208-397">基底類別方法依序呼叫的對應方法<see cref="T:System.CodeDom.Compiler.ICodeGenerator" />執行此功能的實作。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-397">The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementation to perform this function.</span>
            </span>
            <span data-ttu-id="76208-398">您會收到<see cref="T:System.NotImplementedException" />如果您不使用程式碼產生器的程式碼提供者呼叫基底類別方法。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-398">You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code generator.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IsDefinedExtension">
      <MemberSignature Language="C#" Value="public static bool IsDefinedExtension (string extension);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefinedExtension(string extension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDefinedExtension (extension As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDefinedExtension(System::String ^ extension);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extension" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="extension">
          <span data-ttu-id="76208-399">副檔名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-399">A file name extension.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="76208-400">測試副檔名在電腦上是否已設定關聯的 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 實作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-400">Tests whether a file name extension has an associated <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> implementation configured on the computer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="76208-401">如果指定副檔名已設定 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 實作，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-401">
              <see langword="true" /> if a <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> implementation is configured for the specified file name extension; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="76208-402">[ &lt;System.codedom&gt;元素](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)機器組態檔 (Machine.config) 包含每個語言提供者和編譯器組態設定<xref:System.CodeDom.Compiler.CodeDomProvider>上的實作電腦。</span><span class="sxs-lookup"><span data-stu-id="76208-402">The [&lt;system.codedom&gt; Element](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) in the machine configuration file (Machine.config) contains the language provider and compiler configuration settings for each <xref:System.CodeDom.Compiler.CodeDomProvider> implementation on the computer.</span></span> <span data-ttu-id="76208-403"><xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A>方法會搜尋指定的檔案名稱副檔名的提供者組態項目。</span><span class="sxs-lookup"><span data-stu-id="76208-403">The <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A> method searches the provider configuration elements for the specified file name extension.</span></span>  
  
 <span data-ttu-id="76208-404">檔案名稱的副檔名不區分大小寫。</span><span class="sxs-lookup"><span data-stu-id="76208-404">File name extensions are case-insensitive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="76208-405">下列程式碼範例會判斷<xref:System.CodeDom.Compiler.CodeDomProvider>實作輸入的檔案名稱副檔名，並顯示語言提供者設定的設定。</span><span class="sxs-lookup"><span data-stu-id="76208-405">The following code example determines the <xref:System.CodeDom.Compiler.CodeDomProvider> implementation for an input file name extension and displays the configured settings for the language provider.</span></span> <span data-ttu-id="76208-406">這個程式碼範例是針對所提供之較大範例的一部分<xref:System.CodeDom.Compiler.CompilerInfo>類別。</span><span class="sxs-lookup"><span data-stu-id="76208-406">This code example is part of a larger example provided for the <xref:System.CodeDom.Compiler.CompilerInfo> class.</span></span>  
  
 [!code-cpp[CodeDom_CompilerInfo#5](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#5)]
 [!code-csharp[CodeDom_CompilerInfo#5](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#5)]
 [!code-vb[CodeDom_CompilerInfo#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="76208-407">
            <paramref name="extension" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-407">The <paramref name="extension" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="76208-408">呼叫端沒有必要的權限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-408">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="76208-409">針對完全信任立即呼叫者。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-409">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="76208-410">這個成員無法供部分信任的程式碼使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-410">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)" />
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsDefinedLanguage">
      <MemberSignature Language="C#" Value="public static bool IsDefinedLanguage (string language);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefinedLanguage(string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDefinedLanguage (language As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDefinedLanguage(System::String ^ language);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="language" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="language">
          <span data-ttu-id="76208-411">語言名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-411">The language name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="76208-412">測試語言在電腦上是否已設定 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 實作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-412">Tests whether a language has a <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> implementation configured on the computer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="76208-413">如果指定語言已設定 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 實作，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-413">
              <see langword="true" /> if a <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> implementation is configured for the specified language; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="76208-414">[ &lt;System.codedom&gt;元素](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)機器組態檔 (Machine.config) 包含每個語言提供者和編譯器組態設定<xref:System.CodeDom.Compiler.CodeDomProvider>上的實作電腦。</span><span class="sxs-lookup"><span data-stu-id="76208-414">The [&lt;system.codedom&gt; Element](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) in the machine configuration file (Machine.config) contains the language provider and compiler configuration settings for each <xref:System.CodeDom.Compiler.CodeDomProvider> implementation on the computer.</span></span> <span data-ttu-id="76208-415"><xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A>方法會搜尋指定的語言名稱的提供者組態項目。</span><span class="sxs-lookup"><span data-stu-id="76208-415">The <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A> method searches the provider configuration elements for the specified language name.</span></span>  
  
 <span data-ttu-id="76208-416">語言名稱不區分大小寫。</span><span class="sxs-lookup"><span data-stu-id="76208-416">Language names are case-insensitive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="76208-417">下列程式碼範例會判斷<xref:System.CodeDom.Compiler.CodeDomProvider>實作的輸入的語言，並顯示語言提供者設定的設定。</span><span class="sxs-lookup"><span data-stu-id="76208-417">The following code example determines the <xref:System.CodeDom.Compiler.CodeDomProvider> implementation for an input language and displays the configured settings for the language provider.</span></span> <span data-ttu-id="76208-418">這個程式碼範例是針對所提供之較大範例的一部分<xref:System.CodeDom.Compiler.CompilerInfo>類別。</span><span class="sxs-lookup"><span data-stu-id="76208-418">This code example is part of a larger example provided for the <xref:System.CodeDom.Compiler.CompilerInfo> class.</span></span>  
  
 [!code-cpp[CodeDom_CompilerInfo#6](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#6)]
 [!code-csharp[CodeDom_CompilerInfo#6](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#6)]
 [!code-vb[CodeDom_CompilerInfo#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="76208-419">
            <paramref name="language" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-419">The <paramref name="language" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="76208-420">呼叫端沒有必要的權限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-420">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="76208-421">針對完全信任立即呼叫者。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-421">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="76208-422">這個成員無法供部分信任的程式碼使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-422">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsValidIdentifier">
      <MemberSignature Language="C#" Value="public virtual bool IsValidIdentifier (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsValidIdentifier(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsValidIdentifier (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsValidIdentifier(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="76208-423">要驗證為有效識別項的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-423">The value to verify as a valid identifier.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="76208-424">傳回值，指出指定的值是否為目前語言的有效識別項。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-424">Returns a value that indicates whether the specified value is a valid identifier for the current language.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="76208-425">如果 <paramref name="value" /> 參數是有效的識別項，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-425">
              <see langword="true" /> if the <paramref name="value" /> parameter is a valid identifier; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="76208-426">這個方法會測試是否為有效的識別項。</span><span class="sxs-lookup"><span data-stu-id="76208-426">This method tests whether an identifier is valid.</span></span> <span data-ttu-id="76208-427"><xref:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier%2A>方法是特定的提供者。</span><span class="sxs-lookup"><span data-stu-id="76208-427">The <xref:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier%2A> method is provider specific.</span></span> <span data-ttu-id="76208-428">適用於一個提供者的識別項可能不是有效的其他提供者。</span><span class="sxs-lookup"><span data-stu-id="76208-428">Identifiers that are valid for one provider might not be valid for other providers.</span></span> <span data-ttu-id="76208-429">如果`value`包含的字元之外的 ASCII 字元範圍，請檢查可能用來編譯程式碼的所有語言的識別項。</span><span class="sxs-lookup"><span data-stu-id="76208-429">If `value` contains characters outside of the ASCII character range, check the identifier for all the languages that might be used to compile the code.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="76208-430">在.NET framework 1.0 和 1.1 版中，這個方法由<xref:System.CodeDom.Compiler.ICodeGenerator>所傳回的實作<xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A>的提供者的方法。</span><span class="sxs-lookup"><span data-stu-id="76208-430">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> method of the provider.</span></span> <span data-ttu-id="76208-431">在 2.0 版中，呼叫這個方法可以是直接在程式碼提供者即使它不會覆寫程式碼提供者。</span><span class="sxs-lookup"><span data-stu-id="76208-431">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="76208-432">如果程式碼提供者不會覆寫這個方法，<xref:System.CodeDom.Compiler.ICodeGenerator>實作會呼叫基底類別。</span><span class="sxs-lookup"><span data-stu-id="76208-432">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation is called by the base class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="76208-433">此方法或 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 方法都沒有在衍生類別中覆寫。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-433">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method is overridden in a derived class.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="76208-434">在覆寫<see cref="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)" />在衍生類別中，設計方法，以傳回<see langword="true" />只有值符合語言的規則，而且不會以關鍵字衝突。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-434">When overriding <see cref="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)" /> in a derived class, design the method to return <see langword="true" /> only if the value fits the rules of the language and does not conflict with a keyword.</span>
            </span>
            <span data-ttu-id="76208-435">如果您覆寫這個方法，您必須呼叫基底類別的對應方法。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-435">If you override this method, you must not call the corresponding method of the base class.</span>
            </span>
            <span data-ttu-id="76208-436">基底類別方法會建立使用過時的衍生類別中的產生器<see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />與預先存在的提供者，使用程式碼產生器的相容性的方法。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-436">The base-class method creates a generator in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method for compatibility with preexisting providers that use code generators.</span>
            </span>
            <span data-ttu-id="76208-437">基底類別方法依序呼叫的對應方法<see cref="T:System.CodeDom.Compiler.ICodeGenerator" />執行此功能的實作。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-437">The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementation to perform this function.</span>
            </span>
            <span data-ttu-id="76208-438">您會收到<see cref="T:System.NotImplementedException" />如果您不使用程式碼產生器的程式碼提供者呼叫基底類別方法。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-438">You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code generator.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="LanguageOptions">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.LanguageOptions LanguageOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.CodeDom.Compiler.LanguageOptions LanguageOptions" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CodeDomProvider.LanguageOptions" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property LanguageOptions As LanguageOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::CodeDom::Compiler::LanguageOptions LanguageOptions { System::CodeDom::Compiler::LanguageOptions get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.LanguageOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="76208-439">取得語言功能識別項。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-439">Gets a language features identifier.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="76208-440">
            <see cref="T:System.CodeDom.Compiler.LanguageOptions" />，表示語言的特殊功能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-440">A <see cref="T:System.CodeDom.Compiler.LanguageOptions" /> that indicates special features of the language.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.CodeCompileUnit Parse (System.IO.TextReader codeStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.CodeCompileUnit Parse(class System.IO.TextReader codeStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Parse (codeStream As TextReader) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::CodeCompileUnit ^ Parse(System::IO::TextReader ^ codeStream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codeStream" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="codeStream">
          <span data-ttu-id="76208-441">
            <see cref="T:System.IO.TextReader" /> 物件，用於讀取要剖析的程式碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-441">A <see cref="T:System.IO.TextReader" /> object that is used to read the code to be parsed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="76208-442">將指定文字資料流中所讀取的程式碼編譯成 <see cref="T:System.CodeDom.CodeCompileUnit" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-442">Compiles the code read from the specified text stream into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="76208-443">
            <see cref="T:System.CodeDom.CodeCompileUnit" />，含有剖析程式碼的表示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-443">A <see cref="T:System.CodeDom.CodeCompileUnit" /> that contains a representation of the parsed code.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="76208-444">在.NET framework 1.0 和 1.1 版中，這個方法由<xref:System.CodeDom.Compiler.ICodeParser>所傳回的實作<xref:System.CodeDom.Compiler.CodeDomProvider.CreateParser%2A>的提供者的方法。</span><span class="sxs-lookup"><span data-stu-id="76208-444">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeParser> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateParser%2A> method of the provider.</span></span> <span data-ttu-id="76208-445">在 2.0 版中，呼叫這個方法可以是直接在程式碼提供者即使它不會覆寫程式碼提供者。</span><span class="sxs-lookup"><span data-stu-id="76208-445">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="76208-446">如果程式碼提供者不會覆寫這個方法，<xref:System.CodeDom.Compiler.ICodeParser>實作會呼叫基底類別。</span><span class="sxs-lookup"><span data-stu-id="76208-446">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeParser> implementation is called by the base class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="76208-447">此方法或 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 方法都沒有在衍生類別中覆寫。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-447">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method is overridden in a derived class.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="76208-448">如果您覆寫這個方法，您必須呼叫基底類別的對應方法。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-448">If you override this method, you must not call the corresponding method of the base class.</span>
            </span>
            <span data-ttu-id="76208-449">基底類別方法會使用過時的衍生類別中建立的剖析器<see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser" />與預先存在的提供者，使用程式碼剖析器的相容性的方法。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-449">The base-class method creates a parser in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser" /> method for compatibility with preexisting providers that use code parsers.</span>
            </span>
            <span data-ttu-id="76208-450">基底類別方法依序呼叫的對應方法<see cref="T:System.CodeDom.Compiler.ICodeParser" />執行此功能的實作。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-450">The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeParser" /> implementation to perform this function.</span>
            </span>
            <span data-ttu-id="76208-451">您會收到<see cref="T:System.NotImplementedException" />如果您從程式碼提供者不使用程式碼剖析器呼叫基底類別方法。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-451">You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code parser.</span>
            </span>
          </para>
        </block>
        <altmember cref="T:System.CodeDom.CodeCompileUnit" />
        <altmember cref="T:System.IO.TextReader" />
      </Docs>
    </Member>
    <Member MemberName="Supports">
      <MemberSignature Language="C#" Value="public virtual bool Supports (System.CodeDom.Compiler.GeneratorSupport generatorSupport);" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Supports(valuetype System.CodeDom.Compiler.GeneratorSupport generatorSupport) cil managed" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Supports(System::CodeDom::Compiler::GeneratorSupport generatorSupport);" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1" />
      <MemberSignature Language="C#" Value="public virtual bool Supports (System.CodeDom.Compiler.GeneratorSupport supports);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Supports(valuetype System.CodeDom.Compiler.GeneratorSupport supports) cil managed" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)" FrameworkAlternate="xamarinmac-3.0;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Supports (supports As GeneratorSupport) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Supports(System::CodeDom::Compiler::GeneratorSupport supports);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="generatorSupport" Type="System.CodeDom.Compiler.GeneratorSupport" Index="0" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1" />
        <Parameter Name="supports" Type="System.CodeDom.Compiler.GeneratorSupport" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="generatorSupport">To be added.</param>
        <summary>
          <span data-ttu-id="76208-452">傳回值，指出是否提供指定程式碼產生支援。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-452">Returns a value indicating whether the specified code generation support is provided.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="76208-453">如果提供指定程式碼產生支援，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-453">
              <see langword="true" /> if the specified code generation support is provided; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="76208-454">這個方法可以呼叫具有數<xref:System.CodeDom.Compiler.GeneratorSupport>旗標，一次，以加入一組適當的功能旗標，以及二進位檔的一組功能來測試`OR`運算子 (&#124;)。</span><span class="sxs-lookup"><span data-stu-id="76208-454">This method can be called with a number of <xref:System.CodeDom.Compiler.GeneratorSupport> flags at once to test for a set of capabilities by joining a set of appropriate capability flags together with a binary `OR` operator (&#124;).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="76208-455">在.NET framework 1.0 和 1.1 版中，這個方法由<xref:System.CodeDom.Compiler.ICodeGenerator>所傳回的實作<xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A>的提供者的方法。</span><span class="sxs-lookup"><span data-stu-id="76208-455">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> method of the provider.</span></span> <span data-ttu-id="76208-456">在 2.0 版中，呼叫這個方法可以是直接在程式碼提供者即使它不會覆寫程式碼提供者。</span><span class="sxs-lookup"><span data-stu-id="76208-456">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="76208-457">如果程式碼提供者不會覆寫這個方法，<xref:System.CodeDom.Compiler.ICodeGenerator>實作會呼叫基底類別。</span><span class="sxs-lookup"><span data-stu-id="76208-457">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation is called by the base class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="76208-458">此方法或 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 方法都沒有在衍生類別中覆寫。</span>
          <span class="sxs-lookup">
            <span data-stu-id="76208-458">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method is overridden in a derived class.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="76208-459">如果您覆寫這個方法，您必須呼叫基底類別的對應方法。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-459">If you override this method, you must not call the corresponding method of the base class.</span>
            </span>
            <span data-ttu-id="76208-460">基底類別方法會建立使用過時的衍生類別中的產生器<see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />與預先存在的提供者，使用程式碼產生器的相容性的方法。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-460">The base-class method creates a generator in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method for compatibility with preexisting providers that use code generators.</span>
            </span>
            <span data-ttu-id="76208-461">基底類別方法依序呼叫的對應方法<see cref="T:System.CodeDom.Compiler.ICodeGenerator" />執行此功能的實作。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-461">The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementation to perform this function.</span>
            </span>
            <span data-ttu-id="76208-462">您會收到<see cref="T:System.NotImplementedException" />如果您不使用程式碼產生器的程式碼提供者呼叫基底類別方法。</span>
            <span class="sxs-lookup">
              <span data-stu-id="76208-462">You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code generator.</span>
            </span>
          </para>
        </block>
        <altmember cref="T:System.CodeDom.Compiler.GeneratorSupport" />
      </Docs>
    </Member>
  </Members>
</Type>