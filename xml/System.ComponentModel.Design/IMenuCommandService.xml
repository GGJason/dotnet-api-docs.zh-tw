<Type Name="IMenuCommandService" FullName="System.ComponentModel.Design.IMenuCommandService">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8a9a3a8536807218cc2cde7158bb0f895669c98e" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36706311" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IMenuCommandService" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IMenuCommandService" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.IMenuCommandService" />
  <TypeSignature Language="VB.NET" Value="Public Interface IMenuCommandService" />
  <TypeSignature Language="C++ CLI" Value="public interface class IMenuCommandService" />
  <TypeSignature Language="F#" Value="type IMenuCommandService = interface" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供方法，用來管理可於設計模式中使用的全域設計工具動詞命令和功能表命令，以及顯示捷徑功能表的某些型別。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個介面提供的方法：  
  
-   尋找、 叫用、 新增和移除全域的設計工具動詞命令。  
  
-   尋找、 叫用、 新增和移除標準功能表命令。  
  
-   變更與標準功能表命令相關聯的事件處理常式。  
  
-   顯示標準命令的功能表與相關聯的捷徑功能表<xref:System.ComponentModel.Design.CommandID>。  
  
 設計工具動詞表示會列在設計模式中的捷徑功能表的自訂命令。 設計工具動詞可提供指定的文字標籤。 每個設計工具動詞會自動指派唯一<xref:System.ComponentModel.Design.CommandID>。 設計工具可以提供設計工具動詞命令，透過其<xref:System.ComponentModel.Design.IDesigner.Verbs%2A>屬性，但是這些才可以使用目前選取設計工具的元件時。 全域的設計工具動詞命令是設計工具動詞命令，可以從設計模式的捷徑功能表，不論所選元件存取。 這個介面可讓您管理在設計模式中使用的全域設計工具動詞命令集。  
  
 您可以加入全域的設計工具動詞命令，使用<xref:System.ComponentModel.Design.IMenuCommandService.AddVerb%2A>方法，而且您可以移除全域的設計工具動詞命令，使用<xref:System.ComponentModel.Design.IMenuCommandService.RemoveVerb%2A>方法。 您可以叫用設計工具動詞命令，使用<xref:System.ComponentModel.Design.IMenuCommandService.GlobalInvoke%2A>方法，如果您知道<xref:System.ComponentModel.Design.CommandID>動詞命令。 <xref:System.ComponentModel.Design.IMenuCommandService.Verbs%2A>這個介面的屬性包含目前資料集設計工具動詞命令，在快顯功能表中顯示。 這個集合的設計工具動詞命令是由所有全域的設計工具動詞和任何目前所選元件的設計工具提供的任何設計工具動詞命令所組成。 這組動詞命令會更新每次選取或取消選取此選項以設計工具所提供的設計工具動詞命令的元件時。  
  
 功能表命令會限制為一組預先定義的標準命令。 中所定義的大部分預先定義的標準命令<xref:System.ComponentModel.Design.StandardCommands>和<xref:System.Windows.Forms.Design.MenuCommands>列舉型別。 您可以新增、 移除和叫用功能表命令和搜尋功能表命令已加入使用這個介面的方法。  
  
 您可以使用標準功能表命令新增<xref:System.ComponentModel.Design.IMenuCommandService.AddCommand%2A>方法，並移除標準功能表的命令使用<xref:System.ComponentModel.Design.IMenuCommandService.RemoveCommand%2A>方法。 您可以將事件處理常式附加至預先定義的標準功能表命令的文件中詳述的程序<xref:System.ComponentModel.Design.IMenuCommandService.AddCommand%2A>方法。 您可以擷取功能表命令由<xref:System.ComponentModel.Design.CommandID>如果它已加入至功能表使用<xref:System.ComponentModel.Design.IMenuCommandService.FindCommand%2A>方法。 您可以叫用功能表命令或由設計工具動詞命令<xref:System.ComponentModel.Design.CommandID>使用<xref:System.ComponentModel.Design.IMenuCommandService.GlobalInvoke%2A>方法。  
  
> [!NOTE]
>  嘗試加入功能表命令與現有<xref:System.ComponentModel.Design.CommandID>將會擲回<xref:System.InvalidOperationException>。 當新增功能表命令時，務必檢查，它已經不在功能表上，使用<xref:System.ComponentModel.Design.IMenuCommandService.FindCommand%2A>方法或使用例外狀況，請明智地處理。  
  
> [!NOTE]
>  功能表命令加入功能表上，而且有其<xref:System.ComponentModel.Design.MenuCommand.Visible%2A>或<xref:System.ComponentModel.Design.MenuCommand.Enabled%2A>屬性設定為`false`。 如果您以視覺化方式找不到已加入功能表的功能表命令，其中一個屬性可能已設定為`false`。  
  
 您可以顯示包含功能表命令，在指定的位置，使用特定 standard 快顯功能表<xref:System.ComponentModel.Design.IMenuCommandService.ShowContextMenu%2A>方法。 這個方法的文件包含資料表，其中列出指定有效的功能表，以顯示之命令識別碼。  
  
   
  
## Examples  
 這個範例示範如何使用<xref:System.ComponentModel.Design.IMenuCommandService>新增<xref:System.ComponentModel.Design.MenuCommand>。  
  
 [!code-cpp[MenuCommand Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/MenuCommand Example/CPP/component1.cpp#1)]
 [!code-csharp[MenuCommand Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MenuCommand Example/CS/component1.cs#1)]
 [!code-vb[MenuCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MenuCommand Example/VB/component1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
    <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
    <altmember cref="T:System.ComponentModel.Design.CommandID" />
    <altmember cref="T:System.Windows.Forms.Design.MenuCommands" />
    <altmember cref="T:System.ComponentModel.Design.StandardCommands" />
  </Docs>
  <Members>
    <Member MemberName="AddCommand">
      <MemberSignature Language="C#" Value="public void AddCommand (System.ComponentModel.Design.MenuCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddCommand(class System.ComponentModel.Design.MenuCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.AddCommand(System.ComponentModel.Design.MenuCommand)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddCommand (command As MenuCommand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddCommand(System::ComponentModel::Design::MenuCommand ^ command);" />
      <MemberSignature Language="F#" Value="abstract member AddCommand : System.ComponentModel.Design.MenuCommand -&gt; unit" Usage="iMenuCommandService.AddCommand command" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.ComponentModel.Design.MenuCommand" />
      </Parameters>
      <Docs>
        <param name="command">要加入的 <see cref="T:System.ComponentModel.Design.MenuCommand" />。</param>
        <summary>將指定的標準功能表命令加入至功能表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Design.MenuCommands>和<xref:System.ComponentModel.Design.StandardCommands>列舉型別包含<xref:System.ComponentModel.Design.CommandID>的預先定義的標準命令和功能表命令已使用的相關聯識別碼與特定的功能表上的位置。  
  
> [!NOTE]
>  嘗試加入功能表命令與現有<xref:System.ComponentModel.Design.CommandID>將會擲回<xref:System.InvalidOperationException>。 當新增功能表命令時，務必檢查，它已經不在功能表上，使用<xref:System.ComponentModel.Design.IMenuCommandService.FindCommand%2A>方法或使用例外狀況，請明智地處理。  
  
 您可以將事件處理常式附加至預先定義的功能表命令，使用下列程序：  
  
1.  如果要連結的事件處理常式的功能表命令加入功能表，或位於與<xref:System.ComponentModel.Design.IMenuCommandService.FindCommand%2A>方法，請考慮是否要更新版本中，還原此功能表命令以及是否要用來叫用目前的事件處理常式，從新的事件處理常式。 如果功能表命令或鏈結的事件處理常式的引動過程，可能會還原您的程式碼，請務必儲存某處的功能表命令的參考。  
  
2.  請確定任何先前已存在的功能表命令具有相同<xref:System.ComponentModel.Design.CommandID>已經移除了功能表使用<xref:System.ComponentModel.Design.IMenuCommandService.RemoveCommand%2A>方法。  
  
3.  建立新<xref:System.ComponentModel.Design.MenuCommand>並指定事件處理常式中建構函式，連同<xref:System.ComponentModel.Design.CommandID>代表要新增的命令。 每個標準功能表命令是預先定義的功能表的位置加入至相關聯。 支援的命令識別碼中所定義<xref:System.ComponentModel.Design.StandardCommands>和<xref:System.Windows.Forms.Design.MenuCommands>列舉型別。  
  
4.  如果您想要叫用功能表命令的任何預先存在的事件處理常式，呼叫<xref:System.ComponentModel.Design.MenuCommand.Invoke%2A>您更換處理功能表命令的叫用事件的事件處理常式 功能表的功能表命令的方法。  
  
5.  如果您想要在還原中預先存在的功能表命令已被取代的事件處理常式，加入已儲存時，預先存在的功能表命令，移除取代功能表命令後建立。 您可能想要加入此行為，以`Dispose`您類型的方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">指定之 <see cref="T:System.ComponentModel.Design.CommandID" /> 的 <see cref="T:System.ComponentModel.Design.MenuCommand" /> 已經出現在功能表上。</exception>
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
      </Docs>
    </Member>
    <Member MemberName="AddVerb">
      <MemberSignature Language="C#" Value="public void AddVerb (System.ComponentModel.Design.DesignerVerb verb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddVerb(class System.ComponentModel.Design.DesignerVerb verb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.AddVerb(System.ComponentModel.Design.DesignerVerb)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddVerb (verb As DesignerVerb)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddVerb(System::ComponentModel::Design::DesignerVerb ^ verb);" />
      <MemberSignature Language="F#" Value="abstract member AddVerb : System.ComponentModel.Design.DesignerVerb -&gt; unit" Usage="iMenuCommandService.AddVerb verb" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="verb" Type="System.ComponentModel.Design.DesignerVerb" />
      </Parameters>
      <Docs>
        <param name="verb">要加入的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</param>
        <summary>加入指定的設計工具動詞命令至全域設計工具動詞命令集。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 元件，提供設計工具動詞命令的設計工具應該使用<xref:System.ComponentModel.Design.IDesigner.Verbs%2A>其設計工具，而非呼叫這個方法的屬性。 此方法會將全域的設計工具動詞命令，可以從設計模式，不論目前選取的元件中以滑鼠右鍵按一下捷徑功能表存取。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
      </Docs>
    </Member>
    <Member MemberName="FindCommand">
      <MemberSignature Language="C#" Value="public System.ComponentModel.Design.MenuCommand FindCommand (System.ComponentModel.Design.CommandID commandID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ComponentModel.Design.MenuCommand FindCommand(class System.ComponentModel.Design.CommandID commandID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.FindCommand(System.ComponentModel.Design.CommandID)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ComponentModel::Design::MenuCommand ^ FindCommand(System::ComponentModel::Design::CommandID ^ commandID);" />
      <MemberSignature Language="F#" Value="abstract member FindCommand : System.ComponentModel.Design.CommandID -&gt; System.ComponentModel.Design.MenuCommand" Usage="iMenuCommandService.FindCommand commandID" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.MenuCommand</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandID" Type="System.ComponentModel.Design.CommandID" />
      </Parameters>
      <Docs>
        <param name="commandID">要搜尋的 <see cref="T:System.ComponentModel.Design.CommandID" />。</param>
        <summary>搜尋指定的命令 ID，並傳回與它相關聯的功能表命令。</summary>
        <returns>與這個命令 ID 相關連的 <see cref="T:System.ComponentModel.Design.MenuCommand" />，或 <see langword="null" /> (如果找不到命令)。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
      </Docs>
    </Member>
    <Member MemberName="GlobalInvoke">
      <MemberSignature Language="C#" Value="public bool GlobalInvoke (System.ComponentModel.Design.CommandID commandID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GlobalInvoke(class System.ComponentModel.Design.CommandID commandID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.GlobalInvoke(System.ComponentModel.Design.CommandID)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GlobalInvoke(System::ComponentModel::Design::CommandID ^ commandID);" />
      <MemberSignature Language="F#" Value="abstract member GlobalInvoke : System.ComponentModel.Design.CommandID -&gt; bool" Usage="iMenuCommandService.GlobalInvoke commandID" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandID" Type="System.ComponentModel.Design.CommandID" />
      </Parameters>
      <Docs>
        <param name="commandID">要搜尋和執行之命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。</param>
        <summary>叫用功能表或與指定之命令 ID 相符的設計工具動詞命令。</summary>
        <returns>如果找到命令且叫用成功，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會搜尋功能表命令或使用設計工具動詞<xref:System.ComponentModel.Design.CommandID>符合指定<xref:System.ComponentModel.Design.CommandID>。 這個方法會先搜尋內才能繼續搜尋，如有必要，透過全域環境命令服務所組成的全域和作用中提供設計工具動詞命令的設計工具動詞集合。 如果找到相符的功能表命令或設計工具動詞，則會叫用命令。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCommand">
      <MemberSignature Language="C#" Value="public void RemoveCommand (System.ComponentModel.Design.MenuCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveCommand(class System.ComponentModel.Design.MenuCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.RemoveCommand(System.ComponentModel.Design.MenuCommand)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveCommand (command As MenuCommand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveCommand(System::ComponentModel::Design::MenuCommand ^ command);" />
      <MemberSignature Language="F#" Value="abstract member RemoveCommand : System.ComponentModel.Design.MenuCommand -&gt; unit" Usage="iMenuCommandService.RemoveCommand command" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.ComponentModel.Design.MenuCommand" />
      </Parameters>
      <Docs>
        <param name="command">要移除的 <see cref="T:System.ComponentModel.Design.MenuCommand" />。</param>
        <summary>從功能表移除指定的標準功能表命令。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會移除指定<xref:System.ComponentModel.Design.MenuCommand>如果找到。 這個方法不會引發例外狀況或傳回值，如果指定<xref:System.ComponentModel.Design.MenuCommand>找不到。 使用<xref:System.ComponentModel.Design.IMenuCommandService.FindCommand%2A>方法，以判斷是否<xref:System.ComponentModel.Design.MenuCommand>比對指定<xref:System.ComponentModel.Design.CommandID>位於功能表上。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
      </Docs>
    </Member>
    <Member MemberName="RemoveVerb">
      <MemberSignature Language="C#" Value="public void RemoveVerb (System.ComponentModel.Design.DesignerVerb verb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveVerb(class System.ComponentModel.Design.DesignerVerb verb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.RemoveVerb(System.ComponentModel.Design.DesignerVerb)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveVerb (verb As DesignerVerb)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveVerb(System::ComponentModel::Design::DesignerVerb ^ verb);" />
      <MemberSignature Language="F#" Value="abstract member RemoveVerb : System.ComponentModel.Design.DesignerVerb -&gt; unit" Usage="iMenuCommandService.RemoveVerb verb" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="verb" Type="System.ComponentModel.Design.DesignerVerb" />
      </Parameters>
      <Docs>
        <param name="verb">要移除的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</param>
        <summary>從全域設計工具動詞命令的集合移除指定的設計工具動詞命令。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果是全域的設計工具動詞集合內，這個方法會移除指定的全域設計工具動詞。 您可以加入全域的設計工具動詞的集合使用設計工具動詞<xref:System.ComponentModel.Design.IMenuCommandService.AddVerb%2A>方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
      </Docs>
    </Member>
    <Member MemberName="ShowContextMenu">
      <MemberSignature Language="C#" Value="public void ShowContextMenu (System.ComponentModel.Design.CommandID menuID, int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ShowContextMenu(class System.ComponentModel.Design.CommandID menuID, int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.ShowContextMenu(System.ComponentModel.Design.CommandID,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ShowContextMenu (menuID As CommandID, x As Integer, y As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ShowContextMenu(System::ComponentModel::Design::CommandID ^ menuID, int x, int y);" />
      <MemberSignature Language="F#" Value="abstract member ShowContextMenu : System.ComponentModel.Design.CommandID * int * int -&gt; unit" Usage="iMenuCommandService.ShowContextMenu (menuID, x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="menuID" Type="System.ComponentModel.Design.CommandID" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="menuID">捷徑功能表要顯示的 <see cref="T:System.ComponentModel.Design.CommandID" />。</param>
        <param name="x">X 座標，要在該螢幕座標上顯示捷徑功能表。</param>
        <param name="y">Y 座標，要在該螢幕座標上顯示捷徑功能表。</param>
        <summary>在指定位置顯示指定的捷徑功能表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.Design.IMenuCommandService.ShowContextMenu%2A>方法可以顯示任何下列 Visual Studio 捷徑功能表，其中包含指定點上的功能表命令：  
  
|功能表|CommandID|  
|----------|---------------|  
|顯示容器的捷徑功能表|<xref:System.Windows.Forms.Design.MenuCommands.ContainerMenu>|  
|顯示元件匣中的捷徑功能表|<xref:System.Windows.Forms.Design.MenuCommands.ComponentTrayMenu>|  
|顯示選取範圍的捷徑功能表|<xref:System.Windows.Forms.Design.MenuCommands.SelectionMenu>|  
|紙匣選取顯示的捷徑功能表|<xref:System.Windows.Forms.Design.MenuCommands.TraySelectionMenu>|  
  
 這個方法也可以顯示其他已註冊的捷徑功能表。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
      </Docs>
    </Member>
    <Member MemberName="Verbs">
      <MemberSignature Language="C#" Value="public System.ComponentModel.Design.DesignerVerbCollection Verbs { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.Design.DesignerVerbCollection Verbs" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.IMenuCommandService.Verbs" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Verbs As DesignerVerbCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::Design::DesignerVerbCollection ^ Verbs { System::ComponentModel::Design::DesignerVerbCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Verbs : System.ComponentModel.Design.DesignerVerbCollection" Usage="System.ComponentModel.Design.IMenuCommandService.Verbs" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.DesignerVerbCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得目前可用的設計工具動詞命令集合。</summary>
        <value>
          <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" />，包含目前可用的設計工具動詞命令。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 目前可用的設計工具動詞的集合，包含所有全域設計工具動詞命令，可加入由<xref:System.ComponentModel.Design.IMenuCommandService.AddVerb%2A>上這個介面，以及個別設計工具的動詞命令所提供的方法<xref:System.ComponentModel.Design.IDesigner.Verbs%2A>個別設計工具的屬性。 如果與設計工具動詞的名稱衝突的全域動詞命令的名稱，設計工具提供的設計工具動詞的優先順序較高。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.DesignerVerbCollection" />
        <altmember cref="P:System.ComponentModel.Design.IDesigner.Verbs" />
      </Docs>
    </Member>
  </Members>
</Type>