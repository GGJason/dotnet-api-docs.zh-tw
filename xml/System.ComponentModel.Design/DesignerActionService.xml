<Type Name="DesignerActionService" FullName="System.ComponentModel.Design.DesignerActionService">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="88aef9e8c4732cac7db903011c2c029fe5358c95" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37696839" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DesignerActionService : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DesignerActionService extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.DesignerActionService" />
  <TypeSignature Language="VB.NET" Value="Public Class DesignerActionService&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class DesignerActionService : IDisposable" />
  <TypeSignature Language="F#" Value="type DesignerActionService = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>建立管理元件之 <see cref="T:System.ComponentModel.Design.DesignerActionItem" /> 物件集合的設計階段服務。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.Design.DesignerActionService>類別會負責管理集合的<xref:System.ComponentModel.Design.DesignerActionItem>元件在設計階段在表單上存在的每個執行個體的物件。 這個類別可讓項目建立時直接推送模型，而且主要是用於設計階段工具開發人員，不過也可以使用由元件和自訂控制項開發人員。  
  
 設計階段工具開發人員必須決定要顯示的元件，並判斷當變更此清單的項目清單。 它們也可以建立增益集運作搭配智慧標籤面板物件。  
  
 進階開發人員可能需要以動態方式控制與元件相關聯的項目，因此取代或補充標準提取模型的元件。 比方說，可以改變面板命令，根據其使用和元件的設計階段狀態的內容。  
  
> [!NOTE]
>  <xref:System.ComponentModel.Design.DesignerActionService>實際上是駕駛服務背後推送和提取模型; 不過，在後者的情況下，它會隱含地運作。  
  
 <xref:System.ComponentModel.Design.DesignerActionService> 提供直覺式的介面來存取及管理每個元件，包括下列方法和事件的項目：  
  
-   <xref:System.ComponentModel.Design.DesignerActionService.Contains%2A>方法會判斷是否<xref:System.ComponentModel.Design.DesignerActionService>目前正在管理特定的元件。  
  
-   <xref:System.ComponentModel.Design.DesignerActionService.GetComponentActions%2A>方法支援的項目清單的列舉型別。  
  
-   <xref:System.ComponentModel.Design.DesignerActionService.Add%2A>方法可讓您可新增<xref:System.ComponentModel.Design.DesignerActionList>或<xref:System.ComponentModel.Design.DesignerActionListCollection>元件執行個體的現有項目集。 相反地，<xref:System.ComponentModel.Design.DesignerActionService.Remove%2A>方法會移除一個或所有與元件相關聯的項目清單。  
  
    > [!NOTE]
    >  <xref:System.ComponentModel.Design.DesignerActionService.Add%2A>方法代表直接的推入模式的控制台項目關聯的元件。 相反地，提取模型依存於覆寫<xref:System.ComponentModel.Design.ComponentDesigner.ActionLists%2A>的設計工具類別，該元件的屬性。 在設計環境會負責將這些項目加入至目前<xref:System.ComponentModel.Design.DesignerActionService>元件在設計介面上的建立時。  
  
    > [!IMPORTANT]
    >  <xref:System.ComponentModel.Design.DesignerActionService.Add%2A>， <xref:System.ComponentModel.Design.DesignerActionService.Remove%2A>， <xref:System.ComponentModel.Design.DesignerActionService.Contains%2A>，和<xref:System.ComponentModel.Design.DesignerActionService.Clear%2A>方法只會考慮，或影響推入模型的項目。  
  
-   <xref:System.ComponentModel.Design.DesignerActionService.DesignerActionListsChanged>事件表示元件的項目集合變更時。  
  
 大規模的互通性，通常會建議使用的相同元件的設計階段的快顯功能表和其面板中的控制台項目部分，因為之間存在<xref:System.ComponentModel.Design.DesignerActionItem>物件和設計工具動詞命令。  
  
 如果是元件設計工具未明確指定<xref:System.ComponentModel.Design.DesignerActionList>(也就是它不包含覆寫<xref:System.ComponentModel.Design.ComponentDesigner.ActionLists%2A>屬性)，則會建立清單，從現有的設計工具動詞命令。 這些動詞由<xref:System.ComponentModel.Design.ComponentDesigner.Verbs%2A>屬性。 在此情況下，內部的動詞命令清單類別用來包含動詞命令包含項目面板項目的集合。  
  
 如果您想<xref:System.ComponentModel.Design.DesignerActionMethodItem>若要使用的面板項目和設計階段的快顯功能表項目，則您可以將`includeAsDesignerVerb`項目的建構函式中的參數。  
  
 使用<xref:System.ComponentModel.Design.DesignerActionUIService>以控制您的設計工具顯示<xref:System.ComponentModel.Design.ComponentDesigner.ActionLists%2A>。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.Design.DesignerActionListCollection" />
    <altmember cref="T:System.ComponentModel.Design.ComponentDesigner" />
    <altmember cref="T:System.ComponentModel.Design.DesignerActionItem" />
    <altmember cref="T:System.ComponentModel.Design.DesignerActionUIService" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DesignerActionService (IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.#ctor(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (serviceProvider As IServiceProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DesignerActionService(IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.Design.DesignerActionService : IServiceProvider -&gt; System.ComponentModel.Design.DesignerActionService" Usage="new System.ComponentModel.Design.DesignerActionService serviceProvider" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">目前設計階段環境的服務提供者。</param>
        <summary>初始化 <see cref="T:System.ComponentModel.Design.DesignerActionService" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所需的監視選項和元件變更服務提供者。 它預期支援<xref:System.ComponentModel.Design.IDesignerHost>和<xref:System.ComponentModel.Design.IComponentChangeService>型別。 <xref:System.ComponentModel.Design.DesignerActionService>類別會使用內部資料表來管理元件和其相關聯<xref:System.ComponentModel.Design.DesignerActionList>智慧標籤。  
  
 一般而言，元件開發人員不需要建立這個類別; 的執行個體相反地，它們可以取得現有的執行個體，透過呼叫<xref:System.ComponentModel.Component.GetService%2A?displayProperty=nameWithType>方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.Dispose" />
        <altmember cref="T:System.ComponentModel.Design.IDesignerHost" />
        <altmember cref="T:System.ComponentModel.Design.IComponentChangeService" />
        <altmember cref="M:System.ComponentModel.Component.GetService(System.Type)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將一或多個 <see cref="T:System.ComponentModel.Design.DesignerActionList" /> 物件加入受管理智慧標籤的目前集合。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.ComponentModel.IComponent comp, System.ComponentModel.Design.DesignerActionList actionList);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.ComponentModel.IComponent comp, class System.ComponentModel.Design.DesignerActionList actionList) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.Add(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionList)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (comp As IComponent, actionList As DesignerActionList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::ComponentModel::IComponent ^ comp, System::ComponentModel::Design::DesignerActionList ^ actionList);" />
      <MemberSignature Language="F#" Value="member this.Add : System.ComponentModel.IComponent * System.ComponentModel.Design.DesignerActionList -&gt; unit" Usage="designerActionService.Add (comp, actionList)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comp" Type="System.ComponentModel.IComponent" />
        <Parameter Name="actionList" Type="System.ComponentModel.Design.DesignerActionList" />
      </Parameters>
      <Docs>
        <param name="comp">智慧標籤要與其關聯的 <see cref="T:System.ComponentModel.IComponent" />。</param>
        <param name="actionList">包含要加入之新智慧標籤項目的 <see cref="T:System.ComponentModel.Design.DesignerActionList" />。</param>
        <summary>將 <see cref="T:System.ComponentModel.Design.DesignerActionList" /> 加入受管理智慧標籤的目前集合。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.Design.DesignerActionService.Add%2A>方法代表推送模型加入智慧標籤項目。 替代的提取模型依存於覆寫<xref:System.ComponentModel.Design.ComponentDesigner.ActionLists%2A>之對應元件的設計工具中的屬性。  
  
 要加入的清單時呼叫這個方法時，會掃描任何<xref:System.ComponentModel.Design.DesignerActionMethodItem>具有<xref:System.ComponentModel.Design.DesignerActionMethodItem.IncludeAsDesignerVerb%2A>屬性設定為`true`。 這些項目會加入到此元件，透過呼叫的設計工具動詞命令清單<xref:System.ComponentModel.Design.MenuCommandService.AddVerb%2A?displayProperty=nameWithType>方法。  
  
 智慧標籤所管理的元件執行個體為基礎。 受管理的集合可能包含重複的項目。  
  
 這個方法會引發<xref:System.ComponentModel.Design.DesignerActionService.DesignerActionListsChanged>事件。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">參數的其中之一或兩者都是 <see langword="null" />。</exception>
        <altmember cref="T:System.ComponentModel.Design.DesignerActionList" />
        <altmember cref="P:System.ComponentModel.Design.ComponentDesigner.ActionLists" />
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.Remove" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.Contains(System.ComponentModel.IComponent)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.ComponentModel.IComponent comp, System.ComponentModel.Design.DesignerActionListCollection designerActionListCollection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.ComponentModel.IComponent comp, class System.ComponentModel.Design.DesignerActionListCollection designerActionListCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.Add(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionListCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::ComponentModel::IComponent ^ comp, System::ComponentModel::Design::DesignerActionListCollection ^ designerActionListCollection);" />
      <MemberSignature Language="F#" Value="member this.Add : System.ComponentModel.IComponent * System.ComponentModel.Design.DesignerActionListCollection -&gt; unit" Usage="designerActionService.Add (comp, designerActionListCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comp" Type="System.ComponentModel.IComponent" />
        <Parameter Name="designerActionListCollection" Type="System.ComponentModel.Design.DesignerActionListCollection" />
      </Parameters>
      <Docs>
        <param name="comp">智慧標籤要與其關聯的 <see cref="T:System.ComponentModel.IComponent" />。</param>
        <param name="designerActionListCollection">包含要加入之新智慧標籤項目的 <see cref="T:System.ComponentModel.Design.DesignerActionListCollection" />。</param>
        <summary>將 <see cref="T:System.ComponentModel.Design.DesignerActionListCollection" /> 加入受管理智慧標籤的目前集合。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.Design.DesignerActionService.Add%2A>方法代表推送模型加入智慧標籤項目。 替代的提取模型依存於覆寫<xref:System.ComponentModel.Design.ComponentDesigner.ActionLists%2A>之對應元件的設計工具中的屬性。  
  
 要加入的清單時呼叫這個方法時，會掃描任何<xref:System.ComponentModel.Design.DesignerActionMethodItem>具有<xref:System.ComponentModel.Design.DesignerActionMethodItem.IncludeAsDesignerVerb%2A>屬性設定為`true`。 這些項目會加入到此元件，透過呼叫的設計工具動詞命令清單<xref:System.ComponentModel.Design.MenuCommandService.AddVerb%2A?displayProperty=nameWithType>方法。  
  
 智慧標籤所管理的元件執行個體為基礎。 受管理的集合可能包含重複的項目。  
  
 這個方法會引發<xref:System.ComponentModel.Design.DesignerActionService.DesignerActionListsChanged>事件。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">參數的其中之一或兩者都是 <see langword="null" />。</exception>
        <altmember cref="T:System.ComponentModel.Design.DesignerActionList" />
        <altmember cref="P:System.ComponentModel.Design.ComponentDesigner.ActionLists" />
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.Remove" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.Contains(System.ComponentModel.IComponent)" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="designerActionService.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>釋放管理的所有元件並清除所有推入模型智慧標籤清單。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.Design.DesignerActionService.Clear%2A>方法清空內部資料表用來儲存相關的元件和其推入模型智慧標籤清單的資訊。  
  
> [!CAUTION]
>  因為這個方法會影響目前的服務所管理的所有元件並不只是目前的元件，應該謹慎使用這個方法。 一般而言，設計階段工具開發人員會使用它，重設的設計介面時。 元件開發人員應該使用其中一種<xref:System.ComponentModel.Design.DesignerActionService.Remove%2A>方法改為移除個別的智慧標籤項目或清單中。  
  
 A<xref:System.ComponentModel.Design.DesignerActionService.DesignerActionListsChanged>先前由目前的服務每個元件都會引發事件。  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.Remove" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.ComponentModel.IComponent comp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.ComponentModel.IComponent comp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.Contains(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (comp As IComponent) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::ComponentModel::IComponent ^ comp);" />
      <MemberSignature Language="F#" Value="member this.Contains : System.ComponentModel.IComponent -&gt; bool" Usage="designerActionService.Contains comp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comp" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="comp">要搜尋的 <see cref="T:System.ComponentModel.IComponent" />。</param>
        <summary>決定目前智慧標籤服務是否為指定元件管理動作清單。</summary>
        <returns>如果元件由目前服務管理，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.Design.DesignerActionService.Contains%2A>方法只會辨識推入模型智慧標籤，也就是與元件相關聯<xref:System.ComponentModel.Design.DesignerActionService.Add%2A>方法。  
  
 雖然沒有任何結構限制的並行數目<xref:System.ComponentModel.Design.DesignerActionService>設計階段工具所建立的執行個體，通常服務中的單一執行個體建立每個設計介面。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="comp" /> 為 <see langword="null" />。</exception>
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.Add" />
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.Remove" />
      </Docs>
    </Member>
    <Member MemberName="DesignerActionListsChanged">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.Design.DesignerActionListsChangedEventHandler DesignerActionListsChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.Design.DesignerActionListsChangedEventHandler DesignerActionListsChanged" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.Design.DesignerActionService.DesignerActionListsChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DesignerActionListsChanged As DesignerActionListsChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::Design::DesignerActionListsChangedEventHandler ^ DesignerActionListsChanged;" />
      <MemberSignature Language="F#" Value="member this.DesignerActionListsChanged : System.ComponentModel.Design.DesignerActionListsChangedEventHandler " Usage="member this.DesignerActionListsChanged : System.ComponentModel.Design.DesignerActionListsChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.DesignerActionListsChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於移除或加入任何元件的 <see cref="T:System.ComponentModel.Design.DesignerActionList" /> 時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表顯示的一組相關聯的特殊類別<xref:System.ComponentModel.Design.DesignerActionService.DesignerActionListsChanged>事件。  
  
|特製化的型別|描述|  
|----------------------|-----------------|  
|<xref:System.ComponentModel.Design.DesignerActionListsChangedEventArgs>|加入智慧標籤清單管理中的特定資訊。 這個類別特製化從<xref:System.EventArgs>。|  
|<xref:System.ComponentModel.Design.DesignerActionListsChangedEventHandler>|連接<xref:System.ComponentModel.Design.DesignerActionListsChangedEventArgs>與其處理常式。|  
|<xref:System.ComponentModel.Design.DesignerActionListsChangedType>|表示清單是否已加入或移除。|  
  
 如需有關如何處理事件的詳細資訊，請參閱 < [NIB： 使用事件](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.DesignerActionListsChangedEventArgs" />
        <altmember cref="T:System.ComponentModel.Design.DesignerActionListsChangedType" />
        <altmember cref="T:System.ComponentModel.Design.DesignerActionListsChangedEventHandler" />
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.Add" />
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.Remove" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.Clear" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>釋放 <see cref="T:System.ComponentModel.Design.DesignerActionService" /> 使用的資源。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="designerActionService.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>釋放 <see cref="T:System.ComponentModel.Design.DesignerActionService" /> 類別所使用的所有資源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.Design.DesignerActionService.Dispose%2A>方法是唯一的方法所託管的實作<xref:System.IDisposable>介面。 當您完成使用 <xref:System.ComponentModel.Design.DesignerActionService> 後，請呼叫這個方法。 它會執行兩個主要動作：  
  
-   從設計環境，透過呼叫中的可用服務清單中移除目前的服務<xref:System.ComponentModel.Design.IServiceContainer.RemoveService%2A>方法。  
  
-   從相關聯的元件變更的事件取消訂閱<xref:System.ComponentModel.Design.IComponentChangeService>介面。  
  
 <xref:System.ComponentModel.Design.DesignerActionService.Dispose%2A> 使用完畢時，請呼叫 <xref:System.ComponentModel.Design.DesignerActionService>。 <xref:System.ComponentModel.Design.DesignerActionService.Dispose%2A> 方法會將 <xref:System.ComponentModel.Design.DesignerActionService> 保留在無法使用的狀態。 之後呼叫<xref:System.ComponentModel.Design.DesignerActionService.Dispose%2A>，您必須釋放所有的參考<xref:System.ComponentModel.Design.DesignerActionService>讓記憶體回收行程可以回收記憶體，<xref:System.ComponentModel.Design.DesignerActionService>所佔用。 如需詳細資訊，請參閱 <<c0> [ 清除 Unmanaged 資源向上](~/docs/standard/garbage-collection/unmanaged.md)並[實作 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。  
  
> [!NOTE]
>  在您釋放最後一個 <xref:System.ComponentModel.Design.DesignerActionService.Dispose%2A> 參考之前，請務必呼叫 <xref:System.ComponentModel.Design.DesignerActionService>。 否則工作窗格所使用的資源不會釋放，直到記憶體回收行程呼叫 <xref:System.ComponentModel.Design.DesignerActionService> 物件的 `Finalize` 方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.ComponentModel.Design.IServiceContainer.RemoveService" />
        <altmember cref="T:System.ComponentModel.Design.IComponentChangeService" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="designerActionService.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
        <summary>釋放 <see cref="T:System.ComponentModel.Design.DesignerActionService" /> 所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.Design.DesignerActionService.Dispose%2A>方法是唯一的方法所託管的實作<xref:System.IDisposable>介面。 當您完成使用 <xref:System.ComponentModel.Design.DesignerActionService> 後，請呼叫這個方法。 它會執行兩個主要動作：  
  
-   從設計環境，透過呼叫中的可用服務清單中移除目前的服務<xref:System.ComponentModel.Design.IServiceContainer.RemoveService%2A>方法。  
  
-   從相關聯的元件變更的事件取消訂閱<xref:System.ComponentModel.Design.IComponentChangeService>介面。  
  
 這個方法會呼叫公用`Dispose()`方法和<xref:System.Object.Finalize%2A>方法。 `Dispose()` 叫用受保護`Dispose(Boolean)`方法`disposing`參數設為`true`。 <xref:System.Object.Finalize%2A> 叫用`Dispose`具有`disposing`設定為`false`。  
  
 `disposing` 參數為 `true` 時，這個方法會釋放 <xref:System.ComponentModel.Design.DesignerActionService> 參考的任何 Managed 物件所掌握的資源。 這個方法會叫用每個參考物件的 `Dispose()` 方法。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Dispose" /> 可以多次呼叫的其他物件。當覆寫<see langword="Dispose(Boolean)" />小心不要參考先前處置好的呼叫中的物件<see langword="Dispose" />。如需有關如何實作<see langword="Dispose(Boolean)" />，請參閱 [實作 Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md)。如需詳細資訊<see langword="Dispose" />並<see cref="M:System.Object.Finalize" />，請參閱 [清除設定未受管理的 Resources](~/docs/standard/garbage-collection/unmanaged.md) 和 [覆寫 Finalize 方法] (http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)。</para>
        </block>
        <altmember cref="Overload:System.ComponentModel.Design.IServiceContainer.RemoveService" />
        <altmember cref="T:System.ComponentModel.Design.IComponentChangeService" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetComponentActions">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>傳回與元件相關聯的智慧標籤項目清單集合。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetComponentActions">
      <MemberSignature Language="C#" Value="public System.ComponentModel.Design.DesignerActionListCollection GetComponentActions (System.ComponentModel.IComponent component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ComponentModel.Design.DesignerActionListCollection GetComponentActions(class System.ComponentModel.IComponent component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.GetComponentActions(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetComponentActions (component As IComponent) As DesignerActionListCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ComponentModel::Design::DesignerActionListCollection ^ GetComponentActions(System::ComponentModel::IComponent ^ component);" />
      <MemberSignature Language="F#" Value="member this.GetComponentActions : System.ComponentModel.IComponent -&gt; System.ComponentModel.Design.DesignerActionListCollection" Usage="designerActionService.GetComponentActions component" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.DesignerActionListCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="component">智慧標籤所關聯的元件。</param>
        <summary>傳回與元件相關聯的智慧標籤項目清單集合。</summary>
        <returns>指定之元件的智慧標籤集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.Design.DesignerActionService.GetComponentActions%2A>方法就相當於呼叫<xref:System.ComponentModel.Design.DesignerActionService.GetComponentActions%28System.ComponentModel.IComponent%2CSystem.ComponentModel.Design.ComponentActionsType%29>方法使用`type`參數<xref:System.ComponentModel.Design.ComponentActionsType.All>。 因此，傳回的集合會包含智慧標籤的推播及提取清單。  
  
 傳回<xref:System.ComponentModel.Design.DesignerActionListCollection>會透過新增的項目清單的聯集<xref:System.ComponentModel.Design.DesignerActionService.Add%2A>方法，也列出取自<xref:System.ComponentModel.Design.DesignerCommandSet>取自元件的站台的執行個體。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="comp" /> 為 <see langword="null" />。</exception>
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.GetComponentDesignerActions(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionListCollection)" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.GetComponentServiceActions(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionListCollection)" />
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.Add" />
        <altmember cref="T:System.ComponentModel.Design.DesignerCommandSet" />
      </Docs>
    </Member>
    <Member MemberName="GetComponentActions">
      <MemberSignature Language="C#" Value="public virtual System.ComponentModel.Design.DesignerActionListCollection GetComponentActions (System.ComponentModel.IComponent component, System.ComponentModel.Design.ComponentActionsType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ComponentModel.Design.DesignerActionListCollection GetComponentActions(class System.ComponentModel.IComponent component, valuetype System.ComponentModel.Design.ComponentActionsType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.GetComponentActions(System.ComponentModel.IComponent,System.ComponentModel.Design.ComponentActionsType)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetComponentActions (component As IComponent, type As ComponentActionsType) As DesignerActionListCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::ComponentModel::Design::DesignerActionListCollection ^ GetComponentActions(System::ComponentModel::IComponent ^ component, System::ComponentModel::Design::ComponentActionsType type);" />
      <MemberSignature Language="F#" Value="abstract member GetComponentActions : System.ComponentModel.IComponent * System.ComponentModel.Design.ComponentActionsType -&gt; System.ComponentModel.Design.DesignerActionListCollection&#xA;override this.GetComponentActions : System.ComponentModel.IComponent * System.ComponentModel.Design.ComponentActionsType -&gt; System.ComponentModel.Design.DesignerActionListCollection" Usage="designerActionService.GetComponentActions (component, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.DesignerActionListCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="type" Type="System.ComponentModel.Design.ComponentActionsType" />
      </Parameters>
      <Docs>
        <param name="component">智慧標籤所關聯的元件。</param>
        <param name="type">要用於篩選相關聯智慧標籤的 <see cref="T:System.ComponentModel.Design.ComponentActionsType" />。</param>
        <summary>傳回與元件相關聯之指定型別的智慧標籤項目清單集合。</summary>
        <returns>指定之型別 (屬於指定的元件) 的智慧標籤集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個版本的多載<xref:System.ComponentModel.Design.DesignerActionService.GetComponentActions%2A>方法會篩選`type`參數，它可以有下列值之一。  
  
|值|描述|  
|-----------|-----------------|  
|<xref:System.ComponentModel.Design.ComponentActionsType.All>|所有相關聯的智慧標籤。|  
|<xref:System.ComponentModel.Design.ComponentActionsType.Component>|僅限提取模型智慧標籤。|  
|<xref:System.ComponentModel.Design.ComponentActionsType.Service>|僅限推入模型智慧標籤。|  
  
 如果相關聯的設計工具元件未提供提取模型智慧標籤清單中，則<xref:System.ComponentModel.Design.DesignerActionService.GetComponentActions%2A>方法將改為使用設計工具的設計階段的快顯功能表項目從<xref:System.ComponentModel.Design.ComponentDesigner.Verbs%2A>屬性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="comp" /> 為 <see langword="null" />。</exception>
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.GetComponentDesignerActions(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionListCollection)" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.GetComponentServiceActions(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionListCollection)" />
        <altmember cref="T:System.ComponentModel.Design.DesignerActionListCollection" />
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
        <altmember cref="T:System.ComponentModel.Design.ComponentActionsType" />
      </Docs>
    </Member>
    <Member MemberName="GetComponentDesignerActions">
      <MemberSignature Language="C#" Value="protected virtual void GetComponentDesignerActions (System.ComponentModel.IComponent component, System.ComponentModel.Design.DesignerActionListCollection actionLists);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GetComponentDesignerActions(class System.ComponentModel.IComponent component, class System.ComponentModel.Design.DesignerActionListCollection actionLists) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.GetComponentDesignerActions(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionListCollection)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GetComponentDesignerActions (component As IComponent, actionLists As DesignerActionListCollection)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void GetComponentDesignerActions(System::ComponentModel::IComponent ^ component, System::ComponentModel::Design::DesignerActionListCollection ^ actionLists);" />
      <MemberSignature Language="F#" Value="abstract member GetComponentDesignerActions : System.ComponentModel.IComponent * System.ComponentModel.Design.DesignerActionListCollection -&gt; unit&#xA;override this.GetComponentDesignerActions : System.ComponentModel.IComponent * System.ComponentModel.Design.DesignerActionListCollection -&gt; unit" Usage="designerActionService.GetComponentDesignerActions (component, actionLists)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="actionLists" Type="System.ComponentModel.Design.DesignerActionListCollection" />
      </Parameters>
      <Docs>
        <param name="component">智慧標籤所關聯的元件。</param>
        <param name="actionLists">要加入相關聯智慧標籤的集合。</param>
        <summary>擷取與元件相關聯的提取模型智慧標籤。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.Design.DesignerActionService.GetComponentDesignerActions%2A>方法是協助程式方法<xref:System.ComponentModel.Design.DesignerActionService.GetComponentActions%2A>方法。 <xref:System.ComponentModel.Design.DesignerActionService.GetComponentDesignerActions%2A> 搜尋提取模型智慧標記型別的<xref:System.ComponentModel.Design.ComponentActionsType.Component>，然後將這些檔案來提供`actionLists`集合。  
  
 如果元件的開發人員未明確提供透過智慧標籤的集合<xref:System.ComponentModel.Design.ComponentDesigner.ActionLists%2A>其設計工具屬性，這個方法會重複使用的設計階段的快顯功能表項目，取得透過<xref:System.ComponentModel.Design.ComponentDesigner.Verbs%2A>屬性設計工具。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">參數的其中之一或兩者都是 <see langword="null" />。</exception>
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.GetComponentActions" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.GetComponentServiceActions(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionListCollection)" />
        <altmember cref="P:System.ComponentModel.Design.ComponentDesigner.ActionLists" />
        <altmember cref="P:System.ComponentModel.Design.ComponentDesigner.Verbs" />
      </Docs>
    </Member>
    <Member MemberName="GetComponentServiceActions">
      <MemberSignature Language="C#" Value="protected virtual void GetComponentServiceActions (System.ComponentModel.IComponent component, System.ComponentModel.Design.DesignerActionListCollection actionLists);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GetComponentServiceActions(class System.ComponentModel.IComponent component, class System.ComponentModel.Design.DesignerActionListCollection actionLists) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.GetComponentServiceActions(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionListCollection)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GetComponentServiceActions (component As IComponent, actionLists As DesignerActionListCollection)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void GetComponentServiceActions(System::ComponentModel::IComponent ^ component, System::ComponentModel::Design::DesignerActionListCollection ^ actionLists);" />
      <MemberSignature Language="F#" Value="abstract member GetComponentServiceActions : System.ComponentModel.IComponent * System.ComponentModel.Design.DesignerActionListCollection -&gt; unit&#xA;override this.GetComponentServiceActions : System.ComponentModel.IComponent * System.ComponentModel.Design.DesignerActionListCollection -&gt; unit" Usage="designerActionService.GetComponentServiceActions (component, actionLists)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="actionLists" Type="System.ComponentModel.Design.DesignerActionListCollection" />
      </Parameters>
      <Docs>
        <param name="component">智慧標籤所關聯的元件。</param>
        <param name="actionLists">要加入相關聯智慧標籤的集合。</param>
        <summary>擷取與元件相關聯的推入模型智慧標籤。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.Design.DesignerActionService.GetComponentServiceActions%2A>方法是協助程式方法<xref:System.ComponentModel.Design.DesignerActionService.GetComponentActions%2A>方法。 它會搜尋推入模型智慧標籤型別的<xref:System.ComponentModel.Design.ComponentActionsType.Service>，然後將這些檔案來提供`actionLists`集合。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">參數的其中之一或兩者都是 <see langword="null" />。</exception>
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.GetComponentActions" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.GetComponentDesignerActions(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionListCollection)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Remove">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>從一或多個元件解除一或多個智慧標籤清單的關聯。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.ComponentModel.Design.DesignerActionList actionList);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.ComponentModel.Design.DesignerActionList actionList) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.Remove(System.ComponentModel.Design.DesignerActionList)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (actionList As DesignerActionList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::ComponentModel::Design::DesignerActionList ^ actionList);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.ComponentModel.Design.DesignerActionList -&gt; unit" Usage="designerActionService.Remove actionList" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actionList" Type="System.ComponentModel.Design.DesignerActionList" />
      </Parameters>
      <Docs>
        <param name="actionList">要移除的智慧標籤清單。</param>
        <summary>移除目前服務管理之所有元件的指定智慧標籤清單。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個版本的<xref:System.ComponentModel.Design.DesignerActionService.Remove%2A>方法通常由設計工具開發人員，因為元件開發人員通常不知道其他元件存在於目前的設計空間。  
  
 如果成功，這個方法會引發<xref:System.ComponentModel.Design.DesignerActionService.DesignerActionListsChanged>事件。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="actionList" /> 為 <see langword="null" />。</exception>
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.Add" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionUIService.HideUI(System.ComponentModel.IComponent)" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.Clear" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.ComponentModel.IComponent comp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.ComponentModel.IComponent comp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.Remove(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (comp As IComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::ComponentModel::IComponent ^ comp);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.ComponentModel.IComponent -&gt; unit" Usage="designerActionService.Remove comp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comp" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="comp">要從其解除智慧標籤關聯的元件。</param>
        <summary>移除與指定元件相關聯的所有智慧標籤清單。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果成功，<xref:System.ComponentModel.Design.DesignerActionService.Remove%2A>方法會引發<xref:System.ComponentModel.Design.DesignerActionService.DesignerActionListsChanged>事件。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="comp" /> 為 <see langword="null" />。</exception>
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.Add" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionUIService.HideUI(System.ComponentModel.IComponent)" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.Clear" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.ComponentModel.IComponent comp, System.ComponentModel.Design.DesignerActionList actionList);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.ComponentModel.IComponent comp, class System.ComponentModel.Design.DesignerActionList actionList) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.Remove(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionList)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (comp As IComponent, actionList As DesignerActionList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::ComponentModel::IComponent ^ comp, System::ComponentModel::Design::DesignerActionList ^ actionList);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.ComponentModel.IComponent * System.ComponentModel.Design.DesignerActionList -&gt; unit" Usage="designerActionService.Remove (comp, actionList)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comp" Type="System.ComponentModel.IComponent" />
        <Parameter Name="actionList" Type="System.ComponentModel.Design.DesignerActionList" />
      </Parameters>
      <Docs>
        <param name="comp">要從其解除智慧標籤關聯的元件。</param>
        <param name="actionList">要移除的智慧標籤清單。</param>
        <summary>從指定的元件移除指定的智慧標籤清單。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果成功，<xref:System.ComponentModel.Design.DesignerActionService.Remove%2A>方法會引發<xref:System.ComponentModel.Design.DesignerActionService.DesignerActionListsChanged>事件。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">參數的其中之一或兩者都是 <see langword="null" />。</exception>
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.Add" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionUIService.HideUI(System.ComponentModel.IComponent)" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.Clear" />
      </Docs>
    </Member>
  </Members>
</Type>