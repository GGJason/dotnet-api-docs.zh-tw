<Type Name="IWindowProvider" FullName="System.Windows.Automation.Provider.IWindowProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="644159038f400a8d228091aebc13941444b88edb" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30616162" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IWindowProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IWindowProvider" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.Provider.IWindowProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IWindowProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IWindowProvider" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationProvider</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("987df77b-db06-4d77-8f8a-86a9c3bb90b9")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="fa368-101">公開方法與屬性，以支援使用者介面自動化用戶端存取控制項，這些控制項在傳統圖形化使用者介面 (GUI) 中提供基本的視窗功能。</span>
      <span class="sxs-lookup">
        <span data-stu-id="fa368-101">Exposes methods and properties to support UI Automation client access to controls that provide fundamental window-based functionality within a traditional graphical user interface (GUI).</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa368-102">在必須支援的 UI 自動化提供者上實作<xref:System.Windows.Automation.WindowPattern>控制項模式。</span><span class="sxs-lookup"><span data-stu-id="fa368-102">Implemented on a UI Automation provider that must support the <xref:System.Windows.Automation.WindowPattern> control pattern.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Automation.WindowPattern" />
  </Docs>
  <Members>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.IWindowProvider.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="fa368-103">嘗試關閉視窗。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa368-103">Attempts to close the window.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa368-104"><xref:System.Windows.Automation.Provider.IWindowProvider.Close%2A> 必須立即傳回而不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="fa368-104"><xref:System.Windows.Automation.Provider.IWindowProvider.Close%2A> must return immediately without blocking.</span></span>  
  
 <span data-ttu-id="fa368-105"><xref:System.Windows.Automation.Provider.IWindowProvider.Close%2A> 會引發 <xref:System.Windows.Automation.WindowPatternIdentifiers.WindowClosedEvent> 事件。</span><span class="sxs-lookup"><span data-stu-id="fa368-105"><xref:System.Windows.Automation.Provider.IWindowProvider.Close%2A> raises the <xref:System.Windows.Automation.WindowPatternIdentifiers.WindowClosedEvent> event.</span></span> <span data-ttu-id="fa368-106">可能的話，控制其相關聯的動作完成之後，應該引發事件。</span><span class="sxs-lookup"><span data-stu-id="fa368-106">If possible, the event should be raised after the control has completed its associated action.</span></span>  
  
 <span data-ttu-id="fa368-107">分割窗格控制項上呼叫時，這個方法會關閉窗格，並移除相關聯的分割。</span><span class="sxs-lookup"><span data-stu-id="fa368-107">When called on a split pane control, this method will close the pane and remove the associated split.</span></span> <span data-ttu-id="fa368-108">這個方法也可能會關閉所有其他窗格，視實作而定。</span><span class="sxs-lookup"><span data-stu-id="fa368-108">This method might also close all other panes, depending on implementation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fa368-109">控制項無法執行要求的動作時。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa368-109">When the control is unable to perform the requested action.</span>
          </span>
        </exception>
        <exception cref="T:System.Windows.Automation.ElementNotAvailableException">
          <span data-ttu-id="fa368-110">目標項目無法再使用時 (例如視窗已關閉)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa368-110">When the target element is no longer available (for example, the window has closed).</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="InteractionState">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.WindowInteractionState InteractionState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Automation.WindowInteractionState InteractionState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IWindowProvider.InteractionState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InteractionState As WindowInteractionState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::WindowInteractionState InteractionState { System::Windows::Automation::WindowInteractionState get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.WindowInteractionState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="fa368-111">取得視窗的互動狀態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa368-111">Gets the interaction state of the window.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="fa368-112">控制項的 <see cref="T:System.Windows.Automation.WindowInteractionState" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa368-112">The <see cref="T:System.Windows.Automation.WindowInteractionState" /> of the control.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsModal">
      <MemberSignature Language="C#" Value="public bool IsModal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsModal" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IWindowProvider.IsModal" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsModal As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsModal { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="fa368-113">取得的值指定視窗是否為強制回應。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa368-113">Gets a value that specifies whether the window is modal.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="fa368-114">如果為強制回應的視窗，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa368-114">
              <see langword="true" /> if the window is modal; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTopmost">
      <MemberSignature Language="C#" Value="public bool IsTopmost { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTopmost" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IWindowProvider.IsTopmost" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsTopmost As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsTopmost { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="fa368-115">取得值，這個值指定視窗是否是圖層順序的最上層項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa368-115">Gets a value that specifies whether the window is the topmost element in the z-order.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="fa368-116">如果為最上層視窗，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa368-116">
              <see langword="true" /> if the window is topmost; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Maximizable">
      <MemberSignature Language="C#" Value="public bool Maximizable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Maximizable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IWindowProvider.Maximizable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Maximizable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Maximizable { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="fa368-117">取得的值指定視窗是否可最大化。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa368-117">Gets a value that specifies whether the window can be maximized.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="fa368-118">如果視窗可最大化，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa368-118">
              <see langword="true" /> if the window can be maximized; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Minimizable">
      <MemberSignature Language="C#" Value="public bool Minimizable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Minimizable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IWindowProvider.Minimizable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Minimizable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Minimizable { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="fa368-119">取得的值指定視窗是否可最小化。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa368-119">Gets a value that specifies whether the window can be minimized.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="fa368-120">如果視窗可最小化，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa368-120">
              <see langword="true" /> if the window can be minimized; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVisualState">
      <MemberSignature Language="C#" Value="public void SetVisualState (System.Windows.Automation.WindowVisualState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVisualState(valuetype System.Windows.Automation.WindowVisualState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.IWindowProvider.SetVisualState(System.Windows.Automation.WindowVisualState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetVisualState (state As WindowVisualState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetVisualState(System::Windows::Automation::WindowVisualState state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Windows.Automation.WindowVisualState" />
      </Parameters>
      <Docs>
        <param name="state">
          <span data-ttu-id="fa368-121">要求的視窗可見狀態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa368-121">The requested visual state of the window.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa368-122">變更視窗的可見狀態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa368-122">Changes the visual state of the window.</span>
          </span>
          <span data-ttu-id="fa368-123">例如，最小化或最大化。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa368-123">For example, minimizes or maximizes it.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fa368-124">當控制項不支援要求的行為。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa368-124">When the control does not support the requested behavior.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="VisualState">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.WindowVisualState VisualState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Automation.WindowVisualState VisualState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IWindowProvider.VisualState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property VisualState As WindowVisualState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::WindowVisualState VisualState { System::Windows::Automation::WindowVisualState get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.WindowVisualState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="fa368-125">取得視窗的可見狀態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa368-125">Gets the visual state of the window.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="fa368-126">視窗的可見狀態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa368-126">The visual state of the window.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitForInputIdle">
      <MemberSignature Language="C#" Value="public bool WaitForInputIdle (int milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitForInputIdle(int32 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.IWindowProvider.WaitForInputIdle(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForInputIdle (milliseconds As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool WaitForInputIdle(int milliseconds);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="milliseconds">
          <span data-ttu-id="fa368-127">等候相關聯處理序變成閒置的時間量 (以毫秒為單位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa368-127">The amount of time, in milliseconds, to wait for the associated process to become idle.</span>
          </span>
          <span data-ttu-id="fa368-128">最大值是 <see cref="F:System.Int32.MaxValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa368-128">The maximum is <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa368-129">導致將呼叫程式碼封鎖指定的時間，或直到相關聯的處理序進入閒置狀態 (就看何者先完成)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa368-129">Causes the calling code to block for the specified time or until the associated process enters an idle state, whichever completes first.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa368-130">如果視窗已進入閒置狀態，則為 <see langword="true" />，如果發生逾時，則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa368-130">
              <see langword="true" /> if the window has entered the idle state; <see langword="false" /> if the timeout occurred.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa368-131">這個方法通常用於搭配處理<xref:System.Windows.Automation.WindowPatternIdentifiers.WindowOpenedEvent>。</span><span class="sxs-lookup"><span data-stu-id="fa368-131">This method is typically used in conjunction with the handling of a <xref:System.Windows.Automation.WindowPatternIdentifiers.WindowOpenedEvent>.</span></span>  
  
 <span data-ttu-id="fa368-132">實作會依賴基礎的應用程式架構。因此這個方法可能會傳回段時間之後視窗可供使用者輸入。</span><span class="sxs-lookup"><span data-stu-id="fa368-132">The implementation is dependent on the underlying application framework; therefore this method might return some time after the window is ready for user input.</span></span> <span data-ttu-id="fa368-133">呼叫程式碼不應依賴此方法來確定視窗變成閒置狀態的確切時間。</span><span class="sxs-lookup"><span data-stu-id="fa368-133">The calling code should not rely on this method to ascertain exactly when the window has become idle.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="fa368-134">當傳入的參數不是有效數字時。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa368-134">When the parameter passed in is not a valid number.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>