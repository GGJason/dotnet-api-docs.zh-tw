<Type Name="ChangeMonitor" FullName="System.Runtime.Caching.ChangeMonitor">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="73cd7d26a8035ac771856adae7eedfbd2609c7c2" />
    <Meta Name="ms.sourcegitcommit" Value="1654a92bac785a221098172d9cacd405ceaac9b7" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="12/01/2018" />
    <Meta Name="ms.locfileid" Value="52737438" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ChangeMonitor : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ChangeMonitor extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Caching.ChangeMonitor" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ChangeMonitor&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class ChangeMonitor abstract : IDisposable" />
  <TypeSignature Language="F#" Value="type ChangeMonitor = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Caching</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>提供衍生之自訂型別的基底類別，這個型別會監控快取項目所依存之資料的狀態變更。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.Caching.ChangeMonitor>類別作為基底類別衍生的監控專門用於特定的快取實作的類別。 A<xref:System.Runtime.Caching.ChangeMonitor>執行個體監視的資料取決於快取項目狀態的變更。 例如，項目可以是檔案或資料的實體，其內容會快取。 如果更新的檔案或資料的實體，則必須也變更相關聯的快取項目。 您可以監視的一般項目包括資料實體 （例如資料庫欄位、 值、 資料列或資料表）、 另一個快取項目，以及檔案和檔案屬性。  
  
 相依性的狀態變更為相依性變更。 在典型的快取實作中之後,<xref:System.Runtime.Caching.ChangeMonitor>執行個體通知快取相依性已變更時，快取會執行所需的動作，例如使插入快取項目失效。  
  
 衍生<xref:System.Runtime.Caching.ChangeMonitor>可以自訂類別，以監視特定的不同資料存放區的相依性變更。 比方說，有針對檔案系統、 實體記憶體或資料庫的快取實作。 <xref:System.Runtime.Caching.ChangeMonitor>類別會檢查外部快取中，會發生的變更，然後發出警示給快取中發生的變更。  
  
 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]包括下列類別衍生自<xref:System.Runtime.Caching.ChangeMonitor>類別：  
  
-   <xref:System.Runtime.Caching.CacheEntryChangeMonitor>  
  
-   <xref:System.Runtime.Caching.FileChangeMonitor>  
  
-   <xref:System.Runtime.Caching.HostFileChangeMonitor>  
  
-   <xref:System.Runtime.Caching.SqlChangeMonitor>  
  
 每個類別適用於不同類型的相依性。 例如，衍生<xref:System.Runtime.Caching.FileChangeMonitor>類別監視快取項目取決於檔案系統資料 （檔案及資料夾） 的快取的變更。  
  
 ]]></format>
    </remarks>
    <threadsafe>此型別具備執行緒安全。</threadsafe>
    <block subset="none" type="overrides">
      <para>如果您建立自訂快取實作或衍生的變更監視類型，您必須遵循特定的指導方針。 下列清單摘要說明這些指導方針。 如需詳細資訊，請參閱個別的方法或屬性的文件。  
  
-在衍生類別的建構函式必須設定<see cref="P:System.Runtime.Caching.ChangeMonitor.UniqueId" />屬性，開始監視，並呼叫<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />方法傳回之前的方法。 如果建構函式在建構期間發生錯誤，而且必須具有要處置的資源，只能呼叫建構函式<see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />多載之後<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />因為，方法呼叫<see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />多載會擲回<see cref="T:System.InvalidOperationException" />如果初始化未完成的例外狀況。  
  
-如果發生在變更完成之前初始化為受監視的資料、 建構函式必須呼叫<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />方法之前呼叫<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />方法。  
  
-之後衍生<see cref="T:System.Runtime.Caching.ChangeMonitor" />型別會具現化，您必須插入自訂監視<see cref="T:System.Runtime.Caching.ObjectCache" />實作。 如果您使用完變更監視器，呼叫或<see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />方法。  
  
-之後<see cref="T:System.Runtime.Caching.ChangeMonitor" />執行個體插入<see cref="T:System.Runtime.Caching.ObjectCache" />實作，<see cref="T:System.Runtime.Caching.ObjectCache" />執行個體所需變更監視器已處置。 插入無效，而且會導致例外狀況，即使<see cref="T:System.Runtime.Caching.ObjectCache" />實作必須呼叫<see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />多載。  
  
之後衍生的變更監視器已插入快取中，<see cref="T:System.Runtime.Caching.ObjectCache" />實作必須呼叫<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />，藉由傳遞<see cref="T:System.Runtime.Caching.OnChangedCallback" />物件。 <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />方法可以呼叫一次。 如果已經發生相依性變更，情況<see cref="T:System.Runtime.Caching.OnChangedCallback" />執行個體將會立即呼叫時<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />呼叫。 否則，<see cref="T:System.Runtime.Caching.OnChangedCallback" />執行個體將會呼叫一次。 此一次呼叫，都會發生時<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />呼叫方法，因為<see cref="T:System.Runtime.Caching.ChangeMonitor" />執行個體偵測到變更，或當<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />上呼叫方法<see cref="T:System.Runtime.Caching.ChangeMonitor" />，何者先發生。  
  
-<see cref="T:System.Runtime.Caching.OnChangedCallback" />所提供的執行個體<see cref="T:System.Runtime.Caching.ObjectCache" />實作應該移除相關聯的快取項目，並使用指定的原因<see cref="F:System.Web.Caching.CacheItemRemovedReason.DependencyChanged" />列舉型別。  
  
-A<see cref="T:System.Runtime.Caching.ChangeMonitor" />執行個體可以呼叫<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />方法是之前的快取實作呼叫<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />方法之後或。 如果<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />方法之前呼叫<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />呼叫時，基底<see cref="T:System.Runtime.Caching.ChangeMonitor" />實作會通知發生這種情況的快取，並且會觸發要傳遞至回呼<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />時，會立即<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />叫用。 傳遞給任何狀態資料<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />儲存變更監視器並接著傳遞給方法<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />方法時<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />叫用方法。  
  
-變更監視器必須實作<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" />方法。 如需詳細資訊，請參閱 <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> 方法的文件。  
  
-<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />方法多載必須先呼叫處置<see cref="T:System.Runtime.Caching.ChangeMonitor" />執行個體。 呼叫 Dispose 的規則如下所示： 
項目插入快取之前，必須負責對 dispose 的呼叫端的<see cref="T:System.Runtime.Caching.ChangeMonitor" />執行個體。  
  
-一次快取項目和<see cref="T:System.Runtime.Caching.ChangeMonitor" />與它相關聯的執行個體傳遞至快取，快取實作器必須確定，<see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />呼叫方法時，即使插入失敗。  
  
之後的項目和其相關聯<see cref="T:System.Runtime.Caching.ChangeMonitor" />執行個體傳遞至快取、 呼叫端必須處置相依性，因為當<see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />呼叫方法，呼叫會被視為相依性已變更。 如此一來，<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />自動叫用方法。  
  
-納入考量，這些規則<see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />必須呼叫方法，透過下列方式之一： 
-使用者必須先呼叫<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />如果他們決定不要插入快取中的衍生的變更監視器的執行個體的方法多載。  
  
-如果實作會嘗試將變更監控執行個體的物件快取插入，但插入失敗時，快取實作會負責呼叫<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />多載。 當插入嘗試會導致例外狀況時，快取實作必須處置任何相關聯的相依性。  
  
-如果移除快取項目時，快取實作也必須處置相依性。  
  
-內部實作<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />方法會自動呼叫<see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />方法之後它會呼叫回呼，註冊透過<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />。  
  
 <block subset="none" type="note"><para>  
 這個自動呼叫 dispose 方法，在事件引發時才會發生的初始化<see cref="T:System.Runtime.Caching.ChangeMonitor" />先前已完成執行個體。  
  
</para></block>  
  
 當衍生的變更監視器的建構函式呼叫<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />方法，如果變更監視的狀態已經變更 （也就是建構函式仍在作用中時受到已變更的狀態） 則<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />方法將自動處置變更監視器。  
  
-<see cref="P:System.Runtime.Caching.ChangeMonitor.HasChanged" />屬性設定為<see langword="true" />之後<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />方法會呼叫衍生的變更監視器執行個體，不論是否<see cref="T:System.Runtime.Caching.OnChangedCallback" />物件已由呼叫設定<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />方法與否。</para>
    </block>
    <altmember cref="N:System.Web.Caching" />
    <altmember cref="T:System.Runtime.Caching.ObjectCache" />
    <related type="Article" href="https://msdn.microsoft.com/library/ac11c8ea-df5d-4de8-b315-9ccf1048b0ce">ASP.NET 快取</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ChangeMonitor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ChangeMonitor();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Runtime.Caching.ChangeMonitor" /> 類別的新執行個體。 這個建構函式由衍生類別中的建構函式呼叫，來初始化基底類別。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.Caching.ChangeMonitor>類別具有預設建構函式。 不過，類別，繼承自基底<xref:System.Runtime.Caching.ChangeMonitor>類別，並定義自訂的變更監視的行為必須在建構函式執行初始化。 如需詳細資訊，請參閱繼承者一節的資訊。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在衍生類別的建構函式必須設定<see cref="P:System.Runtime.Caching.ChangeMonitor.UniqueId" />屬性，開始監視，並呼叫<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />類別之前它會傳回。 如果完成 （例如，如果快取中找不到相依的快取索引鍵） 在相依性變更初始化之前，必須呼叫建構函式<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />方法之前呼叫<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />方法。 在此情況下，建構函式可以呼叫<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />方法之後才<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />呼叫方法，因為<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />方法會初始化未完成時，擲回例外狀況。</para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>釋放 <see cref="T:System.Runtime.Caching.ChangeMonitor" /> 類別目前的執行個體所使用的全部資源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>方法用來釋放<xref:System.Runtime.Caching.ChangeMonitor>執行個體和相關的資源。 公用<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>會叫用方法，來協調與金鑰的生命週期事件 （例如初始化） 的衍生的變更監視器類別的處置程序，並釋放<xref:System.Runtime.Caching.ChangeMonitor>執行個體，以便執行個體進行記憶體回收。 <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>方法藉由處置的 managed 和 unmanaged 資源的衍生的變更監視器類別。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="changeMonitor.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將 <see cref="T:System.Runtime.Caching.ChangeMonitor" /> 類別的目前執行個體所使用的資源全部釋出。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>方法會叫用<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>衍生的類別僅一次，第一次呼叫的方法。 後續呼叫<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>方法沒有任何作用。 在呼叫方法之後，<xref:System.Runtime.Caching.ChangeMonitor.IsDisposed%2A>屬性設定為`true`。  
  
 <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>多載必須先呼叫處置<xref:System.Runtime.Caching.ChangeMonitor>執行個體。 呼叫 dispose 方法的規則如下：  
  
-   項目插入快取之前，它是對 dispose 的呼叫者會負責<xref:System.Runtime.Caching.ChangeMonitor>執行個體。  
  
-   一次快取項目和<xref:System.Runtime.Caching.ChangeMonitor>與它相關聯的執行個體傳遞至快取時，必須先確定快取實作者<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>呼叫，即使插入失敗。  
  
-   之後的項目和其相關聯<xref:System.Runtime.Caching.ChangeMonitor>執行個體傳遞至快取、 呼叫端必須處置相依性，因為當<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>呼叫方法，呼叫會被視為相依性已變更。 如此一來，<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>自動叫用方法。  
  
-   這些規則列入考量，<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>必須呼叫方法，透過下列方式之一：  
  
    -   使用者必須先呼叫<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>如果他們決定不要插入快取中的衍生的變更監視器的執行個體的方法多載。  
  
    -   快取實作會負責呼叫<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>多載，如果實作會嘗試將物件快取中插入變更監控執行個體，但是插入失敗。 當插入嘗試會導致例外狀況時，則快取實作必須處置任何相關聯的相依性。  
  
    -   如果已移除快取項目，快取實作必須也會處置相依性。  
  
 內部實作<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>方法會自動呼叫<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>方法之後它會呼叫回呼，註冊透過<xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>方法。  
  
> [!NOTE]
>  如果，才會發生此事件的引發期間的自動處置初始化<xref:System.Runtime.Caching.ChangeMonitor>先前完成的執行個體。  
  
 當衍生的變更監視器的建構函式呼叫<xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A>方法，如果變更監視的狀態已經變更 （也就是狀態監視已變更時仍在作用中的建構函式） 然後<xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A>方法將自動處置變更監視器。  
  
> [!NOTE]
>  使用者不應該呼叫<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>方法。 不過，您無法防止使用者呼叫的方法。 因此，如果沒有的話，<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>叫用方法。 在此情況下，如同相依性變更，便會收到通知的快取項目。  
  
 若要防止衍生的類別覆寫<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>方法，此方法不是明確介面實作。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">初始化沒有在呼叫基底 <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> 方法的衍生變更監視器類別中完成。</exception>
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected abstract void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit" Usage="changeMonitor.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> 表示釋放所有的 Managed 資源、Unmanaged 資源以及對 <see cref="T:System.Runtime.Caching.ChangeMonitor" /> 執行個體的所有參考，<see langword="false" /> 表示只釋放 Unmanaged 資源。 傳遞 <see langword="false" /> 時，<see langword="finalizer" /> 執行緒會呼叫 <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> 方法，任何外部 Managed 參考都可能不再有效，因為記憶體回收已經將這些參考收回。</param>
        <summary>釋放所有的 Managed 資源和 Unmanaged 資源，以及對 <see cref="T:System.Runtime.Caching.ChangeMonitor" /> 執行個體的所有參考。 這項多載必須由衍生自變更監控的類別實作。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當 windows 7`disposing`值是`true`、 處置所有的 managed 和 unmanaged 資源，及任何參考這個物件會釋出以便衍生的變更監視器的執行個體進行記憶體回收。 它可確保基底<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>方法會叫用實作<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>方法一次。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>變更監視器必須實作<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" />多載來釋放所有 managed 和 unmanaged 資源時的值<paramref name="disposing" />是<see langword="true" />。 <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" />方法多載具有<paramref name="disposing" />的值<see langword="true" />時，會呼叫一次，也就是第一次會處置的執行個體。 變更監視器不能呼叫<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" />直接多載。 在衍生的變更監視器可以呼叫公用無參數<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />基底方法<see cref="T:System.Runtime.Caching.ChangeMonitor" />類別。  
  
或者，變更監視器可以實作完成項方法。 在此情況下，可以叫用完成項<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" />方法並將它傳遞<paramref name="disposing" />的值<see langword="false" />。 不過，這是通常不需要。 監視相依性的變更通常被執行服務維護變更監控執行個體的參考。 參考進行記憶體回收，可防止執行個體，因此不需要的完成項方法。 若要避免記憶體流失，當相依性變更時，<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />方法會處置變更監控執行個體 （除非初始化尚未完成）。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="HasChanged">
      <MemberSignature Language="C#" Value="public bool HasChanged { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasChanged" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.ChangeMonitor.HasChanged" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasChanged As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasChanged { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasChanged : bool" Usage="System.Runtime.Caching.ChangeMonitor.HasChanged" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，這個值表示 <see cref="T:System.Runtime.Caching.ChangeMonitor" /> 類別所監控的狀態已變更。</summary>
        <value>如果 <see cref="T:System.Runtime.Caching.ChangeMonitor" /> 執行個體所監控的狀態已變更則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以檢查中衍生此屬性的值<xref:System.Runtime.Caching.ChangeMonitor>類別，以查看是否已變更相依性。  
  
 值設定為`true`相依性變更發生時 (亦即，當<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>方法呼叫)。 之後<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>方法會呼叫衍生類別中的值<xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A>屬性會是`true`，而不論是否<xref:System.Runtime.Caching.OnChangedCallback>執行個體已呼叫通知<xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>方法。  
  
> [!NOTE]
>  呼叫端可以檢查<xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A>屬性，以查看是否已變更相依性。 不過，在多執行緒環境中，以更簡單且更容易維護的方法是將資料插入快取實作，而不檢查<xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A>屬性。 快取實作必須檢查<xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A>屬性，且必須不執行 insert 或設定作業，如果一或多個相關聯的相依性已經變更。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="InitializationComplete">
      <MemberSignature Language="C#" Value="protected void InitializationComplete ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InitializationComplete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InitializationComplete ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InitializationComplete();" />
      <MemberSignature Language="F#" Value="member this.InitializationComplete : unit -&gt; unit" Usage="changeMonitor.InitializationComplete " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>從衍生類別的建構函式進行呼叫，以指出初始化已經完成。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在衍生類別的建構函式如果相依性變更，初始化衍生類別中完成之前，必須叫用<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>方法。  
  
 當<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>叫用方法時，<xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A>屬性會自動設為`true`變更監視器。 如此一來，當變更監視器的建構函式呼叫<xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A>方法中，基底類別會自動會呼叫<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>方法。 如果初始化已完成，<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>方法自動處置衍生的變更監視器的執行個體。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在衍生類別的建構函式必須呼叫基底<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />建構函式傳回之前的方法。 在衍生類別的建構函式可以呼叫<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />方法之後才<see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />呼叫，因為<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />方法會初始化未完成時，擲回例外狀況。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IsDisposed">
      <MemberSignature Language="C#" Value="public bool IsDisposed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDisposed" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.ChangeMonitor.IsDisposed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDisposed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDisposed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDisposed : bool" Usage="System.Runtime.Caching.ChangeMonitor.IsDisposed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，這個值表示是否已經處置 <see cref="T:System.Runtime.Caching.ChangeMonitor" /> 類別的衍生執行個體。</summary>
        <value>如果已經處置了執行個體，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 屬性設定為`true`基底之後<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>方法呼叫<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>處置執行個體的衍生類別中的方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyOnChanged">
      <MemberSignature Language="C#" Value="public void NotifyOnChanged (System.Runtime.Caching.OnChangedCallback onChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void NotifyOnChanged(class System.Runtime.Caching.OnChangedCallback onChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void NotifyOnChanged(System::Runtime::Caching::OnChangedCallback ^ onChangedCallback);" />
      <MemberSignature Language="F#" Value="member this.NotifyOnChanged : System.Runtime.Caching.OnChangedCallback -&gt; unit" Usage="changeMonitor.NotifyOnChanged onChangedCallback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="onChangedCallback" Type="System.Runtime.Caching.OnChangedCallback" />
      </Parameters>
      <Docs>
        <param name="onChangedCallback">在相依性變更時叫用之方法的參考。</param>
        <summary>在相依性變更時，由快取實作呼叫來註冊回呼，並透過 <see cref="T:System.Runtime.Caching.ObjectCache" /> 委派通知 <see cref="T:System.Runtime.Caching.OnChangedCallback" /> 執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 快取實作會使用這個方法，連本身變更監視器。 如果您建立關聯的其中一個或多個變更監視器快取項目，您傳遞<xref:System.Runtime.Caching.CacheItemPolicy>具有快取項目填入的變更監視器屬性的執行個體。 支援變更監視器快取實作者負責反覆<xref:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors%2A>屬性並註冊<xref:System.Runtime.Caching.OnChangedCallback>委派與每個變更它所找到的監視器。  
  
 因為<xref:System.Runtime.Caching.OnChangedCallback>委派包含選擇性的狀態參數，則會具體的變更監視器實作可以傳遞選擇性狀態資訊。 快取實作者會判斷是否可以採用明確的相依性的回呼的過程中傳遞自訂變更監視器的狀態類型。  
  
> [!NOTE]
>  基底的快取擴充性 API 的狀態類型上有沒有明確的相依性的需求。  
  
 實作<xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>方法會自動決定監視的狀態是否已在時間已變更<xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>呼叫方法。 如果<xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A>屬性是`true`，則此方法會自動呼叫<xref:System.Runtime.Caching.OnChangedCallback>事件處理常式中，已註冊，透過<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>方法。 這是因為您可從快取實作會建立變更監視器，快取實作取得監視器，並將本身，最多時間的時間已變更基礎受監視的狀態。 如果狀態已變更則會傳遞至物件<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>方法是`null`。  
  
 <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>方法可以叫用一次，並在後續呼叫會擲回例外狀況。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">已經叫用此回呼方法。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="onChangedCallback" /> 為 <see langword="null" />。</exception>
        <block subset="none" type="overrides">
          <para>1.您必須呼叫<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />的任何相依性變更通知的方法。 如果已經發生相依性變更，情況<see cref="T:System.Runtime.Caching.OnChangedCallback" />執行個體時將會呼叫<see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />呼叫。 否則，請<see cref="T:System.Runtime.Caching.OnChangedCallback" />執行個體將會呼叫一次，時<see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />方法呼叫或當<see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />呼叫方法時，何者先發生。 <see cref="T:System.Runtime.Caching.OnChangedCallback" />快取實作所提供的執行個體應該要移除的快取項目並快取呼叫端要求時引發的所需的變更或更新事件回到原始的快取呼叫端。  
  
2.  物件快取實作必須先移除相依性變更相關聯的快取項目。</para>
        </block>
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="OnChanged">
      <MemberSignature Language="C#" Value="protected void OnChanged (object state);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnChanged(object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnChanged (state As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnChanged(System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.OnChanged : obj -&gt; unit" Usage="changeMonitor.OnChanged state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="state">變更事件的資料， 這個值可以是 <see langword="null" />。</param>
        <summary>在相依性變更時由衍生類別呼叫，以引發事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一般而言，<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>發生相依性變更時，會呼叫方法。 <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>方法也會叫用時變更監視執行個體已處置，但回呼尚未叫用時，才會發生處置。  
  
 如果<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>方法之前呼叫<xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>呼叫方法時，從呼叫的狀態資料<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>方法儲存快取實作。 此外，要回呼<xref:System.Runtime.Caching.OnChangedCallback>立即叫用方法時<xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>叫用方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />
        <altmember cref="P:System.Runtime.Caching.ChangeMonitor.HasChanged" />
      </Docs>
    </Member>
    <Member MemberName="UniqueId">
      <MemberSignature Language="C#" Value="public abstract string UniqueId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UniqueId" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.ChangeMonitor.UniqueId" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property UniqueId As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ UniqueId { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UniqueId : string" Usage="System.Runtime.Caching.ChangeMonitor.UniqueId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，這個值表示 <see cref="T:System.Runtime.Caching.ChangeMonitor" /> 類別執行個體。</summary>
        <value>變更監控執行個體的識別項。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.Caching.ChangeMonitor.UniqueId%2A>屬性值通常包含相依性名稱結合字串資料的可唯一識別項的資料，受監視的<xref:System.Runtime.Caching.ChangeMonitor>執行個體。 值<xref:System.Runtime.Caching.ChangeMonitor.UniqueId%2A>屬性是一個字串。 字串的值用來指派的唯一識別碼<xref:System.Runtime.Caching.ChangeMonitor>執行個體。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>藉由覆寫屬性，您可以定義之屬性的字串值的自訂實作，才能將它指派一個唯一的識別碼。</para>
        </block>
        <block subset="none" type="overrides">
          <para>在衍生類別中，您必須在建構函式中設定屬性的值。</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>