<Type Name="ZipFile" FullName="System.IO.Compression.ZipFile">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d464b3468630e23ca77136a664551f174727db5d" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30420142" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class ZipFile" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ZipFile extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IO.Compression.ZipFile" />
  <TypeSignature Language="VB.NET" Value="Public Class ZipFile" />
  <TypeSignature Language="C++ CLI" Value="public ref class ZipFile abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供建立、解壓縮及開啟 zip 封存的靜態方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  若要使用<xref:System.IO.Compression.ZipFile>類別，您必須加入參考`System.IO.Compression.FileSystem`組件，在您的專案中; 否則您會得到下列錯誤訊息時嘗試編譯： **'ZipFile' 不存在於目前的內容名稱**. 如需有關如何將參考加入專案加入 Visual Studio 中的詳細資訊，請參閱[如何： 加入或移除參考使用參考管理員](http://msdn.microsoft.com/library/1aabb520-99b0-46c6-9368-21b4d84793eb)。  
  
 管理的 zip 封存和其檔案的方法分散到三個類別： <xref:System.IO.Compression.ZipFile>，<xref:System.IO.Compression.ZipArchive>和<xref:System.IO.Compression.ZipArchiveEntry>。  
  
|若要...|請使用於…|  
|---------|----------|  
|建立 zip 封存的目錄|<xref:System.IO.Compression.ZipFile.CreateFromDirectory%2A?displayProperty=nameWithType>|  
|擷取目錄的 zip 封存的內容|<xref:System.IO.Compression.ZipFile.ExtractToDirectory%2A?displayProperty=nameWithType>|  
|將新檔案加入至現有的 zip 封存|<xref:System.IO.Compression.ZipArchive.CreateEntry%2A?displayProperty=nameWithType>|  
|擷取 zip 封存中的檔案|<xref:System.IO.Compression.ZipArchive.GetEntry%2A?displayProperty=nameWithType>|  
|擷取所有 zip 封存中的檔案|<xref:System.IO.Compression.ZipArchive.Entries%2A?displayProperty=nameWithType>|  
|若要開啟的資料流的個別檔案所包含之 zip 封存中|<xref:System.IO.Compression.ZipArchiveEntry.Open%2A?displayProperty=nameWithType>|  
|從 zip 封存中刪除檔案|<xref:System.IO.Compression.ZipArchiveEntry.Delete%2A?displayProperty=nameWithType>|  
  
 您無法使用<xref:System.IO.Compression.ZipFile>或<xref:System.IO.Compression.ZipFileExtensions>中的類別[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]應用程式。 在[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]應用程式，您應使用下列類別使用的壓縮檔案。  
  
-   <xref:System.IO.Compression.ZipArchive>  
  
-   <xref:System.IO.Compression.ZipArchiveEntry>  
  
-   <xref:System.IO.Compression.DeflateStream>  
  
-   <xref:System.IO.Compression.GZipStream>  
  
   
  
## Examples  
 這個範例示範如何建立和使用解壓縮 zip 封存<xref:System.IO.Compression.ZipFile>類別。 它會壓縮成 zip 封存，資料夾的內容，並再擷取該內容發佈至新的資料夾。  
  
> [!TIP]
>  若要使用 <xref:System.IO.Compression.ZipFile> 類別，您必須參考專案中的 `System.IO.Compression.FileSystem` 組件。  
  
 [!code-csharp[System.IO.Compression.ZipFile#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.compression.zipfile/cs/program1.cs#1)]
 [!code-vb[System.IO.Compression.ZipFile#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.compression.zipfile/vb/program1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="CreateFromDirectory">
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>建立包含指定目錄中檔案及目錄的 zip 封存。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateFromDirectory">
      <MemberSignature Language="C#" Value="public static void CreateFromDirectory (string sourceDirectoryName, string destinationArchiveFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CreateFromDirectory(string sourceDirectoryName, string destinationArchiveFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CreateFromDirectory (sourceDirectoryName As String, destinationArchiveFileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CreateFromDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationArchiveFileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationArchiveFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">要封存的目錄路徑 (指定為相對或絕對路徑)。 相對路徑會解譯為與目前的工作目錄相對。</param>
        <param name="destinationArchiveFileName">要建立之封存的路徑 (指定為相對或絕對路徑)。 相對路徑會解譯為與目前的工作目錄相對。</param>
        <summary>建立包含指定目錄中檔案及目錄的 zip 封存。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 從檔案系統的目錄結構會保留在封存中。 如果目錄是空的則會建立空的封存。 這個方法多載不包含在封存中的基底目錄並不允許您指定的壓縮層級。 如果您想要包含的基底目錄，或指定的壓縮層級，請呼叫<xref:System.IO.Compression.ZipFile.CreateFromDirectory%28System.String%2CSystem.String%2CSystem.IO.Compression.CompressionLevel%2CSystem.Boolean%29>方法多載。  
  
 如果封存已存在，<xref:System.IO.IOException>擲回例外狀況。 如果封存中已經存在具有指定名稱的項目，第二個項目會建立具有相同的名稱。  
  
 如果目錄中的檔案無法加入到封存，在封存處於不完整、 不正確，而且方法會擲回<xref:System.IO.IOException>例外狀況。  
  
   
  
## Examples  
 這個範例示範如何建立和使用解壓縮 zip 封存<xref:System.IO.Compression.ZipFile>類別。 它會壓縮成 zip 封存，資料夾的內容，並再擷取該內容發佈至新的資料夾。 若要使用 <xref:System.IO.Compression.ZipFile> 類別，您必須參考專案中的 `System.IO.Compression.FileSystem` 組件。  
  
 [!code-csharp[System.IO.Compression.ZipFile#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.compression.zipfile/cs/program1.cs#1)]
 [!code-vb[System.IO.Compression.ZipFile#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.compression.zipfile/vb/program1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="sourceDirectoryName" /> 或 <paramref name="destinationArchiveFileName" /> 為 <see cref="F:System.String.Empty" />，只含有空白字元，或者含有至少一個無效字元。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceDirectoryName" /> 或 <paramref name="destinationArchiveFileName" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">在 <paramref name="sourceDirectoryName" /> 或 <paramref name="destinationArchiveFileName" /> 中，指定的路徑、檔案名稱或兩者都超過系統定義的最大長度。 例如，在 Windows 平台上，路徑不得超過 248 個字元，檔案名稱則不得超過 260 個字元。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="sourceDirectoryName" /> 無效或不存在 (例如，位於未對應的磁碟機上)。</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="destinationArchiveFileName" /> 已存在。  
  
 -或-  
  
 無法開啟指定之目錄中的檔案。</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="destinationArchiveFileName" /> 會指定目錄。  
  
 -或-  
  
 呼叫端沒有必要的權限，無法存取 <paramref name="sourceDirectoryName" /> 中指定的目錄或 <paramref name="destinationArchiveFileName" /> 中指定的檔案。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="sourceDirectoryName" /> 或 <paramref name="destinationArchiveFileName" /> 包含無效的格式。  
  
 -或-  
  
 Zip 封存不支援寫入。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateFromDirectory">
      <MemberSignature Language="C#" Value="public static void CreateFromDirectory (string sourceDirectoryName, string destinationArchiveFileName, System.IO.Compression.CompressionLevel compressionLevel, bool includeBaseDirectory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CreateFromDirectory(string sourceDirectoryName, string destinationArchiveFileName, valuetype System.IO.Compression.CompressionLevel compressionLevel, bool includeBaseDirectory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.String,System.IO.Compression.CompressionLevel,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CreateFromDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationArchiveFileName, System::IO::Compression::CompressionLevel compressionLevel, bool includeBaseDirectory);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationArchiveFileName" Type="System.String" />
        <Parameter Name="compressionLevel" Type="System.IO.Compression.CompressionLevel" />
        <Parameter Name="includeBaseDirectory" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">要封存的目錄路徑 (指定為相對或絕對路徑)。 相對路徑會解譯為與目前的工作目錄相對。</param>
        <param name="destinationArchiveFileName">要建立之封存的路徑 (指定為相對或絕對路徑)。 相對路徑會解譯為與目前的工作目錄相對。</param>
        <param name="compressionLevel">其中一個列舉值，指出建立項目時是否要強調速度或壓縮的效益。</param>
        <param name="includeBaseDirectory">
          <see langword="true" /> 表示從 <c>sourceDirectoryName</c> (位於封存根目錄中) 包含目錄名稱，<see langword="false" /> 表示只包含目錄的內容。</param>
        <summary>建立 zip 封存，這個封存包含指定之目錄中的檔案及目錄，使用指定的壓縮等級，並選擇性包含基底目錄。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 從檔案系統的目錄結構會保留在封存中。 如果目錄是空的則會建立空的封存。 您可以使用這個方法多載，指定的壓縮層級，以及是否要包含在封存中的基底目錄。  
  
 如果封存已存在，<xref:System.IO.IOException>擲回例外狀況。 如果封存中已經存在具有指定名稱的項目，第二個項目會建立具有相同的名稱。  
  
 如果目錄中的檔案無法加入到封存，在封存處於不完整、 不正確，而且方法會擲回<xref:System.IO.IOException>例外狀況。  
  
   
  
## Examples  
 這個範例示範如何建立和使用解壓縮 zip 封存<xref:System.IO.Compression.ZipFile>類別。 它會壓縮成 zip 封存，資料夾的內容，並再擷取該內容發佈至新的資料夾。 壓縮的封存，基底目錄都會包括在內，壓縮層級設定為透過效率強調作業速度。 若要使用 <xref:System.IO.Compression.ZipFile> 類別，您必須參考專案中的 `System.IO.Compression.FileSystem` 組件。  
  
 [!code-csharp[System.IO.Compression.ZipFile#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.compression.zipfile/cs/program2.cs#2)]
 [!code-vb[System.IO.Compression.ZipFile#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.compression.zipfile/vb/program2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="sourceDirectoryName" /> 或 <paramref name="destinationArchiveFileName" /> 為 <see cref="F:System.String.Empty" />，只含有空白字元，或者含有至少一個無效字元。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceDirectoryName" /> 或 <paramref name="destinationArchiveFileName" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">在 <paramref name="sourceDirectoryName" /> 或 <paramref name="destinationArchiveFileName" /> 中，指定的路徑、檔案名稱或兩者都超過系統定義的最大長度。 例如，在 Windows 平台上，路徑不得超過 248 個字元，檔案名稱則不得超過 260 個字元。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="sourceDirectoryName" /> 無效或不存在 (例如，位於未對應的磁碟機上)。</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="destinationArchiveFileName" /> 已存在。  
  
 -或-  
  
 無法開啟指定之目錄中的檔案。</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="destinationArchiveFileName" /> 會指定目錄。  
  
 -或-  
  
 呼叫端沒有必要的權限，無法存取 <paramref name="sourceDirectoryName" /> 中指定的目錄或 <paramref name="destinationArchiveFileName" /> 中指定的檔案。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="sourceDirectoryName" /> 或 <paramref name="destinationArchiveFileName" /> 包含無效的格式。  
  
 -或-  
  
 Zip 封存不支援寫入。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateFromDirectory">
      <MemberSignature Language="C#" Value="public static void CreateFromDirectory (string sourceDirectoryName, string destinationArchiveFileName, System.IO.Compression.CompressionLevel compressionLevel, bool includeBaseDirectory, System.Text.Encoding entryNameEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CreateFromDirectory(string sourceDirectoryName, string destinationArchiveFileName, valuetype System.IO.Compression.CompressionLevel compressionLevel, bool includeBaseDirectory, class System.Text.Encoding entryNameEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.String,System.IO.Compression.CompressionLevel,System.Boolean,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CreateFromDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationArchiveFileName, System::IO::Compression::CompressionLevel compressionLevel, bool includeBaseDirectory, System::Text::Encoding ^ entryNameEncoding);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationArchiveFileName" Type="System.String" />
        <Parameter Name="compressionLevel" Type="System.IO.Compression.CompressionLevel" />
        <Parameter Name="includeBaseDirectory" Type="System.Boolean" />
        <Parameter Name="entryNameEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">要封存的目錄路徑 (指定為相對或絕對路徑)。 相對路徑會解譯為與目前的工作目錄相對。</param>
        <param name="destinationArchiveFileName">要建立之封存的路徑 (指定為相對或絕對路徑)。 相對路徑會解譯為與目前的工作目錄相對。</param>
        <param name="compressionLevel">其中一個列舉值，指出建立項目時是否要強調速度或壓縮的效益。</param>
        <param name="includeBaseDirectory">
          <see langword="true" /> 表示從 <c>sourceDirectoryName</c> (位於封存根目錄中) 包含目錄名稱，<see langword="false" /> 表示只包含目錄的內容。</param>
        <param name="entryNameEncoding">在此封存中讀取或寫入項目名稱時要使用的編碼方式。 只有需要編碼以與 Zip 封存工具和程式庫互通，且這類工具和程式庫不支援項目名稱使用 UTF-8 編碼時，才指定此參數的值。</param>
        <summary>建立 zip 封存，這個封存包含指定之目錄中的檔案及目錄，針對項目名稱使用指定的壓縮等級和字元編碼方式，並選擇性包含基底目錄。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 從檔案系統的目錄結構會保留在封存中。 如果目錄是空的則會建立空的封存。 使用這個方法多載指定壓縮層級和字元編碼，以及是否要包含在封存中的基底目錄。  
  
 如果封存已存在，<xref:System.IO.IOException>擲回例外狀況。 如果封存中已經存在具有指定名稱的項目，第二個項目會建立具有相同的名稱。  
  
 如果目錄中的檔案無法加入到封存，在封存處於不完整、 不正確，而且方法會擲回<xref:System.IO.IOException>例外狀況。  
  
 如果`entryNameEncoding`以外設定為值`null`，使用指定的編碼方式來進行編碼的項目名稱。 如果指定的編碼方式為 utf-8，為每個項目，設定的語言編碼 （以本機檔案標頭的一般用途的位元旗標） 旗標  
  
 如果`entryNameEncoding`設`null`，項目名稱會編碼根據下列規則：  
  
-   包含字元的 ASCII 範圍之外的項目名稱，設定語言編碼旗標，以及 utf-8 來編碼項目名稱。  
  
-   只能包含 ASCII 字元項目名稱，設定語言編碼旗標，以及目前的系統預設字碼頁用來編碼項目名稱。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="sourceDirectoryName" /> 或 <paramref name="destinationArchiveFileName" /> 為 <see cref="F:System.String.Empty" />，只含有空白字元，或者含有至少一個無效字元。  
  
 -或-  
  
 <paramref name="entryNameEncoding" /> 會設定為 UTF-8 以外的 Unicode 編碼方式。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceDirectoryName" /> 或 <paramref name="destinationArchiveFileName" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">在 <paramref name="sourceDirectoryName" /> 或 <paramref name="destinationArchiveFileName" /> 中，指定的路徑、檔案名稱或兩者都超過系統定義的最大長度。 例如，在 Windows 平台上，路徑不得超過 248 個字元，檔案名稱則不得超過 260 個字元。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="sourceDirectoryName" /> 無效或不存在 (例如，位於未對應的磁碟機上)。</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="destinationArchiveFileName" /> 已存在。  
  
 -或-  
  
 無法開啟指定之目錄中的檔案。</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="destinationArchiveFileName" /> 會指定目錄。  
  
 -或-  
  
 呼叫端沒有必要的權限，無法存取 <paramref name="sourceDirectoryName" /> 中指定的目錄或 <paramref name="destinationArchiveFileName" /> 中指定的檔案。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="sourceDirectoryName" /> 或 <paramref name="destinationArchiveFileName" /> 包含無效的格式。  
  
 -或-  
  
 Zip 封存不支援寫入。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ExtractToDirectory">
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將指定之 zip 封存中的所有檔案解壓縮到檔案系統上的目錄。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExtractToDirectory">
      <MemberSignature Language="C#" Value="public static void ExtractToDirectory (string sourceArchiveFileName, string destinationDirectoryName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExtractToDirectory(string sourceArchiveFileName, string destinationDirectoryName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.ExtractToDirectory(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExtractToDirectory (sourceArchiveFileName As String, destinationDirectoryName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExtractToDirectory(System::String ^ sourceArchiveFileName, System::String ^ destinationDirectoryName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceArchiveFileName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceArchiveFileName">要擷取之封存的路徑。</param>
        <param name="destinationDirectoryName">要在其中放置解壓縮檔案的目錄路徑 (指定為相對或絕對路徑)。 相對路徑會解譯為與目前的工作目錄相對。</param>
        <summary>將指定之 zip 封存中的所有檔案解壓縮到檔案系統上的目錄。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會建立指定的目錄和所有子目錄。 目的地目錄不存在。 驗證中的路徑與相關的例外狀況`destinationDirectoryName`或`sourceArchiveFileName`參數擷取之前就會擲回。 否則，如果在擷取期間發生錯誤，封存會維持部分擷取。 每個已解壓縮的檔案具有相同的相對路徑，以指定的目錄`destinationDirectoryName`作為其來源項目都有封存的根目錄。  
  
   
  
## Examples  
 這個範例示範如何建立和使用解壓縮 zip 封存<xref:System.IO.Compression.ZipFile>類別。 它會壓縮成 zip 封存的資料夾的內容，並擷取該內容發佈至新的資料夾。 若要使用 <xref:System.IO.Compression.ZipFile> 類別，您必須參考專案中的 `System.IO.Compression.FileSystem` 組件。  
  
 [!code-csharp[System.IO.Compression.ZipFile#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.compression.zipfile/cs/program1.cs#1)]
 [!code-vb[System.IO.Compression.ZipFile#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.compression.zipfile/vb/program1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="destinationDirectoryName" /> 或 <paramref name="sourceArchiveFileName" /> 為 <see cref="F:System.String.Empty" />，只含有空白字元，或者含有至少一個無效字元。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationDirectoryName" /> 或 <paramref name="sourceArchiveFileName" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">
          <paramref name="destinationDirectoryName" /> 或 <paramref name="sourceArchiveFileName" /> 中指定的路徑超過系統定義的最大長度。 例如，在 Windows 平台上，路徑不得超過 248 個字元，檔案名稱則不得超過 260 個字元。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效 (例如，它位於未對應的磁碟機上)。</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="destinationDirectoryName" /> 所指定的目錄已經存在。  
  
 -或-  
  
 封存中的項目名稱是 <see cref="F:System.String.Empty" />、只包含空白字元，或包含至少一個無效字元。  
  
 -或-  
  
 解壓縮封存項目會建立 <paramref name="destinationDirectoryName" /> 所指定目錄外的檔案。 (例如，如果項目名稱包含上層目錄存取子，則可能發生這種情況)。  
  
 -或-  
  
 要解壓縮的封存項目與已經從相同封存解壓縮的項目具有相同的名稱。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼叫端不具有存取封存或目的地目錄的權限。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="destinationDirectoryName" /> 或 <paramref name="sourceArchiveFileName" /> 包含無效的格式。</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          找不到 <paramref name="sourceArchiveFileName" />。</exception>
        <exception cref="T:System.IO.InvalidDataException">由 <paramref name="sourceArchiveFileName" /> 指定的封存不是有效的 zip 封存。  
  
 -或-  
  
 找不到封存項目，或是其已損毀。  
  
 -或-  
  
 封存項目是使用不支援的壓縮方法進行壓縮。</exception>
      </Docs>
    </Member>
    <Member MemberName="ExtractToDirectory">
      <MemberSignature Language="C#" Value="public static void ExtractToDirectory (string sourceArchiveFileName, string destinationDirectoryName, bool overwriteFiles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExtractToDirectory(string sourceArchiveFileName, string destinationDirectoryName, bool overwriteFiles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.ExtractToDirectory(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExtractToDirectory (sourceArchiveFileName As String, destinationDirectoryName As String, overwriteFiles As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExtractToDirectory(System::String ^ sourceArchiveFileName, System::String ^ destinationDirectoryName, bool overwriteFiles);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceArchiveFileName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="overwriteFiles" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sourceArchiveFileName">To be added.</param>
        <param name="destinationDirectoryName">To be added.</param>
        <param name="overwriteFiles">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtractToDirectory">
      <MemberSignature Language="C#" Value="public static void ExtractToDirectory (string sourceArchiveFileName, string destinationDirectoryName, System.Text.Encoding entryNameEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExtractToDirectory(string sourceArchiveFileName, string destinationDirectoryName, class System.Text.Encoding entryNameEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.ExtractToDirectory(System.String,System.String,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExtractToDirectory (sourceArchiveFileName As String, destinationDirectoryName As String, entryNameEncoding As Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExtractToDirectory(System::String ^ sourceArchiveFileName, System::String ^ destinationDirectoryName, System::Text::Encoding ^ entryNameEncoding);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceArchiveFileName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="entryNameEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="sourceArchiveFileName">要擷取之封存的路徑。</param>
        <param name="destinationDirectoryName">要在其中放置解壓縮檔案的目錄路徑 (指定為相對或絕對路徑)。 相對路徑會解譯為與目前的工作目錄相對。</param>
        <param name="entryNameEncoding">在此封存中讀取或寫入項目名稱時要使用的編碼方式。 只有需要編碼以與 Zip 封存工具和程式庫互通，且這類工具和程式庫不支援項目名稱使用 UTF-8 編碼時，才指定此參數的值。</param>
        <summary>將指定之 zip 封存中的所有檔案解壓縮到檔案系統上的目錄，並對項目名稱使用指定的字元編碼方式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會建立指定的目錄和所有子目錄。 目的地目錄不存在。 驗證中的路徑與相關的例外狀況`destinationDirectoryName`或`sourceArchiveFileName`參數擷取之前就會擲回。 否則，如果在擷取期間發生錯誤，封存會維持部分擷取。 每個已解壓縮的檔案具有相同的相對路徑，以指定的目錄`destinationDirectoryName`作為其來源項目都有封存的根目錄。  
  
 如果`entryNameEncoding`以外設定為值`null`，項目名稱解碼根據下列規則：  
  
-   未設定的語言編碼 （以本機檔案標頭的一般用途的位元旗標） 旗標其中的項目名稱，使用指定的編碼方式解碼項目名稱。  
  
-   設有語言編碼旗標的項目，項目名稱會使用 utf-8 解碼。  
  
 如果`entryNameEncoding`設`null`，項目名稱解碼根據下列規則：  
  
-   未設定的語言編碼旗標 （以本機檔案標頭的一般用途的位元旗標） 位置的項目，項目名稱會使用目前的系統預設字碼頁來解碼。  
  
-   設有語言編碼旗標的項目，項目名稱會使用 utf-8 解碼。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="destinationDirectoryName" /> 或 <paramref name="sourceArchiveFileName" /> 為 <see cref="F:System.String.Empty" />，只含有空白字元，或者含有至少一個無效字元。  
  
 -或-  
  
 <paramref name="entryNameEncoding" /> 會設定為 UTF-8 以外的 Unicode 編碼方式。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationDirectoryName" /> 或 <paramref name="sourceArchiveFileName" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">
          <paramref name="destinationDirectoryName" /> 或 <paramref name="sourceArchiveFileName" /> 中指定的路徑超過系統定義的最大長度。 例如，在 Windows 平台上，路徑不得超過 248 個字元，檔案名稱則不得超過 260 個字元。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效 (例如，它位於未對應的磁碟機上)。</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="destinationDirectoryName" /> 所指定的目錄已經存在。  
  
 -或-  
  
 封存中的項目名稱是 <see cref="F:System.String.Empty" />、只包含空白字元，或包含至少一個無效字元。  
  
 -或-  
  
 解壓縮封存項目會建立 <paramref name="destinationDirectoryName" /> 所指定目錄外的檔案。 (例如，如果項目名稱包含上層目錄存取子，則可能發生這種情況)。  
  
 -或-  
  
 要解壓縮的封存項目與已經從相同封存解壓縮的項目具有相同的名稱。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼叫端不具有存取封存或目的地目錄的權限。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="destinationDirectoryName" /> 或 <paramref name="sourceArchiveFileName" /> 包含無效的格式。</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          找不到 <paramref name="sourceArchiveFileName" />。</exception>
        <exception cref="T:System.IO.InvalidDataException">由 <paramref name="sourceArchiveFileName" /> 指定的封存不是有效的 zip 封存。  
  
 -或-  
  
 找不到封存項目，或是其已損毀。  
  
 -或-  
  
 封存項目是使用不支援的壓縮方法進行壓縮。</exception>
      </Docs>
    </Member>
    <Member MemberName="ExtractToDirectory">
      <MemberSignature Language="C#" Value="public static void ExtractToDirectory (string sourceArchiveFileName, string destinationDirectoryName, System.Text.Encoding entryNameEncoding, bool overwriteFiles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExtractToDirectory(string sourceArchiveFileName, string destinationDirectoryName, class System.Text.Encoding entryNameEncoding, bool overwriteFiles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.ExtractToDirectory(System.String,System.String,System.Text.Encoding,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExtractToDirectory (sourceArchiveFileName As String, destinationDirectoryName As String, entryNameEncoding As Encoding, overwriteFiles As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExtractToDirectory(System::String ^ sourceArchiveFileName, System::String ^ destinationDirectoryName, System::Text::Encoding ^ entryNameEncoding, bool overwriteFiles);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceArchiveFileName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="entryNameEncoding" Type="System.Text.Encoding" />
        <Parameter Name="overwriteFiles" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sourceArchiveFileName">To be added.</param>
        <param name="destinationDirectoryName">To be added.</param>
        <param name="entryNameEncoding">To be added.</param>
        <param name="overwriteFiles">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Open">
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>在指定路徑上以指定的模式開啟 zip 封存。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Compression.ZipArchive Open (string archiveFileName, System.IO.Compression.ZipArchiveMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Compression.ZipArchive Open(string archiveFileName, valuetype System.IO.Compression.ZipArchiveMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.Open(System.String,System.IO.Compression.ZipArchiveMode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (archiveFileName As String, mode As ZipArchiveMode) As ZipArchive" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Compression::ZipArchive ^ Open(System::String ^ archiveFileName, System::IO::Compression::ZipArchiveMode mode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Compression.ZipArchive</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="archiveFileName" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.Compression.ZipArchiveMode" />
      </Parameters>
      <Docs>
        <param name="archiveFileName">要開啟之封存的路徑 (指定為相對或絕對路徑)。 相對路徑會解譯為與目前的工作目錄相對。</param>
        <param name="mode">其中一個列舉值，指定在開啟的封存檔中項目上所允許的動作。</param>
        <summary>在指定路徑上以指定的模式開啟 zip 封存。</summary>
        <returns>已開啟的 zip 封存。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當您將`mode`參數<xref:System.IO.Compression.ZipArchiveMode.Read>，封存會以開啟<xref:System.IO.FileMode.Open>從<xref:System.IO.FileMode>列舉型別做為檔案模式的值。 如果封存不存在，<xref:System.IO.FileNotFoundException>擲回例外狀況。 設定`mode`參數<xref:System.IO.Compression.ZipArchiveMode.Read>就相當於呼叫<xref:System.IO.Compression.ZipFile.OpenRead%2A>方法。  
  
 當您將`mode`參數<xref:System.IO.Compression.ZipArchiveMode.Create>，封存會以開啟<xref:System.IO.FileMode.CreateNew?displayProperty=nameWithType>做為檔案模式的值。 如果封存已存在，<xref:System.IO.IOException>就會擲回。  
  
 當您將`mode`參數<xref:System.IO.Compression.ZipArchiveMode.Update>，封存會以開啟<xref:System.IO.FileMode.OpenOrCreate?displayProperty=nameWithType>做為檔案模式的值。 如果封存已存在，會將它開啟。 您可以修改現有的項目，且無法建立新的項目。 如果封存不存在，會建立新的封存。不過，建立 zip 封存中的<xref:System.IO.Compression.ZipArchiveMode.Update>模式不是建立在效率<xref:System.IO.Compression.ZipArchiveMode.Create>模式。  
  
   
  
## Examples  
 下列範例會示範如何開啟 zip 封存處於更新模式，並將項目新增至封存。  
  
 [!code-csharp[System.IO.Compression.ZipArchive#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.compression.ziparchive/cs/program3.cs#3)]
 [!code-vb[System.IO.Compression.ZipArchive#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.compression.ziparchive/vb/program3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="archiveFileName" /> 是 <see cref="F:System.String.Empty" />、只包含空白字元，或包含至少一個無效字元。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="archiveFileName" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">在 <paramref name="archiveFileName" /> 中，指定的路徑、檔案名稱或兩者都超過系統定義的最大長度。 例如，在 Windows 平台上，路徑不得超過 248 個字元，檔案名稱則不得超過 260 個字元。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="archiveFileName" /> 無效或不存在 (例如，位於未對應的磁碟機上)。</exception>
        <exception cref="T:System.IO.IOException">
          無法開啟 <paramref name="archiveFileName" />。  
  
 -或-  
  
 <paramref name="mode" /> 設定為 <see cref="F:System.IO.Compression.ZipArchiveMode.Create" />，而且 <paramref name="archiveFileName" /> 中指定的檔案已經存在。</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="archiveFileName" /> 會指定目錄。  
  
 -或-  
  
 呼叫端沒有所需的使用權限來存取 <paramref name="archiveFileName" /> 中所指定的檔案。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="mode" /> 指定了無效的值。</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="mode" /> 設定為 <see cref="F:System.IO.Compression.ZipArchiveMode.Read" />，而且找不到 <paramref name="archiveFileName" /> 中指定的檔案。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="archiveFileName" /> 包含無效的格式。</exception>
        <exception cref="T:System.IO.InvalidDataException">
          <paramref name="archiveFileName" /> 無法解譯為 zip 封存。  
  
 -或-  
  
 <paramref name="mode" /> 是 <see cref="F:System.IO.Compression.ZipArchiveMode.Update" />，但是項目從封存中遺失，或已損毀且無法讀取。  
  
 -或-  
  
 <paramref name="mode" /> 是 <see cref="F:System.IO.Compression.ZipArchiveMode.Update" />，但是項目太大，無法放入記憶體。</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Compression.ZipArchive Open (string archiveFileName, System.IO.Compression.ZipArchiveMode mode, System.Text.Encoding entryNameEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Compression.ZipArchive Open(string archiveFileName, valuetype System.IO.Compression.ZipArchiveMode mode, class System.Text.Encoding entryNameEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.Open(System.String,System.IO.Compression.ZipArchiveMode,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (archiveFileName As String, mode As ZipArchiveMode, entryNameEncoding As Encoding) As ZipArchive" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Compression::ZipArchive ^ Open(System::String ^ archiveFileName, System::IO::Compression::ZipArchiveMode mode, System::Text::Encoding ^ entryNameEncoding);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Compression.ZipArchive</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="archiveFileName" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.Compression.ZipArchiveMode" />
        <Parameter Name="entryNameEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="archiveFileName">要開啟之封存的路徑 (指定為相對或絕對路徑)。 相對路徑會解譯為與目前的工作目錄相對。</param>
        <param name="mode">其中一個列舉值，指定在開啟的封存檔中項目上所允許的動作。</param>
        <param name="entryNameEncoding">在此封存中讀取或寫入項目名稱時要使用的編碼方式。 只有需要編碼以與 Zip 封存工具和程式庫互通，且這類工具和程式庫不支援項目名稱使用 UTF-8 編碼時，才指定此參數的值。</param>
        <summary>使用指定的模式，並將指定的字元編碼方式使用於項目名稱，即可開啟位於指定路徑的 zip 封存。</summary>
        <returns>已開啟的 zip 封存。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當您將`mode`參數<xref:System.IO.Compression.ZipArchiveMode.Read>，封存會以開啟<xref:System.IO.FileMode.Open?displayProperty=nameWithType>做為檔案模式的值。 如果封存不存在，<xref:System.IO.FileNotFoundException>擲回例外狀況。 設定`mode`參數<xref:System.IO.Compression.ZipArchiveMode.Read>就相當於呼叫<xref:System.IO.Compression.ZipFile.OpenRead%2A>方法。  
  
 當您將`mode`參數<xref:System.IO.Compression.ZipArchiveMode.Create>，封存會以開啟<xref:System.IO.FileMode.CreateNew?displayProperty=nameWithType>做為檔案模式的值。 如果封存已存在，<xref:System.IO.IOException>就會擲回。  
  
 當您將`mode`參數<xref:System.IO.Compression.ZipArchiveMode.Update>，封存會以開啟<xref:System.IO.FileMode.OpenOrCreate?displayProperty=nameWithType>做為檔案模式的值。 如果封存已存在，會將它開啟。 您可以修改現有的項目，且無法建立新的項目。 如果封存不存在，會建立新的封存。不過，建立 zip 封存中的<xref:System.IO.Compression.ZipArchiveMode.Update>模式不是建立在效率<xref:System.IO.Compression.ZipArchiveMode.Create>模式。  
  
 當您開啟 zip 封存檔案進行讀取和`entryNameEncoding`設`null`，項目名稱解碼根據下列規則：  
  
-   當未設定的語言編碼 （以本機檔案標頭的一般用途的位元旗標） 旗標時，目前的系統預設字碼頁用來解碼的項目名稱。  
  
-   當設定的語言編碼旗標時，utf-8 用來解碼項目名稱。  
  
 當您開啟 zip 封存檔案進行讀取和`entryNameEncoding`以外設定為值`null`，項目名稱解碼根據下列規則：  
  
-   當語言編碼旗標未設定，指定`entryNameEncoding`用來解碼的項目名稱。  
  
-   當設定的語言編碼旗標時，utf-8 用來解碼項目名稱。  
  
 當您撰寫封存檔案和`entryNameEncoding`設`null`，項目名稱會編碼根據下列規則：  
  
-   包含 ASCII 範圍以外的字元的項目名稱、 語言編碼旗標已設定，而且項目名稱會使用 utf-8 編碼。  
  
-   用於項目只能包含 ASCII 字元的名稱，未設定的語言編碼旗標，並使用目前的系統預設字碼頁來進行編碼的項目名稱。  
  
 當您撰寫封存檔案和`entryNameEncoding`以外設定為值`null`，指定`entryNameEncoding`用來編碼為位元組的項目名稱。 只有當指定的編碼方式為 utf-8 編碼時設定的語言編碼旗標 （以本機檔案標頭的一般用途的位元旗標）。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="archiveFileName" /> 是 <see cref="F:System.String.Empty" />、只包含空白字元，或包含至少一個無效字元。  
  
 -或-  
  
 <paramref name="entryNameEncoding" /> 會設定為 UTF-8 以外的 Unicode 編碼方式。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="archiveFileName" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">在 <paramref name="archiveFileName" /> 中，指定的路徑、檔案名稱或兩者都超過系統定義的最大長度。 例如，在 Windows 平台上，路徑不得超過 248 個字元，檔案名稱則不得超過 260 個字元。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="archiveFileName" /> 無效或不存在 (例如，位於未對應的磁碟機上)。</exception>
        <exception cref="T:System.IO.IOException">
          無法開啟 <paramref name="archiveFileName" />。  
  
 -或-  
  
 <paramref name="mode" /> 設定為 <see cref="F:System.IO.Compression.ZipArchiveMode.Create" />，而且 <paramref name="archiveFileName" /> 中指定的檔案已經存在。</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="archiveFileName" /> 會指定目錄。  
  
 -或-  
  
 呼叫端沒有所需的使用權限來存取 <paramref name="archiveFileName" /> 中所指定的檔案。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="mode" /> 指定了無效的值。</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="mode" /> 設定為 <see cref="F:System.IO.Compression.ZipArchiveMode.Read" />，而且找不到 <paramref name="archiveFileName" /> 中指定的檔案。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="archiveFileName" /> 包含無效的格式。</exception>
        <exception cref="T:System.IO.InvalidDataException">
          <paramref name="archiveFileName" /> 無法解譯為 zip 封存。  
  
 -或-  
  
 <paramref name="mode" /> 是 <see cref="F:System.IO.Compression.ZipArchiveMode.Update" />，但是項目從封存中遺失，或已損毀且無法讀取。  
  
 -或-  
  
 <paramref name="mode" /> 是 <see cref="F:System.IO.Compression.ZipArchiveMode.Update" />，但是項目太大，無法放入記憶體。</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenRead">
      <MemberSignature Language="C#" Value="public static System.IO.Compression.ZipArchive OpenRead (string archiveFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Compression.ZipArchive OpenRead(string archiveFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.OpenRead(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenRead (archiveFileName As String) As ZipArchive" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Compression::ZipArchive ^ OpenRead(System::String ^ archiveFileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Compression.ZipArchive</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="archiveFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="archiveFileName">要開啟之封存的路徑 (指定為相對或絕對路徑)。 相對路徑會解譯為與目前的工作目錄相對。</param>
        <summary>開啟位於指定路徑的 zip 封存以讀取。</summary>
        <returns>已開啟的 zip 封存。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法相當於呼叫<xref:System.IO.Compression.ZipFile.Open%2A>方法，並設定`mode`參數<xref:System.IO.Compression.ZipArchiveMode.Read>。 封存使用開啟<xref:System.IO.FileMode.Open?displayProperty=nameWithType>做為檔案模式的值。 如果封存不存在，<xref:System.IO.FileNotFoundException>擲回例外狀況。  
  
   
  
## Examples  
 下列範例會示範如何開啟 zip 封存以讀取。  
  
 [!code-csharp[System.IO.Compression.ZipArchive#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.compression.ziparchive/cs/program1.cs#1)]
 [!code-vb[System.IO.Compression.ZipArchive#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.compression.ziparchive/vb/program1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="archiveFileName" /> 是 <see cref="F:System.String.Empty" />、只包含空白字元，或包含至少一個無效字元。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="archiveFileName" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">在 <paramref name="archiveFileName" /> 中，指定的路徑、檔案名稱或兩者都超過系統定義的最大長度。 例如，在 Windows 平台上，路徑不得超過 248 個字元，檔案名稱則不得超過 260 個字元。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="archiveFileName" /> 無效或不存在 (例如，位於未對應的磁碟機上)。</exception>
        <exception cref="T:System.IO.IOException">
          無法開啟 <paramref name="archiveFileName" />。</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="archiveFileName" /> 會指定目錄。  
  
 -或-  
  
 呼叫端沒有所需的使用權限來存取 <paramref name="archiveFileName" /> 中所指定的檔案。</exception>
        <exception cref="T:System.IO.FileNotFoundException">找不到在 <paramref name="archiveFileName" /> 中指定的檔案。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="archiveFileName" /> 包含無效的格式。</exception>
        <exception cref="T:System.IO.InvalidDataException">
          <paramref name="archiveFileName" /> 無法解譯為 zip 封存。</exception>
      </Docs>
    </Member>
  </Members>
</Type>