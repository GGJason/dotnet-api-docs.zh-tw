<Type Name="TableAttribute" FullName="System.Data.Linq.Mapping.TableAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bac18b077e2a113bda817def056a591fab7a1e3c" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30385372" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class TableAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit TableAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Data.Linq.Mapping.TableAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TableAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class TableAttribute sealed : Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Linq</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple=false, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>將某個類別指定為與資料庫資料表相關聯的實體類別。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用這個屬性可以指定某個類別，做為與資料庫資料表或檢視相關聯的實體類別。 [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] 會將具有類別<xref:System.Data.Linq.Mapping.TableAttribute>持續性類別的屬性。  
  
 [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] 支援只有單一資料表對應。 也就是說，實體類別必須對應至一個資料庫資料表，而且無法在同一時間將資料庫資料表對應至多個類別。  
  
 您可以使用<xref:System.Data.Linq.Mapping.TableAttribute.Name%2A>屬性<xref:System.Data.Linq.Mapping.TableAttribute>屬性來指定資料表的名稱，您可以選擇性地使用結構描述名稱限定資料表名稱。 如果您使用未指定名稱<xref:System.Data.Linq.Mapping.TableAttribute.Name%2A>屬性，假設資料表名稱為類別名稱相同。  
  
## <a name="schema-qualified-names"></a>結構描述限定名稱  
 （選擇性） 可用的結構描述名稱來限定資料表名稱。 根據預設，左邊的第一個週期中的語彙基元<xref:System.Data.Linq.Mapping.TableAttribute.Name%2A>字串會被視為結構描述名稱。 名稱的其餘部分會被視為資料表名稱。 提供者引號為適當的資料表名稱。 例如， [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] for SQL Server 提供者可確保方括號用至少需要的地方。  
  
> [!NOTE]
>  在某些情況下，您必須明確地加上引號的屬性因為 SQL Server 提供者無法自動加上引號。 下表顯示一些範例。  
  
|案例|範例： 識別項名稱|屬性中的範例： 必須是的字串|否則...|  
|----------|------------------------------|--------------------------------------------|----------------|  
|結構描述名稱包含句點|結構描述:"A.B"<br /><br /> 資料表:"C"|"[A.B].C"|第一個週期會假設為分開的資料表名稱的結構描述名稱。|  
|結構描述/資料表名稱開頭為 `@`|"@SomeName"|"[@SomeName]"|假設為參數名稱。|  
|結構描述開頭`[`，並結束 `]`|"[Schema.Table]"|"[[Schema].[Table]]]"|不具引號識別項類似引號識別項。|  
|表格最開始先`[`，並結束 `]`|"[Table]"|"[[Table]]]"|不具引號識別項類似引號識別項。|  
  
   
  
## Examples  
 [!code-csharp[DLinqCustomize#1](~/samples/snippets/csharp/VS_Snippets_Data/DLinqCustomize/cs/Program.cs#1)]
 [!code-vb[DLinqCustomize#1](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqCustomize/vb/Module1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TableAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Mapping.TableAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TableAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Data.Linq.Mapping.TableAttribute" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Mapping.TableAttribute.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定資料表或檢視的名稱。</summary>
        <value>根據預設，這個值與類別名稱相同。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果您使用未指定名稱<xref:System.Data.Linq.Mapping.TableAttribute.Name%2A>，資料表名稱會被假設為類別名稱相同。  
  
> [!NOTE]
>  （選擇性） 可用的結構描述名稱來限定資料表名稱 (例如，Schema3.Table5)。 根據預設，左邊的第一個週期中的語彙基元<xref:System.Data.Linq.Mapping.TableAttribute.Name%2A>字串會被視為是結構描述名稱，而其餘部分的資料表名稱。  
  
 在下列範例中，預設的資料表名稱， `Customer`，變更為`Customers`。  
  
   
  
## Examples  
 [!code-csharp[DLinqCustomize#1](~/samples/snippets/csharp/VS_Snippets_Data/DLinqCustomize/cs/Program.cs#1)]
 [!code-vb[DLinqCustomize#1](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqCustomize/vb/Module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>