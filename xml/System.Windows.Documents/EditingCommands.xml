<Type Name="EditingCommands" FullName="System.Windows.Documents.EditingCommands">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="84b5572cf9ba0ae76ee1c5c3bb7375f8ce499c04" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37521563" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class EditingCommands" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit EditingCommands extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Documents.EditingCommands" />
  <TypeSignature Language="VB.NET" Value="Public Class EditingCommands" />
  <TypeSignature Language="C++ CLI" Value="public ref class EditingCommands abstract sealed" />
  <TypeSignature Language="F#" Value="type EditingCommands = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供一組標準的編輯相關命令。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表顯示編輯命令及相關聯的預設主要筆勢 (使用索引鍵的名稱，從<xref:System.Windows.Input.Key>和<xref:System.Windows.Input.ModifierKeys>列舉型別)。  
  
|編輯命令|預設按鍵動作|  
|---------------------|-------------------------|  
|<xref:System.Windows.Documents.EditingCommands.AlignCenter%2A>|`Ctrl`+`E`|  
|<xref:System.Windows.Documents.EditingCommands.AlignJustify%2A>|`Ctrl`+`J`|  
|<xref:System.Windows.Documents.EditingCommands.AlignLeft%2A>|`Ctrl`+`L`|  
|<xref:System.Windows.Documents.EditingCommands.AlignRight%2A>|`Ctrl`+`R`|  
|<xref:System.Windows.Documents.EditingCommands.Backspace%2A>|`Backspace`|  
|<xref:System.Windows.Documents.EditingCommands.CorrectSpellingError%2A>|沒有預設按鍵動作|  
|<xref:System.Windows.Documents.EditingCommands.DecreaseFontSize%2A>|`Ctrl`+`OemOpenBrackets`|  
|<xref:System.Windows.Documents.EditingCommands.DecreaseIndentation%2A>|`Ctrl`+`Shift`+`T`|  
|<xref:System.Windows.Documents.EditingCommands.Delete%2A>|`Delete`|  
|<xref:System.Windows.Documents.EditingCommands.DeleteNextWord%2A>|`Ctrl`+`Delete`|  
|<xref:System.Windows.Documents.EditingCommands.DeletePreviousWord%2A>|`Ctrl`+`Backspace`|  
|<xref:System.Windows.Documents.EditingCommands.EnterLineBreak%2A>|`Shift`+`Enter`|  
|<xref:System.Windows.Documents.EditingCommands.EnterParagraphBreak%2A>|`Enter`|  
|<xref:System.Windows.Documents.EditingCommands.IgnoreSpellingError%2A>|沒有預設按鍵動作|  
|<xref:System.Windows.Documents.EditingCommands.IncreaseFontSize%2A>|`Ctrl`+`OemCloseBrackets`|  
|<xref:System.Windows.Documents.EditingCommands.IncreaseIndentation%2A>|`Ctrl`+`T`|  
|<xref:System.Windows.Documents.EditingCommands.MoveDownByLine%2A>|`Down`|  
|<xref:System.Windows.Documents.EditingCommands.MoveDownByPage%2A>|`PageDown`|  
|<xref:System.Windows.Documents.EditingCommands.MoveDownByParagraph%2A>|`Ctrl`+`Down`|  
|<xref:System.Windows.Documents.EditingCommands.MoveLeftByCharacter%2A>|`Left`|  
|<xref:System.Windows.Documents.EditingCommands.MoveLeftByWord%2A>|`Ctrl`+`Left`|  
|<xref:System.Windows.Documents.EditingCommands.MoveRightByCharacter%2A>|`Right`|  
|<xref:System.Windows.Documents.EditingCommands.MoveRightByWord%2A>|`Ctrl`+`Right`|  
|<xref:System.Windows.Documents.EditingCommands.MoveToDocumentEnd%2A>|`Ctrl`+`End`|  
|<xref:System.Windows.Documents.EditingCommands.MoveToDocumentStart%2A>|`Ctrl`+`Home`|  
|<xref:System.Windows.Documents.EditingCommands.MoveToLineEnd%2A>|`End`|  
|<xref:System.Windows.Documents.EditingCommands.MoveToLineStart%2A>|`Home`|  
|<xref:System.Windows.Documents.EditingCommands.MoveUpByLine%2A>|`Up`|  
|<xref:System.Windows.Documents.EditingCommands.MoveUpByPage%2A>|`PageUp`|  
|<xref:System.Windows.Documents.EditingCommands.MoveUpByParagraph%2A>|`Ctrl`+`Up`|  
|<xref:System.Windows.Documents.EditingCommands.SelectDownByLine%2A>|`Shift`+`Down`|  
|<xref:System.Windows.Documents.EditingCommands.SelectDownByPage%2A>|`Shift`+`PageDown`|  
|<xref:System.Windows.Documents.EditingCommands.SelectDownByParagraph%2A>|`Ctrl`+`Shift`+`Down`|  
|<xref:System.Windows.Documents.EditingCommands.SelectLeftByCharacter%2A>|`Shift`+`Left`|  
|<xref:System.Windows.Documents.EditingCommands.SelectLeftByWord%2A>|`Ctrl`+`Shift`+`Left`|  
|<xref:System.Windows.Documents.EditingCommands.SelectRightByCharacter%2A>|`Shift`+`Right`|  
|<xref:System.Windows.Documents.EditingCommands.SelectRightByWord%2A>|`Ctrl`+`Shift`+`Right`|  
|<xref:System.Windows.Documents.EditingCommands.SelectToDocumentEnd%2A>|`Ctrl`+`Shift`+`End`|  
|<xref:System.Windows.Documents.EditingCommands.SelectToDocumentStart%2A>|`Ctrl`+`Shift`+`Home`|  
|<xref:System.Windows.Documents.EditingCommands.SelectToLineEnd%2A>|`Shift`+`End`|  
|<xref:System.Windows.Documents.EditingCommands.SelectToLineStart%2A>|`Shift`+`Home`|  
|<xref:System.Windows.Documents.EditingCommands.SelectUpByLine%2A>|`Shift`+`Up`|  
|<xref:System.Windows.Documents.EditingCommands.SelectUpByPage%2A>|`Shift`+`PageUp`|  
|<xref:System.Windows.Documents.EditingCommands.SelectUpByParagraph%2A>|`Ctrl`+`Shift`+`Up`|  
|<xref:System.Windows.Documents.EditingCommands.TabBackward%2A>|`Shift`+`Tab`|  
|<xref:System.Windows.Documents.EditingCommands.TabForward%2A>|`Tab`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleBold%2A>|`Ctrl`+`B`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleBullets%2A>|`Ctrl`+`Shift`+`L`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleInsert%2A>|`Insert`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleItalic%2A>|`Ctrl`+`I`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleNumbering%2A>|`Ctrl`+`Shift`+`N`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleSubscript%2A>|`Ctrl`+`OemPlus`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleSuperscript%2A>|`Ctrl`+`Shift+OemPlus`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleUnderline%2A>|`Ctrl`+`U`|  
  
 插入號移動命令和選取項目展開命令共用一組通用的預設主要筆勢，一般的差異在於新增<xref:System.Windows.Input.ModifierKeys.Shift>區別插入號移動命令中的選取範圍命令的索引鍵。  例如，<xref:System.Windows.Documents.EditingCommands.MoveLeftByCharacter%2A>命令有的預設按鍵動作<xref:System.Windows.Input.Key.Left>，和對應<xref:System.Windows.Documents.EditingCommands.SelectLeftByCharacter%2A>命令有的預設按鍵動作<xref:System.Windows.Input.ModifierKeys.Shift> + <xref:System.Windows.Input.Key.Left>。  
  
 所提供的命令定義的一般情況下，<xref:System.Windows.Documents.EditingCommands>類別並不會讓使用命令參數 (`parameter`參數所預期<xref:System.Windows.Input.ICommand.Execute%2A>方法)。  
  
 如需有關命令和命令的詳細資訊，請參閱 <<c0> [ 輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。  
  
   
  
## Examples  
 下列範例示範如何叫用支援的命令物件上的編輯命令。  
  
 此範例中，針對<xref:System.Windows.Controls.RichTextBox>作為命令目標。  請注意，<xref:System.Windows.Controls.RichTextBox>會實作<xref:System.Windows.IInputElement>介面 (繼承自<xref:System.Windows.FrameworkElement>)，而且它包含許多的編輯命令的原生支援。  
  
 第一個引數<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法是命令參數。  最編輯命令忽略的命令參數。這個參數應該是一般情況下，`null`編輯命令。  
  
 第二個引數會指定將路由命令的物件。  這個物件必須實作<xref:System.Windows.IInputElement>介面，並應該包含指定的命令處理常式。  一般而言，不會處理命令的物件上叫用時，已忽略命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.MediaCommands" />
    <altmember cref="T:System.Windows.Input.ApplicationCommands" />
    <altmember cref="T:System.Windows.Input.ComponentCommands" />
    <altmember cref="T:System.Windows.Input.RoutedCommand" />
    <altmember cref="T:System.Windows.Input.RoutedUICommand" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.CommandManager" />
    <altmember cref="T:System.Windows.Input.NavigationCommands" />
  </Docs>
  <Members>
    <Member MemberName="AlignCenter">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand AlignCenter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand AlignCenter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.AlignCenter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AlignCenter As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ AlignCenter { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AlignCenter : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.AlignCenter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.AlignCenter" /> 命令，這個命令會要求目前的段落或選取的段落置中。</summary>
        <value>所要求的命令。  此命令的預設按鍵動作是<see langword="Ctrl" /> + <see langword="E" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此命令會在運作<xref:System.Windows.Documents.Paragraph>層級。  部分選取的段落 （包括段落中有插入號的空選取範圍） 中的內容，叫用此命令時，才會將要求的效果套用到整個段落。  如果此命令會叫用在橫跨多個段落的選取範圍上，選取範圍內每個段落的整個內容套用效果。  
  
 下圖顯示置中的內容的範例。  
  
 ![螢幕擷取畫面： TextAlign 屬性值為 Center](~/add/media/flowdoc-textalign-center.png "螢幕擷取畫面： TextAlign 屬性值為 Center")  
  
 此命令原生支援的<xref:System.Windows.Controls.RichTextBox>。  
  
<a name="xamlAttributeUsage_AlignCenter"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="AlignCenter"/>  
```  
  
   
  
## Examples  
 下列範例示範如何叫用支援的命令物件上的編輯命令。  
  
 此範例中，針對<xref:System.Windows.Controls.RichTextBox>作為命令目標。  請注意，<xref:System.Windows.Controls.RichTextBox>會實作<xref:System.Windows.IInputElement>介面 (繼承自<xref:System.Windows.FrameworkElement>)，而且它包含許多的編輯命令的原生支援。  
  
 第一個引數<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法是命令參數。  最編輯命令忽略的命令參數。這個參數應該是一般情況下，`null`編輯命令。  
  
 第二個引數會指定將路由命令的物件。  這個物件必須實作<xref:System.Windows.IInputElement>介面，並應該包含指定的命令處理常式。  一般而言，不會處理命令的物件上叫用時，已忽略命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignJustify" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignLeft" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignRight" />
      </Docs>
    </Member>
    <Member MemberName="AlignJustify">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand AlignJustify { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand AlignJustify" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.AlignJustify" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AlignJustify As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ AlignJustify { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AlignJustify : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.AlignJustify" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.AlignJustify" /> 命令，這個命令會要求目前的段落或選取的段落對齊。</summary>
        <value>所要求的命令。  此命令的預設按鍵動作是<see langword="Ctrl" /> + <see langword="J" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此命令會在運作<xref:System.Windows.Documents.Paragraph>層級。  部分選取的段落 （包括段落中有插入號的空選取範圍） 中的內容，叫用此命令時，才會將要求的效果套用到整個段落。  如果此命令會在橫跨多個段落的選取範圍上叫用，效果會套用選取範圍中的所有段落。  
  
 當內容對齊時，內每一行的內容的水平間距會調整，使左右對齊的線的等於或接近相等的寬度。  內容通常是內容的側邊建立平滑的邊緣對齊。  
  
 通常很短於其餘部分，因為在段落中的最後一行會維持在對齊，直到此命令會叫用。  
  
 下圖顯示對齊 （靠左對齊） 的內容。  
  
 ![螢幕擷取畫面： 內容尚未對齊](~/add/media/content-unjustified.png "螢幕擷取畫面： 內容尚未對齊")  
  
 下圖顯示相同的內容之後已右對齊。  
  
 ![螢幕擷取畫面的內容對齊文字](~/add/media/content-justified.png "螢幕擷取畫面的內容對齊文字")  
  
 不一定會回應任何指定的物件; 在此命令的實際實作在許多情況下會回應至命令的實作會是應用程式寫入器的責任。  
  
 此命令原生支援的<xref:System.Windows.Controls.RichTextBox>。  
  
<a name="xamlAttributeUsage_AlignJustify"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="AlignJustify"/>  
```  
  
   
  
## Examples  
 下列範例示範如何叫用支援的命令物件上的編輯命令。  
  
 此範例中，針對<xref:System.Windows.Controls.RichTextBox>作為命令目標。  請注意，<xref:System.Windows.Controls.RichTextBox>會實作<xref:System.Windows.IInputElement>介面 (繼承自<xref:System.Windows.FrameworkElement>)，而且它包含許多的編輯命令的原生支援。  
  
 第一個引數<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法是命令參數。  最編輯命令忽略的命令參數。這個參數應該是一般情況下，`null`編輯命令。  
  
 第二個引數會指定將路由命令的物件。  這個物件必須實作<xref:System.Windows.IInputElement>介面，並應該包含指定的命令處理常式。  一般而言，不會處理命令的物件上叫用時，已忽略命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignCenter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignLeft" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignRight" />
      </Docs>
    </Member>
    <Member MemberName="AlignLeft">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand AlignLeft { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand AlignLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.AlignLeft" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AlignLeft As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ AlignLeft { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AlignLeft : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.AlignLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.AlignLeft" /> 命令，這個命令會要求內容的選取範圍靠左對齊。</summary>
        <value>所要求的命令。  此命令的預設按鍵動作是<see langword="Ctrl" /> + <see langword="L" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此命令會在運作<xref:System.Windows.Documents.Paragraph>層級。  部分選取的段落 （包括段落中有插入號的空選取範圍） 中的內容，叫用此命令時，才會將要求的效果套用到整個段落。  如果此命令會叫用在橫跨多個段落的選取範圍上，選取範圍內每個段落的整個內容套用效果。  
  
 下圖顯示為靠左對齊內容的範例。  
  
 ![螢幕擷取畫面： TextAlign 屬性值為 Left](~/add/media/flowdoc-textalign-left.png "螢幕擷取畫面： TextAlign 屬性值為 Left")  
  
 不一定會回應任何指定的物件; 在此命令的實際實作在許多情況下會回應至命令的實作會是應用程式寫入器的責任。  
  
 此命令原生支援的<xref:System.Windows.Controls.RichTextBox>。  
  
<a name="xamlAttributeUsage_AlignLeft"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="AlignLeft"/>  
```  
  
   
  
## Examples  
 下列範例示範如何叫用支援的命令物件上的編輯命令。  
  
 此範例中，針對<xref:System.Windows.Controls.RichTextBox>作為命令目標。  請注意，<xref:System.Windows.Controls.RichTextBox>會實作<xref:System.Windows.IInputElement>介面 (繼承自<xref:System.Windows.FrameworkElement>)，而且它包含許多的編輯命令的原生支援。  
  
 第一個引數<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法是命令參數。  最編輯命令忽略的命令參數。這個參數應該是一般情況下，`null`編輯命令。  
  
 第二個引數會指定將路由命令的物件。  這個物件必須實作<xref:System.Windows.IInputElement>介面，並應該包含指定的命令處理常式。  一般而言，不會處理命令的物件上叫用時，已忽略命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignCenter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignJustify" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignRight" />
      </Docs>
    </Member>
    <Member MemberName="AlignRight">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand AlignRight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand AlignRight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.AlignRight" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AlignRight As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ AlignRight { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AlignRight : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.AlignRight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.AlignRight" /> 命令，這個命令會要求內容的選取範圍靠右對齊。</summary>
        <value>所要求的命令。  此命令的預設按鍵動作是<see langword="Ctrl" /> + <see langword="R" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此命令會在運作<xref:System.Windows.Documents.Paragraph>層級。  部分選取的段落 （包括段落中有插入號的空選取範圍） 中的內容，叫用此命令時，才會將要求的效果套用到整個段落。  如果此命令會叫用在橫跨多個段落的選取範圍上，選取範圍內每個段落的整個內容套用效果。  
  
 下圖顯示為靠右對齊內容的範例。  
  
 ![螢幕擷取畫面： 權限的 TextAlign 值](~/add/media/flowdoc-textalign-right.png "螢幕擷取畫面： TextAlign 值為 Right")  
  
 不一定會回應任何指定的物件; 在此命令的實際實作在許多情況下會回應至命令的實作會是應用程式寫入器的責任。  
  
 此命令原生支援的<xref:System.Windows.Controls.RichTextBox>。  
  
<a name="xamlAttributeUsage_AlignRight"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="AlignRight"/>  
```  
  
   
  
## Examples  
 下列範例示範如何叫用支援的命令物件上的編輯命令。  
  
 此範例中，針對<xref:System.Windows.Controls.RichTextBox>作為命令目標。  請注意，<xref:System.Windows.Controls.RichTextBox>會實作<xref:System.Windows.IInputElement>介面 (繼承自<xref:System.Windows.FrameworkElement>)，而且它包含許多的編輯命令的原生支援。  
  
 第一個引數<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法是命令參數。  最編輯命令忽略的命令參數。這個參數應該是一般情況下，`null`編輯命令。  
  
 第二個引數會指定將路由命令的物件。  這個物件必須實作<xref:System.Windows.IInputElement>介面，並應該包含指定的命令處理常式。  一般而言，不會處理命令的物件上叫用時，已忽略命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignCenter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignJustify" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignRight" />
      </Docs>
    </Member>
    <Member MemberName="Backspace">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand Backspace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand Backspace" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.Backspace" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Backspace As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ Backspace { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Backspace : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.Backspace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.Backspace" /> 命令，這個命令會要求在目前位置或目前選取範圍上輸入退格鍵。</summary>
        <value>所要求的命令。  這個命令的預設主要筆勢是 <see langword="Backspace" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當空的選取項目上叫用，則此命令會刪除之前插入號字元或段落分隔符號。 當叫用非空白的選取項目，此命令會刪除選取項目。  
  
 此命令會保留已刪除的選取範圍，在叫用此命令之後立即插入相同的位置的內容中的任何格式。  與相反<xref:System.Windows.Documents.EditingCommands.Delete%2A>命令，不會保留舊的格式設定。  
  
 不一定會回應任何指定的物件; 在此命令的實際實作在許多情況下會回應至命令的實作會是應用程式寫入器的責任。  
  
 此命令原生支援的<xref:System.Windows.Controls.RichTextBox>， <xref:System.Windows.Controls.TextBox>，和<xref:System.Windows.Controls.PasswordBox>。  
  
<a name="xamlAttributeUsage_Backspace"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="Backspace"/>  
```  
  
   
  
## Examples  
 下列範例示範如何叫用支援的命令物件上的編輯命令。  
  
 此範例中，針對<xref:System.Windows.Controls.RichTextBox>作為命令目標。  請注意，<xref:System.Windows.Controls.RichTextBox>會實作<xref:System.Windows.IInputElement>介面 (繼承自<xref:System.Windows.FrameworkElement>)，而且它包含許多的編輯命令的原生支援。  
  
 第一個引數<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法是命令參數。  最編輯命令忽略的命令參數。這個參數應該是一般情況下，`null`編輯命令。  
  
 第二個引數會指定將路由命令的物件。  這個物件必須實作<xref:System.Windows.IInputElement>介面，並應該包含指定的命令處理常式。  一般而言，不會處理命令的物件上叫用時，已忽略命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CorrectSpellingError">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand CorrectSpellingError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand CorrectSpellingError" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.CorrectSpellingError" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CorrectSpellingError As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ CorrectSpellingError { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CorrectSpellingError : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.CorrectSpellingError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.CorrectSpellingError" /> 命令，這個命令會要求更正目前位置上任何拼錯的字。</summary>
        <value>所要求的命令。  這個命令沒有預設按鍵動作。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不一定會回應任何指定的物件; 在此命令的實際實作在許多情況下會回應至命令的實作會是應用程式寫入器的責任。  
  
<a name="xamlAttributeUsage_CorrectSpellingError"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="CorrectSpellingError"/>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.IgnoreSpellingError" />
      </Docs>
    </Member>
    <Member MemberName="DecreaseFontSize">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand DecreaseFontSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand DecreaseFontSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.DecreaseFontSize" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DecreaseFontSize As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ DecreaseFontSize { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DecreaseFontSize : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.DecreaseFontSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.DecreaseFontSize" /> 命令，這個命令會要求目前選取範圍的字型大小縮少 1 點。</summary>
        <value>所要求的命令。  此命令的預設按鍵動作是<see langword="Ctrl" /> + <see langword="OemOpenBrackets" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在單字內有插入號的空白選取範圍上叫用此命令時，才會自動會將命令套用至整個字展開選取項目。  
  
 不一定會回應任何指定的物件; 在此命令的實際實作在許多情況下會回應至命令的實作會是應用程式寫入器的責任。  
  
 此命令原生支援的<xref:System.Windows.Controls.RichTextBox>。  
  
<a name="xamlAttributeUsage_DecreaseFontSize"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="DecreaseFontSize"/>  
```  
  
   
  
## Examples  
 下列範例示範如何叫用支援的命令物件上的編輯命令。  
  
 此範例中，針對<xref:System.Windows.Controls.RichTextBox>作為命令目標。  請注意，<xref:System.Windows.Controls.RichTextBox>會實作<xref:System.Windows.IInputElement>介面 (繼承自<xref:System.Windows.FrameworkElement>)，而且它包含許多的編輯命令的原生支援。  
  
 第一個引數<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法是命令參數。  最編輯命令忽略的命令參數。這個參數應該是一般情況下，`null`編輯命令。  
  
 第二個引數會指定將路由命令的物件。  這個物件必須實作<xref:System.Windows.IInputElement>介面，並應該包含指定的命令處理常式。  一般而言，不會處理命令的物件上叫用時，已忽略命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.IncreaseFontSize" />
      </Docs>
    </Member>
    <Member MemberName="DecreaseIndentation">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand DecreaseIndentation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand DecreaseIndentation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.DecreaseIndentation" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DecreaseIndentation As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ DecreaseIndentation { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DecreaseIndentation : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.DecreaseIndentation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.DecreaseIndentation" /> 命令，這個命令會要求目前段落的縮排減少一個定位停駐點。</summary>
        <value>所要求的命令。  此命令的預設按鍵動作是<see langword="Ctrl" /> + <see langword="Shift" /> + <see langword="T" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不一定會回應任何指定的物件; 在此命令的實際實作在許多情況下會回應至命令的實作會是應用程式寫入器的責任。  
  
 此命令原生支援的<xref:System.Windows.Controls.RichTextBox>。  
  
> [!IMPORTANT]
>  此命令會有不會影響文字項目，除非<xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A>的文字項目的屬性設定為`true`。  
  
<a name="xamlAttributeUsage_DecreaseIndentation"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="DecreaseIndentation"/>  
```  
  
   
  
## Examples  
 下列範例示範如何叫用支援的命令物件上的編輯命令。  
  
 此範例中，針對<xref:System.Windows.Controls.RichTextBox>作為命令目標。  請注意，<xref:System.Windows.Controls.RichTextBox>會實作<xref:System.Windows.IInputElement>介面 (繼承自<xref:System.Windows.FrameworkElement>)，而且它包含許多的編輯命令的原生支援。  
  
 第一個引數<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法是命令參數。  最編輯命令忽略的命令參數。這個參數應該是一般情況下，`null`編輯命令。  
  
 第二個引數會指定將路由命令的物件。  這個物件必須實作<xref:System.Windows.IInputElement>介面，並應該包含指定的命令處理常式。  一般而言，不會處理命令的物件上叫用時，已忽略命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.IncreaseIndentation" />
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand Delete { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand Delete" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.Delete" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Delete As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ Delete { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Delete : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.Delete" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.Delete" /> 命令，這個命令會要求刪除目前的選取範圍。</summary>
        <value>所要求的命令。  這個命令的預設主要筆勢是 <see langword="Delete" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此命令會捨棄已刪除的選取範圍中的任何格式。  與相反<xref:System.Windows.Documents.EditingCommands.Backspace%2A>命令時，它會保留已刪除的選取範圍，在叫用此命令之後立即插入相同的位置的內容中的任何格式。  
  
 不一定會回應任何指定的物件; 在此命令的實際實作在許多情況下會回應至命令的實作會是應用程式寫入器的責任。  
  
 此命令原生支援的<xref:System.Windows.Controls.RichTextBox>， <xref:System.Windows.Controls.TextBox>，和<xref:System.Windows.Controls.PasswordBox>。  
  
<a name="xamlAttributeUsage_Delete"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="Delete"/>  
```  
  
   
  
## Examples  
 下列範例示範如何叫用支援的命令物件上的編輯命令。  
  
 此範例中，針對<xref:System.Windows.Controls.RichTextBox>作為命令目標。  請注意，<xref:System.Windows.Controls.RichTextBox>會實作<xref:System.Windows.IInputElement>介面 (繼承自<xref:System.Windows.FrameworkElement>)，而且它包含許多的編輯命令的原生支援。  
  
 第一個引數<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法是命令參數。  最編輯命令忽略的命令參數。這個參數應該是一般情況下，`null`編輯命令。  
  
 第二個引數會指定將路由命令的物件。  這個物件必須實作<xref:System.Windows.IInputElement>介面，並應該包含指定的命令處理常式。  一般而言，不會處理命令的物件上叫用時，已忽略命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteNextWord">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand DeleteNextWord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand DeleteNextWord" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.DeleteNextWord" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DeleteNextWord As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ DeleteNextWord { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeleteNextWord : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.DeleteNextWord" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.DeleteNextWord" /> 命令，這個命令會要求刪除下一個字 (相對於目前位置)。</summary>
        <value>所要求的命令。  此命令的預設按鍵動作是<see langword="Ctrl" /> + <see langword="Delete" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 插入號是否在單字內，則會刪除之間目前的位置和字尾的字的其餘部分。  
  
 不一定會回應任何指定的物件; 在此命令的實際實作在許多情況下會回應至命令的實作會是應用程式寫入器的責任。  
  
 此命令原生支援的<xref:System.Windows.Controls.RichTextBox>， <xref:System.Windows.Controls.TextBox>，和<xref:System.Windows.Controls.PasswordBox>。  
  
<a name="xamlAttributeUsage_DeleteNextWord"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="DeleteNextWord"/>  
```  
  
   
  
## Examples  
 下列範例示範如何叫用支援的命令物件上的編輯命令。  
  
 此範例中，針對<xref:System.Windows.Controls.RichTextBox>作為命令目標。  請注意，<xref:System.Windows.Controls.RichTextBox>會實作<xref:System.Windows.IInputElement>介面 (繼承自<xref:System.Windows.FrameworkElement>)，而且它包含許多的編輯命令的原生支援。  
  
 第一個引數<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法是命令參數。  最編輯命令忽略的命令參數。這個參數應該是一般情況下，`null`編輯命令。  
  
 第二個引數會指定將路由命令的物件。  這個物件必須實作<xref:System.Windows.IInputElement>介面，並應該包含指定的命令處理常式。  一般而言，不會處理命令的物件上叫用時，已忽略命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.DeletePreviousWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" />
      </Docs>
    </Member>
    <Member MemberName="DeletePreviousWord">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand DeletePreviousWord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand DeletePreviousWord" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.DeletePreviousWord" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DeletePreviousWord As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ DeletePreviousWord { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeletePreviousWord : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.DeletePreviousWord" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.DeletePreviousWord" /> 命令，這個命令會要求刪除前一個字 (相對於目前位置)。</summary>
        <value>所要求的命令。  此命令的預設按鍵動作是<see langword="Ctrl" /> + <see langword="Backspace" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 插入號是否在單字內，則會刪除目前的位置與該字的開頭之間的單字的其餘部分。  
  
 不一定會回應任何指定的物件; 在此命令的實際實作在許多情況下會回應至命令的實作會是應用程式寫入器的責任。  
  
 此命令原生支援的<xref:System.Windows.Controls.RichTextBox>， <xref:System.Windows.Controls.TextBox>，和<xref:System.Windows.Controls.PasswordBox>。  
  
<a name="xamlAttributeUsage_DeletePreviousWord"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="DeletePreviousWord"/>  
```  
  
   
  
## Examples  
 下列範例示範如何叫用支援的命令物件上的編輯命令。  
  
 此範例中，針對<xref:System.Windows.Controls.RichTextBox>作為命令目標。  請注意，<xref:System.Windows.Controls.RichTextBox>會實作<xref:System.Windows.IInputElement>介面 (繼承自<xref:System.Windows.FrameworkElement>)，而且它包含許多的編輯命令的原生支援。  
  
 第一個引數<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法是命令參數。  最編輯命令忽略的命令參數。這個參數應該是一般情況下，`null`編輯命令。  
  
 第二個引數會指定將路由命令的物件。  這個物件必須實作<xref:System.Windows.IInputElement>介面，並應該包含指定的命令處理常式。  一般而言，不會處理命令的物件上叫用時，已忽略命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.DeleteNextWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" />
      </Docs>
    </Member>
    <Member MemberName="EnterLineBreak">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand EnterLineBreak { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand EnterLineBreak" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.EnterLineBreak" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property EnterLineBreak As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ EnterLineBreak { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EnterLineBreak : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.EnterLineBreak" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.EnterLineBreak" /> 命令，這個命令會要求在目前位置或目前選取範圍上插入分行符號。</summary>
        <value>所要求的命令。  此命令的預設按鍵動作是<see langword="Shift" /> + <see langword="Enter" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 支援非固定格式內容，例如的編輯器<xref:System.Windows.Controls.RichTextBox>，這個命令會導致<xref:System.Windows.Documents.LineBreak>目前位置插入的項目。  
  
 不一定會回應任何指定的物件; 在此命令的實際實作在許多情況下會回應至命令的實作會是應用程式寫入器的責任。  
  
 此命令原生支援的<xref:System.Windows.Controls.RichTextBox>和<xref:System.Windows.Controls.TextBox>。  
  
<a name="xamlAttributeUsage_EnterLineBreak"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="EnterLineBreak"/>  
```  
  
   
  
## Examples  
 下列範例示範如何叫用支援的命令物件上的編輯命令。  
  
 此範例中，針對<xref:System.Windows.Controls.RichTextBox>作為命令目標。  請注意，<xref:System.Windows.Controls.RichTextBox>會實作<xref:System.Windows.IInputElement>介面 (繼承自<xref:System.Windows.FrameworkElement>)，而且它包含許多的編輯命令的原生支援。  
  
 第一個引數<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法是命令參數。  最編輯命令忽略的命令參數。這個參數應該是一般情況下，`null`編輯命令。  
  
 第二個引數會指定將路由命令的物件。  這個物件必須實作<xref:System.Windows.IInputElement>介面，並應該包含指定的命令處理常式。  一般而言，不會處理命令的物件上叫用時，已忽略命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.EnterParagraphBreak" />
      </Docs>
    </Member>
    <Member MemberName="EnterParagraphBreak">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand EnterParagraphBreak { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand EnterParagraphBreak" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.EnterParagraphBreak" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property EnterParagraphBreak As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ EnterParagraphBreak { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EnterParagraphBreak : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.EnterParagraphBreak" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.EnterParagraphBreak" /> 命令，這個命令會要求在目前位置或目前選取範圍上插入分段符號。</summary>
        <value>所要求的命令。  這個命令的預設主要筆勢是 <see langword="Enter" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此命令相當於使用者按下 ENTER 鍵。  
  
 不一定會回應任何指定的物件; 在此命令的實際實作在許多情況下會回應至命令的實作會是應用程式寫入器的責任。  
  
 此命令原生支援的<xref:System.Windows.Controls.RichTextBox>並<xref:System.Windows.Controls.TextBox>(當<xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn%2A>屬性是`true`)。  
  
> [!IMPORTANT]
>  此命令會有不會影響文字項目，除非<xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn%2A>的文字項目的屬性設定為`true`。  
  
<a name="xamlAttributeUsage_EnterParagraphBreak"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="EnterParagraphBreak"/>  
```  
  
   
  
## Examples  
 下列範例示範如何叫用支援的命令物件上的編輯命令。  
  
 此範例中，針對<xref:System.Windows.Controls.RichTextBox>作為命令目標。  請注意，<xref:System.Windows.Controls.RichTextBox>會實作<xref:System.Windows.IInputElement>介面 (繼承自<xref:System.Windows.FrameworkElement>)，而且它包含許多的編輯命令的原生支援。  
  
 第一個引數<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法是命令參數。  最編輯命令忽略的命令參數。這個參數應該是一般情況下，`null`編輯命令。  
  
 第二個引數會指定將路由命令的物件。  這個物件必須實作<xref:System.Windows.IInputElement>介面，並應該包含指定的命令處理常式。  一般而言，不會處理命令的物件上叫用時，已忽略命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.EnterLineBreak" />
      </Docs>
    </Member>
    <Member MemberName="IgnoreSpellingError">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand IgnoreSpellingError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand IgnoreSpellingError" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.IgnoreSpellingError" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IgnoreSpellingError As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ IgnoreSpellingError { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreSpellingError : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.IgnoreSpellingError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.IgnoreSpellingError" /> 命令，這個命令會要求忽略任何在目前位置或目前選取範圍中有拼錯字的項目。</summary>
        <value>所要求的命令。  這個命令沒有預設按鍵動作。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不一定會回應任何指定的物件; 在此命令的實際實作在許多情況下會回應至命令的實作會是應用程式寫入器的責任。  
  
<a name="xamlAttributeUsage_IgnoreSpellingError"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="IgnoreSpellingError"/>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.CorrectSpellingError" />
      </Docs>
    </Member>
    <Member MemberName="IncreaseFontSize">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand IncreaseFontSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand IncreaseFontSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.IncreaseFontSize" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IncreaseFontSize As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ IncreaseFontSize { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.IncreaseFontSize : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.IncreaseFontSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.IncreaseFontSize" /> 命令，這個命令會要求目前選取範圍的字型大小增加 1 點。</summary>
        <value>所要求的命令。  此命令的預設按鍵動作是<see langword="Ctrl" /> + <see langword="OemCloseBrackets" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果此命令會叫用在單字內有插入號的空白選取範圍上，選取項目會展開將命令套用至整個字。  
  
 不一定會回應任何指定的物件; 在此命令的實際實作在許多情況下會回應至命令的實作會是應用程式寫入器的責任。  
  
 此命令原生支援的<xref:System.Windows.Controls.RichTextBox>。  
  
<a name="xamlAttributeUsage_IncreaseFontSize"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="IncreaseFontSize"/>  
```  
  
   
  
## Examples  
 下列範例示範如何叫用支援的命令物件上的編輯命令。  
  
 此範例中，針對<xref:System.Windows.Controls.RichTextBox>作為命令目標。  請注意，<xref:System.Windows.Controls.RichTextBox>會實作<xref:System.Windows.IInputElement>介面 (繼承自<xref:System.Windows.FrameworkElement>)，而且它包含許多的編輯命令的原生支援。  
  
 第一個引數<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法是命令參數。  最編輯命令忽略的命令參數。這個參數應該是一般情況下，`null`編輯命令。  
  
 第二個引數會指定將路由命令的物件。  這個物件必須實作<xref:System.Windows.IInputElement>介面，並應該包含指定的命令處理常式。  一般而言，不會處理命令的物件上叫用時，已忽略命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.DecreaseFontSize" />
      </Docs>
    </Member>
    <Member MemberName="IncreaseIndentation">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand IncreaseIndentation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand IncreaseIndentation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.IncreaseIndentation" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IncreaseIndentation As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ IncreaseIndentation { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.IncreaseIndentation : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.IncreaseIndentation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.IncreaseIndentation" /> 命令，這個命令會要求目前段落的縮排增加一個定位停駐點。</summary>
        <value>所要求的命令。  此命令的預設按鍵動作是<see langword="Ctrl" /> + <see langword="T" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不一定會回應任何指定的物件; 在此命令的實際實作在許多情況下會回應至命令的實作會是應用程式寫入器的責任。  
  
 此命令原生支援的<xref:System.Windows.Controls.RichTextBox>。  
  
> [!IMPORTANT]
>  此命令會有不會影響文字項目，除非<xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A>的文字項目的屬性設定為`true`。  
  
<a name="xamlAttributeUsage_IncreaseIndentation"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="IncreaseIndentation"/>  
```  
  
   
  
## Examples  
 下列範例示範如何叫用支援的命令物件上的編輯命令。  
  
 此範例中，針對<xref:System.Windows.Controls.RichTextBox>作為命令目標。  請注意，<xref:System.Windows.Controls.RichTextBox>會實作<xref:System.Windows.IInputElement>介面 (繼承自<xref:System.Windows.FrameworkElement>)，而且它包含許多的編輯命令的原生支援。  
  
 第一個引數<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法是命令參數。  最編輯命令忽略的命令參數。這個參數應該是一般情況下，`null`編輯命令。  
  
 第二個引數會指定將路由命令的物件。  這個物件必須實作<xref:System.Windows.IInputElement>介面，並應該包含指定的命令處理常式。  一般而言，不會處理命令的物件上叫用時，已忽略命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.DecreaseIndentation" />
      </Docs>
    </Member>
    <Member MemberName="MoveDownByLine">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveDownByLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveDownByLine" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveDownByLine" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveDownByLine As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveDownByLine { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveDownByLine : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveDownByLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveDownByLine" /> 命令，這個命令會要求插入號下移一行。</summary>
        <value>所要求的命令。  這個命令的預設主要筆勢是 <see langword="Down" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不一定會回應任何指定的物件; 在此命令的實際實作在許多情況下會回應至命令的實作會是應用程式寫入器的責任。  
  
 此命令原生支援的<xref:System.Windows.Controls.RichTextBox>和<xref:System.Windows.Controls.TextBox>。  
  
<a name="xamlAttributeUsage_MoveDownByLine"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="MoveDownByLine"/>  
```  
  
   
  
## Examples  
 下列範例示範如何叫用支援的命令物件上的編輯命令。  
  
 此範例中，針對<xref:System.Windows.Controls.RichTextBox>作為命令目標。  請注意，<xref:System.Windows.Controls.RichTextBox>會實作<xref:System.Windows.IInputElement>介面 (繼承自<xref:System.Windows.FrameworkElement>)，而且它包含許多的編輯命令的原生支援。  
  
 第一個引數<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法是命令參數。  最編輯命令忽略的命令參數。這個參數應該是一般情況下，`null`編輯命令。  
  
 第二個引數會指定將路由命令的物件。  這個物件必須實作<xref:System.Windows.IInputElement>介面，並應該包含指定的命令處理常式。  一般而言，不會處理命令的物件上叫用時，已忽略命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByLine" />
      </Docs>
    </Member>
    <Member MemberName="MoveDownByPage">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveDownByPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveDownByPage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveDownByPage" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveDownByPage As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveDownByPage { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveDownByPage : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveDownByPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveDownByPage" /> 命令，這個命令會要求插入號下移一頁。</summary>
        <value>所要求的命令。  這個命令的預設主要筆勢是 <see langword="PageDown" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不一定會回應任何指定的物件; 在此命令的實際實作在許多情況下會回應至命令的實作會是應用程式寫入器的責任。  
  
 此命令原生支援的<xref:System.Windows.Controls.RichTextBox>和<xref:System.Windows.Controls.TextBox>。  
  
<a name="xamlAttributeUsage_MoveDownByPage"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="MoveDownByPage"/>  
```  
  
   
  
## Examples  
 下列範例示範如何叫用支援的命令物件上的編輯命令。  
  
 此範例中，針對<xref:System.Windows.Controls.RichTextBox>作為命令目標。  請注意，<xref:System.Windows.Controls.RichTextBox>會實作<xref:System.Windows.IInputElement>介面 (繼承自<xref:System.Windows.FrameworkElement>)，而且它包含許多的編輯命令的原生支援。  
  
 第一個引數<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法是命令參數。  最編輯命令忽略的命令參數。這個參數應該是一般情況下，`null`編輯命令。  
  
 第二個引數會指定將路由命令的物件。  這個物件必須實作<xref:System.Windows.IInputElement>介面，並應該包含指定的命令處理常式。  一般而言，不會處理命令的物件上叫用時，已忽略命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByPage" />
      </Docs>
    </Member>
    <Member MemberName="MoveDownByParagraph">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveDownByParagraph { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveDownByParagraph" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveDownByParagraph As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveDownByParagraph { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveDownByParagraph : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveDownByParagraph" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" /> 命令，這個命令會要求插入號下移一個段落。</summary>
        <value>所要求的命令。  此命令的預設按鍵動作是<see langword="Ctrl" /> + <see langword="Down" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此命令會將插入號下一個段落的開頭。  
  
 此命令的行為類似<xref:System.Windows.Documents.EditingCommands.MoveToDocumentEnd%2A>上叫用時<xref:System.Windows.Controls.TextBox>。  
  
 不一定會回應任何指定的物件; 在此命令的實際實作在許多情況下會回應至命令的實作會是應用程式寫入器的責任。  
  
 此命令原生支援的<xref:System.Windows.Controls.RichTextBox>和<xref:System.Windows.Controls.TextBox>。  
  
<a name="xamlAttributeUsage_MoveDownByParagraph"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="MoveDownByParagraph"/>  
```  
  
   
  
## Examples  
 下列範例示範如何叫用支援的命令物件上的編輯命令。  
  
 此範例中，針對<xref:System.Windows.Controls.RichTextBox>作為命令目標。  請注意，<xref:System.Windows.Controls.RichTextBox>會實作<xref:System.Windows.IInputElement>介面 (繼承自<xref:System.Windows.FrameworkElement>)，而且它包含許多的編輯命令的原生支援。  
  
 第一個引數<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法是命令參數。  最編輯命令忽略的命令參數。這個參數應該是一般情況下，`null`編輯命令。  
  
 第二個引數會指定將路由命令的物件。  這個物件必須實作<xref:System.Windows.IInputElement>介面，並應該包含指定的命令處理常式。  一般而言，不會處理命令的物件上叫用時，已忽略命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" />
      </Docs>
    </Member>
    <Member MemberName="MoveLeftByCharacter">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveLeftByCharacter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveLeftByCharacter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveLeftByCharacter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveLeftByCharacter As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveLeftByCharacter { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveLeftByCharacter : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveLeftByCharacter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveLeftByCharacter" /> 命令，這個命令會要求插入號左移一個字元。</summary>
        <value>所要求的命令。  這個命令的預設主要筆勢是 <see langword="Left" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不一定會回應任何指定的物件; 在此命令的實際實作在許多情況下會回應至命令的實作會是應用程式寫入器的責任。  
  
 此命令原生支援的<xref:System.Windows.Controls.RichTextBox>， <xref:System.Windows.Controls.TextBox>，和<xref:System.Windows.Controls.PasswordBox>。  
  
<a name="xamlAttributeUsage_MoveLeftByCharacter"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="MoveLeftByCharacter"/>  
```  
  
   
  
## Examples  
 下列範例示範如何叫用支援的命令物件上的編輯命令。  
  
 此範例中，針對<xref:System.Windows.Controls.RichTextBox>作為命令目標。  請注意，<xref:System.Windows.Controls.RichTextBox>會實作<xref:System.Windows.IInputElement>介面 (繼承自<xref:System.Windows.FrameworkElement>)，而且它包含許多的編輯命令的原生支援。  
  
 第一個引數<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法是命令參數。  最編輯命令忽略的命令參數。這個參數應該是一般情況下，`null`編輯命令。  
  
 第二個引數會指定將路由命令的物件。  這個物件必須實作<xref:System.Windows.IInputElement>介面，並應該包含指定的命令處理常式。  一般而言，不會處理命令的物件上叫用時，已忽略命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByCharacter" />
      </Docs>
    </Member>
    <Member MemberName="MoveLeftByWord">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveLeftByWord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveLeftByWord" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveLeftByWord As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveLeftByWord { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveLeftByWord : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveLeftByWord" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" /> 命令，這個命令會要求插入號左移一個字。</summary>
        <value>所要求的命令。  此命令的預設按鍵動作是<see langword="Ctrl" /> + <see langword="Left" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 插入號是否在單字內，此命令會將插入號移至該文字的開頭。  否則，此命令會將插入號移至前一個字組的開頭。  
  
 不一定會回應任何指定的物件; 在此命令的實際實作在許多情況下會回應至命令的實作會是應用程式寫入器的責任。  
  
 此命令原生支援的<xref:System.Windows.Controls.RichTextBox>， <xref:System.Windows.Controls.TextBox>，和<xref:System.Windows.Controls.PasswordBox>。  
  
<a name="xamlAttributeUsage_MoveLeftByWord"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="MoveLeftByWord"/>  
```  
  
   
  
## Examples  
 下列範例示範如何叫用支援的命令物件上的編輯命令。  
  
 此範例中，針對<xref:System.Windows.Controls.RichTextBox>作為命令目標。  請注意，<xref:System.Windows.Controls.RichTextBox>會實作<xref:System.Windows.IInputElement>介面 (繼承自<xref:System.Windows.FrameworkElement>)，而且它包含許多的編輯命令的原生支援。  
  
 第一個引數<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法是命令參數。  最編輯命令忽略的命令參數。這個參數應該是一般情況下，`null`編輯命令。  
  
 第二個引數會指定將路由命令的物件。  這個物件必須實作<xref:System.Windows.IInputElement>介面，並應該包含指定的命令處理常式。  一般而言，不會處理命令的物件上叫用時，已忽略命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" />
      </Docs>
    </Member>
    <Member MemberName="MoveRightByCharacter">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveRightByCharacter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveRightByCharacter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveRightByCharacter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveRightByCharacter As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveRightByCharacter { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveRightByCharacter : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveRightByCharacter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveRightByCharacter" /> 命令，這個命令會要求插入號右移一個字元。</summary>
        <value>所要求的命令。  這個命令的預設主要筆勢是 <see langword="Right" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不一定會回應任何指定的物件; 在此命令的實際實作在許多情況下會回應至命令的實作會是應用程式寫入器的責任。  
  
 此命令原生支援的<xref:System.Windows.Controls.RichTextBox>， <xref:System.Windows.Controls.TextBox>，和<xref:System.Windows.Controls.PasswordBox>。  
  
<a name="xamlAttributeUsage_MoveRightByCharacter"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="MoveRightByCharacter"/>  
```  
  
   
  
## Examples  
 下列範例示範如何叫用支援的命令物件上的編輯命令。  
  
 此範例中，針對<xref:System.Windows.Controls.RichTextBox>作為命令目標。  請注意，<xref:System.Windows.Controls.RichTextBox>會實作<xref:System.Windows.IInputElement>介面 (繼承自<xref:System.Windows.FrameworkElement>)，而且它包含許多的編輯命令的原生支援。  
  
 第一個引數<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法是命令參數。  最編輯命令忽略的命令參數。這個參數應該是一般情況下，`null`編輯命令。  
  
 第二個引數會指定將路由命令的物件。  這個物件必須實作<xref:System.Windows.IInputElement>介面，並應該包含指定的命令處理常式。  一般而言，不會處理命令的物件上叫用時，已忽略命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByCharacter" />
      </Docs>
    </Member>
    <Member MemberName="MoveRightByWord">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveRightByWord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveRightByWord" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveRightByWord" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveRightByWord As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveRightByWord { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveRightByWord : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveRightByWord" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" /> 命令，這個命令會要求插入號右移一個字。</summary>
        <value>所要求的命令。  此命令的預設按鍵動作是<see langword="Ctrl" /> + <see langword="Right" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 插入號是否在單字內，此命令會將插入號移至該文字的結尾。  否則，此命令會將插入號移至下個字組的開頭。  
  
 不一定會回應任何指定的物件; 在此命令的實際實作在許多情況下會回應至命令的實作會是應用程式寫入器的責任。  
  
 此命令原生支援的<xref:System.Windows.Controls.RichTextBox>， <xref:System.Windows.Controls.TextBox>，和<xref:System.Windows.Controls.PasswordBox>。  
  
<a name="xamlAttributeUsage_MoveRightByWord"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="MoveRightByWord"/>  
```  
  
   
  
## Examples  
 下列範例示範如何叫用支援的命令物件上的編輯命令。  
  
 此範例中，針對<xref:System.Windows.Controls.RichTextBox>作為命令目標。  請注意，<xref:System.Windows.Controls.RichTextBox>會實作<xref:System.Windows.IInputElement>介面 (繼承自<xref:System.Windows.FrameworkElement>)，而且它包含許多的編輯命令的原生支援。  
  
 第一個引數<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法是命令參數。  最編輯命令忽略的命令參數。這個參數應該是一般情況下，`null`編輯命令。  
  
 第二個引數會指定將路由命令的物件。  這個物件必須實作<xref:System.Windows.IInputElement>介面，並應該包含指定的命令處理常式。  一般而言，不會處理命令的物件上叫用時，已忽略命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" />
      </Docs>
    </Member>
    <Member MemberName="MoveToDocumentEnd">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveToDocumentEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveToDocumentEnd" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveToDocumentEnd" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveToDocumentEnd As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveToDocumentEnd { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveToDocumentEnd : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveToDocumentEnd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentEnd" /> 命令，這個命令會要求插入號移至內容的最尾端。</summary>
        <value>所要求的命令。  此命令的預設按鍵動作是<see langword="Ctrl" /> + <see langword="End" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A*文字容器*是 form 內容手邊的 ultimate 框線的項目。  <xref:System.Windows.Controls.TextBlock> 和<xref:System.Windows.Documents.FlowDocument>是文字容器的範例。  共同文字容器內所包含的內容指*文件*。  
  
 不一定會回應任何指定的物件; 在此命令的實際實作在許多情況下會回應至命令的實作會是應用程式寫入器的責任。  
  
 此命令原生支援的<xref:System.Windows.Controls.RichTextBox>， <xref:System.Windows.Controls.TextBox>，和<xref:System.Windows.Controls.PasswordBox>。  
  
<a name="xamlAttributeUsage_MoveToDocumentEnd"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="MoveToDocumentEnd"/>  
```  
  
   
  
## Examples  
 下列範例示範如何叫用支援的命令物件上的編輯命令。  
  
 此範例中，針對<xref:System.Windows.Controls.RichTextBox>作為命令目標。  請注意，<xref:System.Windows.Controls.RichTextBox>會實作<xref:System.Windows.IInputElement>介面 (繼承自<xref:System.Windows.FrameworkElement>)，而且它包含許多的編輯命令的原生支援。  
  
 第一個引數<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法是命令參數。  最編輯命令忽略的命令參數。這個參數應該是一般情況下，`null`編輯命令。  
  
 第二個引數會指定將路由命令的物件。  這個物件必須實作<xref:System.Windows.IInputElement>介面，並應該包含指定的命令處理常式。  一般而言，不會處理命令的物件上叫用時，已忽略命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentStart" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentEnd" />
      </Docs>
    </Member>
    <Member MemberName="MoveToDocumentStart">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveToDocumentStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveToDocumentStart" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveToDocumentStart" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveToDocumentStart As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveToDocumentStart { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveToDocumentStart : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveToDocumentStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentStart" /> 命令，這個命令會要求插入號移至內容的最開頭。</summary>
        <value>所要求的命令。  此命令的預設按鍵動作是<see langword="Ctrl" /> + <see langword="Home" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A*文字容器*是 form 內容手邊的 ultimate 框線的項目。  <xref:System.Windows.Controls.TextBlock> 和<xref:System.Windows.Documents.FlowDocument>是文字容器的範例。  共同文字容器內所包含的內容指*文件*。  
  
 不一定會回應任何指定的物件; 在此命令的實際實作在許多情況下會回應至命令的實作會是應用程式寫入器的責任。  
  
 此命令原生支援的<xref:System.Windows.Controls.RichTextBox>， <xref:System.Windows.Controls.TextBox>，和<xref:System.Windows.Controls.PasswordBox>。  
  
<a name="xamlAttributeUsage_MoveToDocumentStart"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="MoveToDocumentStart"/>  
```  
  
   
  
## Examples  
 下列範例示範如何叫用支援的命令物件上的編輯命令。  
  
 此範例中，針對<xref:System.Windows.Controls.RichTextBox>作為命令目標。  請注意，<xref:System.Windows.Controls.RichTextBox>會實作<xref:System.Windows.IInputElement>介面 (繼承自<xref:System.Windows.FrameworkElement>)，而且它包含許多的編輯命令的原生支援。  
  
 第一個引數<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法是命令參數。  最編輯命令忽略的命令參數。這個參數應該是一般情況下，`null`編輯命令。  
  
 第二個引數會指定將路由命令的物件。  這個物件必須實作<xref:System.Windows.IInputElement>介面，並應該包含指定的命令處理常式。  一般而言，不會處理命令的物件上叫用時，已忽略命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentEnd" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentStart" />
      </Docs>
    </Member>
    <Member MemberName="MoveToLineEnd">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveToLineEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveToLineEnd" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveToLineEnd" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveToLineEnd As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveToLineEnd { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveToLineEnd : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveToLineEnd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveToLineEnd" /> 命令，這個命令會要求插入號移至目前這行的結尾。</summary>
        <value>所要求的命令。  這個命令的預設主要筆勢是 <see langword="End" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不一定會回應任何指定的物件; 在此命令的實際實作在許多情況下會回應至命令的實作會是應用程式寫入器的責任。  
  
 此命令原生支援的<xref:System.Windows.Controls.RichTextBox>， <xref:System.Windows.Controls.TextBox>，和<xref:System.Windows.Controls.PasswordBox>。  
  
<a name="xamlAttributeUsage_MoveToLineEnd"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="MoveToLineEnd"/>  
```  
  
   
  
## Examples  
 下列範例示範如何叫用支援的命令物件上的編輯命令。  
  
 此範例中，針對<xref:System.Windows.Controls.RichTextBox>作為命令目標。  請注意，<xref:System.Windows.Controls.RichTextBox>會實作<xref:System.Windows.IInputElement>介面 (繼承自<xref:System.Windows.FrameworkElement>)，而且它包含許多的編輯命令的原生支援。  
  
 第一個引數<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法是命令參數。  最編輯命令忽略的命令參數。這個參數應該是一般情況下，`null`編輯命令。  
  
 第二個引數會指定將路由命令的物件。  這個物件必須實作<xref:System.Windows.IInputElement>介面，並應該包含指定的命令處理常式。  一般而言，不會處理命令的物件上叫用時，已忽略命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToLineStart" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToLineEnd" />
      </Docs>
    </Member>
    <Member MemberName="MoveToLineStart">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveToLineStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveToLineStart" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveToLineStart" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveToLineStart As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveToLineStart { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveToLineStart : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveToLineStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveToLineStart" /> 命令，這個命令會要求插入號移至目前這行的開頭。</summary>
        <value>所要求的命令。  這個命令的預設主要筆勢是 <see langword="Home" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不一定會回應任何指定的物件; 在此命令的實際實作在許多情況下會回應至命令的實作會是應用程式寫入器的責任。  
  
 此命令原生支援的<xref:System.Windows.Controls.RichTextBox>， <xref:System.Windows.Controls.TextBox>，和<xref:System.Windows.Controls.PasswordBox>。  
  
<a name="xamlAttributeUsage_MoveToLineStart"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="MoveToLineStart"/>  
```  
  
   
  
## Examples  
 下列範例示範如何叫用支援的命令物件上的編輯命令。  
  
 此範例中，針對<xref:System.Windows.Controls.RichTextBox>作為命令目標。  請注意，<xref:System.Windows.Controls.RichTextBox>會實作<xref:System.Windows.IInputElement>介面 (繼承自<xref:System.Windows.FrameworkElement>)，而且它包含許多的編輯命令的原生支援。  
  
 第一個引數<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法是命令參數。  最編輯命令忽略的命令參數。這個參數應該是一般情況下，`null`編輯命令。  
  
 第二個引數會指定將路由命令的物件。  這個物件必須實作<xref:System.Windows.IInputElement>介面，並應該包含指定的命令處理常式。  一般而言，不會處理命令的物件上叫用時，已忽略命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToLineEnd" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToLineEnd" />
      </Docs>
    </Member>
    <Member MemberName="MoveUpByLine">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveUpByLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveUpByLine" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveUpByLine" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveUpByLine As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveUpByLine { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveUpByLine : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveUpByLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveUpByLine" /> 命令，這個命令會要求插入號上移一行。</summary>
        <value>所要求的命令。  這個命令的預設主要筆勢是 <see langword="Up" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不一定會回應任何指定的物件; 在此命令的實際實作在許多情況下會回應至命令的實作會是應用程式寫入器的責任。  
  
 此命令原生支援的<xref:System.Windows.Controls.RichTextBox>和<xref:System.Windows.Controls.TextBox>。  
  
<a name="xamlAttributeUsage_MoveUpByLine"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="MoveUpByLine"/>  
```  
  
   
  
## Examples  
 下列範例示範如何叫用支援的命令物件上的編輯命令。  
  
 此範例中，針對<xref:System.Windows.Controls.RichTextBox>作為命令目標。  請注意，<xref:System.Windows.Controls.RichTextBox>會實作<xref:System.Windows.IInputElement>介面 (繼承自<xref:System.Windows.FrameworkElement>)，而且它包含許多的編輯命令的原生支援。  
  
 第一個引數<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法是命令參數。  最編輯命令忽略的命令參數。這個參數應該是一般情況下，`null`編輯命令。  
  
 第二個引數會指定將路由命令的物件。  這個物件必須實作<xref:System.Windows.IInputElement>介面，並應該包含指定的命令處理常式。  一般而言，不會處理命令的物件上叫用時，已忽略命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByLine" />
      </Docs>
    </Member>
    <Member MemberName="MoveUpByPage">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveUpByPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveUpByPage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveUpByPage" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveUpByPage As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveUpByPage { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveUpByPage : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveUpByPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveUpByPage" /> 命令，這個命令會要求插入號上移一頁。</summary>
        <value>所要求的命令。  這個命令的預設主要筆勢是 <see langword="PageUp" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不一定會回應任何指定的物件; 在此命令的實際實作在許多情況下會回應至命令的實作會是應用程式寫入器的責任。  
  
 此命令原生支援的<xref:System.Windows.Controls.RichTextBox>和<xref:System.Windows.Controls.TextBox>。  
  
<a name="xamlAttributeUsage_MoveUpByPage"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="MoveUpByPage"/>  
```  
  
   
  
## Examples  
 下列範例示範如何叫用支援的命令物件上的編輯命令。  
  
 此範例中，針對<xref:System.Windows.Controls.RichTextBox>作為命令目標。  請注意，<xref:System.Windows.Controls.RichTextBox>會實作<xref:System.Windows.IInputElement>介面 (繼承自<xref:System.Windows.FrameworkElement>)，而且它包含許多的編輯命令的原生支援。  
  
 第一個引數<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法是命令參數。  最編輯命令忽略的命令參數。這個參數應該是一般情況下，`null`編輯命令。  
  
 第二個引數會指定將路由命令的物件。  這個物件必須實作<xref:System.Windows.IInputElement>介面，並應該包含指定的命令處理常式。  一般而言，不會處理命令的物件上叫用時，已忽略命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByPage" />
      </Docs>
    </Member>
    <Member MemberName="MoveUpByParagraph">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveUpByParagraph { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveUpByParagraph" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveUpByParagraph As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveUpByParagraph { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveUpByParagraph : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveUpByParagraph" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" /> 命令，這個命令會要求插入號上移一個段落。</summary>
        <value>所要求的命令。  此命令的預設按鍵動作是<see langword="Ctrl" /> + <see langword="Up" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此命令會將插入號下一個段落的開頭。  
  
 此命令的行為類似<xref:System.Windows.Documents.EditingCommands.MoveToDocumentStart%2A>上叫用時<xref:System.Windows.Controls.TextBox>。  
  
 不一定會回應任何指定的物件; 在此命令的實際實作在許多情況下會回應至命令的實作會是應用程式寫入器的責任。  
  
 此命令原生支援的<xref:System.Windows.Controls.RichTextBox>和<xref:System.Windows.Controls.TextBox>。  
  
<a name="xamlAttributeUsage_MoveUpByParagraph"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="MoveUpByParagraph"/>  
```  
  
   
  
## Examples  
 下列範例示範如何叫用支援的命令物件上的編輯命令。  
  
 此範例中，針對<xref:System.Windows.Controls.RichTextBox>作為命令目標。  請注意，<xref:System.Windows.Controls.RichTextBox>會實作<xref:System.Windows.IInputElement>介面 (繼承自<xref:System.Windows.FrameworkElement>)，而且它包含許多的編輯命令的原生支援。  
  
 第一個引數<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法是命令參數。  最編輯命令忽略的命令參數。這個參數應該是一般情況下，`null`編輯命令。  
  
 第二個引數會指定將路由命令的物件。  這個物件必須實作<xref:System.Windows.IInputElement>介面，並應該包含指定的命令處理常式。  一般而言，不會處理命令的物件上叫用時，已忽略命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" />
      </Docs>
    </Member>
    <Member MemberName="SelectDownByLine">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectDownByLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectDownByLine" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectDownByLine" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectDownByLine As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectDownByLine { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectDownByLine : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectDownByLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectDownByLine" /> 命令，這個命令會要求目前的選取範圍向下擴展一行。</summary>
        <value>所要求的命令。  此命令的預設按鍵動作是<see langword="Shift" /> + <see langword="Down" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不一定會回應任何指定的物件; 在此命令的實際實作在許多情況下會回應至命令的實作會是應用程式寫入器的責任。  
  
 此命令原生支援的<xref:System.Windows.Controls.RichTextBox>， <xref:System.Windows.Controls.TextBox>，和<xref:System.Windows.Controls.PasswordBox>。  
  
<a name="xamlAttributeUsage_SelectDownByLine"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="SelectDownByLine"/>  
```  
  
   
  
## Examples  
 下列範例示範如何叫用支援的命令物件上的編輯命令。  
  
 此範例中，針對<xref:System.Windows.Controls.RichTextBox>作為命令目標。  請注意，<xref:System.Windows.Controls.RichTextBox>會實作<xref:System.Windows.IInputElement>介面 (繼承自<xref:System.Windows.FrameworkElement>)，而且它包含許多的編輯命令的原生支援。  
  
 第一個引數<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法是命令參數。  最編輯命令忽略的命令參數。這個參數應該是一般情況下，`null`編輯命令。  
  
 第二個引數會指定將路由命令的物件。  這個物件必須實作<xref:System.Windows.IInputElement>介面，並應該包含指定的命令處理常式。  一般而言，不會處理命令的物件上叫用時，已忽略命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByLine" />
      </Docs>
    </Member>
    <Member MemberName="SelectDownByPage">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectDownByPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectDownByPage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectDownByPage" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectDownByPage As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectDownByPage { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectDownByPage : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectDownByPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectDownByPage" /> 命令，這個命令會要求目前的選取範圍向下擴展一頁。</summary>
        <value>所要求的命令。  此命令的預設按鍵動作是<see langword="Shift" /> + <see langword="PageDown" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不一定會回應任何指定的物件; 在此命令的實際實作在許多情況下會回應至命令的實作會是應用程式寫入器的責任。  
  
 此命令原生支援的<xref:System.Windows.Controls.RichTextBox>， <xref:System.Windows.Controls.TextBox>，和<xref:System.Windows.Controls.PasswordBox>。  
  
<a name="xamlAttributeUsage_SelectDownByPage"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="SelectDownByPage"/>  
```  
  
   
  
## Examples  
 下列範例示範如何叫用支援的命令物件上的編輯命令。  
  
 此範例中，針對<xref:System.Windows.Controls.RichTextBox>作為命令目標。  請注意，<xref:System.Windows.Controls.RichTextBox>會實作<xref:System.Windows.IInputElement>介面 (繼承自<xref:System.Windows.FrameworkElement>)，而且它包含許多的編輯命令的原生支援。  
  
 第一個引數<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法是命令參數。  最編輯命令忽略的命令參數。這個參數應該是一般情況下，`null`編輯命令。  
  
 第二個引數會指定將路由命令的物件。  這個物件必須實作<xref:System.Windows.IInputElement>介面，並應該包含指定的命令處理常式。  一般而言，不會處理命令的物件上叫用時，已忽略命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByPage" />
      </Docs>
    </Member>
    <Member MemberName="SelectDownByParagraph">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectDownByParagraph { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectDownByParagraph" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectDownByParagraph As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectDownByParagraph { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectDownByParagraph : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectDownByParagraph" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" /> 命令，這個命令會要求目前的選取範圍向下擴展一個段落。</summary>
        <value>所要求的命令。  此命令的預設按鍵動作是<see langword="Ctrl" /> + <see langword="Shift" /> + <see langword="Down" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個命令會將選取範圍擴展至下一個段落的開頭。  否則，這個命令會選取範圍擴展至目前的段落結尾。  展開選取範圍包含標示的段落結尾分段符號。  
  
 不一定會回應任何指定的物件; 在此命令的實際實作在許多情況下會回應至命令的實作會是應用程式寫入器的責任。  
  
 此命令原生支援的<xref:System.Windows.Controls.RichTextBox>， <xref:System.Windows.Controls.TextBox>，和<xref:System.Windows.Controls.PasswordBox>。  
  
<a name="xamlAttributeUsage_SelectDownByParagraph"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="SelectDownByParagraph"/>  
```  
  
   
  
## Examples  
 下列範例示範如何叫用支援的命令物件上的編輯命令。  
  
 此範例中，針對<xref:System.Windows.Controls.RichTextBox>作為命令目標。  請注意，<xref:System.Windows.Controls.RichTextBox>會實作<xref:System.Windows.IInputElement>介面 (繼承自<xref:System.Windows.FrameworkElement>)，而且它包含許多的編輯命令的原生支援。  
  
 第一個引數<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法是命令參數。  最編輯命令忽略的命令參數。這個參數應該是一般情況下，`null`編輯命令。  
  
 第二個引數會指定將路由命令的物件。  這個物件必須實作<xref:System.Windows.IInputElement>介面，並應該包含指定的命令處理常式。  一般而言，不會處理命令的物件上叫用時，已忽略命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" />
      </Docs>
    </Member>
    <Member MemberName="SelectLeftByCharacter">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectLeftByCharacter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectLeftByCharacter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectLeftByCharacter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectLeftByCharacter As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectLeftByCharacter { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectLeftByCharacter : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectLeftByCharacter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectLeftByCharacter" /> 命令，這個命令會要求目前的選取範圍向左擴展一個字元。</summary>
        <value>所要求的命令。  此命令的預設按鍵動作是<see langword="Shift" /> + <see langword="Left" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不一定會回應任何指定的物件; 在此命令的實際實作在許多情況下會回應至命令的實作會是應用程式寫入器的責任。  
  
 此命令原生支援的<xref:System.Windows.Controls.RichTextBox>， <xref:System.Windows.Controls.TextBox>，和<xref:System.Windows.Controls.PasswordBox>。  
  
<a name="xamlAttributeUsage_SelectLeftByCharacter"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="SelectLeftByCharacter"/>  
```  
  
   
  
## Examples  
 下列範例示範如何叫用支援的命令物件上的編輯命令。  
  
 此範例中，針對<xref:System.Windows.Controls.RichTextBox>作為命令目標。  請注意，<xref:System.Windows.Controls.RichTextBox>會實作<xref:System.Windows.IInputElement>介面 (繼承自<xref:System.Windows.FrameworkElement>)，而且它包含許多的編輯命令的原生支援。  
  
 第一個引數<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法是命令參數。  最編輯命令忽略的命令參數。這個參數應該是一般情況下，`null`編輯命令。  
  
 第二個引數會指定將路由命令的物件。  這個物件必須實作<xref:System.Windows.IInputElement>介面，並應該包含指定的命令處理常式。  一般而言，不會處理命令的物件上叫用時，已忽略命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByCharacter" />
      </Docs>
    </Member>
    <Member MemberName="SelectLeftByWord">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectLeftByWord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectLeftByWord" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectLeftByWord As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectLeftByWord { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectLeftByWord : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectLeftByWord" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" /> 命令，這個命令會要求目前的選取範圍向左擴展一個字。</summary>
        <value>所要求的命令。  此命令的預設按鍵動作是<see langword="Ctrl" /> + <see langword="Shift" /> + <see langword="Left" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 插入號是否在單字內，此命令就會展開選取範圍以該文字的開頭。  否則這個命令會選取範圍擴展至前一個字組的開頭。  
  
 展開的選取範圍不包含文字分隔字元。  與相反<xref:System.Windows.Documents.EditingCommands.SelectRightByWord%2A>，其中包含文字分隔字元在展開的選取範圍中。  
  
 不一定會回應任何指定的物件; 在此命令的實際實作在許多情況下會回應至命令的實作會是應用程式寫入器的責任。  
  
 此命令原生支援的<xref:System.Windows.Controls.RichTextBox>， <xref:System.Windows.Controls.TextBox>，和<xref:System.Windows.Controls.PasswordBox>。  
  
<a name="xamlAttributeUsage_SelectLeftByWord"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="SelectLeftByWord"/>  
```  
  
   
  
## Examples  
 下列範例示範如何叫用支援的命令物件上的編輯命令。  
  
 此範例中，針對<xref:System.Windows.Controls.RichTextBox>作為命令目標。  請注意，<xref:System.Windows.Controls.RichTextBox>會實作<xref:System.Windows.IInputElement>介面 (繼承自<xref:System.Windows.FrameworkElement>)，而且它包含許多的編輯命令的原生支援。  
  
 第一個引數<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法是命令參數。  最編輯命令忽略的命令參數。這個參數應該是一般情況下，`null`編輯命令。  
  
 第二個引數會指定將路由命令的物件。  這個物件必須實作<xref:System.Windows.IInputElement>介面，並應該包含指定的命令處理常式。  一般而言，不會處理命令的物件上叫用時，已忽略命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" />
      </Docs>
    </Member>
    <Member MemberName="SelectRightByCharacter">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectRightByCharacter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectRightByCharacter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectRightByCharacter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectRightByCharacter As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectRightByCharacter { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectRightByCharacter : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectRightByCharacter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectRightByCharacter" /> 命令，這個命令會要求目前的選取範圍向右擴展一個字元。</summary>
        <value>所要求的命令。  此命令的預設按鍵動作是<see langword="Shift" /> + <see langword="Right" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不一定會回應任何指定的物件; 在此命令的實際實作在許多情況下會回應至命令的實作會是應用程式寫入器的責任。  
  
 此命令原生支援的<xref:System.Windows.Controls.RichTextBox>， <xref:System.Windows.Controls.TextBox>，和<xref:System.Windows.Controls.PasswordBox>。  
  
<a name="xamlAttributeUsage_SelectRightByCharacter"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="SelectRightByCharacter"/>  
```  
  
   
  
## Examples  
 下列範例示範如何叫用支援的命令物件上的編輯命令。  
  
 此範例中，針對<xref:System.Windows.Controls.RichTextBox>作為命令目標。  請注意，<xref:System.Windows.Controls.RichTextBox>會實作<xref:System.Windows.IInputElement>介面 (繼承自<xref:System.Windows.FrameworkElement>)，而且它包含許多的編輯命令的原生支援。  
  
 第一個引數<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法是命令參數。  最編輯命令忽略的命令參數。這個參數應該是一般情況下，`null`編輯命令。  
  
 第二個引數會指定將路由命令的物件。  這個物件必須實作<xref:System.Windows.IInputElement>介面，並應該包含指定的命令處理常式。  一般而言，不會處理命令的物件上叫用時，已忽略命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByCharacter" />
      </Docs>
    </Member>
    <Member MemberName="SelectRightByWord">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectRightByWord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectRightByWord" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectRightByWord" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectRightByWord As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectRightByWord { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectRightByWord : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectRightByWord" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" /> 命令，這個命令會要求目前的選取範圍向右擴展一個字。</summary>
        <value>所要求的命令。  此命令的預設按鍵動作是<see langword="Ctrl" /> + <see langword="Shift" /> + <see langword="Right" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 插入號是否在單字內，這個命令會將選取範圍擴展到該字尾。  否則這個命令會選取範圍擴展至下個字組的結尾。  
  
 展開選取範圍包含文字分隔字元。  與相反<xref:System.Windows.Documents.EditingCommands.SelectLeftByWord%2A>其中不包含在展開的選取範圍字組分隔符號。  
  
 不一定會回應任何指定的物件; 在此命令的實際實作在許多情況下會回應至命令的實作會是應用程式寫入器的責任。  
  
 此命令原生支援的<xref:System.Windows.Controls.RichTextBox>， <xref:System.Windows.Controls.TextBox>，和<xref:System.Windows.Controls.PasswordBox>。  
  
<a name="xamlAttributeUsage_SelectRightByWord"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="SelectRightByWord"/>  
```  
  
   
  
## Examples  
 下列範例示範如何叫用支援的命令物件上的編輯命令。  
  
 此範例中，針對<xref:System.Windows.Controls.RichTextBox>作為命令目標。  請注意，<xref:System.Windows.Controls.RichTextBox>會實作<xref:System.Windows.IInputElement>介面 (繼承自<xref:System.Windows.FrameworkElement>)，而且它包含許多的編輯命令的原生支援。  
  
 第一個引數<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法是命令參數。  最編輯命令忽略的命令參數。這個參數應該是一般情況下，`null`編輯命令。  
  
 第二個引數會指定將路由命令的物件。  這個物件必須實作<xref:System.Windows.IInputElement>介面，並應該包含指定的命令處理常式。  一般而言，不會處理命令的物件上叫用時，已忽略命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" />
      </Docs>
    </Member>
    <Member MemberName="SelectToDocumentEnd">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectToDocumentEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectToDocumentEnd" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectToDocumentEnd" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectToDocumentEnd As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectToDocumentEnd { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectToDocumentEnd : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectToDocumentEnd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentEnd" /> 命令，這個命令會要求目前的選取範圍擴展至內容的最尾端。</summary>
        <value>所要求的命令。  此命令的預設按鍵動作是<see langword="Ctrl" /> + <see langword="Shift" /> + <see langword="End" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A*文字容器*是 form 內容手邊的 ultimate 框線的項目。  <xref:System.Windows.Controls.TextBlock> 和<xref:System.Windows.Documents.FlowDocument>是文字容器的範例。  共同文字容器內所包含的內容指*文件*。  
  
 不一定會回應任何指定的物件; 在此命令的實際實作在許多情況下會回應至命令的實作會是應用程式寫入器的責任。  
  
 此命令原生支援的<xref:System.Windows.Controls.RichTextBox>， <xref:System.Windows.Controls.TextBox>，和<xref:System.Windows.Controls.PasswordBox>。  
  
<a name="xamlAttributeUsage_SelectToDocumentEnd"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="SelectToDocumentEnd"/>  
```  
  
   
  
## Examples  
 下列範例示範如何叫用支援的命令物件上的編輯命令。  
  
 此範例中，針對<xref:System.Windows.Controls.RichTextBox>作為命令目標。  請注意，<xref:System.Windows.Controls.RichTextBox>會實作<xref:System.Windows.IInputElement>介面 (繼承自<xref:System.Windows.FrameworkElement>)，而且它包含許多的編輯命令的原生支援。  
  
 第一個引數<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法是命令參數。  最編輯命令忽略的命令參數。這個參數應該是一般情況下，`null`編輯命令。  
  
 第二個引數會指定將路由命令的物件。  這個物件必須實作<xref:System.Windows.IInputElement>介面，並應該包含指定的命令處理常式。  一般而言，不會處理命令的物件上叫用時，已忽略命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentStart" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentEnd" />
      </Docs>
    </Member>
    <Member MemberName="SelectToDocumentStart">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectToDocumentStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectToDocumentStart" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectToDocumentStart" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectToDocumentStart As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectToDocumentStart { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectToDocumentStart : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectToDocumentStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentStart" /> 命令，這個命令會要求目前的選取範圍擴展至內容的最開頭。</summary>
        <value>所要求的命令。  此命令的預設按鍵動作是<see langword="Ctrl" /> + <see langword="Shift" /> + <see langword="Home" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A*文字容器*是 form 內容手邊的 ultimate 框線的項目。  <xref:System.Windows.Controls.TextBlock> 和<xref:System.Windows.Documents.FlowDocument>是文字容器的範例。  共同文字容器內所包含的內容指*文件*。  
  
 不一定會回應任何指定的物件; 在此命令的實際實作在許多情況下會回應至命令的實作會是應用程式寫入器的責任。  
  
 此命令原生支援的<xref:System.Windows.Controls.RichTextBox>， <xref:System.Windows.Controls.TextBox>，和<xref:System.Windows.Controls.PasswordBox>。  
  
<a name="xamlAttributeUsage_SelectToDocumentStart"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="SelectToDocumentStart"/>  
```  
  
   
  
## Examples  
 下列範例示範如何叫用支援的命令物件上的編輯命令。  
  
 此範例中，針對<xref:System.Windows.Controls.RichTextBox>作為命令目標。  請注意，<xref:System.Windows.Controls.RichTextBox>會實作<xref:System.Windows.IInputElement>介面 (繼承自<xref:System.Windows.FrameworkElement>)，而且它包含許多的編輯命令的原生支援。  
  
 第一個引數<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法是命令參數。  最編輯命令忽略的命令參數。這個參數應該是一般情況下，`null`編輯命令。  
  
 第二個引數會指定將路由命令的物件。  這個物件必須實作<xref:System.Windows.IInputElement>介面，並應該包含指定的命令處理常式。  一般而言，不會處理命令的物件上叫用時，已忽略命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentEnd" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentStart" />
      </Docs>
    </Member>
    <Member MemberName="SelectToLineEnd">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectToLineEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectToLineEnd" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectToLineEnd" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectToLineEnd As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectToLineEnd { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectToLineEnd : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectToLineEnd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectToLineEnd" /> 命令，這個命令會要求目前的選取範圍擴展至目前這行的結尾。</summary>
        <value>所要求的命令。  此命令的預設按鍵動作是<see langword="Shift" /> + <see langword="End" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不一定會回應任何指定的物件; 在此命令的實際實作在許多情況下會回應至命令的實作會是應用程式寫入器的責任。  
  
 此命令原生支援的<xref:System.Windows.Controls.RichTextBox>， <xref:System.Windows.Controls.TextBox>，和<xref:System.Windows.Controls.PasswordBox>。  
  
<a name="xamlAttributeUsage_SelectToLineEnd"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="SelectToLineEnd"/>  
```  
  
   
  
## Examples  
 下列範例示範如何叫用支援的命令物件上的編輯命令。  
  
 此範例中，針對<xref:System.Windows.Controls.RichTextBox>作為命令目標。  請注意，<xref:System.Windows.Controls.RichTextBox>會實作<xref:System.Windows.IInputElement>介面 (繼承自<xref:System.Windows.FrameworkElement>)，而且它包含許多的編輯命令的原生支援。  
  
 第一個引數<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法是命令參數。  最編輯命令忽略的命令參數。這個參數應該是一般情況下，`null`編輯命令。  
  
 第二個引數會指定將路由命令的物件。  這個物件必須實作<xref:System.Windows.IInputElement>介面，並應該包含指定的命令處理常式。  一般而言，不會處理命令的物件上叫用時，已忽略命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToLineStart" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToLineEnd" />
      </Docs>
    </Member>
    <Member MemberName="SelectToLineStart">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectToLineStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectToLineStart" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectToLineStart" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectToLineStart As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectToLineStart { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectToLineStart : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectToLineStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectToLineStart" /> 命令，這個命令會要求目前的選取範圍擴展至目前這行的開頭。</summary>
        <value>所要求的命令。  此命令的預設按鍵動作是<see langword="Shift" /> + <see langword="Home" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不一定會回應任何指定的物件; 在此命令的實際實作在許多情況下會回應至命令的實作會是應用程式寫入器的責任。  
  
 此命令原生支援的<xref:System.Windows.Controls.RichTextBox>， <xref:System.Windows.Controls.TextBox>，和<xref:System.Windows.Controls.PasswordBox>。  
  
<a name="xamlAttributeUsage_SelectToLineStart"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="SelectToLineStart"/>  
```  
  
   
  
## Examples  
 下列範例示範如何叫用支援的命令物件上的編輯命令。  
  
 此範例中，針對<xref:System.Windows.Controls.RichTextBox>作為命令目標。  請注意，<xref:System.Windows.Controls.RichTextBox>會實作<xref:System.Windows.IInputElement>介面 (繼承自<xref:System.Windows.FrameworkElement>)，而且它包含許多的編輯命令的原生支援。  
  
 第一個引數<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法是命令參數。  最編輯命令忽略的命令參數。這個參數應該是一般情況下，`null`編輯命令。  
  
 第二個引數會指定將路由命令的物件。  這個物件必須實作<xref:System.Windows.IInputElement>介面，並應該包含指定的命令處理常式。  一般而言，不會處理命令的物件上叫用時，已忽略命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToLineEnd" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToLineStart" />
      </Docs>
    </Member>
    <Member MemberName="SelectUpByLine">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectUpByLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectUpByLine" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectUpByLine" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectUpByLine As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectUpByLine { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectUpByLine : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectUpByLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectUpByLine" /> 命令，這個命令會要求目前的選取範圍向上擴展一行。</summary>
        <value>所要求的命令。  此命令的預設按鍵動作是<see langword="Shift" /> + <see langword="Up" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不一定會回應任何指定的物件; 在此命令的實際實作在許多情況下會回應至命令的實作會是應用程式寫入器的責任。  
  
 此命令原生支援的<xref:System.Windows.Controls.RichTextBox>， <xref:System.Windows.Controls.TextBox>，和<xref:System.Windows.Controls.PasswordBox>。  
  
<a name="xamlAttributeUsage_SelectUpByLine"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="SelectUpByLine"/>  
```  
  
   
  
## Examples  
 下列範例示範如何叫用支援的命令物件上的編輯命令。  
  
 此範例中，針對<xref:System.Windows.Controls.RichTextBox>作為命令目標。  請注意，<xref:System.Windows.Controls.RichTextBox>會實作<xref:System.Windows.IInputElement>介面 (繼承自<xref:System.Windows.FrameworkElement>)，而且它包含許多的編輯命令的原生支援。  
  
 第一個引數<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法是命令參數。  最編輯命令忽略的命令參數。這個參數應該是一般情況下，`null`編輯命令。  
  
 第二個引數會指定將路由命令的物件。  這個物件必須實作<xref:System.Windows.IInputElement>介面，並應該包含指定的命令處理常式。  一般而言，不會處理命令的物件上叫用時，已忽略命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByLine" />
      </Docs>
    </Member>
    <Member MemberName="SelectUpByPage">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectUpByPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectUpByPage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectUpByPage" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectUpByPage As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectUpByPage { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectUpByPage : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectUpByPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectUpByPage" /> 命令，這個命令會要求目前的選取範圍向上擴展一頁。</summary>
        <value>所要求的命令。  此命令的預設按鍵動作是<see langword="Shift" /> + <see langword="PageUp" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不一定會回應任何指定的物件; 在此命令的實際實作在許多情況下會回應至命令的實作會是應用程式寫入器的責任。  
  
 此命令原生支援的<xref:System.Windows.Controls.RichTextBox>， <xref:System.Windows.Controls.TextBox>，和<xref:System.Windows.Controls.PasswordBox>。  
  
<a name="xamlAttributeUsage_SelectUpByPage"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="SelectUpByPage"/>  
```  
  
   
  
## Examples  
 下列範例示範如何叫用支援的命令物件上的編輯命令。  
  
 此範例中，針對<xref:System.Windows.Controls.RichTextBox>作為命令目標。  請注意，<xref:System.Windows.Controls.RichTextBox>會實作<xref:System.Windows.IInputElement>介面 (繼承自<xref:System.Windows.FrameworkElement>)，而且它包含許多的編輯命令的原生支援。  
  
 第一個引數<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法是命令參數。  最編輯命令忽略的命令參數。這個參數應該是一般情況下，`null`編輯命令。  
  
 第二個引數會指定將路由命令的物件。  這個物件必須實作<xref:System.Windows.IInputElement>介面，並應該包含指定的命令處理常式。  一般而言，不會處理命令的物件上叫用時，已忽略命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByPage" />
      </Docs>
    </Member>
    <Member MemberName="SelectUpByParagraph">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectUpByParagraph { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectUpByParagraph" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectUpByParagraph As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectUpByParagraph { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectUpByParagraph : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectUpByParagraph" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" /> 命令，這個命令會要求目前的選取範圍向上擴展一個段落。</summary>
        <value>所要求的命令。  此命令的預設按鍵動作是<see langword="Ctrl" /> + <see langword="Shift" /> + <see langword="Up" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當插入號位於段落的開頭，這個命令會將選取範圍擴展至前一個段落的開頭。  否則這個命令會選取範圍擴展至目前的段落開頭。  
  
 不一定會回應任何指定的物件; 在此命令的實際實作在許多情況下會回應至命令的實作會是應用程式寫入器的責任。  
  
 此命令原生支援的<xref:System.Windows.Controls.RichTextBox>， <xref:System.Windows.Controls.TextBox>，和<xref:System.Windows.Controls.PasswordBox>。  
  
<a name="xamlAttributeUsage_SelectUpByParagraph"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="SelectUpByParagraph"/>  
```  
  
   
  
## Examples  
 下列範例示範如何叫用支援的命令物件上的編輯命令。  
  
 此範例中，針對<xref:System.Windows.Controls.RichTextBox>作為命令目標。  請注意，<xref:System.Windows.Controls.RichTextBox>會實作<xref:System.Windows.IInputElement>介面 (繼承自<xref:System.Windows.FrameworkElement>)，而且它包含許多的編輯命令的原生支援。  
  
 第一個引數<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法是命令參數。  最編輯命令忽略的命令參數。這個參數應該是一般情況下，`null`編輯命令。  
  
 第二個引數會指定將路由命令的物件。  這個物件必須實作<xref:System.Windows.IInputElement>介面，並應該包含指定的命令處理常式。  一般而言，不會處理命令的物件上叫用時，已忽略命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" />
      </Docs>
    </Member>
    <Member MemberName="TabBackward">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand TabBackward { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand TabBackward" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.TabBackward" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property TabBackward As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ TabBackward { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TabBackward : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.TabBackward" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.TabBackward" /> 命令。</summary>
        <value>所要求的命令。  此命令的預設按鍵動作是<see langword="Shift" /> + <see langword="Tab" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此命令的行為取決於目前的選取範圍。 如果非空白的選取項目，這個命令等同於<xref:System.Windows.Documents.EditingCommands.DecreaseIndentation%2A>。 如果插入號位於資料表資料格 (由<xref:System.Windows.Documents.TableCell>項目)，此命令會將插入號移到上一個儲存格。 否則，定位字元會插入目前的位置。  
  
 不一定會回應任何指定的物件; 在此命令的實際實作在許多情況下會回應至命令的實作會是應用程式寫入器的責任。  
  
 此命令原生支援的<xref:System.Windows.Controls.RichTextBox>並<xref:System.Windows.Controls.TextBox>(當<xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A>屬性是`true`)。  
  
<a name="xamlAttributeUsage_TabBackward"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="TabBackward"/>  
```  
  
   
  
## Examples  
 下列範例示範如何叫用支援的命令物件上的編輯命令。  
  
 此範例中，針對<xref:System.Windows.Controls.RichTextBox>作為命令目標。  請注意，<xref:System.Windows.Controls.RichTextBox>會實作<xref:System.Windows.IInputElement>介面 (繼承自<xref:System.Windows.FrameworkElement>)，而且它包含許多的編輯命令的原生支援。  
  
 第一個引數<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法是命令參數。  最編輯命令忽略的命令參數。這個參數應該是一般情況下，`null`編輯命令。  
  
 第二個引數會指定將路由命令的物件。  這個物件必須實作<xref:System.Windows.IInputElement>介面，並應該包含指定的命令處理常式。  一般而言，不會處理命令的物件上叫用時，已忽略命令。  
  
```csharp  
RichTextBox rTB = new RichTextBox();  
  
EditingCommands.ToggleInsert.Execute(null, rTB);  
  
```  
  
```vb  
            Dim rTB As New RichTextBox()  
  
            EditingCommands.ToggleInsert.Execute(Nothing, rTB)  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.TabForward" />
      </Docs>
    </Member>
    <Member MemberName="TabForward">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand TabForward { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand TabForward" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.TabForward" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property TabForward As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ TabForward { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TabForward : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.TabForward" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.TabForward" /> 命令。</summary>
        <value>所要求的命令。  這個命令的預設主要筆勢是 <see langword="Tab" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此命令的行為取決於目前的選取範圍。 如果選取項目為非空白，或如果是空的選取項目，而且目前的插入號位置的段落開頭，此命令相當於<xref:System.Windows.Documents.EditingCommands.IncreaseIndentation%2A>。 如果插入號位於資料表資料格 (由<xref:System.Windows.Documents.TableCell>項目)，此命令會將插入號移至下一個資料格。 如果插入號是在資料表的最後一個資料格中，此命令會導致新的資料列附加至資料表中，插入號位於新的資料列的第一個資料格中。  否則，定位字元會插入目前的位置。  
  
 不一定會回應任何指定的物件; 在此命令的實際實作在許多情況下會回應至命令的實作會是應用程式寫入器的責任。  
  
 此命令原生支援的<xref:System.Windows.Controls.RichTextBox>並<xref:System.Windows.Controls.TextBox>(當<xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A>屬性是`true`)。  
  
<a name="xamlAttributeUsage_TabForward"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="TabForward"/>  
```  
  
   
  
## Examples  
 下列範例示範如何叫用支援的命令物件上的編輯命令。  
  
 此範例中，針對<xref:System.Windows.Controls.RichTextBox>作為命令目標。  請注意，<xref:System.Windows.Controls.RichTextBox>會實作<xref:System.Windows.IInputElement>介面 (繼承自<xref:System.Windows.FrameworkElement>)，而且它包含許多的編輯命令的原生支援。  
  
 第一個引數<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法是命令參數。  最編輯命令忽略的命令參數。這個參數應該是一般情況下，`null`編輯命令。  
  
 第二個引數會指定將路由命令的物件。  這個物件必須實作<xref:System.Windows.IInputElement>介面，並應該包含指定的命令處理常式。  一般而言，不會處理命令的物件上叫用時，已忽略命令。  
  
```csharp  
RichTextBox rTB = new RichTextBox();  
  
EditingCommands.ToggleInsert.Execute(null, rTB);  
  
```  
  
```vb  
            Dim rTB As New RichTextBox()  
  
            EditingCommands.ToggleInsert.Execute(Nothing, rTB)  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.TabBackward" />
      </Docs>
    </Member>
    <Member MemberName="ToggleBold">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleBold { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleBold" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleBold" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleBold As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleBold { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleBold : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleBold" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.ToggleBold" /> 命令，這個命令會要求在目前選取範圍開啟 <see cref="T:System.Windows.Documents.Bold" /> 格式。</summary>
        <value>所要求的命令。  此命令的預設按鍵動作是<see langword="Ctrl" /> + <see langword="B" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Windows.FontWeight>目前的選取範圍是介於<xref:System.Windows.FontWeights.Thin%2A>要<xref:System.Windows.FontWeights.SemiBold%2A>，<xref:System.Windows.FontWeights.Bold%2A>套用至目前的選取範圍。  否則，<xref:System.Windows.FontWeights.Normal%2A>套用。  如需比較的清單<xref:System.Windows.FontWeight>值，請參閱<xref:System.Windows.FontWeights>。  
  
 當選取範圍是空的插入號是在 word 中時，選取項目已擴充成包括整個字。  
  
 不一定會回應任何指定的物件; 在此命令的實際實作在許多情況下會回應至命令的實作會是應用程式寫入器的責任。  
  
 此命令原生支援的<xref:System.Windows.Controls.RichTextBox>。  
  
<a name="xamlAttributeUsage_ToggleBold"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="ToggleBold"/>  
```  
  
   
  
## Examples  
 下列範例示範如何叫用支援的命令物件上的編輯命令。  
  
 此範例中，針對<xref:System.Windows.Controls.RichTextBox>作為命令目標。  請注意，<xref:System.Windows.Controls.RichTextBox>會實作<xref:System.Windows.IInputElement>介面 (繼承自<xref:System.Windows.FrameworkElement>)，而且它包含許多的編輯命令的原生支援。  
  
 第一個引數<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法是命令參數。  最編輯命令忽略的命令參數。這個參數應該是一般情況下，`null`編輯命令。  
  
 第二個引數會指定將路由命令的物件。  這個物件必須實作<xref:System.Windows.IInputElement>介面，並應該包含指定的命令處理常式。  一般而言，不會處理命令的物件上叫用時，已忽略命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleItalic" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleUnderline" />
      </Docs>
    </Member>
    <Member MemberName="ToggleBullets">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleBullets { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleBullets" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleBullets" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleBullets As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleBullets { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleBullets : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleBullets" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.ToggleBullets" /> 命令，這個命令會要求在目前選取範圍上切換未排序的清單 (也稱為項目符號清單) 格式。</summary>
        <value>所要求的命令。  此命令的預設按鍵動作是<see langword="Ctrl" /> + <see langword="Shift" /> + <see langword="L" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此命令會在運作<xref:System.Windows.Documents.Paragraph>層級。  部分選取的段落 （包括段落中有插入號的空選取範圍） 中的內容，叫用此命令時，才會將要求的效果套用到整個段落。  如果此命令會叫用在橫跨多個段落的選取範圍上，選取範圍內每個段落的整個內容套用效果。  
  
 不一定會回應任何指定的物件; 在此命令的實際實作在許多情況下會回應至命令的實作會是應用程式寫入器的責任。  
  
 此命令原生支援的<xref:System.Windows.Controls.RichTextBox>。  
  
<a name="xamlAttributeUsage_ToggleBullets"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="ToggleBullets"/>  
```  
  
   
  
## Examples  
 下列範例示範如何叫用支援的命令物件上的編輯命令。  
  
 此範例中，針對<xref:System.Windows.Controls.RichTextBox>作為命令目標。  請注意，<xref:System.Windows.Controls.RichTextBox>會實作<xref:System.Windows.IInputElement>介面 (繼承自<xref:System.Windows.FrameworkElement>)，而且它包含許多的編輯命令的原生支援。  
  
 第一個引數<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法是命令參數。  最編輯命令忽略的命令參數。這個參數應該是一般情況下，`null`編輯命令。  
  
 第二個引數會指定將路由命令的物件。  這個物件必須實作<xref:System.Windows.IInputElement>介面，並應該包含指定的命令處理常式。  一般而言，不會處理命令的物件上叫用時，已忽略命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleNumbering" />
      </Docs>
    </Member>
    <Member MemberName="ToggleInsert">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleInsert { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleInsert" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleInsert" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleInsert As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleInsert { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleInsert : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleInsert" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.ToggleInsert" /> 命令，這個命令會切換插入與覆寫的鍵入模式。</summary>
        <value>所要求的命令。  這個命令的預設主要筆勢是 <see langword="Insert" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不一定會回應任何指定的物件; 在此命令的實際實作在許多情況下會回應至命令的實作會是應用程式寫入器的責任。  
  
 此命令原生支援的<xref:System.Windows.Controls.RichTextBox>， <xref:System.Windows.Controls.TextBox>，和<xref:System.Windows.Controls.PasswordBox>。  
  
<a name="xamlAttributeUsage_ToggleInsert"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="ToggleInsert"/>  
```  
  
   
  
## Examples  
 下列範例示範如何叫用支援的命令物件上的編輯命令。  
  
 此範例中，針對<xref:System.Windows.Controls.RichTextBox>作為命令目標。  請注意，<xref:System.Windows.Controls.RichTextBox>會實作<xref:System.Windows.IInputElement>介面 (繼承自<xref:System.Windows.FrameworkElement>)，而且它包含許多的編輯命令的原生支援。  
  
 第一個引數<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法是命令參數。  最編輯命令忽略的命令參數。這個參數應該是一般情況下，`null`編輯命令。  
  
 第二個引數會指定將路由命令的物件。  這個物件必須實作<xref:System.Windows.IInputElement>介面，並應該包含指定的命令處理常式。  一般而言，不會處理命令的物件上叫用時，已忽略命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToggleItalic">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleItalic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleItalic" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleItalic" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleItalic As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleItalic { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleItalic : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleItalic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.ToggleItalic" /> 命令，這個命令會要求在目前選取範圍開啟 <see cref="T:System.Windows.Documents.Italic" /> 格式。</summary>
        <value>所要求的命令。  此命令的預設按鍵動作是<see langword="Ctrl" /> + <see langword="I" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Windows.FontStyle>為目前的選取範圍<xref:System.Windows.FontStyles.Normal%2A>，<xref:System.Windows.FontStyles.Italic%2A>套用至目前的選取範圍。  否則，<xref:System.Windows.FontStyles.Normal%2A>套用。  
  
 當選取範圍是空的插入號是在 word 中時，選取項目已擴充成包括整個字。  
  
 不一定會回應任何指定的物件; 在此命令的實際實作在許多情況下會回應至命令的實作會是應用程式寫入器的責任。  
  
 此命令原生支援的<xref:System.Windows.Controls.RichTextBox>。  
  
<a name="xamlAttributeUsage_ToggleItalic"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="ToggleItalic"/>  
```  
  
   
  
## Examples  
 下列範例示範如何叫用支援的命令物件上的編輯命令。  
  
 此範例中，針對<xref:System.Windows.Controls.RichTextBox>作為命令目標。  請注意，<xref:System.Windows.Controls.RichTextBox>會實作<xref:System.Windows.IInputElement>介面 (繼承自<xref:System.Windows.FrameworkElement>)，而且它包含許多的編輯命令的原生支援。  
  
 第一個引數<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法是命令參數。  最編輯命令忽略的命令參數。這個參數應該是一般情況下，`null`編輯命令。  
  
 第二個引數會指定將路由命令的物件。  這個物件必須實作<xref:System.Windows.IInputElement>介面，並應該包含指定的命令處理常式。  一般而言，不會處理命令的物件上叫用時，已忽略命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleBold" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleUnderline" />
      </Docs>
    </Member>
    <Member MemberName="ToggleNumbering">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleNumbering { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleNumbering" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleNumbering" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleNumbering As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleNumbering { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleNumbering : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleNumbering" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.ToggleNumbering" /> 命令，這個命令會要求在目前選取範圍上切換已排序的清單 (也稱為編號清單) 格式。</summary>
        <value>所要求的命令。  此命令的預設按鍵動作是<see langword="Ctrl" /> + <see langword="Shift" /> + <see langword="N" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此命令會在運作<xref:System.Windows.Documents.Paragraph>層級。  部分選取的段落 （包括段落中有插入號的空選取範圍） 中的內容，叫用此命令時，才會將要求的效果套用到整個段落。  如果此命令會叫用在橫跨多個段落的選取範圍上，選取範圍內每個段落的整個內容套用效果。  
  
 不一定會回應任何指定的物件; 在此命令的實際實作在許多情況下會回應至命令的實作會是應用程式寫入器的責任。  
  
 此命令原生支援的<xref:System.Windows.Controls.RichTextBox>。  
  
<a name="xamlAttributeUsage_ToggleNumbering"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="ToggleNumbering"/>  
```  
  
   
  
## Examples  
 下列範例示範如何叫用支援的命令物件上的編輯命令。  
  
 此範例中，針對<xref:System.Windows.Controls.RichTextBox>作為命令目標。  請注意，<xref:System.Windows.Controls.RichTextBox>會實作<xref:System.Windows.IInputElement>介面 (繼承自<xref:System.Windows.FrameworkElement>)，而且它包含許多的編輯命令的原生支援。  
  
 第一個引數<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法是命令參數。  最編輯命令忽略的命令參數。這個參數應該是一般情況下，`null`編輯命令。  
  
 第二個引數會指定將路由命令的物件。  這個物件必須實作<xref:System.Windows.IInputElement>介面，並應該包含指定的命令處理常式。  一般而言，不會處理命令的物件上叫用時，已忽略命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleItalic" />
      </Docs>
    </Member>
    <Member MemberName="ToggleSubscript">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleSubscript { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleSubscript" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleSubscript" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleSubscript As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleSubscript { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleSubscript : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleSubscript" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.ToggleSubscript" /> 命令，這個命令會要求在目前選取範圍上切換下標格式。</summary>
        <value>所要求的命令。  此命令的預設按鍵動作是<see langword="Ctrl" /> + <see langword="OemPlus" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不一定會回應任何指定的物件; 在此命令的實際實作在許多情況下會回應至命令的實作會是應用程式寫入器的責任。  
  
<a name="xamlAttributeUsage_ToggleSubscript"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="ToggleSubscript"/>  
```  
  
   
  
## Examples  
 下列範例示範如何叫用支援的命令物件上的編輯命令。  
  
 此範例中，針對<xref:System.Windows.Controls.RichTextBox>作為命令目標。  請注意，<xref:System.Windows.Controls.RichTextBox>會實作<xref:System.Windows.IInputElement>介面 (繼承自<xref:System.Windows.FrameworkElement>)，而且它包含許多的編輯命令的原生支援。  
  
 第一個引數<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法是命令參數。  最編輯命令忽略的命令參數。這個參數應該是一般情況下，`null`編輯命令。  
  
 第二個引數會指定將路由命令的物件。  這個物件必須實作<xref:System.Windows.IInputElement>介面，並應該包含指定的命令處理常式。  一般而言，不會處理命令的物件上叫用時，已忽略命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleSuperscript" />
      </Docs>
    </Member>
    <Member MemberName="ToggleSuperscript">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleSuperscript { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleSuperscript" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleSuperscript" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleSuperscript As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleSuperscript { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleSuperscript : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleSuperscript" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.ToggleSuperscript" /> 命令，這個命令會要求在目前選取範圍上切換上標格式。</summary>
        <value>所要求的命令。  此命令的預設按鍵動作是<see langword="Ctrl" /> + <see langword="Shift" /> + <see langword="OemPlus" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不一定會回應任何指定的物件; 在此命令的實際實作在許多情況下會回應至命令的實作會是應用程式寫入器的責任。  
  
<a name="xamlAttributeUsage_ToggleSuperscript"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="ToggleSuperscript"/>  
```  
  
   
  
## Examples  
 下列範例示範如何叫用支援的命令物件上的編輯命令。  
  
 此範例中，針對<xref:System.Windows.Controls.RichTextBox>作為命令目標。  請注意，<xref:System.Windows.Controls.RichTextBox>會實作<xref:System.Windows.IInputElement>介面 (繼承自<xref:System.Windows.FrameworkElement>)，而且它包含許多的編輯命令的原生支援。  
  
 第一個引數<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法是命令參數。  最編輯命令忽略的命令參數。這個參數應該是一般情況下，`null`編輯命令。  
  
 第二個引數會指定將路由命令的物件。  這個物件必須實作<xref:System.Windows.IInputElement>介面，並應該包含指定的命令處理常式。  一般而言，不會處理命令的物件上叫用時，已忽略命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleSubscript" />
      </Docs>
    </Member>
    <Member MemberName="ToggleUnderline">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleUnderline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleUnderline" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleUnderline" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleUnderline As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleUnderline { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleUnderline : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleUnderline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.ToggleUnderline" /> 命令，這個命令會要求在目前選取範圍開啟 <see cref="T:System.Windows.Documents.Underline" /> 格式。</summary>
        <value>所要求的命令。  此命令的預設按鍵動作是<see langword="Ctrl" /> + <see langword="U" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當選取範圍是空的插入號是在 word 中時，選取項目已擴充成包括整個字。  
  
 不一定會回應任何指定的物件; 在此命令的實際實作在許多情況下會回應至命令的實作會是應用程式寫入器的責任。  
  
 此命令原生支援的<xref:System.Windows.Controls.RichTextBox>。  
  
<a name="xamlAttributeUsage_ToggleUnderline"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="ToggleUnderline"/>  
```  
  
   
  
## Examples  
 下列範例示範如何叫用支援的命令物件上的編輯命令。  
  
 此範例中，針對<xref:System.Windows.Controls.RichTextBox>作為命令目標。  請注意，<xref:System.Windows.Controls.RichTextBox>會實作<xref:System.Windows.IInputElement>介面 (繼承自<xref:System.Windows.FrameworkElement>)，而且它包含許多的編輯命令的原生支援。  
  
 第一個引數<xref:System.Windows.Input.RoutedCommand.Execute%2A>方法是命令參數。  最編輯命令忽略的命令參數。這個參數應該是一般情況下，`null`編輯命令。  
  
 第二個引數會指定將路由命令的物件。  這個物件必須實作<xref:System.Windows.IInputElement>介面，並應該包含指定的命令處理常式。  一般而言，不會處理命令的物件上叫用時，已忽略命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleBold" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleItalic" />
      </Docs>
    </Member>
  </Members>
</Type>