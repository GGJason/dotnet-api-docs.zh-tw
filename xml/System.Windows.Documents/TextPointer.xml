<Type Name="TextPointer" FullName="System.Windows.Documents.TextPointer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="78ff844e35266523e6ae9c280abf018a54b675de" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39877528" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TextPointer : System.Windows.Documents.ContentPosition" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TextPointer extends System.Windows.Documents.ContentPosition" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Documents.TextPointer" />
  <TypeSignature Language="VB.NET" Value="Public Class TextPointer&#xA;Inherits ContentPosition" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextPointer : System::Windows::Documents::ContentPosition" />
  <TypeSignature Language="F#" Value="type TextPointer = class&#xA;    inherit ContentPosition" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Documents.ContentPosition</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示 <see cref="T:System.Windows.Documents.FlowDocument" /> 或 <see cref="T:System.Windows.Controls.TextBlock" /> 內的位置。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Documents.TextPointer>類別引進了下列術語：  
  
-   位置-本質上<xref:System.Windows.Documents.TextPointer>永遠指向*位置*內容中。  其中一個屬於流程或在內容中，字元間內容項目標記，這類位置定義內容的結構。  
  
-   目前的位置-因為<xref:System.Windows.Documents.TextPointer>一律表示的位置中，而且因為許多的作業，可以透過執行<xref:System.Windows.Documents.TextPointer>是相對於目前指向的位置<xref:System.Windows.Documents.TextPointer>，合理的直接參考所指定的位置<xref:System.Windows.Documents.TextPointer>作為*目前的位置*。  
  
-   插入的位置-*插入位置*位置，其中可能會加入新的內容而不會中斷任何語意規則相關聯的內容。  在實務上，插入位置是可能放置插入點的內容中。  有效的範例<xref:System.Windows.Documents.TextPointer>不是插入位置的位置是相鄰的兩個位置<xref:System.Windows.Documents.Paragraph>標籤 (也就是上一段的結尾標記和下一個段落的開頭標記之間)。  
  
-   符號-基於<xref:System.Windows.Documents.TextPointer>包含符號的作業，下列任一項會被視為*符號*:  
  
    -   開頭或結尾標記<xref:System.Windows.Documents.TextElement>項目。  
  
    -   A<xref:System.Windows.UIElement>內含的項目<xref:System.Windows.Documents.InlineUIContainer>或<xref:System.Windows.Documents.BlockUIContainer>。  請注意，這類<xref:System.Windows.UIElement>一律為一個符號; 任何其他內容或所包含的項目計入<xref:System.Windows.UIElement>不會被視為符號。  
  
    -   每個 16 位元[!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)]內的文字字元<xref:System.Windows.Documents.Run>項目。  
  
-   文字容器-A*文字容器*形成非固定格式內容手邊的 ultimate 框線的項目，所指出之位置<xref:System.Windows.Documents.TextPointer>永遠落在文字容器內。  目前的文字容器都必須在<xref:System.Windows.Documents.FlowDocument>或<xref:System.Windows.Controls.TextBlock>。  一般而言，作業之間<xref:System.Windows.Documents.TextPointer>不支援在不同的文字容器中的執行個體。  
  
-   文件-文字容器中的內容指*文件*，如下所示<xref:System.Windows.Documents.TextPointer.IsInSameDocument%2A>方法和<xref:System.Windows.Documents.TextPointer.DocumentStart%2A>和<xref:System.Windows.Documents.TextPointer.DocumentEnd%2A>屬性。  
  
 <xref:System.Windows.Documents.TextPointer>類別要加速周遊和內容所表示的操作[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]流動內容項目; 這類項目在一般情況下，衍生自<xref:System.Windows.Documents.TextElement>。  某些作業，<xref:System.Windows.Documents.TextPointer>有助於包括下列：  
  
-   執行序數比較的第二個指定的位置與目前的位置。  請參閱<xref:System.Windows.Documents.TextPointer.CompareTo%2A>方法。  
  
-   判斷目前的位置，指定方向中相鄰的內容類型。  請參閱<xref:System.Windows.Documents.TextPointer.GetPointerContext%2A>方法和<xref:System.Windows.Documents.TextPointerContext>列舉型別。  
  
-   取得<xref:System.Windows.Documents.TextElement>的範圍或相鄰的目前位置。  請參閱<xref:System.Windows.Documents.Paragraph>而<xref:System.Windows.Documents.TextPointer.GetAdjacentElement%2A>方法。  
  
-   取得文字容器的範圍目前文件。  請參閱 <xref:System.Windows.Documents.TextPointer.Parent%2A> 屬性。  
  
-   取得指定的前面或後面的目前位置的字元數。  請參閱<xref:System.Windows.Documents.TextPointer.GetTextInRun%2A>方法。  
  
-   在目前位置插入字元的字串。  請參閱<xref:System.Windows.Documents.TextPointer.InsertTextInRun%2A>方法。  
  
-   尋找列界限內容中。  請參閱<xref:System.Windows.Documents.TextPointer.GetLineStartPosition%2A>方法和<xref:System.Windows.Documents.TextPointer.IsAtLineStartPosition%2A>屬性。  
  
-   之間轉譯<xref:System.Windows.Documents.TextPointer>內容到位移的位置和符號。  請參閱<xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A>和<xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A>方法。  
  
-   執行之間轉譯視覺點擊測試<xref:System.Windows.Documents.TextPointer>位置和<xref:System.Windows.Point>表示相對座標表示。  
  
-   尋找附近的插入位置，或檢查目前的位置是否為插入位置。  請參閱<xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A>並<xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A>方法和<xref:System.Windows.Documents.TextPointer.IsAtInsertionPosition%2A>屬性。  
  
 位置及<xref:System.Windows.Documents.TextPointer.LogicalDirection%2A>由<xref:System.Windows.Documents.TextPointer>是不可變的物件。  當內容是編輯或修改，所指出之位置<xref:System.Windows.Documents.TextPointer>相對於與周圍文字; 不會變更而不是內容開始從該位置的位移會調整以反映新的相對位置中的對應內容。  比方說， <xref:System.Windows.Documents.TextPointer> ，指出指定的段落開頭的位置會繼續以指向該段落的開頭，插入或刪除之前或之後的段落內容時，即使。  
  
 <xref:System.Windows.Documents.TextPointer>類別未提供任何公用建構函式。  執行個體<xref:System.Windows.Documents.TextPointer>建立使用其他物件的屬性或方法 (包括其他<xref:System.Windows.Documents.TextPointer>物件)。 下列清單提供幾個範例的方法和屬性，建立並傳回<xref:System.Windows.Documents.TextPointer>。  此清單未全部列出：  
  
-   從<xref:System.Windows.Documents.TextRange>:<xref:System.Windows.Documents.TextRange.Start%2A>和<xref:System.Windows.Documents.TextRange.End%2A>。  
  
-   從<xref:System.Windows.Documents.TextElement>: <xref:System.Windows.Documents.TextElement.ContentStart%2A>， <xref:System.Windows.Documents.TextElement.ContentEnd%2A>， <xref:System.Windows.Documents.TextElement.ElementStart%2A>，和<xref:System.Windows.Documents.TextElement.ElementEnd%2A>。  
  
-   從<xref:System.Windows.Controls.TextBlock>（文字容器）： <xref:System.Windows.Controls.TextBlock.ContentStart%2A>， <xref:System.Windows.Controls.TextBlock.ContentEnd%2A>，和<xref:System.Windows.Controls.TextBlock.GetPositionFromPoint%2A>。  
  
-   從<xref:System.Windows.Documents.FlowDocument>（文字容器）： <xref:System.Windows.Documents.FlowDocument.ContentStart%2A>，及 <xref:System.Windows.Documents.FlowDocument.ContentEnd%2A>  
  
-   從現有<xref:System.Windows.Documents.TextPointer>: <xref:System.Windows.Documents.TextPointer.DocumentStart%2A>， <xref:System.Windows.Documents.TextPointer.DocumentEnd%2A>， <xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A>，和<xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A>。  
  
   
  
## Examples  
 下列範例示範如何使用<xref:System.Windows.Documents.TextPointer>若要尋找的位置只在第一個<xref:System.Windows.Documents.Run>在指定的文字容器中的項目。  
  
 [!code-csharp[TextPointer_Snippets#_TextPointer_TextPointer1](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_textpointer1)]
 [!code-vb[TextPointer_Snippets#_TextPointer_TextPointer1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_textpointer1)]  
  
 下列範例會實作簡單的尋找的演算法使用<xref:System.Windows.Documents.TextPointer>設備。  
  
 [!code-csharp[TextPointer_Snippets#_TextPointer_TextPointer2](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_textpointer2)]
 [!code-vb[TextPointer_Snippets#_TextPointer_TextPointer2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_textpointer2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Documents.TextRange" />
    <altmember cref="T:System.Windows.Documents.TextPointerContext" />
    <altmember cref="T:System.Windows.Documents.TextElement" />
  </Docs>
  <Members>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (System.Windows.Documents.TextPointer position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 CompareTo(class System.Windows.Documents.TextPointer position) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.CompareTo(System.Windows.Documents.TextPointer)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (position As TextPointer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareTo(System::Windows::Documents::TextPointer ^ position);" />
      <MemberSignature Language="F#" Value="member this.CompareTo : System.Windows.Documents.TextPointer -&gt; int" Usage="textPointer.CompareTo position" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Windows.Documents.TextPointer" />
      </Parameters>
      <Docs>
        <param name="position">
          <see cref="T:System.Windows.Documents.TextPointer" />，指定要與目前位置進行比較的位置。</param>
        <summary>在目前 <see cref="T:System.Windows.Documents.TextPointer" /> 指定的位置與第二個指定的 <see cref="T:System.Windows.Documents.TextPointer" /> 之間執行順序比較。</summary>
        <returns>如果目前 <see cref="T:System.Windows.Documents.TextPointer" /> 在 <paramref name="position" /> 前面，則為 –1，如果位置相同，則為 0；如果目前 <see cref="T:System.Windows.Documents.TextPointer" /> 在 <paramref name="position" /> 後面，則為 +1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 -1 值表示由目前指定的位置<xref:System.Windows.Documents.TextPointer>前面所指定的位置`position`。  0 的值會指出指定的位置相等。  正數的 + 1 值表示由目前指定的位置<xref:System.Windows.Documents.TextPointer>所指定的位置之後`position`。  
  
   
  
## Examples  
 下列範例會示範這個方法的用法。  在範例中，<xref:System.Windows.Documents.TextPointer.CompareTo%2A>方法可搭配<xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A>方法來測試是否指定<xref:System.Windows.Documents.TextElement>是空的。  
  
 [!code-csharp[TextPointer_Snippets#_TextPointer_GetInsertionPosition](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_getinsertionposition)]
 [!code-vb[TextPointer_Snippets#_TextPointer_GetInsertionPosition](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_getinsertionposition)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="position" /> 會指定文字容器外與目前位置相關的位置。</exception>
        <altmember cref="M:System.Windows.Documents.TextPointer.IsInSameDocument(System.Windows.Documents.TextPointer)" />
      </Docs>
    </Member>
    <Member MemberName="DeleteTextInRun">
      <MemberSignature Language="C#" Value="public int DeleteTextInRun (int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 DeleteTextInRun(int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.DeleteTextInRun(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteTextInRun (count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int DeleteTextInRun(int count);" />
      <MemberSignature Language="F#" Value="member this.DeleteTextInRun : int -&gt; int" Usage="textPointer.DeleteTextInRun count" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="count">從目前位置開始算起，要刪除的字元數。 指定正值以刪除目前位置後面的字元；指定負值以刪除目前位置前面的字元。</param>
        <summary>從目前 <see cref="T:System.Windows.Documents.TextPointer" /> 指出的位置刪除指定的字元數。</summary>
        <returns>實際刪除的字元數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定正值以刪除目前位置後面的字元 (如<xref:System.Windows.Documents.LogicalDirection.Forward?displayProperty=nameWithType>); 指定負值以刪除目前位置前面的字元 (如<xref:System.Windows.Documents.LogicalDirection.Backward?displayProperty=nameWithType>)。  
  
 實際刪除的字元數目可能小於指定的數字`count`。  這發生在情況下，`count`指定字元數超過要刪除的存在。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在不容許有文字的位置呼叫了此方法。</exception>
        <altmember cref="Overload:System.Windows.Documents.TextPointer.GetTextInRun" />
        <altmember cref="M:System.Windows.Documents.TextPointer.InsertTextInRun(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="DocumentEnd">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer DocumentEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Documents.TextPointer DocumentEnd" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextPointer.DocumentEnd" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DocumentEnd As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Documents::TextPointer ^ DocumentEnd { System::Windows::Documents::TextPointer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DocumentEnd : System.Windows.Documents.TextPointer" Usage="System.Windows.Documents.TextPointer.DocumentEnd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在與目前位置相關的文字容器中的內容結尾處取得 <see cref="T:System.Windows.Documents.TextPointer" />。</summary>
        <value>位於與目前位置相關的文字容器中內容結尾處的 <see cref="T:System.Windows.Documents.TextPointer" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Documents.TextPointer.Parent%2A>傳回<xref:System.Windows.Documents.TextPointer>永遠是文字容器 (<xref:System.Windows.Controls.TextBlock>或是<xref:System.Windows.Documents.FlowDocument>)，而非<xref:System.Windows.Documents.TextElement>。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.TextPointer.DocumentStart" />
      </Docs>
    </Member>
    <Member MemberName="DocumentStart">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer DocumentStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Documents.TextPointer DocumentStart" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextPointer.DocumentStart" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DocumentStart As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Documents::TextPointer ^ DocumentStart { System::Windows::Documents::TextPointer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DocumentStart : System.Windows.Documents.TextPointer" Usage="System.Windows.Documents.TextPointer.DocumentStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在與目前位置相關的文字容器中的內容開頭處取得 <see cref="T:System.Windows.Documents.TextPointer" />。</summary>
        <value>位於與目前位置相關的文字容器中內容開頭處的 <see cref="T:System.Windows.Documents.TextPointer" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用這個屬性傳回作為基準位置要從中使用至其他位置的相對位移的位置。  <xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A>和<xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A>方法可用來轉譯之間的位置和位置位移。  
  
 <xref:System.Windows.Documents.TextPointer.Parent%2A>傳回<xref:System.Windows.Documents.TextPointer>永遠是文字容器 (<xref:System.Windows.Controls.TextBlock>或是<xref:System.Windows.Documents.FlowDocument>)，而非<xref:System.Windows.Documents.TextElement>。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.TextPointer.DocumentEnd" />
      </Docs>
    </Member>
    <Member MemberName="GetAdjacentElement">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObject GetAdjacentElement (System.Windows.Documents.LogicalDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.DependencyObject GetAdjacentElement(valuetype System.Windows.Documents.LogicalDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetAdjacentElement(System.Windows.Documents.LogicalDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAdjacentElement (direction As LogicalDirection) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::DependencyObject ^ GetAdjacentElement(System::Windows::Documents::LogicalDirection direction);" />
      <MemberSignature Language="F#" Value="member this.GetAdjacentElement : System.Windows.Documents.LogicalDirection -&gt; System.Windows.DependencyObject" Usage="textPointer.GetAdjacentElement direction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Documents.LogicalDirection" />
      </Parameters>
      <Docs>
        <param name="direction">其中一個 <see cref="T:System.Windows.Documents.LogicalDirection" /> 值，這個值會指定將在哪一個邏輯方向搜尋相鄰項目。</param>
        <summary>傳回在指定的邏輯方向與目前 <see cref="T:System.Windows.Documents.TextPointer" /> 相鄰的項目 (如果有的話)。</summary>
        <returns>在指定的 <paramref name="direction" /> 相鄰的項目，或者若沒有相鄰項目存在，則為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 傳回的項目通常是<xref:System.Windows.Documents.TextElement>。  A<xref:System.Windows.UIElement>可以傳回的時機<xref:System.Windows.Documents.TextPointer>表示的位置內<xref:System.Windows.Documents.BlockUIContainer>項目或<xref:System.Windows.Documents.InlineUIContainer>項目。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.TextPointer.Parent" />
      </Docs>
    </Member>
    <Member MemberName="GetCharacterRect">
      <MemberSignature Language="C#" Value="public System.Windows.Rect GetCharacterRect (System.Windows.Documents.LogicalDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Rect GetCharacterRect(valuetype System.Windows.Documents.LogicalDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetCharacterRect(System.Windows.Documents.LogicalDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCharacterRect (direction As LogicalDirection) As Rect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Rect GetCharacterRect(System::Windows::Documents::LogicalDirection direction);" />
      <MemberSignature Language="F#" Value="member this.GetCharacterRect : System.Windows.Documents.LogicalDirection -&gt; System.Windows.Rect" Usage="textPointer.GetCharacterRect direction" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Documents.ITextPointer.GetCharacterRect(System.Windows.Documents.LogicalDirection)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Documents.LogicalDirection" />
      </Parameters>
      <Docs>
        <param name="direction">其中一個 <see cref="T:System.Windows.Documents.LogicalDirection" /> 值，這個值會指定將在哪一個邏輯方向搜尋內容週框方塊。</param>
        <summary>針對在指定的邏輯方向與目前 <see cref="T:System.Windows.Rect" /> 相鄰的內容，傳回週框方塊 (<see cref="T:System.Windows.Documents.TextPointer" />)。</summary>
        <returns>在指定的邏輯方向與目前 <see cref="T:System.Windows.Documents.TextPointer" /> 相鄰之內容的週框方塊，或者若無法使用目前有效的配置資訊的話，則為 <see cref="P:System.Windows.Rect.Empty" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Documents.TextElement> 邊緣不會考慮內容，這個方法的目的。  如果<xref:System.Windows.Documents.TextPointer>位於之前<xref:System.Windows.Documents.TextElement>邊，傳回的值會是週框方塊的下一個非<xref:System.Windows.Documents.TextElement>內容中指定的方向。  不是否有任何內容中指定的方向，零寬度<xref:System.Windows.Rect>傳回高度比對的高度任何先前的內容。  
  
 這個方法所執行的作業取決於有效的配置。  如有必要，這個方法會嘗試自動重新產生有效的配置，再繼續作業。  重新產生配置可以是相當耗成本的作業。  使用<xref:System.Windows.Documents.TextPointer.HasValidLayout%2A>屬性來執行作業，可能會重新產生配置之前檢查有效的配置。  如需詳細資訊，請參閱[配置](~/docs/framework/wpf/advanced/layout.md)。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.TextPointer.HasValidLayout" />
      </Docs>
    </Member>
    <Member MemberName="GetInsertionPosition">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer GetInsertionPosition (System.Windows.Documents.LogicalDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Documents.TextPointer GetInsertionPosition(valuetype System.Windows.Documents.LogicalDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInsertionPosition (direction As LogicalDirection) As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Documents::TextPointer ^ GetInsertionPosition(System::Windows::Documents::LogicalDirection direction);" />
      <MemberSignature Language="F#" Value="member this.GetInsertionPosition : System.Windows.Documents.LogicalDirection -&gt; System.Windows.Documents.TextPointer" Usage="textPointer.GetInsertionPosition direction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Documents.LogicalDirection" />
      </Parameters>
      <Docs>
        <param name="direction">其中一個 <see cref="T:System.Windows.Documents.LogicalDirection" /> 值，這個值會指定將在哪一個邏輯方向搜尋最接近插入位置。</param>
        <summary>將 <see cref="T:System.Windows.Documents.TextPointer" /> 傳回至在指定的邏輯方向中的最接近插入位置。</summary>
        <returns>在指定的方向中最接近插入位置的 <see cref="T:System.Windows.Documents.TextPointer" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 插入位置是其中可能會加入新的內容而不會中斷任何語意規則相關聯的內容位置。  在實務上，插入位置是可能放置插入點的內容中。  有效的範例<xref:System.Windows.Documents.TextPointer>不是插入位置的位置是相鄰的兩個位置<xref:System.Windows.Documents.Paragraph>標籤 (也就是上一段的結尾標記和下一個段落的開頭標記之間)。  
  
 如果<xref:System.Windows.Documents.TextPointer>已經指向有效的插入位置，但結尾標記為非空白的格式化順序直接位在指定的方向，該位置則<xref:System.Windows.Documents.TextPointer>傳回由這個方法會調整為指向插入只在格式化的序列的關閉之後的位置。 例如，請考慮標記序列`<Bold>a</Bold>b`。 請注意，有兩個字母之間的插入位置`a`並`b`— 一個結尾`Bold`標記，並直接跟在結尾的一個`Bold`標記。 如果<xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A>上呼叫<xref:System.Windows.Documents.TextPointer>緊接著字母位置`a`之前關閉作業的`Bold`標記，且`direction`的<xref:System.Windows.Documents.LogicalDirection.Forward>，傳回<xref:System.Windows.Documents.TextPointer>調整為指向字母之前位置`b`，關閉後`Bold`標記。 類似的調整會將開啟的相反邏輯方向中運作時的格式設定索引標籤。 這個方法被要提供一種在類似的情況下的插入位置之間的去除混淆。  
  
 這個方法也可用在涉及一連串的結構化的標記時要謹慎的插入點。 比方說，在餘額和期末段落標記之間的位置，當方向參數可用來選取下列段落的開頭最接近插入點 (藉由指定<xref:System.Windows.Documents.LogicalDirection.Forward?displayProperty=nameWithType>) 或在前面的段落 （結尾藉由指定<xref:System.Windows.Documents.LogicalDirection.Backward?displayProperty=nameWithType>)。  
  
 如果指標已插入位置，而在指定有沒有相鄰的格式化標記`direction`，傳回<xref:System.Windows.Documents.TextPointer>指向相同的位置，以呼叫<xref:System.Windows.Documents.TextPointer>。  
  
 很可能沒有有效的插入位置存在相對於所指向位置<xref:System.Windows.Documents.TextPointer>。  如果參照的內容在結構上完成，如所示的空的資料表或清單中，會發生這項目。  在此情況下，這個方法只會傳回<xref:System.Windows.Documents.TextPointer>為相同的位置，以<xref:System.Windows.Documents.TextPointer>從呼叫這個方法。  這個方法一律會傳回有效<xref:System.Windows.Documents.TextPointer>。  
  
   
  
## Examples  
 此範例示範如何使用<xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A>方法來檢查指定<xref:System.Windows.Documents.TextElement>是空的可列印的內容。  
  
 [!code-csharp[TextPointer_Snippets#_TextPointer_GetInsertionPosition](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_getinsertionposition)]
 [!code-vb[TextPointer_Snippets#_TextPointer_GetInsertionPosition](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_getinsertionposition)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Documents.TextPointer.GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetLineStartPosition">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將 <see cref="T:System.Windows.Documents.TextPointer" /> 傳回至相對於目前 <see cref="T:System.Windows.Documents.TextPointer" /> 指定的行開頭。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetLineStartPosition">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer GetLineStartPosition (int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Documents.TextPointer GetLineStartPosition(int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLineStartPosition (count As Integer) As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Documents::TextPointer ^ GetLineStartPosition(int count);" />
      <MemberSignature Language="F#" Value="member this.GetLineStartPosition : int -&gt; System.Windows.Documents.TextPointer" Usage="textPointer.GetLineStartPosition count" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="count">判斷要傳回哪一行的開始位置時，所要略過的字行開頭標記數目。 負值會指定前面字行、0 指定目前字行，而正值則指定後面字行。</param>
        <summary>將 <see cref="T:System.Windows.Documents.TextPointer" /> 傳回至相對於目前 <see cref="T:System.Windows.Documents.TextPointer" /> 指定的行開頭。</summary>
        <returns>指向指定行開頭的 <see cref="T:System.Windows.Documents.TextPointer" /> (將 <see cref="P:System.Windows.Documents.TextPointer.LogicalDirection" /> 設為 <see cref="F:System.Windows.Documents.LogicalDirection.Forward" />)，或者若指定的字行超出範圍或無法找到的話，則為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Windows.Documents.TextPointer>指向的模稜兩可的位置，比方說，兩個線條之間的行中所指定的方向<xref:System.Windows.Documents.TextPointer.LogicalDirection%2A>當做相對的開始行。  
  
 這個方法所執行的作業取決於有效的配置。  如有必要，這個方法會嘗試自動重新產生有效的配置，再繼續作業。  重新產生配置可以是相當耗成本的作業。  使用<xref:System.Windows.Documents.TextPointer.HasValidLayout%2A>執行可能會重新產生版面配置的作業之前檢查有效的配置。  如需詳細資訊，請參閱[配置](~/docs/framework/wpf/advanced/layout.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLineStartPosition">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer GetLineStartPosition (int count, out int actualCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Documents.TextPointer GetLineStartPosition(int32 count, [out] int32&amp; actualCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLineStartPosition (count As Integer, ByRef actualCount As Integer) As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Documents::TextPointer ^ GetLineStartPosition(int count, [Runtime::InteropServices::Out] int % actualCount);" />
      <MemberSignature Language="F#" Value="member this.GetLineStartPosition : int *  -&gt; System.Windows.Documents.TextPointer" Usage="textPointer.GetLineStartPosition (count, actualCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="actualCount" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="count">判斷要傳回哪一行的開始位置時，所要略過的字行開頭標記數目。 負值會指定前面字行、0 指定目前字行，而正值則指定後面字行。</param>
        <param name="actualCount">在判斷要傳回哪一行的開頭位置時，這個方法會傳回、包含已略過之字行開頭標記的實際數目。  如果在略過指定的行數之前遇到內容的開頭或結尾，則此值可能小於 <c>count</c>。 這個參數會以未初始化的狀態傳遞。</param>
        <summary>將 <see cref="T:System.Windows.Documents.TextPointer" /> 傳回至相對於目前 <see cref="T:System.Windows.Documents.TextPointer" /> 指定的行開頭，並報告已略過多少行。</summary>
        <returns>
          <see cref="T:System.Windows.Documents.TextPointer" />，指向指定行的開頭 (將 <see cref="P:System.Windows.Documents.TextPointer.LogicalDirection" /> 設為 <see cref="F:System.Windows.Documents.LogicalDirection.Forward" />)，或指向最接近指定行的字行開頭 (如果指定行超出範圍的話)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Windows.Documents.TextPointer>指向的模稜兩可的位置，比方說，兩個線條之間的行中所指定的方向<xref:System.Windows.Documents.TextPointer.LogicalDirection%2A>屬性當做相對的開始行。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNextContextPosition">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer GetNextContextPosition (System.Windows.Documents.LogicalDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Documents.TextPointer GetNextContextPosition(valuetype System.Windows.Documents.LogicalDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetNextContextPosition(System.Windows.Documents.LogicalDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNextContextPosition (direction As LogicalDirection) As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Documents::TextPointer ^ GetNextContextPosition(System::Windows::Documents::LogicalDirection direction);" />
      <MemberSignature Language="F#" Value="member this.GetNextContextPosition : System.Windows.Documents.LogicalDirection -&gt; System.Windows.Documents.TextPointer" Usage="textPointer.GetNextContextPosition direction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Documents.LogicalDirection" />
      </Parameters>
      <Docs>
        <param name="direction">其中一個 <see cref="T:System.Windows.Documents.LogicalDirection" /> 值，這個值會指定將在哪一個邏輯方向搜尋下一個符號。</param>
        <summary>將指標傳回至指定的邏輯方向中的下一個符號。</summary>
        <returns>所要求方向中下一個符號的 <see cref="T:System.Windows.Documents.TextPointer" />，或者若目前 <see cref="T:System.Windows.Documents.TextPointer" /> 與內容開頭或結尾相鄰，則為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下列其中一項會被視為符號：  
  
-   開頭或結尾標記<xref:System.Windows.Documents.TextElement>項目。  
  
-   A<xref:System.Windows.UIElement>中所包含的項目<xref:System.Windows.Documents.InlineUIContainer>或<xref:System.Windows.Documents.BlockUIContainer>。  請注意，這類<xref:System.Windows.UIElement>一律為一個符號; 任何其他內容或所包含的項目計入<xref:System.Windows.UIElement>不會被視為符號。  
  
-   16 位元[!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)]內的文字字元<xref:System.Windows.Documents.Run>項目。  
  
 如果下一個符號會分類成<xref:System.Windows.Documents.TextPointerContext.EmbeddedElement>， <xref:System.Windows.Documents.TextPointerContext.ElementStart>，或<xref:System.Windows.Documents.TextPointerContext.ElementEnd>(所識別<xref:System.Windows.Documents.TextPointer.GetPointerContext%2A>方法)，則<xref:System.Windows.Documents.TextPointer>傳回由這個方法由一個符號進階從目前的位置。  
  
 如果下一個符號會分類成<xref:System.Windows.Documents.TextPointerContext.Text>，則<xref:System.Windows.Documents.TextPointer>傳回由這個方法前往超過文字的下一個非文字符號 (也就是下一步 表示位置<xref:System.Windows.Documents.TextPointerContext>不是<xref:System.Windows.Documents.TextPointerContext.Text>)。  確切的符號計數已超過可以事先計算藉由呼叫<xref:System.Windows.Documents.TextPointer.GetTextRunLength%2A>方法。  
  
   
  
## Examples  
 下列範例會示範這個方法的用法。  此範例會使用<xref:System.Windows.Documents.TextPointer.GetNextContextPosition%2A>方法搭配<xref:System.Windows.Documents.TextPointer.GetPointerContext%2A>方法來周遊，並擷取在指定的符號<xref:System.Windows.Documents.TextElement>。  
  
 雖然此範例可以用來擷取[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]結構的內容指定<xref:System.Windows.Documents.TextElement>，它是針對只，是為了示範，因此不應用於實際執行程式碼。  請參閱<xref:System.Xml>一組豐富的設計使用和處理 XML 類型的命名空間。  
  
 [!code-csharp[TextPointer_Snippets#_TextPointer_GetNextContextPosition](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_getnextcontextposition)]
 [!code-vb[TextPointer_Snippets#_TextPointer_GetNextContextPosition](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_getnextcontextposition)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNextInsertionPosition">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer GetNextInsertionPosition (System.Windows.Documents.LogicalDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Documents.TextPointer GetNextInsertionPosition(valuetype System.Windows.Documents.LogicalDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNextInsertionPosition (direction As LogicalDirection) As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Documents::TextPointer ^ GetNextInsertionPosition(System::Windows::Documents::LogicalDirection direction);" />
      <MemberSignature Language="F#" Value="member this.GetNextInsertionPosition : System.Windows.Documents.LogicalDirection -&gt; System.Windows.Documents.TextPointer" Usage="textPointer.GetNextInsertionPosition direction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Documents.LogicalDirection" />
      </Parameters>
      <Docs>
        <param name="direction">其中一個 <see cref="T:System.Windows.Documents.LogicalDirection" /> 值，這個值會指定將在哪一個邏輯方向搜尋下一個插入位置。</param>
        <summary>將 <see cref="T:System.Windows.Documents.TextPointer" /> 傳回至所指定邏輯方向中的下一個插入位置。</summary>
        <returns>
          <see cref="T:System.Windows.Documents.TextPointer" />，識別所要求方向中下一個插入位置，或者若找不到下一個插入位置的話，則為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 *插入位置*位置，其中可能會加入新的內容而不會中斷任何語意規則相關聯的內容。  在實務上，插入位置是可能放置插入點的內容中。  有效的範例<xref:System.Windows.Documents.TextPointer>不是插入位置的位置是相鄰的兩個位置<xref:System.Windows.Documents.Paragraph>標籤 (也就是上一段的結尾標記和下一個段落的開頭標記之間)。  
  
   
  
## Examples  
 下列範例會示範這個方法的用法。 此範例會使用<xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A>方法來周遊內容項目界限，若要計算的數目<xref:System.Windows.Documents.Paragraph>之間兩個指定的項目呈現<xref:System.Windows.Documents.TextPointer>執行個體。  
  
 [!code-csharp[TextPointer_Snippets#_TextPointer_GetNextInsertionPosition](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_getnextinsertionposition)]
 [!code-vb[TextPointer_Snippets#_TextPointer_GetNextInsertionPosition](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_getnextinsertionposition)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)" />
      </Docs>
    </Member>
    <Member MemberName="GetOffsetToPosition">
      <MemberSignature Language="C#" Value="public int GetOffsetToPosition (System.Windows.Documents.TextPointer position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetOffsetToPosition(class System.Windows.Documents.TextPointer position) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetOffsetToPosition(System.Windows.Documents.TextPointer)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOffsetToPosition (position As TextPointer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetOffsetToPosition(System::Windows::Documents::TextPointer ^ position);" />
      <MemberSignature Language="F#" Value="member this.GetOffsetToPosition : System.Windows.Documents.TextPointer -&gt; int" Usage="textPointer.GetOffsetToPosition position" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Windows.Documents.TextPointer" />
      </Parameters>
      <Docs>
        <param name="position">
          <see cref="T:System.Windows.Documents.TextPointer" />，指定要找出距離 (以符號表示) 的位置。</param>
        <summary>傳回目前 <see cref="T:System.Windows.Documents.TextPointer" /> 與第二個指定的 <see cref="T:System.Windows.Documents.TextPointer" /> 之間的符號計數。</summary>
        <returns>目前 <see cref="T:System.Windows.Documents.TextPointer" /> 與 <paramref name="position" /> 之間的相對符號數目。  負值表示目前 <see cref="T:System.Windows.Documents.TextPointer" /> 在 <paramref name="position" /> 指定的位置後面，0 表示位置相等，而正值則表示目前 <see cref="T:System.Windows.Documents.TextPointer" /> 在 <paramref name="position" /> 指定的位置前面。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下列其中一項會被視為符號：  
  
-   開頭或結尾標記<xref:System.Windows.Documents.TextElement>項目。  
  
-   A<xref:System.Windows.UIElement>中所包含的項目<xref:System.Windows.Documents.InlineUIContainer>或<xref:System.Windows.Documents.BlockUIContainer>。  請注意，這類<xref:System.Windows.UIElement>一律為一個符號; 任何其他內容或所包含的項目計入<xref:System.Windows.UIElement>不會被視為符號。  
  
-   16 位元[!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)]內的文字字元<xref:System.Windows.Documents.Run>項目。  
  
   
  
## Examples  
 下列範例會示範這個方法的用法。 此範例會使用<xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A>方法來尋找兩個的位移<xref:System.Windows.Documents.TextPointer>執行個體，並接著使用此資訊來儲存和還原中的選取範圍<xref:System.Windows.Controls.RichTextBox>。  此範例假設的內容<xref:System.Windows.Controls.RichTextBox>儲存選取項目和選取項目還原之間未變更。  
  
 [!code-csharp[TextPointer_Snippets#_TextPointer_GetOffsetToPosition](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_getoffsettoposition)]
 [!code-vb[TextPointer_Snippets#_TextPointer_GetOffsetToPosition](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_getoffsettoposition)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="position" /> 會指定文字容器外與目前位置相關的位置。</exception>
        <altmember cref="Overload:System.Windows.Documents.TextPointer.GetPositionAtOffset" />
        <altmember cref="M:System.Windows.Documents.TextPointer.IsInSameDocument(System.Windows.Documents.TextPointer)" />
      </Docs>
    </Member>
    <Member MemberName="GetPointerContext">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointerContext GetPointerContext (System.Windows.Documents.LogicalDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Documents.TextPointerContext GetPointerContext(valuetype System.Windows.Documents.LogicalDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetPointerContext(System.Windows.Documents.LogicalDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPointerContext (direction As LogicalDirection) As TextPointerContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Documents::TextPointerContext GetPointerContext(System::Windows::Documents::LogicalDirection direction);" />
      <MemberSignature Language="F#" Value="member this.GetPointerContext : System.Windows.Documents.LogicalDirection -&gt; System.Windows.Documents.TextPointerContext" Usage="textPointer.GetPointerContext direction" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Documents.ITextPointer.GetPointerContext(System.Windows.Documents.LogicalDirection)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointerContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Documents.LogicalDirection" />
      </Parameters>
      <Docs>
        <param name="direction">其中一個 <see cref="T:System.Windows.Documents.LogicalDirection" /> 值，這個值會指定將在哪一個邏輯方向中判斷相鄰內容的分類。</param>
        <summary>針對在指定的邏輯方向中與目前 <see cref="T:System.Windows.Documents.TextPointer" /> 相鄰的內容，傳回分類指示器。</summary>
        <returns>其中一個 <see cref="T:System.Windows.Documents.TextPointerContext" /> 值，這個值會指出在指定的邏輯方向中相鄰內容的分類。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例會示範這個方法的用法。 此範例會使用<xref:System.Windows.Documents.TextPointer.GetPointerContext%2A>方法，以實作計算餘額的開頭和結尾元素標籤之間兩個指定的演算法<xref:System.Windows.Documents.TextPointer>位置。  每個開頭項目標記都會計為 + 1，而每一個結尾項目標記會計算為-1。  
  
 [!code-csharp[TextPointer_Snippets#_TextPointer_GetOffsetToPosition2](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_getoffsettoposition2)]
 [!code-vb[TextPointer_Snippets#_TextPointer_GetOffsetToPosition2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_getoffsettoposition2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetPositionAtOffset">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將 <see cref="T:System.Windows.Documents.TextPointer" /> 傳回至指定的位移 (以符號表示) 所指出的位置 (從內容的開頭算起)。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetPositionAtOffset">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer GetPositionAtOffset (int offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Documents.TextPointer GetPositionAtOffset(int32 offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPositionAtOffset (offset As Integer) As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Documents::TextPointer ^ GetPositionAtOffset(int offset);" />
      <MemberSignature Language="F#" Value="member this.GetPositionAtOffset : int -&gt; System.Windows.Documents.TextPointer" Usage="textPointer.GetPositionAtOffset offset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="offset">以符號表示的位移，用於計算並傳回位置。  如果位移是負數，則會在 <see cref="P:System.Windows.Documents.TextPointer.LogicalDirection" /> 屬性指出的相反邏輯方向中計算位置。</param>
        <summary>將 <see cref="T:System.Windows.Documents.TextPointer" /> 傳回至指定的位移 (以符號表示) 所指出的位置 (從目前 <see cref="T:System.Windows.Documents.TextPointer" />.的開頭算起)。</summary>
        <returns>指定的位移所指出之位置的 <see cref="T:System.Windows.Documents.TextPointer" />，如果找不到對應位置，則為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下列其中一項會被視為符號：  
  
-   開頭或結尾標記<xref:System.Windows.Documents.TextElement>項目。  
  
-   A<xref:System.Windows.UIElement>中所包含的項目<xref:System.Windows.Documents.InlineUIContainer>或<xref:System.Windows.Documents.BlockUIContainer>。  請注意，這類<xref:System.Windows.UIElement>一律為一個符號; 任何其他內容或所包含的項目計入<xref:System.Windows.UIElement>不會被視為符號。  
  
-   16 位元[!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)]內的文字字元<xref:System.Windows.Documents.Run>項目。  
  
   
  
## Examples  
 下列範例會示範這個方法的用法。 此範例會使用<xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A>方法，以實作一組方法，一個用來計算相對於任何裝載的段落，而另一個則傳回的指定位置的位移<xref:System.Windows.Documents.TextPointer>指定段落中指定的位移。  
  
 [!code-csharp[TextPointer_Snippets#_TextPointer_GetPositionAtOffset](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_getpositionatoffset)]
 [!code-vb[TextPointer_Snippets#_TextPointer_GetPositionAtOffset](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_getpositionatoffset)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Documents.TextPointer.GetOffsetToPosition(System.Windows.Documents.TextPointer)" />
      </Docs>
    </Member>
    <Member MemberName="GetPositionAtOffset">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer GetPositionAtOffset (int offset, System.Windows.Documents.LogicalDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Documents.TextPointer GetPositionAtOffset(int32 offset, valuetype System.Windows.Documents.LogicalDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32,System.Windows.Documents.LogicalDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPositionAtOffset (offset As Integer, direction As LogicalDirection) As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Documents::TextPointer ^ GetPositionAtOffset(int offset, System::Windows::Documents::LogicalDirection direction);" />
      <MemberSignature Language="F#" Value="member this.GetPositionAtOffset : int * System.Windows.Documents.LogicalDirection -&gt; System.Windows.Documents.TextPointer" Usage="textPointer.GetPositionAtOffset (offset, direction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="direction" Type="System.Windows.Documents.LogicalDirection" />
      </Parameters>
      <Docs>
        <param name="offset">以符號表示的位移，用於計算並傳回位置。  如果位移是負數，則傳回的 <see cref="T:System.Windows.Documents.TextPointer" /> 在目前 <see cref="T:System.Windows.Documents.TextPointer" /> 的前面，否則在後面。</param>
        <param name="direction">其中一個 <see cref="T:System.Windows.Documents.LogicalDirection" /> 值，這個值會指定傳回的 <see cref="T:System.Windows.Documents.TextPointer" /> 的邏輯方向。</param>
        <summary>將 <see cref="T:System.Windows.Documents.TextPointer" /> 傳回至指定的位移 (以符號表示) 所指出的位置 (依指定的方向從目前 <see cref="T:System.Windows.Documents.TextPointer" /> 的開頭算起)。</summary>
        <returns>指定的位移所指出之位置的 <see cref="T:System.Windows.Documents.TextPointer" />，如果位移展開後超過內容結尾，則為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下列其中一項會被視為符號：  
  
-   開頭或結尾標記<xref:System.Windows.Documents.TextElement>項目。  
  
-   A<xref:System.Windows.UIElement>中所包含的項目<xref:System.Windows.Documents.InlineUIContainer>或<xref:System.Windows.Documents.BlockUIContainer>。  請注意，這類<xref:System.Windows.UIElement>一律為一個符號; 任何其他內容或所包含的項目計入<xref:System.Windows.UIElement>不會被視為符號。  
  
-   16 位元[!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)]內的文字字元<xref:System.Windows.Documents.Run>項目。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Documents.TextPointer.GetOffsetToPosition(System.Windows.Documents.TextPointer)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetTextInRun">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>傳回與目前 <see cref="T:System.Windows.Documents.TextPointer" /> 相鄰的文字。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetTextInRun">
      <MemberSignature Language="C#" Value="public string GetTextInRun (System.Windows.Documents.LogicalDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetTextInRun(valuetype System.Windows.Documents.LogicalDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTextInRun (direction As LogicalDirection) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetTextInRun(System::Windows::Documents::LogicalDirection direction);" />
      <MemberSignature Language="F#" Value="member this.GetTextInRun : System.Windows.Documents.LogicalDirection -&gt; string" Usage="textPointer.GetTextInRun direction" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Documents.ITextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Documents.LogicalDirection" />
      </Parameters>
      <Docs>
        <param name="direction">其中一個 <see cref="T:System.Windows.Documents.LogicalDirection" /> 值，這個值會指定將在哪一個邏輯方向尋找並傳回任何相鄰文字。</param>
        <summary>傳回一個字串，其中包含與指定之邏輯方向中目前 <see cref="T:System.Windows.Documents.TextPointer" /> 相鄰的任何文字。</summary>
        <returns>包含指定之邏輯方向中任何相鄰文字的字串，或為 <see cref="F:System.String.Empty" /> (如果找不到相鄰文字的話)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會傳回文字才不會中斷的執行。  如果任何符號類型，而不傳回的任何項目<xref:System.Windows.Documents.TextPointerContext.Text>旁目前<xref:System.Windows.Documents.TextPointer>中指定的方向。  同樣地，文字只會傳回至下一個非文字符號。  
  
   
  
## Examples  
 下列範例會示範這個方法的用法。 此範例會使用<xref:System.Windows.Documents.TextPointer.GetTextInRun%2A>方法，以實作簡單的文字擷取程式 」。  方法會傳回介於兩個指定的所有文字的字串串連<xref:System.Windows.Documents.TextPointer>執行個體。  
  
 雖然您可以使用此範例，來擷取兩個之間的任何文字<xref:System.Windows.Documents.TextPointer>執行個體，它是僅供說明，因此不應用於實際執行程式碼。  請改用 <xref:System.Windows.Documents.TextRange.Text%2A?displayProperty=nameWithType> 屬性。  
  
 [!code-csharp[TextPointer_Snippets#_TextPointer_GetTextInRun](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_gettextinrun)]
 [!code-vb[TextPointer_Snippets#_TextPointer_GetTextInRun](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_gettextinrun)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Documents.TextPointer.DeleteTextInRun(System.Int32)" />
        <altmember cref="M:System.Windows.Documents.TextPointer.InsertTextInRun(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetTextInRun">
      <MemberSignature Language="C#" Value="public int GetTextInRun (System.Windows.Documents.LogicalDirection direction, char[] textBuffer, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTextInRun(valuetype System.Windows.Documents.LogicalDirection direction, char[] textBuffer, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTextInRun (direction As LogicalDirection, textBuffer As Char(), startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTextInRun(System::Windows::Documents::LogicalDirection direction, cli::array &lt;char&gt; ^ textBuffer, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.GetTextInRun : System.Windows.Documents.LogicalDirection * char[] * int * int -&gt; int" Usage="textPointer.GetTextInRun (direction, textBuffer, startIndex, count)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Documents.ITextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Documents.LogicalDirection" />
        <Parameter Name="textBuffer" Type="System.Char[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="direction">其中一個 <see cref="T:System.Windows.Documents.LogicalDirection" /> 值，這個值會指定將在哪一個邏輯方向尋找並複製任何相鄰文字。</param>
        <param name="textBuffer">任何文字都會複製到其中的緩衝區。</param>
        <param name="startIndex">開始寫入所複製文字的 <c>textBuffer</c> 索引。</param>
        <param name="count">要複製的最大字元數。</param>
        <summary>將指定的最大字元數從指定方向中的任何相鄰文字複製到呼叫者提供的字元陣列中。</summary>
        <returns>實際複製到 <paramref name="textBuffer" /> 中的字元數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會傳回文字才不會中斷的執行。  如果任何符號類型，而不傳回的任何項目<xref:System.Windows.Documents.TextPointerContext.Text>旁目前<xref:System.Windows.Documents.TextPointer>中指定的方向。  同樣地，文字只會傳回至下一個非文字符號。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="startIndex" /> 小於 0 或大於 <paramref name="textBuffer" /> 的 <see cref="P:System.Array.Length" /> 屬性。  
  
-或- 
 <paramref name="count" /> 小於 0 或大於 <paramref name="textBuffer" /> 中的剩餘空間 (<paramref name="textBuffer" />.<see cref="P:System.Array.Length" /> 减掉 <paramref name="startIndex" />)。</exception>
        <altmember cref="M:System.Windows.Documents.TextPointer.DeleteTextInRun(System.Int32)" />
        <altmember cref="M:System.Windows.Documents.TextPointer.InsertTextInRun(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetTextRunLength">
      <MemberSignature Language="C#" Value="public int GetTextRunLength (System.Windows.Documents.LogicalDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTextRunLength(valuetype System.Windows.Documents.LogicalDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetTextRunLength(System.Windows.Documents.LogicalDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTextRunLength (direction As LogicalDirection) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTextRunLength(System::Windows::Documents::LogicalDirection direction);" />
      <MemberSignature Language="F#" Value="member this.GetTextRunLength : System.Windows.Documents.LogicalDirection -&gt; int" Usage="textPointer.GetTextRunLength direction" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Documents.ITextPointer.GetTextRunLength(System.Windows.Documents.LogicalDirection)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Documents.LogicalDirection" />
      </Parameters>
      <Docs>
        <param name="direction">其中一個 <see cref="T:System.Windows.Documents.LogicalDirection" /> 值，這個值會指定將在哪一個邏輯方向計算字元數目。</param>
        <summary>依指定的邏輯方向，傳回介於目前 <see cref="T:System.Windows.Documents.TextPointer" /> 與下一個非文字符號之間的 Unicode 字元數。</summary>
        <returns>目前 <see cref="T:System.Windows.Documents.TextPointer" /> 與下一個非文字符號之間的 Unicode 字元數。  如果沒有相鄰文字，則這個數目可能為 0。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下列其中一項會被視為符號：  
  
-   開頭或結尾標記<xref:System.Windows.Documents.TextElement>項目。  
  
-   A<xref:System.Windows.UIElement>中所包含的項目<xref:System.Windows.Documents.InlineUIContainer>或<xref:System.Windows.Documents.BlockUIContainer>。  請注意，這類<xref:System.Windows.UIElement>一律為一個符號; 任何其他內容或所包含的項目計入<xref:System.Windows.UIElement>不會被視為符號。  
  
-   16 位元[!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)]內的文字字元<xref:System.Windows.Documents.Run>項目。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasValidLayout">
      <MemberSignature Language="C#" Value="public bool HasValidLayout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasValidLayout" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextPointer.HasValidLayout" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasValidLayout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasValidLayout { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasValidLayout : bool" Usage="System.Windows.Documents.TextPointer.HasValidLayout" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Documents.ITextPointer.HasValidLayout</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，這個值表示與目前位置相關的文字容器是否具備有效的 (最新) 配置。</summary>
        <value>如果配置最新而且有效則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如有必要，作業取決於有效的配置 (例如<xref:System.Windows.Documents.TextPointer.GetLineStartPosition%2A>方法中，<xref:System.Windows.Documents.TextPointer.GetCharacterRect%2A>方法，和<xref:System.Windows.Documents.TextPointer.IsAtLineStartPosition%2A>屬性) 嘗試自動重新產生有效的配置，再繼續作業。  重新產生配置可以是相當耗成本的作業。  您可以使用這個屬性來執行作業，可能會重新產生配置之前，請先檢查有效的配置。  如需詳細資訊，請參閱[配置](~/docs/framework/wpf/advanced/layout.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertLineBreak">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer InsertLineBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Documents.TextPointer InsertLineBreak() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.InsertLineBreak" />
      <MemberSignature Language="VB.NET" Value="Public Function InsertLineBreak () As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Documents::TextPointer ^ InsertLineBreak();" />
      <MemberSignature Language="F#" Value="member this.InsertLineBreak : unit -&gt; System.Windows.Documents.TextPointer" Usage="textPointer.InsertLineBreak " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在目前位置插入分行符號。</summary>
        <returns>
          <see cref="T:System.Windows.Documents.TextPointer" />，緊接在這個方法所插入的 <see cref="T:System.Windows.Documents.LineBreak" /> 項目後面。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertParagraphBreak">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer InsertParagraphBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Documents.TextPointer InsertParagraphBreak() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.InsertParagraphBreak" />
      <MemberSignature Language="VB.NET" Value="Public Function InsertParagraphBreak () As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Documents::TextPointer ^ InsertParagraphBreak();" />
      <MemberSignature Language="F#" Value="member this.InsertParagraphBreak : unit -&gt; System.Windows.Documents.TextPointer" Usage="textPointer.InsertParagraphBreak " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在目前位置插入分段符號。</summary>
        <returns>新段落開頭 (<see cref="T:System.Windows.Documents.TextPointer" />) 的 <see cref="P:System.Windows.Documents.TextElement.ContentStart" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果目前的位置內的現有時，會呼叫這個方法<xref:System.Windows.Documents.Paragraph>項目、 現有的段落和它所包含的任何內容分成兩個段落的目前位置。  如果目前的位置不在現有的段落內時，會呼叫這個方法，則會插入新的空白段落。  如果呼叫這個方法的位置不適用於分割，或插入段落 (例如，如果目前的位置是在<xref:System.Windows.Documents.Hyperlink>項目)，會擲回例外狀況。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">這個方法是在無法分割以容納新段落的位置上呼叫，如同在 <see cref="T:System.Windows.Documents.Hyperlink" /> 或 <see cref="T:System.Windows.Documents.InlineUIContainer" /> 的範圍中。</exception>
      </Docs>
    </Member>
    <Member MemberName="InsertTextInRun">
      <MemberSignature Language="C#" Value="public void InsertTextInRun (string textData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertTextInRun(string textData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.InsertTextInRun(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertTextInRun (textData As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertTextInRun(System::String ^ textData);" />
      <MemberSignature Language="F#" Value="member this.InsertTextInRun : string -&gt; unit" Usage="textPointer.InsertTextInRun textData" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Documents.ITextPointer.InsertTextInRun(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textData" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textData">要插入的文字。</param>
        <summary>在目前位置將指定的文字插入文字 <see cref="T:System.Windows.Documents.Run" /> 中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Windows.Documents.TextPointer>範圍不是由<xref:System.Windows.Documents.Run>項目<xref:System.Windows.Documents.Run>插入連同`textData`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">目前位置不在 <see cref="T:System.Windows.Documents.Run" /> 項目內。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="textData" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsAtInsertionPosition">
      <MemberSignature Language="C#" Value="public bool IsAtInsertionPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAtInsertionPosition" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextPointer.IsAtInsertionPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAtInsertionPosition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAtInsertionPosition { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAtInsertionPosition : bool" Usage="System.Windows.Documents.TextPointer.IsAtInsertionPosition" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Documents.ITextPointer.IsAtInsertionPosition</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，這個值表示目前位置是否為插入位置。</summary>
        <value>如果目前位置為插入位置則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 插入位置是其中可能會加入新的內容而不會中斷任何語意規則相關聯的內容位置。  在實務上，插入位置是可能放置插入點的內容中。  有效的範例<xref:System.Windows.Documents.TextPointer>不是插入位置的位置是相鄰的兩個位置<xref:System.Windows.Documents.Paragraph>標籤 (也就是上一段的結尾標記和下一個段落的開頭標記之間)。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)" />
        <altmember cref="M:System.Windows.Documents.TextPointer.GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)" />
      </Docs>
    </Member>
    <Member MemberName="IsAtLineStartPosition">
      <MemberSignature Language="C#" Value="public bool IsAtLineStartPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAtLineStartPosition" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextPointer.IsAtLineStartPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAtLineStartPosition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAtLineStartPosition { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAtLineStartPosition : bool" Usage="System.Windows.Documents.TextPointer.IsAtLineStartPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，這個值表示目前位置是否位於字行開頭。</summary>
        <value>如果目前位置位於字行開頭則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Windows.Documents.TextPointer>指向的模稜兩可的位置，比方說，兩個線條之間的行中所指定的方向<xref:System.Windows.Documents.TextPointer.LogicalDirection%2A>屬性當做相對的開始行。  
  
 這個屬性所執行的作業取決於有效的配置。  如有必要，這個方法會嘗試自動重新產生有效的配置，再繼續作業。  重新產生配置可以是相當耗成本的作業。  使用<xref:System.Windows.Documents.TextPointer.HasValidLayout%2A>屬性來執行作業，可能會重新產生配置之前檢查有效的配置。  如需詳細資訊，請參閱[配置](~/docs/framework/wpf/advanced/layout.md)。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.TextPointer.IsAtLineStartPosition" />
      </Docs>
    </Member>
    <Member MemberName="IsInSameDocument">
      <MemberSignature Language="C#" Value="public bool IsInSameDocument (System.Windows.Documents.TextPointer textPosition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsInSameDocument(class System.Windows.Documents.TextPointer textPosition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.IsInSameDocument(System.Windows.Documents.TextPointer)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsInSameDocument (textPosition As TextPointer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsInSameDocument(System::Windows::Documents::TextPointer ^ textPosition);" />
      <MemberSignature Language="F#" Value="member this.IsInSameDocument : System.Windows.Documents.TextPointer -&gt; bool" Usage="textPointer.IsInSameDocument textPosition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textPosition" Type="System.Windows.Documents.TextPointer" />
      </Parameters>
      <Docs>
        <param name="textPosition">
          <see cref="T:System.Windows.Documents.TextPointer" />，指定要與目前位置進行比較的位置。</param>
        <summary>表示指定的位置是否與目前位置位於相同的文字容器中。</summary>
        <returns>如果 <paramref name="textPosition" /> 指出與目前位置位於相同文字容器的位置則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 大部分的作業牽涉到多個<xref:System.Windows.Documents.TextPointer>執行個體才有效，如果有問題的執行個體表示相同的文字容器範圍中的位置。  比方說<xref:System.Windows.Documents.TextPointer.CompareTo%2A>並<xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A>方法無法搭配<xref:System.Windows.Documents.TextPointer>到目前的位置與相關聯的文字容器外的位置。  使用這個方法來驗證指定<xref:System.Windows.Documents.TextPointer>適用於這類作業的目前位置。  
  
   
  
## Examples  
 下列範例會示範這個方法的用法。  此範例會使用<xref:System.Windows.Documents.TextPointer.IsInSameDocument%2A>方法來檢查指定<xref:System.Windows.Documents.TextPointer>位於兩個其他指定<xref:System.Windows.Documents.TextPointer>中所有的三個位置都屬於相同的文字容器不保證的情況下的執行個體。  
  
 [!code-csharp[TextPointer_Snippets#_TextPointer_IsInSameDocument](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_isinsamedocument)]
 [!code-vb[TextPointer_Snippets#_TextPointer_IsInSameDocument](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_isinsamedocument)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="textPosition" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="LogicalDirection">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.LogicalDirection LogicalDirection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Documents.LogicalDirection LogicalDirection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextPointer.LogicalDirection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LogicalDirection As LogicalDirection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Documents::LogicalDirection LogicalDirection { System::Windows::Documents::LogicalDirection get(); };" />
      <MemberSignature Language="F#" Value="member this.LogicalDirection : System.Windows.Documents.LogicalDirection" Usage="System.Windows.Documents.TextPointer.LogicalDirection" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Documents.ITextPointer.LogicalDirection</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.LogicalDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得與目前位置相關的邏輯方向，這個邏輯方向用來釐清與目前位置相關的內容。</summary>
        <value>與目前位置相關的 <see cref="T:System.Windows.Documents.LogicalDirection" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 為了舉例說明如何使用這個屬性，<xref:System.Windows.Documents.LogicalDirection>的<xref:System.Windows.Documents.TextPointer>傳回點擊測試方法會提供兩個字元的文字之間叫用。 邏輯方向指定這兩個字元的實際點擊 — 左邊或右邊。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Paragraph">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.Paragraph Paragraph { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Documents.Paragraph Paragraph" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextPointer.Paragraph" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Paragraph As Paragraph" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Documents::Paragraph ^ Paragraph { System::Windows::Documents::Paragraph ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Paragraph : System.Windows.Documents.Paragraph" Usage="System.Windows.Documents.TextPointer.Paragraph" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.Paragraph</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得涵蓋目前位置的段落 (如果有的話)。</summary>
        <value>
          <see cref="T:System.Windows.Documents.Paragraph" />涵蓋目前位置，或<see langword="null" />如果沒有這類段落存在。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Documents.TextPointer.Parent" />
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObject Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyObject Parent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextPointer.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyObject ^ Parent { System::Windows::DependencyObject ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Windows.DependencyObject" Usage="System.Windows.Documents.TextPointer.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得涵蓋目前位置的邏輯父代。</summary>
        <value>涵蓋目前位置的邏輯父代。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Documents.TextPointer.Paragraph" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="textPointer.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>這個類型或成員支援 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 基礎結構，而且不能從程式碼直接使用。</summary>
        <returns>表示物件的字串。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>