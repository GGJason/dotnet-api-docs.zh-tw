<Type Name="TextRange" FullName="System.Windows.Documents.TextRange">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fb8c911bcd50ae7df0bc24cc8b65e1bdb494e3e5" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30629972" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TextRange" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TextRange extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Documents.TextRange" />
  <TypeSignature Language="VB.NET" Value="Public Class TextRange" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextRange" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示兩個 <see cref="T:System.Windows.Documents.TextPointer" /> 位置之間的內容選取範圍。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Documents.TextRange>類別引進了下列詞彙。  
  
-   **選取項目**-<xref:System.Windows.Documents.TextRange>內容所指定的兩個位置之間的範圍**Textpointer**。  下列其中一種定位選取項目，對於固定錨點，而另一個位置是可移動。  這是類似的選擇會由使用者使用滑鼠或鍵盤的運作方式。  
  
-   **目前選取範圍**-因為<xref:System.Windows.Documents.TextRange>一律表示選取範圍的內容，在合理的只是加入所指定的選取範圍，請參閱<xref:System.Windows.Documents.TextRange>為*目前選取範圍*。  
  
-   **文字容器**-*文字容器*form 於非固定格式內容的最終框線的項目，則為所指定的選取項目<xref:System.Windows.Documents.TextRange>永遠落在的文字容器內。  目前，文字容器都必須在<xref:System.Windows.Documents.FlowDocument>或<xref:System.Windows.Controls.TextBlock>。  
  
-   **文件**-共同文字容器內所包含的內容指*文件*。  
  
 是否有其他的詳細資訊相關的類似*位置*，請參閱<xref:System.Windows.Documents.TextPointer>。  
  
   
  
## Examples  
 下列範例示範如何使用<xref:System.Windows.Documents.TextRange.Text%2A>屬性<xref:System.Windows.Documents.TextRange>傳回指定的純文字表示法<xref:System.Windows.Documents.FlowDocument>。  
  
 [!code-csharp[TextPointer_Snippets#_TextRange_Text](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textrange_text)]
 [!code-vb[TextPointer_Snippets#_TextRange_Text](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textrange_text)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Documents.TextPointerContext" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextRange (System.Windows.Documents.TextPointer position1, System.Windows.Documents.TextPointer position2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Documents.TextPointer position1, class System.Windows.Documents.TextPointer position2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextRange.#ctor(System.Windows.Documents.TextPointer,System.Windows.Documents.TextPointer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (position1 As TextPointer, position2 As TextPointer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextRange(System::Windows::Documents::TextPointer ^ position1, System::Windows::Documents::TextPointer ^ position2);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="position1" Type="System.Windows.Documents.TextPointer" />
        <Parameter Name="position2" Type="System.Windows.Documents.TextPointer" />
      </Parameters>
      <Docs>
        <param name="position1">標示選取範圍一端的固定錨定位置，用來形成新的 <see cref="T:System.Windows.Documents.TextRange" />。</param>
        <param name="position2">標示選取範圍另一端的可移動位置，用來形成新的 <see cref="T:System.Windows.Documents.TextRange" />。</param>
        <summary>取兩個指定的 <see cref="T:System.Windows.Documents.TextRange" /> 位置做為新範圍的開始和結束位置，初始化 <see cref="T:System.Windows.Documents.TextPointer" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Windows.Documents.TextRange>形成的選取項目所指定的兩個位置之間**Textpointer**。  這些位置其中 (由`position1`) 與選取項目，而另一個位置相對固定 (由`position2`) 是可移動。  這是類似的選擇會由使用者使用滑鼠或鍵盤的運作方式。  
  
 新的實際兩端<xref:System.Windows.Documents.TextRange>可加以調整，以符合任何適用於包含新的文件的選取項目啟發學習法<xref:System.Windows.Documents.TextRange>。  
  
   
  
## Examples  
 下列範例示範如何使用<xref:System.Windows.Documents.TextRange>建構函式。  
  
 [!code-csharp[TextPointer_Snippets#_TextRange_Text](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textrange_text)]
 [!code-vb[TextPointer_Snippets#_TextRange_Text](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textrange_text)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">當 <paramref name="position1" /> 和 <paramref name="position2" /> 不是位於同一份文件內時發生。</exception>
        <exception cref="T:System.ArgumentNullException">當 <paramref name="position1" /> 或 <paramref name="position2" /> 為 <see langword="null" /> 時發生。</exception>
      </Docs>
    </Member>
    <Member MemberName="ApplyPropertyValue">
      <MemberSignature Language="C#" Value="public void ApplyPropertyValue (System.Windows.DependencyProperty formattingProperty, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ApplyPropertyValue(class System.Windows.DependencyProperty formattingProperty, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextRange.ApplyPropertyValue(System.Windows.DependencyProperty,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyPropertyValue (formattingProperty As DependencyProperty, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyPropertyValue(System::Windows::DependencyProperty ^ formattingProperty, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formattingProperty" Type="System.Windows.DependencyProperty" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="formattingProperty">要套用的格式化屬性。</param>
        <param name="value">格式化屬性的值。</param>
        <summary>將指定的格式化屬性和值套用至目前選取範圍。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法適用於插入適當格式化<xref:System.Windows.Documents.Inline>項目，例如<xref:System.Windows.Documents.Bold>和<xref:System.Windows.Documents.Italic>，由這個選取範圍到<xref:System.Windows.Documents.TextRange>。  
  
   
  
## Examples  
 下列範例示範 <xref:System.Windows.Documents.TextRange.ApplyPropertyValue%2A> 方法的用法。  
  
 [!code-csharp[TextPointer_Snippets#_TextRange_LoadSave](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textrange_loadsave)]
 [!code-vb[TextPointer_Snippets#_TextRange_LoadSave](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textrange_loadsave)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">當 <paramref name="formattingProperty" /> 沒有指定有效的格式化屬性或當 <paramref name="value" /> 對 <paramref name="formattingProperty" /> 指定無效的值時發生。</exception>
        <exception cref="T:System.ArgumentNullException">於 <paramref name="formattingProperty" /> 為 <see langword="null" /> 時發生。</exception>
        <altmember cref="M:System.Windows.Documents.TextRange.ClearAllProperties" />
        <altmember cref="M:System.Windows.Documents.TextRange.GetPropertyValue(System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="CanLoad">
      <MemberSignature Language="C#" Value="public bool CanLoad (string dataFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanLoad(string dataFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextRange.CanLoad(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanLoad (dataFormat As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanLoad(System::String ^ dataFormat);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataFormat" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataFormat">要檢查能相容載入目前選取範圍的資料格式。  如需預先定義的資料格式清單，請參閱 <see cref="T:System.Windows.DataFormats" />。</param>
        <summary>檢查是否可以用指定之資料格式的內容載入目前選取範圍。</summary>
        <returns>
          如果可以用指定之資料格式的內容載入目前選取範圍，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用對應<xref:System.Windows.Documents.TextRange.Load%2A>方法實際上將內容載入目前的選取範圍中指定的資料格式。  
  
   
  
## Examples  
 下列範例示範 <xref:System.Windows.Documents.TextRange.CanLoad%2A> 方法的用法。  
  
 [!code-csharp[TextPointer_Snippets#_TextRange_LoadSave](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textrange_loadsave)]
 [!code-vb[TextPointer_Snippets#_TextRange_LoadSave](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textrange_loadsave)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Documents.TextRange.CanSave(System.String)" />
        <altmember cref="M:System.Windows.Documents.TextRange.Save(System.IO.Stream,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CanSave">
      <MemberSignature Language="C#" Value="public bool CanSave (string dataFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanSave(string dataFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextRange.CanSave(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanSave (dataFormat As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanSave(System::String ^ dataFormat);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Documents.ITextRange.CanSave(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataFormat" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataFormat">要檢查能相容儲存目前選取範圍的資料格式。  如需預先定義的資料格式清單，請參閱 <see cref="T:System.Windows.DataFormats" />。</param>
        <summary>檢查目前選取範圍是否可以另存為指定的資料格式。</summary>
        <returns>
          如果目前選取範圍可以另存為指定的資料格式，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用對應<xref:System.Windows.Documents.TextRange.Save%2A>方法，以指定的資料格式實際儲存目前的選取範圍。  
  
   
  
## Examples  
 下列範例示範 <xref:System.Windows.Documents.TextRange.CanSave%2A> 方法的用法。  
  
 [!code-csharp[TextPointer_Snippets#_TextRange_LoadSave](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textrange_loadsave)]
 [!code-vb[TextPointer_Snippets#_TextRange_LoadSave](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textrange_loadsave)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Documents.TextRange.CanLoad(System.String)" />
        <altmember cref="M:System.Windows.Documents.TextRange.Load(System.IO.Stream,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Changed">
      <MemberSignature Language="C#" Value="public event EventHandler Changed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Changed" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Documents.TextRange.Changed" />
      <MemberSignature Language="VB.NET" Value="Public Event Changed As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Changed;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.Documents.ITextRange.Changed</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>重新置放範圍以涵蓋新的內容範圍時發生。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearAllProperties">
      <MemberSignature Language="C#" Value="public void ClearAllProperties ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearAllProperties() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextRange.ClearAllProperties" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearAllProperties ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearAllProperties();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>從目前選取範圍移除所有格式化屬性 (由 <see cref="T:System.Windows.Documents.Inline" /> 項目表示)。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法只會影響任何<xref:System.Windows.Documents.Inline>格式化項目，例如<xref:System.Windows.Documents.Bold>或<xref:System.Windows.Documents.Italic>。 設定段落和其他封入屬性<xref:System.Windows.Documents.Block>項目不會變更。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Documents.TextRange.ApplyPropertyValue(System.Windows.DependencyProperty,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Windows.Documents.TextPointer textPointer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Windows.Documents.TextPointer textPointer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextRange.Contains(System.Windows.Documents.TextPointer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::Windows::Documents::TextPointer ^ textPointer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textPointer" Type="System.Windows.Documents.TextPointer" />
      </Parameters>
      <Docs>
        <param name="textPointer">要測試是否包含在目前選取範圍內的位置。</param>
        <summary>檢查某個位置 (由 <see cref="T:System.Windows.Documents.TextPointer" /> 指定) 是否位於目前選取範圍內。</summary>
        <returns>
          如果指定的位置位於目前選取範圍內，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在目前選取的任一端的位置 (由<xref:System.Windows.Documents.TextRange.Start%2A>和<xref:System.Windows.Documents.TextRange.End%2A>) 視為目前的選取範圍的一部分。  
  
   
  
## Examples  
 下列範例示範 <xref:System.Windows.Documents.TextRange.Contains%2A> 方法的用法。  
  
 [!code-csharp[TextPointer_Snippets#_TextRange_StartEnd](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textrange_startend)]
 [!code-vb[TextPointer_Snippets#_TextRange_StartEnd](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textrange_startend)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">當 *textPointer* 不在與目前選取範圍相同的文件時就會發生。</exception>
      </Docs>
    </Member>
    <Member MemberName="End">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer End { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Documents.TextPointer End" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextRange.End" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property End As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Documents::TextPointer ^ End { System::Windows::Documents::TextPointer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得標示選取範圍結尾的位置。</summary>
        <value>指向目前選取範圍結尾 <see cref="T:System.Windows.Documents.TextPointer" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例示範如何使用<xref:System.Windows.Documents.TextRange.End%2A>屬性。  
  
 [!code-csharp[TextPointer_Snippets#_TextRange_StartEnd](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textrange_startend)]
 [!code-vb[TextPointer_Snippets#_TextRange_StartEnd](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textrange_startend)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.TextRange.Start" />
      </Docs>
    </Member>
    <Member MemberName="GetPropertyValue">
      <MemberSignature Language="C#" Value="public object GetPropertyValue (System.Windows.DependencyProperty formattingProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetPropertyValue(class System.Windows.DependencyProperty formattingProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextRange.GetPropertyValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPropertyValue (formattingProperty As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetPropertyValue(System::Windows::DependencyProperty ^ formattingProperty);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Documents.ITextRange.GetPropertyValue(System.Windows.DependencyProperty)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formattingProperty" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="formattingProperty">用來依據目前選取範圍取得值的格式化屬性。</param>
        <summary>傳回目前選取範圍上之指定格式化屬性的有效值。</summary>
        <returns>物件，指定指定之格式化屬性的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要傳回屬性值，將整個<xref:System.Windows.Documents.TextRange>必須只有一個值的文字上擴充`formattingProperty`。 如果<xref:System.Windows.Documents.TextRange>可延伸到包含兩個或多個不同的值的文字`formattingProperty`，<xref:System.Windows.DependencyProperty.UnsetValue>傳回。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">當 <paramref name="formattingProperty" /> 沒有指定有效的格式化屬性或當 <paramref name="value" /> 對 <paramref name="formattingProperty" /> 指定無效的值時發生。</exception>
        <exception cref="T:System.ArgumentNullException">於 <paramref name="formattingProperty" /> 為 <see langword="null" /> 時發生。</exception>
        <altmember cref="M:System.Windows.Documents.TextRange.ClearAllProperties" />
        <altmember cref="M:System.Windows.Documents.TextRange.ApplyPropertyValue(System.Windows.DependencyProperty,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextRange.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Documents.ITextRange.IsEmpty</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，這個值表示目前選取範圍是否是空的。</summary>
        <value>
          如果目前選取範圍是空的，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Windows.Documents.TextRange>如果被視為空白<xref:System.Windows.Documents.TextRange.Start%2A>和<xref:System.Windows.Documents.TextRange.End%2A>位置是否相等。  
  
   
  
## Examples  
 下列範例示範如何使用<xref:System.Windows.Documents.TextRange.IsEmpty%2A>屬性。  
  
 [!code-csharp[TextPointer_Snippets#_TextRange_LoadSave](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textrange_loadsave)]
 [!code-vb[TextPointer_Snippets#_TextRange_LoadSave](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textrange_loadsave)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.IO.Stream stream, string dataFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.IO.Stream stream, string dataFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextRange.Load(System.IO.Stream,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::IO::Stream ^ stream, System::String ^ dataFormat);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="dataFormat" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stream">包含要載入目前選取範圍之資料的可讀取資料流。</param>
        <param name="dataFormat">載入資料時要採用的資料格式。  目前支援的資料格式有 <see cref="F:System.Windows.DataFormats.Rtf" />、<see cref="F:System.Windows.DataFormats.Text" />、<see cref="F:System.Windows.DataFormats.Xaml" /> 和 <see cref="F:System.Windows.DataFormats.XamlPackage" />。</param>
        <summary>從指定的資料流載入指定之資料格式的目前選取範圍。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.IO.Stream.CanSeek%2A>是`true`如`stream`，內容會從資料流的開始載入以資料流結尾。  否則，會從目前讀取內容<xref:System.IO.Stream.Position%2A>資料流的結尾。  此方法傳回時，`stream`開啟、 及中目前的位置將處於`stream`是未定義。  
  
 載入作業會以新載入的內容取代目前選取範圍。  
  
   
  
## Examples  
 下列範例示範 <xref:System.Windows.Documents.TextRange.Load%2A> 方法的用法。  
  
 [!code-csharp[TextPointer_Snippets#_TextRange_LoadSave](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textrange_loadsave)]
 [!code-vb[TextPointer_Snippets#_TextRange_LoadSave](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textrange_loadsave)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">當 <paramref name="stream" /> 或 <paramref name="dataFormat" /> 為 <see langword="null" /> 時發生。</exception>
        <exception cref="T:System.ArgumentException">當指定的資料格式不受支援時發生。  如果從 <paramref name="stream" /> 載入的內容與指定的資料格式不符也會發生。</exception>
        <altmember cref="M:System.Windows.Documents.TextRange.CanLoad(System.String)" />
        <altmember cref="M:System.Windows.Documents.TextRange.Save(System.IO.Stream,System.String)" />
        <altmember cref="M:System.Windows.Documents.TextRange.CanSave(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Save">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將目前選取範圍以指定的資料格式儲存至指定的資料流。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.IO.Stream stream, string dataFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.IO.Stream stream, string dataFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextRange.Save(System.IO.Stream,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::IO::Stream ^ stream, System::String ^ dataFormat);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Documents.ITextRange.Save(System.IO.Stream,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="dataFormat" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stream">要將目前選取範圍儲存到的空的、可寫入資料流。</param>
        <param name="dataFormat">儲存目前選取範圍時要使用的資料格式。  目前支援的資料格式有 <see cref="F:System.Windows.DataFormats.Rtf" />、<see cref="F:System.Windows.DataFormats.Text" />、<see cref="F:System.Windows.DataFormats.Xaml" /> 和 <see cref="F:System.Windows.DataFormats.XamlPackage" />。</param>
        <summary>將目前選取範圍以指定的資料格式儲存至指定的資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法傳回時，`stream`開啟、 及中目前的位置將處於`stream`是未定義。  
  
 一部分儲存作業，目前的選取範圍中的內容可能會轉換成指定的資料格式`dataFormat`。  
  
   
  
## Examples  
 下列範例示範 <xref:System.Windows.Documents.TextRange.Save%2A> 方法的用法。  
  
 [!code-csharp[TextPointer_Snippets#_TextRange_LoadSave](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textrange_loadsave)]
 [!code-vb[TextPointer_Snippets#_TextRange_LoadSave](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textrange_loadsave)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> 或 <paramref name="dataFormat" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">不支援指定的資料格式。  
  
 -或-  
  
 從 <paramref name="stream" /> 載入的內容與指定的資料格式不符。</exception>
        <altmember cref="M:System.Windows.Documents.TextRange.CanSave(System.String)" />
        <altmember cref="M:System.Windows.Documents.TextRange.Load(System.IO.Stream,System.String)" />
        <altmember cref="M:System.Windows.Documents.TextRange.CanLoad(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.IO.Stream stream, string dataFormat, bool preserveTextElements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.IO.Stream stream, string dataFormat, bool preserveTextElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextRange.Save(System.IO.Stream,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::IO::Stream ^ stream, System::String ^ dataFormat, bool preserveTextElements);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Documents.ITextRange.Save(System.IO.Stream,System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="dataFormat" Type="System.String" />
        <Parameter Name="preserveTextElements" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream">要將目前選取範圍儲存到的空的、可寫入資料流。</param>
        <param name="dataFormat">儲存目前選取範圍時要使用的資料格式。  目前支援的資料格式有 <see cref="F:System.Windows.DataFormats.Rtf" />、<see cref="F:System.Windows.DataFormats.Text" />、<see cref="F:System.Windows.DataFormats.Xaml" /> 和 <see cref="F:System.Windows.DataFormats.XamlPackage" />。</param>
        <param name="preserveTextElements">
          <see langword="true" /> 表示保留自訂 <see cref="T:System.Windows.Documents.TextElement" /> 物件，否則為 <see langword="false" />。</param>
        <summary>使用保留自訂 <see cref="T:System.Windows.Documents.TextElement" /> 物件的選項，將目前選取範圍以指定的資料格式儲存至指定的資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當`preserveTextElements`是`false`自訂<xref:System.Windows.Documents.TextElement>物件會儲存為已知<xref:System.Windows.Documents.TextElement>型別。  例如，假設您建立自訂<xref:System.Windows.Documents.TextElement>呼叫`Heading1`，後者繼承自<xref:System.Windows.Documents.Paragraph>。 當您呼叫這個方法與`preserveTextElements`設`false`，`Heading1`轉換成<xref:System.Windows.Documents.Paragraph>時<xref:System.Windows.Documents.TextRange>儲存。  當您呼叫這個方法與`preserveTextElements`設`true`，`Heading1`儲存不需轉換。 若要保留自訂文字的項目，`dataFormat`必須設為<xref:System.Windows.DataFormats.Xaml?displayProperty=nameWithType>。  
  
 <xref:System.Windows.Documents.TextRange.Save%28System.IO.Stream%2CSystem.String%2CSystem.Boolean%29> .NET Framework 3.5 版中引進。  如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">當 <paramref name="stream" /> 或 <paramref name="dataFormat" /> 為 <see langword="null" /> 時發生。</exception>
        <exception cref="T:System.ArgumentException">當指定的資料格式不受支援時發生。  如果從 <paramref name="stream" /> 載入的內容與指定的資料格式不符也會發生。</exception>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public void Select (System.Windows.Documents.TextPointer position1, System.Windows.Documents.TextPointer position2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Select(class System.Windows.Documents.TextPointer position1, class System.Windows.Documents.TextPointer position2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextRange.Select(System.Windows.Documents.TextPointer,System.Windows.Documents.TextPointer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Select (position1 As TextPointer, position2 As TextPointer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Select(System::Windows::Documents::TextPointer ^ position1, System::Windows::Documents::TextPointer ^ position2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position1" Type="System.Windows.Documents.TextPointer" />
        <Parameter Name="position2" Type="System.Windows.Documents.TextPointer" />
      </Parameters>
      <Docs>
        <param name="position1">標記所更新選取範圍一端的固定錨點位置。</param>
        <param name="position2">標記所更新選取範圍另一端的可移動位置。</param>
        <summary>採用兩個 <see cref="T:System.Windows.Documents.TextPointer" /> 位置指出更新的選取範圍，更新目前選取範圍。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Windows.Documents.TextRange>形成的選取項目所指定的兩個位置之間**Textpointer**。  這些位置其中 (由`position1`) 與選取項目，而另一個位置相對固定 (由`position2`) 是可移動。  這是類似的選擇會由使用者使用滑鼠或鍵盤的運作方式。  
  
 新的選取項目的實際的端點可加以調整來比對包含新的目前選取範圍的文件適用於任何選取項目啟發學習法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">當 <paramref name="position1" /> 和 <paramref name="position2" /> 不是位於同一份文件內時發生。</exception>
        <exception cref="T:System.ArgumentNullException">當 <paramref name="position1" /> 或 <paramref name="position2" /> 為 <see langword="null" /> 時發生。</exception>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer Start { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Documents.TextPointer Start" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextRange.Start" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Start As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Documents::TextPointer ^ Start { System::Windows::Documents::TextPointer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得標示選取範圍開頭的位置。</summary>
        <value>
          <see cref="T:System.Windows.Documents.TextPointer" />，指向目前選取範圍的開頭。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例示範如何使用<xref:System.Windows.Documents.TextRange.Start%2A>屬性。  
  
 [!code-csharp[TextPointer_Snippets#_TextRange_StartEnd](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textrange_startend)]
 [!code-vb[TextPointer_Snippets#_TextRange_StartEnd](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textrange_startend)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.TextRange.End" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextRange.Text" />
      <MemberSignature Language="VB.NET" Value="Public Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Documents.ITextRange.Text</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定目前選取範圍的純文字內容。</summary>
        <value>字串，包含目前選取範圍的純文字內容。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用這個屬性來擷取目前的選取範圍，不論可能存在的任何格式設定中的純文字內容。  
  
 新行字元和段落符號會被視為相對於這個屬性的對等項目。  任何類型的內容存在於目前的選取範圍中的符號會轉換為新行時讀取這個屬性。  
  
   
  
## Examples  
 下列範例示範如何使用<xref:System.Windows.Documents.TextRange.Text%2A>屬性。  
  
 [!code-csharp[TextPointer_Snippets#_TextRange_Text](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textrange_text)]
 [!code-vb[TextPointer_Snippets#_TextRange_Text](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textrange_text)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">嘗試將此屬性設定為 <see langword="null" /> 時發生。</exception>
      </Docs>
    </Member>
  </Members>
</Type>