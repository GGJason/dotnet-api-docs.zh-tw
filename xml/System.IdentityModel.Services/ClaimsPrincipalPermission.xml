<Type Name="ClaimsPrincipalPermission" FullName="System.IdentityModel.Services.ClaimsPrincipalPermission">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="83e7d38da992c06fbcfa631ea8af70aebe6366f0" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30419392" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ClaimsPrincipalPermission : System.Security.IPermission, System.Security.ISecurityEncodable, System.Security.Permissions.IUnrestrictedPermission" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit ClaimsPrincipalPermission extends System.Object implements class System.Security.IPermission, class System.Security.ISecurityEncodable, class System.Security.Permissions.IUnrestrictedPermission" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ClaimsPrincipalPermission&#xA;Implements IPermission, ISecurityEncodable, IUnrestrictedPermission" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClaimsPrincipalPermission sealed : System::Security::IPermission, System::Security::ISecurityEncodable, System::Security::Permissions::IUnrestrictedPermission" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel.Services</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Security.IPermission</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Security.ISecurityEncodable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Security.Permissions.IUnrestrictedPermission</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>表示權限，會使用<see cref="T:System.Security.Claims.ClaimsAuthorizationManager" />實作來判斷是否應授與使用中的主體資源存取權。 這個類別無法被繼承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission>類別可讓您透過執行命令式存取檢查<xref:System.Security.Claims.ClaimsAuthorizationManager>針對應用程式設定。 藉由叫用<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A>方法或靜態<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A>方法，您可以提供保護您的程式碼，根據為您宣告的驗證管理員定義的授權原則的執行路徑中的資源。 宣告式存取檢查可以藉由執行<xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute>類別。  
  
> [!IMPORTANT]
>  <xref:System.IdentityModel.Services.ClaimsPrincipalPermission>類別會使用所設定的宣告授權管理員<xref:System.IdentityModel.Configuration.IdentityConfiguration>設定下<xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration%2A?displayProperty=nameWithType>屬性。 這是在所有情況下，即使其中未使用 WS-同盟; 的案例中，則為 true例如，作用中 (WCF) Web 應用程式和主控台應用程式。 您可以指定在組態或以程式設計的方式宣告授權管理員。 在組態檔中指定的宣告授權管理員，請設定[ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md)項目底下[ &lt;identityConfiguration&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/identityconfiguration.md)項目，並確定這個身分識別組態由參考[ &lt;federationConfiguration&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/federationconfiguration.md)由執行階段載入的項目 （例如，藉由設定`identityConfigurationName`屬性)。 若要以程式設計方式設定 claims authorization manager 授權，提供的處理常式<xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfigurationCreated?displayProperty=nameWithType>事件。  
  
 上一層，所提供的功能<xref:System.IdentityModel.Services.ClaimsPrincipalPermission>類似於透過提供以角色為基礎的存取檢查 (RBAC)<xref:System.Security.Permissions.PrincipalPermission>類別; 不過，<xref:System.Security.Claims.ClaimsAuthorizationManager>類別會執行使用中的主體所呈現的宣告為基礎的檢查。 這可讓更多資料粒度而不是可透過純 RBAC，其中許多權限通常會收集在單一角色。 或許，更重要的是，宣告為基礎的授權啟用更好的分隔的商務邏輯和授權原則，因為可以要求程式碼中的資源上的特定動作的權限和後端原則可以用來設定哪些宣告呈現實體必須擁有才能滿足要求。 喜歡 RBAC，<xref:System.IdentityModel.Services.ClaimsPrincipalPermission>執行使用者為基礎的存取檢查，也就是與不同的是由衍生自的類別所實作的程式碼存取安全性<xref:System.Security.CodeAccessPermission>類別，並且使用以確定程式碼的所有呼叫端具有已授與權限時，堆疊查核行程<xref:System.IdentityModel.Services.ClaimsPrincipalPermission>其上執行檢查只有目前的主體。  
  
 靜態<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A>方法會檢查指定的動作，對指定資源的存取權。 資源和動作都是字串，且通常是 Uri。 您也可以初始化的執行個體<xref:System.IdentityModel.Services.ClaimsPrincipalPermission>與動作、 資源和呼叫<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A>方法。 雖然建構函式只接受單一資源和動作、<xref:System.IdentityModel.Services.ClaimsPrincipalPermission>物件可以透過結合<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A>和<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A>方法。 使用這些方法所建立的權限可能包含多個資源動作配對。  
  
 這兩種方法叫用決定存取<xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType>方法設定的 claims authorization manager 授權與<xref:System.Security.Claims.AuthorizationContext>作用中的主體所組成 (<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType>)、 資源和動作。 它們會擲回<xref:System.Security.SecurityException>如果目前的主體沒有權限資源上執行動作否則繼續執行。  
  
 如果是<xref:System.IdentityModel.Services.ClaimsPrincipalPermission>，其中包含多個資源動作組，<xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType>資源動作組所包含的權限中的每個叫用方法。  呼叫<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A>成功，作用中的主體必須經過授權，所有包含的權限中的資源動作組。  
  
   
  
## Examples  
 下列範例示範如何使用來保護資源<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A>方法，<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A>方法，或<xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute>宣告。 在每個案例中，設定<xref:System.Security.Claims.ClaimsAuthorizationManager>會叫用來評估目前的主體，針對指定的資源和動作。 如果目前的主體不在指定的資源上指定的動作所需的授權<xref:System.Security.SecurityException>便擲回，否則繼續執行。  
  
 [!code-csharp[WifCppWithCam#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifcppwithcam/cs/wifcppwithcam/program.cs#1)]  
  
 下列 XML 說明使用自訂宣告授權所需的最小設定管理員<xref:System.IdentityModel.Services.ClaimsPrincipalPermission>類別。 您必須至少同時宣告`system.identityModel`和`system.identityModel.services`中`<configSection>`項目，然後指定您的授權管理員中[ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md)下預設身分識別組態項目。 這可確保您的授權管理員從預設同盟組態參考。 或者，您可以指定在其下中指定授權管理員的身分識別設定名稱`identityConfigurationName`屬性[ &lt;federationConfiguration&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/federationconfiguration.md)項目。  
  
```xml  
<?xml version="1.0" encoding="utf-8" ?>  
<configuration>  
  <configSections>  
    <!-- WIF configuration sections -->  
    <section name="system.identityModel" type="System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
    <section name="system.identityModel.services" type="System.IdentityModel.Services.Configuration.SystemIdentityModelServicesSection, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
  </configSections>  
  
  <startup>  
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5" />  
  </startup>  
  
  <system.identityModel>  
    <identityConfiguration>  
      <claimsAuthorizationManager type ="MyClaimsAuthorizationManager.MyClaimsAuthorizationManager, MyClaimsAuthorizationManager"/>  
    </identityConfiguration>  
  </system.identityModel>  
  
</configuration>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute" />
    <altmember cref="P:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration" />
    <altmember cref="T:System.Security.Claims.ClaimsAuthorizationManager" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClaimsPrincipalPermission (string resource, string action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string resource, string action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (resource As String, action As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ClaimsPrincipalPermission(System::String ^ resource, System::String ^ action);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="resource" Type="System.String" />
        <Parameter Name="action" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource">其主體應該要授權的資源。</param>
        <param name="action">應授權原則的動作。</param>
        <summary>建立 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission>物件使用指定的資源動作組初始化。 您可以呼叫<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A>方法，以執行存取檢查。  
  
 雖然建構函式只接受單一資源和動作、<xref:System.IdentityModel.Services.ClaimsPrincipalPermission>物件可以透過結合<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A>和<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A>方法。 透過這些方法建立的權限可能包含多個資源動作配對。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="resource" /> 為 <see langword="null" /> 或空字串。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="action" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public static void CheckAccess (string resource, string action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CheckAccess(string resource, string action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CheckAccess (resource As String, action As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CheckAccess(System::String ^ resource, System::String ^ action);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2103:ReviewImperativeSecurity", Justification="It is expected that the runtime’s behavior would rely on changing data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resource" Type="System.String" />
        <Parameter Name="action" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource">其主體應該要授權的資源。</param>
        <param name="action">應授權原則的動作。</param>
        <summary>檢查目前主體獲得授權，可以對指定的資源執行指定的動作。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 主體必須經過授權，針對指定的資源上指定的動作或<xref:System.Security.SecurityException>擲回例外狀況。  
  
 <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType>設定的 claims authorization manager 授權的方法用來叫用<xref:System.Security.Claims.AuthorizationContext>作用中的主體所組成 (<xref:System.Threading.Thread.CurrentPrincipal%2A>)、 資源和動作。  
  
   
  
## Examples  
 下列範例示範如何使用來保護資源<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A>方法。 設定的宣告授權管理員會叫用來評估目前的主體，針對指定的資源和動作。 如果目前的主體不在指定的資源上指定的動作所需的授權<xref:System.Security.SecurityException>便擲回，否則繼續執行。  
  
 [!code-csharp[WifCppWithCam#2](~/samples/snippets/csharp/VS_Snippets_Misc/wifcppwithcam/cs/wifcppwithcam/program.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">不可以從 <see cref="T:System.Security.Claims.ClaimsPrincipal" /> 指派目前的主體。  
  
 -或-  
  
 沒有己設定的 <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" />。</exception>
        <exception cref="T:System.Security.SecurityException">授權檢查失敗。</exception>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public System.Security.IPermission Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Function Copy () As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::IPermission ^ Copy();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2103:ReviewImperativeSecurity", Justification="It is expected that the runtime’s behavior would rely on changing data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回目前 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> 執行個體的複本。</summary>
        <returns>從目前執行個體複製的 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Demand">
      <MemberSignature Language="C#" Value="public void Demand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Demand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand" />
      <MemberSignature Language="VB.NET" Value="Public Sub Demand ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Demand();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>檢查目前主體是否獲得使用與目前執行個體相關聯之資源/動作配對的授權。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 目前的主體必須經過授權，所有與這個執行個體相關聯的資源動作組或<xref:System.Security.SecurityException>擲回例外狀況。  
  
 雖然建構函式只接受單一資源和動作、<xref:System.IdentityModel.Services.ClaimsPrincipalPermission>物件可以透過結合<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A>和<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A>方法。 透過這些方法建立的權限可能包含多個資源動作配對。  
  
 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A>方法會叫用<xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType>方法設定的 claims authorization manager 授權與<xref:System.Security.Claims.AuthorizationContext>作用中的主體所組成 (<xref:System.Threading.Thread.CurrentPrincipal%2A>)，資源，並針對每個資源動作組所包含的動作在 權限。 如<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A>必須成對資源動作的權限中所包含的所有授權成功作用中主體。  
  
   
  
## Examples  
 下列範例示範如何使用來保護資源<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A>方法。 設定的宣告授權管理員會叫用來評估目前的主體，針對指定的資源和動作。 如果目前的主體不在指定的資源上指定的動作所需的授權<xref:System.Security.SecurityException>便擲回，否則繼續執行。  
  
 [!code-csharp[WifCppWithCam#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifcppwithcam/cs/wifcppwithcam/program.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">不可以從 <see cref="T:System.Security.Claims.ClaimsPrincipal" /> 指派目前的主體。  
  
 -或-  
  
 沒有己設定的 <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" />。</exception>
        <exception cref="T:System.Security.SecurityException">授權檢查失敗。</exception>
      </Docs>
    </Member>
    <Member MemberName="FromXml">
      <MemberSignature Language="C#" Value="public void FromXml (System.Security.SecurityElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FromXml(class System.Security.SecurityElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.FromXml(System.Security.SecurityElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FromXml (element As SecurityElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void FromXml(System::Security::SecurityElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Security.SecurityElement" />
      </Parameters>
      <Docs>
        <param name="element">用來重新建構權限的 XML 編碼。</param>
        <summary>使用指定的 XML 編碼重新建構目前的權限和它的狀態。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 重新建構權限的呼叫所建立的 XML 編碼<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.ToXml%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">編碼方式包含無法辨識的項目或屬性或格式不正確的 XML。</exception>
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public System.Security.IPermission Intersect (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Intersect(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Function Intersect (target As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::IPermission ^ Intersect(System::Security::IPermission ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">與目前使用權限交集的使用權限。 這必須是 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> 的執行個體。</param>
        <summary>傳回新的使用權限，其為目前使用權限和指定之使用權限的交集。</summary>
        <returns>新的 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />，表示目前使用權限和指定使用權限的交集；如果 <paramref name="target" /> 是 <paramref name="null" /> 或不是 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> 的執行個體，則為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 傳回的權限有只出現在目前的權限和指定的權限中的資源動作組。 存在於其中之一或其他的權限的資源動作組不包含。 如<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A>成功新權限，目前的主體只需要獲得目前權限與指定權限的共用資源動作組。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSubsetOf">
      <MemberSignature Language="C#" Value="public bool IsSubsetOf (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSubsetOf(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.IsSubsetOf(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsSubsetOf (target As IPermission) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSubsetOf(System::Security::IPermission ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">要測試是否有子集關聯性的使用權限。 這必須是 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> 的執行個體。</param>
        <summary>傳回值，指出目前的使用權限是否為指定之使用權限的子集。</summary>
        <returns>
          如果目前的使用權限是指定之使用權限的子集，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 目前的權限是指定權限的子集，如果所有包含在目前的權限的資源動作組也會出現在指定的權限。 如果`target`是`null`或不是執行個體的<xref:System.IdentityModel.Services.ClaimsPrincipalPermission>、<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.IsSubsetOf%2A>傳回`false`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnrestricted">
      <MemberSignature Language="C#" Value="public bool IsUnrestricted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsUnrestricted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.IsUnrestricted" />
      <MemberSignature Language="VB.NET" Value="Public Function IsUnrestricted () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsUnrestricted();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回指示權限是否不受限制的值。</summary>
        <returns>
          如果權限不受限制，則為 <see langword="true" />；否則為 <see langword="false" />。 一律傳回指出權限不受限制的 <see langword="true" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToXml">
      <MemberSignature Language="C#" Value="public System.Security.SecurityElement ToXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.SecurityElement ToXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.ToXml" />
      <MemberSignature Language="VB.NET" Value="Public Function ToXml () As SecurityElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::SecurityElement ^ ToXml();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.SecurityElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回 XML 編碼格式的目前權限和其狀態。</summary>
        <returns>XML 編碼格式的目前權限和其狀態。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 主體就可以重新建構的 XML 編碼格式藉由呼叫<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.FromXml%2A>方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public System.Security.IPermission Union (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Union(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Union(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Function Union (target As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::IPermission ^ Union(System::Security::IPermission ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">與目前使用權限結合的使用權限。 它必須是 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> 型別。</param>
        <summary>傳回新的使用權限，其為目前使用權限和指定之使用權限的聯集。 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />物件，含有所有出現在目前執行個體及目標執行個體的來源-動作組。</summary>
        <returns>新的 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />，表示目前使用權限和指定使用權限的聯集；如果 <paramref name="target" /> 是 <paramref name="null" /> 或不是 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> 的執行個體，則為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 傳回的權限都具有所有會在目前的權限的資源動作組和所有的資源動作組指定的權限。 如<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A>成功新權限，目前的主體必須經過授權，為存在於目前的權限的資源動作組與所有存在於指定的權限的資源動作組。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>