<Type Name="ClaimsPrincipalPermission" FullName="System.IdentityModel.Services.ClaimsPrincipalPermission">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7da9c1c218c9c3251976195eca793df1ac01c138" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55310356" /></Metadata><TypeSignature Language="C#" Value="public sealed class ClaimsPrincipalPermission : System.Security.IPermission, System.Security.Permissions.IUnrestrictedPermission" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit ClaimsPrincipalPermission extends System.Object implements class System.Security.IPermission, class System.Security.ISecurityEncodable, class System.Security.Permissions.IUnrestrictedPermission" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ClaimsPrincipalPermission&#xA;Implements IPermission, IUnrestrictedPermission" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClaimsPrincipalPermission sealed : System::Security::IPermission, System::Security::Permissions::IUnrestrictedPermission" />
  <TypeSignature Language="F#" Value="type ClaimsPrincipalPermission = class&#xA;    interface IPermission&#xA;    interface ISecurityEncodable&#xA;    interface IUnrestrictedPermission" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel.Services</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Security.IPermission</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Security.ISecurityEncodable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Security.Permissions.IUnrestrictedPermission</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示權限，會使用<see cref="T:System.Security.Claims.ClaimsAuthorizationManager" />實作來判斷是否應授與使用中的主體資源存取權。 這個類別無法被繼承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission>類別提供的功能來執行命令式的存取檢查使用<xref:System.Security.Claims.ClaimsAuthorizationManager>針對應用程式設定。 藉由叫用<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A>方法或靜態<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A>方法中，您可以提供您的程式碼，根據為您的宣告驗證管理員定義的授權原則的執行路徑內的資源保護。 宣告式存取可讓您檢查可以藉由執行<xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute>類別。  
  
> [!IMPORTANT]
>  <xref:System.IdentityModel.Services.ClaimsPrincipalPermission>類別會使用宣告授權管理員來設定<xref:System.IdentityModel.Configuration.IdentityConfiguration>下方設定<xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration%2A?displayProperty=nameWithType>屬性。 這是在所有情況下，甚至是在其中未使用 WS-同盟; 的情況下，則為 true例如，作用中 (WCF) Web 應用程式和主控台應用程式。 您可以指定宣告授權管理員在設定或以程式設計的方式。 若要指定組態檔中的宣告授權管理員，設定[ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md)項目底下[ &lt;identityConfiguration&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/identityconfiguration.md)項目，並確定這個身分識別組態由參考[ &lt;Federationconfiguration>&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/federationconfiguration.md)由執行階段載入的項目 （例如，藉由設定`identityConfigurationName`屬性)。 若要以程式設計方式設定宣告授權管理員，提供的處理常式<xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfigurationCreated?displayProperty=nameWithType>事件。  
  
 上一個層級所提供的功能<xref:System.IdentityModel.Services.ClaimsPrincipalPermission>類似於以角色為基礎的存取檢查 (RBAC)，透過提供<xref:System.Security.Permissions.PrincipalPermission>類別; 不過，<xref:System.Security.Claims.ClaimsAuthorizationManager>類別會執行檢查根據提供的作用中主體的宣告。 這可讓更多資料粒度比透過純 RBAC，其中許多權限通常會收集在一個角色。 可能是為更重要的是，宣告為基礎的授權，可讓商務邏輯和授權原則的分離因為權限可以要求特定動作的程式碼中的資源，而且後端原則可用來設定哪些宣告呈現實體必須擁有以滿足需求。 例如 RBAC，<xref:System.IdentityModel.Services.ClaimsPrincipalPermission>不同於衍生自的類別所實作的程式碼存取安全性也就是執行以使用者為基礎的存取檢查，<xref:System.Security.CodeAccessPermission>類別，並且以確保所有的呼叫端程式碼必須被授與，權限，使用堆疊查核行程<xref:System.IdentityModel.Services.ClaimsPrincipalPermission>其上執行檢查只有目前的主體。  
  
 靜態<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A>方法會檢查指定的動作，對指定資源的存取權。 資源和動作都是字串，並且通常為 Uri。 您也可以初始化的執行個體<xref:System.IdentityModel.Services.ClaimsPrincipalPermission>使用動作的資源和呼叫<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A>方法。 建構函式只接受單一資源和動作，雖然<xref:System.IdentityModel.Services.ClaimsPrincipalPermission>物件可以透過結合<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A>和<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A>方法。 使用這些方法所建立的權限可能包含多個資源 / 動作配對。  
  
 這兩種方法會決定存取權限叫用<xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType>方法搭配已設定的宣告授權管理員<xref:System.Security.Claims.AuthorizationContext>使用中的主體所組成 (<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType>)、 資源和動作。 則會擲回<xref:System.Security.SecurityException>如果目前的主體未獲授權執行的動作資源; 否則執行程序。  
  
 若是<xref:System.IdentityModel.Services.ClaimsPrincipalPermission>，其中包含多個資源 / 動作配對，<xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType>的權限中所包含的資源 / 動作配對的每個叫用方法。  若要呼叫<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A>成功，使用中的主體必須經過授權的權限中所包含的資源 / 動作配對的所有。  
  
   
  
## Examples  
 下列範例示範如何使用來保護資源<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A>方法中，<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A>方法，或<xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute>宣告。 在每個案例中，已設定<xref:System.Security.Claims.ClaimsAuthorizationManager>會叫用來評估目前的主體，針對指定的資源和動作。 如果指定的動作，對指定的資源，未授權目前主體<xref:System.Security.SecurityException>擲回，否則繼續執行。  
  
 [!code-csharp[WifCppWithCam#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifcppwithcam/cs/wifcppwithcam/program.cs#1)]  
  
 下列 XML 說明使用自訂宣告授權所需的最低設定管理員<xref:System.IdentityModel.Services.ClaimsPrincipalPermission>類別。 您必須至少宣告同時`system.identityModel`而`system.identityModel.services`區段中`<configSection>`項目，然後指定您的授權管理員中[ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md)下的預設身分識別組態項目。 這可確保您的授權管理員從預設的同盟組態參考。 或者，您可以在其中指定所在中指定授權管理員的身分識別組態的名稱`identityConfigurationName`的屬性[ &lt;Federationconfiguration>&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/federationconfiguration.md)項目。  
  
```xml  
<?xml version="1.0" encoding="utf-8" ?>  
<configuration>  
  <configSections>  
    <!-- WIF configuration sections -->  
    <section name="system.identityModel" type="System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
    <section name="system.identityModel.services" type="System.IdentityModel.Services.Configuration.SystemIdentityModelServicesSection, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
  </configSections>  
  
  <startup>  
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5" />  
  </startup>  
  
  <system.identityModel>  
    <identityConfiguration>  
      <claimsAuthorizationManager type ="MyClaimsAuthorizationManager.MyClaimsAuthorizationManager, MyClaimsAuthorizationManager"/>  
    </identityConfiguration>  
  </system.identityModel>  
  
</configuration>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute" />
    <altmember cref="P:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration" />
    <altmember cref="T:System.Security.Claims.ClaimsAuthorizationManager" />
    <related type="Article" href="https://msdn.microsoft.com/library/8b14054c-6d07-46ab-ab58-03f14beac0f2">&lt;federationConfiguration&gt;</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClaimsPrincipalPermission (string resource, string action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string resource, string action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (resource As String, action As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ClaimsPrincipalPermission(System::String ^ resource, System::String ^ action);" />
      <MemberSignature Language="F#" Value="new System.IdentityModel.Services.ClaimsPrincipalPermission : string * string -&gt; System.IdentityModel.Services.ClaimsPrincipalPermission" Usage="new System.IdentityModel.Services.ClaimsPrincipalPermission (resource, action)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="resource" Type="System.String" />
        <Parameter Name="action" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource">其主體應該要授權的資源。</param>
        <param name="action">應授權原則的動作。</param>
        <summary>建立 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission>物件會初始化使用指定的資源-動作組。 您可以呼叫<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A>方法，以執行存取檢查。  
  
 建構函式只接受單一資源和動作，雖然<xref:System.IdentityModel.Services.ClaimsPrincipalPermission>物件可以透過結合<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A>和<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A>方法。 透過這些方法所建立的權限可能包含多個資源 / 動作配對。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="resource" /> 為 <see langword="null" /> 或空字串。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="action" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public static void CheckAccess (string resource, string action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CheckAccess(string resource, string action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CheckAccess (resource As String, action As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CheckAccess(System::String ^ resource, System::String ^ action);" />
      <MemberSignature Language="F#" Value="static member CheckAccess : string * string -&gt; unit" Usage="System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess (resource, action)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2103:ReviewImperativeSecurity", Justification="It is expected that the runtime’s behavior would rely on changing data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resource" Type="System.String" />
        <Parameter Name="action" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource">其主體應該要授權的資源。</param>
        <param name="action">應授權原則的動作。</param>
        <summary>檢查目前主體獲得授權，可以對指定的資源執行指定的動作。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在指定的資源上指定的動作進行授權的主體或<xref:System.Security.SecurityException>擲回例外狀況。  
  
 <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType>已設定的宣告授權管理員的方法叫用<xref:System.Security.Claims.AuthorizationContext>使用中的主體所組成 (<xref:System.Threading.Thread.CurrentPrincipal%2A>)、 資源和動作。  
  
   
  
## Examples  
 下列範例示範如何使用來保護資源<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A>方法。 設定的宣告授權管理員會叫用來評估目前的主體，針對指定的資源和動作。 如果指定的動作，對指定的資源，未授權目前主體<xref:System.Security.SecurityException>擲回，否則繼續執行。  
  
 [!code-csharp[WifCppWithCam#2](~/samples/snippets/csharp/VS_Snippets_Misc/wifcppwithcam/cs/wifcppwithcam/program.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">不可以從 <see cref="T:System.Security.Claims.ClaimsPrincipal" /> 指派目前的主體。  
  
-或- 
沒有己設定的 <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" />。</exception>
        <exception cref="T:System.Security.SecurityException">授權檢查失敗。</exception>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public System.Security.IPermission Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Function Copy () As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::IPermission ^ Copy();" />
      <MemberSignature Language="F#" Value="abstract member Copy : unit -&gt; System.Security.IPermission&#xA;override this.Copy : unit -&gt; System.Security.IPermission" Usage="claimsPrincipalPermission.Copy " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.Copy</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2103:ReviewImperativeSecurity", Justification="It is expected that the runtime’s behavior would rely on changing data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回目前 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> 執行個體的複本。</summary>
        <returns>從目前執行個體複製的 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Demand">
      <MemberSignature Language="C#" Value="public void Demand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Demand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand" />
      <MemberSignature Language="VB.NET" Value="Public Sub Demand ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Demand();" />
      <MemberSignature Language="F#" Value="abstract member Demand : unit -&gt; unit&#xA;override this.Demand : unit -&gt; unit" Usage="claimsPrincipalPermission.Demand " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.Demand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>檢查目前主體是否獲得使用與目前執行個體相關聯之資源/動作配對的授權。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 目前的主體必須獲得所有與這個執行個體相關聯的資源 / 動作配對或<xref:System.Security.SecurityException>擲回例外狀況。  
  
 建構函式只接受單一資源和動作，雖然<xref:System.IdentityModel.Services.ClaimsPrincipalPermission>物件可以透過結合<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A>和<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A>方法。 透過這些方法所建立的權限可能包含多個資源 / 動作配對。  
  
 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A>方法會叫用<xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType>方法搭配已設定的宣告授權管理員<xref:System.Security.Claims.AuthorizationContext>使用中的主體所組成 (<xref:System.Threading.Thread.CurrentPrincipal%2A>)、 資源及包含的資源 / 動作配對的每個動作在 權限。 針對<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A>成功使用中的主體必須獲得所有包含的權限中的資源 / 動作配對。  
  
   
  
## Examples  
 下列範例示範如何使用來保護資源<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A>方法。 設定的宣告授權管理員會叫用來評估目前的主體，針對指定的資源和動作。 如果指定的動作，對指定的資源，未授權目前主體<xref:System.Security.SecurityException>擲回，否則繼續執行。  
  
 [!code-csharp[WifCppWithCam#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifcppwithcam/cs/wifcppwithcam/program.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">不可以從 <see cref="T:System.Security.Claims.ClaimsPrincipal" /> 指派目前的主體。  
  
-或- 
沒有己設定的 <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" />。</exception>
        <exception cref="T:System.Security.SecurityException">授權檢查失敗。</exception>
      </Docs>
    </Member>
    <Member MemberName="FromXml">
      <MemberSignature Language="C#" Value="public void FromXml (System.Security.SecurityElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FromXml(class System.Security.SecurityElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.FromXml(System.Security.SecurityElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FromXml (element As SecurityElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void FromXml(System::Security::SecurityElement ^ element);" />
      <MemberSignature Language="F#" Value="abstract member FromXml : System.Security.SecurityElement -&gt; unit&#xA;override this.FromXml : System.Security.SecurityElement -&gt; unit" Usage="claimsPrincipalPermission.FromXml element" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.ISecurityEncodable.FromXml(System.Security.SecurityElement)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Security.SecurityElement" />
      </Parameters>
      <Docs>
        <param name="element">用來重新建構權限的 XML 編碼。</param>
        <summary>使用指定的 XML 編碼重新建構目前的權限和它的狀態。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 重新建構權限的呼叫所建立的 XML 編碼<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.ToXml%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="element" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">編碼方式包含無法辨識的項目或屬性或格式不正確的 XML。</exception>
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public System.Security.IPermission Intersect (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Intersect(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Function Intersect (target As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::IPermission ^ Intersect(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="abstract member Intersect : System.Security.IPermission -&gt; System.Security.IPermission&#xA;override this.Intersect : System.Security.IPermission -&gt; System.Security.IPermission" Usage="claimsPrincipalPermission.Intersect target" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.Intersect(System.Security.IPermission)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">與目前使用權限交集的使用權限。 這必須是 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> 的執行個體。</param>
        <summary>傳回新的使用權限，其為目前使用權限和指定之使用權限的交集。</summary>
        <returns>新的 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />，表示目前使用權限和指定使用權限的交集；如果 <paramref name="target" /> 是 <paramref name="null" /> 或不是 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> 的執行個體，則為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 權限，則會傳回具有只出現在目前的使用權限和指定的權限的資源 / 動作配對。 不包含存在於一部或其他的權限的資源 / 動作配對。 針對<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A>成功上新的權限，目前的主體只需要很常見，目前的使用權限和指定的權限資源 / 動作配對進行授權。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSubsetOf">
      <MemberSignature Language="C#" Value="public bool IsSubsetOf (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSubsetOf(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.IsSubsetOf(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsSubsetOf (target As IPermission) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSubsetOf(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="abstract member IsSubsetOf : System.Security.IPermission -&gt; bool&#xA;override this.IsSubsetOf : System.Security.IPermission -&gt; bool" Usage="claimsPrincipalPermission.IsSubsetOf target" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.IsSubsetOf(System.Security.IPermission)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">要測試是否有子集關聯性的使用權限。 這必須是 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> 的執行個體。</param>
        <summary>傳回值，指出目前的使用權限是否為指定之使用權限的子集。</summary>
        <returns>如果目前的使用權限是指定之使用權限的子集，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 目前的使用權限是指定的權限的子集，如果所有包含在目前的權限的資源 / 動作配對也會出現在指定的權限。 如果`target`已`null`或不是執行個體<xref:System.IdentityModel.Services.ClaimsPrincipalPermission>，則<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.IsSubsetOf%2A>傳回`false`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnrestricted">
      <MemberSignature Language="C#" Value="public bool IsUnrestricted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsUnrestricted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.IsUnrestricted" />
      <MemberSignature Language="VB.NET" Value="Public Function IsUnrestricted () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsUnrestricted();" />
      <MemberSignature Language="F#" Value="abstract member IsUnrestricted : unit -&gt; bool&#xA;override this.IsUnrestricted : unit -&gt; bool" Usage="claimsPrincipalPermission.IsUnrestricted " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.Permissions.IUnrestrictedPermission.IsUnrestricted</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回指示權限是否不受限制的值。</summary>
        <returns>如果權限不受限制，則為 <see langword="true" />；否則為 <see langword="false" />。 一律傳回指出權限不受限制的 <see langword="true" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToXml">
      <MemberSignature Language="C#" Value="public System.Security.SecurityElement ToXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.SecurityElement ToXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.ToXml" />
      <MemberSignature Language="VB.NET" Value="Public Function ToXml () As SecurityElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::SecurityElement ^ ToXml();" />
      <MemberSignature Language="F#" Value="abstract member ToXml : unit -&gt; System.Security.SecurityElement&#xA;override this.ToXml : unit -&gt; System.Security.SecurityElement" Usage="claimsPrincipalPermission.ToXml " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.ISecurityEncodable.ToXml</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.SecurityElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回 XML 編碼格式的目前權限和其狀態。</summary>
        <returns>XML 編碼格式的目前權限和其狀態。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 主體可以藉由呼叫建構的 XML 編碼格式<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.FromXml%2A>方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public System.Security.IPermission Union (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Union(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Union(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Function Union (target As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::IPermission ^ Union(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="abstract member Union : System.Security.IPermission -&gt; System.Security.IPermission&#xA;override this.Union : System.Security.IPermission -&gt; System.Security.IPermission" Usage="claimsPrincipalPermission.Union target" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.Union(System.Security.IPermission)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">與目前使用權限結合的使用權限。 它必須是 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> 型別。</param>
        <summary>傳回新的使用權限，其為目前使用權限和指定之使用權限的聯集。 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />物件，含有所有出現在目前執行個體及目標執行個體的來源-動作組。</summary>
        <returns>新的 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />，表示目前使用權限和指定使用權限的聯集；如果 <paramref name="target" /> 是 <paramref name="null" /> 或不是 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> 的執行個體，則為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 傳回的權限會出現在目前的權限資源 / 動作配對的所有而且所有的資源-動作組存在指定的權限。 針對<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A>成功上新的權限，目前的主體必須獲得授權以進行所有存在於目前的權限資源 / 動作配對和所有存在於指定的權限資源 / 動作配對。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>