<Type Name="EntityCollection&lt;TEntity&gt;" FullName="System.Data.Objects.DataClasses.EntityCollection&lt;TEntity&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0c52cb13084751322889764807f28bf9eaff9d3e" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37678687" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class EntityCollection&lt;TEntity&gt; : System.Data.Objects.DataClasses.RelatedEnd, System.Collections.Generic.ICollection&lt;TEntity&gt;, System.Collections.Generic.IEnumerable&lt;TEntity&gt;, System.ComponentModel.IListSource where TEntity : class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit EntityCollection`1&lt;class TEntity&gt; extends System.Data.Objects.DataClasses.RelatedEnd implements class System.Collections.Generic.ICollection`1&lt;!TEntity&gt;, class System.Collections.Generic.IEnumerable`1&lt;!TEntity&gt;, class System.Collections.IEnumerable, class System.ComponentModel.IListSource" />
  <TypeSignature Language="DocId" Value="T:System.Data.Objects.DataClasses.EntityCollection`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class EntityCollection(Of TEntity)&#xA;Inherits RelatedEnd&#xA;Implements ICollection(Of TEntity), IEnumerable(Of TEntity), IListSource" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TEntity&gt;&#xA; where TEntity : classpublic ref class EntityCollection sealed : System::Data::Objects::DataClasses::RelatedEnd, System::Collections::Generic::ICollection&lt;TEntity&gt;, System::Collections::Generic::IEnumerable&lt;TEntity&gt;, System::ComponentModel::IListSource" />
  <TypeSignature Language="F#" Value="type EntityCollection&lt;'Entity (requires 'Entity : null)&gt; = class&#xA;    inherit RelatedEnd&#xA;    interface ICollection&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface seq&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface IEnumerable&#xA;    interface IListSource" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TEntity">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Data.Objects.DataClasses.RelatedEnd</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;TEntity&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;TEntity&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.IListSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TEntity">集合的實體類型。</typeparam>
    <summary>Represents a collection of objects on the "many" end of a relationship.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 是代表一對多關聯性 (One-To-Many Relationship) 或多對多關聯性 (Many-To-Many Relationship) 之「多」端的特定實體 (Entity) 類型的物件集合。  
  
 導覽屬性會傳回 <xref:System.Data.Objects.DataClasses.EntityCollection%601>。 您可以使用 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Load%2A> 方法，將相關物件載入 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 中。 若要儲存特定實體類型之物件的不相關集合 (例如 <xref:System.Data.Objects.ObjectQuery%601> 的結果)，請使用 <xref:System.Collections.Generic.List%601> 類別 (Class) 的執行個體 (Instance)。  
  
 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 可能會有對應的 <xref:System.Data.Objects.DataClasses.EntityReference%601>。 當 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 和 <xref:System.Data.Objects.DataClasses.EntityReference%601> 模型化相同關聯性的相對端時，關聯性的完整性就會在物件層級維護。 這兩個類別會自動同步處理 (Synchronize)。  
  
 這個類別無法被繼承。  
  
   
  
## Examples  
 此範例為基礎。 若要執行此範例中的程式碼，您必須已經將 AdventureWorks Sales Model 加入到專案中，並設定您的專案使用 Entity Framework。 若要這樣做，請完成中的程序[如何： 手動設定 Entity Framework 專案](http://msdn.microsoft.com/library/73f6ae1d-b3b2-4577-aebd-ad5a75954e9e)並[如何： 手動定義模型和對應檔](http://msdn.microsoft.com/library/d4fd6864-f2a1-48f0-aa32-1e318775a99a)。  
  
 此範例會執行下列動作：  
  
1.  建立兩個新的 `SalesOrderHeader` 實體並將它們加入至 `Contact` 實體。  
  
2.  從與 <xref:System.Data.Objects.DataClasses.RelationshipManager> 實體相關聯的 `Contact` 中取得所有相關端。  
  
3.  逐一查看 <xref:System.Data.Objects.DataClasses.IRelatedEnd> 的集合。  
  
4.  取得每個相關端的 <xref:System.Data.Objects.DataClasses.EntityCollection%601>。  
  
5.  使用 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Remove%2A> 方法，從集合中移除其中一個實體。  
  
6.  呼叫 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Contains%2A> 方法來判斷此物件是否已經從集合中移除了。  
  
7.  使用 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A> 方法來重新加入實體。  
  
 [!code-csharp[DP ObjectServices Concepts#IRelatedEnd_Add](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#irelatedend_add)]
 [!code-vb[DP ObjectServices Concepts#IRelatedEnd_Add](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#irelatedend_add)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EntityCollection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 的這個公用建構函式 (Constructor) 是要在還原序列化物件圖形時供物件服務使用。 您應該從導覽屬性中存取 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 的執行個體，而非使用這個建構函式。  
  
 若要儲存特定實體類型之物件的不相關集合 (例如 <xref:System.Data.Objects.ObjectQuery%601> 的結果)，請使用 <xref:System.Collections.Generic.List%601> 的執行個體。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Add(TEntity entity);" />
      <MemberSignature Language="F#" Value="override this.Add : 'Entity -&gt; unit" Usage="entityCollection.Add entity" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">An object to add to the collection. <c>entity</c> must implement <see cref="T:System.Data.Objects.DataClasses.IEntityWithRelationships" />.</param>
        <summary>Adds an object to the collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A> 方法會將物件加入至 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 並且建立這兩個物件之間的關聯性。 當來源物件附加至 <xref:System.Data.Objects.ObjectContext> 執行個體時，<xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A> 方法也會將此物件加入至 <xref:System.Data.Objects.ObjectContext>。 呼叫 <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> 時，這項作業就會在資料來源中轉譯成插入作業。 如需詳細資訊，請參閱 <<c0> [ 建立、 新增、 修改和刪除物件](http://msdn.microsoft.com/library/f76f1fad-c553-4b59-820b-89b3dec2fad1)。  
  
 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A> 方法可以在同一個物件執行個體上呼叫多次。  
  
   
  
## Examples  
 此範例為基礎。 若要執行此範例中的程式碼，您必須已經將 AdventureWorks Sales Model 加入到專案中，並設定您的專案使用 Entity Framework。 若要這樣做，請完成中的程序[如何： 手動設定 Entity Framework 專案](http://msdn.microsoft.com/library/73f6ae1d-b3b2-4577-aebd-ad5a75954e9e)並[如何： 手動定義模型和對應檔](http://msdn.microsoft.com/library/d4fd6864-f2a1-48f0-aa32-1e318775a99a)。  
  
 這個範例會建立兩個新的 `SalesOrderHeader` 實體、將它們加入至 `Contact` 實體，然後在移除物件之後，使用 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A> 方法，將此物件重新加入至集合。  
  
 [!code-csharp[DP ObjectServices Concepts#IRelatedEnd_Add](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#irelatedend_add)]
 [!code-vb[DP ObjectServices Concepts#IRelatedEnd_Add](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#irelatedend_add)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="entity" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Attach">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Defines a relationship between two attached objects in an object context.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (System.Collections.Generic.IEnumerable&lt;TEntity&gt; entities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Attach(class System.Collections.Generic.IEnumerable`1&lt;!TEntity&gt; entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.Attach(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entities As IEnumerable(Of TEntity))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(System::Collections::Generic::IEnumerable&lt;TEntity&gt; ^ entities);" />
      <MemberSignature Language="F#" Value="override this.Attach : seq&lt;'Entity (requires 'Entity : null)&gt; -&gt; unit" Usage="entityCollection.Attach entities" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TEntity&gt;" />
      </Parameters>
      <Docs>
        <param name="entities">Collection of objects in the object context that are related to the source object.</param>
        <summary>Defines relationships between an object and a collection of related objects in an object context.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.Attach%2A> 方法是用來在來源物件與相關物件的集合已經存在物件內容中時，定義物件與相關物件之集合之間的關聯性。 若要在已經定義關聯性的位置附加物件或物件圖形，請針對 <xref:System.Data.Objects.ObjectContext.Attach%2A> 呼叫 <xref:System.Data.Objects.ObjectContext> 方法。 若要建立與來源物件相關的新物件，請針對 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A> 呼叫 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 方法。 如需詳細資訊，請參閱 <<c0> [ 附加和卸離物件](http://msdn.microsoft.com/library/41d5c1ef-1b78-4502-aa10-7e1438d62d23)。  
  
 如果集合已經填滿或部分填滿，<xref:System.Data.Objects.DataClasses.EntityCollection%601.Attach%2A> 方法就會合併現有的實體與給定的實體。 給定的實體不會被視為相關實體的完整集合。  
  
 所有傳入的實體都必須處於 <xref:System.Data.EntityState.Unchanged> 或 <xref:System.Data.EntityState.Modified> 狀態中。 只有當狀態管理員已經在追蹤關聯性執行個體時，才允許使用處於 <xref:System.Data.EntityState.Deleted> 狀態中的物件。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="entities" /> collection is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The source object or an object in the <paramref name="entities" /> collection is <see langword="null" /> or is not in an <see cref="F:System.Data.EntityState.Unchanged" /> or <see cref="F:System.Data.EntityState.Modified" /> state.  -or-  The relationship cannot be defined based on the EDM metadata. This can occur when the association in the conceptual schema does not support a relationship between the two types.</exception>
      </Docs>
    </Member>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Attach(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.Attach(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(TEntity entity);" />
      <MemberSignature Language="F#" Value="override this.Attach : 'Entity -&gt; unit" Usage="entityCollection.Attach entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">The object being attached.</param>
        <summary>Defines a relationship between two attached objects in an object context.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Attach%2A> 方法是用來在兩個物件已經存在物件內容中時，定義這兩個物件之間的關聯性。 若要在已經定義關聯性的位置附加物件或物件圖形，請針對 <xref:System.Data.Objects.ObjectContext.Attach%2A> 呼叫 <xref:System.Data.Objects.ObjectContext> 方法。 若要建立與來源物件相關的新物件，請針對 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A> 呼叫 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 方法。 如需詳細資訊，請參閱 <<c0> [ 附加和卸離物件](http://msdn.microsoft.com/library/41d5c1ef-1b78-4502-aa10-7e1438d62d23)。  
  
 如果 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 已經載入物件，<xref:System.Data.Objects.DataClasses.EntityCollection%601.Attach%2A> 方法就會合併物件與 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 中的現有物件。  
  
 所附加的物件不會被視為相關實體物件的完整集合。  
  
 與這個 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 相關聯的物件以及附加至此物件的所有物件都必須處於 <xref:System.Data.EntityState.Unchanged> 或 <xref:System.Data.EntityState.Modified> 狀態中。  
  
 只有當 <xref:System.Data.EntityState.Deleted> 已經在追蹤關聯性執行個體時，才能附加處於 <xref:System.Data.Objects.ObjectStateManager> 狀態中的物件。  
  
   
  
## Examples  
 此範例為基礎。 若要執行此範例中的程式碼，您必須已經將 AdventureWorks Sales Model 加入到專案中，並設定您的專案使用 Entity Framework。 若要這樣做，請完成中的程序[如何： 手動設定 Entity Framework 專案](http://msdn.microsoft.com/library/73f6ae1d-b3b2-4577-aebd-ad5a75954e9e)並[如何： 手動定義模型和對應檔](http://msdn.microsoft.com/library/d4fd6864-f2a1-48f0-aa32-1e318775a99a)。  
  
 此範例中的中斷連結的集合附加`SalesOrderDetail`物件和中斷連結`SalesOrderHeader`物件到物件內容，並接著會定義之間的關聯性`SalesOrderHeader`物件和每個`SalesOrderDetail`物件。  
  
 [!code-csharp[DP ObjectServices Concepts#AttachRelatedObjects](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#attachrelatedobjects)]
 [!code-vb[DP ObjectServices Concepts#AttachRelatedObjects](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#attachrelatedobjects)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">When the <paramref name="entity" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">When the <paramref name="entity" /> cannot be related to the source object. This can occur when the association in the conceptual schema does not support a relationship between the two types.  -or-  When either object is <see langword="null" /> or is not in an <see cref="F:System.Data.EntityState.Unchanged" /> or <see cref="F:System.Data.EntityState.Modified" /> state.</exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="override this.Clear : unit -&gt; unit" Usage="entityCollection.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes all entities from the collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Clear%2A> 會執行下列動作：  
  
-   設定組<xref:System.Data.Objects.DataClasses.RelatedEnd.IsLoaded%2A>旗標設為`false`。  
  
-   從集合中移除所有實體。  
  
-   從 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 中斷連結已移除實體與 <xref:System.Data.Objects.ObjectStateManager> 擁有者之間的關聯性。  
  
-   從相關實體中移除 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 的擁有者。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (entity As TEntity) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(TEntity entity);" />
      <MemberSignature Language="F#" Value="abstract member Contains : 'Entity -&gt; bool&#xA;override this.Contains : 'Entity -&gt; bool" Usage="entityCollection.Contains entity" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Contains(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">The object to locate in the <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</param>
        <summary>Determines whether a specific object exists in the collection.</summary>
        <returns>
          <see langword="true" /> if the object is found in the <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Object.Equals%2A?displayProperty=nameWithType> 方法來比較指定的物件與已經位於集合中的物件。  
  
   
  
## Examples  
 此範例為基礎。 若要執行此範例中的程式碼，您必須已經將 AdventureWorks Sales Model 加入到專案中，並設定您的專案使用 Entity Framework。 若要這樣做，請完成中的程序[如何： 手動設定 Entity Framework 專案](http://msdn.microsoft.com/library/73f6ae1d-b3b2-4577-aebd-ad5a75954e9e)並[如何： 手動定義模型和對應檔](http://msdn.microsoft.com/library/d4fd6864-f2a1-48f0-aa32-1e318775a99a)。  
  
 此範例會執行下列動作：  
  
1.  建立兩個新的 `SalesOrderHeader` 實體並將它們加入至 `Contact` 實體。  
  
2.  從與 Contact 實體相關聯的 <xref:System.Data.Objects.DataClasses.RelationshipManager> 中取得所有相關端。  
  
3.  逐一查看 <xref:System.Data.Objects.DataClasses.IRelatedEnd> 的集合。  
  
4.  取得每個相關端的 <xref:System.Data.Objects.DataClasses.EntityCollection%601>。  
  
5.  使用 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Remove%2A> 方法，從集合中移除其中一個實體。  
  
6.  呼叫 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Contains%2A> 方法來判斷此物件是否已經從集合中移除了。  
  
7.  使用 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A> 方法來重新加入實體。  
  
 [!code-csharp[DP ObjectServices Concepts#IRelatedEnd_Add](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#irelatedend_add)]
 [!code-vb[DP ObjectServices Concepts#IRelatedEnd_Add](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#irelatedend_add)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (TEntity[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(!TEntity[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.CopyTo(`0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As TEntity(), arrayIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(cli::array &lt;TEntity&gt; ^ array, int arrayIndex);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : 'Entity[] * int -&gt; unit&#xA;override this.CopyTo : 'Entity[] * int -&gt; unit" Usage="entityCollection.CopyTo (array, arrayIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="TEntity[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">The array to copy to.</param>
        <param name="arrayIndex">The zero-based index in the array at which copying begins.</param>
        <summary>Copies all the contents of the collection to an array, starting at the specified index of the target array.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.DataClasses.EntityCollection`1.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Data.Objects.DataClasses.EntityCollection&lt;'Entity (requires 'Entity : null)&gt;.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of objects that are contained in the collection.</summary>
        <value>包含在 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> 中的項目數目。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Count%2A> 屬性會取得目前位於本機集合中的實體數目，但是不會在資料來源中反映集合的大小。 計數為零不一定表示相關集合是空的。 若要判斷資料來源中的集合大小，請呼叫 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Load%2A> 方法或在查詢路徑中包含相關物件。 如需詳細資訊，請參閱 <<c0> [ 載入相關物件](http://msdn.microsoft.com/library/452347d2-7b3b-44cd-9001-231299a28cb1)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSourceQuery">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;TEntity&gt; CreateSourceQuery ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!TEntity&gt; CreateSourceQuery() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.CreateSourceQuery" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateSourceQuery () As ObjectQuery(Of TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;TEntity&gt; ^ CreateSourceQuery();" />
      <MemberSignature Language="F#" Value="override this.CreateSourceQuery : unit -&gt; System.Data.Objects.ObjectQuery&lt;'Entity (requires 'Entity : null)&gt;" Usage="entityCollection.CreateSourceQuery " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an object query that, when it is executed, returns the same set of objects that exists in the current collection.</summary>
        <returns>An <see cref="T:System.Data.Objects.ObjectQuery`1" /> that represents the entity collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性是用來取得傳回相同物件集合之 <xref:System.Data.Objects.ObjectQuery%601> 的新執行個體。 這個方法可以當做更複雜聯結 (Join)、聯合 (Union) 或篩選查詢的起點，也可以使用 <xref:System.Data.Objects.MergeOption.NoTracking> 選項，以中斷連結的狀態傳回相同的物件。  
  
 <xref:System.Data.Objects.DataClasses.EntityCollection%601.CreateSourceQuery%2A> 用來篩選中的物件<xref:System.Data.Objects.DataClasses.EntityCollection%601>可讓您繫結的特定類型的物件。 如需詳細資訊，請參閱 <<c0> [ 將物件繫結至控制項](http://msdn.microsoft.com/library/2fd34855-929b-4303-a91e-4bb69d958f2b)。  
  
   
  
## Examples  
 此範例為基礎的修改版本。 這個版本支援以 `Course` 為抽象型別的一類一表 (Table-Per-Type) 繼承。 完成逐步解說中，若要修改的 School 模型，以支援使用本主題中的每一類一表繼承範例。  
  
 此範例示範如何使用<xref:System.Data.Objects.DataClasses.EntityCollection%601.CreateSourceQuery%2A>中的篩選物件<xref:System.Data.Objects.DataClasses.EntityCollection%601>和僅繫結至特定類型的物件。 如需此範例的完整版本，請參閱[如何： 將控制項繫結至衍生類型](http://msdn.microsoft.com/library/09730c14-3b7b-4563-af4a-7ecfa4e34bd5)。  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">When the object is in an <see cref="F:System.Data.EntityState.Added" /> state.  -or-  When the object is in a <see cref="F:System.Data.EntityState.Detached" /> state with a <see cref="T:System.Data.Objects.MergeOption" /> other than <see cref="F:System.Data.Objects.MergeOption.NoTracking" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;TEntity&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!TEntity&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerator&lt;TEntity&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="override this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'Entity (requires 'Entity : null)&gt;" Usage="entityCollection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an enumerator that is used to iterate through the objects in the collection.</summary>
        <returns>An <see cref="T:System.Collections.IEnumerator" /> that iterates through the set of values cached by <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.DataClasses.EntityCollection`1.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Data.Objects.DataClasses.EntityCollection&lt;'Entity (requires 'Entity : null)&gt;.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> is read-only.</summary>
        <value>一律傳回 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public override void Load (System.Data.Objects.MergeOption mergeOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Load(valuetype System.Data.Objects.MergeOption mergeOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.Load(System.Data.Objects.MergeOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Load(System::Data::Objects::MergeOption mergeOption);" />
      <MemberSignature Language="F#" Value="override this.Load : System.Data.Objects.MergeOption -&gt; unit" Usage="entityCollection.Load mergeOption" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mergeOption" Type="System.Data.Objects.MergeOption" />
      </Parameters>
      <Docs>
        <param name="mergeOption">Specifies how the objects in this collection should be merged with the objects that might have been returned from previous queries against the same <see cref="T:System.Data.Objects.ObjectContext" />.</param>
        <summary>Loads related objects into the collection, using the specified merge option.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
這個方法會呼叫內部`RelatedEnd.ValidateLoad`方法，然後再載入集合中，會驗證呼叫<xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A>有正確的條件。 `RelatedEnd.ValidateLoad`方法確認：

* 有效<xref:System.Data.Objects.ObjectContext>存在。
* 實體不在<xref:System.Data.EntityState.Deleted>狀態。
* <xref:System.Data.Objects.MergeOption> 針對<xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A>必須是<xref:System.Data.Objects.MergeOption.NoTracking>才是來源實體<xref:System.Data.Objects.MergeOption.NoTracking>。 如果來源實體已擷取的任何其他<xref:System.Data.Objects.MergeOption>，則<xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A><xref:System.Data.Objects.MergeOption>可以是任何內容，不過<xref:System.Data.Objects.MergeOption.NoTracking>(比方說，實體無法載入之後<xref:System.Data.Objects.MergeOption.OverwriteChanges>而<xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A>選項可以是<xref:System.Data.Objects.MergeOption.AppendOnly>).
* 如果`mergeOption`是<xref:System.Data.Objects.MergeOption.NoTracking>，<xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A>並不 「 已載入的實體和<xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A>非空的不追蹤上並不 「 <xref:System.Data.Objects.DataClasses.RelatedEnd>。
  
 當集合中的物件已經載入<xref:System.Data.Objects.ObjectContext>，則<xref:System.Data.Objects.DataClasses.EntityCollection%601.Load%2A>方法會強制<xref:System.Data.Objects.MergeOption>所指定`mergeOption`參數。 如需詳細資訊，請參閱 <<c0> [ 識別解析、 狀態管理和變更追蹤](http://msdn.microsoft.com/library/3bd49311-0e72-4ea4-8355-38fe57036ba0)。  
  
 若要明確載入相關的物件，您必須呼叫`Load`導覽屬性所傳回的相關端點上的方法。 一對多關聯性，呼叫<xref:System.Data.Objects.DataClasses.EntityCollection%601.Load%2A>方法<xref:System.Data.Objects.DataClasses.EntityCollection%601>。 一對一的關聯性中，呼叫<xref:System.Data.Objects.DataClasses.EntityReference%601.Load%2A>上<xref:System.Data.Objects.DataClasses.EntityReference%601>。 這樣就會將相關物件資料載入物件內容中。 您可以使用傳回的結果集合逐一列舉`foreach`迴圈 (`For Each...Next` Visual Basic 中) 有條件地呼叫`Load`方法<xref:System.Data.Objects.DataClasses.EntityReference%601>和<xref:System.Data.Objects.DataClasses.EntityCollection%601>結果中的每個實體的屬性。  
  
 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Load%2A>方法會載入相關的物件資料來源是否<xref:System.Data.Objects.DataClasses.RelatedEnd.IsLoaded%2A>是`true`。  
  
> [!NOTE]
>  於 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Load%2A> (C#) 或 `foreach` (Visual Basic) 列舉期間呼叫 `For Each` 方法時，物件服務會嘗試開啟新的資料讀取器。 除非您在連接字串中指定 `multipleactiveresultsets=true` 啟用多個現用結果集，否則這項作業將會失敗。 您也可以將查詢的結果載入 <xref:System.Collections.Generic.List%601> 集合中。 這樣會關閉資料讀取器，並且讓您列舉集合，以便載入參考的物件。  
  
 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Load%2A?displayProperty=nameWithType> 方法會與 <xref:System.Data.Objects.DataClasses.EntityReference%601.Load%2A?displayProperty=nameWithType> 方法同步處理。  
  
   
  
## Examples  
 此範例為基礎。 若要執行此範例中的程式碼，您必須已經將 AdventureWorks Sales Model 加入到專案中，並設定您的專案使用 Entity Framework。 若要這樣做，請完成中的程序[如何： 手動設定 Entity Framework 專案](http://msdn.microsoft.com/library/73f6ae1d-b3b2-4577-aebd-ad5a75954e9e)並[如何： 手動定義模型和對應檔](http://msdn.microsoft.com/library/d4fd6864-f2a1-48f0-aa32-1e318775a99a)。  
  
 這個範例會載入 `SalesOrderHeader` 實體的相關 `Contact` 物件。  
  
 [!code-csharp[DP ObjectServices Concepts#QueryWithLoad](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#querywithload)]
 [!code-vb[DP ObjectServices Concepts#QueryWithLoad](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#querywithload)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCollectionDeserialized">
      <MemberSignature Language="C#" Value="public void OnCollectionDeserialized (System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OnCollectionDeserialized(valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.OnCollectionDeserialized(System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnCollectionDeserialized (context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OnCollectionDeserialized(System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="member this.OnCollectionDeserialized : System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="entityCollection.OnCollectionDeserialized context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Serialization.OnDeserialized</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="context">The streaming context.</param>
        <summary>Used internally to deserialize entity objects.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSerializing">
      <MemberSignature Language="C#" Value="public void OnSerializing (System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OnSerializing(valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.OnSerializing(System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnSerializing (context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OnSerializing(System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="member this.OnSerializing : System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="entityCollection.OnSerializing context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Serialization.OnSerializing</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="context">The streaming context.</param>
        <summary>Used internally to serialize entity objects.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (entity As TEntity) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Remove(TEntity entity);" />
      <MemberSignature Language="F#" Value="override this.Remove : 'Entity -&gt; bool" Usage="entityCollection.Remove entity" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">The object to remove from the collection.</param>
        <summary>Removes an object from the collection and marks the relationship for deletion.</summary>
        <returns>
          <see langword="true" /> if item was successfully removed; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Remove%2A> 方法也會刪除來源物件與從集合中移除之物件之間的關聯性。 如果此關聯性具有參考完整性 (Referential Integrity) 條件約束 (Constraint)，針對相依物件呼叫 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Remove%2A> 方法就會同時將此關聯性和相依物件標記為待刪除。 發生這種情況的原因是，條件約束表示如果沒有父代 (Parent) 的關聯性，相依物件就無法存在。 如需詳細資訊，請參閱 < [ReferentialConstraint 項目 (CSDL)](http://msdn.microsoft.com/library/24f96a80-85b5-4f2e-a14c-0e3eb6796fa0)。  
  
 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Remove%2A> 傳回`false`時指定的物件不在集合中。  
  
   
  
## Examples  
 此範例為基礎。 若要執行此範例中的程式碼，您必須已經將 AdventureWorks Sales Model 加入到專案中，並設定您的專案使用 Entity Framework。 若要這樣做，請完成中的程序[如何： 手動設定 Entity Framework 專案](http://msdn.microsoft.com/library/73f6ae1d-b3b2-4577-aebd-ad5a75954e9e)並[如何： 手動定義模型和對應檔](http://msdn.microsoft.com/library/d4fd6864-f2a1-48f0-aa32-1e318775a99a)。  
  
 這個範例會使用 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Remove%2A> 方法，從集合中移除其中一個實體，然後呼叫 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Contains%2A> 方法來判斷此物件是否已經從集合中移除了。  
  
 [!code-csharp[DP ObjectServices Concepts#IRelatedEnd_Add](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#irelatedend_add)]
 [!code-vb[DP ObjectServices Concepts#IRelatedEnd_Add](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#irelatedend_add)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="entity" /> object is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The <paramref name="entity" /> object is not attached to the same object context.  -or-  The <paramref name="entity" /> object does not have a valid relationship manager.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an enumerator that is used to iterate through the set of values cached by <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</summary>
        <returns>An <see cref="T:System.Collections.IEnumerator" /> that iterates through the set of values cached by <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.ContainsListCollection">
      <MemberSignature Language="C#" Value="bool System.ComponentModel.IListSource.ContainsListCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.DataClasses.EntityCollection`1.System#ComponentModel#IListSource#ContainsListCollection" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ContainsListCollection As Boolean Implements IListSource.ContainsListCollection" />
      <MemberSignature Language="C++ CLI" Value="property bool System.ComponentModel.IListSource.ContainsListCollection { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Data.Objects.DataClasses.EntityCollection&lt;'Entity (requires 'Entity : null)&gt;.System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the related entity collection consists of collection objects.</summary>
        <value>這個屬性一律傳回<see langword="false" />因為<see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />包含物件和不是集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個成員是明確介面成員實作。 只有在 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 執行個體轉換成 <xref:System.ComponentModel.IListSource> 介面時，才能使用這個成員。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.GetList">
      <MemberSignature Language="C#" Value="System.Collections.IList IListSource.GetList ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IList System.ComponentModel.IListSource.GetList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.System#ComponentModel#IListSource#GetList" />
      <MemberSignature Language="VB.NET" Value="Function GetList () As IList Implements IListSource.GetList" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IList ^ System.ComponentModel.IListSource.GetList() = System::ComponentModel::IListSource::GetList;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the collection as an <see cref="T:System.Collections.IList" /> used for data binding.</summary>
        <returns>An <see cref="T:System.Collections.IList" /> of entity objects.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個成員是明確介面成員實作。 只有在 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 執行個體轉換成 <xref:System.ComponentModel.IListSource> 介面時，才能使用這個成員。  
  
 這個方法會啟用 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 的資料繫結。 繫結至集合的控制項會呼叫此方法。 如需詳細資訊，請參閱 <<c0> [ 將物件繫結至控制項](http://msdn.microsoft.com/library/2fd34855-929b-4303-a91e-4bb69d958f2b)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>