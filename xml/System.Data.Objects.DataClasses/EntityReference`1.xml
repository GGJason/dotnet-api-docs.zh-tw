<Type Name="EntityReference&lt;TEntity&gt;" FullName="System.Data.Objects.DataClasses.EntityReference&lt;TEntity&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="83776aa76c5e35e4c8dc4352a78a8a3107349cb1" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30389262" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class EntityReference&lt;TEntity&gt; : System.Data.Objects.DataClasses.EntityReference where TEntity : class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit EntityReference`1&lt;class TEntity&gt; extends System.Data.Objects.DataClasses.EntityReference" />
  <TypeSignature Language="DocId" Value="T:System.Data.Objects.DataClasses.EntityReference`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class EntityReference(Of TEntity)&#xA;Inherits EntityReference" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TEntity&gt;&#xA; where TEntity : classpublic ref class EntityReference sealed : System::Data::Objects::DataClasses::EntityReference" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TEntity">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Data.Objects.DataClasses.EntityReference</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.Serialization.DataContract</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="TEntity">參考的實體類型。</typeparam>
    <summary>表示多重性為零或一之關聯的相關端。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當相關端的多重性為零或一時，導覽屬性就會傳回 <xref:System.Data.Objects.DataClasses.EntityReference%601> 物件。 如需詳細資訊，請參閱[NavigationProperty 元素 (CSDL)](http://msdn.microsoft.com/library/5829a238-a50e-4c81-901d-7b54fc00f27e)。  
  
 <xref:System.Data.Objects.DataClasses.EntityReference%601> 物件可能會在關聯性 (Relationship) 的另一端具有對應的 <xref:System.Data.Objects.DataClasses.EntityCollection%601> (一對多關聯性 (One-To-Many Relationship)) 或 <xref:System.Data.Objects.DataClasses.EntityReference%601> (一對一關聯性 (One-To-One Relationship))。 當 <xref:System.Data.Objects.DataClasses.EntityReference%601> 和 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 模型化相同關聯性的相對端時，關聯性的完整性就會在物件層級維護。  
  
 這個類別無法被繼承。  
  
   
  
## Examples  
 本範例將示範如何使用 <xref:System.Data.Objects.DataClasses.EntityReference%601> 物件來變更 `SalesOrderHeader` 物件與代表訂單送貨地址之相關 `Address` 物件間的關聯性。  
  
 [!code-csharp[DP ObjectServices Concepts#ChangeObjectRelationship](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#changeobjectrelationship)]
 [!code-vb[DP ObjectServices Concepts#ChangeObjectRelationship](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#changeobjectrelationship)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityReference ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityReference`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EntityReference();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>建立 <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> 的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Attach(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityReference`1.Attach(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(TEntity entity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">正在附加的物件。</param>
        <summary>在物件內容中，建立兩個物件之間的多對一或一對一關聯性。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.DataClasses.EntityReference%601.Attach%2A> 方法是用來在物件與相關物件已經附加至物件內容時，定義這兩個物件之間的關聯性。 如果相關物件尚未附加至物件內容，請將相關物件設定為 <xref:System.Data.Objects.DataClasses.EntityReference%601.Value%2A> 屬性。 當這兩個物件都中斷連結時，您也可以透過將相關物件設定為 <xref:System.Data.Objects.DataClasses.EntityReference%601.Value%2A> 屬性，然後在物件圖形中附加根物件，定義其關聯性。 如需詳細資訊，請參閱[附加和卸離物件](http://msdn.microsoft.com/library/41d5c1ef-1b78-4502-aa10-7e1438d62d23)。  
  
 與這個 <xref:System.Data.Objects.DataClasses.EntityReference%601> 相關聯的物件以及附加至此物件的所有物件都必須處於 <xref:System.Data.EntityState.Unchanged> 或 <xref:System.Data.EntityState.Modified> 狀態中。  
  
 只有當 <xref:System.Data.EntityState.Deleted> 已經在追蹤關聯性執行個體時，才能附加處於 <xref:System.Data.Objects.ObjectStateManager> 狀態中的物件。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">當 <paramref name="entity" /> 是 <see langword="null" /> 時。</exception>
        <exception cref="T:System.InvalidOperationException">當 <paramref name="entity" /> 無法與目前的相關端相關聯時。 如果概念結構描述中的關聯不支援這兩個型別之間的關聯性，就可能會發生這種情況。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateSourceQuery">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;TEntity&gt; CreateSourceQuery ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!TEntity&gt; CreateSourceQuery() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityReference`1.CreateSourceQuery" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateSourceQuery () As ObjectQuery(Of TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;TEntity&gt; ^ CreateSourceQuery();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>建立傳回相關物件的對等物件查詢。</summary>
        <returns>傳回相關物件的 <see cref="T:System.Data.Objects.ObjectQuery`1" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法是用來取得 <xref:System.Data.Objects.ObjectQuery%601> 的新執行個體 (Instance)，而且當此執行個體執行時，就會傳回相關物件。 這個方法可以當做更複雜聯結 (Join)、聯合 (Union) 或篩選查詢的起點，也可以使用 <xref:System.Data.Objects.MergeOption.NoTracking> 選項，以中斷連結的狀態傳回參考的物件。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">當物件處於 <see cref="F:System.Data.EntityState.Added" /> 狀態中。  
  
 -或-  
  
 當物件處於 <see cref="F:System.Data.EntityState.Detached" /> 狀態中，而且含有 <see cref="P:System.Data.Objects.ObjectQuery.MergeOption" /> 而非 <see cref="F:System.Data.Objects.MergeOption.NoTracking" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public override void Load (System.Data.Objects.MergeOption mergeOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Load(valuetype System.Data.Objects.MergeOption mergeOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityReference`1.Load(System.Data.Objects.MergeOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Load(System::Data::Objects::MergeOption mergeOption);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mergeOption" Type="System.Data.Objects.MergeOption" />
      </Parameters>
      <Docs>
        <param name="mergeOption">指定如果此物件已經存在 <see cref="T:System.Data.Objects.ObjectContext" /> 中，應該如何傳回此物件。</param>
        <summary>使用指定的合併選項，載入這個 <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> 的相關物件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法是用來載入相關物件。  
  
 載入時，就會從 <xref:System.Data.Objects.DataClasses.EntityReference%601.Value%2A> 屬性中存取相關物件。  
  
 如果要明確載入相關物件，請在導覽屬性所傳回的相關端點上呼叫 `Load` 方法。 如果是一對多關聯性，請在 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Load%2A> 上呼叫 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 方法，如果是一對一關聯性，請在 <xref:System.Data.Objects.DataClasses.EntityReference%601.Load%2A> 上呼叫 <xref:System.Data.Objects.DataClasses.EntityReference%601>。 這樣就會將相關物件資料載入物件內容中。 當查詢傳回結果時，可以透過使用物件的集合進行列舉`foreach`迴圈 (`For Each...Next`在 Visual Basic 中)，有條件地呼叫`Load`方法<xref:System.Data.Objects.DataClasses.EntityReference%601>和<xref:System.Data.Objects.DataClasses.EntityCollection%601>中每個實體的屬性結果。  
  
 <xref:System.Data.Objects.DataClasses.EntityReference%601.Load%2A>方法會載入相關的物件資料來源是否<xref:System.Data.Objects.DataClasses.RelatedEnd.IsLoaded%2A>是`true`。  
  
> [!NOTE]
>  於 <xref:System.Data.Objects.DataClasses.EntityReference%601.Load%2A> (C#) 或 `foreach` (Visual Basic) 列舉期間呼叫 `For Each` 方法時，物件服務會嘗試開啟新的資料讀取器。 除非您在連接字串中指定 `multipleactiveresultsets=true` 啟用多個現用結果集，否則這項作業將會失敗。 您也可以將查詢的結果載入 <xref:System.Collections.Generic.List%601> 集合中。 這樣會關閉資料讀取器，並且讓您列舉集合，以便載入參考的物件。  
 
這個方法都會呼叫內部`RelatedEnd.ValidateLoad`方法，然後再載入相關的物件，因為它會驗證呼叫<xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A>具有正確的條件。 `RelatedEnd.ValidateLoad`方法檢查：

* 有效<xref:System.Data.Objects.ObjectContext>存在。
* 實體不在<xref:System.Data.EntityState.Deleted>狀態。
* <xref:System.Data.Objects.MergeOption> 如<xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A>必須<xref:System.Data.Objects.MergeOption.NoTracking>如果且只有來源實體<xref:System.Data.Objects.MergeOption.NoTracking>。 如果來源實體已擷取的任何其他<xref:System.Data.Objects.MergeOption>、 <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A> <xref:System.Data.Objects.MergeOption>可以有任何作用，是<xref:System.Data.Objects.MergeOption.NoTracking>(例如，實體可能已載入與<xref:System.Data.Objects.MergeOption.OverwriteChanges>和<xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A>選項可以是<xref:System.Data.Objects.MergeOption.AppendOnly>).
* 如果`mergeOption`是<xref:System.Data.Objects.MergeOption.NoTracking>，<xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A>已經載入的實體上並不 「 和<xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A>上非空白、 不追蹤不呼叫<xref:System.Data.Objects.DataClasses.RelatedEnd>。

 當相關的物件已經載入<xref:System.Data.Objects.ObjectContext>、<xref:System.Data.Objects.DataClasses.EntityReference%601.Load%2A>方法會強制<xref:System.Data.Objects.MergeOption>所指定`mergeOption`參數。 如需詳細資訊，請參閱[識別解析、 狀態管理和變更追蹤](http://msdn.microsoft.com/library/3bd49311-0e72-4ea4-8355-38fe57036ba0)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> 的來源為 <see langword="null" />。  
  
 -或-  
  
 查詢傳回多個相關端。  
  
 -或-  
  
 查詢傳回零個相關端，但是預期有一個相關端。</exception>
      </Docs>
    </Member>
    <Member MemberName="OnRefDeserialized">
      <MemberSignature Language="C#" Value="public void OnRefDeserialized (System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OnRefDeserialized(valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityReference`1.OnRefDeserialized(System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnRefDeserialized (context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OnRefDeserialized(System::Runtime::Serialization::StreamingContext context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Serialization.OnDeserialized</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="context">序列化的資料流。</param>
        <summary>這個方法是在內部用來序列化相關實體物件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSerializing">
      <MemberSignature Language="C#" Value="public void OnSerializing (System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OnSerializing(valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityReference`1.OnSerializing(System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnSerializing (context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OnSerializing(System::Runtime::Serialization::StreamingContext context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Serialization.OnSerializing</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="context">序列化的資料流。</param>
        <summary>這個方法是在內部用來序列化相關實體物件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public TEntity Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TEntity Value" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.DataClasses.EntityReference`1.Value" />
      <MemberSignature Language="VB.NET" Value="Public Property Value As TEntity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TEntity Value { TEntity get(); void set(TEntity value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Xml.Serialization.SoapIgnore</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Xml.Serialization.XmlIgnore</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TEntity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定這個 <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> 所傳回的相關物件。</summary>
        <value>這個 <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> 所傳回的物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果所設定的值與目前的值相同，就不會指派任何值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>