<Type Name="RelatedEnd" FullName="System.Data.Objects.DataClasses.RelatedEnd">
  <Metadata><Meta Name="ms.openlocfilehash" Value="80296fd4995581ac144fc18b6dd57a6d4abbf0e7" /><Meta Name="ms.sourcegitcommit" Value="adc8598fd19d91438cacaa8fa7ce613e28c8218e" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="12/11/2018" /><Meta Name="ms.locfileid" Value="53227578" /></Metadata><TypeSignature Language="C#" Value="public abstract class RelatedEnd : System.Data.Objects.DataClasses.IRelatedEnd" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit RelatedEnd extends System.Object implements class System.Data.Objects.DataClasses.IRelatedEnd" />
  <TypeSignature Language="DocId" Value="T:System.Data.Objects.DataClasses.RelatedEnd" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class RelatedEnd&#xA;Implements IRelatedEnd" />
  <TypeSignature Language="C++ CLI" Value="public ref class RelatedEnd abstract : System::Data::Objects::DataClasses::IRelatedEnd" />
  <TypeSignature Language="F#" Value="type RelatedEnd = class&#xA;    interface IRelatedEnd" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Data.Objects.DataClasses.IRelatedEnd</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.Serialization.DataContract</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示實作相關端之通用功能的基底類別 (Base Class)。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.DataClasses.RelatedEnd> 是 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 類別 (Class) 和 <xref:System.Data.Objects.DataClasses.EntityReference%601> 類別的基底類別。  
  
 <xref:System.Data.Objects.DataClasses.RelatedEnd> 類別會實作在 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 與 <xref:System.Data.Objects.DataClasses.EntityReference%601> 類別之間共用的功能。  
  
 這個類別不打算直接用於您的程式碼。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AssociationChanged">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.CollectionChangeEventHandler AssociationChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.CollectionChangeEventHandler AssociationChanged" />
      <MemberSignature Language="DocId" Value="E:System.Data.Objects.DataClasses.RelatedEnd.AssociationChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AssociationChanged As CollectionChangeEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::CollectionChangeEventHandler ^ AssociationChanged;" />
      <MemberSignature Language="F#" Value="member this.AssociationChanged : System.ComponentModel.CollectionChangeEventHandler " Usage="member this.AssociationChanged : System.ComponentModel.CollectionChangeEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.CollectionChangeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>對相關端進行變更時發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.DataClasses.RelatedEnd.AssociationChanged> 事件是由下列方法引發的：  
  
-   <xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A?displayProperty=nameWithType>  
  
-   <xref:System.Data.Objects.DataClasses.EntityCollection%601.Remove%2A?displayProperty=nameWithType>  
  
-   <xref:System.Data.Objects.DataClasses.EntityCollection%601.Load%2A?displayProperty=nameWithType>  
  
-   <xref:System.Data.Objects.DataClasses.EntityReference%601.Load%2A?displayProperty=nameWithType>  
  
-   <xref:System.Data.Objects.DataClasses.EntityCollection%601.Attach%2A?displayProperty=nameWithType>  
  
-   <xref:System.Data.Objects.DataClasses.EntityCollection%601.Clear%2A?displayProperty=nameWithType>  
  
 事件可能會在大量作業 (例如 `Load`、<xref:System.Data.Objects.DataClasses.EntityCollection%601.Attach%2A> 和 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Clear%2A>) 期間隱藏。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attach&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="protected internal void Attach&lt;TEntity&gt; (System.Collections.Generic.IEnumerable&lt;TEntity&gt; entities, bool allowCollection);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void Attach&lt;TEntity&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TEntity&gt; entities, bool allowCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.RelatedEnd.Attach``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub Attach(Of TEntity) (entities As IEnumerable(Of TEntity), allowCollection As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA;generic &lt;typename TEntity&gt;&#xA; void Attach(System::Collections::Generic::IEnumerable&lt;TEntity&gt; ^ entities, bool allowCollection);" />
      <MemberSignature Language="F#" Value="member this.Attach : seq&lt;'Entity&gt; * bool -&gt; unit" Usage="relatedEnd.Attach (entities, allowCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TEntity&gt;" />
        <Parameter Name="allowCollection" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">要附加之實體物件的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 集合類型。</typeparam>
        <param name="entities">實體物件的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 集合。</param>
        <param name="allowCollection">指定正在附加的物件是否屬於集合的一部分。</param>
        <summary>定義兩個所附加物件之間的關聯性。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
`Attach<TEntity>(IEnumerable<TEntity>, Boolean)` 方法是用來在物件與相關物件已經附加至物件內容時，定義這兩個物件之間的關聯性。 如果相關物件尚未附加至物件內容，請將相關物件設定為 <xref:System.Data.Objects.DataClasses.EntityReference%601.Value> 的 <xref:System.Data.Objects.DataClasses.EntityReference%601> 屬性或針對 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A> 呼叫 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 方法。 當這兩個物件都中斷連結時，您也可以透過將相關物件設定為 <xref:System.Data.Objects.DataClasses.EntityReference%601.Value> 的 <xref:System.Data.Objects.DataClasses.EntityReference%601> 屬性或針對 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A> 呼叫 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 方法，然後在物件圖形中附加根物件 (Root Object)，定義其關聯性。 如需詳細資訊，請參閱 <<c0> [ 附加和卸離物件](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896271(v=vs.100))。

在附加作業期間，物件服務會針對相關端呼叫 `Attach<TEntity>(IEnumerable<TEntity>, Boolean)` 方法。

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.RelatedEnd.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="relatedEnd.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Objects.DataClasses.IRelatedEnd.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回 <see cref="T:System.Collections.IEnumerator" />，它會逐一查看相關物件的集合。</summary>
        <returns><see cref="T:System.Collections.IEnumerator" />，可逐一查看相關物件的集合。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLoaded">
      <MemberSignature Language="C#" Value="public bool IsLoaded { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLoaded" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.DataClasses.RelatedEnd.IsLoaded" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLoaded As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLoaded { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsLoaded : bool" Usage="System.Data.Objects.DataClasses.RelatedEnd.IsLoaded" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.Objects.DataClasses.IRelatedEnd.IsLoaded</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Xml.Serialization.SoapIgnore</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Xml.Serialization.XmlIgnore</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，這個值指出所有相關物件是否都已經載入。</summary>
        <value>如果相關端包含資料庫中的所有相關物件，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫<xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A>方法會設定<xref:System.Data.Objects.DataClasses.RelatedEnd.IsLoaded%2A>旗標設為`true`。  
  
 呼叫<xref:System.Data.Objects.DataClasses.EntityCollection%601.Clear%2A>方法<xref:System.Data.Objects.DataClasses.EntityCollection%601>設定<xref:System.Data.Objects.DataClasses.RelatedEnd.IsLoaded%2A>至`false`。  
  
 如果相關端包含在查詢路徑中，也可能會載入 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 或 <xref:System.Data.Objects.DataClasses.EntityReference%601>。 如需有關範圍的詳細資訊，請參閱 <<c0> [ 載入相關物件](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896272(v=vs.100))。  
  
 `Load`方法<xref:System.Data.Objects.DataClasses.EntityCollection%601>並<xref:System.Data.Objects.DataClasses.EntityReference%601>載入相關物件資料來源是否<xref:System.Data.Objects.DataClasses.RelatedEnd.IsLoaded%2A>是`true`。  
  
 當物件中斷連結時，<xref:System.Data.Objects.DataClasses.RelatedEnd.IsLoaded%2A>旗標已從`false`至`true`。  
  
 若要確保相關的端是完全載入之前進行處理，您應該檢查是否<xref:System.Data.Objects.DataClasses.RelatedEnd.IsLoaded%2A>是`false`。 如果<xref:System.Data.Objects.DataClasses.RelatedEnd.IsLoaded%2A>已`false`，您應該呼叫<xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A>方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>在衍生類別中覆寫時，將一個或多個相關物件載入本機集合或參考中。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Load() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.RelatedEnd.Load" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Load();" />
      <MemberSignature Language="F#" Value="abstract member Load : unit -&gt; unit&#xA;override this.Load : unit -&gt; unit" Usage="relatedEnd.Load " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Objects.DataClasses.IRelatedEnd.Load</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在衍生類別中覆寫時，使用預設合併選項，將一個或多個相關物件載入相關端中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設合併選項為 <xref:System.Data.Objects.MergeOption.AppendOnly> (適用於追蹤的物件) 或 <xref:System.Data.Objects.MergeOption.NoTracking> (當物件並未在 <xref:System.Data.Objects.ObjectStateManager> 中追蹤時)。 若要指定合併選項以外<xref:System.Data.Objects.MergeOption.AppendOnly>，呼叫`Load`方法<xref:System.Data.Objects.DataClasses.EntityCollection%601>或<xref:System.Data.Objects.DataClasses.EntityReference%601>針對採用特定<xref:System.Data.Objects.MergeOption>參數。  
  
 呼叫<xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A>方法會設定<xref:System.Data.Objects.DataClasses.RelatedEnd.IsLoaded%2A>旗標設為`true`。  
  
 <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A>方法會載入相關的物件資料來源是否<xref:System.Data.Objects.DataClasses.RelatedEnd.IsLoaded%2A>是`true`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">當來源物件是使用 <see cref="F:System.Data.Objects.MergeOption.NoTracking" /> 查詢所擷取的，而且 <see cref="T:System.Data.Objects.MergeOption" /> 不是 <see cref="F:System.Data.Objects.MergeOption.NoTracking" /> 或者相關物件已經載入時。  
  
-或- 
當來源物件沒有附加至 <see cref="T:System.Data.Objects.ObjectContext" /> 時。  
  
-或- 
當來源物件正在追蹤中，但是處於 <see cref="F:System.Data.EntityState.Added" /> 或 <see cref="F:System.Data.EntityState.Deleted" /> 狀態中，或者用於 <see cref="T:System.Data.Objects.MergeOption" /> 的 <see cref="M:System.Data.Objects.DataClasses.RelatedEnd.Load" /> 是 <see cref="F:System.Data.Objects.MergeOption.NoTracking" /> 時。</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public abstract void Load (System.Data.Objects.MergeOption mergeOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Load(valuetype System.Data.Objects.MergeOption mergeOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.RelatedEnd.Load(System.Data.Objects.MergeOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Load(System::Data::Objects::MergeOption mergeOption);" />
      <MemberSignature Language="F#" Value="abstract member Load : System.Data.Objects.MergeOption -&gt; unit" Usage="relatedEnd.Load mergeOption" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Objects.DataClasses.IRelatedEnd.Load(System.Data.Objects.MergeOption)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mergeOption" Type="System.Data.Objects.MergeOption" />
      </Parameters>
      <Docs>
        <param name="mergeOption">將物件合併至現有的 <see cref="T:System.Data.Objects.MergeOption" /> 時要使用的 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />。</param>
        <summary>在衍生類別 (Derived Class) 中覆寫時，使用指定的合併選項，從相關端中載入一個或多個物件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 和 <xref:System.Data.Objects.DataClasses.EntityReference%601> 都會覆寫這個方法來載入相關物件。 `Load` 會呼叫來從導覽屬性所公開的相關端中明確載入相關的物件。 如需詳細資訊，請參閱 <<c0> [ 載入相關物件](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896272(v=vs.100))。  
  
 呼叫<xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A>方法會設定<xref:System.Data.Objects.DataClasses.RelatedEnd.IsLoaded%2A>旗標設為`true`。  
  
 <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A>方法會載入相關的物件資料來源是否<xref:System.Data.Objects.DataClasses.RelatedEnd.IsLoaded%2A>是`true`。  
  
 預設合併選項為 <xref:System.Data.Objects.MergeOption.AppendOnly> (適用於追蹤的物件) 或 <xref:System.Data.Objects.MergeOption.NoTracking> (當物件並未在 <xref:System.Data.Objects.ObjectStateManager> 中追蹤時)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">當來源物件是使用 <see cref="F:System.Data.Objects.MergeOption.NoTracking" /> 查詢所擷取的，而且 <see cref="T:System.Data.Objects.MergeOption" /> 不是 <see cref="F:System.Data.Objects.MergeOption.NoTracking" /> 或者相關物件已經載入時。  
  
-或- 
當來源物件沒有附加至 <see cref="T:System.Data.Objects.ObjectContext" /> 時。  
  
-或- 
當來源物件正在追蹤中，但是處於 <see cref="F:System.Data.EntityState.Added" /> 或 <see cref="F:System.Data.EntityState.Deleted" /> 狀態中，或者用於 <see cref="T:System.Data.Objects.MergeOption" /> 的 <see cref="M:System.Data.Objects.DataClasses.RelatedEnd.Load" /> 是 <see cref="F:System.Data.Objects.MergeOption.NoTracking" /> 時。</exception>
      </Docs>
    </Member>
    <Member MemberName="Merge&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="protected void Merge&lt;TEntity&gt; (System.Collections.Generic.IEnumerable&lt;TEntity&gt; collection, System.Data.Objects.MergeOption mergeOption, bool setIsLoaded);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void Merge&lt;TEntity&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TEntity&gt; collection, valuetype System.Data.Objects.MergeOption mergeOption, bool setIsLoaded) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.RelatedEnd.Merge``1(System.Collections.Generic.IEnumerable{``0},System.Data.Objects.MergeOption,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA;generic &lt;typename TEntity&gt;&#xA; void Merge(System::Collections::Generic::IEnumerable&lt;TEntity&gt; ^ collection, System::Data::Objects::MergeOption mergeOption, bool setIsLoaded);" />
      <MemberSignature Language="F#" Value="member this.Merge : seq&lt;'Entity&gt; * System.Data.Objects.MergeOption * bool -&gt; unit" Usage="relatedEnd.Merge (collection, mergeOption, setIsLoaded)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IEnumerable&lt;TEntity&gt;" />
        <Parameter Name="mergeOption" Type="System.Data.Objects.MergeOption" />
        <Parameter Name="setIsLoaded" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">要合併之實體物件的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 集合類型。</typeparam>
        <param name="collection">要加入至這個相關端之實體物件的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 集合。</param>
        <param name="mergeOption">將物件合併至現有的 <see cref="T:System.Data.Objects.MergeOption" /> 時要使用的 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />。</param>
        <param name="setIsLoaded">指出相關物件的集合是否完整而且與伺服器相符。 <see cref="M:System.Data.Objects.DataClasses.EntityCollection`1.Load(System.Data.Objects.MergeOption)" /> 等作業會將 setIsLoaded 設定為 <see langword="true" />，但 <see cref="Overload:System.Data.Objects.DataClasses.EntityCollection`1.Attach" /> 會將它設為 <see langword="false" />。</param>
        <summary>將相關實體合併至本機 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> 中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
在關聯性作業期間，物件服務會呼叫 `Merge<TEntity>` 方法。

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDeserialized">
      <MemberSignature Language="C#" Value="public void OnDeserialized (System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OnDeserialized(valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.RelatedEnd.OnDeserialized(System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnDeserialized (context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OnDeserialized(System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="member this.OnDeserialized : System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="relatedEnd.OnDeserialized context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.Serialization.OnDeserialized</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="context">序列化的資料流。</param>
        <summary>在內部搭配 <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> 執行個體用來還原序列化實體物件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RelationshipName">
      <MemberSignature Language="C#" Value="public string RelationshipName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RelationshipName" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.DataClasses.RelatedEnd.RelationshipName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RelationshipName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RelationshipName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RelationshipName : string" Usage="System.Data.Objects.DataClasses.RelatedEnd.RelationshipName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.Objects.DataClasses.IRelatedEnd.RelationshipName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Xml.Serialization.SoapIgnore</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Xml.Serialization.XmlIgnore</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得這個相關端所參與之關聯性的名稱。</summary>
        <value>這個 <see cref="T:System.Data.Objects.DataClasses.RelatedEnd" /> 所參與之關聯性的名稱。 此關聯性名稱不符合命名空間。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RelationshipSet">
      <MemberSignature Language="C#" Value="public System.Data.Metadata.Edm.RelationshipSet RelationshipSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Metadata.Edm.RelationshipSet RelationshipSet" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.DataClasses.RelatedEnd.RelationshipSet" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RelationshipSet As RelationshipSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Metadata::Edm::RelationshipSet ^ RelationshipSet { System::Data::Metadata::Edm::RelationshipSet ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RelationshipSet : System.Data.Metadata.Edm.RelationshipSet" Usage="System.Data.Objects.DataClasses.RelatedEnd.RelationshipSet" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.Objects.DataClasses.IRelatedEnd.RelationshipSet</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Xml.Serialization.SoapIgnore</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Xml.Serialization.XmlIgnore</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Metadata.Edm.RelationshipSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得相關端中繼資料的參考。</summary>
        <value>包含關聯性端點中繼資料的 <see cref="T:System.Data.Metadata.Edm.RelationshipSet" /> 物件。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceRoleName">
      <MemberSignature Language="C#" Value="public string SourceRoleName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SourceRoleName" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.DataClasses.RelatedEnd.SourceRoleName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SourceRoleName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SourceRoleName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SourceRoleName : string" Usage="System.Data.Objects.DataClasses.RelatedEnd.SourceRoleName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.Objects.DataClasses.IRelatedEnd.SourceRoleName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Xml.Serialization.SoapIgnore</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Xml.Serialization.XmlIgnore</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得位於關聯性來源端的角色名稱。</summary>
        <value>成為角色名稱的 <see cref="T:System.String" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 角色名稱由`Role`屬性的`End`概念模型中定義此關聯性的關聯中的項目。 如需詳細資訊，請參閱 [Association 項目 (CSDL)](https://msdn.microsoft.com/library/c305169a-8af7-432f-9ba7-800a163aed41)。  
  
   
  
## Examples  
 本主題中的範例根據[AdventureWorks Sales Model](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)，這由產生[Entity Data Model 精靈](https://msdn.microsoft.com/library/423ec9a7-5464-43b7-a7ef-9f5f000848b5)。  
  
 下列範例會將新`SalesOrderHeader`實體`Contact`實體。 然後，它會取得所有相關的端從`Contact`實體並顯示關聯性名稱、 來源角色名稱和每個相關端的目標角色名稱。  
  
 [!code-csharp[DP ObjectServices Concepts#IRelatedEnd](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#irelatedend)]
 [!code-vb[DP ObjectServices Concepts#IRelatedEnd](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#irelatedend)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.Objects.DataClasses.IRelatedEnd.SourceRoleName" />
      </Docs>
    </Member>
    <MemberGroup MemberName="System.Data.Objects.DataClasses.IRelatedEnd.Add">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將物件加入至相關端。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="System.Data.Objects.DataClasses.IRelatedEnd.Add">
      <MemberSignature Language="C#" Value="void IRelatedEnd.Add (System.Data.Objects.DataClasses.IEntityWithRelationships entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Objects.DataClasses.IRelatedEnd.Add(class System.Data.Objects.DataClasses.IEntityWithRelationships entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#Add(System.Data.Objects.DataClasses.IEntityWithRelationships)" />
      <MemberSignature Language="VB.NET" Value="Sub Add (entity As IEntityWithRelationships) Implements IRelatedEnd.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Objects.DataClasses.IRelatedEnd.Add(System::Data::Objects::DataClasses::IEntityWithRelationships ^ entity) = System::Data::Objects::DataClasses::IRelatedEnd::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Objects.DataClasses.IRelatedEnd.Add(System.Data.Objects.DataClasses.IEntityWithRelationships)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Data.Objects.DataClasses.IEntityWithRelationships" />
      </Parameters>
      <Docs>
        <param name="entity">要加入集合的物件。 這個物件必須實作 <see cref="T:System.Data.Objects.DataClasses.IEntityWithRelationships" /> 介面。</param>
        <summary>將物件加入至相關端。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個成員是明確介面成員實作， 只有在 <xref:System.Data.Objects.DataClasses.RelatedEnd> 執行個體轉換成 <xref:System.Data.Objects.DataClasses.IRelatedEnd> 介面時，才能使用這個成員。  
  
 <xref:System.Data.Objects.DataClasses.RelatedEnd.System%23Data%23Objects%23DataClasses%23IRelatedEnd%23Add%2A>方法只為了與舊版.NET Framework 的相容。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Objects.DataClasses.IRelatedEnd.Add">
      <MemberSignature Language="C#" Value="void IRelatedEnd.Add (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Objects.DataClasses.IRelatedEnd.Add(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Add (entity As Object) Implements IRelatedEnd.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Objects.DataClasses.IRelatedEnd.Add(System::Object ^ entity) = System::Data::Objects::DataClasses::IRelatedEnd::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Objects.DataClasses.IRelatedEnd.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">要加入至相關端的實體執行個體。</param>
        <summary>將物件加入至相關端。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果來源實體物件附加至快取，則所有已連線的端點會新增至物件快取，而且其對應的關聯性也會新增至<xref:System.Data.Objects.ObjectStateManager>。 <xref:System.Data.Objects.DataClasses.RelatedEnd>也固定的關聯性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="System.Data.Objects.DataClasses.IRelatedEnd.Attach">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>在相關端附加物件。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="System.Data.Objects.DataClasses.IRelatedEnd.Attach">
      <MemberSignature Language="C#" Value="void IRelatedEnd.Attach (System.Data.Objects.DataClasses.IEntityWithRelationships entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Objects.DataClasses.IRelatedEnd.Attach(class System.Data.Objects.DataClasses.IEntityWithRelationships entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#Attach(System.Data.Objects.DataClasses.IEntityWithRelationships)" />
      <MemberSignature Language="VB.NET" Value="Sub Attach (entity As IEntityWithRelationships) Implements IRelatedEnd.Attach" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Objects.DataClasses.IRelatedEnd.Attach(System::Data::Objects::DataClasses::IEntityWithRelationships ^ entity) = System::Data::Objects::DataClasses::IRelatedEnd::Attach;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Objects.DataClasses.IRelatedEnd.Attach(System.Data.Objects.DataClasses.IEntityWithRelationships)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Data.Objects.DataClasses.IEntityWithRelationships" />
      </Parameters>
      <Docs>
        <param name="entity">正在附加的物件。</param>
        <summary>在相關端附加物件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個成員是明確介面成員實作， 只有在 <xref:System.Data.Objects.DataClasses.RelatedEnd> 執行個體轉換成 <xref:System.Data.Objects.DataClasses.IRelatedEnd> 介面時，才能使用這個成員。  
  
 <xref:System.Data.Objects.DataClasses.RelatedEnd.System%23Data%23Objects%23DataClasses%23IRelatedEnd%23Attach%2A>方法只為了與舊版.NET Framework 的相容。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Objects.DataClasses.IRelatedEnd.Attach">
      <MemberSignature Language="C#" Value="void IRelatedEnd.Attach (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Objects.DataClasses.IRelatedEnd.Attach(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#Attach(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Attach (entity As Object) Implements IRelatedEnd.Attach" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Objects.DataClasses.IRelatedEnd.Attach(System::Object ^ entity) = System::Data::Objects::DataClasses::IRelatedEnd::Attach;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Objects.DataClasses.IRelatedEnd.Attach(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">要附加至相關端的實體執行個體。</param>
        <summary>將物件附加至相關端。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果相關的端已經附加到其某些實體，就會合併現有的實體與新的實體。 新的實體不會被視為相關的實體物件的完整集合。  
  
 來源實體物件和所有傳入的實體物件必須位於<xref:System.Data.EntityState.Unchanged>或<xref:System.Data.EntityState.Modified>狀態。 只有在狀態管理員已經在追蹤關聯性執行個體時，才允許刪除的項目。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Objects.DataClasses.IRelatedEnd.CreateSourceQuery">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerable IRelatedEnd.CreateSourceQuery ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerable System.Data.Objects.DataClasses.IRelatedEnd.CreateSourceQuery() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#CreateSourceQuery" />
      <MemberSignature Language="VB.NET" Value="Function CreateSourceQuery () As IEnumerable Implements IRelatedEnd.CreateSourceQuery" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerable ^ System.Data.Objects.DataClasses.IRelatedEnd.CreateSourceQuery() = System::Data::Objects::DataClasses::IRelatedEnd::CreateSourceQuery;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Objects.DataClasses.IRelatedEnd.CreateSourceQuery</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回 <see cref="T:System.Collections.IEnumerable" />，它代表屬於相關端的物件。</summary>
        <returns><see cref="T:System.Collections.IEnumerable" />，它代表屬於相關端的物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個成員是明確介面成員實作， 只有在 <xref:System.Data.Objects.DataClasses.RelatedEnd> 執行個體轉換成 <xref:System.Data.Objects.DataClasses.IRelatedEnd> 介面時，才能使用這個成員。  
  
 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 和 <xref:System.Data.Objects.DataClasses.EntityReference%601> 都會覆寫 <xref:System.Data.Objects.DataClasses.RelatedEnd.System%23Data%23Objects%23DataClasses%23IRelatedEnd%23CreateSourceQuery%2A>，以便傳回 <xref:System.Data.Objects.ObjectQuery%601>。 執行這個查詢時，它就會傳回屬於相關端的相同物件集合。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="System.Data.Objects.DataClasses.IRelatedEnd.Remove">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>從相關端上移除物件。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="System.Data.Objects.DataClasses.IRelatedEnd.Remove">
      <MemberSignature Language="C#" Value="bool IRelatedEnd.Remove (System.Data.Objects.DataClasses.IEntityWithRelationships entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Data.Objects.DataClasses.IRelatedEnd.Remove(class System.Data.Objects.DataClasses.IEntityWithRelationships entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#Remove(System.Data.Objects.DataClasses.IEntityWithRelationships)" />
      <MemberSignature Language="VB.NET" Value="Function Remove (entity As IEntityWithRelationships) As Boolean Implements IRelatedEnd.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Data.Objects.DataClasses.IRelatedEnd.Remove(System::Data::Objects::DataClasses::IEntityWithRelationships ^ entity) = System::Data::Objects::DataClasses::IRelatedEnd::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Objects.DataClasses.IRelatedEnd.Remove(System.Data.Objects.DataClasses.IEntityWithRelationships)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Data.Objects.DataClasses.IEntityWithRelationships" />
      </Parameters>
      <Docs>
        <param name="entity">要從集合移除的實體執行個體。</param>
        <summary>從位於相關端的集合中移除物件。</summary>
        <returns>表示物件是否已移除的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個成員是明確介面成員實作， 只有在 <xref:System.Data.Objects.DataClasses.RelatedEnd> 執行個體轉換成 <xref:System.Data.Objects.DataClasses.IRelatedEnd> 介面時，才能使用這個成員。  
  
 <xref:System.Data.Objects.DataClasses.RelatedEnd.System%23Data%23Objects%23DataClasses%23IRelatedEnd%23Remove%2A>方法只為了與舊版.NET Framework 的相容。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Objects.DataClasses.IRelatedEnd.Remove">
      <MemberSignature Language="C#" Value="bool IRelatedEnd.Remove (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Data.Objects.DataClasses.IRelatedEnd.Remove(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Remove (entity As Object) As Boolean Implements IRelatedEnd.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Data.Objects.DataClasses.IRelatedEnd.Remove(System::Object ^ entity) = System::Data::Objects::DataClasses::IRelatedEnd::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Objects.DataClasses.IRelatedEnd.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">要從相關端移除的實體執行個體。</param>
        <summary>如果物件是相關端的一部分，則從相關端移除物件。</summary>
        <returns>如果實體已成功移除，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果來源實體物件已連結的快取，則會將關聯性標示為刪除。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetRoleName">
      <MemberSignature Language="C#" Value="public string TargetRoleName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TargetRoleName" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.DataClasses.RelatedEnd.TargetRoleName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TargetRoleName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TargetRoleName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TargetRoleName : string" Usage="System.Data.Objects.DataClasses.RelatedEnd.TargetRoleName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.Objects.DataClasses.IRelatedEnd.TargetRoleName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Xml.Serialization.SoapIgnore</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Xml.Serialization.XmlIgnore</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得位於關聯性目標端的角色名稱。</summary>
        <value>成為角色名稱的 <see cref="T:System.String" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 角色名稱由`Role`屬性的`End`概念模型中定義此關聯性的關聯中的項目。 如需詳細資訊，請參閱 [Association 項目 (CSDL)](https://msdn.microsoft.com/library/c305169a-8af7-432f-9ba7-800a163aed41)。  
  
   
  
## Examples  
 本主題中的範例根據[AdventureWorks Sales Model](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)。 此範例會加入新`SalesOrderHeader`實體`Contact`實體。 然後，它會取得所有相關的端從`Contact`實體並顯示關聯性名稱、 來源角色名稱和每個相關端的目標角色名稱。  
  
 [!code-csharp[DP ObjectServices Concepts#IRelatedEnd](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#irelatedend)]
 [!code-vb[DP ObjectServices Concepts#IRelatedEnd](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#irelatedend)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.Objects.DataClasses.IRelatedEnd.SourceRoleName" />
      </Docs>
    </Member>
    <Member MemberName="ValidateEntityForAttach&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="protected internal void ValidateEntityForAttach&lt;TEntity&gt; (TEntity entity, int index, bool allowCollection);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void ValidateEntityForAttach&lt;TEntity&gt;(!!TEntity entity, int32 index, bool allowCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.RelatedEnd.ValidateEntityForAttach``1(``0,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub ValidateEntityForAttach(Of TEntity) (entity As TEntity, index As Integer, allowCollection As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA;generic &lt;typename TEntity&gt;&#xA; void ValidateEntityForAttach(TEntity entity, int index, bool allowCollection);" />
      <MemberSignature Language="F#" Value="member this.ValidateEntityForAttach : 'Entity * int * bool -&gt; unit" Usage="relatedEnd.ValidateEntityForAttach (entity, index, allowCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="allowCollection" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">要驗證之物件的型別。</typeparam>
        <param name="entity">正在驗證的物件。</param>
        <param name="index">正在驗證的物件位於集合中的位置。</param>
        <param name="allowCollection">指出此物件是否為集合的成員。</param>
        <summary>判斷某個物件是否可以附加至本機集合或參考。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
在附加作業期間，物件服務會呼叫 `ValidateEntityForAttach<TEntity>` 方法。

]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">當正在附加的物件為 <see langword="null" /> 時。

-或-

附加至相關端的物件與來源物件不存在相同的 <see cref="T:System.Data.Objects.ObjectContext" /> 中。

-或-

正在附加的物件處於 <see cref="F:System.Data.EntityState.Added" /> 或 <see cref="F:System.Data.EntityState.Deleted" /> 狀態中。</exception>
      </Docs>
    </Member>
    <Member MemberName="ValidateLoad&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="protected System.Data.Objects.ObjectQuery&lt;TEntity&gt; ValidateLoad&lt;TEntity&gt; (System.Data.Objects.MergeOption mergeOption, string relatedEndName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!!TEntity&gt; ValidateLoad&lt;TEntity&gt;(valuetype System.Data.Objects.MergeOption mergeOption, string relatedEndName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.RelatedEnd.ValidateLoad``1(System.Data.Objects.MergeOption,System.String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA;generic &lt;typename TEntity&gt;&#xA; System::Data::Objects::ObjectQuery&lt;TEntity&gt; ^ ValidateLoad(System::Data::Objects::MergeOption mergeOption, System::String ^ relatedEndName);" />
      <MemberSignature Language="F#" Value="member this.ValidateLoad : System.Data.Objects.MergeOption * string -&gt; System.Data.Objects.ObjectQuery&lt;'Entity&gt;" Usage="relatedEnd.ValidateLoad (mergeOption, relatedEndName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="mergeOption" Type="System.Data.Objects.MergeOption" />
        <Parameter Name="relatedEndName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">要驗證之物件的型別。</typeparam>
        <param name="mergeOption">將物件合併至現有的 <see cref="T:System.Data.Objects.MergeOption" /> 時要使用的 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />。</param>
        <param name="relatedEndName">相關端的名稱。</param>
        <summary>確保一個或多個相關物件可以成功載入本機集合或參考中。</summary>
        <returns>用來在相關端載入一個或多個物件的 <see cref="T:System.Data.Objects.ObjectQuery`1" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
物件服務會取得<xref:System.Data.Objects.ObjectQuery%601>藉由呼叫[IRelatedEnd.CreateSourceQuery](xref:System.Data.Objects.DataClasses.RelatedEnd.System%23Data%23Objects%23DataClasses%23IRelatedEnd%23CreateSourceQuery)方法。

物件服務會先呼叫 `ValidateLoad<TEntity>` 方法，然後再執行載入作業，以便確保作業會成功。

]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">當來源物件是使用 <see cref="F:System.Data.Objects.MergeOption.NoTracking" /> 查詢所擷取的，而且 <see cref="T:System.Data.Objects.MergeOption" /> 不是 <see cref="F:System.Data.Objects.MergeOption.NoTracking" /> 或者相關物件已經載入時。

-或-

當來源物件沒有附加至 <see cref="T:System.Data.Objects.ObjectContext" /> 時。

-或-

當來源物件正在追蹤中，但是處於 <see cref="F:System.Data.EntityState.Added" /> 或 <see cref="F:System.Data.EntityState.Deleted" /> 狀態中，或者用於 <see cref="T:System.Data.Objects.MergeOption" /> 的 <see cref="Overload:System.Data.Objects.DataClasses.RelatedEnd.Load" /> 是 <see cref="F:System.Data.Objects.MergeOption.NoTracking" /> 時。</exception>
      </Docs>
    </Member>
    <Member MemberName="ValidateOwnerForAttach">
      <MemberSignature Language="C#" Value="protected internal void ValidateOwnerForAttach ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void ValidateOwnerForAttach() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.RelatedEnd.ValidateOwnerForAttach" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub ValidateOwnerForAttach ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void ValidateOwnerForAttach();" />
      <MemberSignature Language="F#" Value="member this.ValidateOwnerForAttach : unit -&gt; unit" Usage="relatedEnd.ValidateOwnerForAttach " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>確保相關端所屬的物件支援附加作業。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
物件服務會呼叫 ValidateOwnerForAttach 方法，然後再執行附加作業，以便確保作業會成功。

]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">當來源物件沒有附加至 <see cref="T:System.Data.Objects.ObjectContext" />、從 <see cref="F:System.Data.Objects.MergeOption.NoTracking" /> 查詢中傳回來源物件，或者來源物件並非處於 <see cref="F:System.Data.EntityState.Modified" /> 或 <see cref="F:System.Data.EntityState.Unchanged" /> 狀態中。</exception>
      </Docs>
    </Member>
  </Members>
</Type>