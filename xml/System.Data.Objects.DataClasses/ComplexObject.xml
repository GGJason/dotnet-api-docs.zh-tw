<Type Name="ComplexObject" FullName="System.Data.Objects.DataClasses.ComplexObject">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8f80c0c5d26a504ec5b95ef464cc87902acf28fc" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37678446" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ComplexObject : System.Data.Objects.DataClasses.StructuralObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit ComplexObject extends System.Data.Objects.DataClasses.StructuralObject" />
  <TypeSignature Language="DocId" Value="T:System.Data.Objects.DataClasses.ComplexObject" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ComplexObject&#xA;Inherits StructuralObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class ComplexObject abstract : System::Data::Objects::DataClasses::StructuralObject" />
  <TypeSignature Language="F#" Value="type ComplexObject = class&#xA;    inherit StructuralObject" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Objects.DataClasses.StructuralObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.Serialization.DataContract(IsReference=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>複雜類型的基底類別。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.DataClasses.ComplexObject> 實作複雜類型的基本功能。 如需詳細資訊，請參閱 <<c0> [ 複雜類型物件](http://msdn.microsoft.com/library/34d5c570-a891-42b8-80ae-20e96eedc3af)。  
  
 在實作自訂資料類別搭配概念模型時，我們建議代表複雜類型的資料類別繼承自<xref:System.Data.Objects.DataClasses.ComplexObject>。 如需詳細資訊，請參閱 <<c0> [ 自訂物件](http://msdn.microsoft.com/library/af6f07ce-2261-4c65-87cf-d018ad082921)。  
  
 複雜類型可以是實體類型的屬性或另一個複雜類型的屬性。  
  
 複雜類型是由實體類型的非純量屬性傳回的。 這會讓純量屬性在實體內部組織。 如同實體，複雜類型包含純量屬性或其他複雜類型屬性。 複雜類型不可在沒有相關實體類型的情況下使用。 因為複雜型別沒有索引鍵，就無法管理複雜類型物件沒有相關聯的實體型別。 如需詳細資訊，請參閱 <<c0> [ 複雜類型物件](http://msdn.microsoft.com/library/34d5c570-a891-42b8-80ae-20e96eedc3af)。  
  
   
  
## Examples  
 在下列範例中，自訂資料類別`OrderInfo`繼承自<xref:System.Data.Objects.DataClasses.ComplexObject>而且對應至`OrderInfo`概念模型中定義的複雜型別。  
  
 [!code-csharp[DP EntityObject Concepts#EntityObject](~/samples/snippets/csharp/VS_Snippets_Data/DP EntityObject Concepts/CS/SalesObjects.cs#entityobject)]
 [!code-vb[DP EntityObject Concepts#EntityObject](~/samples/snippets/visualbasic/VS_Snippets_Data/DP EntityObject Concepts/VB/SalesObjects.vb#entityobject)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ComplexObject ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.ComplexObject.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ComplexObject();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>建立 <see cref="T:System.Data.Objects.DataClasses.ComplexObject" /> 的執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReportPropertyChanged">
      <MemberSignature Language="C#" Value="protected override sealed void ReportPropertyChanged (string property);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ReportPropertyChanged(string property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.ComplexObject.ReportPropertyChanged(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Sub ReportPropertyChanged (property As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ReportPropertyChanged(System::String ^ property);" />
      <MemberSignature Language="F#" Value="override this.ReportPropertyChanged : string -&gt; unit" Usage="complexObject.ReportPropertyChanged property" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="property">已變更屬性的名稱。</param>
        <summary>通知變更追蹤程式，複雜物件中的屬性已經改變。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當 Entity Data Model 工具產生複雜類型時，屬性變更之後就會呼叫 <xref:System.Data.Objects.DataClasses.ComplexObject.ReportPropertyChanged%2A> 方法，將 <xref:System.Data.Objects.DataClasses.IEntityChangeTracker> 中快取的值認可成該屬性的原始值。  
  
 這個方法會在變更追蹤程式中呼叫 <xref:System.Data.Objects.DataClasses.IEntityChangeTracker.EntityComplexMemberChanged%2A> 方法。  
  
 針對自訂複雜物件的屬性進行追蹤變更時，您必須呼叫 <xref:System.Data.Objects.DataClasses.ComplexObject.ReportPropertyChanged%2A>。 當複雜物件繼承自 <xref:System.Data.Objects.DataClasses.ComplexObject> 時，請這樣做。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="property" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReportPropertyChanging">
      <MemberSignature Language="C#" Value="protected override sealed void ReportPropertyChanging (string property);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ReportPropertyChanging(string property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.ComplexObject.ReportPropertyChanging(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Sub ReportPropertyChanging (property As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ReportPropertyChanging(System::String ^ property);" />
      <MemberSignature Language="F#" Value="override this.ReportPropertyChanging : string -&gt; unit" Usage="complexObject.ReportPropertyChanging property" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="property">變更中屬性的名稱。</param>
        <summary>通知變更追蹤程式，複雜物件上的屬性變更處於暫止狀態。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當 Entity Data Model 工具產生複雜類型時，會在屬性變更之前呼叫 <xref:System.Data.Objects.DataClasses.ComplexObject.ReportPropertyChanging%2A> 方法來快取 <xref:System.Data.Objects.DataClasses.IEntityChangeTracker> 中該屬性的目前值，讓這個值可以用來當做該屬性的原始值。  
  
 這個方法會在變更追蹤程式中呼叫 <xref:System.Data.Objects.DataClasses.IEntityChangeTracker.EntityComplexMemberChanging%2A> 方法。  
  
 針對自訂複雜物件的屬性進行追蹤變更時，您必須呼叫 <xref:System.Data.Objects.DataClasses.ComplexObject.ReportPropertyChanging%2A>。 當複雜物件繼承自 <xref:System.Data.Objects.DataClasses.ComplexObject> 時，請這樣做。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="property" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
  </Members>
</Type>