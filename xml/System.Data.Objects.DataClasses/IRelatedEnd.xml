<Type Name="IRelatedEnd" FullName="System.Data.Objects.DataClasses.IRelatedEnd">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ae5f3eb321bf51dd717a471368544ff03f549138" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30390132" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IRelatedEnd" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IRelatedEnd" />
  <TypeSignature Language="DocId" Value="T:System.Data.Objects.DataClasses.IRelatedEnd" />
  <TypeSignature Language="VB.NET" Value="Public Interface IRelatedEnd" />
  <TypeSignature Language="C++ CLI" Value="public interface class IRelatedEnd" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>定義關聯性 (Relationship) 的一端。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.DataClasses.IRelatedEnd> 會針對在關聯中代表某一端的物件定義需求。 這個介面由實作<xref:System.Data.Objects.DataClasses.RelatedEnd>類別。 <xref:System.Data.Objects.DataClasses.RelatedEnd> 是基底類別<xref:System.Data.Objects.DataClasses.EntityCollection%601>和<xref:System.Data.Objects.DataClasses.EntityReference%601>類別。  
  
   
  
## Examples  
 本主題中的範例根據[AdventureWorks Sales Model](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)，所產生[實體資料模型精靈](http://msdn.microsoft.com/library/423ec9a7-5464-43b7-a7ef-9f5f000848b5)。  
  
 下列範例會將新`SalesOrderHeader`實體`Contact`實體。 然後它會取得所有相關的端從`Contact`實體，並顯示關聯性名稱、 來源角色名稱和目標角色名稱，每個相關端。  
  
 [!code-csharp[DP ObjectServices Concepts#IRelatedEnd](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#irelatedend)]
 [!code-vb[DP ObjectServices Concepts#IRelatedEnd](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#irelatedend)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將物件加入至相關端。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Data.Objects.DataClasses.IEntityWithRelationships entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(class System.Data.Objects.DataClasses.IEntityWithRelationships entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.IRelatedEnd.Add(System.Data.Objects.DataClasses.IEntityWithRelationships)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (entity As IEntityWithRelationships)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Data::Objects::DataClasses::IEntityWithRelationships ^ entity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Data.Objects.DataClasses.IEntityWithRelationships" />
      </Parameters>
      <Docs>
        <param name="entity">要加入集合的物件。 <c>entity</c>必須實作 <see cref="T:System.Data.Objects.DataClasses.IEntityWithRelationships" />。</param>
        <summary>將物件加入至相關端。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.DataClasses.IRelatedEnd.Add%2A> 方法會將物件加入至相關端。 相關端必須是 <xref:System.Data.Objects.DataClasses.EntityCollection%601>。  
  
 當來源物件會實作<xref:System.Data.Objects.DataClasses.IEntityWithRelationships>中追蹤和<xref:System.Data.Objects.ObjectStateManager>，也會追蹤所加入的物件。  
  
 <xref:System.Data.Objects.DataClasses.RelatedEnd> 類別會明確實作 <xref:System.Data.Objects.DataClasses.IRelatedEnd.Add%2A> 方法。 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 類別會使用這個實作。 如需詳細資訊，請參閱<xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A>。  
  
 如果相關的端<xref:System.Data.Objects.DataClasses.EntityReference%601>和<xref:System.Data.Objects.DataClasses.EntityReference%601.Value%2A>參考的屬性不是`null`，這個方法會擲回的例外狀況。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.IRelatedEnd.Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (entity As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Object ^ entity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">要加入集合的物件。</param>
        <summary>將物件加入至相關端。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用的實體類別，不會實作這個方法多載<xref:System.Data.Objects.DataClasses.IEntityWithRelationships>。 使用<xref:System.Data.Objects.DataClasses.IRelatedEnd.Add%2A>實體類別會實作的方法<xref:System.Data.Objects.DataClasses.IEntityWithRelationships>。  
  
 <xref:System.Data.Objects.DataClasses.IRelatedEnd.Add%2A> 方法會將物件加入至相關端。 相關端必須是 <xref:System.Data.Objects.DataClasses.EntityCollection%601>。  
  
 <xref:System.Data.Objects.DataClasses.RelatedEnd> 類別會明確實作 <xref:System.Data.Objects.DataClasses.IRelatedEnd.Add%2A> 方法。 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 類別會使用這個實作。 如需詳細資訊，請參閱<xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A>。  
  
 如果相關的端<xref:System.Data.Objects.DataClasses.EntityReference%601>和<xref:System.Data.Objects.DataClasses.EntityReference%601.Value%2A>參考的屬性不是`null`，這個方法會擲回的例外狀況。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Attach">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>定義兩個所附加物件之間的關聯性。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (System.Data.Objects.DataClasses.IEntityWithRelationships entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Attach(class System.Data.Objects.DataClasses.IEntityWithRelationships entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.IRelatedEnd.Attach(System.Data.Objects.DataClasses.IEntityWithRelationships)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As IEntityWithRelationships)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(System::Data::Objects::DataClasses::IEntityWithRelationships ^ entity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Data.Objects.DataClasses.IEntityWithRelationships" />
      </Parameters>
      <Docs>
        <param name="entity">正在附加的物件。 <c>entity</c>必須實作 <see cref="T:System.Data.Objects.DataClasses.IEntityWithRelationships" />。</param>
        <summary>定義兩個所附加物件之間的關聯性。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.DataClasses.IRelatedEnd.Attach%2A> 方法是用來定義同時附加至相同 <xref:System.Data.Objects.ObjectContext> 執行個體之兩個物件之間的關聯性。  
  
 <xref:System.Data.Objects.DataClasses.RelatedEnd> 類別會明確實作 <xref:System.Data.Objects.DataClasses.IRelatedEnd.Attach%2A> 方法。 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 類別會使用這個實作來定義所附加來源物件與附加至集合之物件之間的關聯性。 如需詳細資訊，請參閱[附加和卸離物件](http://msdn.microsoft.com/library/41d5c1ef-1b78-4502-aa10-7e1438d62d23)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Attach(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.IRelatedEnd.Attach(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(System::Object ^ entity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">正在附加的物件。</param>
        <summary>定義兩個所附加物件之間的關聯性。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用的實體類別，不會實作這個方法多載<xref:System.Data.Objects.DataClasses.IEntityWithRelationships>。 使用<xref:System.Data.Objects.DataClasses.IRelatedEnd.Attach%2A>實體類別會實作的方法<xref:System.Data.Objects.DataClasses.IEntityWithRelationships>。  
  
 <xref:System.Data.Objects.DataClasses.IRelatedEnd.Attach%2A> 方法是用來定義同時附加至相同 <xref:System.Data.Objects.ObjectContext> 執行個體之兩個物件之間的關聯性。  
  
 <xref:System.Data.Objects.DataClasses.RelatedEnd> 類別會明確實作 <xref:System.Data.Objects.DataClasses.IRelatedEnd.Attach%2A> 方法。 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 類別會使用這個實作來定義所附加來源物件與附加至集合之物件之間的關聯性。 如需詳細資訊，請參閱[附加和卸離物件](http://msdn.microsoft.com/library/41d5c1ef-1b78-4502-aa10-7e1438d62d23)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSourceQuery">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerable CreateSourceQuery ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerable CreateSourceQuery() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.IRelatedEnd.CreateSourceQuery" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateSourceQuery () As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IEnumerable ^ CreateSourceQuery();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回 <see cref="T:System.Collections.IEnumerable" />，它代表屬於相關端的物件。</summary>
        <returns>
          <see cref="T:System.Collections.IEnumerable" />，它代表屬於相關端的物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.DataClasses.IRelatedEnd.CreateSourceQuery%2A> 類別會明確實作 <xref:System.Data.Objects.DataClasses.RelatedEnd> 方法。  <xref:System.Data.Objects.DataClasses.EntityCollection%601> 和 <xref:System.Data.Objects.DataClasses.EntityReference%601> 類別會同時覆寫 <xref:System.Data.Objects.DataClasses.RelatedEnd.System%23Data%23Objects%23DataClasses%23IRelatedEnd%23CreateSourceQuery%2A> 方法來傳回 <xref:System.Data.Objects.ObjectQuery%601>，以便在執行此查詢時，傳回屬於相關端的相同物件集合。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.IRelatedEnd.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回 <see cref="T:System.Collections.IEnumerator" />，它會逐一查看相關物件的集合。</summary>
        <returns>
          <see cref="T:System.Collections.IEnumerator" />，可逐一查看相關物件的集合。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLoaded">
      <MemberSignature Language="C#" Value="public bool IsLoaded { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLoaded" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.DataClasses.IRelatedEnd.IsLoaded" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLoaded As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLoaded { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，這個值指出所有相關物件是否都已經載入。</summary>
        <value>
          如果相關端包含資料庫中的所有相關實體，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.DataClasses.RelatedEnd> 類別會實作 <xref:System.Data.Objects.DataClasses.IRelatedEnd.IsLoaded%2A> 的 <xref:System.Data.Objects.DataClasses.IRelatedEnd> 方法。 如需詳細資訊，請參閱<xref:System.Data.Objects.DataClasses.RelatedEnd.IsLoaded%2A>。  
  
 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 和 <xref:System.Data.Objects.DataClasses.EntityReference%601> 類別繼承自 <xref:System.Data.Objects.DataClasses.RelatedEnd>。  
  
   
  
## Examples  
 [定義和管理關聯性](http://msdn.microsoft.com/library/2c92c097-56bd-4145-989e-16d92475ecda)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將一個或多個相關物件載入這個相關端中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Load` 呼叫可從相關端所公開的導覽屬性，明確載入相關的物件。 如需詳細資訊，請參閱[載入相關物件](http://msdn.microsoft.com/library/452347d2-7b3b-44cd-9001-231299a28cb1)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Load() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.IRelatedEnd.Load" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>使用預設合併選項，將一個或多個相關物件載入這個相關端中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.DataClasses.RelatedEnd> 類別會實作 <xref:System.Data.Objects.DataClasses.IRelatedEnd.Load%2A> 的 <xref:System.Data.Objects.DataClasses.IRelatedEnd> 方法。 如需詳細資訊，請參閱<xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A>。  
  
 <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A> 呼叫可從相關端的導覽屬性所公開，明確載入相關的物件。 如需詳細資訊，請參閱[載入相關物件](http://msdn.microsoft.com/library/452347d2-7b3b-44cd-9001-231299a28cb1)。  
  
 <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A>方法會載入相關的物件資料來源是否<xref:System.Data.Objects.DataClasses.RelatedEnd.IsLoaded%2A>是`true`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Data.Objects.MergeOption mergeOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Load(valuetype System.Data.Objects.MergeOption mergeOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.IRelatedEnd.Load(System.Data.Objects.MergeOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Data::Objects::MergeOption mergeOption);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mergeOption" Type="System.Data.Objects.MergeOption" />
      </Parameters>
      <Docs>
        <param name="mergeOption">將物件合併至現有的 <see cref="T:System.Data.Objects.MergeOption" /> 時要使用的 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />。</param>
        <summary>使用指定的合併選項，將一個或多個相關物件載入此相關端中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.DataClasses.RelatedEnd> 類別會實作 <xref:System.Data.Objects.DataClasses.IRelatedEnd.Load%2A> 方法。 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 和 <xref:System.Data.Objects.DataClasses.EntityReference%601> 類別會同時覆寫這個實作。  
  
 `Load` 呼叫可從相關端所公開的導覽屬性，明確載入相關的物件。 如需詳細資訊，請參閱[載入相關物件](http://msdn.microsoft.com/library/452347d2-7b3b-44cd-9001-231299a28cb1)。  
  
 <xref:System.Data.Objects.DataClasses.IRelatedEnd.Load%2A>方法會載入相關的物件資料來源是否<xref:System.Data.Objects.DataClasses.RelatedEnd.IsLoaded%2A>是`true`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RelationshipName">
      <MemberSignature Language="C#" Value="public string RelationshipName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RelationshipName" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.DataClasses.IRelatedEnd.RelationshipName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RelationshipName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RelationshipName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得這個相關端所參與之關聯性的名稱。</summary>
        <value>這個 <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd" /> 所參與之關聯性的名稱。 此關聯性名稱不符合命名空間。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 本主題中的範例根據[AdventureWorks Sales Model](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)，所產生[實體資料模型精靈](http://msdn.microsoft.com/library/423ec9a7-5464-43b7-a7ef-9f5f000848b5)。  
  
 下列範例會將新`SalesOrderHeader`實體`Contact`實體。 然後它會取得所有相關的端從`Contact`實體，並顯示每個相關端的關聯性名稱、 來源角色名稱和目標角色名稱。  
  
 [!code-csharp[DP ObjectServices Concepts#IRelatedEnd](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#irelatedend)]
 [!code-vb[DP ObjectServices Concepts#IRelatedEnd](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#irelatedend)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RelationshipSet">
      <MemberSignature Language="C#" Value="public System.Data.Metadata.Edm.RelationshipSet RelationshipSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Metadata.Edm.RelationshipSet RelationshipSet" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.DataClasses.IRelatedEnd.RelationshipSet" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RelationshipSet As RelationshipSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Metadata::Edm::RelationshipSet ^ RelationshipSet { System::Data::Metadata::Edm::RelationshipSet ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Metadata.Edm.RelationshipSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>傳回相關端中繼資料的參考。</summary>
        <value>包含關聯性端點中繼資料的 <see cref="T:System.Data.Metadata.Edm.RelationshipSet" /> 物件。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Remove">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>從位於相關端的物件集合中移除物件。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (System.Data.Objects.DataClasses.IEntityWithRelationships entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(class System.Data.Objects.DataClasses.IEntityWithRelationships entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.IRelatedEnd.Remove(System.Data.Objects.DataClasses.IEntityWithRelationships)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (entity As IEntityWithRelationships) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Remove(System::Data::Objects::DataClasses::IEntityWithRelationships ^ entity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Data.Objects.DataClasses.IEntityWithRelationships" />
      </Parameters>
      <Docs>
        <param name="entity">要從集合中移除的物件。 <c>entity</c>必須實作 <see cref="T:System.Data.Objects.DataClasses.IEntityWithRelationships" />。</param>
        <summary>從位於相關端的物件集合中移除物件。</summary>
        <returns>
          如果成功移除 <paramref name="entity" />，則為 <see langword="true" />，如果 <paramref name="entity" /> 不是 <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd" /> 的一部分，則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.DataClasses.IRelatedEnd.Remove%2A> 方法會從相關端中移除物件。 相關端必須是 <xref:System.Data.Objects.DataClasses.EntityCollection%601>。  
  
 <xref:System.Data.Objects.DataClasses.RelatedEnd> 類別會明確實作 <xref:System.Data.Objects.DataClasses.IRelatedEnd.Remove%2A> 方法。 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 類別會使用這個實作。 如需詳細資訊，請參閱<xref:System.Data.Objects.DataClasses.EntityCollection%601.Remove%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.IRelatedEnd.Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (entity As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Remove(System::Object ^ entity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">要從集合中移除的物件。</param>
        <summary>從位於相關端的物件集合中移除物件。</summary>
        <returns>
          如果成功移除 <paramref name="entity" />，則為 <see langword="true" />，如果 <paramref name="entity" /> 不是 <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd" /> 的一部分，則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用的實體類別，不會實作這個方法多載<xref:System.Data.Objects.DataClasses.IEntityWithRelationships>。 使用<xref:System.Data.Objects.DataClasses.IRelatedEnd.Remove%2A>實體類別會實作的方法<xref:System.Data.Objects.DataClasses.IEntityWithRelationships>。  
  
 <xref:System.Data.Objects.DataClasses.IRelatedEnd.Remove%2A> 方法會從相關端中移除物件。 相關端必須是 <xref:System.Data.Objects.DataClasses.EntityCollection%601>。  
  
 <xref:System.Data.Objects.DataClasses.RelatedEnd> 類別會明確實作 <xref:System.Data.Objects.DataClasses.IRelatedEnd.Remove%2A> 方法。 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 類別會使用這個實作。 如需詳細資訊，請參閱<xref:System.Data.Objects.DataClasses.EntityCollection%601.Remove%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceRoleName">
      <MemberSignature Language="C#" Value="public string SourceRoleName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SourceRoleName" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.DataClasses.IRelatedEnd.SourceRoleName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SourceRoleName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SourceRoleName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得位於關聯性來源端的角色名稱。</summary>
        <value>位於關聯性來源端的角色名稱。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.DataClasses.RelatedEnd>類別會實作<xref:System.Data.Objects.DataClasses.IRelatedEnd.SourceRoleName%2A>屬性。 如需詳細資訊，請參閱<xref:System.Data.Objects.DataClasses.RelatedEnd.SourceRoleName%2A>。  
  
 角色名稱由指定`Role`屬性`End`概念模型中定義此關聯性的關聯中的項目。 如需詳細資訊，請參閱 [Association 項目 (CSDL)](http://msdn.microsoft.com/library/c305169a-8af7-432f-9ba7-800a163aed41)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetRoleName">
      <MemberSignature Language="C#" Value="public string TargetRoleName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TargetRoleName" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.DataClasses.IRelatedEnd.TargetRoleName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TargetRoleName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TargetRoleName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得位於關聯性目標端的角色名稱。</summary>
        <value>位於關聯性目標端的角色名稱。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.DataClasses.RelatedEnd> 類別會實作 <xref:System.Data.Objects.DataClasses.IRelatedEnd.TargetRoleName%2A> 屬性。 如需詳細資訊，請參閱<xref:System.Data.Objects.DataClasses.RelatedEnd.TargetRoleName%2A>。  
  
 角色名稱由指定`Role`屬性`End`概念模型中定義此關聯性的關聯中的項目。 如需詳細資訊，請參閱 [Association 項目 (CSDL)](http://msdn.microsoft.com/library/c305169a-8af7-432f-9ba7-800a163aed41)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>