<Type Name="XhtmlTextWriter" FullName="System.Web.UI.XhtmlTextWriter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6124f3afcb6d93ba97fb48f1e5481ffb495176fc" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39735208" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XhtmlTextWriter : System.Web.UI.HtmlTextWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XhtmlTextWriter extends System.Web.UI.HtmlTextWriter" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.XhtmlTextWriter" />
  <TypeSignature Language="VB.NET" Value="Public Class XhtmlTextWriter&#xA;Inherits HtmlTextWriter" />
  <TypeSignature Language="C++ CLI" Value="public ref class XhtmlTextWriter : System::Web::UI::HtmlTextWriter" />
  <TypeSignature Language="F#" Value="type XhtmlTextWriter = class&#xA;    inherit HtmlTextWriter" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.HtmlTextWriter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>將可延伸超文字標記語言 (XHTML) 特定字元 (包括衍生自 XTHML 的 XHTML 模組所有變異) 寫入至 ASP.NET 伺服器控制項的輸出資料流，供行動裝置使用。 請覆寫 <see cref="T:System.Web.UI.XhtmlTextWriter" /> 類別，為 ASP.NET 網頁和伺服器控制項提供自訂 XHTML 呈現。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XHTML 是符合 XML 的標記語言，根據 HTML 4.1，可讓您建立適用於多個裝置類型的網站。 它會合併 HTML 所產生的標記語言，搭配各種不同的格式和樣式選項，與降低的標記標籤模稜兩可的 XML 所提供的嚴格的項目指導方針提供使用便利性。 <xref:System.Web.UI.XhtmlTextWriter>類別提供格式化功能，讓 ASP.NET 伺服器控制項使用用戶端呈現 XHTML 內容時。 您可以使用<xref:System.Web.UI.XhtmlTextWriter.SetDocType%2A>方法，以指定的 XHTML 類型的文字寫入器呈現。 支援的文件類型定義於<xref:System.Web.UI.XhtmlMobileDocType>列舉型別。  
  
 <xref:System.Web.UI.XhtmlTextWriter>類別會呈現兩個集合的項目屬性。 一組是通用的屬性，在中參考的集合<xref:System.Web.UI.XhtmlTextWriter.CommonAttributes%2A>屬性。 第二個集合是中參考的項目專用屬性的集合<xref:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes%2A>屬性。 如需有關的項目和呈現的樣式的詳細資訊，請參閱 XHTML 模組化的規格[World Wide Web Consortium (W3C) 網站](http://go.microsoft.com/fwlink/?linkid=37125)。  
  
 您可以使用的成員<xref:System.Web.UI.XhtmlTextWriter>類別和任何衍生的類別，來建立自訂的文字寫入器，用於自訂的 XHTML 頁面配接器或類別的介面卡。 您也可以建立衍生的類別覆寫的標準行為<xref:System.Web.UI.XhtmlTextWriter>類別。  
  
 根據預設，當您使用瀏覽器支援 HTML 4.0，ASP.NET 網頁及控制項呈現標記和 XHTML 1.1 標準相容。 如需詳細資訊，請參閱 < [XHTML 標準，在 Visual Studio 及 ASP.NET](http://msdn.microsoft.com/library/1b78d416-66bb-43a5-ac77-c703aab55b97)。  
  
 <xref:System.Web.UI.HtmlTextWriter>輸出 XHTML，除非您設定專為不會呈現 XHTML 標記的 ASP.NET。 如需詳細資訊，請參閱 < [NIB： 如何： 設定 XHTML 呈現在 ASP.NET Web Sites](http://msdn.microsoft.com/library/42483a54-f1ae-44e1-88e6-4370f8690149)。  
  
   
  
## Examples  
 在本節中的程式碼範例包含四個部分。 第一個範例示範如何建立衍生的類別。 第二個程式碼範例示範如何建立自訂控制項。 第三個程式碼範例示範如何使用自訂控制項。 第四個程式碼範例提供的程式碼，才能執行自訂的控制項。  
  
 下列程式碼範例示範如何建立自訂的類別衍生自<xref:System.Web.UI.XhtmlTextWriter>類別。 它有兩個建構函式，這是標準的所有直接或間接繼承自的類別<xref:System.Web.UI.HtmlTextWriter>類別。 第一個建構函式接受<xref:System.IO.TextWriter>物件做為參數，並呼叫並傳遞下列兩個參數值的第二個建構函式：  
  
-   <xref:System.IO.TextWriter> 執行個體。  
  
-   值<xref:System.Web.UI.HtmlTextWriter.DefaultTabString?displayProperty=nameWithType>屬性，定義 XHTML 文字寫入器會使用預設的行縮排。  
  
 此程式碼範例也示範如何覆寫<xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A>和<xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A>方法，以篩選的文字大小和色彩樣式，分別。 此外，它會覆寫<xref:System.Web.UI.HtmlTextWriter.BeginRender%2A>和<xref:System.Web.UI.HtmlTextWriter.EndRender%2A>之前和之後要呈現控制項具有字串寫入文字的方法。  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#1)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#1)]  
  
 下列程式碼範例示範如何建立自訂<xref:System.Web.UI.WebControls.Label>控制項，名為`TestLabel`和名為自訂配接器`XhtmlTestLabelAdapter`呈現為 XHTML 控制項的內容。  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/cs/xhtmltextlabel.cs#1)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/VB/xhtmltestlabel.vb#1)]  
  
 下列程式碼範例示範如何使用自訂控制項`TestLabel`ASP.NET 網頁上。  
  
 [!code-aspx-csharp[System.Web.UI.XhtmlTextWriter_Sample1#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/cs/xhtmltextlabel.aspx#4)]
 [!code-aspx-vb[System.Web.UI.XhtmlTextWriter_Sample1#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/VB/xhtmltestlabel.aspx#4)]  
  
 若要使用自訂控制項，在上述程式碼範例中，新增下列`<controlAdapters>`兩個檔案的其中一個項目。 您可以將它新增至適當全機器的檔案的子目錄中針對特定的瀏覽器中，為.NET Framework 組態目錄的子資料夾。 或者，您可以將它加入 App_Browsers 目錄下的 Web 應用程式根目錄中的自訂瀏覽器檔案。  
  
```  
<controlAdapters>  
   <adapter controlType="AspNet.Samples.TestLabel"  
   adapterType="AspNet.Samples.XhtmlTestLabelAdapter" />  
</controlAdapters>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.ChtmlTextWriter" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.XhtmlTextWriter" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XhtmlTextWriter (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.#ctor(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XhtmlTextWriter(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.XhtmlTextWriter : System.IO.TextWriter -&gt; System.Web.UI.XhtmlTextWriter" Usage="new System.Web.UI.XhtmlTextWriter writer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.IO.TextWriter" /> 執行個體，會呈現 XHTML 內容。</param>
        <summary>使用在 <see cref="T:System.Web.UI.XhtmlTextWriter" /> 欄位內指定的行縮排，初始化 <see cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" /> 類別的新執行個體。 如果您不要變更預設的行縮排，請使用 <see cref="M:System.Web.UI.XhtmlTextWriter.#ctor(System.IO.TextWriter)" /> 建構函式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.XhtmlTextWriter.%23ctor%2A>建構函式<xref:System.IO.TextWriter>物件參數呼叫傳遞兩個參數值的第二個建構函式：  
  
-   <xref:System.IO.TextWriter> 執行個體。  
  
-   中指定的字串值<xref:System.Web.UI.HtmlTextWriter.DefaultTabString>欄位，定義定位間距所使用的 XHTML 文字寫入器。  
  
   
  
## Examples  
 下列程式碼範例示範如何建立兩個建構函式，這是標準的所有直接或間接衍生自的類別<xref:System.Web.UI.HtmlTextWriter>類別，適用於自訂的類別衍生自<xref:System.Web.UI.XhtmlTextWriter>類別。  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#5](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XhtmlTextWriter (System.IO.TextWriter writer, string tabString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer, string tabString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.#ctor(System.IO.TextWriter,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter, tabString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XhtmlTextWriter(System::IO::TextWriter ^ writer, System::String ^ tabString);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.XhtmlTextWriter : System.IO.TextWriter * string -&gt; System.Web.UI.XhtmlTextWriter" Usage="new System.Web.UI.XhtmlTextWriter (writer, tabString)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="tabString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.IO.TextWriter" /> 執行個體，會呈現 XHTML 內容。</param>
        <param name="tabString">用來呈現行縮排的字串。</param>
        <summary>使用指定的行縮排，初始化 <see cref="T:System.Web.UI.XhtmlTextWriter" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例示範如何建立兩個建構函式，這是標準的所有直接或間接衍生自的類別<xref:System.Web.UI.HtmlTextWriter>類別，適用於自訂的類別衍生自<xref:System.Web.UI.XhtmlTextWriter>類別。  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#5](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRecognizedAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddRecognizedAttribute (string elementName, string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddRecognizedAttribute(string elementName, string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddRecognizedAttribute (elementName As String, attributeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddRecognizedAttribute(System::String ^ elementName, System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="abstract member AddRecognizedAttribute : string * string -&gt; unit&#xA;override this.AddRecognizedAttribute : string * string -&gt; unit" Usage="xhtmlTextWriter.AddRecognizedAttribute (elementName, attributeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">要在其中加入屬性的 XHTML 項目。</param>
        <param name="attributeName">要加入的屬性。</param>
        <summary>將屬性加入至 XHTML 項目。 <see cref="T:System.Web.UI.XhtmlTextWriter" /> 物件的項目特定屬性集合是由 <see cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" /> 屬性所參考。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute%2A>方法將屬性加入至 XHTML 項目。 新增的屬性可以再辨識及呈現<xref:System.Web.UI.XhtmlTextWriter>物件。 若要避免寫入器呈現的 XHTML 項目通用屬性，請使用<xref:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute%2A>方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CommonAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable CommonAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable CommonAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property CommonAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ CommonAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CommonAttributes : System.Collections.Hashtable" Usage="System.Web.UI.XhtmlTextWriter.CommonAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.Collections.Hashtable" /> 物件，其中包含 <see cref="T:System.Web.UI.XhtmlTextWriter" /> 物件之標記 (Markup) 型態之標記 (Tag) 的通用屬性。</summary>
        <value>包含常見屬性的 <see cref="T:System.Collections.Hashtable" /> 物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.XhtmlTextWriter.CommonAttributes%2A>集合包含的屬性的 XHTML 項目中允許和，不會隱藏在<xref:System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes%2A>屬性。 如需有關通用屬性的詳細資訊，請參閱[World Wide Web Consortium (W3C) 網站](http://go.microsoft.com/fwlink/?linkid=37125)。  
  
 新執行個體時<xref:System.Web.UI.XhtmlTextWriter>建立類別，會初始化的通用屬性：  
  
-   `class`  
  
-   `id`  
  
-   `title`  
  
-   `xml:lang`  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes" />
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
      </Docs>
    </Member>
    <Member MemberName="ElementSpecificAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable ElementSpecificAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable ElementSpecificAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ElementSpecificAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ ElementSpecificAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ElementSpecificAttributes : System.Collections.Hashtable" Usage="System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得包含項目專用屬性的 <see cref="T:System.Collections.Hashtable" /> 物件。</summary>
        <value>包含項目專用屬性的 <see cref="T:System.Collections.Hashtable" /> 物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute%2A>方法來加入已辨識屬性的 XHTML 項目。 若要移除的 XHTML 項目上的通用屬性，請使用<xref:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute%2A>方法。  
  
 新執行個體時<xref:System.Web.UI.XhtmlTextWriter>類別建立，<xref:System.Collections.Hashtable>的項目專用屬性的物件會填入下列表格中顯示的屬性。  
  
|元素|屬性|  
|-------------|----------------|  
|`<a>`|`accesskey`, `href`, `charset`, `hreflang`, `rel`, `type`, `rev`, `title`, `tabindex`|  
|`<base>`|`href`|  
|`<blockquote>`|`cite`|  
|`<br>`|`id`, `class`, `title`|  
|`<form>`|`action`, `method`, `enctype`|  
|`<head>`|`xml:lang`|  
|`<html>`|`version`, `xml:lang`, `xmlns`|  
|`<img>`|`src`, `alt`, `width`, `longdesc`, `height`|  
|`<input>`|`size`, `accesskey`, `title`, `name`, `type`, `disabled`, `value`, `src`, `checked`, `maxlength`, `tabindex`|  
|`<label>`|`accesskey`, `for`|  
|`<li>`|`value`|  
|`<link>`|`hreflang`, `rev`, `type`, `charset`, `rel`, `href`, `media`|  
|`<meta>`|`content`, `name`, `xml:lang`, `http-equiv`, `scheme`|  
|`<object>`|`codebase`, `classid`, `data`, `standby`, `name`, `type`, `height`, `archive`, `declare`, `width`, `tabindex`, `codetype`|  
|`<ol>`|`start`|  
|`<optgroup>`|`label`, `disabled`|  
|`<option>`|`selected`, `value`|  
|`<param>`|`id`, `name`, `valuetype`, `value`, `type`|  
|`<pre>`|`xml:space`|  
|`<q>`|`cite`|  
|`<select>`|`name`, `tabindex`, `disabled`, `multiple`, `size`|  
|`<style>`|`xml:lang`, `xml:space`, `type`, `title`, `media`|  
|`<table>`|`width`, `summary`|  
|`<textarea>`|`name`, `cols`, `accesskey`, `tabindex`, `rows`|  
|`<td>`|`headers`, `align`, `rowspan`, `colspan`, `axis`, `scope`, `abbr`, `valign`|  
|`<th>`|`headers`, `align`, `rowspan`, `colspan`, `axis`, `scope`, `abbr`, `valign`|  
|`<title>`|`xml:lang`|  
|`<tr>`|`align`, `valign`|  
  
 如需有關的項目和呈現的樣式的詳細資訊，請參閱 XHTML 模組化的規格[World Wide Web Consortium (W3C) 網站](http://go.microsoft.com/fwlink/?linkid=37125)。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" />
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes" />
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsValidFormAttribute">
      <MemberSignature Language="C#" Value="public override bool IsValidFormAttribute (string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsValidFormAttribute(string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.IsValidFormAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsValidFormAttribute (attributeName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsValidFormAttribute(System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="override this.IsValidFormAttribute : string -&gt; bool" Usage="xhtmlTextWriter.IsValidFormAttribute attributeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attributeName">要進行檢查的屬性名稱。</param>
        <summary>檢查 XHTML 屬性，確定該屬性可以呈現在 <see langword="&lt;form&gt;" /> 項目的開頭標記中。</summary>
        <returns>如果屬性可以套用至 <see langword="true" /> 項目則為 <see langword="&lt;form&gt;" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法相當實用條件性地呈現取決於是否支援所要求的裝置的 XHTML 文件類型的屬性。  
  
   
  
## Examples  
 下列程式碼範例會建立自訂之較大範例的一部分<xref:System.Web.UI.WebControls.Label>控制項和配接器，會呈現為 XHTML 控制項的內容。  
  
 此程式碼範例示範如何建立名為的布林值變數`attTest`並將它設定為產生呼叫的傳回值<xref:System.Web.UI.XhtmlTextWriter.IsValidFormAttribute%2A>參數值"style"的方法。 如果<xref:System.Web.UI.XhtmlTextWriter.IsValidFormAttribute%2A>方法會傳回`true`，使用呈現與控制項相關聯的樣式<xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A?displayProperty=nameWithType>和<xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A?displayProperty=nameWithType>方法。 如果`attTest`值是`false`，就不會呈現樣式。 相反地，此頁面會顯示在控制項的文字`<br/>`所呈現的項目<xref:System.Web.UI.XhtmlTextWriter.WriteBreak%2A>方法，並通知使用者已有條件地呈現 XHTML 內容控制項的文字字串。  
  
 此程式碼範例是針對提供之較大範例的一部分<xref:System.Web.UI.XhtmlTextWriter>類別。  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/cs/xhtmltextlabel.cs#3)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/VB/xhtmltestlabel.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAttributeRender">
      <MemberSignature Language="C#" Value="protected override bool OnAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnAttributeRender (name As String, value As String, key As HtmlTextWriterAttribute) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberSignature Language="F#" Value="override this.OnAttributeRender : string * string * System.Web.UI.HtmlTextWriterAttribute -&gt; bool" Usage="xhtmlTextWriter.OnAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">要呈現的 XHTML 屬性。</param>
        <param name="value">指派給 XHTML 屬性的值。</param>
        <param name="key">與 XHTML 屬性關聯的 <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> 列舉值。</param>
        <summary>判斷指定的 XHTML 屬性以及該屬性的值是否可以在目前的標記項目中呈現。</summary>
        <returns>如果屬性會在網頁上呈現，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例示範如何覆寫<xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A>方法來檢查是否`size`屬性呈現任何此文字寫入器所呈現的項目。 如果`size`屬性呈現時，程式碼會檢查它的值是否為 8 點。 如果是的話<xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A>方法會傳回`true`，讓屬性和它的值，來呈現。 如果值為 8 的點以外<xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A>方法會傳回`false`，並不會轉譯屬性和其值。 如果索引鍵參數<xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A>方法不符合<xref:System.Web.UI.HtmlTextWriterAttribute.Size>屬性，就會有的基本功能<xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A>呼叫方法，如中所定義<xref:System.Web.UI.XhtmlTextWriter>類別。  
  
 此程式碼範例是針對提供之較大範例的一部分<xref:System.Web.UI.XhtmlTextWriter>類別。  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#2)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleAttributeRender">
      <MemberSignature Language="C#" Value="protected override bool OnStyleAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnStyleAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnStyleAttributeRender (name As String, value As String, key As HtmlTextWriterStyle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnStyleAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberSignature Language="F#" Value="override this.OnStyleAttributeRender : string * string * System.Web.UI.HtmlTextWriterStyle -&gt; bool" Usage="xhtmlTextWriter.OnStyleAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">要呈現的 XHTML 樣式屬性。</param>
        <param name="value">指派給 XHTML 樣式屬性的值。</param>
        <param name="key">與 XHTML 樣式屬性關聯的 <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> 列舉值。</param>
        <summary>判斷指定的 XHTML 樣式屬性以及該屬性的值是否可以在目前的標記項目中呈現。</summary>
        <returns>如果呈現樣式屬性，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例示範如何覆寫<xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A>方法來檢查是否<xref:System.Web.UI.HtmlTextWriterStyle.Color>屬性會呈現任何此文字寫入器所呈現的項目。 如果<xref:System.Web.UI.HtmlTextWriterStyle.Color>屬性呈現、 程式碼可讓您檢查其值是否為紫色。 如果值為紫色<xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A>方法會傳回`false`並不會轉譯屬性和其值。 如果<xref:System.Web.UI.HtmlTextWriterStyle.Color>屬性設定為任何其他值，<xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A>方法會傳回`true`和呈現的屬性和其值。 如果索引鍵參數<xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A>方法不符合<xref:System.Web.UI.HtmlTextWriterStyle.Color>屬性，就會有的基本功能<xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A>呼叫方法，如中所定義<xref:System.Web.UI.XhtmlTextWriter>類別。  
  
 此程式碼範例是針對提供之較大範例的一部分<xref:System.Web.UI.XhtmlTextWriter>類別。  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#3](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveRecognizedAttribute">
      <MemberSignature Language="C#" Value="public virtual void RemoveRecognizedAttribute (string elementName, string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveRecognizedAttribute(string elementName, string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveRecognizedAttribute (elementName As String, attributeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveRecognizedAttribute(System::String ^ elementName, System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="abstract member RemoveRecognizedAttribute : string * string -&gt; unit&#xA;override this.RemoveRecognizedAttribute : string * string -&gt; unit" Usage="xhtmlTextWriter.RemoveRecognizedAttribute (elementName, attributeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">要從其中移除屬性的 XHTML 項目。</param>
        <param name="attributeName">要從指定之 XHTML 項目中移除的屬性。</param>
        <summary>從項目的 <see cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" /> 集合中移除屬性。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SetDocType">
      <MemberSignature Language="C#" Value="public virtual void SetDocType (System.Web.UI.XhtmlMobileDocType docType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDocType(valuetype System.Web.UI.XhtmlMobileDocType docType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.SetDocType(System.Web.UI.XhtmlMobileDocType)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetDocType (docType As XhtmlMobileDocType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetDocType(System::Web::UI::XhtmlMobileDocType docType);" />
      <MemberSignature Language="F#" Value="abstract member SetDocType : System.Web.UI.XhtmlMobileDocType -&gt; unit&#xA;override this.SetDocType : System.Web.UI.XhtmlMobileDocType -&gt; unit" Usage="xhtmlTextWriter.SetDocType docType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="docType" Type="System.Web.UI.XhtmlMobileDocType" />
      </Parameters>
      <Docs>
        <param name="docType">其中一個 <see cref="T:System.Web.UI.XhtmlMobileDocType" /> 列舉值。</param>
        <summary>指定文字寫入器的 XHTML 文件類型，以便於頁面或控制項中呈現。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.XhtmlTextWriter.SetDocType%2A>方法中的自訂頁面配置器，以定義您想要提出要求的裝置來呈現的 XHTML 類型。 支援的文件類型定義於<xref:System.Web.UI.XhtmlMobileDocType>列舉型別。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.XhtmlMobileDocType" />
      </Docs>
    </Member>
    <Member MemberName="SuppressCommonAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable SuppressCommonAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable SuppressCommonAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property SuppressCommonAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ SuppressCommonAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SuppressCommonAttributes : System.Collections.Hashtable" Usage="System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得為其隱藏 <see cref="T:System.Collections.Hashtable" /> 屬性之項目的 <see cref="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" /> 物件。</summary>
        <value>項目的 <see cref="T:System.Collections.Hashtable" />，包含未呈現之 <see cref="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" /> 的集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 隱藏的屬性集合，包含一份 XHTML 項目<xref:System.Web.UI.XhtmlTextWriter.CommonAttributes%2A>屬性不會轉譯。  
  
 新執行個體時<xref:System.Web.UI.XhtmlTextWriter>建立類別時，<xref:System.Collections.Hashtable>物件的項目，<xref:System.Web.UI.XhtmlTextWriter.CommonAttributes%2A>會隱藏屬性包括：  
  
-   `base`  
  
-   `meta`  
  
-   `br`  
  
-   `head`  
  
-   `title`  
  
-   `html`  
  
-   `style`  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" />
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
      </Docs>
    </Member>
    <Member MemberName="WriteBreak">
      <MemberSignature Language="C#" Value="public override void WriteBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteBreak() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.WriteBreak" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteBreak ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteBreak();" />
      <MemberSignature Language="F#" Value="override this.WriteBreak : unit -&gt; unit" Usage="xhtmlTextWriter.WriteBreak " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將 <see langword="&lt;br/&gt;" /> 項目寫入至 XHTML 輸出資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例示範如何覆寫繼承<xref:System.Web.UI.HtmlTextWriter.BeginRender%2A?displayProperty=nameWithType>方法來寫入的文字字串<xref:System.Web.UI.HtmlTextWriter.Write%2A?displayProperty=nameWithType>方法並`<br/>`項目<xref:System.Web.UI.XhtmlTextWriter.WriteBreak%2A>方法。  
  
 [!code-csharp[system.web.ui.xhtmltextwriter_sample2#4](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#4)]
 [!code-vb[system.web.ui.xhtmltextwriter_sample2#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>