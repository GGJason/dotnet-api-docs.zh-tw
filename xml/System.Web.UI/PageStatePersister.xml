<Type Name="PageStatePersister" FullName="System.Web.UI.PageStatePersister">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="958266b25b54a2aee32d5c8f9dd8d6258a5cc074" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39805482" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class PageStatePersister" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit PageStatePersister extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.PageStatePersister" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class PageStatePersister" />
  <TypeSignature Language="C++ CLI" Value="public ref class PageStatePersister abstract" />
  <TypeSignature Language="F#" Value="type PageStatePersister = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供 ASP.NET 檢視狀態保存性機制的基本功能。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 HTTP 要求和回應是原本就是無狀態。 若要維護狀態資訊之間的 HTTP 要求，ASP.NET 伺服器頁面可以儲存<xref:System.Web.UI.Page>狀態。 此狀態下，稱為檢視狀態，是由頁面和控制項設定和資料，讓頁面顯示如同它們是相同的使用者所見，和其最後一個往返伺服器互動的控制項所組成。 若要儲存檢視狀態，對相同頁面的連續要求之間有多個機制。 抽象<xref:System.Web.UI.PageStatePersister>類別代表這些狀態資訊的儲存機制的基底類別。  
  
 預設檢視狀態保存性機制，在 ASP.NET 中的是要維持為隱藏的 HTML 項目中的 Base64 編碼字串的狀態資訊 (具有的項目`type`屬性設為`"hidden"`) 頁面上。 ASP.NET 網頁會使用<xref:System.Web.UI.HiddenFieldPageStatePersister>物件來執行此工作，使用<xref:System.Web.UI.IStateFormatter>序列化和還原序列化物件狀態資訊的執行個體。 或者，您可以檢視狀態儲存在頁面<xref:System.Web.HttpContext.Session%2A>伺服器上的物件<xref:System.Web.UI.SessionPageStatePersister>供行動用戶端具有有限的頻寬和資源的類別。 在某些情況下，您可能會完全停用檢視狀態持續性。 如果您這麼做時，結果是，有時候頁面和狀態持續性所依賴的控制項不正常運作。 如需有關頁面狀態管理和檢視狀態的詳細資訊，請參閱[ASP.NET 狀態管理概觀](http://msdn.microsoft.com/library/0218d965-5d30-445b-b6a6-8870e70e63ce)。  
  
 如果您正在撰寫控制項，您可以儲存在控制項狀態資訊<xref:System.Web.UI.Control.ViewState%2A>字典中，也就是<xref:System.Web.UI.StateBag>物件。 開發人員會擷取到的控制項狀態<xref:System.Web.UI.PageStatePersister.ControlState%2A>屬性。 您將指定的索引鍵和值<xref:System.Web.UI.Control.ViewState%2A>屬性，而<xref:System.Web.UI.Page>物件序列化要求之間的狀態資訊。 若要執行自訂控制項中處理的狀態，請覆寫<xref:System.Web.UI.Control.LoadViewState%2A>和<xref:System.Web.UI.Control.SaveViewState%2A>方法。 檢視狀態已停用由頁面開發人員時，遺失儲存在這個字典中的任何狀態資訊。 為了減輕這個在 ASP.NET 中您可以將重大狀態資訊儲存在個別的物件，稱為控制項狀態的 2.0 版。 當檢視狀態已停用由頁面開發人員時，不會影響控制項的狀態物件。 將狀態資訊儲存在控制項的狀態物件需要控制項覆寫<xref:System.Web.UI.Control.LoadControlState%2A>和<xref:System.Web.UI.Control.SaveControlState%2A>方法和控制項登錄來儲存狀態資訊在控制狀態每次初始化控制項時。 您可以註冊要使用控制項狀態，藉由覆寫控制項<xref:System.Web.UI.Control.OnInit%2A>方法，並呼叫<xref:System.Web.UI.Page.RegisterRequiresControlState%2A>方法。 如需使用詳細資訊<xref:System.Web.UI.Control.ViewState%2A>屬性和控制項狀態，當開發控制項，請參閱[開發自訂 ASP.NET 伺服器控制項](http://msdn.microsoft.com/library/fbe26c16-cff4-4089-b3dd-877411f0c0ef)。  
  
 若要維護檢視狀態無法支援現有的用戶端檢視狀態保存性機制，您可以擴充<xref:System.Web.UI.PageStatePersister>引進您自己的檢視狀態持續性方法、 類別和您可以使用 頁面配置器來設定 ASP.NET 應用程式若要使用不同的檢視狀態保存性機制，提供頁面時的用戶端的類型為基礎。 衍生自類別<xref:System.Web.UI.PageStatePersister>類別必須覆寫抽象<xref:System.Web.UI.PageStatePersister.Save%2A>方法，以將檢視狀態和控制項狀態儲存在持續性媒體，並覆寫<xref:System.Web.UI.PageStatePersister.Load%2A>方法，以將它解壓縮。 如果您需要序列化檢視狀態和控制項狀態的字串，您可以使用<xref:System.Web.UI.IStateFormatter>物件，可使用<xref:System.Web.UI.PageStatePersister.StateFormatter%2A>屬性。 有效率的方式，其會序列化和還原序列化為 Base64 編碼字串的物件狀態資訊。 您也可以覆寫<xref:System.Web.UI.PageStatePersister.StateFormatter%2A>屬性，來提供您自己的物件狀態的序列化機制。  
  
   
  
## Examples  
 下列程式碼範例示範如何建立<xref:System.Web.UI.PageStatePersister>將檢視和控制項的狀態儲存在 Web 伺服器的物件。 `StreamPageStatePersister`示範如何覆寫<xref:System.Web.UI.PageStatePersister.Load%2A>和<xref:System.Web.UI.PageStatePersister.Save%2A>方法來擷取並儲存檢視狀態資訊。 因為狀態持續性機制相關適應性呈現和用戶端的功能，所以`MyPageAdapter`類別會提供啟用`StreamPageStatePersister`ASP.NET 應用程式。 最後，瀏覽器的功能 (.browser) 檔案，可讓`MyPageAdapter`特定類別的用戶端 （在此案例中，預設網頁瀏覽器） 的配接器。  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/textfilepagestatepersister.cs#1)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/textfilepagestatepersister.vb#1)]  
  
 下列程式碼範例示範如何建立<xref:System.Web.UI.Adapters.PageAdapter>傳回的執行個體的類別`StreamPageStatePersister`，用以保存為 ASP.NET 網頁的檢視和控制項狀態。  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#5](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/mypageadapter.cs#5)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/mypageadapter.vb#5)]  
  
 編譯為組件可供您執行範例，使用下列的編譯器命令列中的這兩個類別。 請確定已編譯的組件是在 ASP.NET 應用程式根目錄下的 \Bin 目錄中。  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#6](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/mypageadapter.cs#6)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/mypageadapter.vb#6)]  
  
 最後，若要啟用`MyPageAdapter`配接器，您必須建立名為 ASP.NET 應用程式根目錄中，下方的瀏覽器，並包含.browser 檔案具有組態資訊。 `<refid>`組態檔中的項目可讓您指示，設定會覆寫預設的瀏覽器 Default.browser 組態檔中指定的值。 在此範例中，`MyPageAdapter`用於 ASP.NET Web pages （其中通常沒有配接器會使用）。  
  
```  
<browsers>  
    <browser refid="Default" >  
        <controlAdapters>  
            <adapter   
                controlType="System.Web.UI.Page"                              
                adapterType="Samples.AspNet.CS.MyPageAdapter" />  
        </controlAdapters>  
    </browser>  
</browsers>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.ObjectStateFormatter" />
    <altmember cref="T:System.Web.UI.LosFormatter" />
    <altmember cref="T:System.Web.UI.Pair" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PageStatePersister (System.Web.UI.Page page);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Web.UI.Page page) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageStatePersister.#ctor(System.Web.UI.Page)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; PageStatePersister(System::Web::UI::Page ^ page);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.PageStatePersister : System.Web.UI.Page -&gt; System.Web.UI.PageStatePersister" Usage="new System.Web.UI.PageStatePersister page" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
      </Parameters>
      <Docs>
        <param name="page">建立其檢視狀態保存性機制的 <see cref="T:System.Web.UI.Page" />。</param>
        <summary>初始化 <see cref="T:System.Web.UI.PageStatePersister" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="page" /> 參數為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="ControlState">
      <MemberSignature Language="C#" Value="public object ControlState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ControlState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageStatePersister.ControlState" />
      <MemberSignature Language="VB.NET" Value="Public Property ControlState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ControlState { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ControlState : obj with get, set" Usage="System.Web.UI.PageStatePersister.ControlState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定物件，表示對 Web 伺服器的 HTTP 要求之間，目前 <see cref="T:System.Web.UI.Page" /> 物件所包含的控制項用以保存的資料。</summary>
        <value>包含檢視狀態資料的物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 控制項狀態是重要的檢視狀態資料的 Web 伺服器控制項需要函式，而且會包含在標準的檢視狀態資訊的個別物件所組成的物件。 在停用檢視狀態時，不會影響控制項狀態資料<xref:System.Web.UI.Page>層級，但需要額外的實作步驟，才能使用。 如需有關使用<xref:System.Web.UI.Control.ViewState%2A>屬性和控制項狀態，當開發控制項，請參閱[開發自訂 ASP.NET 伺服器控制項](http://msdn.microsoft.com/library/fbe26c16-cff4-4089-b3dd-877411f0c0ef)。  
  
   
  
## Examples  
 下列程式碼範例示範如何從衍生的類別<xref:System.Web.UI.PageStatePersister>類別初始化<xref:System.Web.UI.PageStatePersister.ControlState%2A>屬性。 在此範例中，<xref:System.Web.UI.PageStatePersister.ControlState%2A>屬性已指派給<xref:System.Web.UI.Pair.Second>欄位<xref:System.Web.UI.Pair>物件，並使用序列化<xref:System.Web.UI.ObjectStateFormatter>類別。 當<xref:System.Web.UI.PageStatePersister.Load%2A>呼叫方法時，<xref:System.Web.UI.ObjectStateFormatter>類別用來還原序列化檢視狀態和控制項狀態資訊，而<xref:System.Web.UI.PageStatePersister.ControlState%2A>屬性會初始化從產生<xref:System.Web.UI.Pair>物件的<xref:System.Web.UI.Pair.Second>欄位。 此程式碼範例是針對提供之較大範例的一部分<xref:System.Web.UI.PageStatePersister>類別。  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/textfilepagestatepersister.cs#2)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/textfilepagestatepersister.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public abstract void Load ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Load() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageStatePersister.Load" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Load ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Load();" />
      <MemberSignature Language="F#" Value="abstract member Load : unit -&gt; unit" Usage="pageStatePersister.Load " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>當 <see cref="T:System.Web.UI.Page" /> 物件初始化其控制階層架構時，由衍生類別覆寫，以還原序列化並載入保存的狀態資訊。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 衍生自類別<xref:System.Web.UI.PageStatePersister>類別會實作<xref:System.Web.UI.PageStatePersister.Load%2A>方法來初始化<xref:System.Web.UI.PageStatePersister.ViewState%2A>和<xref:System.Web.UI.PageStatePersister.ControlState%2A>從某些永續性格式的屬性。  
  
   
  
## Examples  
 下列程式碼範例示範如何從衍生的類別<xref:System.Web.UI.PageStatePersister>類別會實作<xref:System.Web.UI.PageStatePersister.Load%2A>從持續性媒體載入檢視狀態的方法。 `StreamPageStatePersister`嘗試從資料流讀取資料。 它會使用<xref:System.Web.UI.IStateFormatter>還原序列化檢視狀態資料，並初始化的物件<xref:System.Web.UI.PageStatePersister.ViewState%2A>屬性和<xref:System.Web.UI.PageStatePersister.ControlState%2A>屬性，而網頁初始化控制項。 此程式碼範例是針對提供之較大範例的一部分<xref:System.Web.UI.PageStatePersister>類別。  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/textfilepagestatepersister.cs#2)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/textfilepagestatepersister.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Page">
      <MemberSignature Language="C#" Value="protected System.Web.UI.Page Page { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.Page Page" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageStatePersister.Page" />
      <MemberSignature Language="VB.NET" Value="Protected Property Page As Page" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Web::UI::Page ^ Page { System::Web::UI::Page ^ get(); void set(System::Web::UI::Page ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Page : System.Web.UI.Page with get, set" Usage="System.Web.UI.PageStatePersister.Page" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.Page</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.Web.UI.Page" /> 物件，以建立檢視狀態保存性機制。</summary>
        <value>與 <see cref="T:System.Web.UI.Page" /> 關聯的 <see cref="T:System.Web.UI.PageStatePersister" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用<xref:System.Web.UI.PageStatePersister.Page%2A>屬性來存取目前<xref:System.Web.HttpContext>物件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public abstract void Save ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Save() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageStatePersister.Save" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Save ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Save();" />
      <MemberSignature Language="F#" Value="abstract member Save : unit -&gt; unit" Usage="pageStatePersister.Save " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>從記憶體卸載 <see cref="T:System.Web.UI.Page" /> 物件時，由衍生類別覆寫，以序列化保存的狀態資訊。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 衍生自類別<xref:System.Web.UI.PageStatePersister>類別會實作<xref:System.Web.UI.PageStatePersister.Save%2A>方法來保存的內容<xref:System.Web.UI.PageStatePersister.ViewState%2A>和<xref:System.Web.UI.PageStatePersister.ControlState%2A>在持續性媒體中的屬性。  
  
   
  
## Examples  
 下列程式碼範例示範如何從衍生的類別<xref:System.Web.UI.PageStatePersister>類別會實作<xref:System.Web.UI.PageStatePersister.Save%2A>保存在持續性媒體中的檢視狀態的方法。 `StreamPageStatePersister`會使用<xref:System.Web.UI.IStateFormatter>要序列化的內容物件<xref:System.Web.UI.PageStatePersister.ViewState%2A>屬性和<xref:System.Web.UI.PageStatePersister.ControlState%2A>屬性。 此程式碼範例是針對提供之較大範例的一部分<xref:System.Web.UI.PageStatePersister>類別。  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/textfilepagestatepersister.cs#3)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/textfilepagestatepersister.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StateFormatter">
      <MemberSignature Language="C#" Value="protected System.Web.UI.IStateFormatter StateFormatter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.IStateFormatter StateFormatter" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageStatePersister.StateFormatter" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property StateFormatter As IStateFormatter" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Web::UI::IStateFormatter ^ StateFormatter { System::Web::UI::IStateFormatter ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StateFormatter : System.Web.UI.IStateFormatter" Usage="System.Web.UI.PageStatePersister.StateFormatter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.IStateFormatter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.Web.UI.IStateFormatter" /> 物件，對 <see cref="P:System.Web.UI.PageStatePersister.ViewState" /> 和 <see cref="P:System.Web.UI.PageStatePersister.ControlState" /> 方法呼叫時，這個物件會用來序列化和還原序列化 <see cref="M:System.Web.UI.PageStatePersister.Save" /> 和 <see cref="M:System.Web.UI.PageStatePersister.Load" /> 屬性中包含的狀態資訊。</summary>
        <value>
          <see cref="T:System.Web.UI.IStateFormatter" /> 的執行個體，用來序列化和還原序列化物件狀態。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以覆寫<xref:System.Web.UI.PageStatePersister.StateFormatter%2A>屬性以提供您自己的檢視狀態格式器。  
  
   
  
## Examples  
 下列程式碼範例示範如何從衍生的類別<xref:System.Web.UI.PageStatePersister>類別存取<xref:System.Web.UI.PageStatePersister.StateFormatter%2A>屬性來擷取<xref:System.Web.UI.ObjectStateFormatter>物件，這是預設實作的<xref:System.Web.UI.IStateFormatter>介面，以序列化檢視資料流的狀態和控制項狀態。 此程式碼範例是針對提供之較大範例的一部分<xref:System.Web.UI.PageStatePersister>類別。  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/textfilepagestatepersister.cs#3)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/textfilepagestatepersister.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ViewState">
      <MemberSignature Language="C#" Value="public object ViewState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ViewState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageStatePersister.ViewState" />
      <MemberSignature Language="VB.NET" Value="Public Property ViewState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ViewState { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ViewState : obj with get, set" Usage="System.Web.UI.PageStatePersister.ViewState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定物件，表示對 Web 伺服器的 HTTP 要求之間，目前 <see cref="T:System.Web.UI.Page" /> 物件所包含的控制項用以保存的資料。</summary>
        <value>包含檢視狀態資料的物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 檢視狀態是 Web 伺服器控制項需要函式，並將自己轉譯的狀態資料的字典。 控制項開發人員通常會存取檢視狀態物件使用<xref:System.Web.UI.Control.ViewState%2A>屬性。 在停用檢視狀態時，會影響檢視狀態<xref:System.Web.UI.Page>層級，以及因此控制項可能無法正確運作在這些情況下。 如需有關使用<xref:System.Web.UI.Control.ViewState%2A>和開發控制項時，控制項狀態，請參閱[開發自訂 ASP.NET 伺服器控制項](http://msdn.microsoft.com/library/fbe26c16-cff4-4089-b3dd-877411f0c0ef)。  
  
   
  
## Examples  
 下列程式碼範例示範如何從衍生的類別<xref:System.Web.UI.PageStatePersister>類別初始化<xref:System.Web.UI.PageStatePersister.ViewState%2A>屬性。 在此範例中，<xref:System.Web.UI.PageStatePersister.ViewState%2A>屬性已指派給<xref:System.Web.UI.Pair.First>欄位<xref:System.Web.UI.Pair>物件，並使用序列化<xref:System.Web.UI.ObjectStateFormatter>物件，這是執行個體的<xref:System.Web.UI.IStateFormatter>介面。 當<xref:System.Web.UI.PageStatePersister.Load%2A>呼叫方法時，<xref:System.Web.UI.ObjectStateFormatter>介面用來還原序列化檢視狀態資訊，而<xref:System.Web.UI.PageStatePersister.ViewState%2A>屬性會初始化從產生<xref:System.Web.UI.Pair>物件的<xref:System.Web.UI.Pair.First>欄位。 此程式碼範例是針對提供之較大範例的一部分<xref:System.Web.UI.PageStatePersister>類別。  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/textfilepagestatepersister.cs#2)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/textfilepagestatepersister.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>