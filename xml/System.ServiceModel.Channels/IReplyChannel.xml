<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IReplyChannel.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac559a62b5af42b1a06346ccd412414096f0908aa4f.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">59a62b5af42b1a06346ccd412414096f0908aa4f</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Channels.IReplyChannel">
          <source>Defines the interface that a channel must implement to be on the receiving side of a request-reply communication between messaging endpoints.</source>
          <target state="translated">定義通道必須實作的介面，這個介面會出現在傳訊端點之間要求–回覆通訊的接收端上。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Channels.IReplyChannel">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel&gt;</ph> interface includes synchronous and asynchronous variants of a <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A&gt;</ph> method return an <ph id="ph3">&lt;xref:System.ServiceModel.Channels.RequestContext&gt;</ph> that can be used to construct replies to received requests.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel&gt;</ph> 介面包括 <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A&gt;</ph> 方法的同步和非同步等變體，這些變體所傳回的 <ph id="ph3">&lt;xref:System.ServiceModel.Channels.RequestContext&gt;</ph> 可以用來回覆所收到的要求。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Channels.IReplyChannel">
          <source>The contract includes synchronous and asynchronous variants of receive, try-to-receive and wait-for-a-message functionality.</source>
          <target state="translated">此合約包括接收、嘗試接收 (try-to-receive) 和等候訊息 (wait-for-a-message) 功能的同步和非同步等變體。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Channels.IReplyChannel">
          <source>An <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel&gt;</ph> is not necessarily bound to a single sender.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel&gt;</ph> 不一定要繫結到單一寄件人。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Channels.IReplyChannel">
          <source>Other channels and channel interfaces provide correlation between the sender and the reply channel, but the base contract makes no such restriction.</source>
          <target state="translated">其他的通道和通道介面可以提供特定寄件人和回覆通道之間的相互關聯，但是基底合約並未提供這類限制。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Channels.IReplyChannel">
          <source>The pull model is used with an <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel&gt;</ph> to receive messages.</source>
          <target state="translated">提取模型會配合 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel&gt;</ph> 使用來接收訊息。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Channels.IReplyChannel">
          <source>This model consists of calling <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A&gt;</ph> (or one of its variants) and then waiting for a message to arrive.</source>
          <target state="translated">這個模型的組成包括呼叫 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A&gt;</ph> (或其中一種變體)，然後等候訊息的到達。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Channels.IReplyChannel">
          <source>Begins an asynchronous operation to receive an available request.</source>
          <target state="translated">開始非同步作業，接收可用的要求。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> delegate that receives the notification of the asynchronous receive that a request operation completes.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> 委派，這個委派會接收要求作業完成之非同步接收的通知。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.AsyncCallback,System.Object)">
          <source>An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.</source>
          <target state="translated">應用程式所指定的物件，其中包含與要求作業之非同步接收相關聯的狀態資訊。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous operation to receive an available request with a default timeout.</source>
          <target state="translated">開始非同步作業，接收有預設逾時的可用要求。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that references the asynchronous reception of the request.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>，參考要求的非同步接收。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.AsyncCallback%2CSystem.Object%29&gt;</ph> method implements the standard pattern for invoking <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest&gt;</ph> asynchronously.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.AsyncCallback%2CSystem.Object%29&gt;</ph>方法會實作標準模式來叫用<ph id="ph2">&lt;xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest&gt;</ph>以非同步的方式。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.AsyncCallback,System.Object)">
          <source>The default timeout is 1 minute.</source>
          <target state="translated">預設的逾時值為 1 分鐘。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.AsyncCallback,System.Object)">
          <source>If a receive timeout is set on the binding used to configure the connection, then that value is used.</source>
          <target state="translated">如果接收逾時是設定於連線設定時所用的繫結上，則會使用該值。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.AsyncCallback,System.Object)">
          <source>Use <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;</ph> if you want to specify an explicit timeout with the call that overrides these other values.</source>
          <target state="translated">如果您要用會覆寫這些其他值的呼叫來指定明確的逾時，請使用<ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.AsyncCallback,System.Object)">
          <source>If the request message received is larger that the maximum message size allowed by the binding being used, a <ph id="ph1">&lt;xref:System.ServiceModel.QuotaExceededException&gt;</ph> is thrown.</source>
          <target state="translated">如果接收的要求訊息大於要使用繫結所允許的最大訊息大小，則會擲回 <ph id="ph1">&lt;xref:System.ServiceModel.QuotaExceededException&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.AsyncCallback,System.Object)">
          <source>The maximum message size is set by the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A&gt;</ph> property.</source>
          <target state="translated">訊息大小上限是由 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A&gt;</ph> 屬性所設定。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.AsyncCallback,System.Object)">
          <source>The default value is 65536 bytes.</source>
          <target state="translated">預設值為 65536 個位元組。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.AsyncCallback,System.Object)">
          <source>The following code illustrates how to implement this method:</source>
          <target state="translated">下列程式碼說明如何實作這個方法：</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that specifies the interval of time to wait for the reception of an available request.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>，指定等候接收可用要求的時間間隔。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> delegate that receives the notification of the asynchronous receive that a request operation completes.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> 委派，這個委派會接收要求作業完成之非同步接收的通知。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.</source>
          <target state="translated">應用程式所指定的物件，其中包含與要求作業之非同步接收相關聯的狀態資訊。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous operation to receive an available request with a specified timeout.</source>
          <target state="translated">開始非同步作業，接收有已指定逾時的可用要求。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that references the asynchronous reception of the request.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>，參考要求的非同步接收。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;</ph> method implements the standard pattern for invoking <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%28System.TimeSpan%29&gt;</ph> asynchronously.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;</ph>方法會實作標準模式來叫用<ph id="ph2">&lt;xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%28System.TimeSpan%29&gt;</ph>以非同步的方式。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The timeout set on this method overrides a receive timeout set on the binding that is used to configure the connection.</source>
          <target state="translated">使用這個方法設定的逾時，將會覆寫連線設定時所使用繫結上已設定的接收逾時。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>If the request message received is larger that the maximum message size allowed by the binding being used, a <ph id="ph1">&lt;xref:System.ServiceModel.QuotaExceededException&gt;</ph> is thrown.</source>
          <target state="translated">如果接收的要求訊息大於要使用繫結所允許的最大訊息大小，則會擲回 <ph id="ph1">&lt;xref:System.ServiceModel.QuotaExceededException&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The maximum message size is set by the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A&gt;</ph> property.</source>
          <target state="translated">訊息大小上限是由 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A&gt;</ph> 屬性所設定。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The default value is 65536 bytes.</source>
          <target state="translated">預設值為 65536 個位元組。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The following code illustrates how to implement this method:</source>
          <target state="translated">下列程式碼說明如何實作這個方法：</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that specifies how long the receive request operation has to complete before timing out and returning <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>，指定必須在逾時和傳回 <ph id="ph2">&lt;see langword="false" /&gt;</ph> 多久之前完成接收要求作業。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> delegate that receives the notification of the asynchronous receive that a request operation completes.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> 委派，這個委派會接收要求作業完成之非同步接收的通知。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.</source>
          <target state="translated">應用程式所指定的物件，其中包含與要求作業之非同步接收相關聯的狀態資訊。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous operation to receive a request message that has a specified time out and state object associated with it.</source>
          <target state="translated">開始非同步的作業，接收具有已指定逾時以及與該作業關聯之狀態物件的要求訊息。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that references the asynchronous receive request operation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>，參考非同步接收要求作業。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Use the asynchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;</ph> method when you need the application processing to continue without waiting.</source>
          <target state="translated">當您需要應用程式繼續執行而不要等候時，請使用非同步的 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Use one of the synchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest%28System.TimeSpan%2CSystem.ServiceModel.Channels.RequestContext%40%29&gt;</ph> methods when it is acceptable for the current thread to be blocked while it replies to the request message or until the timeout interval is exceeded.</source>
          <target state="translated">當目前的執行緒可接受進行封鎖並同時回覆要求訊息，或是直到已超過逾時間隔時，請使用其中一種同步的 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest%28System.TimeSpan%2CSystem.ServiceModel.Channels.RequestContext%40%29&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>This method receives notification, through a callback, of the identity of the event handler for the operation.</source>
          <target state="translated">這個方法會透過回呼 (Callback)，接收有關作業之事件處理常式身分識別的通知。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The operation is not complete until either a message becomes available in the channel or the time out occurs.</source>
          <target state="translated">在訊息可以於通道中使用或發生逾時之後，作業才會完成。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The following code illustrates how to implement this method:</source>
          <target state="translated">下列程式碼說明如何實作這個方法：</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The operation returns <ph id="ph1">&lt;see langword="false" /&gt;</ph> if the specified <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph> is exceeded.</source>
          <target state="translated">如果超出了指定的 <ph id="ph1">&lt;see langword="false" /&gt;</ph>，作業會傳回 <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that specifies the interval of time to wait for the reception of an available request.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>，指定等候接收可用要求的時間間隔。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> delegate that receives the notification of the asynchronous receive that a request operation completes.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> 委派，這個委派會接收要求作業完成之非同步接收的通知。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.</source>
          <target state="translated">應用程式所指定的物件，其中包含與要求作業之非同步接收相關聯的狀態資訊。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous request operation that has a specified time out and state object associated with it.</source>
          <target state="translated">開始非同步的要求作業，這項作業具有已指定逾時以及與該作業關聯之狀態物件的訊息。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that references the asynchronous operation to wait for a request message to arrive.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>，參考非同步作業以等候要求訊息到達。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Use the synchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29&gt;</ph> method when it is acceptable for the current thread to be blocked while it waits for a request message to arrive in the queue.</source>
          <target state="translated">當目前的執行緒可接受進行封鎖並同時等候要求訊息到達佇列時，請使用同步的 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The thread is blocked up to the specified <ph id="ph1">`timeout`</ph>.</source>
          <target state="translated">執行緒會持續封鎖，直到指定的 <ph id="ph1">`timeout`</ph> 為止。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>This method receives notification, through a callback, of the identity of the event handler for the operation.</source>
          <target state="translated">這個方法會透過回呼 (Callback)，接收有關作業之事件處理常式身分識別的通知。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The operation is not complete until either a request message becomes available in the channel or the time out occurs.</source>
          <target state="translated">在要求訊息可以於通道中使用或發生逾時之後，作業才會完成。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The following code illustrates how to implement this method:</source>
          <target state="translated">下列程式碼說明如何實作這個方法：</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The operation returns <ph id="ph1">&lt;see langword="false" /&gt;</ph> if the specified <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph> is exceeded.</source>
          <target state="translated">如果超出了指定的 <ph id="ph1">&lt;see langword="false" /&gt;</ph>，作業會傳回 <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> returned by a call to the <ph id="ph2">&lt;see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /&gt;</ph> method.</source>
          <target state="translated">由 <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> 方法的呼叫所傳回的 <ph id="ph2">&lt;see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest(System.IAsyncResult)">
          <source>Completes an asynchronous operation to receive an available request.</source>
          <target state="translated">完成非同步作業，接收可用的要求。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.RequestContext" /&gt;</ph> used to construct a reply to the request.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.RequestContext" /&gt;</ph>，用於建構要求的回覆。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest(System.IAsyncResult)">
          <source>If the request message received is larger that the maximum message size allowed by the binding being used, a <ph id="ph1">&lt;xref:System.ServiceModel.QuotaExceededException&gt;</ph> is thrown.</source>
          <target state="translated">如果接收的要求訊息大於要使用繫結所允許的最大訊息大小，則會擲回 <ph id="ph1">&lt;xref:System.ServiceModel.QuotaExceededException&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest(System.IAsyncResult)">
          <source>The maximum message size is set by the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A&gt;</ph> property.</source>
          <target state="translated">訊息大小上限是由 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A&gt;</ph> 屬性所設定。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest(System.IAsyncResult)">
          <source>The default value is 65536 bytes.</source>
          <target state="translated">預設值為 65536 個位元組。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest(System.IAsyncResult)">
          <source>The following code illustrates how to implement this method:</source>
          <target state="translated">下列程式碼說明如何實作這個方法：</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest(System.IAsyncResult)">
          <source>The operation should throw a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> if the specified <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph> is exceeded before the operation is completed.</source>
          <target state="translated">如果在作業完成之前超出了指定的 <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph>，此作業應該擲回 <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest(System.IAsyncResult,System.ServiceModel.Channels.RequestContext@)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> returned by a call to the <ph id="ph2">&lt;see cref="M:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)" /&gt;</ph> method.</source>
          <target state="translated">由 <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> 方法的呼叫所傳回的 <ph id="ph2">&lt;see cref="M:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest(System.IAsyncResult,System.ServiceModel.Channels.RequestContext@)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.RequestContext" /&gt;</ph> received.</source>
          <target state="translated">所接收的 <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.RequestContext" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest(System.IAsyncResult,System.ServiceModel.Channels.RequestContext@)">
          <source>Completes the specified asynchronous operation to receive a request message.</source>
          <target state="translated">完成指定的非同步作業，以便接收要求訊息。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest(System.IAsyncResult,System.ServiceModel.Channels.RequestContext@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a request message is received before the specified interval of time elapses; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果在超過指定時間間隔之前接收到要求訊息，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest(System.IAsyncResult,System.ServiceModel.Channels.RequestContext@)">
          <source>The following code illustrates how to implement this method:</source>
          <target state="translated">下列程式碼說明如何實作這個方法：</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that identifies the <ph id="ph2">&lt;see cref="M:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)" /&gt;</ph> operation to finish, and from which to retrieve an end result.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>，識別要完成並從其中擷取最終結果的 <ph id="ph2">&lt;see cref="M:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)" /&gt;</ph> 作業。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest(System.IAsyncResult)">
          <source>Completes the specified asynchronous wait-for-a-request message operation.</source>
          <target state="translated">完成指定的非同步「等候要求」(wait-for-a-request) 作業。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest(System.IAsyncResult)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a request is received before the specified interval of time elapses; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果在超過指定時間間隔之前接收到要求，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest(System.IAsyncResult)">
          <source>The following code illustrates how to implement this method:</source>
          <target state="translated">下列程式碼說明如何實作這個方法：</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="P:System.ServiceModel.Channels.IReplyChannel.LocalAddress">
          <source>Gets the address on which this reply channel receives messages.</source>
          <target state="translated">取得回覆通道接收訊息的位址。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Channels.IReplyChannel.LocalAddress">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.EndpointAddress" /&gt;</ph> on which this reply channel receives messages.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ServiceModel.EndpointAddress" /&gt;</ph>，回覆通道在上面接收訊息的位址。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Channels.IReplyChannel.LocalAddress">
          <source>The following code illustrates how to implement this property:</source>
          <target state="translated">下列程式碼說明如何實作這個屬性：</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Channels.IReplyChannel">
          <source>Returns the context of the request received, if one is available</source>
          <target state="translated">如果有收到可用的要求，則將該要求的內容傳回。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest">
          <source>Returns the context of the request received, if one is available.</source>
          <target state="translated">如果有收到可用的要求，則將該要求的內容傳回。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest">
          <source>If a context is not available, waits until there is one available.</source>
          <target state="translated">如果無法取得內容，請等候直到有可用內容為止。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.RequestContext" /&gt;</ph> used to construct replies.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.RequestContext" /&gt;</ph>，用來建構回覆。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Channels.RequestContext&gt;</ph> encapsulates the request message and a mechanism for replying to that message.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Channels.RequestContext&gt;</ph>，封裝要求訊息和回覆該訊息的機制。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A&gt;</ph> can be called multiple times or concurrently.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A&gt;</ph> 可以多次呼叫或同時呼叫。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest">
          <source>Only one <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A&gt;</ph> call completes per request received.</source>
          <target state="translated">每個接收要求只會完成一次 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A&gt;</ph> 呼叫。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest">
          <source>If the request message received is larger that the maximum message size allowed by the binding being used, a <ph id="ph1">&lt;xref:System.ServiceModel.QuotaExceededException&gt;</ph> is thrown.</source>
          <target state="translated">如果接收的要求訊息大於要使用繫結所允許的最大訊息大小，則會擲回 <ph id="ph1">&lt;xref:System.ServiceModel.QuotaExceededException&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest">
          <source>The maximum message size is set by the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A&gt;</ph> property.</source>
          <target state="translated">訊息大小上限是由 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A&gt;</ph> 屬性所設定。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest">
          <source>The default value is 65536 bytes.</source>
          <target state="translated">預設值為 65536 個位元組。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest">
          <source>The following code illustrates how to implement this method:</source>
          <target state="translated">下列程式碼說明如何實作這個方法：</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that specifies how long the receive of a request operation has to complete before timing out and returning <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>，指定必須在逾時和傳回 <ph id="ph2">&lt;see langword="false" /&gt;</ph> 多久之前完成接收要求作業。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(System.TimeSpan)">
          <source>Returns the context of the request received, if one is available.</source>
          <target state="translated">如果有收到可用的要求，則將該要求的內容傳回。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(System.TimeSpan)">
          <source>If a context is not available, waits until there is one available.</source>
          <target state="translated">如果無法取得內容，請等候直到有可用內容為止。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.RequestContext" /&gt;</ph> used to construct replies.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.RequestContext" /&gt;</ph>，用來建構回覆。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(System.TimeSpan)">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Channels.RequestContext&gt;</ph> encapsulates the request message and a mechanism for replying to that message.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Channels.RequestContext&gt;</ph>，封裝要求訊息和回覆該訊息的機制。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(System.TimeSpan)">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A&gt;</ph> can be called multiple times or concurrently.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A&gt;</ph> 可以多次呼叫或同時呼叫。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(System.TimeSpan)">
          <source>Only one <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A&gt;</ph> call completes per request received.</source>
          <target state="translated">每個接收要求只會完成一次 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A&gt;</ph> 呼叫。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(System.TimeSpan)">
          <source>If the request message received is larger that the maximum message size allowed by the binding being used, a <ph id="ph1">&lt;xref:System.ServiceModel.QuotaExceededException&gt;</ph> is thrown.</source>
          <target state="translated">如果接收的要求訊息大於要使用繫結所允許的最大訊息大小，則會擲回 <ph id="ph1">&lt;xref:System.ServiceModel.QuotaExceededException&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(System.TimeSpan)">
          <source>The maximum message size is set by the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A&gt;</ph> property.</source>
          <target state="translated">訊息大小上限是由 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A&gt;</ph> 屬性所設定。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(System.TimeSpan)">
          <source>The default value is 65536 bytes.</source>
          <target state="translated">預設值為 65536 個位元組。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(System.TimeSpan)">
          <source>The following code illustrates how to implement this method:</source>
          <target state="translated">下列程式碼說明如何實作這個方法：</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(System.TimeSpan,System.ServiceModel.Channels.RequestContext@)">
          <source>The <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that specifies how long the receive of a request operation has to complete before timing out and returning <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>，指定必須在逾時和傳回 <ph id="ph2">&lt;see langword="false" /&gt;</ph> 多久之前完成接收要求作業。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(System.TimeSpan,System.ServiceModel.Channels.RequestContext@)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.RequestContext" /&gt;</ph> received.</source>
          <target state="translated">所接收的 <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.RequestContext" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(System.TimeSpan,System.ServiceModel.Channels.RequestContext@)">
          <source>Returns a value that indicates whether a request is received before a specified interval of time elapses.</source>
          <target state="translated">傳回值，這個值會表示要求是否是在超過已指定時間間隔之前所接收。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(System.TimeSpan,System.ServiceModel.Channels.RequestContext@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a request message is received before the specified interval of time elapses; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果在超過指定時間間隔之前接收到要求訊息，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(System.TimeSpan,System.ServiceModel.Channels.RequestContext@)">
          <source>Use <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest%28System.TimeSpan%2CSystem.ServiceModel.Channels.RequestContext%40%29&gt;</ph> when it is acceptable for the current thread to be blocked while it waits for a request message to arrive in the queue.</source>
          <target state="translated">當目前的執行緒可接受進行封鎖並同時等候要求訊息到達佇列時，請使用 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest%28System.TimeSpan%2CSystem.ServiceModel.Channels.RequestContext%40%29&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(System.TimeSpan,System.ServiceModel.Channels.RequestContext@)">
          <source>The thread is blocked up to the specified <ph id="ph1">`timeout`</ph>.</source>
          <target state="translated">執行緒會持續封鎖，直到指定的 <ph id="ph1">`timeout`</ph> 為止。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(System.TimeSpan,System.ServiceModel.Channels.RequestContext@)">
          <source>If you need the application processing to continue without waiting, use the asynchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;</ph> method.</source>
          <target state="translated">當您需要應用程式繼續執行而不要等候，請使用非同步的 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(System.TimeSpan,System.ServiceModel.Channels.RequestContext@)">
          <source>The following code illustrates how to implement this method:</source>
          <target state="translated">下列程式碼說明如何實作這個方法：</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(System.TimeSpan,System.ServiceModel.Channels.RequestContext@)">
          <source>The operation returns <ph id="ph1">&lt;see langword="false" /&gt;</ph> if the specified <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph> is exceeded.</source>
          <target state="translated">如果超出了指定的 <ph id="ph1">&lt;see langword="false" /&gt;</ph>，作業會傳回 <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.WaitForRequest(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that specifies how long a request operation has to complete before timing out and returning <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>，指定必須在逾時和傳回 <ph id="ph2">&lt;see langword="false" /&gt;</ph> 多久之前完成接收要求作業。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.WaitForRequest(System.TimeSpan)">
          <source>Returns a value that indicates whether a request message is received before a specified interval of time elapses.</source>
          <target state="translated">傳回值，這個值會表示要求訊息是否是在超過已指定時間間隔之前所接收。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.WaitForRequest(System.TimeSpan)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a request is received before the specified interval of time elapses; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果在超過指定時間間隔之前接收到要求，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.WaitForRequest(System.TimeSpan)">
          <source>Calling <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29&gt;</ph> does not result in a request message being received or processed in any way.</source>
          <target state="translated">呼叫 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29&gt;</ph>，並不會導致要求訊息以任何其他方式進行接收或處理。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.WaitForRequest(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;</ph> method exists primarily for transacted scenarios where the user wants to receive the message using a transaction.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;</ph> 方法的存在目的，主要是針對使用者希望接收到使用交易之訊息的交易狀況。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.WaitForRequest(System.TimeSpan)">
          <source>When using just <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A&gt;</ph> normally for this, the user must create the transaction, and then call <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A&gt;</ph> and hope the message arrives before the transaction times out, which may not be possible.</source>
          <target state="translated">一般針對這種狀況會只有使用 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A&gt;</ph>，此時使用者必須建立交易並接著呼叫 <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A&gt;</ph>，然後期待訊息會在交息逾時之前到達，但是訊息可能不會如預期般到達。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.WaitForRequest(System.TimeSpan)">
          <source>Instead, the user can call <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29&gt;</ph> and specify the time out (even infinite), then when a message arrives they can open the transaction, call <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A&gt;</ph> and be confident that they can get the message back before the transaction expires.</source>
          <target state="translated">相反的，使用者可以呼叫 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29&gt;</ph> 並指定逾時 (甚至無限時)，接著在訊息到達時開啟交易並呼叫 <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A&gt;</ph>，然後深信自己可以在交易逾時之前取回訊息。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.WaitForRequest(System.TimeSpan)">
          <source>Use <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29&gt;</ph> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue.</source>
          <target state="translated">當目前的執行緒可接受進行封鎖並同時等候訊息到達佇列時，請使用 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.WaitForRequest(System.TimeSpan)">
          <source>The thread is blocked up to the specified <ph id="ph1">`timeout`</ph>.</source>
          <target state="translated">執行緒會持續封鎖，直到指定的 <ph id="ph1">`timeout`</ph> 為止。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.WaitForRequest(System.TimeSpan)">
          <source>If you need the application processing to continue without waiting, use the asynchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;</ph> method.</source>
          <target state="translated">當您需要應用程式繼續執行而不要等候，請使用非同步的 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.WaitForRequest(System.TimeSpan)">
          <source>The following code illustrates how to implement this method:</source>
          <target state="translated">下列程式碼說明如何實作這個方法：</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.WaitForRequest(System.TimeSpan)">
          <source>The operation returns <ph id="ph1">&lt;see langword="false" /&gt;</ph> if the specified <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph> is exceeded.</source>
          <target state="translated">如果超出了指定的 <ph id="ph1">&lt;see langword="false" /&gt;</ph>，作業會傳回 <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph>。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>