<Type Name="IReplyChannel" FullName="System.ServiceModel.Channels.IReplyChannel">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="da6c92bd26d8a6d98d4ebcb2350ca29a007be61a" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36421943" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IReplyChannel : System.ServiceModel.Channels.IChannel" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IReplyChannel implements class System.ServiceModel.Channels.IChannel, class System.ServiceModel.ICommunicationObject" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Channels.IReplyChannel" />
  <TypeSignature Language="VB.NET" Value="Public Interface IReplyChannel&#xA;Implements IChannel" />
  <TypeSignature Language="C++ CLI" Value="public interface class IReplyChannel : System::ServiceModel::Channels::IChannel" />
  <TypeSignature Language="F#" Value="type IReplyChannel = interface&#xA;    interface IChannel&#xA;    interface ICommunicationObject" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ServiceModel.Channels.IChannel</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="3dc46-101">定義通道必須實作的介面，這個介面會出現在傳訊端點之間要求–回覆通訊的接收端上。</span>
      <span class="sxs-lookup">
        <span data-stu-id="3dc46-101">Defines the interface that a channel must implement to be on the receiving side of a request-reply communication between messaging endpoints.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3dc46-102"><xref:System.ServiceModel.Channels.IReplyChannel> 介面包括 <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> 方法的同步和非同步等變體，這些變體所傳回的 <xref:System.ServiceModel.Channels.RequestContext> 可以用來回覆所收到的要求。</span><span class="sxs-lookup"><span data-stu-id="3dc46-102">The <xref:System.ServiceModel.Channels.IReplyChannel> interface includes synchronous and asynchronous variants of a <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> method return an <xref:System.ServiceModel.Channels.RequestContext> that can be used to construct replies to received requests.</span></span>  
  
 <span data-ttu-id="3dc46-103">此合約包括接收、嘗試接收 (try-to-receive) 和等候訊息 (wait-for-a-message) 功能的同步和非同步等變體。</span><span class="sxs-lookup"><span data-stu-id="3dc46-103">The contract includes synchronous and asynchronous variants of receive, try-to-receive and wait-for-a-message functionality.</span></span>  
  
 <span data-ttu-id="3dc46-104"><xref:System.ServiceModel.Channels.IReplyChannel> 不一定要繫結到單一寄件人。</span><span class="sxs-lookup"><span data-stu-id="3dc46-104">An <xref:System.ServiceModel.Channels.IReplyChannel> is not necessarily bound to a single sender.</span></span> <span data-ttu-id="3dc46-105">其他的通道和通道介面可以提供特定寄件人和回覆通道之間的相互關聯，但是基底合約並未提供這類限制。</span><span class="sxs-lookup"><span data-stu-id="3dc46-105">Other channels and channel interfaces provide correlation between the sender and the reply channel, but the base contract makes no such restriction.</span></span>  
  
 <span data-ttu-id="3dc46-106">提取模型會配合 <xref:System.ServiceModel.Channels.IReplyChannel> 使用來接收訊息。</span><span class="sxs-lookup"><span data-stu-id="3dc46-106">The pull model is used with an <xref:System.ServiceModel.Channels.IReplyChannel> to receive messages.</span></span> <span data-ttu-id="3dc46-107">這個模型的組成包括呼叫 <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> (或其中一種變體)，然後等候訊息的到達。</span><span class="sxs-lookup"><span data-stu-id="3dc46-107">This model consists of calling <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> (or one of its variants) and then waiting for a message to arrive.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="BeginReceiveRequest">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3dc46-108">開始非同步作業，接收可用的要求。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc46-108">Begins an asynchronous operation to receive an available request.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginReceiveRequest">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceiveRequest (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginReceiveRequest(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceiveRequest (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceiveRequest(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginReceiveRequest : AsyncCallback * obj -&gt; IAsyncResult" Usage="iReplyChannel.BeginReceiveRequest (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="3dc46-109">
            <see cref="T:System.AsyncCallback" /> 委派，這個委派會接收要求作業完成之非同步接收的通知。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc46-109">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous receive that a request operation completes.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="3dc46-110">應用程式所指定的物件，其中包含與要求作業之非同步接收相關聯的狀態資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc46-110">An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3dc46-111">開始非同步作業，接收有預設逾時的可用要求。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc46-111">Begins an asynchronous operation to receive an available request with a default timeout.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3dc46-112">
            <see cref="T:System.IAsyncResult" />，參考要求的非同步接收。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc46-112">The <see cref="T:System.IAsyncResult" /> that references the asynchronous reception of the request.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3dc46-113"><xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.AsyncCallback%2CSystem.Object%29>方法會實作標準模式來叫用<xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest>以非同步的方式。</span><span class="sxs-lookup"><span data-stu-id="3dc46-113">The <xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.AsyncCallback%2CSystem.Object%29> method implements the standard pattern for invoking <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest> asynchronously.</span></span> <span data-ttu-id="3dc46-114">預設的逾時值為 1 分鐘。</span><span class="sxs-lookup"><span data-stu-id="3dc46-114">The default timeout is 1 minute.</span></span> <span data-ttu-id="3dc46-115">如果接收逾時是設定於連線設定時所用的繫結上，則會使用該值。</span><span class="sxs-lookup"><span data-stu-id="3dc46-115">If a receive timeout is set on the binding used to configure the connection, then that value is used.</span></span> <span data-ttu-id="3dc46-116">如果您要用會覆寫這些其他值的呼叫來指定明確的逾時，請使用<xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>。</span><span class="sxs-lookup"><span data-stu-id="3dc46-116">Use <xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> if you want to specify an explicit timeout with the call that overrides these other values.</span></span>  
  
 <span data-ttu-id="3dc46-117">如果接收的要求訊息大於要使用繫結所允許的最大訊息大小，則會擲回 <xref:System.ServiceModel.QuotaExceededException>。</span><span class="sxs-lookup"><span data-stu-id="3dc46-117">If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown.</span></span> <span data-ttu-id="3dc46-118">訊息大小上限是由 <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> 屬性所設定。</span><span class="sxs-lookup"><span data-stu-id="3dc46-118">The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property.</span></span> <span data-ttu-id="3dc46-119">預設值為 65536 個位元組。</span><span class="sxs-lookup"><span data-stu-id="3dc46-119">The default value is 65536 bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3dc46-120">下列程式碼說明如何實作這個方法：</span><span class="sxs-lookup"><span data-stu-id="3dc46-120">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginReceiveRequest">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceiveRequest (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginReceiveRequest(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceiveRequest (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceiveRequest(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginReceiveRequest : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="iReplyChannel.BeginReceiveRequest (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="3dc46-121">
            <see cref="T:System.TimeSpan" />，指定等候接收可用要求的時間間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc46-121">The <see cref="T:System.TimeSpan" /> that specifies the interval of time to wait for the reception of an available request.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="3dc46-122">
            <see cref="T:System.AsyncCallback" /> 委派，這個委派會接收要求作業完成之非同步接收的通知。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc46-122">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous receive that a request operation completes.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="3dc46-123">應用程式所指定的物件，其中包含與要求作業之非同步接收相關聯的狀態資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc46-123">An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3dc46-124">開始非同步作業，接收有已指定逾時的可用要求。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc46-124">Begins an asynchronous operation to receive an available request with a specified timeout.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3dc46-125">
            <see cref="T:System.IAsyncResult" />，參考要求的非同步接收。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc46-125">The <see cref="T:System.IAsyncResult" /> that references the asynchronous reception of the request.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3dc46-126"><xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>方法會實作標準模式來叫用<xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%28System.TimeSpan%29>以非同步的方式。</span><span class="sxs-lookup"><span data-stu-id="3dc46-126">The <xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method implements the standard pattern for invoking <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%28System.TimeSpan%29> asynchronously.</span></span> <span data-ttu-id="3dc46-127">使用這個方法設定的逾時，將會覆寫連線設定時所使用繫結上已設定的接收逾時。</span><span class="sxs-lookup"><span data-stu-id="3dc46-127">The timeout set on this method overrides a receive timeout set on the binding that is used to configure the connection.</span></span>  
  
 <span data-ttu-id="3dc46-128">如果接收的要求訊息大於要使用繫結所允許的最大訊息大小，則會擲回 <xref:System.ServiceModel.QuotaExceededException>。</span><span class="sxs-lookup"><span data-stu-id="3dc46-128">If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown.</span></span> <span data-ttu-id="3dc46-129">訊息大小上限是由 <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> 屬性所設定。</span><span class="sxs-lookup"><span data-stu-id="3dc46-129">The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property.</span></span> <span data-ttu-id="3dc46-130">預設值為 65536 個位元組。</span><span class="sxs-lookup"><span data-stu-id="3dc46-130">The default value is 65536 bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3dc46-131">下列程式碼說明如何實作這個方法：</span><span class="sxs-lookup"><span data-stu-id="3dc46-131">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#2](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginTryReceiveRequest">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginTryReceiveRequest (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginTryReceiveRequest(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginTryReceiveRequest (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginTryReceiveRequest(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginTryReceiveRequest : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="iReplyChannel.BeginTryReceiveRequest (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="3dc46-132">
            <see cref="T:System.TimeSpan" />，指定必須在逾時和傳回 <see langword="false" /> 多久之前完成接收要求作業。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc46-132">The <see cref="T:System.TimeSpan" /> that specifies how long the receive request operation has to complete before timing out and returning <see langword="false" />.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="3dc46-133">
            <see cref="T:System.AsyncCallback" /> 委派，這個委派會接收要求作業完成之非同步接收的通知。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc46-133">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous receive that a request operation completes.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="3dc46-134">應用程式所指定的物件，其中包含與要求作業之非同步接收相關聯的狀態資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc46-134">An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3dc46-135">開始非同步的作業，接收具有已指定逾時以及與該作業關聯之狀態物件的要求訊息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc46-135">Begins an asynchronous operation to receive a request message that has a specified time out and state object associated with it.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3dc46-136">
            <see cref="T:System.IAsyncResult" />，參考非同步接收要求作業。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc46-136">The <see cref="T:System.IAsyncResult" /> that references the asynchronous receive request operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3dc46-137">當您需要應用程式繼續執行而不要等候時，請使用非同步的 <xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> 方法。</span><span class="sxs-lookup"><span data-stu-id="3dc46-137">Use the asynchronous <xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method when you need the application processing to continue without waiting.</span></span> <span data-ttu-id="3dc46-138">當目前的執行緒可接受進行封鎖並同時回覆要求訊息，或是直到已超過逾時間隔時，請使用其中一種同步的 <xref:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest%28System.TimeSpan%2CSystem.ServiceModel.Channels.RequestContext%40%29> 方法。</span><span class="sxs-lookup"><span data-stu-id="3dc46-138">Use one of the synchronous <xref:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest%28System.TimeSpan%2CSystem.ServiceModel.Channels.RequestContext%40%29> methods when it is acceptable for the current thread to be blocked while it replies to the request message or until the timeout interval is exceeded.</span></span>  
  
 <span data-ttu-id="3dc46-139">這個方法會透過回呼 (Callback)，接收有關作業之事件處理常式身分識別的通知。</span><span class="sxs-lookup"><span data-stu-id="3dc46-139">This method receives notification, through a callback, of the identity of the event handler for the operation.</span></span> <span data-ttu-id="3dc46-140">在訊息可以於通道中使用或發生逾時之後，作業才會完成。</span><span class="sxs-lookup"><span data-stu-id="3dc46-140">The operation is not complete until either a message becomes available in the channel or the time out occurs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3dc46-141">下列程式碼說明如何實作這個方法：</span><span class="sxs-lookup"><span data-stu-id="3dc46-141">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#5](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="3dc46-142">
            <para>此作業會傳回<see langword="false" />如果指定<paramref name="timeout" />超過。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc46-142">
              <para>The operation returns <see langword="false" /> if the specified <paramref name="timeout" /> is exceeded.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="BeginWaitForRequest">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginWaitForRequest (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginWaitForRequest(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginWaitForRequest (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginWaitForRequest(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginWaitForRequest : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="iReplyChannel.BeginWaitForRequest (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="3dc46-143">
            <see cref="T:System.TimeSpan" />，指定等候接收可用要求的時間間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc46-143">The <see cref="T:System.TimeSpan" /> that specifies the interval of time to wait for the reception of an available request.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="3dc46-144">
            <see cref="T:System.AsyncCallback" /> 委派，這個委派會接收要求作業完成之非同步接收的通知。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc46-144">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous receive that a request operation completes.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="3dc46-145">應用程式所指定的物件，其中包含與要求作業之非同步接收相關聯的狀態資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc46-145">An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3dc46-146">開始非同步的要求作業，這項作業具有已指定逾時以及與該作業關聯之狀態物件的訊息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc46-146">Begins an asynchronous request operation that has a specified time out and state object associated with it.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3dc46-147">
            <see cref="T:System.IAsyncResult" />，參考非同步作業以等候要求訊息到達。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc46-147">The <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to wait for a request message to arrive.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3dc46-148">當目前的執行緒可接受進行封鎖並同時等候要求訊息到達佇列時，請使用同步的 <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> 方法。</span><span class="sxs-lookup"><span data-stu-id="3dc46-148">Use the synchronous <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> method when it is acceptable for the current thread to be blocked while it waits for a request message to arrive in the queue.</span></span> <span data-ttu-id="3dc46-149">執行緒會持續封鎖，直到指定的 `timeout` 為止。</span><span class="sxs-lookup"><span data-stu-id="3dc46-149">The thread is blocked up to the specified `timeout`.</span></span>  
  
 <span data-ttu-id="3dc46-150">這個方法會透過回呼 (Callback)，接收有關作業之事件處理常式身分識別的通知。</span><span class="sxs-lookup"><span data-stu-id="3dc46-150">This method receives notification, through a callback, of the identity of the event handler for the operation.</span></span> <span data-ttu-id="3dc46-151">在要求訊息可以於通道中使用或發生逾時之後，作業才會完成。</span><span class="sxs-lookup"><span data-stu-id="3dc46-151">The operation is not complete until either a request message becomes available in the channel or the time out occurs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3dc46-152">下列程式碼說明如何實作這個方法：</span><span class="sxs-lookup"><span data-stu-id="3dc46-152">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#10](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#10)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="3dc46-153">
            <para>此作業會傳回<see langword="false" />如果指定<paramref name="timeout" />超過。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc46-153">
              <para>The operation returns <see langword="false" /> if the specified <paramref name="timeout" /> is exceeded.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="EndReceiveRequest">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.RequestContext EndReceiveRequest (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.RequestContext EndReceiveRequest(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceiveRequest (result As IAsyncResult) As RequestContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::RequestContext ^ EndReceiveRequest(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndReceiveRequest : IAsyncResult -&gt; System.ServiceModel.Channels.RequestContext" Usage="iReplyChannel.EndReceiveRequest result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.RequestContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">
          <span data-ttu-id="3dc46-154">由 <see cref="T:System.IAsyncResult" /> 方法的呼叫所傳回的 <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc46-154">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /> method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3dc46-155">完成非同步作業，接收可用的要求。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc46-155">Completes an asynchronous operation to receive an available request.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3dc46-156">
            <see cref="T:System.ServiceModel.Channels.RequestContext" />，用於建構要求的回覆。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc46-156">The <see cref="T:System.ServiceModel.Channels.RequestContext" /> used to construct a reply to the request.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3dc46-157">如果接收的要求訊息大於要使用繫結所允許的最大訊息大小，則會擲回 <xref:System.ServiceModel.QuotaExceededException>。</span><span class="sxs-lookup"><span data-stu-id="3dc46-157">If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown.</span></span> <span data-ttu-id="3dc46-158">訊息大小上限是由 <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> 屬性所設定。</span><span class="sxs-lookup"><span data-stu-id="3dc46-158">The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property.</span></span> <span data-ttu-id="3dc46-159">預設值為 65536 個位元組。</span><span class="sxs-lookup"><span data-stu-id="3dc46-159">The default value is 65536 bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3dc46-160">下列程式碼說明如何實作這個方法：</span><span class="sxs-lookup"><span data-stu-id="3dc46-160">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#3](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="3dc46-161">
            <para>此作業應該擲回<see cref="T:System.TimeoutException" />如果指定<paramref name="timeout" />在作業完成之前超出。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc46-161">
              <para>The operation should throw a <see cref="T:System.TimeoutException" /> if the specified <paramref name="timeout" /> is exceeded before the operation is completed.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="EndTryReceiveRequest">
      <MemberSignature Language="C#" Value="public bool EndTryReceiveRequest (IAsyncResult result, out System.ServiceModel.Channels.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EndTryReceiveRequest(class System.IAsyncResult result, [out] class System.ServiceModel.Channels.RequestContext&amp; context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest(System.IAsyncResult,System.ServiceModel.Channels.RequestContext@)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndTryReceiveRequest (result As IAsyncResult, ByRef context As RequestContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndTryReceiveRequest(IAsyncResult ^ result, [Runtime::InteropServices::Out] System::ServiceModel::Channels::RequestContext ^ % context);" />
      <MemberSignature Language="F#" Value="abstract member EndTryReceiveRequest : IAsyncResult *  -&gt; bool" Usage="iReplyChannel.EndTryReceiveRequest (result, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
        <Parameter Name="context" Type="System.ServiceModel.Channels.RequestContext&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="result">
          <span data-ttu-id="3dc46-162">由 <see cref="T:System.IAsyncResult" /> 方法的呼叫所傳回的 <see cref="M:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc46-162">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)" /> method.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="3dc46-163">所接收的 <see cref="T:System.ServiceModel.Channels.RequestContext" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc46-163">The <see cref="T:System.ServiceModel.Channels.RequestContext" /> received.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3dc46-164">完成指定的非同步作業，以便接收要求訊息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc46-164">Completes the specified asynchronous operation to receive a request message.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3dc46-165">如果在超過指定時間間隔之前接收到要求訊息，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc46-165">
              <see langword="true" /> if a request message is received before the specified interval of time elapses; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="3dc46-166">下列程式碼說明如何實作這個方法：</span><span class="sxs-lookup"><span data-stu-id="3dc46-166">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#6](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndWaitForRequest">
      <MemberSignature Language="C#" Value="public bool EndWaitForRequest (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EndWaitForRequest(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndWaitForRequest (result As IAsyncResult) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndWaitForRequest(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndWaitForRequest : IAsyncResult -&gt; bool" Usage="iReplyChannel.EndWaitForRequest result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">
          <span data-ttu-id="3dc46-167">
            <see cref="T:System.IAsyncResult" />，識別要完成並從其中擷取最終結果的 <see cref="M:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)" /> 作業。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc46-167">The <see cref="T:System.IAsyncResult" /> that identifies the <see cref="M:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)" /> operation to finish, and from which to retrieve an end result.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3dc46-168">完成指定的非同步「等候要求」(wait-for-a-request) 作業。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc46-168">Completes the specified asynchronous wait-for-a-request message operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3dc46-169">如果在超過指定時間間隔之前接收到要求，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc46-169">
              <see langword="true" /> if a request is received before the specified interval of time elapses; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="3dc46-170">下列程式碼說明如何實作這個方法：</span><span class="sxs-lookup"><span data-stu-id="3dc46-170">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#11](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalAddress">
      <MemberSignature Language="C#" Value="public System.ServiceModel.EndpointAddress LocalAddress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.EndpointAddress LocalAddress" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Channels.IReplyChannel.LocalAddress" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalAddress As EndpointAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::EndpointAddress ^ LocalAddress { System::ServiceModel::EndpointAddress ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalAddress : System.ServiceModel.EndpointAddress" Usage="System.ServiceModel.Channels.IReplyChannel.LocalAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.EndpointAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3dc46-171">取得回覆通道接收訊息的位址。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc46-171">Gets the address on which this reply channel receives messages.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3dc46-172">
            <see cref="T:System.ServiceModel.EndpointAddress" />，回覆通道在上面接收訊息的位址。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc46-172">The <see cref="T:System.ServiceModel.EndpointAddress" /> on which this reply channel receives messages.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="3dc46-173">下列程式碼說明如何實作這個屬性：</span><span class="sxs-lookup"><span data-stu-id="3dc46-173">The following code illustrates how to implement this property:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#0)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReceiveRequest">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3dc46-174">如果有收到可用的要求，則將該要求的內容傳回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc46-174">Returns the context of the request received, if one is available</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReceiveRequest">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.RequestContext ReceiveRequest ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.RequestContext ReceiveRequest() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveRequest () As RequestContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::RequestContext ^ ReceiveRequest();" />
      <MemberSignature Language="F#" Value="abstract member ReceiveRequest : unit -&gt; System.ServiceModel.Channels.RequestContext" Usage="iReplyChannel.ReceiveRequest " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.RequestContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3dc46-175">如果有收到可用的要求，則將該要求的內容傳回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc46-175">Returns the context of the request received, if one is available.</span>
          </span>
          <span data-ttu-id="3dc46-176">如果無法取得內容，請等候直到有可用內容為止。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc46-176">If a context is not available, waits until there is one available.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3dc46-177">
            <see cref="T:System.ServiceModel.Channels.RequestContext" />，用來建構回覆。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc46-177">The <see cref="T:System.ServiceModel.Channels.RequestContext" /> used to construct replies.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3dc46-178"><xref:System.ServiceModel.Channels.RequestContext>，封裝要求訊息和回覆該訊息的機制。</span><span class="sxs-lookup"><span data-stu-id="3dc46-178"><xref:System.ServiceModel.Channels.RequestContext> encapsulates the request message and a mechanism for replying to that message.</span></span>  
  
 <span data-ttu-id="3dc46-179"><xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> 可以多次呼叫或同時呼叫。</span><span class="sxs-lookup"><span data-stu-id="3dc46-179"><xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> can be called multiple times or concurrently.</span></span> <span data-ttu-id="3dc46-180">每個接收要求只會完成一次 <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> 呼叫。</span><span class="sxs-lookup"><span data-stu-id="3dc46-180">Only one <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> call completes per request received.</span></span>  
  
 <span data-ttu-id="3dc46-181">如果接收的要求訊息大於要使用繫結所允許的最大訊息大小，則會擲回 <xref:System.ServiceModel.QuotaExceededException>。</span><span class="sxs-lookup"><span data-stu-id="3dc46-181">If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown.</span></span> <span data-ttu-id="3dc46-182">訊息大小上限是由 <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> 屬性所設定。</span><span class="sxs-lookup"><span data-stu-id="3dc46-182">The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property.</span></span> <span data-ttu-id="3dc46-183">預設值為 65536 個位元組。</span><span class="sxs-lookup"><span data-stu-id="3dc46-183">The default value is 65536 bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3dc46-184">下列程式碼說明如何實作這個方法：</span><span class="sxs-lookup"><span data-stu-id="3dc46-184">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#7](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReceiveRequest">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.RequestContext ReceiveRequest (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.RequestContext ReceiveRequest(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveRequest (timeout As TimeSpan) As RequestContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::RequestContext ^ ReceiveRequest(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member ReceiveRequest : TimeSpan -&gt; System.ServiceModel.Channels.RequestContext" Usage="iReplyChannel.ReceiveRequest timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.RequestContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="3dc46-185">
            <see cref="T:System.TimeSpan" />，指定必須在逾時和傳回 <see langword="false" /> 多久之前完成接收要求作業。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc46-185">The <see cref="T:System.TimeSpan" /> that specifies how long the receive of a request operation has to complete before timing out and returning <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3dc46-186">如果有收到可用的要求，則將該要求的內容傳回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc46-186">Returns the context of the request received, if one is available.</span>
          </span>
          <span data-ttu-id="3dc46-187">如果無法取得內容，請等候直到有可用內容為止。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc46-187">If a context is not available, waits until there is one available.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3dc46-188">
            <see cref="T:System.ServiceModel.Channels.RequestContext" />，用來建構回覆。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc46-188">The <see cref="T:System.ServiceModel.Channels.RequestContext" /> used to construct replies.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3dc46-189"><xref:System.ServiceModel.Channels.RequestContext>，封裝要求訊息和回覆該訊息的機制。</span><span class="sxs-lookup"><span data-stu-id="3dc46-189"><xref:System.ServiceModel.Channels.RequestContext> encapsulates the request message and a mechanism for replying to that message.</span></span>  
  
 <span data-ttu-id="3dc46-190"><xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> 可以多次呼叫或同時呼叫。</span><span class="sxs-lookup"><span data-stu-id="3dc46-190"><xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> can be called multiple times or concurrently.</span></span> <span data-ttu-id="3dc46-191">每個接收要求只會完成一次 <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> 呼叫。</span><span class="sxs-lookup"><span data-stu-id="3dc46-191">Only one <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> call completes per request received.</span></span>  
  
 <span data-ttu-id="3dc46-192">如果接收的要求訊息大於要使用繫結所允許的最大訊息大小，則會擲回 <xref:System.ServiceModel.QuotaExceededException>。</span><span class="sxs-lookup"><span data-stu-id="3dc46-192">If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown.</span></span> <span data-ttu-id="3dc46-193">訊息大小上限是由 <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> 屬性所設定。</span><span class="sxs-lookup"><span data-stu-id="3dc46-193">The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property.</span></span> <span data-ttu-id="3dc46-194">預設值為 65536 個位元組。</span><span class="sxs-lookup"><span data-stu-id="3dc46-194">The default value is 65536 bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3dc46-195">下列程式碼說明如何實作這個方法：</span><span class="sxs-lookup"><span data-stu-id="3dc46-195">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#8](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReceiveRequest">
      <MemberSignature Language="C#" Value="public bool TryReceiveRequest (TimeSpan timeout, out System.ServiceModel.Channels.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryReceiveRequest(valuetype System.TimeSpan timeout, [out] class System.ServiceModel.Channels.RequestContext&amp; context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(System.TimeSpan,System.ServiceModel.Channels.RequestContext@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReceiveRequest (timeout As TimeSpan, ByRef context As RequestContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryReceiveRequest(TimeSpan timeout, [Runtime::InteropServices::Out] System::ServiceModel::Channels::RequestContext ^ % context);" />
      <MemberSignature Language="F#" Value="abstract member TryReceiveRequest : TimeSpan *  -&gt; bool" Usage="iReplyChannel.TryReceiveRequest (timeout, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="context" Type="System.ServiceModel.Channels.RequestContext&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="3dc46-196">
            <see cref="T:System.TimeSpan" />，指定必須在逾時和傳回 <see langword="false" /> 多久之前完成接收要求作業。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc46-196">The <see cref="T:System.TimeSpan" /> that specifies how long the receive of a request operation has to complete before timing out and returning <see langword="false" />.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="3dc46-197">所接收的 <see cref="T:System.ServiceModel.Channels.RequestContext" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc46-197">The <see cref="T:System.ServiceModel.Channels.RequestContext" /> received.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3dc46-198">傳回值，這個值會表示要求是否是在超過已指定時間間隔之前所接收。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc46-198">Returns a value that indicates whether a request is received before a specified interval of time elapses.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3dc46-199">如果在超過指定時間間隔之前接收到要求訊息，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc46-199">
              <see langword="true" /> if a request message is received before the specified interval of time elapses; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3dc46-200">當目前的執行緒可接受進行封鎖並同時等候要求訊息到達佇列時，請使用 <xref:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest%28System.TimeSpan%2CSystem.ServiceModel.Channels.RequestContext%40%29>。</span><span class="sxs-lookup"><span data-stu-id="3dc46-200">Use <xref:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest%28System.TimeSpan%2CSystem.ServiceModel.Channels.RequestContext%40%29> when it is acceptable for the current thread to be blocked while it waits for a request message to arrive in the queue.</span></span> <span data-ttu-id="3dc46-201">執行緒會持續封鎖，直到指定的 `timeout` 為止。</span><span class="sxs-lookup"><span data-stu-id="3dc46-201">The thread is blocked up to the specified `timeout`.</span></span> <span data-ttu-id="3dc46-202">當您需要應用程式繼續執行而不要等候，請使用非同步的 <xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> 方法。</span><span class="sxs-lookup"><span data-stu-id="3dc46-202">If you need the application processing to continue without waiting, use the asynchronous <xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3dc46-203">下列程式碼說明如何實作這個方法：</span><span class="sxs-lookup"><span data-stu-id="3dc46-203">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#4](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="3dc46-204">
            <para>此作業會傳回<see langword="false" />如果指定<paramref name="timeout" />超過。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc46-204">
              <para>The operation returns <see langword="false" /> if the specified <paramref name="timeout" /> is exceeded.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="WaitForRequest">
      <MemberSignature Language="C#" Value="public bool WaitForRequest (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitForRequest(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.WaitForRequest(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForRequest (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool WaitForRequest(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member WaitForRequest : TimeSpan -&gt; bool" Usage="iReplyChannel.WaitForRequest timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="3dc46-205">
            <see cref="T:System.TimeSpan" />，指定必須在逾時和傳回 <see langword="false" /> 多久之前完成接收要求作業。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc46-205">The <see cref="T:System.TimeSpan" /> that specifies how long a request operation has to complete before timing out and returning <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3dc46-206">傳回值，這個值會表示要求訊息是否是在超過已指定時間間隔之前所接收。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc46-206">Returns a value that indicates whether a request message is received before a specified interval of time elapses.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3dc46-207">如果在超過指定時間間隔之前接收到要求，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc46-207">
              <see langword="true" /> if a request is received before the specified interval of time elapses; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3dc46-208">呼叫 <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29>，並不會導致要求訊息以任何其他方式進行接收或處理。</span><span class="sxs-lookup"><span data-stu-id="3dc46-208">Calling <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> does not result in a request message being received or processed in any way.</span></span>  
  
 <span data-ttu-id="3dc46-209"><xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> 方法的存在目的，主要是針對使用者希望接收到使用交易之訊息的交易狀況。</span><span class="sxs-lookup"><span data-stu-id="3dc46-209">The <xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method exists primarily for transacted scenarios where the user wants to receive the message using a transaction.</span></span> <span data-ttu-id="3dc46-210">一般針對這種狀況會只有使用 <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>，此時使用者必須建立交易並接著呼叫 <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>，然後期待訊息會在交息逾時之前到達，但是訊息可能不會如預期般到達。</span><span class="sxs-lookup"><span data-stu-id="3dc46-210">When using just <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> normally for this, the user must create the transaction, and then call <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> and hope the message arrives before the transaction times out, which may not be possible.</span></span>  
  
 <span data-ttu-id="3dc46-211">相反的，使用者可以呼叫 <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> 並指定逾時 (甚至無限時)，接著在訊息到達時開啟交易並呼叫 <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>，然後深信自己可以在交易逾時之前取回訊息。</span><span class="sxs-lookup"><span data-stu-id="3dc46-211">Instead, the user can call <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> and specify the time out (even infinite), then when a message arrives they can open the transaction, call <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> and be confident that they can get the message back before the transaction expires.</span></span>  
  
 <span data-ttu-id="3dc46-212">當目前的執行緒可接受進行封鎖並同時等候訊息到達佇列時，請使用 <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29>。</span><span class="sxs-lookup"><span data-stu-id="3dc46-212">Use <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue.</span></span> <span data-ttu-id="3dc46-213">執行緒會持續封鎖，直到指定的 `timeout` 為止。</span><span class="sxs-lookup"><span data-stu-id="3dc46-213">The thread is blocked up to the specified `timeout`.</span></span> <span data-ttu-id="3dc46-214">當您需要應用程式繼續執行而不要等候，請使用非同步的 <xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> 方法。</span><span class="sxs-lookup"><span data-stu-id="3dc46-214">If you need the application processing to continue without waiting, use the asynchronous <xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3dc46-215">下列程式碼說明如何實作這個方法：</span><span class="sxs-lookup"><span data-stu-id="3dc46-215">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#9](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#9)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="3dc46-216">
            <para>此作業會傳回<see langword="false" />如果指定<paramref name="timeout" />超過。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc46-216">
              <para>The operation returns <see langword="false" /> if the specified <paramref name="timeout" /> is exceeded.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>