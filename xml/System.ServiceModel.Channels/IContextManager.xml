<Type Name="IContextManager" FullName="System.ServiceModel.Channels.IContextManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c4df14089e9a33087bf1b3c97c7710cbb5c1bdc7" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48739507" /></Metadata><TypeSignature Language="C#" Value="public interface IContextManager" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IContextManager" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Channels.IContextManager" />
  <TypeSignature Language="VB.NET" Value="Public Interface IContextManager" />
  <TypeSignature Language="C++ CLI" Value="public interface class IContextManager" />
  <TypeSignature Language="F#" Value="type IContextManager = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.WorkflowServices</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.WorkflowServices, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="e3b33-101">定義可讓您取得和設定通道內容的介面。</span><span class="sxs-lookup"><span data-stu-id="e3b33-101">Defines an interface that allows you to get and set the context on the channel.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3b33-102">針對使用 <xref:System.ServiceModel.WSHttpContextBinding> 且設定 <xref:System.ServiceModel.SessionMode.NotAllowed> 值的通道，在使用 <xref:System.ServiceModel.Channels.IContextManager> 的用戶端上會無法擷取內容，因為每次呼叫 <xref:System.ServiceModel.Channels.IChannelFactory.GetProperty%2A> 時，就會建立新的通道來建立工作階段，強制在通道上執行 <xref:System.ServiceModel.SessionMode.NotAllowed> 語意。</span><span class="sxs-lookup"><span data-stu-id="e3b33-102">For channels that use <xref:System.ServiceModel.WSHttpContextBinding> with the <xref:System.ServiceModel.SessionMode.NotAllowed> value set, the context cannot be retrieved on the client using <xref:System.ServiceModel.Channels.IContextManager> because a new channel that establishes a session is created each time <xref:System.ServiceModel.Channels.IChannelFactory.GetProperty%2A> is called to enforce <xref:System.ServiceModel.SessionMode.NotAllowed> semantics on a channel.</span></span> <span data-ttu-id="e3b33-103">這表示，在這個例子中，即使內容已適當傳播回用戶端，也無法使用 <xref:System.ServiceModel.Channels.IContextManager> 加以擷取。</span><span class="sxs-lookup"><span data-stu-id="e3b33-103">This means that even though the context is properly propagated back to the client in this case, it cannot be retrieved using <xref:System.ServiceModel.Channels.IContextManager>.</span></span> <span data-ttu-id="e3b33-104">您仍然可以使用 <xref:System.ServiceModel.Channels.ContextMessageProperty> 來擷取它，如下列程式碼所示。</span><span class="sxs-lookup"><span data-stu-id="e3b33-104">You can still retrieve it using <xref:System.ServiceModel.Channels.ContextMessageProperty> as shown in the following code.</span></span>  
  
```csharp  
using (new OperationContextScope((IContextChannel)channel))  
{  
    channel.MyChannel("Test");  
    ContextMessageProperty context;  
    if (ContextMessageProperty.TryGet(OperationContext.Current.IncomingMessageProperties, out context))  
    {  
        Console.WriteLine(context.Count);  
    }  
}  
  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Channels.IContextManager.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.ServiceModel.Channels.IContextManager.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e3b33-105">取得或設定值，這個值表示內容管理是否已啟用。</span><span class="sxs-lookup"><span data-stu-id="e3b33-105">Gets or sets a value that indicates whether the context management is enabled.</span></span></summary>
        <value><span data-ttu-id="e3b33-106">如果已啟用內容，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e3b33-106"><see langword="true" /> if the context is enabled; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3b33-107">啟用內容管理時，內容通道會在其存留期間快取內容。</span><span class="sxs-lookup"><span data-stu-id="e3b33-107">When context management is enabled the context channel caches the context in its lifetime.</span></span> <span data-ttu-id="e3b33-108">您可以在 `IContextManager` 通道屬性上呼叫 <xref:System.ServiceModel.Channels.IContextManager.GetContext%2A> 方法，透過此通道屬性來從通道擷取內容。</span><span class="sxs-lookup"><span data-stu-id="e3b33-108">Context can be retrieved from the channel through the `IContextManager` channel property by calling <xref:System.ServiceModel.Channels.IContextManager.GetContext%2A> method on it.</span></span> <span data-ttu-id="e3b33-109">您也可以呼叫通道屬性上的 <xref:System.ServiceModel.Channels.IContextManager.SetContext%2A> 方法，在開啟通道之前，使用內容預先初始化通道。</span><span class="sxs-lookup"><span data-stu-id="e3b33-109">The channel can also be pre-initialized with context before being opened by calling the <xref:System.ServiceModel.Channels.IContextManager.SetContext%2A> method on the channel property.</span></span> <span data-ttu-id="e3b33-110">一旦通道透過內容初始化完畢，就無法重設。</span><span class="sxs-lookup"><span data-stu-id="e3b33-110">Once the channel is initialized with context it cannot be reset.</span></span>  
  
 <span data-ttu-id="e3b33-111">下列為此模式中的不變量：</span><span class="sxs-lookup"><span data-stu-id="e3b33-111">The following are invariants in this mode:</span></span>  
  
-   <span data-ttu-id="e3b33-112">如果在通道開啟後呼叫 <xref:System.ServiceModel.Channels.IContextManager.SetContext%2A>，一定會擲回 `InvalidOperationException`。</span><span class="sxs-lookup"><span data-stu-id="e3b33-112">Any call to <xref:System.ServiceModel.Channels.IContextManager.SetContext%2A> after the channel is open throws an `InvalidOperationException`.</span></span>  
  
-   <span data-ttu-id="e3b33-113">嘗試在傳出的訊息中使用 `ContextMessageProperty` 來傳送內容，一定會擲回 `InvalidOperationException`。</span><span class="sxs-lookup"><span data-stu-id="e3b33-113">Any attempt to send context through the `ContextMessageProperty` in an outgoing message throws `InvalidOperationException`.</span></span>  
  
-   <span data-ttu-id="e3b33-114">在通道已經使用內容初始化之後，如果從伺服器接收包含內容的訊息，就會擲回 `ProtocolException`。</span><span class="sxs-lookup"><span data-stu-id="e3b33-114">If a message is received from the server with context, when the channel is already initialized with a context a `ProtocolException` is thrown.</span></span> <span data-ttu-id="e3b33-115">請注意，如果開啟的通道未明確設定內容，您就能從伺服器接收初始內容。</span><span class="sxs-lookup"><span data-stu-id="e3b33-115">Note that you can receive initial context from a server if the channel is opened without explicitly setting the context.</span></span>  
  
-   <span data-ttu-id="e3b33-116">傳入訊息上的 `ContextMessageProperty` 一律為 `null`。</span><span class="sxs-lookup"><span data-stu-id="e3b33-116">The `ContextMessageProperty` on an incoming message is always `null`.</span></span>  
  
 <span data-ttu-id="e3b33-117">在內容管理未啟用情況下，內容通道不會管理內容。</span><span class="sxs-lookup"><span data-stu-id="e3b33-117">When context management is not enabled, the context channel does not manage context.</span></span> <span data-ttu-id="e3b33-118">應用程式需負責透過 `ContextMessageProperty` 擷取、管理和套用內容。</span><span class="sxs-lookup"><span data-stu-id="e3b33-118">It is the application's responsibility to retrieve, manage and apply context through the `ContextMessageProperty`.</span></span> <span data-ttu-id="e3b33-119">嘗試透過 <xref:System.ServiceModel.Channels.IContextManager.GetContext%2A> 通道屬性呼叫 <xref:System.ServiceModel.Channels.IContextManager.SetContext%2A> 或 `IContextManager`，一定會產生 `InvalidOperationException`。</span><span class="sxs-lookup"><span data-stu-id="e3b33-119">Any attempt to call <xref:System.ServiceModel.Channels.IContextManager.GetContext%2A> or <xref:System.ServiceModel.Channels.IContextManager.SetContext%2A> using through the `IContextManager` channel property results in `InvalidOperationException`.</span></span>  
  
 <span data-ttu-id="e3b33-120">除了內容 HTTP Cookie 之外，所有 HTTP Cookie 都在通道層級處理。</span><span class="sxs-lookup"><span data-stu-id="e3b33-120">All HTTP cookies, except for context HTTP cookies, are handled at the channel level.</span></span> <span data-ttu-id="e3b33-121">內容 HTTP Cookie 在應用程式層級管理。</span><span class="sxs-lookup"><span data-stu-id="e3b33-121">Context HTTP cookies are managed at the application level.</span></span> <span data-ttu-id="e3b33-122">當共用通道以便與 <xref:System.ServiceModel.Channels.ContextMessageProperty> 所定的不同目標執行個體進行通訊時，這個做法可能會產生非預期的結果。</span><span class="sxs-lookup"><span data-stu-id="e3b33-122">This can have unexpected consequences when channels are shared to talk to different instances targeted by <xref:System.ServiceModel.Channels.ContextMessageProperty>.</span></span> <span data-ttu-id="e3b33-123">下表說明當 <xref:System.ServiceModel.Channels.IContextManager.Enabled%2A> 設為 `true` 或 `false` 時，HTTP Cookie 受影響的方式。</span><span class="sxs-lookup"><span data-stu-id="e3b33-123">The following table shows how HTTP cookies are affected when <xref:System.ServiceModel.Channels.IContextManager.Enabled%2A> is set to either `true` or `false`.</span></span>  
  
|<span data-ttu-id="e3b33-124">繫結</span><span class="sxs-lookup"><span data-stu-id="e3b33-124">Binding</span></span>|<span data-ttu-id="e3b33-125">IContextManager.Enabled 值</span><span class="sxs-lookup"><span data-stu-id="e3b33-125">IContextManager.Enabled Value</span></span>|<span data-ttu-id="e3b33-126">內容 HTTP Cookie 範圍</span><span class="sxs-lookup"><span data-stu-id="e3b33-126">Context HTTP Cookie Scope</span></span>|<span data-ttu-id="e3b33-127">其他 HTTP Cookies 範圍</span><span class="sxs-lookup"><span data-stu-id="e3b33-127">Other HTTP Cookies Scope</span></span>|  
|-------------|-----------------------------------|-------------------------------|------------------------------|  
|<span data-ttu-id="e3b33-128">BasicHttpBinding</span><span class="sxs-lookup"><span data-stu-id="e3b33-128">BasicHttpBinding</span></span>|<span data-ttu-id="e3b33-129">N/A</span><span class="sxs-lookup"><span data-stu-id="e3b33-129">n/a</span></span>|<span data-ttu-id="e3b33-130">ChannelFactory</span><span class="sxs-lookup"><span data-stu-id="e3b33-130">ChannelFactory</span></span>|<span data-ttu-id="e3b33-131">ChannelFactory</span><span class="sxs-lookup"><span data-stu-id="e3b33-131">ChannelFactory</span></span>|  
|<span data-ttu-id="e3b33-132">BasicHttpContextBinding</span><span class="sxs-lookup"><span data-stu-id="e3b33-132">BasicHttpContextBinding</span></span>|<span data-ttu-id="e3b33-133">true</span><span class="sxs-lookup"><span data-stu-id="e3b33-133">true</span></span>|<span data-ttu-id="e3b33-134">通道</span><span class="sxs-lookup"><span data-stu-id="e3b33-134">Channel</span></span>|<span data-ttu-id="e3b33-135">通道</span><span class="sxs-lookup"><span data-stu-id="e3b33-135">Channel</span></span>|  
|<span data-ttu-id="e3b33-136">BasicHttpContextBinding</span><span class="sxs-lookup"><span data-stu-id="e3b33-136">BasicHttpContextBinding</span></span>|<span data-ttu-id="e3b33-137">False</span><span class="sxs-lookup"><span data-stu-id="e3b33-137">false</span></span>|<span data-ttu-id="e3b33-138">對每個訊息 (由應用程式明確管理)</span><span class="sxs-lookup"><span data-stu-id="e3b33-138">For each message (explicitly managed by application)</span></span>|<span data-ttu-id="e3b33-139">通道</span><span class="sxs-lookup"><span data-stu-id="e3b33-139">Channel</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContext">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,string&gt; GetContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IDictionary`2&lt;string, string&gt; GetContext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IContextManager.GetContext" />
      <MemberSignature Language="VB.NET" Value="Public Function GetContext () As IDictionary(Of String, String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ GetContext();" />
      <MemberSignature Language="F#" Value="abstract member GetContext : unit -&gt; System.Collections.Generic.IDictionary&lt;string, string&gt;" Usage="iContextManager.GetContext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e3b33-140">取得內容。</span><span class="sxs-lookup"><span data-stu-id="e3b33-140">Gets the context.</span></span></summary>
        <returns><span data-ttu-id="e3b33-141">索引鍵/值組的 <see cref="T:System.Collections.Generic.IDictionary`2" />，含命名空間與內容名稱。</span><span class="sxs-lookup"><span data-stu-id="e3b33-141">The <see cref="T:System.Collections.Generic.IDictionary`2" /> of key/value pairs with the namespace and name of the context.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e3b33-142">下列程式碼說明如何從用戶端的型別 Proxy 執行個體取得內容。</span><span class="sxs-lookup"><span data-stu-id="e3b33-142">The following code shows how the context can be obtained from a typed proxy instance on the client.</span></span>  
  
```  
IDictionary<string, string> context;  
CalculatorProxy proxy;  
IContextManager cm = proxy.InnerChannel.GetProperty<IContextManager>();  
if (cm != null)  
    context = cm.GetContext();  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetContext">
      <MemberSignature Language="C#" Value="public void SetContext (System.Collections.Generic.IDictionary&lt;string,string&gt; context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetContext(class System.Collections.Generic.IDictionary`2&lt;string, string&gt; context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IContextManager.SetContext(System.Collections.Generic.IDictionary{System.String,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetContext (context As IDictionary(Of String, String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetContext(System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ context);" />
      <MemberSignature Language="F#" Value="abstract member SetContext : System.Collections.Generic.IDictionary&lt;string, string&gt; -&gt; unit" Usage="iContextManager.SetContext context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="context"><span data-ttu-id="e3b33-143">索引鍵/值組的 <see cref="T:System.Collections.Generic.IDictionary`2" />，含設定的命名空間與內容名稱。</span><span class="sxs-lookup"><span data-stu-id="e3b33-143">The <see cref="T:System.Collections.Generic.IDictionary`2" /> of key/value pairs with the namespace and name of the context that is set.</span></span></param>
        <summary><span data-ttu-id="e3b33-144">設定內容。</span><span class="sxs-lookup"><span data-stu-id="e3b33-144">Sets the context.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e3b33-145">下列程式碼說明在用戶端設定內容的方式。</span><span class="sxs-lookup"><span data-stu-id="e3b33-145">The following code shows how the context can be set on the client.</span></span>  
  
```  
IDictionary<string, string> context;  
CalculatorProxy proxy;  
IContextManager cm = proxy.InnerChannel.GetProperty<IContextManager>();  
if (cm != null)  
    cm.SetContext(context);  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>