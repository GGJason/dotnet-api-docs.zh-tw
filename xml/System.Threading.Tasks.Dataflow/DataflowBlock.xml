<Type Name="DataflowBlock" FullName="System.Threading.Tasks.Dataflow.DataflowBlock">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b1681b37f6256a345cba5980d6dd8e36899a63b3" />
    <Meta Name="ms.sourcegitcommit" Value="44933aff38db926168781f50300446344189a04d" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="07/16/2018" />
    <Meta Name="ms.locfileid" Value="39064906" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class DataflowBlock" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit DataflowBlock extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.Dataflow.DataflowBlock" />
  <TypeSignature Language="VB.NET" Value="Public Module DataflowBlock" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataflowBlock abstract sealed" />
  <TypeSignature Language="F#" Value="type DataflowBlock = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
    <AssemblyVersion>4.6.1.0</AssemblyVersion>
    <AssemblyVersion>4.6.2.0</AssemblyVersion>
    <AssemblyVersion>4.6.3.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="00bdc-101">提供一組 static (Visual Basic 中是 Shared) 方法，以處理資料流程區塊。</span>
      <span class="sxs-lookup">
        <span data-stu-id="00bdc-101">Provides a set of static (Shared in Visual Basic) methods for working with dataflow blocks.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
[!INCLUDE [tpl-install-instructions](~/includes/tpl-install-instructions.md)]
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AsObservable&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static IObservable&lt;TOutput&gt; AsObservable&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IObservable`1&lt;!!TOutput&gt; AsObservable&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.AsObservable``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsObservable(Of TOutput) (source As ISourceBlock(Of TOutput)) As IObservable(Of TOutput)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static IObservable&lt;TOutput&gt; ^ AsObservable(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member AsObservable : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; -&gt; IObservable&lt;'Output&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.AsObservable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IObservable&lt;TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="00bdc-102">指定來源所包含的資料型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-102">Specifies the type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="00bdc-103">要包裝的來源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-103">The source to wrap.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00bdc-104">建立在 <see cref="T:System.IObservable`1" /> 之上的新 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> Abstraction。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-104">Creates a new <see cref="T:System.IObservable`1" /> abstraction over the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00bdc-105">可讓觀察器供來源訂閱的 <see cref="T:System.IObservable`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-105">An <see cref="T:System.IObservable`1" /> that enables observers to be subscribed to the source.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="00bdc-106">
            <paramref name="source" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-106">The <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AsObserver&lt;TInput&gt;">
      <MemberSignature Language="C#" Value="public static IObserver&lt;TInput&gt; AsObserver&lt;TInput&gt; (this System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt; target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IObserver`1&lt;!!TInput&gt; AsObserver&lt;TInput&gt;(class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TInput&gt; target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.AsObserver``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsObserver(Of TInput) (target As ITargetBlock(Of TInput)) As IObserver(Of TInput)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TInput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static IObserver&lt;TInput&gt; ^ AsObserver(System::Threading::Tasks::Dataflow::ITargetBlock&lt;TInput&gt; ^ target);" />
      <MemberSignature Language="F#" Value="static member AsObserver : System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Input&gt; -&gt; IObserver&lt;'Input&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.AsObserver target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IObserver&lt;TInput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TInput">
          <span data-ttu-id="00bdc-107">指定目標區塊所接受的輸入型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-107">Specifies the type of input accepted by the target block.</span>
          </span>
        </typeparam>
        <param name="target">
          <span data-ttu-id="00bdc-108">要包裝的目標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-108">The target to wrap.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00bdc-109">建立在 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 之上的新 <see cref="T:System.IObserver`1" /> Abstraction。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-109">Creates a new <see cref="T:System.IObserver`1" /> abstraction over the  <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00bdc-110">包裝目標區塊的觀察器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-110">An observer that wraps the target block.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Choose&lt;T1,T2&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; Choose&lt;T1,T2&gt; (System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt; source1, Action&lt;T1&gt; action1, System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt; source2, Action&lt;T2&gt; action2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; Choose&lt;T1, T2&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T1&gt; source1, class System.Action`1&lt;!!T1&gt; action1, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T2&gt; source2, class System.Action`1&lt;!!T2&gt; action2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Function Choose(Of T1, T2) (source1 As ISourceBlock(Of T1), action1 As Action(Of T1), source2 As ISourceBlock(Of T2), action2 As Action(Of T2)) As Task(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2&gt;&#xA; static System::Threading::Tasks::Task&lt;int&gt; ^ Choose(System::Threading::Tasks::Dataflow::ISourceBlock&lt;T1&gt; ^ source1, Action&lt;T1&gt; ^ action1, System::Threading::Tasks::Dataflow::ISourceBlock&lt;T2&gt; ^ source2, Action&lt;T2&gt; ^ action2);" />
      <MemberSignature Language="F#" Value="static member Choose : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T1&gt; * Action&lt;'T1&gt; * System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T2&gt; * Action&lt;'T2&gt; -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Choose (source1, action1, source2, action2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source1" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt;" />
        <Parameter Name="action1" Type="System.Action&lt;T1&gt;" />
        <Parameter Name="source2" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt;" />
        <Parameter Name="action2" Type="System.Action&lt;T2&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T1">
          <span data-ttu-id="00bdc-111">指定第一個來源包含的資料型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-111">Specifies type of data contained in the first source.</span>
          </span>
        </typeparam>
        <typeparam name="T2">
          <span data-ttu-id="00bdc-112">指定第二個來源包含的資料型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-112">Specifies type of data contained in the second source.</span>
          </span>
        </typeparam>
        <param name="source1">
          <span data-ttu-id="00bdc-113">第一個來源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-113">The first source.</span>
          </span>
        </param>
        <param name="action1">
          <span data-ttu-id="00bdc-114">要對第一個來源的資料執行的處理常式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-114">The handler to execute on data from the first source.</span>
          </span>
        </param>
        <param name="source2">
          <span data-ttu-id="00bdc-115">第二個來源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-115">The second source.</span>
          </span>
        </param>
        <param name="action2">
          <span data-ttu-id="00bdc-116">要對第二個來源的資料執行的處理常式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-116">The handler to execute on data from the second source.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00bdc-117">監視兩個資料流程來源，叫用先提供資料的任一個來源的提供之處理常式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-117">Monitors two dataflow sources, invoking the provided handler for whichever source makes data available first.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00bdc-118">表示非同步選擇的 <see cref="T:System.Threading.Tasks.Task`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-118">A  <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous choice.</span>
          </span>
          <span data-ttu-id="00bdc-119">如果在選擇完成前兩個來源都已完成，則產生的工作將被取消。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-119">If both sources are completed prior to the choice completing, the resulting task will be canceled.</span>
          </span>
          <span data-ttu-id="00bdc-120">當其中一個來源有可使用的資料，並成功將它傳播到選擇，則在處理常式完成時，產生的工作會完成，如果處理常式擲回例外狀況，工作會以 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 狀態結束，並包含未處理的例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-120">When one of the sources has data available and successfully propagates it to the choice, the resulting task will complete when the handler completes; if the handler throws an exception, the task will end in the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state and will contain the unhandled exception.</span>
          </span>
          <span data-ttu-id="00bdc-121">否則，工作會結束，其 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 設定為 0 或 1，分別代表第一個或第二個來源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-121">Otherwise, the task will end with its <see cref="P:System.Threading.Tasks.Task`1.Result" /> set to either 0 or 1 to represent the first or second source, respectively.</span>
          </span>
          <span data-ttu-id="00bdc-122">這個方法會只使用兩個資料來源的其中一個資料來源的項目，永遠不會同時使用兩者。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-122">This method will only consume an element from one of the two data sources, never both.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="00bdc-123">
            <paramref name="source1" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-123">The <paramref name="source1" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="00bdc-124">-或-  <paramref name="action1" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-124">-or-  The  <paramref name="action1" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="00bdc-125">-或-  <paramref name="source2" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-125">-or-  The <paramref name="source2" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="00bdc-126">-或-  <paramref name="action2" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-126">-or-  The <paramref name="action2" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Choose&lt;T1,T2&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; Choose&lt;T1,T2&gt; (System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt; source1, Action&lt;T1&gt; action1, System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt; source2, Action&lt;T2&gt; action2, System.Threading.Tasks.Dataflow.DataflowBlockOptions dataflowBlockOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; Choose&lt;T1, T2&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T1&gt; source1, class System.Action`1&lt;!!T1&gt; action1, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T2&gt; source2, class System.Action`1&lt;!!T2&gt; action2, class System.Threading.Tasks.Dataflow.DataflowBlockOptions dataflowBlockOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.DataflowBlockOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2&gt;&#xA; static System::Threading::Tasks::Task&lt;int&gt; ^ Choose(System::Threading::Tasks::Dataflow::ISourceBlock&lt;T1&gt; ^ source1, Action&lt;T1&gt; ^ action1, System::Threading::Tasks::Dataflow::ISourceBlock&lt;T2&gt; ^ source2, Action&lt;T2&gt; ^ action2, System::Threading::Tasks::Dataflow::DataflowBlockOptions ^ dataflowBlockOptions);" />
      <MemberSignature Language="F#" Value="static member Choose : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T1&gt; * Action&lt;'T1&gt; * System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T2&gt; * Action&lt;'T2&gt; * System.Threading.Tasks.Dataflow.DataflowBlockOptions -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Choose (source1, action1, source2, action2, dataflowBlockOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source1" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt;" />
        <Parameter Name="action1" Type="System.Action&lt;T1&gt;" />
        <Parameter Name="source2" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt;" />
        <Parameter Name="action2" Type="System.Action&lt;T2&gt;" />
        <Parameter Name="dataflowBlockOptions" Type="System.Threading.Tasks.Dataflow.DataflowBlockOptions" />
      </Parameters>
      <Docs>
        <typeparam name="T1">
          <span data-ttu-id="00bdc-127">指定第一個來源包含的資料型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-127">Specifies type of data contained in the first source.</span>
          </span>
        </typeparam>
        <typeparam name="T2">
          <span data-ttu-id="00bdc-128">指定第二個來源包含的資料型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-128">Specifies type of data contained in the second source.</span>
          </span>
        </typeparam>
        <param name="source1">
          <span data-ttu-id="00bdc-129">第一個來源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-129">The first source.</span>
          </span>
        </param>
        <param name="action1">
          <span data-ttu-id="00bdc-130">要對第一個來源的資料執行的處理常式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-130">The handler to execute on data from the first source.</span>
          </span>
        </param>
        <param name="source2">
          <span data-ttu-id="00bdc-131">第二個來源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-131">The second source.</span>
          </span>
        </param>
        <param name="action2">
          <span data-ttu-id="00bdc-132">要對第二個來源的資料執行的處理常式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-132">The handler to execute on data from the second source.</span>
          </span>
        </param>
        <param name="dataflowBlockOptions">
          <span data-ttu-id="00bdc-133">用來設定這個選擇的選項。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-133">The options with which to configure this choice.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00bdc-134">監視兩個資料流程來源，叫用先提供資料的任一個來源的提供之處理常式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-134">Monitors two dataflow sources, invoking the provided handler for whichever source makes data available first.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00bdc-135">表示非同步選擇的 <see cref="T:System.Threading.Tasks.Task`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-135">A  <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous choice.</span>
          </span>
          <span data-ttu-id="00bdc-136">如果在選擇完成前兩個來源都已完成，或者如果在選擇完成前隨 <paramref name="dataflowBlockOptions" /> 提供的 <see cref="T:System.Threading.CancellationToken" /> 已取消，產生的工作將會被取消。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-136">If both sources are completed prior to the choice completing, or if the <see cref="T:System.Threading.CancellationToken" /> provided as part of <paramref name="dataflowBlockOptions" /> is canceled prior to the choice completing, the resulting task will be canceled.</span>
          </span>
          <span data-ttu-id="00bdc-137">當其中一個來源有可使用的資料，並成功將它傳播到選擇，則在處理常式完成時，產生的工作會完成，如果處理常式擲回例外狀況，工作會以 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 狀態結束，並包含未處理的例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-137">When one of the sources has data available and successfully propagates it to the choice, the resulting task will complete when the handler completes; if the handler throws an exception, the task will end in the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state and will contain the unhandled exception.</span>
          </span>
          <span data-ttu-id="00bdc-138">否則，工作會結束，其 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 設定為 0 或 1，分別代表第一個或第二個來源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-138">Otherwise, the task will end with its <see cref="P:System.Threading.Tasks.Task`1.Result" /> set to either 0 or 1 to represent the first or second source, respectively.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="00bdc-139">
            <paramref name="source1" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-139">The <paramref name="source1" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="00bdc-140">-或-  <paramref name="action1" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-140">-or-  The <paramref name="action1" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="00bdc-141">-或-  <paramref name="source2" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-141">-or-  The <paramref name="source2" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="00bdc-142">-或-  <paramref name="action2" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-142">-or-  The <paramref name="action2" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="00bdc-143">-或-  <paramref name="dataflowBlockOptions" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-143">-or-  The <paramref name="dataflowBlockOptions" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Choose&lt;T1,T2,T3&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; Choose&lt;T1,T2,T3&gt; (System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt; source1, Action&lt;T1&gt; action1, System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt; source2, Action&lt;T2&gt; action2, System.Threading.Tasks.Dataflow.ISourceBlock&lt;T3&gt; source3, Action&lt;T3&gt; action3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; Choose&lt;T1, T2, T3&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T1&gt; source1, class System.Action`1&lt;!!T1&gt; action1, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T2&gt; source2, class System.Action`1&lt;!!T2&gt; action2, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T3&gt; source3, class System.Action`1&lt;!!T3&gt; action3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2})" />
      <MemberSignature Language="VB.NET" Value="Public Function Choose(Of T1, T2, T3) (source1 As ISourceBlock(Of T1), action1 As Action(Of T1), source2 As ISourceBlock(Of T2), action2 As Action(Of T2), source3 As ISourceBlock(Of T3), action3 As Action(Of T3)) As Task(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3&gt;&#xA; static System::Threading::Tasks::Task&lt;int&gt; ^ Choose(System::Threading::Tasks::Dataflow::ISourceBlock&lt;T1&gt; ^ source1, Action&lt;T1&gt; ^ action1, System::Threading::Tasks::Dataflow::ISourceBlock&lt;T2&gt; ^ source2, Action&lt;T2&gt; ^ action2, System::Threading::Tasks::Dataflow::ISourceBlock&lt;T3&gt; ^ source3, Action&lt;T3&gt; ^ action3);" />
      <MemberSignature Language="F#" Value="static member Choose : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T1&gt; * Action&lt;'T1&gt; * System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T2&gt; * Action&lt;'T2&gt; * System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T3&gt; * Action&lt;'T3&gt; -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Choose (source1, action1, source2, action2, source3, action3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source1" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt;" />
        <Parameter Name="action1" Type="System.Action&lt;T1&gt;" />
        <Parameter Name="source2" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt;" />
        <Parameter Name="action2" Type="System.Action&lt;T2&gt;" />
        <Parameter Name="source3" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T3&gt;" />
        <Parameter Name="action3" Type="System.Action&lt;T3&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T1">
          <span data-ttu-id="00bdc-144">指定第一個來源包含的資料型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-144">Specifies type of data contained in the first source.</span>
          </span>
        </typeparam>
        <typeparam name="T2">
          <span data-ttu-id="00bdc-145">指定第二個來源包含的資料型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-145">Specifies type of data contained in the second source.</span>
          </span>
        </typeparam>
        <typeparam name="T3">
          <span data-ttu-id="00bdc-146">指定第三個來源所包含的資料型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-146">Specifies type of data contained in the third source.</span>
          </span>
        </typeparam>
        <param name="source1">
          <span data-ttu-id="00bdc-147">第一個來源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-147">The first source.</span>
          </span>
        </param>
        <param name="action1">
          <span data-ttu-id="00bdc-148">要對第一個來源的資料執行的處理常式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-148">The handler to execute on data from the first source.</span>
          </span>
        </param>
        <param name="source2">
          <span data-ttu-id="00bdc-149">第二個來源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-149">The second source.</span>
          </span>
        </param>
        <param name="action2">
          <span data-ttu-id="00bdc-150">要對第二個來源的資料執行的處理常式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-150">The handler to execute on data from the second source.</span>
          </span>
        </param>
        <param name="source3">
          <span data-ttu-id="00bdc-151">第三個來源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-151">The third source.</span>
          </span>
        </param>
        <param name="action3">
          <span data-ttu-id="00bdc-152">要從第三來源對資料執行的處理常式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-152">The handler to execute on data from the third source.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00bdc-153">監視三個資料流程來源，叫用先提供資料的任一個來源的提供之處理常式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-153">Monitors three dataflow sources, invoking the provided handler for whichever source makes data available first.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00bdc-154">表示非同步選擇的 <see cref="T:System.Threading.Tasks.Task`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-154">A  <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous choice.</span>
          </span>
          <span data-ttu-id="00bdc-155">如果在選擇完成前所有來源都已完成，則產生的工作將被取消。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-155">If all sources are completed prior to the choice completing, the resulting task will be canceled.</span>
          </span>
          <span data-ttu-id="00bdc-156">當其中一個來源有可使用的資料，並成功將它傳播到選擇，則在處理常式完成時，產生的工作會完成，如果處理常式擲回例外狀況，工作會以 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 狀態結束，並包含未處理的例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-156">When one of the sources has data available and successfully propagates it to the choice, the resulting task will complete when the handler completes; if the handler throws an exception, the task will end in the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state and will contain the unhandled exception.</span>
          </span>
          <span data-ttu-id="00bdc-157">否則，工作會結束，其 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 設定為以 0 起始的來源索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-157">Otherwise, the task will end with its <see cref="P:System.Threading.Tasks.Task`1.Result" /> set to the 0-based index of the source.</span>
          </span>
          <span data-ttu-id="00bdc-158">這個方法會只使用其中一個資料來源的項目，永遠不會是多個。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-158">This method will only consume an element from one of the data sources, never more than one.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="00bdc-159">
            <paramref name="source1" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-159">The <paramref name="source1" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="00bdc-160">-或-  <paramref name="action1" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-160">-or-  The <paramref name="action1" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="00bdc-161">-或-  <paramref name="source2" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-161">-or-  The <paramref name="source2" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="00bdc-162">-或-  <paramref name="action2" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-162">-or-  The <paramref name="action2" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="00bdc-163">-或-  <paramref name="source3" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-163">-or-  The <paramref name="source3" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="00bdc-164">-或-  <paramref name="action3" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-164">-or-  The <paramref name="action3" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Choose&lt;T1,T2,T3&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; Choose&lt;T1,T2,T3&gt; (System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt; source1, Action&lt;T1&gt; action1, System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt; source2, Action&lt;T2&gt; action2, System.Threading.Tasks.Dataflow.ISourceBlock&lt;T3&gt; source3, Action&lt;T3&gt; action3, System.Threading.Tasks.Dataflow.DataflowBlockOptions dataflowBlockOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; Choose&lt;T1, T2, T3&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T1&gt; source1, class System.Action`1&lt;!!T1&gt; action1, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T2&gt; source2, class System.Action`1&lt;!!T2&gt; action2, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T3&gt; source3, class System.Action`1&lt;!!T3&gt; action3, class System.Threading.Tasks.Dataflow.DataflowBlockOptions dataflowBlockOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2},System.Threading.Tasks.Dataflow.DataflowBlockOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3&gt;&#xA; static System::Threading::Tasks::Task&lt;int&gt; ^ Choose(System::Threading::Tasks::Dataflow::ISourceBlock&lt;T1&gt; ^ source1, Action&lt;T1&gt; ^ action1, System::Threading::Tasks::Dataflow::ISourceBlock&lt;T2&gt; ^ source2, Action&lt;T2&gt; ^ action2, System::Threading::Tasks::Dataflow::ISourceBlock&lt;T3&gt; ^ source3, Action&lt;T3&gt; ^ action3, System::Threading::Tasks::Dataflow::DataflowBlockOptions ^ dataflowBlockOptions);" />
      <MemberSignature Language="F#" Value="static member Choose : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T1&gt; * Action&lt;'T1&gt; * System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T2&gt; * Action&lt;'T2&gt; * System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T3&gt; * Action&lt;'T3&gt; * System.Threading.Tasks.Dataflow.DataflowBlockOptions -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Choose (source1, action1, source2, action2, source3, action3, dataflowBlockOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source1" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt;" />
        <Parameter Name="action1" Type="System.Action&lt;T1&gt;" />
        <Parameter Name="source2" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt;" />
        <Parameter Name="action2" Type="System.Action&lt;T2&gt;" />
        <Parameter Name="source3" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T3&gt;" />
        <Parameter Name="action3" Type="System.Action&lt;T3&gt;" />
        <Parameter Name="dataflowBlockOptions" Type="System.Threading.Tasks.Dataflow.DataflowBlockOptions" />
      </Parameters>
      <Docs>
        <typeparam name="T1">
          <span data-ttu-id="00bdc-165">指定第一個來源包含的資料型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-165">Specifies type of data contained in the first source.</span>
          </span>
        </typeparam>
        <typeparam name="T2">
          <span data-ttu-id="00bdc-166">指定第二個來源包含的資料型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-166">Specifies type of data contained in the second source.</span>
          </span>
        </typeparam>
        <typeparam name="T3">
          <span data-ttu-id="00bdc-167">指定第三個來源所包含的資料型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-167">Specifies type of data contained in the third source.</span>
          </span>
        </typeparam>
        <param name="source1">
          <span data-ttu-id="00bdc-168">第一個來源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-168">The first source.</span>
          </span>
        </param>
        <param name="action1">
          <span data-ttu-id="00bdc-169">要對第一個來源的資料執行的處理常式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-169">The handler to execute on data from the first source.</span>
          </span>
        </param>
        <param name="source2">
          <span data-ttu-id="00bdc-170">第二個來源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-170">The second source.</span>
          </span>
        </param>
        <param name="action2">
          <span data-ttu-id="00bdc-171">要對第二個來源的資料執行的處理常式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-171">The handler to execute on data from the second source.</span>
          </span>
        </param>
        <param name="source3">
          <span data-ttu-id="00bdc-172">第三個來源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-172">The third source.</span>
          </span>
        </param>
        <param name="action3">
          <span data-ttu-id="00bdc-173">要從第三來源對資料執行的處理常式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-173">The handler to execute on data from the third source.</span>
          </span>
        </param>
        <param name="dataflowBlockOptions">
          <span data-ttu-id="00bdc-174">用來設定這個選擇的選項。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-174">The options with which to configure this choice.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00bdc-175">監視三個資料流程來源，叫用先提供資料的任一個來源的提供之處理常式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-175">Monitors three dataflow sources, invoking the provided handler for whichever source makes data available first.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00bdc-176">表示非同步選擇的 <see cref="T:System.Threading.Tasks.Task`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-176">A  <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous choice.</span>
          </span>
          <span data-ttu-id="00bdc-177">如果在選擇完成前所有來源都已完成，或者如果在選擇完成前隨 <paramref name="dataflowBlockOptions" /> 提供的 <see cref="T:System.Threading.CancellationToken" /> 已取消，產生的工作將會被取消。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-177">If all sources are completed prior to the choice completing, or if the <see cref="T:System.Threading.CancellationToken" /> provided as part of <paramref name="dataflowBlockOptions" /> is canceled prior to the choice completing, the resulting task will be canceled.</span>
          </span>
          <span data-ttu-id="00bdc-178">當其中一個來源有可使用的資料，並成功將它傳播到選擇，則在處理常式完成時，產生的工作會完成，如果處理常式擲回例外狀況，工作會以 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 狀態結束，並包含未處理的例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-178">When one of the sources has data available and successfully propagates it to the choice, the resulting task will complete when the handler completes; if the handler throws an exception, the task will end in the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state and will contain the unhandled exception.</span>
          </span>
          <span data-ttu-id="00bdc-179">否則，工作會結束，其 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 設定為以 0 起始的來源索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-179">Otherwise, the task will end with its <see cref="P:System.Threading.Tasks.Task`1.Result" /> set to the 0-based index of the source.</span>
          </span>
          <span data-ttu-id="00bdc-180">這個方法會只使用其中一個資料來源的項目，永遠不會是多個。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-180">This method will only consume an element from one of the data sources, never more than one.</span>
          </span>
          <span data-ttu-id="00bdc-181">如果在收到項目之後才要求取消時，取消要求會被忽略，而且會允許相關的處理常式執行。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-181">If cancellation is requested after an element has been received, the cancellation request will be ignored, and the relevant handler will be allowed to execute.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="00bdc-182">
            <paramref name="source1" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-182">The <paramref name="source1" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="00bdc-183">-或-  <paramref name="action1" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-183">-or-  The <paramref name="action1" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="00bdc-184">-或-  <paramref name="source2" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-184">-or-  The <paramref name="source2" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="00bdc-185">-或-  <paramref name="action2" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-185">-or-  The <paramref name="action2" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="00bdc-186">-或-  <paramref name="source3" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-186">-or-  The <paramref name="source3" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="00bdc-187">-或-  <paramref name="action3" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-187">-or-  The <paramref name="action3" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="00bdc-188">-或-  <paramref name="dataflowBlockOptions" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-188">-or-  The <paramref name="dataflowBlockOptions" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Encapsulate&lt;TInput,TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Dataflow.IPropagatorBlock&lt;TInput,TOutput&gt; Encapsulate&lt;TInput,TOutput&gt; (System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt; target, System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Dataflow.IPropagatorBlock`2&lt;!!TInput, !!TOutput&gt; Encapsulate&lt;TInput, TOutput&gt;(class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TInput&gt; target, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate``2(System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Function Encapsulate(Of TInput, TOutput) (target As ITargetBlock(Of TInput), source As ISourceBlock(Of TOutput)) As IPropagatorBlock(Of TInput, TOutput)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TInput, typename TOutput&gt;&#xA; static System::Threading::Tasks::Dataflow::IPropagatorBlock&lt;TInput, TOutput&gt; ^ Encapsulate(System::Threading::Tasks::Dataflow::ITargetBlock&lt;TInput&gt; ^ target, System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Encapsulate : System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Input&gt; * System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; -&gt; System.Threading.Tasks.Dataflow.IPropagatorBlock&lt;'Input, 'Output&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate (target, source)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Dataflow.IPropagatorBlock&lt;TInput,TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput" />
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;" />
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TInput">
          <span data-ttu-id="00bdc-189">指定目標所預期的輸入型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-189">Specifies the type of input expected by the target.</span>
          </span>
        </typeparam>
        <typeparam name="TOutput">
          <span data-ttu-id="00bdc-190">指定來源所產生的輸出類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-190">Specifies the type of output produced by the source.</span>
          </span>
        </typeparam>
        <param name="target">
          <span data-ttu-id="00bdc-191">要封裝的目標</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-191">The target to encapsulate.</span>
          </span>
        </param>
        <param name="source">
          <span data-ttu-id="00bdc-192">要封裝的來源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-192">The source to encapsulate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00bdc-193">將目標和來源封裝成單一傳播程式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-193">Encapsulates a target and a source into a single propagator.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00bdc-194">封裝的目標和來源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-194">The encapsulated target and source.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00bdc-195"><xref:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate%2A>方法需要兩個現有的區塊： 將目標區塊 (實作類別的執行個體<xref:System.Threading.Tasks.Dataflow.ITargetBlock%601>) 以及來源區塊 (實作類別的執行個體<xref:System.Threading.Tasks.Dataflow.ISourceBlock%601>)。</span><span class="sxs-lookup"><span data-stu-id="00bdc-195">The <xref:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate%2A> method requires two existing blocks: a target block (an instance of a class that implements <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601>) and a source block (an instance of a class that implements <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601>).</span></span> <span data-ttu-id="00bdc-196"><xref:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate%2A> 建立連線的內部類別的新執行個體<xref:System.Threading.Tasks.Dataflow.ITargetBlock%601>介面成員`target`參數並<xref:System.Threading.Tasks.Dataflow.ISourceBlock%601>介面成員`source`參數。</span><span class="sxs-lookup"><span data-stu-id="00bdc-196"><xref:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate%2A> creates a new instance of an internal class that connects the <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> interface members to the `target` parameter and the <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> interface members to the `source` parameter.</span></span>  <span data-ttu-id="00bdc-197">兩者<xref:System.Threading.Tasks.Dataflow.ITargetBlock%601>並<xref:System.Threading.Tasks.Dataflow.ISourceBlock%601>衍生自<xref:System.Threading.Tasks.Dataflow.IDataflowBlock>。</span><span class="sxs-lookup"><span data-stu-id="00bdc-197">Both <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> and <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> derive from <xref:System.Threading.Tasks.Dataflow.IDataflowBlock>.</span></span> <span data-ttu-id="00bdc-198">從來源到目標明確傳遞區塊的完成。</span><span class="sxs-lookup"><span data-stu-id="00bdc-198">Block completion is explicitly passed from sources to targets.</span></span> <span data-ttu-id="00bdc-199">因此，<xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Complete%2A>並<xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Fault%2A>方法連線到目標時<xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Completion%2A>屬性連接至來源。</span><span class="sxs-lookup"><span data-stu-id="00bdc-199">Therefore, the <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Complete%2A> and <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Fault%2A> methods are connected to the target while the <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Completion%2A> property is connected to the source.</span></span>  <span data-ttu-id="00bdc-200">您必須確定，當目標一半完成時，最適合的方式; 完成一半的來源例如：</span><span class="sxs-lookup"><span data-stu-id="00bdc-200">You must ensure that when the target half  completes, the source half gets completed in the most appropriate manner; for example:</span></span>  
  
 `target.Completion.ContinueWith(completion => source.Complete());`  
  
 <span data-ttu-id="00bdc-201">或者，如果您想要傳播完成類型，您可以使用這個更複雜的程式碼：</span><span class="sxs-lookup"><span data-stu-id="00bdc-201">Or, if you want to propagate the completion type, you can use this more sophisticated code:</span></span>  
  
```  
target.Completion.ContinueWith(completion => { if (completion.IsFaulted)    
  
((IDataflowBlock)batchBlock).Fault(completion.Exception);   
else   
batchBlock.Complete();   
});  
  
```  
  
 <span data-ttu-id="00bdc-202">您必須明確地提供訊息傳播從目標到來源。</span><span class="sxs-lookup"><span data-stu-id="00bdc-202">You must also explicitly provide the message propagation from target to source.</span></span> <span data-ttu-id="00bdc-203">此明確的好處是連線的，它能讓您能夠自由地執行兩個封裝區塊之間任何不受限制的處理。</span><span class="sxs-lookup"><span data-stu-id="00bdc-203">The benefit of this explicit connection is that it gives you the freedom to perform any unconstrained processing between the two encapsulated blocks.</span></span> <span data-ttu-id="00bdc-204">您可以執行，以將其編碼成區塊的委派 （如果區塊需要委派） 所需的處理或內嵌區塊之間的子網路。</span><span class="sxs-lookup"><span data-stu-id="00bdc-204">You may do that either by encoding the necessary processing into the blocks' delegates (if the blocks take delegates), or by embedding a sub-network of blocks between them.</span></span> <span data-ttu-id="00bdc-205">更簡單的方法是使用會採用委派; 區塊例如，使用<xref:System.Threading.Tasks.Dataflow.ActionBlock%601>， <xref:System.Threading.Tasks.Dataflow.TransformBlock%602>， <xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602> （如果適用），或自訂的區塊。</span><span class="sxs-lookup"><span data-stu-id="00bdc-205">The easier way is to use a block that takes delegates; for example, use <xref:System.Threading.Tasks.Dataflow.ActionBlock%601>, <xref:System.Threading.Tasks.Dataflow.TransformBlock%602>, <xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602> (if applicable), or a custom block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LinkTo&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static IDisposable LinkTo&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt; target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IDisposable LinkTo&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TOutput&gt; target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LinkTo(Of TOutput) (source As ISourceBlock(Of TOutput), target As ITargetBlock(Of TOutput)) As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static IDisposable ^ LinkTo(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, System::Threading::Tasks::Dataflow::ITargetBlock&lt;TOutput&gt; ^ target);" />
      <MemberSignature Language="F#" Value="static member LinkTo : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Output&gt; -&gt; IDisposable" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo (source, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="00bdc-206">指定來源所包含的資料型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-206">Specifies the type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="00bdc-207">要從其中進行連結的來源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-207">The source from which to link.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="00bdc-208">要將來源連接至的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-208">The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> to which to connect the source.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00bdc-209">將 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 連結到指定的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-209">Links the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> to the specified  <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00bdc-210">
            <see cref="T:System.IDisposable" />，這會在呼叫 <see langword="Dispose" /> 時立即取消來源與目標的連結。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-210">An <see cref="T:System.IDisposable" /> that, upon calling <see langword="Dispose" />, will unlink the source from the target.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="00bdc-211">
            <paramref name="source" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-211">The <paramref name="source" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="00bdc-212">-或-  <paramref name="target" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-212">-or-  The <paramref name="target" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="LinkTo&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static IDisposable LinkTo&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt; target, Predicate&lt;TOutput&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IDisposable LinkTo&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TOutput&gt; target, class System.Predicate`1&lt;!!TOutput&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Predicate{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LinkTo(Of TOutput) (source As ISourceBlock(Of TOutput), target As ITargetBlock(Of TOutput), predicate As Predicate(Of TOutput)) As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static IDisposable ^ LinkTo(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, System::Threading::Tasks::Dataflow::ITargetBlock&lt;TOutput&gt; ^ target, Predicate&lt;TOutput&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member LinkTo : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Output&gt; * Predicate&lt;'Output&gt; -&gt; IDisposable" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo (source, target, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt;" />
        <Parameter Name="predicate" Type="System.Predicate&lt;TOutput&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="00bdc-213">指定來源所包含的資料型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-213">Specifies the type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="00bdc-214">要從其中進行連結的來源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-214">The source from which to link.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="00bdc-215">來源所要連線到的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-215">The  <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> to which to connect the source.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="00bdc-216">訊息必須通過的篩選條件，才能讓它可以從來源傳播至目標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-216">The filter a message must pass in order for it to propagate from the source to the target.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00bdc-217">使用指定的篩選器，將 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 連結到 指定的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-217">Links the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> to the specified  <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> using the specified filter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00bdc-218">
            <see cref="T:System.IDisposable" />，這會在呼叫 <see langword="Dispose" /> 時立即取消來源與目標的連結。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-218">An <see cref="T:System.IDisposable" /> that, upon calling <see langword="Dispose" />, will unlink the source from the target.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="00bdc-219">
            <paramref name="source" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-219">The <paramref name="source" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="00bdc-220">-或-  <paramref name="target" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-220">-or-  The <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="00bdc-221">-或-  <paramref name="predicate" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-221">-or-  The <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="LinkTo&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static IDisposable LinkTo&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt; target, System.Threading.Tasks.Dataflow.DataflowLinkOptions linkOptions, Predicate&lt;TOutput&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IDisposable LinkTo&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TOutput&gt; target, class System.Threading.Tasks.Dataflow.DataflowLinkOptions linkOptions, class System.Predicate`1&lt;!!TOutput&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.Predicate{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LinkTo(Of TOutput) (source As ISourceBlock(Of TOutput), target As ITargetBlock(Of TOutput), linkOptions As DataflowLinkOptions, predicate As Predicate(Of TOutput)) As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static IDisposable ^ LinkTo(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, System::Threading::Tasks::Dataflow::ITargetBlock&lt;TOutput&gt; ^ target, System::Threading::Tasks::Dataflow::DataflowLinkOptions ^ linkOptions, Predicate&lt;TOutput&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member LinkTo : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Output&gt; * System.Threading.Tasks.Dataflow.DataflowLinkOptions * Predicate&lt;'Output&gt; -&gt; IDisposable" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo (source, target, linkOptions, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt;" />
        <Parameter Name="linkOptions" Type="System.Threading.Tasks.Dataflow.DataflowLinkOptions" />
        <Parameter Name="predicate" Type="System.Predicate&lt;TOutput&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="00bdc-222">指定來源所包含的資料型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-222">Specifies the type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="00bdc-223">要從其中進行連結的來源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-223">The source from which to link.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="00bdc-224">來源所要連線到的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-224">The  <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> to which to connect the source.</span>
          </span>
        </param>
        <param name="linkOptions">
          <span data-ttu-id="00bdc-225">其中一個列舉值，指定如何設定資料流程區塊之間的連結。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-225">One of the enumeration values that specifies how to configure a link between dataflow blocks.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="00bdc-226">訊息必須通過的篩選條件，才能讓它可以從來源傳播至目標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-226">The filter a message must pass in order for it to propagate from the source to the target.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00bdc-227">使用指定的篩選器，將 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 連結到指定的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-227">Links the  <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> to the specified  <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> using the specified filter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00bdc-228">
            <see cref="T:System.IDisposable" />，這會在呼叫 <see langword="Dispose" /> 時立即取消來源與目標的連結。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-228">An <see cref="T:System.IDisposable" /> that, upon calling <see langword="Dispose" />, will unlink the source from the target.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="00bdc-229">
            <paramref name="source" /> 為 null (在 Visual Basic 中為 Nothing)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-229">The  <paramref name="source" /> is null (Nothing in Visual Basic).</span>
          </span>
          <span data-ttu-id="00bdc-230">-或-  <paramref name="target" /> 為 null (在 Visual Basic 中為 Nothing)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-230">-or-  The  <paramref name="target" /> is null (Nothing in Visual Basic).</span>
          </span>
          <span data-ttu-id="00bdc-231">-或-  <paramref name="linkOptions" /> 為 null (在 Visual Basic 中為 Nothing)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-231">-or-  The  <paramref name="linkOptions" /> is null (Nothing in Visual Basic).</span>
          </span>
          <span data-ttu-id="00bdc-232">-或-  <paramref name="predicate" /> 為 null (在 Visual Basic 中為 Nothing)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-232">-or-  The  <paramref name="predicate" /> is null (Nothing in Visual Basic).</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="NullTarget&lt;TInput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt; NullTarget&lt;TInput&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TInput&gt; NullTarget&lt;TInput&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.NullTarget``1" />
      <MemberSignature Language="VB.NET" Value="Public Function NullTarget(Of TInput) () As ITargetBlock(Of TInput)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TInput&gt;&#xA; static System::Threading::Tasks::Dataflow::ITargetBlock&lt;TInput&gt; ^ NullTarget();" />
      <MemberSignature Language="F#" Value="static member NullTarget : unit -&gt; System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Input&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.NullTarget " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TInput">
          <span data-ttu-id="00bdc-233">此區塊可以接受的訊息的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-233">The type of the messages this block can accept.</span>
          </span>
        </typeparam>
        <summary>
          <span data-ttu-id="00bdc-234">取得目標區塊，以同步方式接受並置放提供給它的所有訊息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-234">Gets a target block that synchronously accepts all messages offered to it and drops them.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00bdc-235">接受而隨後會捨棄所提供之所有訊息的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-235">A <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> that accepts and subsequently drops all offered messages.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputAvailableAsync&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; OutputAvailableAsync&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; OutputAvailableAsync&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OutputAvailableAsync(Of TOutput) (source As ISourceBlock(Of TOutput)) As Task(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;bool&gt; ^ OutputAvailableAsync(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member OutputAvailableAsync : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="00bdc-236">指定來源所包含的資料型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-236">Specifies the type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="00bdc-237">要監視的來源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-237">The source to monitor.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00bdc-238">提供 <see cref="T:System.Threading.Tasks.Task`1" />，以非同步方式監視可用輸出的來源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-238">Provides a <see cref="T:System.Threading.Tasks.Task`1" /> that asynchronously monitors the source for available output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00bdc-239">通知是否有更多輸出以及其何時可用的 <see cref="T:System.Threading.Tasks.Task`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-239">A <see cref="T:System.Threading.Tasks.Task`1" /> that informs of whether and when more output is available.</span>
          </span>
          <span data-ttu-id="00bdc-240">如果在工作完成時其 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 為 <see langword="true" />，來源中有多個輸出 (雖然來源的另一個消費者可能會擷取資料)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-240">If, when the task completes, its <see cref="P:System.Threading.Tasks.Task`1.Result" /> is <see langword="true" />, more output is available in the source (though another consumer of the source may retrieve the data).</span>
          </span>
          <span data-ttu-id="00bdc-241">如果它傳回 <see langword="false" />，現在和未來都沒有其他輸出，因為在輸出可用之前來源已完成。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-241">If it returns <see langword="false" />, more output is not and will never be available, due to the source completing prior to output being available.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputAvailableAsync&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; OutputAvailableAsync&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; OutputAvailableAsync&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;bool&gt; ^ OutputAvailableAsync(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member OutputAvailableAsync : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="00bdc-242">指定來源所包含的資料型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-242">Specifies the type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="00bdc-243">要監視的來源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-243">The source to monitor.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="00bdc-244">取消語彙基元，用來取消非同步作業。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-244">The cancellation token with which to cancel the asynchronous operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00bdc-245">提供 <see cref="T:System.Threading.Tasks.Task`1" />，以非同步方式監視可用輸出的來源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-245">Provides a  <see cref="T:System.Threading.Tasks.Task`1" /> that asynchronously monitors the source for available output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00bdc-246">通知是否有更多輸出以及其何時可用的 <see cref="T:System.Threading.Tasks.Task`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-246">A <see cref="T:System.Threading.Tasks.Task`1" /> that informs of whether and when more output is available.</span>
          </span>
          <span data-ttu-id="00bdc-247">如果在工作完成時其 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 為 <see langword="true" />，來源中有多個輸出 (雖然來源的另一個消費者可能會擷取資料)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-247">If, when the task completes, its <see cref="P:System.Threading.Tasks.Task`1.Result" /> is <see langword="true" />, more output is available in the source (though another consumer of the source may retrieve the data).</span>
          </span>
          <span data-ttu-id="00bdc-248">如果它傳回 <see langword="false" />，現在和未來都沒有其他輸出，因為在輸出可用之前來源已完成。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-248">If it returns <see langword="false" />, more output is not and will never be available, due to the source completing prior to output being available.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Post&lt;TInput&gt;">
      <MemberSignature Language="C#" Value="public static bool Post&lt;TInput&gt; (this System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt; target, TInput item);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Post&lt;TInput&gt;(class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TInput&gt; target, !!TInput item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Post``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Post(Of TInput) (target As ITargetBlock(Of TInput), item As TInput) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TInput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Post(System::Threading::Tasks::Dataflow::ITargetBlock&lt;TInput&gt; ^ target, TInput item);" />
      <MemberSignature Language="F#" Value="static member Post : System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Input&gt; * 'Input -&gt; bool" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Post (target, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;" RefType="this" />
        <Parameter Name="item" Type="TInput" />
      </Parameters>
      <Docs>
        <typeparam name="TInput">
          <span data-ttu-id="00bdc-249">指定目標區塊所接受的資料型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-249">Specifies the type of data accepted by the target block.</span>
          </span>
        </typeparam>
        <param name="target">
          <span data-ttu-id="00bdc-250">目標區塊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-250">The target block.</span>
          </span>
        </param>
        <param name="item">
          <span data-ttu-id="00bdc-251">提供給目標的項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-251">The item being offered to the target.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00bdc-252">將項目張貼至 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-252">Posts an item to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00bdc-253">如果目標區塊已接受項目，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-253">
              <see langword="true" /> if the item was accepted by the target block; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00bdc-254">一旦決定目標區塊接受或拒絕項目，但除非否則取決於目標區塊的特殊的語意，它不會等到要實際處理的項目，這個方法會傳回。</span><span class="sxs-lookup"><span data-stu-id="00bdc-254">This method will return once the target block has decided to accept or decline the item, but unless otherwise dictated by special semantics of the target block, it does not wait for the item to actually be processed.</span></span> <span data-ttu-id="00bdc-255">例如，<xref:System.Threading.Tasks.Dataflow.ActionBlock%601>會傳回從<xref:System.Threading.Tasks.Dataflow.DataflowBlock.Post%2A>只要它已儲存的已張貼的項目到其輸入佇列)。</span><span class="sxs-lookup"><span data-stu-id="00bdc-255">For example, <xref:System.Threading.Tasks.Dataflow.ActionBlock%601> will return from <xref:System.Threading.Tasks.Dataflow.DataflowBlock.Post%2A> as soon as it has stored the posted item into its input queue).</span></span> <span data-ttu-id="00bdc-256">從區塊處理的觀點來看`Post`是非同步的。</span><span class="sxs-lookup"><span data-stu-id="00bdc-256">From the perspective of the block's processing, `Post` is asynchronous.</span></span> <span data-ttu-id="00bdc-257">目標區塊提供的訊息，該支援延後或更多的處理進行中的區塊及其`Post`實作中，請考慮使用<xref:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync%2A>，這將會立即傳回，而且可讓延後已發佈的訊息目標然後稍後再使用它之後`SendAsync`傳回。</span><span class="sxs-lookup"><span data-stu-id="00bdc-257">For target blocks that support postponing offered messages, or for blocks that may do more processing in their `Post` implementation, consider using <xref:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync%2A>, which will return immediately and will enable the target to postpone the posted message and later consume it after `SendAsync` returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Receive&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static TOutput Receive&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TOutput Receive&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Receive(Of TOutput) (source As ISourceBlock(Of TOutput)) As TOutput" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TOutput Receive(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Receive : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; -&gt; 'Output" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Receive source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TOutput</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="00bdc-258">來源中包含的資料類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-258">The type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="00bdc-259">要從其中接收值的來源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-259">The source from which to receive the value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00bdc-260">以同步方式接收來自指定之來源的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-260">Synchronously receives a value from a specified source.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00bdc-261">接收到的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-261">The received value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="00bdc-262">
            <paramref name="source" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-262">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="00bdc-263">無法從來源接收項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-263">No item could be received from the source.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Receive&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static TOutput Receive&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TOutput Receive&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TOutput Receive(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member Receive : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * System.Threading.CancellationToken -&gt; 'Output" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Receive (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TOutput</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="00bdc-264">來源中包含的資料類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-264">The type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="00bdc-265">要從其中接收值的來源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-265">The source from which to receive the value.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="00bdc-266">要用來取消接收作業的語彙基元。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-266">The token to use to cancel the receive operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00bdc-267">同步接收指定之來源的值，並提供語彙基元取消作業。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-267">Synchronously receives a value from a specified source and provides a token to cancel the operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00bdc-268">接收到的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-268">The received value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00bdc-269">如果來源成功提供這項作業所收到的項目，即使發生並行的取消要求，會傳回該項目。</span><span class="sxs-lookup"><span data-stu-id="00bdc-269">If the source successfully offered an item that was received by this operation, that item is returned even if a concurrent cancellation request occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="00bdc-270">
            <paramref name="source" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-270">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="00bdc-271">無法從來源接收項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-271">No item could be received from the source.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="00bdc-272">從來源收到項目之前，已取消作業。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-272">The operation was canceled before an item was received from the source.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Receive&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static TOutput Receive&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TOutput Receive&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Receive(Of TOutput) (source As ISourceBlock(Of TOutput), timeout As TimeSpan) As TOutput" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TOutput Receive(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Receive : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * TimeSpan -&gt; 'Output" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Receive (source, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TOutput</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="00bdc-273">來源中包含的資料類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-273">The type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="00bdc-274">要從其中接收值的來源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-274">The source from which to receive the value.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="00bdc-275">等待同步作業完成的最大時間間隔 (以毫秒為單位)，或者以 -1 表示無限期等候的時間間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-275">The maximum time interval, in milliseconds, to wait for the synchronous operation to complete, or an interval that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00bdc-276">同步接收指定之來源的值，觀察選擇性逾時期限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-276">Synchronously receives a value from a specified source, observing an optional time-out period.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00bdc-277">接收到的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-277">The received value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00bdc-278">如果來源成功提供這項作業所收到的項目，即使發生並行的逾時，會傳回該項目。</span><span class="sxs-lookup"><span data-stu-id="00bdc-278">If the source successfully offered an item that was received by this operation, that item is returned even if a concurrent time-out occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="00bdc-279">
            <paramref name="timeout" /> 是一個不等於 -1 的負數，這表示無限的逾時時間。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-279">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out period.</span>
          </span>
          <span data-ttu-id="00bdc-280">-或-  <paramref name="timeout" /> 大於 <see cref="F:System.Int32.MaxValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-280">-or-  <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="00bdc-281">
            <paramref name="source" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-281">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="00bdc-282">無法從來源接收項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-282">No item could be received from the source.</span>
          </span>
        </exception>
        <exception cref="T:System.TimeoutException">
          <span data-ttu-id="00bdc-283">指定的逾時在從來源接收項目之前到期。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-283">The specified time-out expired before an item was received from the source.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Receive&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static TOutput Receive&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TOutput Receive&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TOutput Receive(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, TimeSpan timeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member Receive : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * TimeSpan * System.Threading.CancellationToken -&gt; 'Output" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Receive (source, timeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TOutput</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="00bdc-284">來源中包含的資料類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-284">The type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="00bdc-285">要從其中接收值的來源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-285">The source from which to receive the value.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="00bdc-286">等待同步作業完成的最大時間間隔 (以毫秒為單位)，或者以 -1 表示無限期等候的時間間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-286">The maximum time interval, in milliseconds, to wait for the synchronous operation to complete, or an interval that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="00bdc-287">要用來取消接收作業的語彙基元。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-287">The token to use to cancel the receive operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00bdc-288">同步接收指定之來源的值，提供語彙基元取消作業並觀察選擇性逾時間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-288">Synchronously receives a value from a specified source, providing a token to cancel the operation and observing an optional time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00bdc-289">接收到的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-289">The received value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00bdc-290">如果來源成功提供這項作業所收到的項目值，即使同時連線的逾時或取消要求，就會發生，就是會傳回的值。</span><span class="sxs-lookup"><span data-stu-id="00bdc-290">If the source successfully offered an item value that was received by this operation, that value is returned even if a concurrent time-out or cancellation request occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="00bdc-291">
            <paramref name="source" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-291">The <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="00bdc-292">
            <paramref name="timeout" /> 是一個不等於 -1 的負數，這表示無限的逾時時間。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-292">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out period.</span>
          </span>
          <span data-ttu-id="00bdc-293">-或-  <paramref name="timeout" /> 大於 <see cref="F:System.Int32.MaxValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-293">-or-  <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="00bdc-294">無法從來源接收項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-294">No item could be received from the source.</span>
          </span>
        </exception>
        <exception cref="T:System.TimeoutException">
          <span data-ttu-id="00bdc-295">指定的逾時在從來源接收項目之前到期。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-295">The specified time-out expired before an item was received from the source.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="00bdc-296">從來源收到項目之前，已取消作業。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-296">The operation was canceled before an item was received from the source.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ReceiveAsync&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TOutput&gt; ReceiveAsync&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TOutput&gt; ReceiveAsync&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReceiveAsync(Of TOutput) (source As ISourceBlock(Of TOutput)) As Task(Of TOutput)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;TOutput&gt; ^ ReceiveAsync(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member ReceiveAsync : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; -&gt; System.Threading.Tasks.Task&lt;'Output&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="00bdc-297">來源中包含的資料類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-297">The type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="00bdc-298">要從其中接收值的來源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-298">The source from which to receive the value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00bdc-299">以非同步方式接收來自指定之來源的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-299">Asynchronously receives a value from a specified source.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00bdc-300">代表非同步接收作業的工作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-300">A task that represents the asynchronous receive operation.</span>
          </span>
          <span data-ttu-id="00bdc-301">當成功從來源接收項目值時，傳回的工作已完成，而且其 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 會傳回接收該值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-301">When an item value is successfully received from the source, the returned task is completed and its <see cref="P:System.Threading.Tasks.Task`1.Result" /> returns the received value.</span>
          </span>
          <span data-ttu-id="00bdc-302">若因為來源為空且已完成而無法擷取項目值，會在傳回的工作中擲回 <see cref="T:System.InvalidOperationException" /> 例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-302">If an item value cannot be retrieved because the source is empty and completed , an <see cref="T:System.InvalidOperationException" /> exception is thrown in the returned task.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="00bdc-303">
            <paramref name="source" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-303">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ReceiveAsync&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TOutput&gt; ReceiveAsync&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TOutput&gt; ReceiveAsync&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;TOutput&gt; ^ ReceiveAsync(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member ReceiveAsync : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Output&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="00bdc-304">指定來源所包含的資料型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-304">Specifies the type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="00bdc-305">要從其中接收值的來源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-305">The source from which to receive the value.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="00bdc-306">要用來取消接收作業的語彙基元。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-306">The token to use to cancel the receive operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00bdc-307">非同步接收指定之來源的值，並提供語彙基元取消作業。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-307">Asynchronously receives a value from a specified source and provides a token to cancel the operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00bdc-308">代表非同步接收作業的工作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-308">A task that represents the asynchronous receive operation.</span>
          </span>
          <span data-ttu-id="00bdc-309">當成功從來源接收值時，傳回的工作已完成，而且其 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 會傳回該值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-309">When a value is successfully received from the source, the returned task is completed and its <see cref="P:System.Threading.Tasks.Task`1.Result" /> returns the value.</span>
          </span>
          <span data-ttu-id="00bdc-310">如果因為要求取消而無法擷取值，則取消傳回的工作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-310">If a value cannot be retrieved because cancellation was requested, the returned task is canceled.</span>
          </span>
          <span data-ttu-id="00bdc-311">若因為來源為空且已完成而無法擷取值，會在傳回的工作中擲回 <see cref="T:System.InvalidOperationException" /> 例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-311">If the value cannot be retrieved because the source is empty and completed , an <see cref="T:System.InvalidOperationException" /> exception is thrown in the returned task.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="00bdc-312">
            <paramref name="source" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-312">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ReceiveAsync&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TOutput&gt; ReceiveAsync&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TOutput&gt; ReceiveAsync&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReceiveAsync(Of TOutput) (source As ISourceBlock(Of TOutput), timeout As TimeSpan) As Task(Of TOutput)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;TOutput&gt; ^ ReceiveAsync(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member ReceiveAsync : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * TimeSpan -&gt; System.Threading.Tasks.Task&lt;'Output&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync (source, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="00bdc-313">來源中包含的資料類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-313">The type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="00bdc-314">要從其中接收值的來源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-314">The source from which to receive the value.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="00bdc-315">等待同步作業完成的最大時間間隔 (以毫秒為單位)，或者以 -1 表示無限期等候的時間間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-315">The maximum time interval, in milliseconds, to wait for the synchronous operation to complete, or an interval that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00bdc-316">非同步接收指定之來源的值，觀察選擇性逾時期限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-316">Asynchronously receives a value from a specified source, observing an optional time-out period.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00bdc-317">代表非同步接收作業的工作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-317">A task that represents the asynchronous receive operation.</span>
          </span>
          <span data-ttu-id="00bdc-318">當成功從來源接收值時，傳回的工作已完成，而且其 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 會傳回該值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-318">When a value is successfully received from the source, the returned task is completed and its <see cref="P:System.Threading.Tasks.Task`1.Result" /> returns the value.</span>
          </span>
          <span data-ttu-id="00bdc-319">如果因為逾時到期而無法擷取值，則取消傳回的工作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-319">If a value cannot be retrieved because the time-out expired, the returned task is canceled.</span>
          </span>
          <span data-ttu-id="00bdc-320">若因為來源為空且已完成而無法擷取值，會在傳回的工作中擲回 <see cref="T:System.InvalidOperationException" /> 例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-320">If the value cannot be retrieved because the source is empty and completed , an <see cref="T:System.InvalidOperationException" /> exception is thrown in the returned task.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="00bdc-321">
            <paramref name="source" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-321">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="00bdc-322">
            <paramref name="timeout" /> 是一個不等於 -1 的負數，這表示無限的逾時時間。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-322">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out period.</span>
          </span>
          <span data-ttu-id="00bdc-323">-或-  <paramref name="timeout" /> 大於 <see cref="F:System.Int32.MaxValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-323">-or-  <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ReceiveAsync&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TOutput&gt; ReceiveAsync&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TOutput&gt; ReceiveAsync&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;TOutput&gt; ^ ReceiveAsync(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, TimeSpan timeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member ReceiveAsync : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Output&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync (source, timeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="00bdc-324">來源中包含的資料類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-324">The type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="00bdc-325">要從其中接收值的來源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-325">The source from which to receive the value.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="00bdc-326">等待同步作業完成的最大時間間隔 (以毫秒為單位)，或者以 -1 表示無限期等候的時間間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-326">The maximum time interval, in milliseconds, to wait for the synchronous operation to complete, or an interval that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="00bdc-327">可能用來取消接收作業的語彙基元。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-327">The token which may be used to cancel the receive operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00bdc-328">非同步接收指定之來源的值，提供語彙基元取消作業並觀察選擇性逾時間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-328">Asynchronously receives a value from a specified source, providing a token to cancel the operation and observing an optional time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00bdc-329">代表非同步接收作業的工作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-329">A task that represents the asynchronous receive operation.</span>
          </span>
          <span data-ttu-id="00bdc-330">當成功從來源接收值時，傳回的工作已完成，而且其 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 會傳回該值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-330">When a value is successfully received from the source, the returned task is completed and its <see cref="P:System.Threading.Tasks.Task`1.Result" /> returns the value.</span>
          </span>
          <span data-ttu-id="00bdc-331">如果因為逾時到期或要求取消而無法擷取值，則取消傳回的工作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-331">If a value cannot be retrieved because the time-out expired or cancellation was requested, the returned task is canceled.</span>
          </span>
          <span data-ttu-id="00bdc-332">如果因為來源是空的和已完成，而無法擷值，則會在傳回的工作中擲回 <see cref="T:System.InvalidOperationException" /> 例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-332">If the value cannot be retrieved because the source is empty and completed, an <see cref="T:System.InvalidOperationException" /> exception is thrown in the returned task.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="00bdc-333">
            <paramref name="source" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-333">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="00bdc-334">
            <paramref name="timeout" /> 是一個不等於 -1 的負數，這表示無限的逾時時間。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-334">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out period.</span>
          </span>
          <span data-ttu-id="00bdc-335">-或-  <paramref name="timeout" /> 大於 <see cref="F:System.Int32.MaxValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-335">-or-  <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync&lt;TInput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; SendAsync&lt;TInput&gt; (this System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt; target, TInput item);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; SendAsync&lt;TInput&gt;(class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TInput&gt; target, !!TInput item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SendAsync(Of TInput) (target As ITargetBlock(Of TInput), item As TInput) As Task(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TInput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;bool&gt; ^ SendAsync(System::Threading::Tasks::Dataflow::ITargetBlock&lt;TInput&gt; ^ target, TInput item);" />
      <MemberSignature Language="F#" Value="static member SendAsync : System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Input&gt; * 'Input -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync (target, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;" RefType="this" />
        <Parameter Name="item" Type="TInput" />
      </Parameters>
      <Docs>
        <typeparam name="TInput">
          <span data-ttu-id="00bdc-336">指定要發佈至目標的資料的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-336">Specifies the type of the data to post to the target.</span>
          </span>
        </typeparam>
        <param name="target">
          <span data-ttu-id="00bdc-337">要公佈資料的目標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-337">The target to which to post the data.</span>
          </span>
        </param>
        <param name="item">
          <span data-ttu-id="00bdc-338">提供給目標的項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-338">The item being offered to the target.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00bdc-339">非同步提供訊息給目標訊息區，並允許延遲。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-339">Asynchronously offers a message to the target message block, allowing for postponement.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00bdc-340">表示非同步傳送的 <see cref="T:System.Threading.Tasks.Task`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-340">A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous send.</span>
          </span>
          <span data-ttu-id="00bdc-341">如果在呼叫 <see cref="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)" /> 期間目標接受並使用所提供的項目，從呼叫返回時，所產生的 <see cref="T:System.Threading.Tasks.Task`1" /> 將完成，而且其 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性會傳回 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-341">If the target accepts and consumes the offered element during the call to <see cref="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)" />, upon return from the call the resulting <see cref="T:System.Threading.Tasks.Task`1" /> will be completed and its <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will return <see langword="true" />.</span>
          </span>
          <span data-ttu-id="00bdc-342">如果在呼叫期間目標拒絕所提供的項目，從呼叫返回時，所產生的 <see cref="T:System.Threading.Tasks.Task`1" /> 將完成，而且其 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性會傳回 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-342">If the target declines the offered element during the call, upon return from the call the resulting <see cref="T:System.Threading.Tasks.Task`1" /> will be completed and its <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will return <see langword="false" />.</span>
          </span>
          <span data-ttu-id="00bdc-343">如果目標延後所提供的項目，則會緩衝項目直到目標耗用或釋放項目，此時將會完成工作，而其 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 指出訊息是否已耗用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-343">If the target postpones the offered element, the element will be buffered until such time that the target consumes or releases it, at which point the task will complete, with its <see cref="P:System.Threading.Tasks.Task`1.Result" /> indicating whether the message was consumed.</span>
          </span>
          <span data-ttu-id="00bdc-344">如果目標永遠不會嘗試使用或釋放訊息，則傳回的工作永遠不會完成。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-344">If the target never attempts to consume or release the message, the returned task will never complete.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="00bdc-345">
            <paramref name="target" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-345">The <paramref name="target" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync&lt;TInput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; SendAsync&lt;TInput&gt; (this System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt; target, TInput item, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; SendAsync&lt;TInput&gt;(class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TInput&gt; target, !!TInput item, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TInput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;bool&gt; ^ SendAsync(System::Threading::Tasks::Dataflow::ITargetBlock&lt;TInput&gt; ^ target, TInput item, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member SendAsync : System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Input&gt; * 'Input * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync (target, item, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;" RefType="this" />
        <Parameter Name="item" Type="TInput" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TInput">
          <span data-ttu-id="00bdc-346">指定要發佈至目標的資料的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-346">Specifies the type of the data to post to the target.</span>
          </span>
        </typeparam>
        <param name="target">
          <span data-ttu-id="00bdc-347">要公佈資料的目標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-347">The target to which to post the data.</span>
          </span>
        </param>
        <param name="item">
          <span data-ttu-id="00bdc-348">提供給目標的項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-348">The item being offered to the target.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="00bdc-349">取消語彙基元，用來要求取消傳送作業。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-349">The cancellation token with which to request cancellation of the send operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00bdc-350">非同步提供訊息給目標訊息區，並允許延遲。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-350">Asynchronously offers a message to the target message block, allowing for postponement.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00bdc-351">表示非同步傳送的 <see cref="T:System.Threading.Tasks.Task`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-351">A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous send.</span>
          </span>
          <span data-ttu-id="00bdc-352">若目標在呼叫 SendAsync 期間接受並使用所提供的項目，產生的 <see cref="T:System.Threading.Tasks.Task`1" /> 將於目標從呼叫返回時完成，且其 <c>Result</c> 屬性會傳回 true。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-352">If the target accepts and consumes the offered element during the call to SendAsync, upon return from the call the resulting <see cref="T:System.Threading.Tasks.Task`1" /> will be completed and its <c>Result</c> property will return true.</span>
          </span>
          <span data-ttu-id="00bdc-353">若目標在呼叫期間拒絕所提供的項目，產生的 <see cref="T:System.Threading.Tasks.Task`1" /> 將於目標從呼叫返回時完成，且其 <c>Result</c> 屬性會傳回 false。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-353">If the target declines the offered element during the call, upon return from the call the resulting <see cref="T:System.Threading.Tasks.Task`1" /> will be completed and its <c>Result</c> property will return false.</span>
          </span>
          <span data-ttu-id="00bdc-354">若目標延後所提供的項目，會緩衝項目直到目標使用或釋放該項目，此時工作將會完成，而其 <c>Result</c> 會指出訊息是否已使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-354">If the target postpones the offered element, the element will be buffered until such time that the target consumes or releases it, at which point the Task will complete, with its <c>Result</c> indicating whether the message was consumed.</span>
          </span>
          <span data-ttu-id="00bdc-355">如果目標永遠不會嘗試使用或釋放訊息，則傳回的工作永遠不會完成。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-355">If the target never attempts to consume or release the message, the returned task will never complete.</span>
          </span>
          <span data-ttu-id="00bdc-356">如果在目標已成功地耗用傳送的資料之前已要求取消時，傳回的工作會在已取消狀態下完成，而資料將不再用於目標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-356">If cancellation is requested before the target has successfully consumed the sent data, the returned task will complete in the Canceled state and the data will no longer be available to the target.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="00bdc-357">
            <paramref name="target" /> 為 null (在 Visual Basic 中為 Nothing)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-357">The  <paramref name="target" /> is null (Nothing in Visual Basic).</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryReceive&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static bool TryReceive&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.IReceivableSourceBlock&lt;TOutput&gt; source, out TOutput item);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryReceive&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&lt;!!TOutput&gt; source, [out] !!TOutput&amp; item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.TryReceive``1(System.Threading.Tasks.Dataflow.IReceivableSourceBlock{``0},``0@)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TryReceive(Of TOutput) (source As IReceivableSourceBlock(Of TOutput), ByRef item As TOutput) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool TryReceive(System::Threading::Tasks::Dataflow::IReceivableSourceBlock&lt;TOutput&gt; ^ source, [Runtime::InteropServices::Out] TOutput % item);" />
      <MemberSignature Language="F#" Value="static member TryReceive : System.Threading.Tasks.Dataflow.IReceivableSourceBlock&lt;'Output&gt; *  -&gt; bool" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.TryReceive (source, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.IReceivableSourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="item" Type="TOutput&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="00bdc-358">指定來源所包含的資料型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-358">Specifies the type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="00bdc-359">要從其中進行接收的來源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-359">The source from which to receive.</span>
          </span>
        </param>
        <param name="item">
          <span data-ttu-id="00bdc-360">從來源接收的項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-360">The item received from the source.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00bdc-361">嘗試以同步方式從 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 接收項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-361">Attempts to synchronously receive an item from the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00bdc-362">如果可以接收項目，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="00bdc-362">
              <see langword="true" /> if an item could be received; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00bdc-363">這個方法不會等到來源有提供項目。</span><span class="sxs-lookup"><span data-stu-id="00bdc-363">This method does not wait until the source has an item to provide.</span></span>  
  
 <span data-ttu-id="00bdc-364">它會傳回項目已可用。</span><span class="sxs-lookup"><span data-stu-id="00bdc-364">It will return whether or not an element was available.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>