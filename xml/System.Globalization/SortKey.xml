<Type Name="SortKey" FullName="System.Globalization.SortKey">
  <Metadata><Meta Name="ms.openlocfilehash" Value="eb630f84358d94203c1d383010b58eaae5badf1f" /><Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="11/27/2018" /><Meta Name="ms.locfileid" Value="52374271" /></Metadata><TypeSignature Language="C#" Value="public class SortKey" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable beforefieldinit SortKey extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.SortKey" />
  <TypeSignature Language="VB.NET" Value="Public Class SortKey" />
  <TypeSignature Language="C++ CLI" Value="public ref class SortKey" />
  <TypeSignature Language="F#" Value="type SortKey = class" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示將字串對應至其排序鍵的結果。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 區分文化特性比較兩個字串取決於具有數個類別，排序權數，包括指令碼，是英文字母，字串中的每個字元大小寫和變音符號權數。 排序索引鍵做為這些加權的特定字串的儲存機制。  
  
 <xref:System.Globalization.CompareInfo.GetSortKey%2A?displayProperty=nameWithType>方法傳回的執行個體<xref:System.Globalization.SortKey>反映指定的字串中的字元的區分文化特性對應的類別。 值<xref:System.Globalization.SortKey>物件是其索引鍵的資料，由<xref:System.Globalization.SortKey.KeyData%2A>屬性。 此索引鍵的資料是由一系列的字串、 特定文化特性的排序規則和使用者指定的比較選項進行編碼的位元組所組成。 使用的排序鍵比較包含對應的索引鍵資料在每個排序索引鍵中的位元比較。  例如，如果您藉由呼叫建立排序索引鍵<xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29>方法，其值為<xref:System.Globalization.CompareOptions.IgnoreCase?displayProperty=nameWithType>，使用的排序鍵的字串比較作業不區分大小寫。  
  
 建立字串的排序鍵之後，您藉由呼叫靜態比較排序鍵<xref:System.Globalization.SortKey.Compare%2A?displayProperty=nameWithType>方法。 這個方法會執行簡單的逐位元組比較，因此它的速度比<xref:System.String.Compare%2A?displayProperty=nameWithType>或<xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=nameWithType>方法。  

> [!NOTE]
> 您可以下載[排序權數資料表](https://www.microsoft.com/en-us/download/details.aspx?id=10921)，一組文字檔案包含有關在 Windows 作業系統中，排序和比較作業中使用的字元加權[預設 Unicode定序項目資料表](https://www.unicode.org/Public/UCA/latest/allkeys.txt)，排序權數資料表適用於 Linux 和 macOS。

## <a name="performance-considerations"></a>效能考量  
 執行字串比較，當<xref:System.Globalization.SortKey.Compare%2A>和<xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=nameWithType>方法會產生相同的結果，但它們以不同的案例為目標。  
  
 概括而言，<xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=nameWithType>方法會產生每個字串的排序鍵、 執行比較，然後捨棄的排序鍵，並傳回比較的結果。 不過，<xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=nameWithType>方法實際上不會產生整個排序索引鍵，以進行比較。 相反地，此方法會產生每個字串中的索引鍵的資料，每個文字項目 （也就是基底字元、 surrogate 字組或組合字元序列）。 方法接著會比較索引鍵對應的文字項目的資料。 一旦決定比較的最終結果，就會終止作業。 計算的排序索引鍵資訊，但沒有<xref:System.Globalization.SortKey>建立物件。 這項策略時實惠效能方面一次，比較這兩個字串，但會高度耗費資源，如果相同的字串比較的次數。  
  
 <xref:System.Globalization.SortKey.Compare%2A>方法需要產生<xref:System.Globalization.SortKey>針對每個字串，然後再執行比較的物件。 此策略會耗用大量效能的第一個比較，因為時間和投資以產生記憶體<xref:System.Globalization.SortKey>物件。 不過，它會變成符合經濟效益，如果相同的排序鍵比較的次數。  
  
 例如，假設您撰寫的應用程式，搜尋的字串為基礎的索引資料行符合指定的搜尋字串的資料列的資料庫資料表。 資料表包含數千個資料列，並且比較每個資料列中的索引的搜尋字串需要很長的時間。 因此，當應用程式儲存的資料列和其索引資料行，它也會產生，並專門用來提升搜尋效能資料行中儲存索引的排序索引鍵。 當應用程式搜尋目標資料列時，它會比較的索引字串，而不是比較索引字串的搜尋字串的排序索引鍵的搜尋字串的排序索引鍵。  
  
## <a name="security-considerations"></a>安全性考量  
 <xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=nameWithType>方法會傳回<xref:System.Globalization.SortKey>物件的值，根據指定的字串與<xref:System.Globalization.CompareOptions>值，以及與基礎相關聯的文化特性<xref:System.Globalization.CompareInfo>物件。 如果安全性決策是根據字串比較或大小寫變更而定，您應該使用<xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=nameWithType>方法而異的文化特性，以確保作業的行為一致，不論作業系統的文化特性設定為何。  
  
 您可以使用下列步驟來取得排序索引鍵：  
  
1.  擷取的文化特性而異<xref:System.Globalization.CultureInfo.InvariantCulture?displayProperty=nameWithType>屬性。  
  
2.  擷取<xref:System.Globalization.CompareInfo>而異的文化特性，從物件<xref:System.Globalization.CultureInfo.CompareInfo%2A?displayProperty=nameWithType>屬性。  
  
3.  呼叫 <xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=nameWithType> 方法。  
  
 使用的值<xref:System.Globalization.SortKey>物件是否相當於呼叫 Windows `LCMapString` LCMAP_SORTKEY 值的指定方法。 不過，對於<xref:System.Globalization.SortKey>物件中，使用英文字元的排序索引鍵前面韓文字元的排序索引鍵。  
  
 <xref:System.Globalization.SortKey> 物件可以序列化，但只限於，讓它們可以跨<xref:System.AppDomain>物件。 如果應用程式序列化<xref:System.Globalization.SortKey>物件時，應用程式必須重新產生所有排序索引鍵，新的.NET framework 版本時。  
  
 多個排序鍵的詳細資訊，請參閱 Unicode 技術標準 #10，"Unicode 定序演算法 」，在[Unicode 協會網站](https://go.microsoft.com/fwlink/?linkid=37123)。  
  
   
  
## Examples  
 下列範例會比較使用"EN-US"和"ES-ES"文化特性，以及"EN-US"和"ES-ES"傳統的文化特性字串"駱馬"。  
  
 [!code-cpp[System.Globalization.SortKey.Compare#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.SortKey.Compare/CPP/sortkey_compare.cpp#1)]
 [!code-csharp[System.Globalization.SortKey.Compare#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.SortKey.Compare/CS/sortkey_compare.cs#1)]
 [!code-vb[System.Globalization.SortKey.Compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.SortKey.Compare/VB/sortkey_compare.vb#1)]  
  
 下列範例示範如何使用<xref:System.Globalization.SortKey>類別來改善大量依賴排序和搜尋大型陣列的應用程式中的效能。 此範例會建立未排序的陣列名稱，在此情況下有 13 個元素。 接著會每個名稱的排序索引鍵儲存在平行陣列中，這會傳遞給<xref:System.Array.Sort%28System.Array%2CSystem.Array%29?displayProperty=nameWithType>方法。 結果是已排序的陣列。 此範例接著會搜尋三個字串的陣列。 每個搜尋字串，它會呼叫<xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=nameWithType>方法來擷取字串的排序索引鍵，然後再呼叫<xref:System.Array.FindIndex%2A?displayProperty=nameWithType>方法來擷取該陣列中的排序索引鍵的排序索引鍵的索引。 名稱和排序的索引鍵陣列是平行的因為傳回的索引也是您的索引中的名稱`names`陣列。  
  
 [!code-csharp[System.Globalization.SortKey.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.sortkey.class/cs/sortkey1.cs#1)]
 [!code-vb[System.Globalization.SortKey.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.sortkey.class/vb/sortkey1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Globalization.CompareInfo.GetSortKey(System.String,System.Globalization.CompareOptions)" />
    <altmember cref="P:System.Globalization.SortKey.KeyData" />
  </Docs>
  <Members>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (System.Globalization.SortKey sortkey1, System.Globalization.SortKey sortkey2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(class System.Globalization.SortKey sortkey1, class System.Globalization.SortKey sortkey2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.SortKey.Compare(System.Globalization.SortKey,System.Globalization.SortKey)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (sortkey1 As SortKey, sortkey2 As SortKey) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::Globalization::SortKey ^ sortkey1, System::Globalization::SortKey ^ sortkey2);" />
      <MemberSignature Language="F#" Value="static member Compare : System.Globalization.SortKey * System.Globalization.SortKey -&gt; int" Usage="System.Globalization.SortKey.Compare (sortkey1, sortkey2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sortkey1" Type="System.Globalization.SortKey" />
        <Parameter Name="sortkey2" Type="System.Globalization.SortKey" />
      </Parameters>
      <Docs>
        <param name="sortkey1">要比較的第一個排序鍵。</param>
        <param name="sortkey2">要比較的第二個排序鍵。</param>
        <summary>比較兩個排序鍵。</summary>
        <returns>帶正負號的整數，表示 <paramref name="sortkey1" /> 與 <paramref name="sortkey2" /> 之間的關聯性。  
  
 <list type="table"><listheader><term> 值 
 </term><description> 條件 
 </description></listheader><item><term> 小於零 
 </term><description><paramref name="sortkey1" /> 小於 <paramref name="sortkey2" />。  
  
 </description></item><item><term> 零 
 </term><description><paramref name="sortkey1" /> 等於 <paramref name="sortkey2" />。  
  
 </description></item><item><term> 大於零 
 </term><description><paramref name="sortkey1" /> 大於 <paramref name="sortkey2" />。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.SortKey.Compare%2A>方法會比較<xref:System.Globalization.SortKey.KeyData%2A>的屬性`sortkey1`和`sortkey2`參數。 方法會產生相同的結果為<xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=nameWithType>方法。  
  
 如需詳細資訊<xref:System.Globalization.SortKey.Compare%2A>方法，並比較的排序鍵，請參閱<xref:System.Globalization.SortKey>類別主題。  
  
   
  
## Examples  
 下列程式碼範例會比較使用兩個字串<xref:System.Globalization.SortKey.Compare%2A>方法，並對等項目<xref:System.Globalization.CompareInfo.Compare%28System.String%2CSystem.String%2CSystem.Globalization.CompareOptions%29?displayProperty=nameWithType>方法。  
  
 [!code-csharp[sys.glob.sortkey.compare#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.sortkey.compare/cs/skcmp.cs#1)]
 [!code-vb[sys.glob.sortkey.compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.sortkey.compare/vb/skcmp.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="sortkey1" /> 或 <paramref name="sortkey2" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.SortKey.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="sortKey.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">要與目前 <see cref="T:System.Globalization.SortKey" /> 物件比較的物件。</param>
        <summary>判斷指定的物件是否等於目前的 <see cref="T:System.Globalization.SortKey" /> 物件。</summary>
        <returns>如果 <paramref name="value" /> 參數等於目前的 <see cref="T:System.Globalization.SortKey" /> 物件，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 兩個<xref:System.Globalization.SortKey>物件會被視為相等，如果其<xref:System.Globalization.SortKey.KeyData%2A>屬性相等。  
  
 這個方法會覆寫 <xref:System.Object.Equals%2A?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下列程式碼範例顯示的結果<xref:System.Globalization.SortKey.Equals%2A>相較於不同<xref:System.Globalization.SortKey>物件。  
  
 [!code-cpp[System.Globalization.SortKey.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.SortKey.Equals/CPP/sortkey_equals.cpp#1)]
 [!code-csharp[System.Globalization.SortKey.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.SortKey.Equals/CS/sortkey_equals.cs#1)]
 [!code-vb[System.Globalization.SortKey.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.SortKey.Equals/VB/sortkey_equals.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="value" /> 為 <see langword="null" />。</exception>
        <altmember cref="M:System.Object.Equals(System.Object)" />
        <altmember cref="P:System.Globalization.SortKey.KeyData" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.SortKey.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="sortKey.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>做為目前 <see cref="T:System.Globalization.SortKey" /> 物件的雜湊函式，亦即適用於雜湊演算法和資料結構 (如雜湊表)。</summary>
        <returns>目前 <see cref="T:System.Globalization.SortKey" /> 物件的雜湊碼。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會為兩個物件產生相同雜湊程式碼，這兩個物件根據 <xref:System.Globalization.SortKey.Equals%2A> 方法是相等的物件。  
  
 這個方法會覆寫 <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="M:System.Globalization.SortKey.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="KeyData">
      <MemberSignature Language="C#" Value="public virtual byte[] KeyData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] KeyData" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.SortKey.KeyData" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property KeyData As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property cli::array &lt;System::Byte&gt; ^ KeyData { cli::array &lt;System::Byte&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyData : byte[]" Usage="System.Globalization.SortKey.KeyData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得表示目前 <see cref="T:System.Globalization.SortKey" /> 物件的位元組陣列。</summary>
        <value>表示目前 <see cref="T:System.Globalization.SortKey" /> 物件的位元組陣列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需使用所傳回的資料<xref:System.Globalization.SortKey.KeyData%2A>屬性中比較字串，請參閱<xref:System.Globalization.SortKey>類別主題。  
  
   
  
## Examples  
 下列程式碼範例會顯示為原始字串的相等字串和區分大小寫的排序索引鍵和不區分大小寫的排序索引鍵的索引鍵資料。  
  
 [!code-csharp[sys.glob.sortkey.tostring#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.sortkey.tostring/cs/ts.cs#1)]
 [!code-vb[sys.glob.sortkey.tostring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.sortkey.tostring/vb/ts.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OriginalString">
      <MemberSignature Language="C#" Value="public virtual string OriginalString { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OriginalString" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.SortKey.OriginalString" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property OriginalString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ OriginalString { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OriginalString : string" Usage="System.Globalization.SortKey.OriginalString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得用來建立目前 <see cref="T:System.Globalization.SortKey" /> 物件的原始字串。</summary>
        <value>用以建立目前 <see cref="T:System.Globalization.SortKey" /> 物件的原始字串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例會顯示為原始字串的相等字串和區分大小寫的排序索引鍵和不區分大小寫的排序索引鍵的索引鍵資料。  
  
 [!code-csharp[sys.glob.sortkey.tostring#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.sortkey.tostring/cs/ts.cs#1)]
 [!code-vb[sys.glob.sortkey.tostring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.sortkey.tostring/vb/ts.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.SortKey.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="sortKey.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回表示目前 <see cref="T:System.Globalization.SortKey" /> 物件的字串。</summary>
        <returns>代表目前 <see cref="T:System.Globalization.SortKey" /> 物件的字串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 傳回值是"SortKey-"的字串串連、 文化特性識別項和比較選項的目前<xref:System.Globalization.SortKey>物件和值<xref:System.Globalization.SortKey.OriginalString%2A>屬性。  
  
 這個方法會覆寫 <xref:System.Object.ToString%2A?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下列程式碼範例會顯示原始的字串，所產生的字串<xref:System.Globalization.SortKey.ToString%2A>區分大小寫和區分大小寫的排序鍵，和區分大小寫和區分大小寫的排序索引鍵的按鍵資料的方法。  
  
 [!code-csharp[sys.glob.sortkey.tostring#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.sortkey.tostring/cs/ts.cs#1)]
 [!code-vb[sys.glob.sortkey.tostring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.sortkey.tostring/vb/ts.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.ToString" />
      </Docs>
    </Member>
  </Members>
</Type>