<Type Name="CharUnicodeInfo" FullName="System.Globalization.CharUnicodeInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f7091a6d43b3cc99adf350405952ae5054ad9b44" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39927033" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class CharUnicodeInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit CharUnicodeInfo extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.CharUnicodeInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class CharUnicodeInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class CharUnicodeInfo abstract sealed" />
  <TypeSignature Language="F#" Value="type CharUnicodeInfo = class" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>擷取 Unicode 字元的相關資訊。 這個類別無法被繼承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [Unicode 標準](http://go.microsoft.com/fwlink/?linkid=37123)定義數個 Unicode 字元分類。 例如，字元可分類為大寫字母、 小寫字母、 十進位數字、 字母數字、 段落分隔符號、 數學符號或貨幣符號。 您的應用程式可使用的字元類別，來管理字串為基礎的作業，例如剖析或擷取子字串與規則運算式。 <xref:System.Globalization.UnicodeCategory>列舉型別定義的可能字元類別。  
  
 您使用<xref:System.Globalization.CharUnicodeInfo>類別來取得<xref:System.Globalization.UnicodeCategory>特定字元的值。 <xref:System.Globalization.CharUnicodeInfo>類別會定義傳回下列的 Unicode 字元值的方法：  
  
-   字元或 surrogate 字組所屬的特定類別。 傳回的值屬於<xref:System.Globalization.UnicodeCategory>列舉型別。  
  
-   數值。 僅適用於數字字元，包括分數、 下標、 上標、 羅馬數字、 貨幣分子，環狀數字和指令碼特定數字。  
  
-   數字值。 適用於可以結合其他數字的字元，以表示整個數字系統中的數字字元。  
  
-   十進位數字值。 僅適用於代表十進位 (基底 10) 系統中的十進位數字字元。 十進位數字可以是其中一個十位數，從 0 到 9。 成員，這些字元出現<xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType>類別目錄。  
  
 颾魤 ㄛ<xref:System.Globalization.CharUnicodeInfo>類別由數項其他的.NET Framework 型別和依賴字元分類的方法在內部使用。 它們包括：  
  
-   <xref:System.Globalization.StringInfo>類別，而不是單一字元字串中的文字項目與搭配運作。  
  
-   多載<xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType>方法，這個方法會判斷字元或 surrogate 字組所屬的類別。  
  
-   [字元類別](~/docs/standard/base-types/character-classes-in-regular-expressions.md)辨識<xref:System.Text.RegularExpressions.Regex>，.NET Framework 規則運算式引擎。  
  
 當應用程式中使用這個類別，請記住下列程式設計考量使用<xref:System.Char>型別。 類型可能很難使用，以及字串比較適合使用通常用於表示語言的內容。  
  
-   A<xref:System.Char>物件一律不會對應到單一字元。 雖然<xref:System.Char>類型代表單一的 16 位元值，某些字元 （例如簇和 surrogate 字組） 包含兩個或多個 utf-16 字碼單位。 如需詳細資訊，請參閱 「 Char 物件和 Unicode 字元 」 中<xref:System.String>類別。  
  
-   也有彈性的"character"的概念。 字元常被視為圖像 （glyph），但許多圖像 （glyph） 需要多個字碼指標。 比方說，可以是 ä 表示兩個字碼元素 （"a"加上 U + 0308，也就是結合 diaeresis）、 或的單一字碼指標 （「 ä 」 或 U + 00A4）。 某些語言具有許多的字母、 字元，以及需要多個字碼指標，會造成混淆，語言內容的表示法中的字符。 例如，沒有 ΰ （U + 03B0、 希臘文小寫字母二十個太空站 dialytika 與 tonos），但沒有任何對等大寫的字母。 寫這類值時，就只會擷取原始值。  
  
   
  
## Examples  
 下列程式碼範例顯示每個字元的各種不同的方法所傳回的值。  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="usage">
      <para>可辨識的字元和其所屬的特定類別由 Unicode 標準所定義，並可以從 Unicode 標準版本變更為另一個。特定版本的.NET Framework 中的字元分類根據 Unicode Standard，不論基礎.NET Framework 執行所在的作業系統版本。下表列出自.NET Framework 版本為[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]和用來分類字元的 Unicode 標準的版本。 <list type="table"><listheader><term> .NET framework 版本</term><description> Unicode 標準版本</description></listheader><item><term> [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] </term><description> [Unicode 標準、 5.0.0 版](https://www.unicode.org/versions/Unicode5.0.0/)</description></item><item><term> [!INCLUDE[net_v45](~/includes/net-v45-md.md)] </term><description> [Unicode Standard，Version 5.0.0](https://www.unicode.org/versions/Unicode5.0.0/) </description></item><item><term> [!INCLUDE[net_v451](~/includes/net-v451-md.md)] </term><description> [Unicode 標準、 版本 5.0.0](https://www.unicode.org/versions/Unicode5.0.0/) </description></item><item><term> [!INCLUDE[net_v452](~/includes/net-v452-md.md)] </term><description> [的 Unicode 標準、 5.0.0 版](https://www.unicode.org/versions/Unicode5.0.0/)</description></item><item><term> [!INCLUDE[net_v46](~/includes/net-v46-md.md)] </term><description> [Unicode 標準、 6.3.0 版](https://www.unicode.org/versions/Unicode6.3.0/)</description></item><item><term>[!INCLUDE[net_v461](~/includes/net-v461-md.md)] </term><description> [Unicode 標準、 6.3.0 版](https://www.unicode.org/versions/Unicode6.3.0/)</description></item><item><term> [!INCLUDE[net_v462](~/includes/net-v462-md.md)] </term><description> [The Unicode Standard，Version 8.0.0](https://www.unicode.org/versions/Unicode8.0.0/) </description></item></list> Unicode 標準的每個版本包括自舊版以來對 Unicode 字元資料庫資訊。                            使用 Unicode 字元資料庫<see cref="T:System.Globalization.CharUnicodeInfo" />類別分類的字元。</para>
    </block>
    <altmember cref="T:System.Globalization.UnicodeCategory" />
    <altmember cref="N:System.Text" />
  </Docs>
  <Members>
    <MemberGroup MemberName="GetDecimalDigitValue">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>取得數字 Unicode 字元的十進位數值。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDecimalDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDecimalDigitValue (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDecimalDigitValue(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDecimalDigitValue (ch As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDecimalDigitValue(char ch);" />
      <MemberSignature Language="F#" Value="static member GetDecimalDigitValue : char -&gt; int" Usage="System.Globalization.CharUnicodeInfo.GetDecimalDigitValue ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">要取得十進位數值的 Unicode 字元。</param>
        <summary>取得指定之數字字元的十進位數值。</summary>
        <returns>指定之數字字元的十進位數值。  
  
-或- 
如果指定的字元不是十進位數字，則為 -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法轉換為其相等的整數值代表十進位數字字元。 小數位數是個字元<xref:System.Globalization.UnicodeCategory.DecimalDigitNumber>可以代表其中一個編號系統，從零到九十進位 (基底 10) 中的十個位數的類別。 它包含字元，例如 U + 0030 （數字零） 到 U + 0039 （數字 9 個），U + 0660 （阿拉伯數字零） 到 U + 0669 （阿拉伯數字 9 個），U + U+07C0 （NKO 數字零） 到 U + 07C 9 （NKO 數字 9 個） 和 U + 1040 （緬甸數字零） 到 U + 1049年 （緬甸數字、 包含九部）。  
  
 如需 Unicode 字元的詳細資訊，請參閱[Unicode 標準](http://go.microsoft.com/fwlink/?linkid=37123)。  
  
   
  
## Examples  
 下列程式碼範例顯示每個字元的各種不同的方法所傳回的值。  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDecimalDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDecimalDigitValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDecimalDigitValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDecimalDigitValue (s As String, index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDecimalDigitValue(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetDecimalDigitValue : string * int -&gt; int" Usage="System.Globalization.CharUnicodeInfo.GetDecimalDigitValue (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">
          <see cref="T:System.String" />，包含要取得十進位數值的 Unicode 字元。</param>
        <param name="index">要取得十進位數值之 Unicode 字元的索引。</param>
        <summary>取得數字字元的十進位數值，其位於指定字串的指定索引處。</summary>
        <returns>數字字元的十進位數值，其位於指定字串的指定索引處。  
  
-或- 
如果位於指定字串之指定索引處的字元不是十進位數字，則為 -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法轉換為其相等的整數值代表十進位數字字元。 小數位數是個字元<xref:System.Globalization.UnicodeCategory.DecimalDigitNumber>可以代表其中一個編號系統，從零到九十進位 (基底 10) 中的十個位數的類別。 它包含字元，例如 U + 0030 （數字零） 到 U + 0039 （數字 9 個），U + 0660 （阿拉伯數字零） 到 U + 0669 （阿拉伯數字 9 個），U + U+07C0 （NKO 數字零） 到 U + 07C 9 （NKO 數字 9 個） 和 U + 1040 （緬甸數字零） 到 U + 1049年 （緬甸數字、 包含九部）。  
  
 如需 Unicode 字元的詳細資訊，請參閱[Unicode 標準](http://go.microsoft.com/fwlink/?linkid=37123)。  
  
   
  
## Examples  
 下列程式碼範例顯示每個字元的各種不同的方法所傳回的值。  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 在 <paramref name="s" /> 的有效索引範圍之外。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDigitValue">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>取得數字 Unicode 字元的數值。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDigitValue (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDigitValue(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDigitValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDigitValue (ch As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDigitValue(char ch);" />
      <MemberSignature Language="F#" Value="static member GetDigitValue : char -&gt; int" Usage="System.Globalization.CharUnicodeInfo.GetDigitValue ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">要取得數值的 Unicode 字元。</param>
        <summary>取得指定之數字字元的數值。</summary>
        <returns>指定之數字字元的數值。  
  
-或- 
如果指定的字元不是數字，則為 -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此屬性，可用來當做數字的數字字元只適用於數字值。 數字是可以結合其他數字來表示整個數字系統中的數字字元。  
  
 如需有關 Unicode 字元的詳細資訊，請參閱[Unicode 標準](http://go.microsoft.com/fwlink/?linkid=37123)。  
  
   
  
## Examples  
 下列程式碼範例顯示每個字元的各種不同的方法所傳回的值。  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDigitValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDigitValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDigitValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDigitValue (s As String, index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDigitValue(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetDigitValue : string * int -&gt; int" Usage="System.Globalization.CharUnicodeInfo.GetDigitValue (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">
          <see cref="T:System.String" />，包含要取得數值的 Unicode 字元。</param>
        <param name="index">要取得數值之 Unicode 字元的索引。</param>
        <summary>取得數字字元的數值，其位於指定字串的指定索引處。</summary>
        <returns>數字字元的數值，其位於指定字串的指定索引處。  
  
-或- 
如果位於指定字串之指定索引處的字元不是數字，則為 -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此屬性，可用來當做數字的數字字元只適用於數字值。 數字是可以結合其他數字來表示整個數字系統中的數字字元。  
  
 如需有關 Unicode 字元的詳細資訊，請參閱[Unicode 標準](http://go.microsoft.com/fwlink/?linkid=37123)。  
  
   
  
## Examples  
 下列程式碼範例顯示每個字元的各種不同的方法所傳回的值。  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 在 <paramref name="s" /> 的有效索引範圍之外。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetNumericValue">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>取得與 Unicode 字元關聯的數值。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetNumericValue">
      <MemberSignature Language="C#" Value="public static double GetNumericValue (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetNumericValue(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNumericValue (ch As Char) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double GetNumericValue(char ch);" />
      <MemberSignature Language="F#" Value="static member GetNumericValue : char -&gt; double" Usage="System.Globalization.CharUnicodeInfo.GetNumericValue ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">要取得數值的 Unicode 字元。</param>
        <summary>取得與指定字元關聯的數值。</summary>
        <returns>與指定字元關聯的數值。  
  
-或- 
如果指定的字元不是數字字元，則為 -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 數值為僅適用於數字字元，包括分數、 下標、 上標、 羅馬數字、 貨幣分子，環狀數字和指令碼特定數字的 Unicode 字元屬性。 如需有關 Unicode 字元的詳細資訊，請參閱[Unicode 標準](http://go.microsoft.com/fwlink/?linkid=37123)。  
  
 <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.Char%29>方法會假設`ch`對應至單一語言的字元，並檢查該字元是否可以轉換成十進位數字。 不過，某些 Unicode 標準中的數字都由兩個<xref:System.Char>組成 surrogate 字組的物件。 比方說，編號系統 Aegean 字碼指標到 U + 10133 U + 10107 所組成。 下列範例會使用<xref:System.Char.ConvertFromUtf32%2A>方法具現化代表 AEGEAN 的第一個的字串。 做為範例所示，從輸出<xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.Char%29>方法會傳回-1，如果將它傳遞為高 surrogate 或低 surrogate，此字元。  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetNumericValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/cs/getnumericvalue1.cs#2)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetNumericValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/vb/getnumericvalue1.vb#2)]  
  
   
  
## Examples  
 下列程式碼範例顯示每個字元的各種不同的方法所傳回的值。  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNumericValue">
      <MemberSignature Language="C#" Value="public static double GetNumericValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetNumericValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNumericValue (s As String, index As Integer) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double GetNumericValue(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetNumericValue : string * int -&gt; double" Usage="System.Globalization.CharUnicodeInfo.GetNumericValue (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">
          <see cref="T:System.String" />，包含要取得數值的 Unicode 字元。</param>
        <param name="index">要取得數值之 Unicode 字元的索引。</param>
        <summary>取得數值，該值與指定字串之指定索引處的字元關聯。</summary>
        <returns>數值，該值與指定字串之指定索引處的字元關聯。  
  
-或- 
如果位於指定字串之指定索引處的字元不是數字字元，則為 -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 數值為僅適用於數字字元，包括分數、 下標、 上標、 羅馬數字、 貨幣分子，環狀數字和指令碼特定數字的 Unicode 字元屬性。 如需有關 Unicode 字元的詳細資訊，請參閱[Unicode 標準](http://go.microsoft.com/fwlink/?linkid=37123)。  
  
 如果<xref:System.Char>位置處的物件`index`的第一個的字元是有效的 surrogate 字組，<xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.String%2CSystem.Int32%29>方法會判斷 surrogate 字組的數字，會形成，若是如此，傳回其數字的值。 比方說，編號系統 Aegean 字碼指標到 U + 10133 U + 10107 所組成。 下列範例會使用<xref:System.Char.ConvertFromUtf32%2A>方法具現化代表 Aegean 的每個數字的字串。 做為範例所示，從輸出<xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.String%2CSystem.Int32%29>傳遞 Aegean 的數字的高 surrogate，方法會傳回正確的數字值。 不過，如果它未通過低 surrogate，它會考量之低 surrogate 以隔離並傳回-1。  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetNumericValue#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/cs/getnumericvalue1.cs#3)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetNumericValue#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/vb/getnumericvalue1.vb#3)]  
  
   
  
## Examples  
 下列程式碼範例顯示每個字元的各種不同的方法所傳回的值。  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 在 <paramref name="s" /> 的有效索引範圍之外。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUnicodeCategory">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>取得 Unicode 字元的 Unicode 分類。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (ch As Char) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(char ch);" />
      <MemberSignature Language="F#" Value="static member GetUnicodeCategory : char -&gt; System.Globalization.UnicodeCategory" Usage="System.Globalization.CharUnicodeInfo.GetUnicodeCategory ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">要取得 Unicode 分類的 Unicode 字元。</param>
        <summary>取得指定之字元的 Unicode 分類。</summary>
        <returns>
          <see cref="T:System.Globalization.UnicodeCategory" /> 值，指出指定之字元的分類。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Unicode 字元分成類別。 字元類別是其中一個屬性。 例如，字元可能是大寫字母、 小寫字母、 十進位數字、 字母數字、 連接子標點符號、 數學符號或貨幣符號。 <xref:System.Globalization.UnicodeCategory>類別會傳回 Unicode 字元分類。 如需有關 Unicode 字元的詳細資訊，請參閱[Unicode 標準](http://go.microsoft.com/fwlink/?linkid=37123)。  
  
 <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A>方法會假設`ch`對應至單一語言的字元，並傳回其分類。 這表示，surrogate 字組，它會傳回<xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType>而不是 surrogate 所屬的類別。 比方說，Ugaritic 字母會佔用字碼指標 10380 u+0000 到 U + 1039F。 下列範例會使用<xref:System.Char.ConvertFromUtf32%2A>方法具現化字串，表示 UGARITIC 字母 ALPA (U + 10380)，也就是 Ugaritic 字母的第一個字母。 做為範例所示，從輸出<xref:System.Char.IsNumber%28System.Char%29>方法會傳回`false`如果它傳遞之高 surrogate 或低 surrogate，此字元。  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/cs/getunicodecategory1.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/vb/getunicodecategory1.vb#1)]  
  
 請注意，<xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType>不一定會傳回相同<xref:System.Globalization.UnicodeCategory>的值<xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType>方法時做為參數傳遞特定的字元。 <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType>方法設計用來反映目前的 Unicode 標準版本。 相反地，雖然<xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType>方法通常會反映目前的 Unicode 標準版本，它可能會傳回一個字元類別根據舊版的標準，或它可能會從目前的標準，以傳回不同的類別目錄保留回溯相容性。  
  
   
  
## Examples  
 下列程式碼範例顯示每個字元的各種不同的方法所傳回的值。  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.UnicodeCategory" />
      </Docs>
    </Member>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (int codePoint);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(int32 codePoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (codePoint As Integer) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(int codePoint);" />
      <MemberSignature Language="F#" Value="static member GetUnicodeCategory : int -&gt; System.Globalization.UnicodeCategory" Usage="System.Globalization.CharUnicodeInfo.GetUnicodeCategory codePoint" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codePoint" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="codePoint">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (s As String, index As Integer) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetUnicodeCategory : string * int -&gt; System.Globalization.UnicodeCategory" Usage="System.Globalization.CharUnicodeInfo.GetUnicodeCategory (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">
          <see cref="T:System.String" />，包含要取得 Unicode 分類的 Unicode 字元。</param>
        <param name="index">要取得 Unicode 分類之 Unicode 字元的索引。</param>
        <summary>取得字元的 Unicode 分類，其位於指定字串的指定索引處。</summary>
        <returns>
          <see cref="T:System.Globalization.UnicodeCategory" /> 值，指出位於指定字串之指定索引處的字元分類。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Unicode 字元分成類別。 字元類別是其中一個屬性。 例如，字元可能是大寫字母、 小寫字母、 十進位數字、 字母數字、 連接子標點符號、 數學符號或貨幣符號。 <xref:System.Globalization.UnicodeCategory>類別會傳回 Unicode 字元分類。 如需有關 Unicode 字元的詳細資訊，請參閱[Unicode 標準](http://go.microsoft.com/fwlink/?linkid=37123)。  
  
 如果<xref:System.Char>位置處的物件`index`是有效的 surrogate 字組，第一個字元<xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29>方法會傳回 Unicode 分類，而不是傳回之 surrogate 字組<xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType>。 比方說，Ugaritic 字母會佔用字碼指標 10380 u+0000 到 U + 1039F。 下列範例會使用<xref:System.Char.ConvertFromUtf32%2A>方法具現化字串，表示 UGARITIC 字母 ALPA (U + 10380)，也就是 Ugaritic 字母的第一個字母。 做為範例所示，從輸出<xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29>方法會傳回<xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=nameWithType>如果網域控制站會傳遞之高 surrogate 的字元，這表示它會考慮 surrogate 字組。 不過，如果它未通過低 surrogate，它會考慮只在隔離的低 surrogate，並傳回<xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType>。  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/cs/getunicodecategory1.cs#2)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/vb/getunicodecategory1.vb#2)]  
  
 請注意，<xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType>方法不一定會傳回相同<xref:System.Globalization.UnicodeCategory>的值<xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType>方法時做為參數傳遞特定的字元。 <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType>方法設計用來反映目前的 Unicode 標準版本。 相反地，雖然<xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType>方法通常會反映目前的 Unicode 標準版本，它可能會傳回一個字元類別根據舊版的標準，或它可能會從目前的標準，以傳回不同的類別目錄保留回溯相容性。  
  
   
  
## Examples  
 下列程式碼範例顯示每個字元的各種不同的方法所傳回的值。  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 在 <paramref name="s" /> 的有效索引範圍之外。</exception>
        <altmember cref="T:System.Globalization.UnicodeCategory" />
      </Docs>
    </Member>
  </Members>
</Type>