<Type Name="NumberFormatInfo" FullName="System.Globalization.NumberFormatInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a4056ba8c53ff8a2667a467c531c16c69a54c122" /><Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="11/27/2018" /><Meta Name="ms.locfileid" Value="52362575" /></Metadata><TypeSignature Language="C#" Value="public sealed class NumberFormatInfo : ICloneable, IFormatProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit NumberFormatInfo extends System.Object implements class System.ICloneable, class System.IFormatProvider" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.NumberFormatInfo" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class NumberFormatInfo&#xA;Implements ICloneable, IFormatProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class NumberFormatInfo sealed : ICloneable, IFormatProvider" />
  <TypeSignature Language="F#" Value="type NumberFormatInfo = class&#xA;    interface ICloneable&#xA;    interface IFormatProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormatProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供文化特性特定的格式和剖析數值資訊。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo>類別包含您格式化和剖析數值時，會使用的特定文化特性資訊。 這項資訊包括貨幣符號，小數點符號、 群組分隔符號，正負號的符號。  
  
-   [NumberFormatInfo 物件具現化](#Instantiating)  
  
    -   [目前的文化特性](#Instantiating_Current)  
  
    -   [而異的文化特性](#Instantiating_Invariant)  
  
    -   [特定文化特性](#Instantiating_Specific)  
  
    -   [中性文化特性](#Instantiating_Neutral)  
  
-   [NumberFormatInfo 和動態資料](#dynamic)  
  
-   [IFormatProvider、 NumberFormatInfo，和數字格式化](#formatProvider)  
  
-   [格式字串和 NumberFormatInfo 屬性](#properties)  
  
-   [修改 NumberFormatInfo 屬性](#modifying)  
  
    -   [修改的貨幣符號和模式](#currency)  
  
    -   [格式化身分證號碼](#id)  
  
-   [剖析數值字串](#parsing)  
  
    -   [剖析使用者字串](#ParseUser)  
  
    -   [序列化和還原序列化的數值資料](#ParseSerial)  
  
<a name="Instantiating"></a>   
## <a name="instantiating-a-numberformatinfo-object"></a>NumberFormatInfo 物件具現化  
 您可以具現化<xref:System.Globalization.NumberFormatInfo>物件，表示目前的文化特性、 文化特性而異，特定的文化特性或中性文化特性的格式化慣例。  
  
<a name="Instantiating_Current"></a>   
## <a name="instantiating-a-numberformatinfo-object-for-the-current-culture"></a>目前的文化特性的 NumberFormatInfo 物件具現化  
 您可以具現化<xref:System.Globalization.NumberFormatInfo>目前執行緒文化特性，在下列任一方式的物件。 在每個案例中，傳回<xref:System.Globalization.NumberFormatInfo>物件是唯讀的。  
  
-   藉由擷取<xref:System.Globalization.CultureInfo>物件，表示目前執行緒文化特性，從<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>屬性，並擷取<xref:System.Globalization.CultureInfo>物件從其<xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=nameWithType>屬性。  
  
-   藉由擷取<xref:System.Globalization.NumberFormatInfo>所傳回的物件`static`(`Shared`在 Visual Basic 中)<xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>屬性。  
  
-   藉由呼叫<xref:System.Globalization.NumberFormatInfo.GetInstance%2A>方法使用<xref:System.Globalization.CultureInfo>物件，表示目前的文化特性。  
  
 下列範例會使用下列三種方式來建立<xref:System.Globalization.NumberFormatInfo>物件，代表目前的文化特性的格式化慣例。 它也會擷取的值<xref:System.Globalization.NumberFormatInfo.IsReadOnly%2A>來說明每個物件是唯讀的屬性。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class.Instantiate#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/cs/instantiate1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class.Instantiate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/vb/instantiate1.vb#1)]  
  
 您可以建立可寫入<xref:System.Globalization.NumberFormatInfo>物件，表示目前執行緒文化特性的慣例，在下列任一方式：  
  
-   藉由擷取<xref:System.Globalization.NumberFormatInfo>物件的方式說明在先前的程式碼範例中，並呼叫任一<xref:System.Globalization.NumberFormatInfo.Clone%2A>方法在傳回<xref:System.Globalization.NumberFormatInfo>物件。 這會建立一份原始<xref:System.Globalization.NumberFormatInfo>物件，不同之處在於其<xref:System.Globalization.NumberFormatInfo.IsReadOnly%2A>屬性是`false`。  
  
-   藉由呼叫<xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType>方法用來建立<xref:System.Globalization.CultureInfo>物件，代表目前的文化特性，並接著使用及其<xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=nameWithType>屬性，以擷取<xref:System.Globalization.NumberFormatInfo>物件。  
  
 下列範例說明這兩種方式，具現化<xref:System.Globalization.NumberFormatInfo>物件，並顯示的值及其<xref:System.Globalization.NumberFormatInfo.IsReadOnly%2A>來說明物件不是唯讀的屬性。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class.Instantiate#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/cs/instantiate2.cs#2)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class.Instantiate#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/vb/instantiate2.vb#2)]  
  
 請注意，Windows 作業系統允許使用者覆寫的一些<xref:System.Globalization.NumberFormatInfo>屬性值中數值的格式化和剖析作業透過使用**地區和語言**控制台 中的項目。 比方說，的使用者文化特性是英文 （美國） 可能會選擇要顯示為 1.1 美元的貨幣值，而不是預設值為 $1.1。 <xref:System.Globalization.NumberFormatInfo>物件中所討論的方式擷取先前所有反映這些使用者覆寫。 如果這不需要，您可以建立<xref:System.Globalization.NumberFormatInfo>不會反映使用者覆寫的物件 (同時為讀取/寫入，而非唯讀狀態) 藉由呼叫<xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType>建構函式，並提供值為`false`如`useUserOverride`引數。 下列範例說明系統目前文化特性是英文 （美國） 和其貨幣符號已從預設的 $ 變更美元。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class.Instantiate#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/cs/instantiate3.cs#3)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class.Instantiate#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/vb/instantiate3.vb#3)]  
  
 如果<xref:System.Globalization.CultureInfo.UseUserOverride%2A?displayProperty=nameWithType>屬性設定為`true`，屬性<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>， <xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=nameWithType>，和<xref:System.Globalization.CultureInfo.TextInfo%2A?displayProperty=nameWithType>也都擷取自使用者設定。 如果使用者設定都與相關聯的文化特性不相容<xref:System.Globalization.CultureInfo>物件 (例如，如果所選行事曆不是其中一個列出的行事曆<xref:System.Globalization.CultureInfo.OptionalCalendars%2A>屬性)，結果的方法和屬性的值未定義。  
  
<a name="Instantiating_Invariant"></a>   
## <a name="instantiating-a-numberformatinfo-object-for-the-invariant-culture"></a>具現化的文化特性而異的 NumberFormatInfo 物件  
 文化特性而異表示不區分文化特性的文化特性。 它採用有關英文的語言，但不是能在任何特定英文國家/地區。 雖然特定文化特性的資料可以是動態的而且能夠變更以反映新的文化特性慣例或使用者的喜好設定，而異的文化特性的資料不會變更。 A<xref:System.Globalization.NumberFormatInfo>物件，表示不區分文化特性的格式化慣例可供進行格式化的作業的結果字串應該因文化特性。  
  
 您可以具現化<xref:System.Globalization.NumberFormatInfo>物件，表示不區分文化特性的格式化慣例如下：  
  
-   所擷取的值<xref:System.Globalization.NumberFormatInfo.InvariantInfo%2A>屬性。 傳回<xref:System.Globalization.NumberFormatInfo>物件是唯讀的。  
  
-   所擷取的值<xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=nameWithType>屬性從<xref:System.Globalization.CultureInfo>所傳回的物件<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>屬性。 傳回<xref:System.Globalization.NumberFormatInfo>物件是唯讀的。  
  
-   藉由呼叫無參數<xref:System.Globalization.NumberFormatInfo.%23ctor%2A>類別建構函式。 傳回的 <xref:System.Globalization.NumberFormatInfo> 物件是讀取/寫入。  
  
 下列範例所使用的是每一種方法來具現化<xref:System.Globalization.NumberFormatInfo>物件，表示文化特性而異。 則表示物件是唯讀的  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class.Instantiate#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/cs/instantiate4.cs#4)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class.Instantiate#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/vb/instantiate4.vb#4)]  
  
<a name="Instantiating_Specific"></a>   
## <a name="instantiating-a-numberformatinfo-object-for-a-specific-culture"></a>特定文化特性的 NumberFormatInfo 物件具現化  
 特定文化特性代表特定國家/地區中使用的語言。 例如，EN-US 代表美國境內的英文語言的特定文化特性而 en CA，代表加拿大英文語言特定文化特性。 您可以具現化<xref:System.Globalization.NumberFormatInfo>物件，代表特定文化特性的格式化慣例如下：  
  
-   藉由呼叫<xref:System.Globalization.CultureInfo.GetCultureInfo%28System.String%29?displayProperty=nameWithType>方法，並擷取傳回的值<xref:System.Globalization.CultureInfo>物件的<xref:System.Globalization.CultureInfo.NumberFormat%2A>屬性。 傳回<xref:System.Globalization.NumberFormatInfo>物件是唯讀的。  
  
-   藉由傳遞<xref:System.Globalization.CultureInfo>代表的文化特性的物件其<xref:System.Globalization.NumberFormatInfo>物件您想要擷取靜態<xref:System.Globalization.NumberFormatInfo.GetInstance%2A>方法。 傳回的 <xref:System.Globalization.NumberFormatInfo> 物件是讀取/寫入。  
  
-   藉由呼叫<xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType>方法，並擷取傳回的值<xref:System.Globalization.CultureInfo>物件的<xref:System.Globalization.CultureInfo.NumberFormat%2A>屬性。 傳回的 <xref:System.Globalization.NumberFormatInfo> 物件是讀取/寫入。  
  
-   透過呼叫其中一個<xref:System.Globalization.CultureInfo.%23ctor%2A?displayProperty=nameWithType>類別建構函式和擷取所傳回的值<xref:System.Globalization.CultureInfo>物件的<xref:System.Globalization.CultureInfo.NumberFormat%2A>屬性。 傳回的 <xref:System.Globalization.NumberFormatInfo> 物件是讀取/寫入。  
  
 下列範例會使用下列四種方式來建立<xref:System.Globalization.NumberFormatInfo>反映出印尼文 （印尼） 文化特性的格式化慣例的物件。 它也會指出每個物件是否為唯讀。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class.Instantiate#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/cs/instantiate5.cs#5)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class.Instantiate#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/vb/instantiate5.vb#5)]  
  
<a name="Instantiating_Neutral"></a>   
## <a name="instantiating-a-numberformatinfo-object-for-a-neutral-culture"></a>中性文化特性的 NumberFormatInfo 物件具現化  
 中性文化特性表示文化特性或語言無關的國家/地區。 它通常是一或多個特定的文化特性的父代。 比方說，fr 是法文的語言和父代為 FR-FR 文化特性的中性文化特性。 您建立<xref:System.Globalization.NumberFormatInfo>物件，代表中性文化特性的格式化慣例，在您建立的相同方式<xref:System.Globalization.NumberFormatInfo>物件，代表特定文化特性的格式化慣例。  
  
> [!NOTE]
>  在 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]和更早版本，嘗試擷取<xref:System.Globalization.NumberFormatInfo>物件會反映中性文化特性的格式化慣例，會擲回<xref:System.NotSupportedException>例外狀況。  
  
 不過，因為它是獨立於特定國家/地區，中性文化特性缺少特定文化特性格式資訊。 而不是填入<xref:System.Globalization.NumberFormatInfo>物件使用泛型值，.NET Framework 會傳回<xref:System.Globalization.NumberFormatInfo>反映的格式化慣例的特定文化特性的物件是中性文化特性的子系。 例如，<xref:System.Globalization.NumberFormatInfo>物件的中性 en-us 文化特性會反映 EN-US 文化特性的格式化慣例，<xref:System.Globalization.NumberFormatInfo>物件為 fr 文化特性反映 FR-FR 文化特性的格式化慣例。  
  
 您可以使用如下的程式碼，以判斷哪一個特定文化特性的格式化慣例，每個中性文化特性所表示。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class.Instantiate#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/cs/instantiate6c.cs#6)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class.Instantiate#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/vb/instantiate6c.vb#6)]  
  
<a name="dynamic"></a>   
## <a name="numberformatinfo-and-dynamic-data"></a>NumberFormatInfo 和動態資料  
 格式化數值所提供的特定文化特性的資料<xref:System.Globalization.NumberFormatInfo>類別是動態的如同所提供的文化特性資料<xref:System.Globalization.CultureInfo>類別。 您不應建立穩定性值的任何假設<xref:System.Globalization.NumberFormatInfo>相關聯的物件與特定<xref:System.Globalization.CultureInfo>物件。 只提供區分文化特性和其相關聯的資料<xref:System.Globalization.NumberFormatInfo>物件很穩定。 其他資料可以變更之間的應用程式工作階段，或甚至放在單一工作階段，原因如下：  
  
-   **系統更新。** 例如，貨幣符號或貨幣格式的文化特性喜好設定會隨著時間改變。 Windows Update 時若發生這種情況，包括變更<xref:System.Globalization.NumberFormatInfo>特定文化特性的屬性值。  
  
-   **取代的文化特性。** <xref:System.Globalization.CultureAndRegionInfoBuilder>類別可以用來取代現有的文化特性的資料。  
  
-   **階層式屬性值的變更。** 一些文化特性相關的屬性可以變更在執行階段，這又會導致<xref:System.Globalization.NumberFormatInfo>若要變更的資料。 例如，以程式設計方式或透過使用者的動作，可以變更目前的文化特性。 當發生這種情況<xref:System.Globalization.NumberFormatInfo>所傳回的物件<xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>屬性變更為目前的文化特性相關聯的物件。  
  
-   **使用者喜好設定。** 應用程式的使用者可能會覆寫一些透過控制台地區及語言選項的目前系統文化特性相關聯的值。 例如，使用者可能會選擇不同的貨幣符號或不同的小數分隔符號。 如果<xref:System.Globalization.CultureInfo.UseUserOverride%2A?displayProperty=nameWithType>屬性設定為`true`（其預設值），屬性<xref:System.Globalization.NumberFormatInfo>物件也都擷取自使用者設定。  
  
 從.NET Framework 2.0 的所有使用者可覆寫屬性<xref:System.Globalization.NumberFormatInfo>建立物件時，會初始化物件。 仍有可能不一致，因為兩者皆非物件建立或使用者覆寫程序不可部分完成，而且相關的值可能會變更物件建立期間。 不過，這些不一致的情況應該很少發生。  
  
 您可以控制使用者覆寫是否會反映在<xref:System.Globalization.NumberFormatInfo>代表文化特性與目前執行緒文化特性相同的物件。 下表列出的方式<xref:System.Globalization.NumberFormatInfo>物件可以擷取，並指出是否產生的物件會反映使用者覆寫。  
  
|NumberFormatInfo CultureInfo 物件的來源|會反映使用者覆寫|  
|-------------------------------------------------------|-----------------------------|  
|`CultureInfo.CurrentCulture.NumberFormat` 屬性|[是]|  
|<xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=nameWithType> 屬性|[是]|  
|<xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType> 方法|[是]|  
|<xref:System.Globalization.CultureInfo.GetCultureInfo%2A?displayProperty=nameWithType> 方法|否|  
|<xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> 建構函式|[是]|  
|<xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> 建構函式|取決於值`useUserOverride`參數|  
  
 除非有充分的理由，否則您就應該採用使用者覆寫，當您使用<xref:System.Globalization.NumberFormatInfo>格式化和剖析使用者輸入或顯示數值資料的用戶端應用程式中的物件。 針對伺服器應用程式或自動執行應用程式，您不應該遵守使用者覆寫。 不過，如果您使用<xref:System.Globalization.NumberFormatInfo>物件是明確或隱含方式來保存字串形式的數值資料，您應該使用<xref:System.Globalization.NumberFormatInfo>反映格式設定慣例的文化特性而異，或您的物件應該指定您使用不論文化特性的自訂數值格式字串。  
  
<a name="formatProvider"></a>   
## <a name="iformatprovider-numberformatinfo-and-numeric-formatting"></a>IFormatProvider、 NumberFormatInfo，和數字格式化  
 A<xref:System.Globalization.NumberFormatInfo>物件會隱含或明確地在格式化作業中的所有數字。 這些包括呼叫下列方法：  
  
-   所有的數值格式化方法，例如<xref:System.Int32.ToString%2A?displayProperty=nameWithType>， <xref:System.Double.ToString%2A?displayProperty=nameWithType>，和<xref:System.Convert.ToString%28System.Int32%29?displayProperty=nameWithType>。  
  
-   主要的複合格式化方法， <xref:System.String.Format%2A?displayProperty=nameWithType>。  
  
-   其他複合格式化方法，例如<xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>和<xref:System.Text.StringBuilder.AppendFormat%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>。  
  
 所有數字的格式設定作業進行使用<xref:System.IFormatProvider>實作。 <xref:System.IFormatProvider>介面會包含單一方法<xref:System.IFormatProvider.GetFormat%28System.Type%29>。 這是傳遞一個回呼方法<xref:System.Type>物件，表示提供格式設定資訊所需的型別。 方法負責傳回該類型的執行個體或`null`，如果它無法提供類型的執行個體。 .NET Framework 會提供兩個<xref:System.IFormatProvider>格式化數字的實作：  
  
-   <xref:System.Globalization.CultureInfo>類別，其代表特定文化特性 （或特定國家/地區中的特定語言）。 在格式化作業中，數字<xref:System.Globalization.CultureInfo.GetFormat%2A?displayProperty=nameWithType>方法會傳回<xref:System.Globalization.NumberFormatInfo>相關聯的物件及其<xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=nameWithType>屬性。  
  
-   <xref:System.Globalization.NumberFormatInfo>類別，可提供其相關聯的文化特性的格式化慣例相關資訊。 <xref:System.Globalization.NumberFormatInfo.GetFormat%2A?displayProperty=nameWithType>方法會傳回本身的執行個體。  
  
 如果<xref:System.IFormatProvider>實作未提供格式化方法來明確地<xref:System.Globalization.CultureInfo>所傳回的物件<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>使用代表目前執行緒文化特性的屬性。  
  
 下列範例說明之間的關聯性<xref:System.IFormatProvider>介面和<xref:System.Globalization.NumberFormatInfo>在格式化作業中透過定義自訂類別<xref:System.IFormatProvider>實作。 其<xref:System.IFormatProvider.GetFormat%2A>方法會顯示格式化作業所要求之物件的型別名稱。 如果要求的介面<xref:System.Globalization.NumberFormatInfo>物件，這個方法會提供<xref:System.Globalization.NumberFormatInfo>目前執行緒文化特性的物件。 做為範例所示，從輸出<xref:System.Decimal.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>方法要求<xref:System.Globalization.NumberFormatInfo>物件，提供格式設定資訊，而<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>方法要求<xref:System.Globalization.NumberFormatInfo>並<xref:System.Globalization.DateTimeFormatInfo>物件以及<xref:System.ICustomFormatter>實作。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/cs/formatprovider1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/vb/formatprovider1.vb#1)]  
  
 如果<xref:System.IFormatProvider>數值格式化方法呼叫，方法呼叫中未明確提供實作`CultureInfo.CurrentCulture.GetFormat`方法，以傳回<xref:System.Globalization.NumberFormatInfo>對應至目前執行緒文化特性的物件。  
  
<a name="properties"></a>   
## <a name="format-strings-and-numberformatinfo-properties"></a>格式字串和 NumberFormatInfo 屬性  
 每個格式設定操作使用標準或自訂數值格式字串來產生的結果字串會從數字。 在某些情況下，要產生的結果字串的格式字串用法是明確的如下列範例所示。 此程式碼會呼叫<xref:System.Decimal.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>方法，將轉換<xref:System.Decimal>數個不同的字串表示法使用 EN-US 文化特性的格式化慣例的值。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/cs/properties1.cs#2)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/vb/properties1.vb#2)]  
  
 在其他情況下，使用格式字串都是隱含的。 例如，在下列的方法呼叫為預設值或無參數<xref:System.Decimal.ToString?displayProperty=nameWithType>方法中，值<xref:System.Decimal>使用一般 ("G") 格式規範，並在此情況下的目前文化特性的慣例格式化執行個體EN-US 文化特性。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/cs/properties2.cs#3)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/vb/properties2.vb#3)]  
  
 每個標準數值格式字串會使用一或多個<xref:System.Globalization.NumberFormatInfo>屬性，以決定模式或結果字串中使用的符號。 同樣地，每個自訂數值格式規範除了"0"、"#"的符號則會在所定義的結果字串中插入<xref:System.Globalization.NumberFormatInfo>屬性。 下表列出標準和自訂數值格式規範和其相關聯<xref:System.Globalization.NumberFormatInfo>屬性。  若要變更的特定文化特性的結果字串的外觀，請參閱[修改 NumberFormatInfo 屬性](#modifying)一節。 如需使用這些詳細資料格式規範，請參閱[標準數值格式字串](~/docs/standard/base-types/standard-numeric-format-strings.md)並[自訂數值格式字串](~/docs/standard/base-types/custom-numeric-format-strings.md)。  
  
|格式規範|相關聯的屬性|  
|----------------------|---------------------------|  
|"C"或者"c"（貨幣格式規範）|<xref:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits%2A>定義預設小數位數。<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A> 定義小數分隔符號。<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>定義群組或千分位分隔符號。<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSizes%2A>定義的整數類資料群組的大小。<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A>可定義負值的貨幣值的模式。<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A>來定義正數貨幣值的模式。<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A>定義的貨幣符號。<br /><br /> <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> 定義負號。|  
|"D"或者"d"（十進位格式規範）|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> 定義負號。|  
|"E"或者"e"（指數或以科學記號格式規範）|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>定義中的尾數和指數的負號。<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A> 定義小數分隔符號。<br /><br /> <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A>以指數中定義的正號。|  
|"F"或者"f"（固定點格式規範）|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> 定義負號。<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalDigits%2A>定義預設小數位數。<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A> 定義小數分隔符號。|  
|"G"或者"g"（一般格式規範）|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> 定義負號。<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A> 定義小數分隔符號。<br /><br /> <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A>定義結果字串的正號符號指數 」 格式。|  
|"N"或者"n"（數字格式規範）|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> 定義負號。<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalDigits%2A>定義預設小數位數。<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A> 定義小數分隔符號。<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>定義群組分隔符號 （千為單位）。<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberGroupSizes%2A>若要在群組中定義的整數位數。<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberNegativePattern%2A>定義負值的格式。|  
|"P"或者"p"（百分比格式規範）|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> 定義負號。<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentDecimalDigits%2A>定義預設小數位數。<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentDecimalSeparator%2A> 定義小數分隔符號。<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentGroupSeparator%2A>定義群組分隔符號。<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentGroupSizes%2A>若要在群組中定義的整數位數。<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentNegativePattern%2A>若要定義百分比符號與負值負數符號的位置。<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentPositivePattern%2A>定義正值的百分比符號的位置。<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentSymbol%2A>若要定義百分比符號。|  
|"R"或者"r"（來回行程格式規範）|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> 定義負號。<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A> 定義小數分隔符號。<br /><br /> <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A>若要在指數中定義正號。|  
|"X"或"x"（十六進位格式規範）|無。|  
|"."（小數位數的自訂格式規範）|<xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A> 定義小數分隔符號。|  
|"，"（群組分隔符號的自訂格式規範）|<xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>定義群組 （千位） 分隔符號。|  
|"%"（百分比預留位置的自訂格式規範）|<xref:System.Globalization.NumberFormatInfo.PercentSymbol%2A>若要定義百分比符號。|  
|"‰"（每千分比預留位置的自訂格式規範）|<xref:System.Globalization.NumberFormatInfo.PerMilleSymbol%2A>定義每千分比符號。|  
|"E"（指數標記法的自訂格式規範）|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>定義中的尾數和指數的負號。<br /><br /> <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A>以指數中定義的正號。|  
  
 請注意，<xref:System.Globalization.NumberFormatInfo>類別包含<xref:System.Globalization.NumberFormatInfo.NativeDigits%2A>屬性，指定特定文化特性所使用的基底 10 個數字。 不過，如果屬性不使用在格式化作業;只有基本拉丁文數字 0 (U + 0030) 到 9 (U + 0039) 會在結果字串。 此外，對於<xref:System.Single>並<xref:System.Double>的值`NaN`， `PositiveInfinity`，並`NegativeInfinity`，結果字串只包含所定義的符號<xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>， <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>，和<xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>屬性分別。  
  
<a name="modifying"></a>   
## <a name="modifying-numberformatinfo-properties"></a>修改 NumberFormatInfo 屬性  
 您可以修改的屬性<xref:System.Globalization.NumberFormatInfo>數值格式化作業中產生自訂結果字串的物件。 若要這樣做：  
  
1.  建立的讀取/寫入複本<xref:System.Globalization.NumberFormatInfo>物件您想要修改其格式設定慣例。 如需詳細資訊，請參閱 < [NumberFormatInfo 物件具現化](#Instantiating)一節。  
  
2.  修改或多個用來產生所要的結果字串的屬性。 如需有關如何格式化方法使用資訊<xref:System.Globalization.NumberFormatInfo>屬性來定義結果字串，請參閱[格式字串和 NumberFormatInfo 屬性](#properties)一節。  
  
3.  使用自訂<xref:System.Globalization.NumberFormatInfo>物件做為<xref:System.IFormatProvider>格式化方法的呼叫中引數。  
  
> [!NOTE]
>  除了每次應用程式啟動時動態修改文化特性的屬性值，您可以使用<xref:System.Globalization.CultureAndRegionInfoBuilder>類別來定義自訂的文化特性 （文化特性具有唯一的名稱，且以補充現有的文化特性） 或取代文化特性 （一個是用來取代特定的文化特性）。  
  
 下列各節提供一些範例。  
  
<a name="currency"></a>   
### <a name="modifying-the-currency-symbol-and-pattern"></a>修改的貨幣符號和模式  
 下列範例會修改<xref:System.Globalization.NumberFormatInfo>物件，代表 EN-US 文化特性的格式化慣例。 它會指派到的 ISO 4217 貨幣符號<xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A>屬性，並定義貨幣值的模式，其中包含後面接著一個空格和數字值的貨幣符號。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Customize#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.customize/cs/customize_currency1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.Customize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.customize/vb/customize_currency1.vb#1)]  
  
<a name="id"></a>   
### <a name="formatting-a-national-identification-number"></a>格式化身分證號碼  
 許多身分證號碼數字以獨佔方式所組成，因此可以輕鬆地加以格式化，修改的屬性<xref:System.Globalization.NumberFormatInfo>物件。 例如，在美國的社會安全號碼組成，如下所示排列的 9 位數： `XXX-XX-XXXX`。 下列範例會假設身分證號碼會儲存為整數值，並適當地將其格式化。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Customize#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.customize/cs/customize_ssn1.cs#2)]
 [!code-vb[System.Globalization.NumberFormatInfo.Customize#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.customize/vb/customize_ssn1.vb#2)]  
  
<a name="parsing"></a>   
## <a name="parsing-numeric-strings"></a>剖析數值字串  
 剖析牽涉到將數字的字串表示轉換的數字。 .NET Framework 中的每個數值類型包含兩個多載的剖析方法：`Parse`和`TryParse`。 `Parse`方法將字串轉換為數字，並擲回例外狀況，如果轉換失敗。 `TryParse`方法將字串轉換為數字，會指派數字`out`引數，並傳回<xref:System.Boolean>值，指出轉換是否成功。  
  
 剖析方法會以隱含或明確使用<xref:System.Globalization.NumberStyles>列舉值，以判斷樣式項目 （例如群組分隔符號，十進位分隔符號或貨幣符號） 可以出現在字串中，如果剖析作業才會成功。 如果<xref:System.Globalization.NumberStyles>值會是未提供方法呼叫中，預設值是<xref:System.Globalization.NumberStyles>值，包含<xref:System.Globalization.NumberStyles.Float>和<xref:System.Globalization.NumberStyles.AllowThousands>旗標，指定剖析的字串可以包含群組的符號、 小數分隔符號、 負號，而且泛空白字元，或它可以指數標記法之數字的字串表示。  
  
 剖析方法也會隱含地或明確地使用<xref:System.Globalization.NumberFormatInfo>物件，定義特定符號和模式可能會發生在要剖析的字串。 如果<xref:System.Globalization.NumberFormatInfo>未提供物件，則預設為<xref:System.Globalization.NumberFormatInfo>目前執行緒文化特性。 如需剖析的詳細資訊，請參閱個別的剖析方法，例如<xref:System.Int16.Parse%28System.String%29?displayProperty=nameWithType>， <xref:System.Int32.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType>， <xref:System.Int64.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>， <xref:System.Decimal.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=nameWithType>， <xref:System.Double.TryParse%28System.String%2CSystem.Double%40%29?displayProperty=nameWithType>，和<xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29?displayProperty=nameWithType>。  
  
 下列範例說明剖析字串的區分文化特性的本質。 它會嘗試剖析字串，包括千位分隔符號使用 EN-US、 FR-FR 和而異的文化特性的慣例。 其中包含以逗點做為群組分隔符號和期限，為小數分隔符號無法剖析為 FR-FR 文化特性中的字串，並含有 white space 做為群組分隔符號和逗號作為小數分隔符號的字串無法剖析以 EN-US 和文化特性而異。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/cs/parse1.cs#4)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/vb/parse1.vb#4)]  
  
 剖析通常就會發生在兩個內容中：  
  
-   以作業是設計用來將使用者輸入轉換成數值。  
  
-   作業的設計，若要反覆存取一個數字的值;也就是要還原序列化之前已序列化為字串的數值。  
  
 下列各節將討論這兩項作業中有更詳細。  
  
<a name="ParseUser"></a>   
### <a name="parsing-user-strings"></a>剖析使用者字串  
 當您剖析使用者輸入的數字的字串時，您應該一律具現化<xref:System.Globalization.NumberFormatInfo>反映使用者的文化特性設定的物件。 如需如何具現化<xref:System.Globalization.NumberFormatInfo>物件，以反映使用者自訂設定，請參閱[NumberFormatInfo 和動態資料](#dynamic)一節。  
  
 下列範例說明剖析作業中，以反映使用者的文化設定及未之間的差異。 在此案例中，預設系統文化特性是 EN-US，但使用者已定義"，"做為小數符號和"。"做為群組分隔符號控制項台中**地區和語言**。 一般情況下，這些符號會反轉預設 EN-US 文化特性中。 當使用者輸入字串會反映使用者設定，且所剖析的字串<xref:System.Globalization.NumberFormatInfo>物件，也會反映使用者設定 （覆寫），在剖析作業會傳回正確的結果。 不過，當字串會剖析<xref:System.Globalization.NumberFormatInfo>物件，以反映標準 EN-US 文化特性設定，其錯誤為群組分隔符號的逗號符號，並傳回不正確的結果。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/cs/parseuser1.cs#5)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/vb/parseuser1.vb#5)]  
  
<a name="ParseSerial"></a>   
### <a name="serializing-and-deserializing-numeric-data"></a>序列化和還原序列化的數值資料  
 當數值資料以字串格式序列化和更新版本還原序列化，並剖析時，應該產生並使用不因文化特性而異的慣例來剖析字串。 「 格式化和剖析作業應該不會反映出特定的文化特性的慣例。 如果使用特定文化特性設定，可攜性的資料會嚴格限制;它可以成功還原序列化，只有在執行緒，其文化特性特有的設定是完全相同的執行緒在其序列化。 在某些情況下，這表示，即使資料不會成功還原序列化的序列化所在的相同系統上。  
  
 下列範例說明當違反這個原則時，會發生什麼情況。 當目前的執行緒會使用 EN-US 文化特性的文化特性設定，在陣列中的浮點值會轉換成字串。 資料會剖析會使用 EN-GB 文化特性的文化特性設定的執行緒。 在此情況下，雖然每個剖析作業成功時，資料不支援往返作業成功，會發生資料損毀。 在其他情況下，可能會失敗的剖析作業和<xref:System.FormatException>可能擲回例外狀況。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/cs/parsepersisted.cs#6)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/vb/parsepersisted.vb#6)]  
  
   
  
## Examples  
 下列範例示範如何擷取<xref:System.Globalization.NumberFormatInfo>物件對應<xref:System.Globalization.CultureInfo>物件，並使用查詢的數字格式化特定文化特性的資訊擷取的物件。  
  
 [!code-cpp[NumberFormatInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/NumberFormatInfo/cpp/NumberFormatInfo.cpp#1)]
 [!code-csharp[NumberFormatInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/NumberFormatInfo/CS/NumberFormatInfo.cs#1)]
 [!code-vb[NumberFormatInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/NumberFormatInfo/vb/numberformatinfo.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Globalization.CultureInfo" />
    <altmember cref="T:System.IFormatProvider" />
    <related type="Article" href="~/docs/standard/base-types/custom-numeric-format-strings.md">自訂數值格式字串</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NumberFormatInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.NumberFormatInfo.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NumberFormatInfo();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化與文化特性無關 (非變異) 之 <see cref="T:System.Globalization.NumberFormatInfo" /> 類別的可寫入新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果您的應用程式需要使用者定義的格式，則可以修改新的執行個體的屬性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.NumberFormatInfo.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="numberFormatInfo.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>建立 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件的淺層複本 (Shallow Copy)。</summary>
        <returns>從原始 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件複製的新物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 複製為可寫入即使原始<xref:System.Globalization.NumberFormatInfo>物件是唯讀的。 因此，可修改複製品的屬性，利用使用者定義的模式。  
  
 物件的淺層複本是物件的一份只有。 如果物件包含其他物件的參考，則淺層複製不會建立參考物件的複本。 它會改為參考原始物件。 相反地，物件的深層複本建立一份物件和一份直接或間接參考該物件的所有項目。 若是<xref:System.Globalization.NumberFormatInfo>物件的淺層複本是能夠以複製所有的執行個體屬性，因為傳回的物件參考的所有屬性都都`static`(`Shared` Visual Basic 中)。  
  
   
  
## Examples  
 下列範例會使用<xref:System.Globalization.NumberFormatInfo.Clone%2A>方法用來建立的讀取/寫入複本<xref:System.Globalization.NumberFormatInfo>物件，表示目前執行緒文化特性慣例的格式的數字。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.IsReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.isreadonly/cs/isreadonly1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.IsReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.isreadonly/vb/isreadonly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.NumberFormatInfo.IsReadOnly" />
        <altmember cref="M:System.Globalization.NumberFormatInfo.ReadOnly(System.Globalization.NumberFormatInfo)" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyDecimalDigits">
      <MemberSignature Language="C#" Value="public int CurrencyDecimalDigits { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrencyDecimalDigits" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyDecimalDigits As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrencyDecimalDigits { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencyDecimalDigits : int with get, set" Usage="System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定要在貨幣值中使用的小數位數。</summary>
        <value>要在貨幣值中使用的小數位數。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 2。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits%2A>屬性搭配沒有格式化作業中的數值有效位數規範的"C"標準格式字串。 它會定義出現在小數分隔符號之後的小數位數的預設數目。 如果使用有效位數規範，則會覆寫此值。 如需詳細資訊，請參閱[標準數值格式字串](~/docs/standard/base-types/standard-numeric-format-strings.md)。  
  
   
  
## Examples  
 下列範例示範變更的影響<xref:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits%2A>屬性。  
  
 [!code-cpp[CurrencyDecimalDigits#1](~/samples/snippets/cpp/VS_Snippets_CLR/CurrencyDecimalDigits/CPP/currencydecimaldigits.cpp#1)]
 [!code-csharp[CurrencyDecimalDigits#1](~/samples/snippets/csharp/VS_Snippets_CLR/CurrencyDecimalDigits/CS/currencydecimaldigits.cs#1)]
 [!code-vb[CurrencyDecimalDigits#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CurrencyDecimalDigits/VB/currencydecimaldigits.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">屬性已設定為小於 0 或大於 99 的值。</exception>
        <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件為唯讀。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyDecimalSeparator">
      <MemberSignature Language="C#" Value="public string CurrencyDecimalSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrencyDecimalSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyDecimalSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CurrencyDecimalSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencyDecimalSeparator : string with get, set" Usage="System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定要做為貨幣值中小數分隔符號的字串。</summary>
        <value>要做為貨幣值中小數分隔符號的字串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 "."。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性的初始值衍生自中的設定**地區和語言**控制台 中的項目。  
  
 <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>屬性來定義分隔整數與小數位數的符號時，可與"C"標準格式字串。 如需詳細資訊，請參閱[標準數值格式字串](~/docs/standard/base-types/standard-numeric-format-strings.md)。  
  
   
  
## Examples  
 下列範例示範變更的影響<xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>屬性。  
  
 [!code-cpp[CurrencyDecimalSeparator#1](~/samples/snippets/cpp/VS_Snippets_CLR/CurrencyDecimalSeparator/CPP/currencydecimalseparator.cpp#1)]
 [!code-csharp[CurrencyDecimalSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR/CurrencyDecimalSeparator/CS/currencydecimalseparator.cs#1)]
 [!code-vb[CurrencyDecimalSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CurrencyDecimalSeparator/VB/currencydecimalseparator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件是唯讀的。</exception>
        <exception cref="T:System.ArgumentException">正在將屬性設定為空字串。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyGroupSeparator">
      <MemberSignature Language="C#" Value="public string CurrencyGroupSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrencyGroupSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyGroupSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CurrencyGroupSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencyGroupSeparator : string with get, set" Usage="System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定分隔貨幣值中小數點左邊數字群組的字串。</summary>
        <value>分隔貨幣值中小數點左邊數字群組的字串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 ","。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性的初始值衍生自中的設定**地區及語言**控制台 中的項目。  
  
 <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>屬性來定義分隔整數數字群組的符號時，可與"C"標準格式字串。 如需詳細資訊，請參閱[標準數值格式字串](~/docs/standard/base-types/standard-numeric-format-strings.md)。  
  
   
  
## Examples  
 下列範例示範變更的影響<xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>屬性。  
  
 [!code-cpp[CurrencyGroupSeparator#1](~/samples/snippets/cpp/VS_Snippets_CLR/CurrencyGroupSeparator/CPP/currencygroupseparator.cpp#1)]
 [!code-csharp[CurrencyGroupSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR/CurrencyGroupSeparator/CS/currencygroupseparator.cs#1)]
 [!code-vb[CurrencyGroupSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CurrencyGroupSeparator/VB/currencygroupseparator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件為唯讀。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyGroupSizes">
      <MemberSignature Language="C#" Value="public int[] CurrencyGroupSizes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] CurrencyGroupSizes" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyGroupSizes As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;int&gt; ^ CurrencyGroupSizes { cli::array &lt;int&gt; ^ get(); void set(cli::array &lt;int&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencyGroupSizes : int[] with get, set" Usage="System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定貨幣值內小數點左邊數字的各個群組中的位數。</summary>
        <value>貨幣值內小數點左邊數字的各個群組中的位數。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為一個只含有一個項目 (已設定為 3) 的一維陣列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSizes%2A>屬性來定義出現的位數整數類資料群組中時，可與"C"標準格式字串。 如需詳細資訊，請參閱[標準數值格式字串](~/docs/standard/base-types/standard-numeric-format-strings.md)。 一維陣列中的每個項目必須是從 1 到 9 的整數。 最後一個項目可以是 0。  
  
 陣列的第一個元素的左邊的數字的最小顯著性群組中定義的項目數<xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>。 每個後續項目是指先前群組的左邊的數字的下一個重要群組。 如果陣列的最後一個項目不是 0，其餘的數字會根據分組陣列的最後一個元素。 如果最後一個項目為 0，會不會分組其餘數字。  
  
 例如，如果陣列包含 {3，4，5}，字分組的類似於"$55,55555,55555,55555,4444,333.00"。 如果陣列包含 {3，4，0}，數字都會群組類似於"$55555555555555555,4444,333.00"。  
  
   
  
## Examples  
 下列範例示範變更的影響<xref:System.Globalization.NumberFormatInfo.CurrencyGroupSizes%2A>屬性。  
  
 [!code-cpp[CurrencyGroupSizes#1](~/samples/snippets/cpp/VS_Snippets_CLR/CurrencyGroupSizes/CPP/currencygroupsizes.cpp#1)]
 [!code-csharp[CurrencyGroupSizes#1](~/samples/snippets/csharp/VS_Snippets_CLR/CurrencyGroupSizes/CS/currencygroupsizes.cs#1)]
 [!code-vb[CurrencyGroupSizes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CurrencyGroupSizes/VB/currencygroupsizes.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">將設定此屬性，且此陣列包含小於 0 或大於 9 的項目。  
  
-或- 
將設定此屬性，且此陣列除了最後一個項目之外包含一個項目，此項目會設定為 0。</exception>
        <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件為唯讀。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyNegativePattern">
      <MemberSignature Language="C#" Value="public int CurrencyNegativePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrencyNegativePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyNegativePattern As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrencyNegativePattern { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencyNegativePattern : int with get, set" Usage="System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定負數貨幣值的格式模式。</summary>
        <value>負數貨幣值的格式模式。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 0，代表 "($n)"；其中 "$" 為 <see cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />，而 <paramref name="n" /> 為數值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A>屬性可定義負值的貨幣值的模式時，可與"C"標準格式字串。 如需詳細資訊，請參閱[標準數值格式字串](~/docs/standard/base-types/standard-numeric-format-strings.md)。 這個屬性可讓其中一個值具有下表中。 "$"符號<xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A>，符號"-"是<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>，和`n`是數字。  
  
|值|相關聯的模式|  
|-----------|------------------------|  
|0|($n)|  
|1|-$n|  
|2|$ n|  
|3|$n-|  
|4|（n $）|  
|5|-n $|  
|6|n $|  
|7|n$-|  
|8|-n $|  
|9|-$ n|  
|10|n $-|  
|11|$ n-|  
|12|$ n|  
|13|n-$|  
|14|($ n)|  
|15|（n $）|  
  
   
  
## Examples  
 下列範例顯示如何<xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A>屬性會定義負值的貨幣值的格式。  它會擷取所有的特定文化特性，主機電腦上所定義，並顯示每個文化特性<xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A>屬性值、 其相關聯的模式和數字格式化為貨幣值。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.CurrencyNegativePattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currencynegativepattern/cs/currencynegativepattern1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.CurrencyNegativePattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currencynegativepattern/vb/currencynegativepattern1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">屬性已設定為小於 0 或大於 15 的值。</exception>
        <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件為唯讀。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyPositivePattern">
      <MemberSignature Language="C#" Value="public int CurrencyPositivePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrencyPositivePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyPositivePattern As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrencyPositivePattern { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencyPositivePattern : int with get, set" Usage="System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定正數貨幣值的格式模式。</summary>
        <value>正數貨幣值的格式模式。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 0，代表 "$n"，其中 "$" 為 <see cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />，而 <paramref name="n" /> 為數值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A>屬性來定義正數貨幣值的模式時，可與"C"標準格式字串。 如需詳細資訊，請參閱[標準數值格式字串](~/docs/standard/base-types/standard-numeric-format-strings.md)。 這個屬性可讓其中一個值具有下表中。 "$"符號<xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A>和`n`是數字。  
  
|值|相關聯的模式|  
|-----------|------------------------|  
|0|$n|  
|1|n $|  
|2|$ n|  
|3|n $|  
  
 請注意，此模式不支援正號。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">屬性已設定為小於 0 或大於 3 的值。</exception>
        <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件為唯讀。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
      </Docs>
    </Member>
    <Member MemberName="CurrencySymbol">
      <MemberSignature Language="C#" Value="public string CurrencySymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrencySymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencySymbol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CurrencySymbol { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencySymbol : string with get, set" Usage="System.Globalization.NumberFormatInfo.CurrencySymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定要做為貨幣符號的字串。</summary>
        <value>要做為貨幣符號的字串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 "¤"。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 將字串指派到<xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A>屬性包含在結果字串中的數值格式化以"C"時[標準數值格式字串](~/docs/standard/base-types/standard-numeric-format-strings.md)。  
  
   
  
## Examples  
 下列範例會顯示目前的文化特性的貨幣符號，並使用"C"標準數值格式字串來格式化貨幣值。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.CurrencySymbol#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currencysymbol/cs/currencysymbolex1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.CurrencySymbol#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currencysymbol/vb/currencysymbolex1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件為唯讀。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PerMilleSymbol" />
      </Docs>
    </Member>
    <Member MemberName="CurrentInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.NumberFormatInfo CurrentInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.NumberFormatInfo CurrentInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrentInfo" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentInfo As NumberFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::NumberFormatInfo ^ CurrentInfo { System::Globalization::NumberFormatInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentInfo : System.Globalization.NumberFormatInfo" Usage="System.Globalization.NumberFormatInfo.CurrentInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得根據目前文化特性格式化值的唯讀 <see cref="T:System.Globalization.NumberFormatInfo" />。</summary>
        <value>根據目前執行緒文化特性的唯讀 <see cref="T:System.Globalization.NumberFormatInfo" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 擷取<xref:System.Globalization.NumberFormatInfo>物件從<xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>屬性就相當於擷取<xref:System.Globalization.NumberFormatInfo>物件從`CultureInfo.CurrentCulture.NumberFormat`屬性。  
  
   
  
## Examples  
 下列範例顯示所傳回的物件<xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>和`CultureInfo.CurrentCulture.NumberFormat`屬性完全相同。 它接著會使用反映來顯示的屬性值<xref:System.Globalization.NumberFormatInfo>所傳回的物件<xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>目前文化特性為 EN-US 的系統上的屬性。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.CurrentInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currentinfo/cs/currentinfo1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.CurrentInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currentinfo/vb/currentinfo1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.NumberFormat" />
      </Docs>
    </Member>
    <Member MemberName="DigitSubstitution">
      <MemberSignature Language="C#" Value="public System.Globalization.DigitShapes DigitSubstitution { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Globalization.DigitShapes DigitSubstitution" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.DigitSubstitution" />
      <MemberSignature Language="VB.NET" Value="Public Property DigitSubstitution As DigitShapes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::DigitShapes DigitSubstitution { System::Globalization::DigitShapes get(); void set(System::Globalization::DigitShapes value); };" />
      <MemberSignature Language="F#" Value="member this.DigitSubstitution : System.Globalization.DigitShapes with get, set" Usage="System.Globalization.NumberFormatInfo.DigitSubstitution" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.DigitShapes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定數值，指定圖形使用者介面顯示數字圖案的方式。</summary>
        <value>列舉值之一，指定文化特性特定的數字形狀。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <xref:System.Globalization.NumberFormatInfo.DigitSubstitution%2A>屬性保留供日後使用。 目前，它不會用於剖析或格式化作業目前<xref:System.Globalization.NumberFormatInfo>物件。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">目前的 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件是唯讀的。</exception>
        <exception cref="T:System.ArgumentException">設定作業中的值不是有效的 <see cref="T:System.Globalization.DigitShapes" /> 值。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetFormat">
      <MemberSignature Language="C#" Value="public object GetFormat (Type formatType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetFormat(class System.Type formatType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.NumberFormatInfo.GetFormat(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormat (formatType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetFormat(Type ^ formatType);" />
      <MemberSignature Language="F#" Value="abstract member GetFormat : Type -&gt; obj&#xA;override this.GetFormat : Type -&gt; obj" Usage="numberFormatInfo.GetFormat formatType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormatProvider.GetFormat(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="formatType">必要格式服務的 <see cref="T:System.Type" />。</param>
        <summary>取得指定類型的物件，以提供數字格式化服務。</summary>
        <returns>如果 <paramref name="formatType" /> 與目前 <see cref="T:System.Globalization.NumberFormatInfo" /> 的類型相同，則為目前的 <see cref="T:System.Globalization.NumberFormatInfo" />，否則為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Format(String, IFormatProvider)`基底資料型別支援的方法叫用這個方法時的目前<xref:System.Globalization.NumberFormatInfo>被當做<xref:System.IFormatProvider>參數。 這個方法會實作 <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormatProvider" />
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetFormat(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public static System.Globalization.NumberFormatInfo GetInstance (IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.NumberFormatInfo GetInstance(class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.NumberFormatInfo.GetInstance(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetInstance (formatProvider As IFormatProvider) As NumberFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::NumberFormatInfo ^ GetInstance(IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="static member GetInstance : IFormatProvider -&gt; System.Globalization.NumberFormatInfo" Usage="System.Globalization.NumberFormatInfo.GetInstance formatProvider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="formatProvider"><see cref="T:System.IFormatProvider" />，用來取得 <see cref="T:System.Globalization.NumberFormatInfo" />。  
  
-或- 
 若要取得 <see cref="P:System.Globalization.NumberFormatInfo.CurrentInfo" />，則為 <see langword="null" />。</param>
        <summary>取得與指定的 <see cref="T:System.Globalization.NumberFormatInfo" /> 相關聯的 <see cref="T:System.IFormatProvider" />。</summary>
        <returns>與指定 <see cref="T:System.Globalization.NumberFormatInfo" /> 相關聯的 <see cref="T:System.IFormatProvider" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會使用<xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>方法`formatProvider`使用<xref:System.Globalization.NumberFormatInfo>做為型別參數。 如果`formatProvider`已`null`或者<xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>會傳回`null`，這個方法會傳回<xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>。  
  
 您的應用程式取得<xref:System.Globalization.NumberFormatInfo>物件特定的文化特性，使用下列方法之一：  
  
-   透過<xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=nameWithType>屬性。  
  
-   透過<xref:System.Globalization.NumberFormatInfo.GetInstance%2A>方法所在`provider`是<xref:System.Globalization.CultureInfo>。  
  
 A<xref:System.Globalization.NumberFormatInfo>只而異的文化特性或特定文化特性，而非中性文化特性，建立物件。 如需文化特性而異，特定的文化特性和中性文化特性的詳細資訊，請參閱<xref:System.Globalization.CultureInfo>類別。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="InvariantInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.NumberFormatInfo InvariantInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.NumberFormatInfo InvariantInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.InvariantInfo" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InvariantInfo As NumberFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::NumberFormatInfo ^ InvariantInfo { System::Globalization::NumberFormatInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InvariantInfo : System.Globalization.NumberFormatInfo" Usage="System.Globalization.NumberFormatInfo.InvariantInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得與文化特性無關 (非變異) 的唯讀 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件。</summary>
        <value>與文化特性無關 (非變異) 的唯讀物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這<xref:System.Globalization.NumberFormatInfo>這個屬性所傳回的物件不會變更，不論目前的文化特性。 它代表文化特性而異，也就是使用英文的語言，但不是能搭配任何國家/地區相關聯的文化特性的格式化的慣例。 在格式化的作業與文化特性無關或，跨多個文化特性產生適用於顯示的結果字串中用於文化特性而異。  
  
   
  
## Examples  
 下列範例顯示的預設屬性值<xref:System.Globalization.NumberFormatInfo.InvariantInfo%2A>。  
  
 [!code-cpp[System.Globalization.NumberFormatInfo.InvariantInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.NumberFormatInfo.InvariantInfo/CPP/invariantinfo.cpp#1)]
 [!code-csharp[System.Globalization.NumberFormatInfo.InvariantInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.NumberFormatInfo.InvariantInfo/CS/invariantinfo.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.InvariantInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.NumberFormatInfo.InvariantInfo/VB/invariantinfo.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Globalization.NumberFormatInfo.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，表示這個 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件是否為唯讀。</summary>
        <value>如果 <see langword="true" /> 是唯讀，則為 <see cref="T:System.Globalization.NumberFormatInfo" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 嘗試執行的唯讀屬性，指派<xref:System.Globalization.NumberFormatInfo>會導致<xref:System.InvalidOperationException>。  
  
 您可以呼叫<xref:System.Globalization.NumberFormatInfo.Clone%2A>方法用來建立讀取/寫入<xref:System.Globalization.NumberFormatInfo>物件是唯讀的物件，如下列範例所示。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.IsReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.isreadonly/cs/isreadonly1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.IsReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.isreadonly/vb/isreadonly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.NumberFormatInfo.ReadOnly(System.Globalization.NumberFormatInfo)" />
      </Docs>
    </Member>
    <Member MemberName="NaNSymbol">
      <MemberSignature Language="C#" Value="public string NaNSymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NaNSymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
      <MemberSignature Language="VB.NET" Value="Public Property NaNSymbol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NaNSymbol { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NaNSymbol : string with get, set" Usage="System.Globalization.NumberFormatInfo.NaNSymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定代表 IEEE NaN (Not a Number) 值的字串。</summary>
        <value>代表 IEEE NaN (Not a Number) 值的字串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 "NaN"。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需有關 NaN 值的詳細資訊，請參閱<xref:System.Double>或<xref:System.Single>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件為唯讀。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol" />
      </Docs>
    </Member>
    <Member MemberName="NativeDigits">
      <MemberSignature Language="C#" Value="public string[] NativeDigits { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] NativeDigits" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NativeDigits" />
      <MemberSignature Language="VB.NET" Value="Public Property NativeDigits As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ NativeDigits { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NativeDigits : string[] with get, set" Usage="System.Globalization.NumberFormatInfo.NativeDigits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定字串陣列，其中包含對等於西方數字 0 到 9 之當地慣用的數字。</summary>
        <value>字串陣列，其中包含對等於西方數字 0 到 9 之當地慣用的數字。 預設值是具有項目 "0"、"1"、"2"、"3"、"4"、"5"、"6"、"7"、"8" 和 "9" 的陣列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  所指定的字元集<xref:System.Globalization.NumberFormatInfo.NativeDigits%2A>屬性具有不會影響剖析或格式化作業。 只有基本拉丁文數字 0 (U + 0030) 到 9 (U + 0039) 用在格式化或剖析數值或日期和時間值。  
  
   
  
## Examples  
 下列範例示範<xref:System.Globalization.NumberFormatInfo.NativeDigits%2A>屬性。  
  
 [!code-cpp[sys.glob.NFI.nativeDigits#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.glob.NFI.nativeDigits/cpp/nd.cpp#1)]
 [!code-csharp[sys.glob.NFI.nativeDigits#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.NFI.nativeDigits/cs/nd.cs#1)]
 [!code-vb[sys.glob.NFI.nativeDigits#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.NFI.nativeDigits/vb/nd.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">目前的 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件是唯讀的。</exception>
        <exception cref="T:System.ArgumentNullException">在設定作業中，此值為 <see langword="null" />。  
  
-或- 
在設定作業中，數值陣列的項目是 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">在設定作業中，數值陣列不包含 10 個項目。  
  
-或- 
在設定作業中，數值陣列項目不包含單一的 <see cref="T:System.Char" /> 物件，或由 Surrogate 字組組成的一對 <see cref="T:System.Char" /> 物件。  
  
-或- 
在設定作業中，數值陣列項目與由 [Unicode 標準](https://go.microsoft.com/fwlink/?linkid=37123)所定義的數字不同。 亦即，陣列項目中的數字沒有 Unicode <see langword="Number, Decimal Digit" /> (Nd) 一般類別值。  
  
-或- 
在設定作業中，數值陣列的項目數值不符合陣列中項目的位置。 亦即，位於索引 0 的項目，即陣列的第一個項目，沒有數值 0；或是位於索引 1 的項目，沒有數值 1。</exception>
        <altmember cref="T:System.Globalization.DigitShapes" />
      </Docs>
    </Member>
    <Member MemberName="NegativeInfinitySymbol">
      <MemberSignature Language="C#" Value="public string NegativeInfinitySymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NegativeInfinitySymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol" />
      <MemberSignature Language="VB.NET" Value="Public Property NegativeInfinitySymbol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NegativeInfinitySymbol { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NegativeInfinitySymbol : string with get, set" Usage="System.Globalization.NumberFormatInfo.NegativeInfinitySymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定代表負無限大的字串。</summary>
        <value>字串，代表負無限大。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 "-Infinity"。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需有關負無限大方向的詳細資訊，請參閱<xref:System.Double>或<xref:System.Single>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件為唯讀。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
      </Docs>
    </Member>
    <Member MemberName="NegativeSign">
      <MemberSignature Language="C#" Value="public string NegativeSign { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NegativeSign" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NegativeSign" />
      <MemberSignature Language="VB.NET" Value="Public Property NegativeSign As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NegativeSign { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NegativeSign : string with get, set" Usage="System.Globalization.NumberFormatInfo.NegativeSign" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定代表相關數字為負數的字串。</summary>
        <value>代表相關數字為負數的字串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 "-"。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此屬性可格式化和剖析作業中。 如需有關在格式化作業中使用的詳細資訊，請參閱[標準數值格式字串](~/docs/standard/base-types/standard-numeric-format-strings.md)並[自訂數值格式字串](~/docs/standard/base-types/custom-numeric-format-strings.md)主題。  
  
   
  
## Examples  
 下列範例會具現化讀寫<xref:System.Globalization.CultureInfo>物件，代表文化特性而異，並將頂線字元 (U + 203E) 指派給其<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>屬性。 然後會使用此<xref:System.Globalization.CultureInfo>来格式化的負數的浮點數陣列物件。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.NegativeSign#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.negativesign/cs/negativesign1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.NegativeSign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.negativesign/vb/negativesign1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件為唯讀。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PositiveSign" />
      </Docs>
    </Member>
    <Member MemberName="NumberDecimalDigits">
      <MemberSignature Language="C#" Value="public int NumberDecimalDigits { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NumberDecimalDigits" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
      <MemberSignature Language="VB.NET" Value="Public Property NumberDecimalDigits As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int NumberDecimalDigits { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.NumberDecimalDigits : int with get, set" Usage="System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定要在數值中使用的小數位數。</summary>
        <value>要在數值中使用的小數位數。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 2。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo.NumberDecimalDigits%2A>屬性搭配沒有格式化作業中的數值有效位數規範的"F"和"N"標準格式字串。 它會定義出現在小數分隔符號之後的小數位數的預設數目。 如果使用有效位數規範，則會覆寫此值。 如需詳細資訊，請參閱[標準數值格式字串](~/docs/standard/base-types/standard-numeric-format-strings.md)。  
  
   
  
## Examples  
 下列範例示範變更的影響<xref:System.Globalization.NumberFormatInfo.NumberDecimalDigits%2A>屬性。  
  
 [!code-cpp[NumberDecimalDigits#1](~/samples/snippets/cpp/VS_Snippets_CLR/NumberDecimalDigits/CPP/numberdecimaldigits.cpp#1)]
 [!code-csharp[NumberDecimalDigits#1](~/samples/snippets/csharp/VS_Snippets_CLR/NumberDecimalDigits/CS/numberdecimaldigits.cs#1)]
 [!code-vb[NumberDecimalDigits#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/NumberDecimalDigits/VB/numberdecimaldigits.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">屬性已設定為小於 0 或大於 99 的值。</exception>
        <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件為唯讀。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
      </Docs>
    </Member>
    <Member MemberName="NumberDecimalSeparator">
      <MemberSignature Language="C#" Value="public string NumberDecimalSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NumberDecimalSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property NumberDecimalSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NumberDecimalSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NumberDecimalSeparator : string with get, set" Usage="System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定要做為數值中小數分隔符號的字串。</summary>
        <value>要做為數值中小數分隔符號的字串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 "."。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>屬性來定義分隔整數與小數位數的符號時，可使用"E"、"F"、"G"、"N"和"R"標準格式字串。 如需詳細資訊，請參閱[標準數值格式字串](~/docs/standard/base-types/standard-numeric-format-strings.md)。  
  
 這個屬性的初始值衍生自中的設定**地區和語言**控制台 中的項目。  
  
   
  
## Examples  
 下列範例示範變更的影響<xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>屬性。  
  
 [!code-cpp[NumberDecimalSeparator#1](~/samples/snippets/cpp/VS_Snippets_CLR/NumberDecimalSeparator/CPP/numberdecimalseparator.cpp#1)]
 [!code-csharp[NumberDecimalSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR/NumberDecimalSeparator/CS/numberdecimalseparator.cs#1)]
 [!code-vb[NumberDecimalSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/NumberDecimalSeparator/VB/numberdecimalseparator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件是唯讀的。</exception>
        <exception cref="T:System.ArgumentException">正在將屬性設定為空字串。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
      </Docs>
    </Member>
    <Member MemberName="NumberGroupSeparator">
      <MemberSignature Language="C#" Value="public string NumberGroupSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NumberGroupSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property NumberGroupSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NumberGroupSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NumberGroupSeparator : string with get, set" Usage="System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定分隔數值中小數點左邊數字群組的字串。</summary>
        <value>分隔數值中小數點左邊數字群組的字串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 ","。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A> "N"標準格式字串搭配使用屬性來定義分隔整數數字群組的符號。 如需詳細資訊，請參閱[標準數值格式字串](~/docs/standard/base-types/standard-numeric-format-strings.md)。  
  
 這個屬性的初始值衍生自中的設定**地區和語言**控制台 中的項目。  
  
   
  
## Examples  
 下列範例示範變更的影響<xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>屬性。  
  
 [!code-cpp[NumberGroupSeparator#1](~/samples/snippets/cpp/VS_Snippets_CLR/NumberGroupSeparator/CPP/numbergroupseparator.cpp#1)]
 [!code-csharp[NumberGroupSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR/NumberGroupSeparator/CS/numbergroupseparator.cs#1)]
 [!code-vb[NumberGroupSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/NumberGroupSeparator/VB/numbergroupseparator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件為唯讀。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
      </Docs>
    </Member>
    <Member MemberName="NumberGroupSizes">
      <MemberSignature Language="C#" Value="public int[] NumberGroupSizes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] NumberGroupSizes" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
      <MemberSignature Language="VB.NET" Value="Public Property NumberGroupSizes As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;int&gt; ^ NumberGroupSizes { cli::array &lt;int&gt; ^ get(); void set(cli::array &lt;int&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NumberGroupSizes : int[] with get, set" Usage="System.Globalization.NumberFormatInfo.NumberGroupSizes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定數值內小數點左邊數字的各個群組中的位數。</summary>
        <value>數值內小數點左邊數字的各個群組中的位數。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為一個只含有一個項目 (已設定為 3) 的一維陣列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Globalization.NumberFormatInfo.NumberGroupSizes%2A>屬性會影響使用"N"來格式化的數字值的結果。 如果是自訂數值格式字串或其他標準數值格式會使用字串，值<xref:System.Globalization.NumberFormatInfo.NumberGroupSizes%2A>屬性會被忽略。  
  
 一維陣列中的每個項目必須是從 1 到 9 的整數。 最後一個項目可以是 0。  
  
 陣列的第一個元素的左邊的數字的最小顯著性群組中定義的項目數<xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>。 每個後續項目是指先前群組的左邊的數字的下一個重要群組。 如果陣列的最後一個項目不是 0，其餘的數字會根據分組陣列的最後一個元素。 如果最後一個項目為 0，會不會分組其餘數字。  
  
 例如，如果陣列包含 {3，4，5}，字分組的類似於 「 55,55555,55555,55555,4444,333.00"。 如果陣列包含 {3，4，0}，數字都會群組類似於 「 55555555555555555,4444,333.00"。  
  
   
  
## Examples  
 下列範例示範變更的影響<xref:System.Globalization.NumberFormatInfo.NumberGroupSizes%2A>屬性。  
  
 [!code-cpp[NumberGroupSizes#1](~/samples/snippets/cpp/VS_Snippets_CLR/NumberGroupSizes/CPP/numbergroupsizes.cpp#1)]
 [!code-csharp[NumberGroupSizes#1](~/samples/snippets/csharp/VS_Snippets_CLR/NumberGroupSizes/CS/numbergroupsizes.cs#1)]
 [!code-vb[NumberGroupSizes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/NumberGroupSizes/VB/numbergroupsizes.vb#1)]  
  
 下列範例會列印使用不同的值<xref:System.Globalization.NumberFormatInfo.NumberGroupSizes%2A>陣列。  
  
 [!code-cpp[Classic NumberFormatInfo.NumberGroupSizes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberGroupSizes Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NumberFormatInfo.NumberGroupSizes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberGroupSizes Example/CS/source.cs#1)]
 [!code-vb[Classic NumberFormatInfo.NumberGroupSizes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberGroupSizes Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">將設定此屬性，且此陣列包含小於 0 或大於 9 的項目。  
  
-或- 
將設定此屬性，且此陣列除了最後一個項目之外包含一個項目，此項目會設定為 0。</exception>
        <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件為唯讀。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
      </Docs>
    </Member>
    <Member MemberName="NumberNegativePattern">
      <MemberSignature Language="C#" Value="public int NumberNegativePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NumberNegativePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property NumberNegativePattern As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int NumberNegativePattern { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.NumberNegativePattern : int with get, set" Usage="System.Globalization.NumberFormatInfo.NumberNegativePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定負數值的格式模式。</summary>
        <value>負數值的格式模式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo.NumberNegativePattern%2A>屬性會定義負值的格式設定為"N"標準數值格式字串的格式。 這個屬性可讓其中一個值具有下表中。 符號"-"是<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>和`n`是數字。  
  
|值|相關聯的模式|  
|-----------|------------------------|  
|0|(n)|  
|1|-n|  
|2|- n|  
|3|n-|  
|4|n -|  
  
 所傳回的文化特性而異的預設值<xref:System.Globalization.NumberFormatInfo.InvariantInfo%2A>屬性為 1，代表"-n"，其中*n*是數字。  
  
   
  
## Examples  
 下列範例顯示使用不同的值<xref:System.Globalization.NumberFormatInfo.NumberNegativePattern%2A>模式。  
  
 [!code-cpp[Classic NumberFormatInfo.NumberNegativePattern Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberNegativePattern Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NumberFormatInfo.NumberNegativePattern Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberNegativePattern Example/CS/source.cs#1)]
 [!code-vb[Classic NumberFormatInfo.NumberNegativePattern Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberNegativePattern Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">屬性已設定為小於 0 或大於 4 的值。</exception>
        <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件為唯讀。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
      </Docs>
    </Member>
    <Member MemberName="PercentDecimalDigits">
      <MemberSignature Language="C#" Value="public int PercentDecimalDigits { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PercentDecimalDigits" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentDecimalDigits As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PercentDecimalDigits { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.PercentDecimalDigits : int with get, set" Usage="System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定要在百分比值中使用的小數位數。</summary>
        <value>要在百分比值中使用的小數位數。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 2。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo.PercentDecimalDigits%2A>屬性搭配"P"標準格式字串，而不需要在格式化作業中的數值有效位數規範。 它會定義出現在小數分隔符號之後的小數位數的預設數目。 如果使用有效位數規範，則會覆寫此值。 如需詳細資訊，請參閱[標準數值格式字串](~/docs/standard/base-types/standard-numeric-format-strings.md)。  
  
   
  
## Examples  
 下列範例示範變更的影響<xref:System.Globalization.NumberFormatInfo.PercentDecimalDigits%2A>屬性。  
  
 [!code-cpp[PercentDecimalDigits#1](~/samples/snippets/cpp/VS_Snippets_CLR/PercentDecimalDigits/CPP/percentdecimaldigits.cpp#1)]
 [!code-csharp[PercentDecimalDigits#1](~/samples/snippets/csharp/VS_Snippets_CLR/PercentDecimalDigits/CS/percentdecimaldigits.cs#1)]
 [!code-vb[PercentDecimalDigits#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PercentDecimalDigits/VB/percentdecimaldigits.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">屬性已設定為小於 0 或大於 99 的值。</exception>
        <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件為唯讀。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
      </Docs>
    </Member>
    <Member MemberName="PercentDecimalSeparator">
      <MemberSignature Language="C#" Value="public string PercentDecimalSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PercentDecimalSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentDecimalSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PercentDecimalSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PercentDecimalSeparator : string with get, set" Usage="System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定要做為百分比值中小數分隔符號使用的字串。</summary>
        <value>要做為百分比值中小數分隔符號的字串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 "."。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo.PercentDecimalSeparator%2A>屬性來定義分隔整數與小數位數的符號時，可與"P"標準格式字串。 如需詳細資訊，請參閱[標準數值格式字串](~/docs/standard/base-types/standard-numeric-format-strings.md)。  
  
   
  
## Examples  
 下列範例示範變更的影響<xref:System.Globalization.NumberFormatInfo.PercentDecimalSeparator%2A>屬性。  
  
 [!code-cpp[PercentDecimalSeparator#1](~/samples/snippets/cpp/VS_Snippets_CLR/PercentDecimalSeparator/CPP/percentdecimalseparator.cpp#1)]
 [!code-csharp[PercentDecimalSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR/PercentDecimalSeparator/CS/percentdecimalseparator.cs#1)]
 [!code-vb[PercentDecimalSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PercentDecimalSeparator/VB/percentdecimalseparator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件是唯讀的。</exception>
        <exception cref="T:System.ArgumentException">正在將屬性設定為空字串。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
      </Docs>
    </Member>
    <Member MemberName="PercentGroupSeparator">
      <MemberSignature Language="C#" Value="public string PercentGroupSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PercentGroupSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentGroupSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PercentGroupSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PercentGroupSeparator : string with get, set" Usage="System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定百分比值中分隔小數點左邊數字群組的字串。</summary>
        <value>百分比值中分隔小數點左邊數字群組的字串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 ","。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo.PercentGroupSeparator%2A>屬性來定義分隔整數群組的符號時，可與"P"標準格式字串。 如需詳細資訊，請參閱[標準數值格式字串](~/docs/standard/base-types/standard-numeric-format-strings.md)。  
  
   
  
## Examples  
 下列範例示範變更的影響<xref:System.Globalization.NumberFormatInfo.PercentGroupSeparator%2A>屬性。  
  
 [!code-cpp[PercentGroupSeparator#1](~/samples/snippets/cpp/VS_Snippets_CLR/PercentGroupSeparator/CPP/percentgroupseparator.cpp#1)]
 [!code-csharp[PercentGroupSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR/PercentGroupSeparator/CS/percentgroupseparator.cs#1)]
 [!code-vb[PercentGroupSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PercentGroupSeparator/VB/percentgroupseparator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件為唯讀。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
      </Docs>
    </Member>
    <Member MemberName="PercentGroupSizes">
      <MemberSignature Language="C#" Value="public int[] PercentGroupSizes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] PercentGroupSizes" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentGroupSizes As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;int&gt; ^ PercentGroupSizes { cli::array &lt;int&gt; ^ get(); void set(cli::array &lt;int&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PercentGroupSizes : int[] with get, set" Usage="System.Globalization.NumberFormatInfo.PercentGroupSizes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定百分比值內小數點左邊數字的各個群組中的位數。</summary>
        <value>百分比值內小數點左邊數字的各個群組中的位數。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為一個只含有一個項目 (已設定為 3) 的一維陣列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo.PercentGroupSizes%2A> "P"標準格式字串搭配使用屬性來定義出現的位數整數類資料群組中。 如需詳細資訊，請參閱[標準數值格式字串](~/docs/standard/base-types/standard-numeric-format-strings.md)。 一維陣列中的每個項目必須是從 1 到 9 的整數。 最後一個項目可以是 0。  
  
 陣列的第一個元素的左邊的數字的最小顯著性群組中定義的項目數<xref:System.Globalization.NumberFormatInfo.PercentDecimalSeparator%2A>。 每個後續項目是指先前群組的左邊的數字的下一個重要群組。 如果陣列的最後一個項目不是 0，其餘的數字會根據分組陣列的最後一個元素。 如果最後一個項目為 0，會不會分組其餘數字。  
  
 例如，如果陣列包含 {3，4，5}，字分組的類似於 「 55,55555,55555,55555,4444,333.00%"。 如果陣列包含 {3，4，0}，將數字群組類似於 「 55555555555555555,4444,333.00%"。  
  
   
  
## Examples  
 下列範例示範變更的影響<xref:System.Globalization.NumberFormatInfo.PercentGroupSizes%2A>屬性。  
  
 [!code-cpp[PercentGroupSizes#1](~/samples/snippets/cpp/VS_Snippets_CLR/PercentGroupSizes/CPP/percentgroupsizes.cpp#1)]
 [!code-csharp[PercentGroupSizes#1](~/samples/snippets/csharp/VS_Snippets_CLR/PercentGroupSizes/CS/percentgroupsizes.cs#1)]
 [!code-vb[PercentGroupSizes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PercentGroupSizes/VB/percentgroupsizes.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">將設定此屬性，且此陣列包含小於 0 或大於 9 的項目。  
  
-或- 
將設定此屬性，且此陣列除了最後一個項目之外包含一個項目，此項目會設定為 0。</exception>
        <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件為唯讀。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
      </Docs>
    </Member>
    <Member MemberName="PercentNegativePattern">
      <MemberSignature Language="C#" Value="public int PercentNegativePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PercentNegativePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentNegativePattern As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PercentNegativePattern { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.PercentNegativePattern : int with get, set" Usage="System.Globalization.NumberFormatInfo.PercentNegativePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定負數百分比值的格式模式。</summary>
        <value>負數百分比值的格式模式。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 0，代表 "-n %"，其中 "%" 為 <see cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />，而 <paramref name="n" /> 為數值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo.PercentNegativePattern%2A> "P"標準格式字串搭配使用屬性來定義負值的百分比值的模式。 如需詳細資訊，請參閱[標準數值格式字串](~/docs/standard/base-types/standard-numeric-format-strings.md)。 這個屬性可讓其中一個值具有下表中。 "%"符號<xref:System.Globalization.NumberFormatInfo.PercentSymbol%2A>，符號"-"是<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>，和`n`是數字。 值 3 11 引進.NET Framework 2.0 中，而且不能用在更早版本。  
  
|值|相關聯的模式|  
|-----------|------------------------|  
|0|-n %|  
|1|-n%|  
|2|-%n|  
|3|%n|  
|4|%n-|  
|5|n-%|  
|6|n%-|  
|7|-% n|  
|8|n %-|  
|9|%n-|  
|10|%n|  
|11|n-%|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">屬性已設定為小於 0 或大於 11 的值。</exception>
        <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件為唯讀。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
      </Docs>
    </Member>
    <Member MemberName="PercentPositivePattern">
      <MemberSignature Language="C#" Value="public int PercentPositivePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PercentPositivePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentPositivePattern As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PercentPositivePattern { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.PercentPositivePattern : int with get, set" Usage="System.Globalization.NumberFormatInfo.PercentPositivePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定正數百分比值的格式模式。</summary>
        <value>正數百分比值的格式模式。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 0，代表 "n %"，其中 "%" 為 <see cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />，而 <paramref name="n" /> 為數值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo.PercentPositivePattern%2A> "P"標準格式字串搭配使用屬性來定義正數百分比值的模式。 如需詳細資訊，請參閱[標準數值格式字串](~/docs/standard/base-types/standard-numeric-format-strings.md)。 這個屬性可讓其中一個值具有下表中。 "%"符號<xref:System.Globalization.NumberFormatInfo.PercentSymbol%2A>和`n`是數字。  
  
|值|相關聯的模式|  
|-----------|------------------------|  
|0|n %|  
|1|n%|  
|2|%n|  
|3|%n|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">屬性已設定為小於 0 或大於 3 的值。</exception>
        <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件為唯讀。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
      </Docs>
    </Member>
    <Member MemberName="PercentSymbol">
      <MemberSignature Language="C#" Value="public string PercentSymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PercentSymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentSymbol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PercentSymbol { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PercentSymbol : string with get, set" Usage="System.Globalization.NumberFormatInfo.PercentSymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定要當做百分比符號的字串。</summary>
        <value>要當做百分比符號的字串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 "%"。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 將字串指派到<xref:System.Globalization.NumberFormatInfo.PercentSymbol%2A>屬性包含在結果字串中與"P"或包含"%"的格式字串格式化數字的值時。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件為唯讀。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PerMilleSymbol" />
      </Docs>
    </Member>
    <Member MemberName="PerMilleSymbol">
      <MemberSignature Language="C#" Value="public string PerMilleSymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PerMilleSymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PerMilleSymbol" />
      <MemberSignature Language="VB.NET" Value="Public Property PerMilleSymbol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PerMilleSymbol { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PerMilleSymbol : string with get, set" Usage="System.Globalization.NumberFormatInfo.PerMilleSymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定要當做千分之一符號的字串。</summary>
        <value>要當做千分之一符號的字串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 "‰"，也就是 Unicode 字元 U+2030。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 將字串指派到<xref:System.Globalization.NumberFormatInfo.PerMilleSymbol%2A>屬性包含在結果字串中包含"‰"格式字串格式化數字的值時。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件為唯讀。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
      </Docs>
    </Member>
    <Member MemberName="PositiveInfinitySymbol">
      <MemberSignature Language="C#" Value="public string PositiveInfinitySymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PositiveInfinitySymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol" />
      <MemberSignature Language="VB.NET" Value="Public Property PositiveInfinitySymbol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PositiveInfinitySymbol { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PositiveInfinitySymbol : string with get, set" Usage="System.Globalization.NumberFormatInfo.PositiveInfinitySymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定代表正無限大的字串。</summary>
        <value>代表正無限大的字串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 "Infinity"。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需有關正無限大的詳細資訊，請參閱<xref:System.Double>或<xref:System.Single>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件為唯讀。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
      </Docs>
    </Member>
    <Member MemberName="PositiveSign">
      <MemberSignature Language="C#" Value="public string PositiveSign { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PositiveSign" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PositiveSign" />
      <MemberSignature Language="VB.NET" Value="Public Property PositiveSign As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PositiveSign { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PositiveSign : string with get, set" Usage="System.Globalization.NumberFormatInfo.PositiveSign" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定用來表示相關數字為正數的字串。</summary>
        <value>用來表示相關數字為正數的字串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 "+"。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性僅用於剖析數值字串，而不進行格式化。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">在 set 作業中，要指派的值小於 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件為唯讀。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NegativeSign" />
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public static System.Globalization.NumberFormatInfo ReadOnly (System.Globalization.NumberFormatInfo nfi);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.NumberFormatInfo ReadOnly(class System.Globalization.NumberFormatInfo nfi) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.NumberFormatInfo.ReadOnly(System.Globalization.NumberFormatInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadOnly (nfi As NumberFormatInfo) As NumberFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::NumberFormatInfo ^ ReadOnly(System::Globalization::NumberFormatInfo ^ nfi);" />
      <MemberSignature Language="F#" Value="static member ReadOnly : System.Globalization.NumberFormatInfo -&gt; System.Globalization.NumberFormatInfo" Usage="System.Globalization.NumberFormatInfo.ReadOnly nfi" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nfi" Type="System.Globalization.NumberFormatInfo" />
      </Parameters>
      <Docs>
        <param name="nfi">要包裝的 <see cref="T:System.Globalization.NumberFormatInfo" />。</param>
        <summary>傳回唯讀的 <see cref="T:System.Globalization.NumberFormatInfo" /> 包裝函式。</summary>
        <returns><paramref name="nfi" /> 的唯讀 <see cref="T:System.Globalization.NumberFormatInfo" /> 包裝函式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個包裝函式可防止修改`nfi`。  
  
 嘗試執行的唯讀屬性，指派<xref:System.Globalization.NumberFormatInfo>會導致<xref:System.InvalidOperationException>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="nfi" /> 為 <see langword="null" />。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.IsReadOnly" />
      </Docs>
    </Member>
  </Members>
</Type>