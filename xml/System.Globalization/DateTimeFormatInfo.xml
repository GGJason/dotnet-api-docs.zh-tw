<Type Name="DateTimeFormatInfo" FullName="System.Globalization.DateTimeFormatInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="58b615e5d2d253f3653c3e71a86ddf7e29f513ba" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36487647" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class DateTimeFormatInfo : ICloneable, IFormatProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit DateTimeFormatInfo extends System.Object implements class System.ICloneable, class System.IFormatProvider" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.DateTimeFormatInfo" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DateTimeFormatInfo&#xA;Implements ICloneable, IFormatProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class DateTimeFormatInfo sealed : ICloneable, IFormatProvider" />
  <TypeSignature Language="F#" Value="type DateTimeFormatInfo = class&#xA;    interface ICloneable&#xA;    interface IFormatProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormatProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Provides culture-specific information about the format of date and time values.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 內容<xref:System.Globalization.DateTimeFormatInfo>類別包含特定文化特性資訊來格式化或剖析日期和時間值，如下所示：  
  
-   用來格式化日期值的模式。  
  
-   用來格式化時間值的模式。  
  
-   一周天數的名稱。  
  
-   年的月份的名稱。  
  
-   上午 到下午 指示項用於時間值。  
  
-   日期以行事曆。  
  
 本節內容：  
  
-   [具現化 DateTimeFormatInfo 物件](#instantiating)  
  
    -   [而異的文化特性](#instantiating_Invariant)  
  
    -   [特定文化特性](#instantiating_Specific)  
  
    -   [中性文化特性](#instantiating_neutral)  
  
    -   [目前的文化特性](#instantiating_Current)  
  
-   [DateTimeFormatInfo 和動態資料](#dynamic)  
  
-   [格式化日期和時間](#Formatting_dates_times)  
  
-   [格式字串和 DateTimeFormatInfo 屬性](#properties)  
  
-   [修改 DateTimeFormatInfo 屬性](#Modifying)  
  
<a name="instantiating"></a>   
## <a name="instantiating-a-datetimeformatinfo-object"></a>具現化 DateTimeFormatInfo 物件  
 A<xref:System.Globalization.DateTimeFormatInfo>物件可代表的文化特性而異、 特定文化特性、 中性文化特性或目前的文化特性的格式設定慣例。 本章節將討論如何具現化每一種<xref:System.Globalization.DateTimeFormatInfo>物件。  
  
<a name="instantiating_Invariant"></a>   
### <a name="instantiating-a-datetimeformatinfo-object-for-the-invariant-culture"></a>具現化文化特性而異的 DateTimeFormatInfo 的物件  
 文化特性而異表示不區分文化特性的文化特性。 它以英文語言，但不是能在任何特定英語系國家/地區。 雖然特定文化特性的資料可以是動態的而且能夠變更以反映新的文化特性慣例或使用者喜好設定，而異的文化特性的資料不會變更。 您可以具現化<xref:System.Globalization.DateTimeFormatInfo>物件，以下列方式表示的格式設定慣例的文化特性而異：  
  
-   所擷取的值<xref:System.Globalization.DateTimeFormatInfo.InvariantInfo%2A>屬性。 傳回<xref:System.Globalization.DateTimeFormatInfo>物件是唯讀的。  
  
-   藉由呼叫無參數<xref:System.Globalization.DateTimeFormatInfo.%23ctor%2A>建構函式。 傳回的 <xref:System.Globalization.DateTimeFormatInfo> 物件是讀取/寫入。  
  
-   所擷取的值<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>屬性從<xref:System.Globalization.CultureInfo>所傳回的物件<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>屬性。 傳回<xref:System.Globalization.DateTimeFormatInfo>物件是唯讀的。  
  
 下列範例會使用每一種方法來具現化<xref:System.Globalization.DateTimeFormatInfo>物件，代表文化特性而異。 然後會指出物件是否為唯讀。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/create1.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/create1.vb#1)]  
  
<a name="instantiating_Specific"></a>   
### <a name="instantiating-a-datetimeformatinfo-object-for-a-specific-culture"></a>特定文化特性的 DateTimeFormatInfo 物件具現化  
 特定文化特性表示播放特定國家/地區的語言。 例如，EN-US 是特定文化特性，表示在美國，說出的英文語言和 EN-CA 是特定文化特性，表示在加拿大的英文。 您可以具現化<xref:System.Globalization.DateTimeFormatInfo>物件，代表特定文化特性的格式化慣例，以下列方式：  
  
-   藉由呼叫<xref:System.Globalization.CultureInfo.GetCultureInfo%28System.String%29?displayProperty=nameWithType>方法，並擷取傳回的值<xref:System.Globalization.CultureInfo>物件的<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>屬性。 傳回<xref:System.Globalization.DateTimeFormatInfo>物件是唯讀的。  
  
-   藉由傳遞靜態<xref:System.Globalization.DateTimeFormatInfo.GetInstance%2A>方法<xref:System.Globalization.CultureInfo>代表的文化特性的物件其<xref:System.Globalization.DateTimeFormatInfo>您想要擷取的物件。 傳回的 <xref:System.Globalization.DateTimeFormatInfo> 物件是讀取/寫入。  
  
-   藉由呼叫靜態<xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType>方法，並擷取傳回的值<xref:System.Globalization.CultureInfo>物件的<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>屬性。 傳回的 <xref:System.Globalization.DateTimeFormatInfo> 物件是讀取/寫入。  
  
-   藉由呼叫<xref:System.Globalization.CultureInfo.%23ctor%2A?displayProperty=nameWithType>類別建構函式和擷取的值傳回<xref:System.Globalization.CultureInfo>物件的<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>屬性。 傳回的 <xref:System.Globalization.DateTimeFormatInfo> 物件是讀取/寫入。  
  
 下列範例說明每一種來具現化<xref:System.Globalization.DateTimeFormatInfo>物件，並指出產生的物件是否為唯讀。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/create1.cs#3)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/create1.vb#3)]  
  
<a name="instantiating_neutral"></a>   
### <a name="instantiating-a-datetimeformatinfo-object-for-a-neutral-culture"></a>中性文化特性的 DateTimeFormatInfo 物件具現化  
 中性文化特性代表文化特性或語言無關的國家/地區。它通常是一或多個特定的文化特性的父代。 例如，Fr 是中性文化特性的法文語言和 FR-FR 文化特性的父代。 您可以具現化<xref:System.Globalization.DateTimeFormatInfo>物件，您所建立的相同方式代表中性文化特性的格式化慣例<xref:System.Globalization.DateTimeFormatInfo>物件，代表特定文化特性的格式設定慣例。 此外，您可以擷取中性文化特性<xref:System.Globalization.DateTimeFormatInfo>物件擷取特定文化特性中性文化特性<xref:System.Globalization.CultureInfo.Parent%2A?displayProperty=nameWithType>屬性和擷取<xref:System.Globalization.DateTimeFormatInfo>所傳回的物件及其<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>屬性。 除非的父文化特性代表文化特性而異，傳回的<xref:System.Globalization.DateTimeFormatInfo>物件是讀取/寫入。 下列範例會說明這些方法具現化<xref:System.Globalization.DateTimeFormatInfo>代表中性文化特性的物件。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/create1.cs#2)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/create1.vb#2)]  
  
> [!NOTE]
>  在.NET framework 1.0 透過[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]，嘗試擷取<xref:System.Globalization.DateTimeFormatInfo>物件會反映中性文化特性的格式化慣例，會擲回<xref:System.NotSupportedException>例外狀況。  
  
 不過，由於中性文化特性缺少特定文化特性格式資訊，因為它是獨立於特定國家/地區。 而不是填入<xref:System.Globalization.DateTimeFormatInfo>物件一般的值，會傳回.NET Framework<xref:System.Globalization.DateTimeFormatInfo>反映的格式設定慣例的特定文化特性的物件是中性文化特性的子系。 例如，<xref:System.Globalization.DateTimeFormatInfo>物件中性 en-us 文化特性會反映 EN-US 文化特性的格式化慣例和<xref:System.Globalization.DateTimeFormatInfo>物件 fr-fr 文化特性會反映為 FR-FR 文化特性的格式設定慣例。  
  
 您可以使用下列程式碼來判斷哪一個特定文化特性中性文化特性所表示的格式設定慣例。 這個範例會使用反映來比較<xref:System.Globalization.DateTimeFormatInfo>中性文化特性的屬性與特定的子系文化特性的屬性。 它會考慮為相等，如果它們是相同的日曆類型的兩個行事曆，且西曆行事曆，如果其<xref:System.Globalization.GregorianCalendar.CalendarType%2A?displayProperty=nameWithType>屬性有相同的值。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/instantiate6c.cs#6)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/instantiate6c.vb#6)]  
  
<a name="instantiating_Current"></a>   
### <a name="instantiating-a-datetimeformatinfo-object-for-the-current-culture"></a>目前的文化特性的 DateTimeFormatInfo 物件具現化  
 您可以具現化<xref:System.Globalization.DateTimeFormatInfo>物件，代表目前的文化特性的格式化慣例，以下列方式：  
  
-   所擷取的值<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A>屬性。 傳回<xref:System.Globalization.DateTimeFormatInfo>物件是唯讀的。  
  
-   所擷取的值<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>屬性從<xref:System.Globalization.CultureInfo>所傳回的物件<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>屬性。 傳回<xref:System.Globalization.DateTimeFormatInfo>物件是唯讀的。  
  
-   藉由呼叫<xref:System.Globalization.NumberFormatInfo.GetInstance%2A>方法<xref:System.Globalization.CultureInfo>物件，代表目前的文化特性。 傳回<xref:System.Globalization.DateTimeFormatInfo>物件是唯讀的。  
  
 下列範例會使用每一種方法來具現化<xref:System.Globalization.DateTimeFormatInfo>物件，代表目前的文化特性的格式設定慣例。 然後會指出物件是否為唯讀。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/create2.cs#4)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/create2.vb#4)]  
  
 您可以建立的可寫入<xref:System.Globalization.DateTimeFormatInfo>物件，代表下列其中一種在目前的執行緒文化特性的慣例：  
  
-   藉由擷取<xref:System.Globalization.DateTimeFormatInfo>物件中的任何三個先前的方式和呼叫<xref:System.Globalization.DateTimeFormatInfo.Clone%2A>方法在傳回<xref:System.Globalization.DateTimeFormatInfo>物件。 這會建立原始檔案的副本<xref:System.Globalization.DateTimeFormatInfo>物件時，不同處在於其<xref:System.Globalization.DateTimeFormatInfo.IsReadOnly%2A>屬性是`false`。  
  
-   藉由呼叫<xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType>方法來建立<xref:System.Globalization.CultureInfo>物件，代表目前的文化特性，然後再使用其<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>屬性，以擷取<xref:System.Globalization.DateTimeFormatInfo>物件。  
  
 下列範例說明每個讀取/寫入具現化的方式<xref:System.Globalization.DateTimeFormatInfo>物件，並顯示的值及其<xref:System.Globalization.DateTimeFormatInfo.IsReadOnly%2A>屬性。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/instantiate2.cs#7)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/instantiate2.vb#7)]  
  
 在 Windows 中，使用者可以覆寫的部分<xref:System.Globalization.DateTimeFormatInfo>中格式化和剖析透過作業所使用的屬性值**地區和語言**控制台 中的應用程式。 比方說，其文化特性是英文 （美國） 的使用者可能選擇顯示長時間 （格式為 hh: mm:） 使用 24 小時制時間值，而不是預設 12 小時制，（在格式 h:mm: ss tt 中)。 <xref:System.Globalization.DateTimeFormatInfo>討論方式擷取的物件之前都反映出這些使用者覆寫。 如果這是讓人困擾，您可以建立<xref:System.Globalization.NumberFormatInfo>並不會反映使用者的物件會覆寫 （和也是讀取/寫入，而不是唯讀） 藉由呼叫<xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType>建構函式，並提供值`false`如`useUserOverride`引數。 下列範例將說明這點系統目前文化特性是英文 （美國） 和其完整時間模式已從 h:mm: ss tt 預設值變更為 hh: mm:。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/instantiate3.cs#8)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/instantiate3.vb#8)]  
  
<a name="dynamic"></a>   
## <a name="datetimeformatinfo-and-dynamic-data"></a>DateTimeFormatInfo 和動態資料  
 格式化日期和時間值所提供的特定文化特性的資料<xref:System.Globalization.DateTimeFormatInfo>類別是動態的如同所提供的文化特性資料<xref:System.Globalization.CultureInfo>類別。 您不應做任何假設穩定性的值<xref:System.Globalization.DateTimeFormatInfo>相關聯的物件與特定<xref:System.Globalization.CultureInfo>物件。 僅提供文化特性而異，及其相關聯的資料<xref:System.Globalization.DateTimeFormatInfo>物件很穩定。 應用程式工作階段之間，或應用程式執行時，可以變更其他資料。 有四個主要的來源的變更：  
  
-   系統更新。 文化特性的偏好設定，例如慣用的行事曆或慣用的日期和時間格式會隨著時間改變。 Windows Update 時若發生這種情況，包括變更以<xref:System.Globalization.DateTimeFormatInfo>特定文化特性的屬性值。  
  
-   取代的文化特性。 <xref:System.Globalization.CultureAndRegionInfoBuilder>類別可以用來取代現有的文化特性的資料。  
  
-   階層式屬性值的變更。 許多與文化特性相關的屬性可以變更在執行階段，這又會導致<xref:System.Globalization.DateTimeFormatInfo>若要變更的資料。 例如，以程式設計方式或透過使用者的動作，可以變更目前的文化特性。 當發生這種情況時，<xref:System.Globalization.DateTimeFormatInfo>所傳回物件<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A>屬性變更為與目前的文化特性相關聯的物件。 同樣地，文化特性的曆法可能會變更，從而會導致變更為許多<xref:System.Globalization.DateTimeFormatInfo>屬性值。  
  
-   使用者喜好設定。 應用程式的使用者可以選擇覆寫一些透過控制台地區及語言選項的目前系統文化特性相關聯的值。 例如，使用者可能會選擇不同的格式顯示日期。 如果<xref:System.Globalization.CultureInfo.UseUserOverride%2A?displayProperty=nameWithType>屬性設定為`true`，屬性<xref:System.Globalization.DateTimeFormatInfo>物件也會從使用者設定。 如果使用者設定都與相關聯的文化特性不相容<xref:System.Globalization.CultureInfo>物件 (例如，如果選取的行事曆不是其中一個所指示的行事曆<xref:System.Globalization.CultureInfo.OptionalCalendars%2A>屬性)，方法和屬性的值的結果未定義。  
  
 資料不一致，使用中的所有使用者可覆寫屬性的可能性降到最低<xref:System.Globalization.DateTimeFormatInfo>建立物件時，會初始化物件。 仍有可能會不一致，因為是不可部分完成的物件建立或使用者覆寫程序都不相關的值時，建立物件。 不過，這種情況應該很少發生。  
  
 您可以控制使用者覆寫中會反映<xref:System.Globalization.DateTimeFormatInfo>代表文化特性的系統文化特性與相同的物件。 下表列出的方式<xref:System.Globalization.DateTimeFormatInfo>物件可以擷取，並且表示產生的物件是否反映使用者覆寫。  
  
|CultureInfo 和 DateTimeFormatInfo 物件來源|反映使用者覆寫|  
|---------------------------------------------------------|-----------------------------|  
|`CultureInfo.CurrentCulture.DateTimeFormat` 屬性|[是]|  
|<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A?displayProperty=nameWithType> 屬性|[是]|  
|<xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType> 方法|[是]|  
|<xref:System.Globalization.CultureInfo.GetCultureInfo%2A?displayProperty=nameWithType> 方法|否|  
|<xref:System.Globalization.CultureInfo.%23ctor%28System.String%29?displayProperty=nameWithType> 建構函式|[是]|  
|<xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> 建構函式|取決於值`useUserOverride`參數|  
  
 除非有充足的理由，否則您應該採用使用者覆寫，當您使用<xref:System.Globalization.DateTimeFormatInfo>格式化和剖析使用者輸入或顯示資料的用戶端應用程式中的物件。 對於伺服器應用程式或自動執行應用程式，您不應該。 不過，如果您使用<xref:System.Globalization.DateTimeFormatInfo>物件是明確或隱含來保存字串形式的日期和時間資料，您應該使用<xref:System.Globalization.DateTimeFormatInfo>反映的格式設定慣例的文化特性而異，或者您的物件應該指定自訂日期和時間格式字串，讓您不論文化特性。  
  
<a name="Formatting_dates_times"></a>   
## <a name="formatting-dates-and-times"></a>格式化日期和時間  
 A<xref:System.Globalization.DateTimeFormatInfo>物件用於隱含或明確地所有日期和時間格式化作業。 這些需求包括下列方法的呼叫：  
  
-   所有日期和時間格式化方法，例如<xref:System.DateTime.ToString?displayProperty=nameWithType>和<xref:System.DateTimeOffset.ToString%28System.String%29?displayProperty=nameWithType>。  
  
-   主要的複合格式方法，後者為<xref:System.String.Format%2A?displayProperty=nameWithType>。  
  
-   其他複合格式方法，例如<xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>和<xref:System.Text.StringBuilder.AppendFormat%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>。  
  
 所有的日期和時間格式設定作業進行使用<xref:System.IFormatProvider>實作。 <xref:System.IFormatProvider>介面包含單一方法<xref:System.IFormatProvider.GetFormat%28System.Type%29?displayProperty=nameWithType>。 傳遞給這個回呼方法<xref:System.Type>物件，代表提供的格式資訊所需的型別。 方法會傳回該類型的執行個體或`null`如果它無法提供類型的執行個體。 .NET Framework 包含兩個<xref:System.IFormatProvider>格式化日期和時間的實作：  
  
-   <xref:System.Globalization.CultureInfo>類別，代表特定文化特性 （或特定國家/地區中的特定語言）。 在日期和時間格式的作業，<xref:System.Globalization.CultureInfo.GetFormat%2A?displayProperty=nameWithType>方法會傳回<xref:System.Globalization.DateTimeFormatInfo>與相關聯的物件及其<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>屬性。  
  
-   <xref:System.Globalization.DateTimeFormatInfo>類別，可提供其相關聯的文化特性的格式化慣例相關資訊。 <xref:System.Globalization.DateTimeFormatInfo.GetFormat%2A?displayProperty=nameWithType>方法會傳回本身的執行個體。  
  
 如果<xref:System.IFormatProvider>並未提供實作格式化的方法來明確地<xref:System.Globalization.CultureInfo>所傳回物件<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>使用代表目前執行緒文化特性的屬性。  
  
 下列範例說明之間的關聯性<xref:System.IFormatProvider>介面和<xref:System.Globalization.DateTimeFormatInfo>在格式化作業中的類別。 它會定義自訂<xref:System.IFormatProvider>實作其<xref:System.IFormatProvider.GetFormat%2A>方法會顯示在格式化作業所要求的物件型別。 如果它要求<xref:System.Globalization.DateTimeFormatInfo>物件，此方法提供<xref:System.Globalization.DateTimeFormatInfo>目前執行緒文化特性的物件。 做為範例所示，從輸出<xref:System.Decimal.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>方法要求<xref:System.Globalization.DateTimeFormatInfo>物件，提供格式設定資訊，而<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>方法要求<xref:System.Globalization.NumberFormatInfo>和<xref:System.Globalization.DateTimeFormatInfo>物件，以及<xref:System.ICustomFormatter>實作。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/formatprovider1.cs#9)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/formatprovider1.vb#9)]  
  
<a name="properties"></a>   
## <a name="format-strings-and-datetimeformatinfo-properties"></a>格式字串和 DateTimeFormatInfo 屬性  
 <xref:System.Globalization.DateTimeFormatInfo>物件包含三種類型的屬性，以用在格式化日期和時間值的作業：  
  
-   行事曆相關的屬性。 屬性，例如<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames%2A>， <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A>， <xref:System.Globalization.DateTimeFormatInfo.DayNames%2A>，和<xref:System.Globalization.DateTimeFormatInfo.MonthNames%2A>，會使用的文化特性所定義的行事曆與相關聯<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>屬性。 這些屬性用於完整日期和時間格式。  
  
-   產生標準定義結果字串的屬性。 <xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A>， <xref:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern%2A>，和<xref:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern%2A>屬性包含產生的結果字串，由國際標準所定義的自訂格式字串。 這些屬性是唯讀的而且無法修改。  
  
-   定義區分文化特性的結果字串的屬性。 某些屬性，例如<xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A>和<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>，包含[自訂格式字串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)旗標會指定結果字串的格式。 其他項目，例如<xref:System.Globalization.DateTimeFormatInfo.AMDesignator%2A>， <xref:System.Globalization.DateTimeFormatInfo.DateSeparator%2A>， <xref:System.Globalization.DateTimeFormatInfo.PMDesignator%2A>，和<xref:System.Globalization.DateTimeFormatInfo.TimeSeparator%2A>，定義區分文化特性的符號，或是可以包含在結果字串的子字串。  
  
 [標準日期和時間格式字串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)，例如"d"、"D"、"f"和"F"，則會對應到特定的別名<xref:System.Globalization.DateTimeFormatInfo>格式化模式的屬性。 大部分的[自訂日期和時間格式字串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)與字串或子字串，格式化作業將結果資料流插入相關。 下表列出標準和自訂日期和時間格式規範和其相關聯<xref:System.Globalization.DateTimeFormatInfo>屬性。 如需如何使用這些項目詳細資料格式規範，請參閱[標準日期和時間格式字串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)和[自訂日期和時間格式字串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。 請注意，每個標準格式字串會對應到<xref:System.Globalization.DateTimeFormatInfo>其值為自訂日期和時間格式字串的屬性。 這個自訂格式字串中的個別規範接著會對應至其他<xref:System.Globalization.DateTimeFormatInfo>屬性。 資料表只列出<xref:System.Globalization.DateTimeFormatInfo>屬性為其標準格式字串是別名，並不可能存取的自訂格式字串指派給這些別名屬性清單屬性。 此外，此資料表列出對應至自訂格式規範<xref:System.Globalization.DateTimeFormatInfo>屬性。  
  
|格式規範|相關的內容|  
|----------------------|---------------------------|  
|"d"（簡短日期; 標準格式字串）|<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>定義結果字串的整體格式。|  
|"D"（完整日期; 標準格式字串）|<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>定義結果字串的整體格式。|  
|"f"(完整日期 / 簡短時間則為標準格式字串)|<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>定義結果字串的日期部分的格式。<br /><br /> <xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A>定義結果字串的時間元件的格式。|  
|"F"(完整日期 / 時間的時間，則標準格式字串)|<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>定義結果字串的日期部分的格式。<br /><br /> <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A>定義結果字串的時間元件的格式。|  
|"g"(一般日期 / 時間短，則標準格式字串)|<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>定義結果字串的日期部分的格式。<br /><br /> <xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A>定義結果字串的時間元件的格式。|  
|"G"(一般日期 / 時間時間則為標準格式字串)|<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>定義結果字串的日期部分的格式。<br /><br /> <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A>定義結果字串的時間元件的格式。|  
|"M"、"m"（月/日; 標準格式字串）|<xref:System.Globalization.DateTimeFormatInfo.MonthDayPattern%2A>定義結果字串的整體格式。|  
|"O"、"o"(來回日期/時間，則標準格式字串)|無。|  
|"R"、"r"（RFC1123; 標準格式字串）|<xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A>定義的 RFC 1123 標準符合的結果字串。 屬性是唯讀。|  
|"s"（可排序日期/時間; 標準格式字串）|<xref:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern%2A>定義結果字串符合 ISO 8601 標準。 屬性是唯讀。|  
|"t"（簡短時間; 標準格式字串）|<xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A>定義結果字串的整體格式。|  
|"T"（很長的時間; 標準格式字串）|<xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A>定義結果字串的整體格式。|  
|"u"（國際可排序日期/時間; 標準格式字串）|<xref:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern%2A>定義結果字串符合 ISO 8601 標準國際標準時間。 屬性是唯讀。|  
|"U"（國際完整日期/時間; 標準格式字串）|<xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A>定義結果字串的整體格式。|  
|"Y"、"y"（年月; 標準格式字串）|<xref:System.Globalization.DateTimeFormatInfo.YearMonthPattern%2A>定義結果字串的整體格式。|  
|"ddd"（自訂格式規範）|<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames%2A>要在結果字串中包含一週的星期幾的縮寫的名稱。|  
|"g"、"gg"（自訂格式規範）|呼叫<xref:System.Globalization.DateTimeFormatInfo.GetEraName%2A>插入結果字串中的紀元名稱的方法。|  
|"MMM"（自訂格式規範）|<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A>包含在結果字串中縮寫的月份名稱。|  
|"MMMM"（自訂格式規範）|<xref:System.Globalization.DateTimeFormatInfo.MonthNames%2A> 或<xref:System.Globalization.DateTimeFormatInfo.MonthGenitiveNames%2A>、 要包含在結果字串中的完整月份名稱。|  
|"t"（自訂格式規範）|<xref:System.Globalization.DateTimeFormatInfo.AMDesignator%2A> 或<xref:System.Globalization.DateTimeFormatInfo.PMDesignator%2A>、 要包含在結果字串中的 AM/PM 指示項的第一個字元。|  
|"tt"（自訂格式規範）|<xref:System.Globalization.DateTimeFormatInfo.AMDesignator%2A> 或<xref:System.Globalization.DateTimeFormatInfo.PMDesignator%2A>，若要在結果字串中包含完整的 AM/PM 指示項。|  
|":"（自訂格式規範）|<xref:System.Globalization.DateTimeFormatInfo.TimeSeparator%2A>要在結果字串中包含的時間分隔符號。|  
|"/"（自訂格式規範）|<xref:System.Globalization.DateTimeFormatInfo.DateSeparator%2A>要在結果字串中包含日期分隔符號。|  
  
<a name="Modifying"></a>   
## <a name="modifying-datetimeformatinfo-properties"></a>修改 DateTimeFormatInfo 屬性  
 您可以變更藉由修改相關聯的屬性的可寫入的日期和時間格式字串所產生的結果字串<xref:System.Globalization.DateTimeFormatInfo>物件。 若要判斷是否<xref:System.Globalization.DateTimeFormatInfo>物件是否可寫入，請使用<xref:System.Globalization.DateTimeFormatInfo.IsReadOnly%2A>屬性。 若要自訂<xref:System.Globalization.DateTimeFormatInfo>物件以這種方式：  
  
1.  建立的讀取/寫入複本<xref:System.Globalization.DateTimeFormatInfo>物件您想要修改其格式設定慣例。 (請參閱[DateTimeFormatInfo 物件具現化](#instantiating)> 一節。)  
  
2.  修改屬性或屬性，用來產生所要的結果字串。 (如需有關如何格式化方法的使用資訊<xref:System.Globalization.DateTimeFormatInfo>屬性，以定義結果字串，請參閱上一節[格式化字串和 DateTimeFormatInfo 屬性](#properties)。)  
  
3.  使用自訂<xref:System.Globalization.DateTimeFormatInfo>物件建立為您<xref:System.IFormatProvider>格式化方法的呼叫中引數。  
  
 有兩種方式可變更的結果字串格式：  
  
-   您可以使用<xref:System.Globalization.CultureAndRegionInfoBuilder>類別來定義自訂的文化特性 （文化特性，都有唯一的名稱和的補充現有的文化特性） 或取代文化特性 （一個，而不是特定文化特性）。 您可以儲存並以程式設計方式存取此文化特性，如同任何<xref:System.Globalization.CultureInfo>.NET Framework 所支援的物件。  
  
-   如果結果字串不區分文化特性，而且不會依照預先定義的格式，您可以使用自訂日期和時間格式字串。 例如，如果您要序列化 YYYYMMDDHHmmss 格式的日期和時間資料，您可以產生結果字串傳遞至自訂格式字串<xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType>方法，而且您可以將結果字串的轉換回<xref:System.DateTime>藉由呼叫的值<xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType>方法。  
  
### <a name="changing-the-short-date-pattern"></a>變更的簡短日期模式  
 下列範例會變更"d"（簡短日期） 標準格式字串所產生的結果字串的格式。 它會變更相關聯<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>EN-US 或從其預設值是"yyyy/m /"以英文 （美國） 文化特性的屬性"yyyy'-"MM"-"dd"和"d"標準格式字串來顯示日期之前和之後會使用<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>屬性變更。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/example1.cs#10)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/example1.vb#10)]  
  
### <a name="changing-the-date-separator-character"></a>變更日期分隔符號字元  
 下列範例會變更的日期分隔符號字元<xref:System.Globalization.DateTimeFormatInfo>物件，代表 FR-FR 文化特性的格式設定慣例。 此範例使用"g"標準格式字串來顯示日期之前和之後<xref:System.Globalization.DateTimeFormatInfo.DateSeparator%2A>屬性變更。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/example3.cs#12)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/example3.vb#12)]  
  
### <a name="changing-day-name-abbreviations-and-the-long-date-pattern"></a>變更星期名稱縮寫和完整日期模式  
 在某些情況下，完整日期模式中，通常會顯示完整日期和月份名稱，以及一天的月份和年份的數目，可能會太長。 下列範例會縮短 EN-US 文化特性，以傳回一個字元或兩個字元的星期名稱縮寫，後面接著一天的數字、 月份名稱縮寫和年份的完整日期模式。 其做法是指派至較短的星期名稱縮寫<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames%2A>陣列，並藉由修改自訂格式字串指派給<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>屬性。 這會影響結果字串，傳回的"D"和"f"標準格式字串。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/example2.cs#13)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/example2.vb#13)]  
  
 一般而言，若要變更<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>屬性也會影響<xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A>屬性，接著定義"F"標準格式字串所傳回的結果字串。 為了保留原始的完整日期和時間模式，此範例會重新指派原始的自訂格式字串指派給<xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A>屬性之後<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>屬性修改。  
  
### <a name="changing-from-a-12-hour-clock-to-a-24-hour-clock"></a>從 （12 小時制） 變更為 24 小時制  
 針對許多在.NET Framework 中的文化特性的時間，以使用 12 小時制和 AM/PM 指示項。 下列範例會定義`ReplaceWith24HourClock`取代任何使用 24 小時制的格式會使用 12 小時制的時間格式的方法。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/example5.cs#14)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/example5.vb#14)]  
  
 範例會使用規則運算式，若要修改的格式字串。 規則運算式模式`@"^(?<openAMPM>\s*t+\s*)? (?(openAMPM) h+(?<nonHours>[^ht]+)$ | \s*h+(?<nonHours>[^ht]+)\s*t+)`定義如下：  
  
|模式|描述|  
|-------------|-----------------|  
|`^`|從字串的開頭開始比對。|  
|`(?<openAMPM>\s*t+\s*)?`|比對零或一次出現零或多個空格字元，後面接著字母"t"，其中一或多次，後面接著零或多個空格字元。 此擷取群組命名為`openAMPM`。|  
|`(?(openAMPM) h+(?<nonHours>[^ht]+)$`|如果`openAMPM`群組具有相符項目，比對字母"h"一或多次，後面接著非"h"或"t"的一個或多個字元。 在字串結尾結束比對。 擷取具名的擷取群組中包含"h"之後的所有字元`nonHours`。|  
|`&#124; \s*h+(?<nonHours>[^ht]+)\s*t+)`|如果`openAMPM`群組沒有相符項目，比對字母"h"一或多次，後面接著一個或多個非"h"或"t"字元後面接著零或多個空格字元。 最後，比對一個或多個出現字母"t"。 擷取在"h"之後和泛空白字元和"t"會包含在名為的擷取群組的所有字元`nonHours`。|  
  
 `nonHours`擷取群組包含分鐘，而且可能是第二個元件的自訂日期和時間格式字串，以及具有任何時間分隔符號的符號。 取代模式`HH${nonHours}`前面加上這些元素的子字串"HH"。  
  
### <a name="displaying-and-changing-the-era-in-a-date"></a>顯示和變更的紀元的日期  
 下列範例會將"g"自訂格式規範來<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>屬性的物件，表示 EN-US 文化特性的格式設定慣例。 此新增功能會影響下列三個標準格式字串：  
  
-   "D"(long date) 標準格式字串，會直接對應到<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>屬性。  
  
-   "f"(完整日期簡短時間 /) 標準格式字串，產生的結果字串串連所產生的子字串之<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>和<xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A>屬性。  
  
-   "F"(完整日期 / 時間長度) 標準格式字串，會直接對應到<xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A>屬性。 我們沒有明確設定此屬性值，因為它動態產生藉由串連<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>和<xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A>屬性。  
  
 此範例也示範如何變更其行事曆有單一紀元的文化特性的紀元名稱。 在此情況下，EN-US 文化特性會使用西曆，由<xref:System.Globalization.GregorianCalendar>物件。 <xref:System.Globalization.GregorianCalendar>類別支援單一紀元，其名稱 A.D.。 （如下）。 此範例變更西元紀元名稱 （常見紀元） 來取代指派給格式字串中的"g"自訂格式規範<xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A>具有常值字串屬性。 常值字串的使用方式不必要的因為紀元名稱通常由<xref:System.Globalization.DateTimeFormatInfo.GetEraName%2A>從.NET Framework 或 Windows 作業系統所提供的文化特性資料表中的私用資料的方法。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/example4.cs#11)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/example4.vb#11)]  
  
## <a name="parsing-date-and-time-strings"></a>剖析日期和時間字串  
 剖析涉及將轉換的日期和時間的字串表示<xref:System.DateTime>或<xref:System.DateTimeOffset>值。 這兩種類型包括`Parse`， `TryParse`， `ParseExact`，和`TryParseExact`方法，以支援剖析作業。 `Parse`和`TryParse`方法轉換可以有各種不同的格式字串，而`ParseExact`和`TryParseExact`需要字串具有定義的格式。 如果在剖析作業失敗，`Parse`和`ParseExact`擲回例外狀況，而`TryParse`和`TryParseExact`傳回`false`。  
  
 剖析方法隱含或明確地使用<xref:System.Globalization.DateTimeStyles>列舉值，以決定哪些 （例如前置、 尾端，或內部空白字元） 的樣式項目中可以存在的字串剖析，以及如何解譯剖析的字串或任何遺漏項目。 如果您沒有提供<xref:System.Globalization.DateTimeStyles>值，當您呼叫`Parse`或`TryParse`方法，預設值是<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType>，這是包含的複合樣式<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite?displayProperty=nameWithType>， <xref:System.Globalization.DateTimeStyles.AllowTrailingWhite?displayProperty=nameWithType>，和<xref:System.Globalization.DateTimeStyles.AllowInnerWhite?displayProperty=nameWithType>旗標。 如`ParseExact`和`TryParseExact`方法，預設值是<xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>; 輸入的字串必須對應到特定的自訂日期和時間格式字串的精確。  
  
 剖析方法也會隱含或明確地使用<xref:System.Globalization.DateTimeFormatInfo>物件，定義特定的符號和模式可能會發生在要剖析的字串。 如果您沒有提供<xref:System.Globalization.DateTimeFormatInfo>物件<xref:System.Globalization.DateTimeFormatInfo>物件預設會使用目前執行緒文化特性。 如需剖析日期和時間字串的詳細資訊，請參閱個別的剖析方法，例如<xref:System.DateTime.Parse%2A?displayProperty=nameWithType>， <xref:System.DateTime.TryParse%2A?displayProperty=nameWithType>， <xref:System.DateTimeOffset.ParseExact%2A?displayProperty=nameWithType>，和<xref:System.DateTimeOffset.TryParseExact%2A?displayProperty=nameWithType>。  
  
 下列範例說明剖析的日期和時間字串的區分文化特性的本質。 它會嘗試使用 EN-US EN-GB、 FR-FR、 及的 FI-FI 文化特性的慣例來剖析兩個日期的字串。 日期，這會解譯為 8/18/2014 中是 EN-US 文化特性會擲回<xref:System.FormatException>18 解譯為月數，因此，文化特性中其他三個例外狀況。 2015 年 1 月 2 日會剖析 EN-US 文化特性的第一個月的第二天，但其餘的文化特性的第二個月的第一天。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/parsing1.cs#15)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/parsing1.vb#15)]  
  
 通常剖析日期和時間字串的原因有兩個：  
  
-   若要將使用者輸入轉換成日期和時間值。  
  
-   若要反覆存取日期和時間值。也就是說，還原序列化先前序列化為字串的日期和時間值。  
  
 下列章節會討論這些更詳細地的兩個作業。  
  
### <a name="parsing-user-strings"></a>剖析使用者字串  
 當您剖析使用者輸入的日期和時間字串時，您應該一律具現化<xref:System.Globalization.DateTimeFormatInfo>反映使用者的文化特性設定，包括使用者所做的任何自訂的物件。 否則，日期和時間物件可能有不正確的值。 如需有關如何具現化資訊<xref:System.Globalization.DateTimeFormatInfo>物件，以反映使用者文化特性的自訂設定，請參閱[DateTimeFormatInfo 和動態資料](#dynamic)> 一節。  
  
 下列範例說明剖析作業中，以反映使用者文化特性設定，與另一個沒有之間的差異。 在此情況下，預設系統文化特性是 EN-US，但使用者使用控制台中**地區和語言**從其預設值是"yyyy/m /"變更"yy/MM/dd"簡短日期模式。 當使用者輸入反映使用者設定的字串，且所剖析的字串<xref:System.Globalization.DateTimeFormatInfo>也會反映使用者設定 （覆寫） 的物件在剖析作業會傳回正確的結果。 不過，當字串會剖析<xref:System.Globalization.DateTimeFormatInfo>物件，以反映標準 EN-US 文化特性設定，則剖析方法會擲回<xref:System.FormatException>例外狀況因為它會解譯 14 的月份，數目不兩位數的年份。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/parse2.cs#16)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/parse2.vb#16)]  
  
### <a name="serializing-and-deserializing-date-and-time-data"></a>序列化和還原序列化的日期和時間資料  
 序列化來回; 預期的日期和時間資料也就是說，所有序列化和還原序列化的值應該相同。 如果日期和時間值代表單一時間點，已還原序列化的值應該代表不論文化特性或其已還原的系統時區的時間在同一時間。 若要反覆存取日期和時間資料成功，您必須使用慣例的文化特性而異，傳回<xref:System.Globalization.DateTimeFormatInfo.InvariantInfo%2A>屬性，產生及剖析資料。 格式化和剖析作業應該不會反映出預設文化特性的慣例。 如果您使用預設文化特性設定，可攜性的資料會嚴格限制;它可以是只在其文化特性特有的設定都與在其上已序列化之執行緒的執行緒上已成功還原序列化。 在某些情況下，這表示，資料無法甚至成功序列化和還原序列化的相同系統上。  
  
 如果日期和時間值的時間元件十分重要，應該也將轉換為 UTC 並使用"o"或"r"序列化[標準格式字串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)。 [時間] 資料便可以還原，藉由呼叫剖析方法並將它傳遞為文化特性而異的適當的格式字串沿著`provider`引數。  
  
 下列範例說明反覆存取日期和時間值的程序。 它會序列化的日期和時間會遵守美國的系統上太平洋時間和目前文化特性是 EN-US。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/serialize1.cs#17)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/serialize1.vb#17)]  
  
 還原序列化布魯塞爾，哥本哈根，馬德里，巴黎時區中的系統上的資料和目前文化特性為 fr-fr。 還原的日期是 9 個小時會反映八個小時 utc 時區調整為比 UTC 快一個小時的原始日期晚。 原始日期和還原的日期表示相同時間點。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/serialize2.cs#18)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/serialize2.vb#18)]  
  
   
  
## Examples  
 下列範例會使用反映取得的屬性<xref:System.Globalization.DateTimeFormatInfo>英文 （美國） 文化特性的物件。 它會顯示包含自訂格式字串的那些屬性的值，並使用這些字串來顯示格式的日期。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/format1.cs#5)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/format1.vb#5)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.DateTime" />
    <altmember cref="T:System.Globalization.Calendar" />
    <altmember cref="T:System.Globalization.CultureInfo" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeFormatInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeFormatInfo();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new writable instance of the <see cref="T:System.Globalization.DateTimeFormatInfo" /> class that is culture-independent (invariant).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式會建立<xref:System.Globalization.DateTimeFormatInfo>物件，代表文化特性而異的日期和時間資訊。 若要建立<xref:System.Globalization.DateTimeFormatInfo>特定文化特性物件，請建立<xref:System.Globalization.CultureInfo>該文化特性的物件，並擷取<xref:System.Globalization.DateTimeFormatInfo>所傳回的物件及其<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>屬性。  
  
 內容<xref:System.Globalization.DateTimeFormatInfo>可以修改這個建構函式所建立的物件。 不過，您無法修改<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>屬性，因為而異的文化特性支援西曆的當地語系化的版本。 若要建立<xref:System.Globalization.DateTimeFormatInfo>物件，使用特定的行事曆，您必須具現化<xref:System.Globalization.CultureInfo>支援之物件的行事曆，並將指派的行事曆<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>屬性<xref:System.Globalization.DateTimeFormatInfo>所傳回的物件<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>屬性.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
      </Docs>
    </Member>
    <Member MemberName="AbbreviatedDayNames">
      <MemberSignature Language="C#" Value="public string[] AbbreviatedDayNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] AbbreviatedDayNames" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames" />
      <MemberSignature Language="VB.NET" Value="Public Property AbbreviatedDayNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ AbbreviatedDayNames { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AbbreviatedDayNames : string[] with get, set" Usage="System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a one-dimensional array of type <see cref="T:System.String" /> containing the culture-specific abbreviated names of the days of the week.</summary>
        <value>類型的一維陣列<see cref="T:System.String" />包含特定文化特性的縮寫的名稱的每週天數。 在陣列<see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" />包含"Sun 」、 「 星期一 」、 「 星期二 」、 「 星期三 」、 「 星期四 」、 「 星期五 」 和 「 星期六 」。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果設定此屬性，必須是一維陣列，並必須有完全七個元素。 第一個項目 （索引位置為零的項目） 表示中所定義的日曆週的第一天<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>屬性。  
  
 如果自訂格式字串"ddd"格式規範，<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>或<xref:System.DateTimeOffset.ToString%2A>方法包含的適當成員<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames%2A>取代"ddd"結果字串中的陣列。  
  
 如果這個屬性會受影響的值<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>屬性變更。 如果所選<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>不支援的縮寫星期幾名稱，此陣列包含完整的星期名稱。  
  
   
  
## Examples  
 下列範例會建立讀取/寫入<xref:System.Globalization.CultureInfo>物件，代表英文 （美國） 文化特性，並將指派的縮寫星期幾名稱至其<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames%2A>屬性。 然後它會使用中的"ddd"格式規範來顯示從 2014 年 28，一週日期的字串表示。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.abbreviateddaynames/cs/abbreviateddaynames1.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.abbreviateddaynames/vb/abbreviateddaynames1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The property is being set to <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">The property is being set to an array that is multidimensional or that has a length that is not exactly 7.</exception>
        <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only.</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.DayNames" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames" />
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedDayName(System.DayOfWeek)" />
      </Docs>
    </Member>
    <Member MemberName="AbbreviatedMonthGenitiveNames">
      <MemberSignature Language="C#" Value="public string[] AbbreviatedMonthGenitiveNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] AbbreviatedMonthGenitiveNames" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames" />
      <MemberSignature Language="VB.NET" Value="Public Property AbbreviatedMonthGenitiveNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ AbbreviatedMonthGenitiveNames { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AbbreviatedMonthGenitiveNames : string[] with get, set" Usage="System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a string array of abbreviated month names associated with the current <see cref="T:System.Globalization.DateTimeFormatInfo" /> object.</summary>
        <value>縮寫月份名稱的陣列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在某些語言中，屬於日期的月份名稱會出現在所有格。 例如，RU-RU 或俄文 （俄羅斯） 文化特性的日期所組成的日數和所有格的月份名稱，例如 1 Января （1 年 1 月）。 對於這些文化特性，自訂格式字串"MMM"格式規範，如果<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>或<xref:System.DateTimeOffset.ToString%2A>方法包含的適當成員<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames%2A>取代"MMM"結果字串中的陣列。  
  
 設定作業中，陣列必須是一維完全 13 個元素，因為<xref:System.Globalization.Calendar>物件容納有 13 個月的行事曆。 第十三個元素應該是具有 12 個月的行事曆， <xref:System.String.Empty?displayProperty=nameWithType>。 （索引位置為零的項目） 的第一個項目代表一年所定義的第一個月<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>屬性。  
  
 如果您設定<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames%2A>屬性，您也必須設定<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A>屬性。  
  
   
  
## Examples  
 下列範例會建立讀取/寫入<xref:System.Globalization.CultureInfo>物件，代表英文 （美國） 文化特性，並指派縮寫所有格的月份名稱及其<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A>和<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames%2A>屬性。 然後，它會顯示日期包含文化特性的支援日曆中的每個月份的縮寫的月份名稱的字串表示。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.abbreviatedmonthgenitivenames/cs/abbreviatedmonthnames1.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.abbreviatedmonthgenitivenames/vb/abbreviatedmonthnames1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">In a set operation, the array is multidimensional or has a length that is not exactly 13.</exception>
        <exception cref="T:System.ArgumentNullException">In a set operation, the array or one of the elements of the array is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">In a set operation, the current <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only.</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.MonthGenitiveNames" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames" />
      </Docs>
    </Member>
    <Member MemberName="AbbreviatedMonthNames">
      <MemberSignature Language="C#" Value="public string[] AbbreviatedMonthNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] AbbreviatedMonthNames" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames" />
      <MemberSignature Language="VB.NET" Value="Public Property AbbreviatedMonthNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ AbbreviatedMonthNames { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AbbreviatedMonthNames : string[] with get, set" Usage="System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a one-dimensional string array that contains the culture-specific abbreviated names of the months.</summary>
        <value>包含特定文化特性之月份縮寫名稱且具有 13 個項目的一維字串陣列。 針對 12 月制曆法，陣列的第 13 個項目為空字串。 在陣列<see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" />"年 10 月 」、 「 年 11 月"、"12"，包含 「 月 」、 「 日 」、 「 月 」、 「 日 」、 「 可能 」、"Jun"、"年 7 月 」、 「 年 8 月 」，「 9 月 」 和 「 」。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果您設定這個屬性時，必須是完全 13 個元素的一維陣列。 <xref:System.Globalization.Calendar> 物件會容納具有 13 個月的行事曆。 （索引位置為零的項目） 的第一個項目代表一年所定義的第一個月<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>屬性。  
  
 如果您設定<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A>屬性，您也必須設定<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames%2A>屬性。 <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A>和<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames%2A>屬性用來格式化日期使用下列格式字串：  
  
-   標準日期和時間格式字串的別名自訂格式字串中包含"MMM"格式規範。  
  
-   自訂日期和時間格式字串包含"MMM"格式規範。  
  
 如果這個屬性會受影響的值<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>屬性變更。 如果所選<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>不支援縮寫月份名稱，此陣列中包含的完整月份名稱。  
  
   
  
## Examples  
 下列範例會建立讀取/寫入<xref:System.Globalization.CultureInfo>物件，代表英文 （美國） 文化特性，並指派縮寫所有格的月份名稱及其<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A>和<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames%2A>屬性。 然後，它會顯示日期包含文化特性的支援日曆中的每個月份的縮寫的名稱的字串表示。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.abbreviatedmonthgenitivenames/cs/abbreviatedmonthnames1.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.abbreviatedmonthgenitivenames/vb/abbreviatedmonthnames1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The property is being set to <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">The property is being set to an array that is multidimensional or that has a length that is not exactly 13.</exception>
        <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only.</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.MonthNames" />
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedMonthName(System.Int32)" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames" />
      </Docs>
    </Member>
    <Member MemberName="AMDesignator">
      <MemberSignature Language="C#" Value="public string AMDesignator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AMDesignator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.AMDesignator" />
      <MemberSignature Language="VB.NET" Value="Public Property AMDesignator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AMDesignator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AMDesignator : string with get, set" Usage="System.Globalization.DateTimeFormatInfo.AMDesignator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the string designator for hours that are "ante meridiem" (before noon).</summary>
        <value>"ante meridiem" (正午以前) 小時的字串指示項。 預設值為<see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" />是 「 上午 」。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.AMDesignator%2A>屬性適用於所有時間從 0:00:00 （午夜） 到 11:59:59.999。  
  
 如果自訂格式字串"tt"格式規範，而時間高於中午之前<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>或<xref:System.DateTimeOffset.ToString%2A>方法包含的值<xref:System.Globalization.DateTimeFormatInfo.AMDesignator%2A>取代"tt"，結果字串中的屬性。 如果自訂格式字串包含"t"自訂格式規範，只有第一個字元的<xref:System.Globalization.DateTimeFormatInfo.AMDesignator%2A>就會包含屬性值。 您應該使用"tt"，它是上午區分所需的語言 到下午 範例是日文，上午 到下午 指示項的差異在於第二個字元，而不是第一個字元。  
  
 不使用上午文化特性 指示項，這個屬性會傳回空字串。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The property is being set to <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only.</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.PMDesignator" />
      </Docs>
    </Member>
    <Member MemberName="Calendar">
      <MemberSignature Language="C#" Value="public System.Globalization.Calendar Calendar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.Calendar Calendar" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.Calendar" />
      <MemberSignature Language="VB.NET" Value="Public Property Calendar As Calendar" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::Calendar ^ Calendar { System::Globalization::Calendar ^ get(); void set(System::Globalization::Calendar ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Calendar : System.Globalization.Calendar with get, set" Usage="System.Globalization.DateTimeFormatInfo.Calendar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.Calendar</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the calendar to use for the current culture.</summary>
        <value>目前文化特性所使用的曆法。 預設值為<see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" />是<see cref="T:System.Globalization.GregorianCalendar" />物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>屬性會接受有效的文化特性相關聯的行事曆<xref:System.Globalization.DateTimeFormatInfo>物件。 <xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=nameWithType>屬性會指定可由特定文化特性，行事曆和<xref:System.Globalization.CultureInfo.Calendar%2A?displayProperty=nameWithType>屬性會指定文化特性的預設曆法。  
  
 變更這個屬性的值會影響下列屬性： <xref:System.Globalization.DateTimeFormatInfo.MonthNames%2A>， <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A>， <xref:System.Globalization.DateTimeFormatInfo.DayNames%2A>， <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames%2A>， <xref:System.Globalization.DateTimeFormatInfo.CalendarWeekRule%2A>， <xref:System.Globalization.DateTimeFormatInfo.FirstDayOfWeek%2A>， <xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A>， <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>， <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>， <xref:System.Globalization.DateTimeFormatInfo.YearMonthPattern%2A>與<xref:System.Globalization.DateTimeFormatInfo.MonthDayPattern%2A>。  
  
 例如，如果目前執行緒的文化特性是日文，這個屬性會接受<xref:System.Globalization.JapaneseCalendar>， <xref:System.Globalization.GregorianCalendarTypes.Localized> <xref:System.Globalization.GregorianCalendar>，或<xref:System.Globalization.GregorianCalendarTypes.USEnglish> <xref:System.Globalization.GregorianCalendar>。 當<xref:System.Globalization.JapaneseCalendar>使用預設 date< 規範"gg y '\x5e74 AM' \x6708 有 '\x65e5' 」。 當<xref:System.Globalization.GregorianCalendarTypes.Localized> <xref:System.Globalization.GregorianCalendar>，使用預設 date< 規範"yyyy '\x5e74 AM' \x6708 有 '\x65e5' 」。  
  
   
  
## Examples  
 下列範例會定義`ChangeCalendar`文化特性的現行曆法變更為指定行事曆，除非已將現行曆法，或如果不受支援的文化特性的方法。 呼叫此方法的程式碼會具現化<xref:System.Globalization.CultureInfo>物件，代表阿拉伯文 （埃及） 文化特性，並在第一次嘗試將其行事曆變更為日本曆法。 因為不支援日本曆法，則方法會讓不會變更文化特性的曆法。 不過，因為 um al Qura 曆法是屬於<xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=nameWithType>方法未成功在讓現行曆法的集合，AR-EG 文化特性。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Calendar#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.DateTimeFormatInfo.Calendar/cs/CalendarTest1.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Calendar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.DateTimeFormatInfo.Calendar/vb/CalendarTest1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The property is being set to <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The property is being set to a <see cref="T:System.Globalization.Calendar" /> object that is not valid for the current culture.</exception>
        <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only.</exception>
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName="CalendarWeekRule">
      <MemberSignature Language="C#" Value="public System.Globalization.CalendarWeekRule CalendarWeekRule { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Globalization.CalendarWeekRule CalendarWeekRule" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.CalendarWeekRule" />
      <MemberSignature Language="VB.NET" Value="Public Property CalendarWeekRule As CalendarWeekRule" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CalendarWeekRule CalendarWeekRule { System::Globalization::CalendarWeekRule get(); void set(System::Globalization::CalendarWeekRule value); };" />
      <MemberSignature Language="F#" Value="member this.CalendarWeekRule : System.Globalization.CalendarWeekRule with get, set" Usage="System.Globalization.DateTimeFormatInfo.CalendarWeekRule" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CalendarWeekRule</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that specifies which rule is used to determine the first calendar week of the year.</summary>
        <value>判斷一年中第一個日曆週的值。 預設值為<see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" />是<see cref="F:System.Globalization.CalendarWeekRule.FirstDay" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果這個屬性會受影響的值<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>屬性變更。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The property is being set to a value that is not a valid <see cref="T:System.Globalization.CalendarWeekRule" /> value.</exception>
        <exception cref="T:System.InvalidOperationException">In a set operation, the current <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only.</exception>
        <altmember cref="T:System.Globalization.CalendarWeekRule" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="dateTimeFormatInfo.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a shallow copy of the <see cref="T:System.Globalization.DateTimeFormatInfo" />.</summary>
        <returns>A new <see cref="T:System.Globalization.DateTimeFormatInfo" /> object copied from the original <see cref="T:System.Globalization.DateTimeFormatInfo" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 複製為可寫入即使原始<xref:System.Globalization.DateTimeFormatInfo>物件是唯讀的。 因此，複製的內容可以修改與使用者定義的模式。  
  
 物件的淺層複本是只是物件的副本。 如果物件包含其他物件的參考，則淺層複製不會建立參考物件的複本。 它改為參考原始物件。 相較之下，物件的複本，以及該物件直接或間接參考的所有項目會建立物件的深層複本。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.DateTimeFormatInfo CurrentInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.DateTimeFormatInfo CurrentInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.CurrentInfo" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentInfo As DateTimeFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::DateTimeFormatInfo ^ CurrentInfo { System::Globalization::DateTimeFormatInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentInfo : System.Globalization.DateTimeFormatInfo" Usage="System.Globalization.DateTimeFormatInfo.CurrentInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.DateTimeFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a read-only <see cref="T:System.Globalization.DateTimeFormatInfo" /> object that formats values based on the current culture.</summary>
        <value>唯讀 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件，根據的是目前執行緒的 <see cref="T:System.Globalization.CultureInfo" /> 物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo>所傳回物件<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A>屬性會反映使用者覆寫。  
  
   
  
## Examples  
 下列範例會使用<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A>屬性，以擷取<xref:System.Globalization.DateTimeFormatInfo>物件，代表目前的文化特性，在此案例中是 EN-US 文化特性的格式設定慣例。 然後，它會顯示格式字串和六個的格式設定屬性的結果字串。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.CurrentInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.DateTimeFormatInfo.CurrentInfo/cs/CurrentInfo1.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.CurrentInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.DateTimeFormatInfo.CurrentInfo/vb/CurrentInfo1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="DateSeparator">
      <MemberSignature Language="C#" Value="public string DateSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DateSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.DateSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property DateSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DateSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DateSeparator : string with get, set" Usage="System.Globalization.DateTimeFormatInfo.DateSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the string that separates the components of a date, that is, the year, month, and day.</summary>
        <value>分隔日期組成部分 (即年、月和日) 的字串。 預設值為<see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" />是"/"。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果自訂格式字串"/"格式規範，<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>方法顯示的值<xref:System.Globalization.DateTimeFormatInfo.DateSeparator%2A>來取代"/"的結果字串中。  
  
 <xref:System.Globalization.DateTimeFormatInfo.DateSeparator%2A>屬性定義取代日期分隔符號的字串 （"/"自訂日期和時間格式規範） 在格式化作業中的結果字串中。 它也會定義剖析作業中的日期分隔符號字串。  
  
   
  
## Examples  
 下列範例會具現化<xref:System.Globalization.CultureInfo>物件 EN-US 文化特性中，變更其日期分隔符號"-"，並使用"d"、"G"和"g"標準格式字串來顯示日期。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.DateSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.dateseparator/cs/dateseparatorex.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.DateSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.dateseparator/vb/dateseparatorex.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The property is being set to <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only.</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" />
      </Docs>
    </Member>
    <Member MemberName="DayNames">
      <MemberSignature Language="C#" Value="public string[] DayNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] DayNames" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.DayNames" />
      <MemberSignature Language="VB.NET" Value="Public Property DayNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ DayNames { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DayNames : string[] with get, set" Usage="System.Globalization.DateTimeFormatInfo.DayNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a one-dimensional string array that contains the culture-specific full names of the days of the week.</summary>
        <value>包含特定文化特性之一週日期完整名稱的一維字串陣列。 在陣列<see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" />包含 「 星期日 」、 「 星期一 」、 「 星期二 」、 「 星期三 」、 「 星期四 」、 「 星期五 」 和 「 星期六 」。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果設定此屬性，必須是一維陣列，並必須有完全七個元素。 第一個項目 （索引位置為零的項目） 表示中所定義的日曆週的第一天<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>屬性。  
  
 如果自訂格式字串"dddd"格式規範，<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>方法包含的適當值<xref:System.Globalization.DateTimeFormatInfo.DayNames%2A>取代"dddd"，結果字串中的成員。  
  
 如果這個屬性會受影響的值<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>屬性變更。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The property is being set to <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">The property is being set to an array that is multidimensional or that has a length that is not exactly 7.</exception>
        <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only.</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.MonthNames" />
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetDayName(System.DayOfWeek)" />
      </Docs>
    </Member>
    <Member MemberName="FirstDayOfWeek">
      <MemberSignature Language="C#" Value="public DayOfWeek FirstDayOfWeek { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DayOfWeek FirstDayOfWeek" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.FirstDayOfWeek" />
      <MemberSignature Language="VB.NET" Value="Public Property FirstDayOfWeek As DayOfWeek" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DayOfWeek FirstDayOfWeek { DayOfWeek get(); void set(DayOfWeek value); };" />
      <MemberSignature Language="F#" Value="member this.FirstDayOfWeek : DayOfWeek with get, set" Usage="System.Globalization.DateTimeFormatInfo.FirstDayOfWeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DayOfWeek</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the first day of the week.</summary>
        <value>代表一週第一天的列舉值。 預設值為<see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" />是<see cref="F:System.DayOfWeek.Sunday" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果這個屬性會受影響的值<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>屬性變更。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The property is being set to a value that is not a valid <see cref="T:System.DayOfWeek" /> value.</exception>
        <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only.</exception>
        <altmember cref="T:System.DayOfWeek" />
      </Docs>
    </Member>
    <Member MemberName="FullDateTimePattern">
      <MemberSignature Language="C#" Value="public string FullDateTimePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullDateTimePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.FullDateTimePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property FullDateTimePattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FullDateTimePattern { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FullDateTimePattern : string with get, set" Usage="System.Globalization.DateTimeFormatInfo.FullDateTimePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the custom format string for a long date and long time value.</summary>
        <value>完整日期和時間值的自訂格式字串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 "F"標準格式字串為其別名<xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A>屬性。 換句話說，指派給這個屬性的自訂格式字串會定義結果字串"F"標準格式字串的格式。 如需詳細資訊，請參閱[標準日期和時間格式字串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)。  
  
 值<xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A>藉由串連動態產生屬性<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>和<xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A>以空格分隔的屬性。 在下列情況下，就會發生此動態指派：  
  
-   如果之前擷取的屬性值，則它已明確設定。  
  
-   當值<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>屬性變更。  
  
-   當值<xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A>屬性變更。  
  
 如果這個屬性會受影響的值<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>屬性變更。  
  
   
  
## Examples  
 下列範例顯示的值<xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A>少數的文化特性。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.FullDateTimePattern#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.FullDateTimePattern/CPP/dtfi_fulldatetimepattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.FullDateTimePattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.FullDateTimePattern/CS/dtfi_fulldatetimepattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.FullDateTimePattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.FullDateTimePattern/VB/dtfi_fulldatetimepattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The property is being set to <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetAbbreviatedDayName">
      <MemberSignature Language="C#" Value="public string GetAbbreviatedDayName (DayOfWeek dayofweek);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAbbreviatedDayName(valuetype System.DayOfWeek dayofweek) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedDayName(System.DayOfWeek)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAbbreviatedDayName(DayOfWeek dayofweek);" />
      <MemberSignature Language="F#" Value="member this.GetAbbreviatedDayName : DayOfWeek -&gt; string" Usage="dateTimeFormatInfo.GetAbbreviatedDayName dayofweek" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dayofweek" Type="System.DayOfWeek" />
      </Parameters>
      <Docs>
        <param name="dayofweek">A <see cref="T:System.DayOfWeek" /> value.</param>
        <summary>Returns the culture-specific abbreviated name of the specified day of the week based on the culture associated with the current <see cref="T:System.Globalization.DateTimeFormatInfo" /> object.</summary>
        <returns>The culture-specific abbreviated name of the day of the week represented by <paramref name="dayofweek" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設的非變異<xref:System.Globalization.DateTimeFormatInfo>物件，這個方法會傳回從字串<xref:System.Globalization.GregorianCalendar>:  
  
|`dayofweek`|傳回值|  
|-----------------|------------------|  
|星期日|「 Sun"|  
|星期一|「 星期一 」|  
|星期二|「 星期二 」|  
|週三|「 星期三 」|  
|星期四|「 星期四 」|  
|週五|「 星期五 」|  
|星期六|「 星期六 」|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="dayofweek" /> is not a valid <see cref="T:System.DayOfWeek" /> value.</exception>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.GregorianCalendar" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames" />
        <altmember cref="T:System.DayOfWeek" />
      </Docs>
    </Member>
    <Member MemberName="GetAbbreviatedEraName">
      <MemberSignature Language="C#" Value="public string GetAbbreviatedEraName (int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAbbreviatedEraName(int32 era) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAbbreviatedEraName (era As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAbbreviatedEraName(int era);" />
      <MemberSignature Language="F#" Value="member this.GetAbbreviatedEraName : int -&gt; string" Usage="dateTimeFormatInfo.GetAbbreviatedEraName era" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="era" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="era">The integer representing the era.</param>
        <summary>Returns the string containing the abbreviated name of the specified era, if an abbreviation exists.</summary>
        <returns>A string containing the abbreviated name of the specified era, if an abbreviation exists.  -or-  A string containing the full name of the era, if an abbreviation does not exist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 紀元名稱是指將一段時間從定點或事件曆法使用行事曆的名稱。 例如，"A.D.。 」 或者 「 年 」 是西曆中的目前紀元。  
  
 有效值`era`會列在<xref:System.Globalization.Calendar.Eras%2A>屬性的適當的類別衍生自<xref:System.Globalization.Calendar>。 例如：<xref:System.Globalization.JapaneseCalendar.Eras%2A?displayProperty=nameWithType>顯示的這項實作所支援的紀元清單。  
  
 在<xref:System.Globalization.JapaneseCalendar>類別，縮寫名稱是完整的紀元名稱的第一個字元的紀元。 這個字元是單一字元不區分大小寫英文字母縮寫或單一字元漢字縮寫。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="era" /> does not represent a valid era in the calendar specified in the <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> property.</exception>
        <block subset="none" type="usage">
          <para>如果<see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" />是<see cref="T:System.Globalization.TaiwanCalendar" />但<see cref="P:System.Threading.Thread.CurrentCulture" />不是"ZH-TW"，然後<see cref="P:System.Globalization.DateTimeFormatInfo.NativeCalendarName" />， <see cref="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)" />，和<see cref="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName(System.Int32)" />傳回空字串 ("")。</para>
        </block>
        <altmember cref="T:System.Globalization.JapaneseCalendar" />
        <altmember cref="T:System.Globalization.TaiwanCalendar" />
      </Docs>
    </Member>
    <Member MemberName="GetAbbreviatedMonthName">
      <MemberSignature Language="C#" Value="public string GetAbbreviatedMonthName (int month);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAbbreviatedMonthName(int32 month) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedMonthName(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAbbreviatedMonthName (month As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAbbreviatedMonthName(int month);" />
      <MemberSignature Language="F#" Value="member this.GetAbbreviatedMonthName : int -&gt; string" Usage="dateTimeFormatInfo.GetAbbreviatedMonthName month" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="month" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="month">An integer from 1 through 13 representing the name of the month to retrieve.</param>
        <summary>Returns the culture-specific abbreviated name of the specified month based on the culture associated with the current <see cref="T:System.Globalization.DateTimeFormatInfo" /> object.</summary>
        <returns>The culture-specific abbreviated name of the month represented by <paramref name="month" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設的非變異<xref:System.Globalization.DateTimeFormatInfo>物件，這個方法會傳回從字串<xref:System.Globalization.GregorianCalendar>物件。  
  
|`month`|傳回值|  
|-------------|------------------|  
|1|「 月 」|  
|2|「 日 」|  
|3|「 月 」|  
|4|「 日 」|  
|5|「 可能 」|  
|6|「 日 」|  
|7|「 年 7 月 」|  
|8|「 日 」|  
|9|「 9 月 」|  
|10|「 年 」|  
|11|「 日 」|  
|12|"Dec"|  
|13|""|  
  
 <xref:System.Globalization.Calendar> 物件可以容納 13 個月的行事曆。 針對 12 月制曆法，一律會傳回空字串做為 13 個月的名稱。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="month" /> is less than 1 or greater than 13.</exception>
        <altmember cref="T:System.Globalization.Calendar" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.GregorianCalendar" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAllDateTimePatterns">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns the standard patterns in which date and time values can be formatted.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAllDateTimePatterns">
      <MemberSignature Language="C#" Value="public string[] GetAllDateTimePatterns ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetAllDateTimePatterns() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllDateTimePatterns () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetAllDateTimePatterns();" />
      <MemberSignature Language="F#" Value="member this.GetAllDateTimePatterns : unit -&gt; string[]" Usage="dateTimeFormatInfo.GetAllDateTimePatterns " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns all the standard patterns in which date and time values can be formatted.</summary>
        <returns>An array that contains the standard patterns in which date and time values can be formatted.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會傳回陣列，其中包含對應至標準格式字串的所有自訂格式字串。 請參閱[標準日期和時間格式字串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)標準格式字串的清單。  
  
 您可以使用自訂格式字串中所傳回的陣列<xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns%2A>在格式化作業中的方法。 不過，如果您這樣做，日期和時間值的字串表示傳回，格式化作業不一定要剖析成功地`Parse`和`TryParse`方法。 因此，您不能假設的自訂格式字串由<xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns%2A>方法可以用來反覆存取日期和時間值。 下列範例說明此問題。 它會擷取<xref:System.Globalization.DateTimeFormatInfo>包含義大利 （義大利文） 文化特性格式資訊的物件。 將每個自訂格式字串中所傳回的陣列傳遞<xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns>方法<xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType>方法來建立日期和時間的字串表示。 這個範例會嘗試剖析此值，藉由呼叫<xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType>方法。 範例輸出所示，某些自訂格式字串不會產生日期和時間值也會成功反覆存取。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.getalldatetimepatterns/cs/getalldatetimepatternsex1.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.getalldatetimepatterns/vb/getalldatetimepatternsex1.vb#1)]  
  
 若要剖析的日期和時間，可以用來表示的預先定義的自訂格式的數字的字串表示，呼叫下列方法之一：  
  
-   <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>  
  
-   <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>  
  
-   <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>  
  
-   <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29?displayProperty=nameWithType>  
  
 傳回陣列中的自訂格式字串<xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns%2A>方法取決於其文化特性的現行曆法<xref:System.Globalization.DateTimeFormatInfo>物件可提供格式設定資訊。 如果變更行事曆，這個方法所傳回的陣列，也會變更。  
  
   
  
## Examples  
 下列範例會顯示日期和時間格式字串而異的文化特性，以及產生時，格式字串用來設定特定的日期格式的結果字串。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.getalldatetimepatterns/cs/getalldatetimepatternsinv.cs#3)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.getalldatetimepatterns/vb/getalldatetimepatternsinv.vb#3)]  
  
 此範例會具現化<xref:System.Globalization.DateTimeFormatInfo>物件，代表文化特性而異，藉由呼叫<xref:System.Globalization.DateTimeFormatInfo.%23ctor%2A>建構函式。 它也可以擷取<xref:System.Globalization.DateTimeFormatInfo>，代表從而異的文化特性<xref:System.Globalization.DateTimeFormatInfo.InvariantInfo%2A>屬性。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns(System.String[],System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="GetAllDateTimePatterns">
      <MemberSignature Language="C#" Value="public string[] GetAllDateTimePatterns (char format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetAllDateTimePatterns(char format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllDateTimePatterns (format As Char) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetAllDateTimePatterns(char format);" />
      <MemberSignature Language="F#" Value="member this.GetAllDateTimePatterns : char -&gt; string[]" Usage="dateTimeFormatInfo.GetAllDateTimePatterns format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="format">A standard format string.</param>
        <summary>Returns all the patterns in which date and time values can be formatted using the specified standard format string.</summary>
        <returns>An array containing the standard patterns in which date and time values can be formatted using the specified format string.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會傳回陣列，其中包含對應至特定的標準格式字串的自訂格式字串。 請參閱[標準日期和時間格式字串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)標準格式字串的清單。  
  
 您可以使用自訂格式字串中所傳回的陣列<xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns%2A>在格式化作業中的方法。 不過，如果您這樣做，日期和時間值的字串表示傳回，格式化作業不一定要剖析成功地`Parse`和`TryParse`方法。 因此，您不能假設的自訂格式字串由<xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns%2A>方法可以用來反覆存取日期和時間值。 下列範例說明此問題。 它會擷取<xref:System.Globalization.DateTimeFormatInfo>包含俄羅斯 （俄文） 文化特性格式資訊的物件。 它會呼叫<xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns%28System.Char%29>方法的每個標準格式字串，然後每個自訂格式字串中傳回的陣列傳遞<xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType>方法來建立日期和時間的字串表示。 這個範例會嘗試剖析此值，藉由呼叫<xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType>方法。 範例輸出所示，某些自訂格式字串不會產生日期和時間值也會成功反覆存取。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.getalldatetimepatterns/cs/getalldatetimepatternsex2.cs#2)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.getalldatetimepatterns/vb/getalldatetimepatternsex2.vb#2)]  
  
 若要剖析的日期和時間，可以用來表示的預先定義的自訂格式的數字的字串表示，呼叫下列方法之一：  
  
-   <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>  
  
-   <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>  
  
-   <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>  
  
-   <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29?displayProperty=nameWithType>  
  
 傳回陣列中的自訂格式字串<xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns%2A>方法取決於其文化特性的現行曆法<xref:System.Globalization.DateTimeFormatInfo>物件可提供格式設定資訊。 如果變更行事曆，這個方法所傳回的陣列，也會變更。  
  
   
  
## Examples  
 下列範例顯示現行曆法的日期和時間模式。  
  
 [!code-cpp[Classic DateTimeFormatInfo.GetAllDateTimePatterns Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic DateTimeFormatInfo.GetAllDateTimePatterns Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DateTimeFormatInfo.GetAllDateTimePatterns Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic DateTimeFormatInfo.GetAllDateTimePatterns Example/CS/source.cs#1)]
 [!code-vb[Classic DateTimeFormatInfo.GetAllDateTimePatterns Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic DateTimeFormatInfo.GetAllDateTimePatterns Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="format" /> is not a valid standard format string.</exception>
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns(System.String[],System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="GetDayName">
      <MemberSignature Language="C#" Value="public string GetDayName (DayOfWeek dayofweek);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetDayName(valuetype System.DayOfWeek dayofweek) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetDayName(System.DayOfWeek)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetDayName(DayOfWeek dayofweek);" />
      <MemberSignature Language="F#" Value="member this.GetDayName : DayOfWeek -&gt; string" Usage="dateTimeFormatInfo.GetDayName dayofweek" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dayofweek" Type="System.DayOfWeek" />
      </Parameters>
      <Docs>
        <param name="dayofweek">A <see cref="T:System.DayOfWeek" /> value.</param>
        <summary>Returns the culture-specific full name of the specified day of the week based on the culture associated with the current <see cref="T:System.Globalization.DateTimeFormatInfo" /> object.</summary>
        <returns>The culture-specific full name of the day of the week represented by <paramref name="dayofweek" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設的非變異<xref:System.Globalization.DateTimeFormatInfo>物件，這個方法會傳回從字串<xref:System.Globalization.GregorianCalendar>物件。  
  
|`dayofweek`|傳回值|  
|-----------------|------------------|  
|星期日|「 星期日 」|  
|週一|「 星期一 」|  
|星期二|「 星期二 」|  
|週三|「 星期三 」|  
|星期四|「 星期四 」|  
|週五|「 星期五 」|  
|星期六|「 星期六 」|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="dayofweek" /> is not a valid <see cref="T:System.DayOfWeek" /> value.</exception>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.GregorianCalendar" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.DayNames" />
        <altmember cref="T:System.DayOfWeek" />
      </Docs>
    </Member>
    <Member MemberName="GetEra">
      <MemberSignature Language="C#" Value="public int GetEra (string eraName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetEra(string eraName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetEra(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEra (eraName As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetEra(System::String ^ eraName);" />
      <MemberSignature Language="F#" Value="member this.GetEra : string -&gt; int" Usage="dateTimeFormatInfo.GetEra eraName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eraName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eraName">The string containing the name of the era.</param>
        <summary>Returns the integer representing the specified era.</summary>
        <returns>The integer representing the era, if <paramref name="eraName" /> is valid; otherwise, -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 紀元名稱是指將一段時間從定點或事件曆法使用行事曆的名稱。 例如，"A.D.。 」 或者 「 年 」 是西曆中的目前紀元。  
  
 與比較`eraName`不區分大小寫，例如，"A.D.。 」 相當於"a.d."。  
  
 <xref:System.Globalization.DateTimeFormatInfo.GetEra%2A> 會忽略標點符號紀元縮寫的名稱中，只有當<xref:System.Globalization.GregorianCalendar>中選取<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType>和文化特性使用"A.D.。 」 為紀元名稱時，也就是 「 A.D.。 」 相當於"AD"。  
  
 <xref:System.Globalization.DateTimeFormatInfo.GetEra%2A> 比較`eraName`所傳回的完整紀元名稱<xref:System.Globalization.DateTimeFormatInfo.GetEraName%2A>和所傳回的紀元縮寫的名稱<xref:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName%2A>。  
  
   
  
## Examples  
 下列範例會顯示<xref:System.Globalization.DateTimeFormatInfo>行事曆是西曆和文化特性使用紀元名稱"A.D.」 時，才會忽略在紀元名稱的標點符號。  
  
 [!code-cpp[System.Globalization.GregorianCalendar.GetEra#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.GregorianCalendar.GetEra/CPP/gregorian_getera.cpp#1)]
 [!code-csharp[System.Globalization.GregorianCalendar.GetEra#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.GregorianCalendar.GetEra/CS/gregorian_getera.cs#1)]
 [!code-vb[System.Globalization.GregorianCalendar.GetEra#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.GregorianCalendar.GetEra/VB/gregorian_getera.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="eraName" /> is <see langword="null" />.</exception>
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName="GetEraName">
      <MemberSignature Language="C#" Value="public string GetEraName (int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetEraName(int32 era) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEraName (era As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetEraName(int era);" />
      <MemberSignature Language="F#" Value="member this.GetEraName : int -&gt; string" Usage="dateTimeFormatInfo.GetEraName era" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="era" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="era">The integer representing the era.</param>
        <summary>Returns the string containing the name of the specified era.</summary>
        <returns>A string containing the name of the era.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 紀元名稱是指將一段時間從定點或事件曆法使用行事曆的名稱。 例如，"A.D.。 」 或者 「 年 」 是西曆中的目前紀元。  
  
 有效值`era`會列在<xref:System.Globalization.Calendar.Eras%2A>屬性的適當的類別衍生自<xref:System.Globalization.Calendar>。 例如：<xref:System.Globalization.JapaneseCalendar.Eras%2A?displayProperty=nameWithType>顯示的這項實作所支援的紀元清單。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="era" /> does not represent a valid era in the calendar specified in the <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> property.</exception>
        <block subset="none" type="usage">
          <para>如果以表示行事曆<see cref="T:System.Globalization.TaiwanCalendar" />但<see cref="P:System.Threading.Thread.CurrentCulture" />不是"ZH-TW"，然後<see cref="P:System.Globalization.DateTimeFormatInfo.NativeCalendarName" />， <see cref="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)" />，和<see cref="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName(System.Int32)" />傳回空字串 ("")。</para>
        </block>
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetEra(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetFormat">
      <MemberSignature Language="C#" Value="public object GetFormat (Type formatType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetFormat(class System.Type formatType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetFormat(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormat (formatType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetFormat(Type ^ formatType);" />
      <MemberSignature Language="F#" Value="abstract member GetFormat : Type -&gt; obj&#xA;override this.GetFormat : Type -&gt; obj" Usage="dateTimeFormatInfo.GetFormat formatType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormatProvider.GetFormat(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="formatType">The type of the required formatting service.</param>
        <summary>Returns an object of the specified type that provides a date and time  formatting service.</summary>
        <returns>The current  object, if <paramref name="formatType" /> is the same as the type of the current <see cref="T:System.Globalization.DateTimeFormatInfo" />; otherwise, <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Format(String, IFormatProvider)`基底資料類型所支援的方法叫用這個方法時目前<xref:System.Globalization.DateTimeFormatInfo>物件傳遞為<xref:System.IFormatProvider>參數。 這個方法會實作 <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormatProvider" />
        <altmember cref="M:System.Globalization.NumberFormatInfo.GetFormat(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public static System.Globalization.DateTimeFormatInfo GetInstance (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.DateTimeFormatInfo GetInstance(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetInstance(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetInstance (provider As IFormatProvider) As DateTimeFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::DateTimeFormatInfo ^ GetInstance(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member GetInstance : IFormatProvider -&gt; System.Globalization.DateTimeFormatInfo" Usage="System.Globalization.DateTimeFormatInfo.GetInstance provider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.DateTimeFormatInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">The <see cref="T:System.IFormatProvider" /> that gets the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object.  -or-  <see langword="null" /> to get <see cref="P:System.Globalization.DateTimeFormatInfo.CurrentInfo" />.</param>
        <summary>Returns the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object associated with the specified <see cref="T:System.IFormatProvider" />.</summary>
        <returns>A <see cref="T:System.Globalization.DateTimeFormatInfo" /> object associated with <see cref="T:System.IFormatProvider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會使用<xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>方法`formatProvider`使用<xref:System.Globalization.DateTimeFormatInfo>物件當做`Type`參數。 如果`formatProvider`是`null`或<xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>傳回`null`，這個方法會傳回<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A>。  
  
 您的應用程式可以取得<xref:System.Globalization.DateTimeFormatInfo>物件特定的文化特性，使用下列方法之一：  
  
-   <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> 屬性。  
  
-   <xref:System.Globalization.DateTimeFormatInfo.GetInstance%2A>方法，其中`provider`是<xref:System.Globalization.CultureInfo>物件。  
  
 A<xref:System.Globalization.DateTimeFormatInfo>只而異的文化特性或特定文化特性，而不中性文化特性，可以建立物件。  
  
 如需有關的文化特性而異，特定的文化特性和中性文化特性的詳細資訊，請參閱<xref:System.Globalization.CultureInfo>類別描述。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="GetMonthName">
      <MemberSignature Language="C#" Value="public string GetMonthName (int month);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetMonthName(int32 month) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetMonthName(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMonthName (month As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetMonthName(int month);" />
      <MemberSignature Language="F#" Value="member this.GetMonthName : int -&gt; string" Usage="dateTimeFormatInfo.GetMonthName month" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="month" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="month">An integer from 1 through 13 representing the name of the month to retrieve.</param>
        <summary>Returns the culture-specific full name of the specified month based on the culture associated with the current <see cref="T:System.Globalization.DateTimeFormatInfo" /> object.</summary>
        <returns>The culture-specific full name of the month represented by <paramref name="month" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設的非變異<xref:System.Globalization.DateTimeFormatInfo>物件，這個方法會傳回從字串<xref:System.Globalization.GregorianCalendar>物件。  
  
|`month`|傳回值|  
|-------------|------------------|  
|1|"January"|  
|2|「 年 2 月 」|  
|3|「 年 3 月 」|  
|4|「 年 」|  
|5|「 可能 」|  
|6|「 年 6 月 」|  
|7|「 年 7 月 」|  
|8|「 年 」|  
|9|「 年 9 月 」|  
|10|「 年 10 月 」|  
|11|"November"|  
|12|「 年 12 月 」|  
|13|""|  
  
 <xref:System.Globalization.Calendar> 物件可以容納 13 個月的行事曆。 針對 12 月制曆法，一律會傳回空字串做為 13 個月的名稱。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="month" /> is less than 1 or greater than 13.</exception>
        <altmember cref="T:System.Globalization.Calendar" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.GregorianCalendar" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.MonthNames" />
      </Docs>
    </Member>
    <Member MemberName="GetShortestDayName">
      <MemberSignature Language="C#" Value="public string GetShortestDayName (DayOfWeek dayOfWeek);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetShortestDayName(valuetype System.DayOfWeek dayOfWeek) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetShortestDayName(System.DayOfWeek)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetShortestDayName(DayOfWeek dayOfWeek);" />
      <MemberSignature Language="F#" Value="member this.GetShortestDayName : DayOfWeek -&gt; string" Usage="dateTimeFormatInfo.GetShortestDayName dayOfWeek" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dayOfWeek" Type="System.DayOfWeek" />
      </Parameters>
      <Docs>
        <param name="dayOfWeek">One of the <see cref="T:System.DayOfWeek" /> values.</param>
        <summary>Obtains the shortest abbreviated day name for a specified day of the week associated with the current <see cref="T:System.Globalization.DateTimeFormatInfo" /> object.</summary>
        <returns>The abbreviated name of the week that corresponds to the <paramref name="dayOfWeek" /> parameter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例會示範數個方法和屬性，指定日期和時間格式模式，原生的行事曆名稱和完整和縮寫月份和星期幾名稱。  
  
 [!code-csharp[sys.glob.DTFI1#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.DTFI1/cs/dtfi1.cs#1)]
 [!code-vb[sys.glob.DTFI1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.DTFI1/vb/dtfi1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="dayOfWeek" /> is not a value in the <see cref="T:System.DayOfWeek" /> enumeration.</exception>
      </Docs>
    </Member>
    <Member MemberName="InvariantInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.DateTimeFormatInfo InvariantInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.DateTimeFormatInfo InvariantInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InvariantInfo As DateTimeFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::DateTimeFormatInfo ^ InvariantInfo { System::Globalization::DateTimeFormatInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InvariantInfo : System.Globalization.DateTimeFormatInfo" Usage="System.Globalization.DateTimeFormatInfo.InvariantInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.DateTimeFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the default read-only <see cref="T:System.Globalization.DateTimeFormatInfo" /> object that is culture-independent (invariant).</summary>
        <value>與文化特性無關 (非變異) 的唯讀物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性不會變更，不論目前的文化特性。 因為這個緣故，文化特性而異的<xref:System.Globalization.DateTimeFormatInfo>物件可以用來產生一致、 文化特性無關的結果，在剖析及格式為多重文化特性的資料上作業。 例如，如果多個文化特性的日期和時間資料是以字串形式保存，它可以進行格式化使用<xref:System.Globalization.DateTimeFormatInfo>而異的文化特性的物件和已儲存。 它會剖析使用因文化特性而異的<xref:System.Globalization.DateTimeFormatInfo>物件。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Globalization.DateTimeFormatInfo.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only.</summary>
        <value>
          <see langword="true" /> 如果<see cref="T:System.Globalization.DateTimeFormatInfo" />物件是唯讀，否則<see langword="false" />。</value>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.ReadOnly(System.Globalization.DateTimeFormatInfo)" />
      </Docs>
    </Member>
    <Member MemberName="LongDatePattern">
      <MemberSignature Language="C#" Value="public string LongDatePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LongDatePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.LongDatePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property LongDatePattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LongDatePattern { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.LongDatePattern : string with get, set" Usage="System.Globalization.DateTimeFormatInfo.LongDatePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the custom format string for a long date value.</summary>
        <value>完整日期值的自訂格式字串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>屬性定義特定文化特性的格式的呼叫所傳回的日期字串<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>和<xref:System.DateTimeOffset.ToString%2A?displayProperty=nameWithType>方法而由複合格式字串時，會提供"D"標準格式字串。 下列範例將說明下列之間的關聯性:"D"標準格式字串中，自訂格式字串所傳回<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>屬性和日期的特定文化特性的表示法。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.LongDatePattern#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongDatePattern/CS/longdatepattern1.cs#2)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.LongDatePattern#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongDatePattern/VB/longdatepattern1.vb#2)]  
  
 請參閱[自訂日期和時間格式字串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)為可以組合來建構例如"dddd，dd MMMM yyyy"自訂格式字串的個別的自訂格式規範。  
  
 您應該完全相符的字串，而不是使用日期分隔符號預留位置完整日期模式中設定日期分隔符號。 例如，若要取得模式 MM DD yyyy，設定為 「 MM-DD yyyy 的"的完整日期模式。  
  
 如果文化特性變更所使用的行事曆，可以變更這個屬性的值。 例如，下列範例示範如何<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>屬性<xref:System.Globalization.CultureInfo>表示阿拉伯文 （敘利亞） 文化特性物件時變更<xref:System.Globalization.Calendar>文化特性變更所使用的物件。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.LongDatePattern#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongDatePattern/CS/longdatepattern2.cs#3)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.LongDatePattern#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongDatePattern/VB/longdatepattern2.vb#3)]  
  
   
  
## Examples  
 下列範例顯示的值<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>一些文化特性的屬性。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.LongDatePattern#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongDatePattern/CPP/dtfi_longdatepattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.LongDatePattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongDatePattern/CS/dtfi_longdatepattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.LongDatePattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongDatePattern/VB/dtfi_longdatepattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The property is being set to <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only.</exception>
      </Docs>
    </Member>
    <Member MemberName="LongTimePattern">
      <MemberSignature Language="C#" Value="public string LongTimePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LongTimePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.LongTimePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property LongTimePattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LongTimePattern { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.LongTimePattern : string with get, set" Usage="System.Globalization.DateTimeFormatInfo.LongTimePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the custom format string for a long time value.</summary>
        <value>完整時間值的格式模式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A>屬性定義特定文化特性的格式的呼叫所傳回的日期字串<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>和<xref:System.DateTimeOffset.ToString%2A?displayProperty=nameWithType>方法而由複合格式字串時，會提供"T"標準格式字串。  
  
 我們建議您在完全相符的字串，而不是使用時間分隔符號預留位置很長的時間模式中設定時間分隔符號。 例如，若要取得模式 h--分秒，設定完整日期模式，以"h-mm-ss"。  
  
   
  
## Examples  
 下列範例顯示的值<xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A>少數的文化特性。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.LongTimePattern#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongTimePattern/CPP/dtfi_longtimepattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.LongTimePattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongTimePattern/CS/dtfi_longtimepattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.LongTimePattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongTimePattern/VB/dtfi_longtimepattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The property is being set to <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only.</exception>
      </Docs>
    </Member>
    <Member MemberName="MonthDayPattern">
      <MemberSignature Language="C#" Value="public string MonthDayPattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MonthDayPattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.MonthDayPattern" />
      <MemberSignature Language="VB.NET" Value="Public Property MonthDayPattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MonthDayPattern { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MonthDayPattern : string with get, set" Usage="System.Globalization.DateTimeFormatInfo.MonthDayPattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the custom format string for a month and day value.</summary>
        <value>月份和日值的自訂格式字串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.MonthDayPattern%2A>屬性定義特定文化特性的格式的呼叫所傳回的日期字串<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>和<xref:System.DateTimeOffset.ToString%2A?displayProperty=nameWithType>方法而由複合格式字串時，會提供"m"和"M"標準格式字串。  
  
 如果這個屬性會受影響的值<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>屬性變更。  
  
 我們建議您在完全相符的字串，而不是使用日期分隔符號預留位置月和日模式中設定日期分隔符號。 例如，若要取得模式 MM DD，設定月份和日期模式，以"MM DD"。  
  
   
  
## Examples  
 下列範例顯示的值<xref:System.Globalization.DateTimeFormatInfo.MonthDayPattern%2A>少數的文化特性。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.MonthDayPattern#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.MonthDayPattern/CPP/dtfi_monthdaypattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.MonthDayPattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.MonthDayPattern/CS/dtfi_monthdaypattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.MonthDayPattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.MonthDayPattern/VB/dtfi_monthdaypattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The property is being set to <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only.</exception>
      </Docs>
    </Member>
    <Member MemberName="MonthGenitiveNames">
      <MemberSignature Language="C#" Value="public string[] MonthGenitiveNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] MonthGenitiveNames" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.MonthGenitiveNames" />
      <MemberSignature Language="VB.NET" Value="Public Property MonthGenitiveNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ MonthGenitiveNames { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MonthGenitiveNames : string[] with get, set" Usage="System.Globalization.DateTimeFormatInfo.MonthGenitiveNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a string array of month names associated with the current <see cref="T:System.Globalization.DateTimeFormatInfo" /> object.</summary>
        <value>月份名稱的字串陣列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在某些語言中，屬於日期的月份名稱會出現在所有格。 比方說，日期之俄文 （俄羅斯） 或 「 RU-RU"，文化特性是由日數字和所有格的月份名稱，例如 1 Января。  
  
 當設定這個屬性時，陣列必須是一維陣列，而且必須完全 13 個元素。 <xref:System.Globalization.Calendar> 物件會容納具有 13 個月的行事曆。 （索引位置為零的項目） 的第一個項目代表一年所定義的第一個月<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>屬性。如果您設定<xref:System.Globalization.DateTimeFormatInfo.MonthGenitiveNames%2A>屬性，您也必須設定<xref:System.Globalization.DateTimeFormatInfo.MonthNames%2A>屬性。  
  
   
  
## Examples  
 下列範例會示範數個方法和屬性，指定日期和時間格式模式，原生的行事曆名稱和完整和縮寫月份和星期幾名稱。  
  
 [!code-csharp[sys.glob.DTFI1#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.DTFI1/cs/dtfi1.cs#1)]
 [!code-vb[sys.glob.DTFI1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.DTFI1/vb/dtfi1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">In a set operation, the array is multidimensional or has a length that is not exactly 13.</exception>
        <exception cref="T:System.ArgumentNullException">In a set operation, the array or one of its elements is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">In a set operation, the current <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only.</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.MonthNames" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames" />
      </Docs>
    </Member>
    <Member MemberName="MonthNames">
      <MemberSignature Language="C#" Value="public string[] MonthNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] MonthNames" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.MonthNames" />
      <MemberSignature Language="VB.NET" Value="Public Property MonthNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ MonthNames { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MonthNames : string[] with get, set" Usage="System.Globalization.DateTimeFormatInfo.MonthNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a one-dimensional array of type <see cref="T:System.String" /> containing the culture-specific full names of the months.</summary>
        <value>類型的一維陣列<see cref="T:System.String" />包含月份的特定文化特性的完整名稱。 在 12 月制曆法中，陣列的第 13 個項目為空字串。 在陣列<see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" />包含"January"、"February"、"年 3 月 」、 「 年 」、 「 可能 」、"June"、"7"、"August"、"年 9 月 」、 「 年 10 月 」、"November"、"年 12 月 」 和 「 」。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當設定這個屬性時，陣列必須是一維陣列，而且必須完全 13 個元素。 <xref:System.Globalization.Calendar> 物件會容納具有 13 個月的行事曆。 （索引位置為零的項目） 的第一個項目代表一年所定義的第一個月<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>屬性。  
  
 如果您設定<xref:System.Globalization.DateTimeFormatInfo.MonthNames%2A>屬性，您也必須設定<xref:System.Globalization.DateTimeFormatInfo.MonthGenitiveNames%2A>屬性。  
  
 如果自訂模式包含的格式模式"MMMM"，<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>顯示的值<xref:System.Globalization.DateTimeFormatInfo.MonthNames%2A>取代"MMMM"中的格式模式。  
  
 如果這個屬性會受影響的值<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>屬性變更。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The property is being set to <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">The property is being set to an array that is multidimensional or that has a length that is not exactly 13.</exception>
        <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only.</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.MonthGenitiveNames" />
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetMonthName(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="NativeCalendarName">
      <MemberSignature Language="C#" Value="public string NativeCalendarName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NativeCalendarName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.NativeCalendarName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NativeCalendarName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NativeCalendarName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NativeCalendarName : string" Usage="System.Globalization.DateTimeFormatInfo.NativeCalendarName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the native name of the calendar associated with the current <see cref="T:System.Globalization.DateTimeFormatInfo" /> object.</summary>
        <value>在目前相關聯的文化特性的曆法的原生名稱<see cref="T:System.Globalization.DateTimeFormatInfo" />物件，該名稱是否可用或空字串 ("") 如果無法使用原生的行事曆名稱。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例會示範數個方法和屬性，指定日期和時間格式模式，原生的行事曆名稱和完整和縮寫月份和星期幾名稱。  
  
 [!code-csharp[sys.glob.DTFI1#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.DTFI1/cs/dtfi1.cs#1)]
 [!code-vb[sys.glob.DTFI1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.DTFI1/vb/dtfi1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>如果<see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" />是<see cref="T:System.Globalization.TaiwanCalendar" />但<see cref="P:System.Threading.Thread.CurrentCulture" />不是"ZH-TW"，然後<see cref="P:System.Globalization.DateTimeFormatInfo.NativeCalendarName" />， <see cref="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)" />，和<see cref="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName(System.Int32)" />傳回空字串 ("")。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="PMDesignator">
      <MemberSignature Language="C#" Value="public string PMDesignator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PMDesignator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.PMDesignator" />
      <MemberSignature Language="VB.NET" Value="Public Property PMDesignator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PMDesignator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PMDesignator : string with get, set" Usage="System.Globalization.DateTimeFormatInfo.PMDesignator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the string designator for hours that are "post meridiem" (after noon).</summary>
        <value>"post meridiem" (正午以後) 小時的字串指示項。 預設值為<see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" />是"PM"。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.PMDesignator%2A>屬性用於針對所有從 12:00:00 （中午） 到時間 23:59:59.999。  
  
 如果自訂的模式包括格式模式"tt"，而時間是正午以後，<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>顯示的值<xref:System.Globalization.DateTimeFormatInfo.PMDesignator%2A>取代"tt"中的格式模式。 如果自訂模式包含格式模式"t"，第一個字元的<xref:System.Globalization.DateTimeFormatInfo.PMDesignator%2A>隨即出現。 您的應用程式應該使用"tt"語言，是為了維護 AM 和 PM 之間的差別。 其中一種就是日文，日文的 AM 和 PM 指示項的第二個字元 (非第一個字元) 不同。  
  
 不使用 PM 指示項的文化特性，這個屬性會傳回空字串。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The property is being set to <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only.</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AMDesignator" />
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public static System.Globalization.DateTimeFormatInfo ReadOnly (System.Globalization.DateTimeFormatInfo dtfi);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.DateTimeFormatInfo ReadOnly(class System.Globalization.DateTimeFormatInfo dtfi) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.ReadOnly(System.Globalization.DateTimeFormatInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadOnly (dtfi As DateTimeFormatInfo) As DateTimeFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::DateTimeFormatInfo ^ ReadOnly(System::Globalization::DateTimeFormatInfo ^ dtfi);" />
      <MemberSignature Language="F#" Value="static member ReadOnly : System.Globalization.DateTimeFormatInfo -&gt; System.Globalization.DateTimeFormatInfo" Usage="System.Globalization.DateTimeFormatInfo.ReadOnly dtfi" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.DateTimeFormatInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dtfi" Type="System.Globalization.DateTimeFormatInfo" />
      </Parameters>
      <Docs>
        <param name="dtfi">The <see cref="T:System.Globalization.DateTimeFormatInfo" /> object to wrap.</param>
        <summary>Returns a read-only <see cref="T:System.Globalization.DateTimeFormatInfo" /> wrapper.</summary>
        <returns>A read-only <see cref="T:System.Globalization.DateTimeFormatInfo" /> wrapper.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個包裝函式可防止任何修改`dtfi`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dtfi" /> is <see langword="null" />.</exception>
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="RFC1123Pattern">
      <MemberSignature Language="C#" Value="public string RFC1123Pattern { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RFC1123Pattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.RFC1123Pattern" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RFC1123Pattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RFC1123Pattern { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RFC1123Pattern : string" Usage="System.Globalization.DateTimeFormatInfo.RFC1123Pattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the custom format string for a time value that is based on the Internet Engineering Task Force (IETF) Request for Comments (RFC) 1123 specification.</summary>
        <value>根據 IETF RFC 1123 規格的時間值的自訂格式字串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A>屬性定義特定文化特性的格式的呼叫所傳回的日期字串<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>和<xref:System.DateTimeOffset.ToString%2A?displayProperty=nameWithType>方法而由複合格式字串時，會提供"r"和"R"標準格式字串。  
  
 RFC1123 模式反映已定義的標準，且屬性為唯讀。 因此，它一律為相同，不論文化特性。 自訂格式字串為 "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'"。  
  
   
  
## Examples  
 下列範例顯示一些文化特性 RFC1123Pattern 值。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.RFC1123Pattern#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.RFC1123Pattern/CPP/dtfi_rfc1123pattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.RFC1123Pattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.RFC1123Pattern/CS/dtfi_rfc1123pattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.RFC1123Pattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.RFC1123Pattern/VB/dtfi_rfc1123pattern.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAllDateTimePatterns">
      <MemberSignature Language="C#" Value="public void SetAllDateTimePatterns (string[] patterns, char format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAllDateTimePatterns(string[] patterns, char format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns(System.String[],System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAllDateTimePatterns (patterns As String(), format As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAllDateTimePatterns(cli::array &lt;System::String ^&gt; ^ patterns, char format);" />
      <MemberSignature Language="F#" Value="member this.SetAllDateTimePatterns : string[] * char -&gt; unit" Usage="dateTimeFormatInfo.SetAllDateTimePatterns (patterns, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="patterns" Type="System.String[]" />
        <Parameter Name="format" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="patterns">An array of custom format strings.</param>
        <param name="format">The standard format string associated with the custom format strings specified in the <c>patterns</c> parameter.</param>
        <summary>Sets the custom date and time format strings that correspond to a specified standard format string.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns%2A>方法為特定標準日期和時間格式字串定義對應的自訂格式字串。 如果呼叫的日期和時間格式化方法包含的標準日期和時間格式字串所指定`format`，此方法會使用中的第一個項目`patterns`以定義結果字串的格式陣列。  
  
> [!WARNING]
>  `Parse`和`TryParse`方法不完全重複中的所有字串`patterns`時剖析的日期和時間的字串表示。 如果您需要在剖析作業中具有特定格式的日期和時間字串，您應該傳遞至有效的格式陣列<xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>， <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>， <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>，或<xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29?displayProperty=nameWithType>方法。  
  
 您可以定義自訂格式字串會對應至"d"、"D"、"t"、"T"和"y"或"Y"標準日期和時間格式字串。 如果值`format`為其他任何標準格式字串，<xref:System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns%2A>方法會擲回<xref:System.ArgumentException>。  
  
 如果您的自訂日期和時間格式字串包含日期分隔符號，您應該明確指定為日期分隔符號，而不是依賴具有特定日期分隔符號會取代"/"自訂格式規範的剖析或格式化方法。 比方說，若要取得模式 MM DD yyyy，使用 「 公釐-DD yyyy 的 」 的模式。  
  
   
  
## Examples  
 下列範例會具現化<xref:System.Globalization.CultureInfo>物件代表"EN-US"（英文-美國） 文化特性，並使用它來剖析的日期和時間使用"Y"標準格式字串的字串陣列。 然後它會使用<xref:System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns%2A>方法使新的自訂格式字串為"Y"標準格式字串，並嘗試剖析日期和時間字串的陣列。 範例輸出所示範新的自訂格式字串在剖析和格式化作業中使用。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.setalldatetimepatterns/cs/setalldatetimepatterns.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.setalldatetimepatterns/vb/setalldatetimepatterns.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="patterns" /> is <see langword="null" /> or a zero-length array.  -or-  <paramref name="format" /> is not a valid standard format string or is a standard format string whose patterns cannot be set.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="patterns" /> has an array element whose value is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">This <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only.</exception>
        <altmember cref="Overload:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns" />
      </Docs>
    </Member>
    <Member MemberName="ShortDatePattern">
      <MemberSignature Language="C#" Value="public string ShortDatePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ShortDatePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.ShortDatePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property ShortDatePattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ShortDatePattern { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ShortDatePattern : string with get, set" Usage="System.Globalization.DateTimeFormatInfo.ShortDatePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the custom format string for a short date value.</summary>
        <value>簡短日期值的自訂格式字串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>屬性定義特定文化特性的格式的呼叫所傳回的日期字串<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>和<xref:System.DateTimeOffset.ToString%2A?displayProperty=nameWithType>方法而由複合格式字串時，會提供"d"標準格式字串。  
  
 如果這個屬性會受影響的值<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>屬性變更。  
  
   
  
## Examples  
 下列範例顯示的值<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>使用屬性和日期值格式化<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>一些文化特性的屬性。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.ShortDatePattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.ShortDatePattern/CS/dtfi_shortdatepattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.ShortDatePattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.ShortDatePattern/VB/dtfi_shortdatepattern.vb#1)]  
  
 下列範例會修改<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>屬性<xref:System.Globalization.DateTimeFormatInfo>物件，表示英文 （美國） 文化特性的格式設定慣例。 它也會顯示日期值兩次，先以反映原始<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>屬性，然後以反映新的屬性值。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.ShortDatePattern#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.ShortDatePattern/CS/shortdatepattern1.cs#2)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.ShortDatePattern#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.ShortDatePattern/VB/shortdatepattern1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The property is being set to <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only.</exception>
      </Docs>
    </Member>
    <Member MemberName="ShortestDayNames">
      <MemberSignature Language="C#" Value="public string[] ShortestDayNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] ShortestDayNames" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.ShortestDayNames" />
      <MemberSignature Language="VB.NET" Value="Public Property ShortestDayNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ ShortestDayNames { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ShortestDayNames : string[] with get, set" Usage="System.Globalization.DateTimeFormatInfo.ShortestDayNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a string array of the shortest unique abbreviated day names associated with the current <see cref="T:System.Globalization.DateTimeFormatInfo" /> object.</summary>
        <value>日名稱的字串陣列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例會示範數個方法和屬性，指定日期和時間格式模式，原生的行事曆名稱和完整和縮寫月份和星期幾名稱。  
  
 [!code-csharp[sys.glob.DTFI1#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.DTFI1/cs/dtfi1.cs#1)]
 [!code-vb[sys.glob.DTFI1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.DTFI1/vb/dtfi1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">In a set operation, the array does not have exactly seven elements.</exception>
        <exception cref="T:System.ArgumentNullException">In a set operation, the value array or one of the elements of the value array is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">In a set operation, the current <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only.</exception>
      </Docs>
    </Member>
    <Member MemberName="ShortTimePattern">
      <MemberSignature Language="C#" Value="public string ShortTimePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ShortTimePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.ShortTimePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property ShortTimePattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ShortTimePattern { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ShortTimePattern : string with get, set" Usage="System.Globalization.DateTimeFormatInfo.ShortTimePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the custom format string for a short time value.</summary>
        <value>簡短時間值的自訂格式字串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A>屬性定義特定文化特性的格式的呼叫所傳回的日期字串<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>和<xref:System.DateTimeOffset.ToString%2A?displayProperty=nameWithType>方法而由複合格式字串時，會提供"t"標準格式字串。  
  
 我們建議您在完全相符的字串，而不是使用時間分隔符號預留位置簡短時間模式中設定的時間分隔符號。 例如，若要取得模式 h--分秒，設定簡短時間模式，以"h-mm-ss"。  
  
   
  
## Examples  
 下列範例顯示的值<xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A>少數的文化特性。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.ShortTimePattern#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.ShortTimePattern/CPP/dtfi_shorttimepattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.ShortTimePattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.ShortTimePattern/CS/dtfi_shorttimepattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.ShortTimePattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.ShortTimePattern/VB/dtfi_shorttimepattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The property is being set to <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only.</exception>
      </Docs>
    </Member>
    <Member MemberName="SortableDateTimePattern">
      <MemberSignature Language="C#" Value="public string SortableDateTimePattern { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SortableDateTimePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SortableDateTimePattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SortableDateTimePattern { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SortableDateTimePattern : string" Usage="System.Globalization.DateTimeFormatInfo.SortableDateTimePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the custom format string for a sortable date and time value.</summary>
        <value>可排序日期和時間值的自訂格式字串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern%2A>屬性定義特定文化特性的格式的呼叫所傳回的日期字串<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>和<xref:System.DateTimeOffset.ToString%2A?displayProperty=nameWithType>方法而由複合格式字串時，會提供"s"標準格式字串。  
  
 所傳回的格式字串<xref:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern%2A>屬性會反映已定義的標準 (ISO 8601)，且屬性為唯讀。 因此，它一律為相同，不論文化特性。 自訂格式字串為 "yyyy'-'MM'-'dd'T'HH':'mm':'ss"。  
  
   
  
## Examples  
 下列範例顯示的值<xref:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern%2A>少數的文化特性。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.SortableDateTimePattern#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.SortableDateTimePattern/CPP/dtfi_sortabledatetimepattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.SortableDateTimePattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.SortableDateTimePattern/CS/dtfi_sortabledatetimepattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.SortableDateTimePattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.SortableDateTimePattern/VB/dtfi_sortabledatetimepattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern" />
      </Docs>
    </Member>
    <Member MemberName="TimeSeparator">
      <MemberSignature Language="C#" Value="public string TimeSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TimeSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property TimeSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TimeSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TimeSeparator : string with get, set" Usage="System.Globalization.DateTimeFormatInfo.TimeSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the string that separates the components of time, that is, the hour, minutes, and seconds.</summary>
        <value>分隔時間組成部分的字串。 預設值為<see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" />是":"。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果自訂模式包含的格式模式":"，<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>顯示的值<xref:System.Globalization.DateTimeFormatInfo.TimeSeparator%2A>取代":"中的格式模式。  
  
 時間分隔符號衍生自<xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A>屬性。 我們建議您簡單地說設定時間分隔符號，或長時間模式，而不是使用時間分隔符號預留位置完全相符的字串。 例如，若要取得模式 h--分秒，設定模式，以"h-mm-ss"。 這種做法也可讓您設定模式，例如"h'h ' mm am 'ss'"(3 h 36 m 12s)，包括多種類型的分隔符號。 <xref:System.Globalization.DateTimeFormatInfo.TimeSeparator%2A>屬性定義取代時間分隔符號的字串 (":"自訂日期和時間格式規範) 在格式化作業中的結果字串中。 它也會定義剖析作業中的時間分隔符號字串。  
  
   
  
## Examples  
 下列範例會具現化<xref:System.Globalization.CultureInfo>物件 EN-US 文化特性中，變更其日期分隔符號"。"，並使用"t"、"T"、"F"、"f"、"G"和"g"標準格式字串來顯示日期。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.TimeSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.timeseparator/cs/timeseparatorex.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.TimeSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.timeseparator/vb/timeseparatorex.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The property is being set to <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only.</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.DateSeparator" />
      </Docs>
    </Member>
    <Member MemberName="UniversalSortableDateTimePattern">
      <MemberSignature Language="C#" Value="public string UniversalSortableDateTimePattern { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UniversalSortableDateTimePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UniversalSortableDateTimePattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ UniversalSortableDateTimePattern { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UniversalSortableDateTimePattern : string" Usage="System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the custom format string for a universal, sortable date and time string.</summary>
        <value>國際標準、可排序日期和時間字串的自訂格式字串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern%2A>屬性定義的呼叫所傳回的日期字串格式<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>和<xref:System.DateTimeOffset.ToString%2A?displayProperty=nameWithType>方法而由複合格式字串時，會提供"u"標準格式字串。 它可以用來顯示日期和時間，以國際標準時間指示"Z"結尾的可排序順序。 此格式為可排序，因為它使用前置零的年、 月、 日、 小時、 分鐘和秒。 自訂格式字串 ("yyyy '-' MM'-' dd HH': 'mm': 'ss'Z'") 是相同的文化特性或格式提供者。  
  
 所傳回的格式字串<xref:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern%2A>屬性會反映已定義的標準，且屬性為唯讀。 因此，它一律為相同，不論文化特性。 自訂格式字串為 "yyyy'-'MM'-'dd HH':'mm':'ss'Z'"。  
  
   
  
## Examples  
 下列範例顯示的值<xref:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern%2A>少數的文化特性。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern/CPP/dtfi_universalsortabledatetimepattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern/CS/dtfi_universalsortabledatetimepattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern/VB/dtfi_universalsortabledatetimepattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern" />
      </Docs>
    </Member>
    <Member MemberName="YearMonthPattern">
      <MemberSignature Language="C#" Value="public string YearMonthPattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string YearMonthPattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.YearMonthPattern" />
      <MemberSignature Language="VB.NET" Value="Public Property YearMonthPattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ YearMonthPattern { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.YearMonthPattern : string with get, set" Usage="System.Globalization.DateTimeFormatInfo.YearMonthPattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the custom format string for a year and month value.</summary>
        <value>年份和月份值的自訂格式字串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.YearMonthPattern%2A>屬性定義特定文化特性的格式的呼叫所傳回的日期字串<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>和<xref:System.DateTimeOffset.ToString%2A?displayProperty=nameWithType>方法而由複合格式字串時，會提供"y"和"Y"標準格式字串。  
  
 如果這個屬性會受影響的值<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>屬性變更。  
  
 我們建議您在完全相符的字串，而不是使用日期分隔符號預留位置年度月份模式中設定日期分隔符號。 例如，若要取得模式 MM yyyy，設定年月模式為"MM yyyy"。  
  
   
  
## Examples  
 下列範例顯示的值<xref:System.Globalization.DateTimeFormatInfo.YearMonthPattern%2A>少數的文化特性。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.YearMonthPattern#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.YearMonthPattern/CPP/dtfi_yearmonthpattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.YearMonthPattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.YearMonthPattern/CS/dtfi_yearmonthpattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.YearMonthPattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.YearMonthPattern/VB/dtfi_yearmonthpattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The property is being set to <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only.</exception>
      </Docs>
    </Member>
  </Members>
</Type>