<Type Name="DateTimeFormatInfo" FullName="System.Globalization.DateTimeFormatInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e20da715d0de63e0245b3482df68b13d9f60f8b4" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57957762" /></Metadata><TypeSignature Language="C#" Value="public sealed class DateTimeFormatInfo : ICloneable, IFormatProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit DateTimeFormatInfo extends System.Object implements class System.ICloneable, class System.IFormatProvider" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.DateTimeFormatInfo" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DateTimeFormatInfo&#xA;Implements ICloneable, IFormatProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class DateTimeFormatInfo sealed : ICloneable, IFormatProvider" />
  <TypeSignature Language="F#" Value="type DateTimeFormatInfo = class&#xA;    interface ICloneable&#xA;    interface IFormatProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormatProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供關於日期和時間值格式的特定文化特性資訊。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 屬性<xref:System.Globalization.DateTimeFormatInfo>類別包含特定文化特性資訊來格式化或剖析日期和時間值，如下所示：  
  
-   用來格式化日期值的模式。  
  
-   用來格式化時間值的模式。  
  
-   一周天數名稱。  
  
-   年度月份名稱。  
  
-   A.m. 和下午 時間值中的指示項。  
  
-   日期以行事曆。  
  
 本節內容：  
  
-   [DateTimeFormatInfo 物件具現化](#instantiating)  
  
    -   [而異的文化特性](#instantiating_Invariant)  
  
    -   [特定文化特性](#instantiating_Specific)  
  
    -   [中性文化特性](#instantiating_neutral)  
  
    -   [目前的文化特性](#instantiating_Current)  
  
-   [DateTimeFormatInfo 和動態資料](#dynamic)  
  
-   [格式化日期和時間](#Formatting_dates_times)  
  
-   [格式字串和 DateTimeFormatInfo 屬性](#format-strings-and-datetimeformatinfo-properties)  
  
-   [修改 DateTimeFormatInfo 屬性](#Modifying)  
  
<a name="instantiating"></a>   
## <a name="instantiating-a-datetimeformatinfo-object"></a>DateTimeFormatInfo 物件具現化  
 A<xref:System.Globalization.DateTimeFormatInfo>物件可以代表而異的文化特性、 特定文化特性、 中性文化特性或目前的文化特性的格式化慣例。 本節討論如何具現化每一種<xref:System.Globalization.DateTimeFormatInfo>物件。  
  
<a name="instantiating_Invariant"></a>   
### <a name="instantiating-a-datetimeformatinfo-object-for-the-invariant-culture"></a>具現化而異的文化特性之 DateTimeFormatInfo 物件  
 文化特性而異表示不區分文化特性的文化特性。 它採用有關英文的語言，但不是能在任何特定英文國家/地區。 雖然特定文化特性的資料可以是動態的而且能夠變更以反映新的文化特性慣例或使用者的喜好設定，而異的文化特性的資料不會變更。 您可以具現化<xref:System.Globalization.DateTimeFormatInfo>物件，表示不區分文化特性的格式化慣例如下：  
  
-   所擷取的值<xref:System.Globalization.DateTimeFormatInfo.InvariantInfo%2A>屬性。 傳回<xref:System.Globalization.DateTimeFormatInfo>物件是唯讀的。  
  
-   藉由呼叫無參數<xref:System.Globalization.DateTimeFormatInfo.%23ctor%2A>建構函式。 傳回的 <xref:System.Globalization.DateTimeFormatInfo> 物件是讀取/寫入。  
  
-   所擷取的值<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>屬性從<xref:System.Globalization.CultureInfo>所傳回的物件<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>屬性。 傳回<xref:System.Globalization.DateTimeFormatInfo>物件是唯讀的。  
  
 下列範例所使用的是每一種方法來具現化<xref:System.Globalization.DateTimeFormatInfo>物件，表示文化特性而異。 然後會指出物件是否唯讀。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/create1.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/create1.vb#1)]  
  
<a name="instantiating_Specific"></a>   
### <a name="instantiating-a-datetimeformatinfo-object-for-a-specific-culture"></a>特定文化特性之 DateTimeFormatInfo 物件具現化  
 特定文化特性代表特定國家/地區中使用的語言。 例如，EN-US 代表美國境內的英文語言的特定文化特性而 en CA，代表加拿大英文語言特定文化特性。 您可以具現化<xref:System.Globalization.DateTimeFormatInfo>物件，代表特定文化特性的格式化慣例如下：  
  
-   藉由呼叫<xref:System.Globalization.CultureInfo.GetCultureInfo%28System.String%29?displayProperty=nameWithType>方法，並擷取傳回的值<xref:System.Globalization.CultureInfo>物件的<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>屬性。 傳回<xref:System.Globalization.DateTimeFormatInfo>物件是唯讀的。  
  
-   藉由傳遞靜態<xref:System.Globalization.DateTimeFormatInfo.GetInstance%2A>方法<xref:System.Globalization.CultureInfo>物件，表示文化特性的<xref:System.Globalization.DateTimeFormatInfo>您想要擷取的物件。 傳回的 <xref:System.Globalization.DateTimeFormatInfo> 物件是讀取/寫入。  
  
-   藉由呼叫靜態<xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType>方法，並擷取傳回的值<xref:System.Globalization.CultureInfo>物件的<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>屬性。 傳回的 <xref:System.Globalization.DateTimeFormatInfo> 物件是讀取/寫入。  
  
-   藉由呼叫<xref:System.Globalization.CultureInfo.%23ctor%2A?displayProperty=nameWithType>類別建構函式並擷取傳回的值<xref:System.Globalization.CultureInfo>物件的<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>屬性。 傳回的 <xref:System.Globalization.DateTimeFormatInfo> 物件是讀取/寫入。  
  
 下列範例說明每種方式來具現化<xref:System.Globalization.DateTimeFormatInfo>物件，並指出產生的物件是否為唯讀。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/create1.cs#3)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/create1.vb#3)]  
  
<a name="instantiating_neutral"></a>   
### <a name="instantiating-a-datetimeformatinfo-object-for-a-neutral-culture"></a>中性文化特性之 DateTimeFormatInfo 物件具現化  
 中性文化特性表示文化特性或語言無關的國家/地區;它通常是一或多個特定的文化特性的父代。 比方說，Fr 是法文的語言和父代為 FR-FR 文化特性的中性文化特性。 您可以具現化<xref:System.Globalization.DateTimeFormatInfo>物件，代表中性文化特性的格式化慣例，您所建立的相同方式<xref:System.Globalization.DateTimeFormatInfo>物件，代表特定文化特性的格式化慣例。 此外，您可以在其中擷取中性文化特性<xref:System.Globalization.DateTimeFormatInfo>物件擷取特定文化特性的中性文化特性<xref:System.Globalization.CultureInfo.Parent%2A?displayProperty=nameWithType>屬性並擷取<xref:System.Globalization.DateTimeFormatInfo>所傳回的物件及其<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>屬性。 除非父文化特性表示文化特性而異，傳回的<xref:System.Globalization.DateTimeFormatInfo>物件是讀取/寫入。 下列範例將說明這些方式具現化<xref:System.Globalization.DateTimeFormatInfo>代表中性文化特性的物件。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/create1.cs#2)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/create1.vb#2)]  
  
> [!NOTE]
>  在.NET framework 1.0 透過[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]，嘗試擷取<xref:System.Globalization.DateTimeFormatInfo>物件會反映中性文化特性的格式化慣例，會擲回<xref:System.NotSupportedException>例外狀況。  
  
 不過，由於中性文化特性缺少特定文化特性格式資訊，因為它是獨立於特定國家/地區。 而不是填入<xref:System.Globalization.DateTimeFormatInfo>物件使用泛型值，.NET Framework 會傳回<xref:System.Globalization.DateTimeFormatInfo>反映的格式化慣例的特定文化特性的物件是中性文化特性的子系。 例如，<xref:System.Globalization.DateTimeFormatInfo>物件的中性 en-us 文化特性會反映 EN-US 文化特性的格式化慣例，<xref:System.Globalization.DateTimeFormatInfo>物件為 fr 文化特性反映 FR-FR 文化特性的格式化慣例。  
  
 您可以使用如下的程式碼，以判斷哪一個特定文化特性的中性文化特性所表示的格式化慣例。 此範例使用反映來比較<xref:System.Globalization.DateTimeFormatInfo>具有屬性的特定子文化特性的中性文化特性屬性。 它會考慮為相等，如果它們都是相同的日曆類型的兩個行事曆，西曆的行事曆，如果其<xref:System.Globalization.GregorianCalendar.CalendarType%2A?displayProperty=nameWithType>屬性有相同的值。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/instantiate6c.cs#6)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/instantiate6c.vb#6)]  
  
<a name="instantiating_Current"></a>   
### <a name="instantiating-a-datetimeformatinfo-object-for-the-current-culture"></a>目前的文化特性之 DateTimeFormatInfo 物件具現化  
 您可以具現化<xref:System.Globalization.DateTimeFormatInfo>物件，表示目前的文化特性的格式化慣例如下：  
  
-   所擷取的值<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A>屬性。 傳回<xref:System.Globalization.DateTimeFormatInfo>物件是唯讀的。  
  
-   所擷取的值<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>屬性從<xref:System.Globalization.CultureInfo>所傳回的物件<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>屬性。 傳回<xref:System.Globalization.DateTimeFormatInfo>物件是唯讀的。  
  
-   藉由呼叫<xref:System.Globalization.NumberFormatInfo.GetInstance%2A>方法使用<xref:System.Globalization.CultureInfo>物件，表示目前的文化特性。 傳回<xref:System.Globalization.DateTimeFormatInfo>物件是唯讀的。  
  
 下列範例所使用的是每一種方法來具現化<xref:System.Globalization.DateTimeFormatInfo>物件，表示目前的文化特性的格式化慣例。 然後會指出物件是否唯讀。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/create2.cs#4)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/create2.vb#4)]  
  
 您可以建立可寫入<xref:System.Globalization.DateTimeFormatInfo>物件，表示下列其中一種在目前執行緒文化特性的慣例：  
  
-   藉由擷取<xref:System.Globalization.DateTimeFormatInfo>中的任何三個先前的方式和呼叫物件<xref:System.Globalization.DateTimeFormatInfo.Clone%2A>方法在傳回<xref:System.Globalization.DateTimeFormatInfo>物件。 這會建立一份原始<xref:System.Globalization.DateTimeFormatInfo>物件，不同之處在於其<xref:System.Globalization.DateTimeFormatInfo.IsReadOnly%2A>屬性是`false`。  
  
-   藉由呼叫<xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType>方法用來建立<xref:System.Globalization.CultureInfo>物件，代表目前的文化特性，並接著使用及其<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>屬性，以擷取<xref:System.Globalization.DateTimeFormatInfo>物件。  
  
 下列範例說明每種方法具現化讀取/寫入<xref:System.Globalization.DateTimeFormatInfo>物件，並顯示的值及其<xref:System.Globalization.DateTimeFormatInfo.IsReadOnly%2A>屬性。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/instantiate2.cs#7)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/instantiate2.vb#7)]  
  
 在 Windows 中，使用者可以覆寫的一些<xref:System.Globalization.DateTimeFormatInfo>格式化和剖析透過作業中所使用的屬性值**地區和語言**控制項台中應用程式。 比方說，文化特性是英文 （美國） 的使用者可能會選擇顯示長時間使用 24 小時制 （格式為 hh: mm:） 的時間值，而不是預設 12 小時制時間 （以格式 h:mm: ss tt 中)。 <xref:System.Globalization.DateTimeFormatInfo>物件中所討論的方式擷取先前所有反映這些使用者覆寫。 如果這不需要，您可以建立<xref:System.Globalization.NumberFormatInfo>不會反映使用者的物件會覆寫 （和也是讀取/寫入，而不是唯讀） 藉由呼叫<xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType>建構函式，並提供值為`false`如`useUserOverride`引數。 下列範例說明這系統目前文化特性是英文 （美國） 和其完整時間模式已從 h:mm: ss tt 預設值變更為 hh: mm:。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/instantiate3.cs#8)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/instantiate3.vb#8)]  
  
<a name="dynamic"></a>   
## <a name="datetimeformatinfo-and-dynamic-data"></a>DateTimeFormatInfo 和動態資料  
 格式化日期和時間值所提供的特定文化特性的資料<xref:System.Globalization.DateTimeFormatInfo>類別是動態的就如同所提供的文化特性資料<xref:System.Globalization.CultureInfo>類別。 您不應建立穩定性值的任何假設<xref:System.Globalization.DateTimeFormatInfo>相關聯的物件與特定<xref:System.Globalization.CultureInfo>物件。 只提供區分文化特性和其相關聯的資料<xref:System.Globalization.DateTimeFormatInfo>物件很穩定。 其他資料可以在應用程式工作階段之間，或甚至在您的應用程式正在執行時，才變更。 有四個主要的來源的變更：  
  
-   系統更新。 例如慣用的行事曆或自訂日期和時間格式的文化特性喜好設定會隨著時間改變。 Windows Update 時若發生這種情況，包括變更<xref:System.Globalization.DateTimeFormatInfo>特定文化特性的屬性值。  
  
-   取代的文化特性。 <xref:System.Globalization.CultureAndRegionInfoBuilder>類別可以用來取代現有的文化特性的資料。  
  
-   階層式屬性值的變更。 一些文化特性相關的屬性可以變更在執行階段，這又會導致<xref:System.Globalization.DateTimeFormatInfo>若要變更的資料。 例如，以程式設計方式或透過使用者的動作，可以變更目前的文化特性。 當發生這種情況<xref:System.Globalization.DateTimeFormatInfo>所傳回的物件<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A>屬性變更為目前的文化特性相關聯的物件。 同樣地，文化特性的曆法可以變更，從而會導致變更許多<xref:System.Globalization.DateTimeFormatInfo>屬性值。  
  
-   使用者喜好設定。 應用程式的使用者可以選擇覆寫一些透過控制台地區及語言選項的目前系統文化特性相關聯的值。 例如，使用者可能會選擇不同的格式顯示日期。 如果<xref:System.Globalization.CultureInfo.UseUserOverride%2A?displayProperty=nameWithType>屬性設定為`true`，屬性<xref:System.Globalization.DateTimeFormatInfo>物件也會從使用者設定。 如果使用者設定都與相關聯的文化特性不相容<xref:System.Globalization.CultureInfo>物件 (例如，如果所選行事曆不是其中一個所指示的行事曆<xref:System.Globalization.CultureInfo.OptionalCalendars%2A>屬性)，方法和屬性的值的結果為未定義。  
  
 資料不一致，使用中的所有使用者可覆寫屬性的可能性降到最低<xref:System.Globalization.DateTimeFormatInfo>建立物件時，會初始化物件。 仍有可能不一致，因為建立物件和使用者覆寫程序都不是不可部分完成，而且相關的值可以在建立物件期間變更。 不過，這種情況應該很少發生。  
  
 您可以控制使用者覆寫是否會反映在<xref:System.Globalization.DateTimeFormatInfo>代表相同的文化特性，與系統文化特性的物件。 下表列出的方式<xref:System.Globalization.DateTimeFormatInfo>物件可以擷取，並指出是否產生的物件會反映使用者覆寫。  
  
|CultureInfo 和 DateTimeFormatInfo 物件的來源|會反映使用者覆寫|  
|---------------------------------------------------------|-----------------------------|  
|`CultureInfo.CurrentCulture.DateTimeFormat` 屬性|是|  
|<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A?displayProperty=nameWithType> 屬性|是|  
|<xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType> 方法|是|  
|<xref:System.Globalization.CultureInfo.GetCultureInfo%2A?displayProperty=nameWithType> 方法|否|  
|<xref:System.Globalization.CultureInfo.%23ctor%28System.String%29?displayProperty=nameWithType> 建構函式|是|  
|<xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> 建構函式|取決於值`useUserOverride`參數|  
  
 除非有充分的理由，否則您就應該採用使用者覆寫，當您使用<xref:System.Globalization.DateTimeFormatInfo>格式化和剖析使用者輸入，或顯示資料的用戶端應用程式中的物件。 針對伺服器應用程式或自動執行應用程式，您不應該。 不過，如果您使用<xref:System.Globalization.DateTimeFormatInfo>物件是明確或隱含方式來保存字串形式的日期和時間資料，您應該使用<xref:System.Globalization.DateTimeFormatInfo>反映格式設定慣例的文化特性而異，或您的物件應該指定自訂日期和時間格式字串，您不論文化特性為何。  
  
<a name="Formatting_dates_times"></a>   
## <a name="formatting-dates-and-times"></a>格式化日期和時間  
 A<xref:System.Globalization.DateTimeFormatInfo>物件會隱含或明確地在所有日期和時間格式化作業。 這些包括呼叫下列方法：  
  
-   所有日期和時間格式化方法，例如<xref:System.DateTime.ToString?displayProperty=nameWithType>和<xref:System.DateTimeOffset.ToString%28System.String%29?displayProperty=nameWithType>。  
  
-   主要的複合格式化方法，這是<xref:System.String.Format%2A?displayProperty=nameWithType>。  
  
-   其他複合格式化方法，例如<xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>和<xref:System.Text.StringBuilder.AppendFormat%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>。  
  
 所有日期和時間格式設定作業進行都使用<xref:System.IFormatProvider>實作。 <xref:System.IFormatProvider>介面會包含單一方法<xref:System.IFormatProvider.GetFormat%28System.Type%29?displayProperty=nameWithType>。 傳遞給這個回呼方法<xref:System.Type>物件，表示提供格式設定資訊所需的型別。 方法會傳回該類型的執行個體或`null`如果它無法提供類型的執行個體。 .NET Framework 包含兩個<xref:System.IFormatProvider>格式化日期和時間的實作：  
  
-   <xref:System.Globalization.CultureInfo>類別，其代表特定文化特性 （或特定國家/地區中的特定語言）。 在日期和時間格式化作業中，<xref:System.Globalization.CultureInfo.GetFormat%2A?displayProperty=nameWithType>方法會傳回<xref:System.Globalization.DateTimeFormatInfo>相關聯的物件及其<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>屬性。  
  
-   <xref:System.Globalization.DateTimeFormatInfo>類別，可提供其相關聯的文化特性的格式化慣例相關資訊。 <xref:System.Globalization.DateTimeFormatInfo.GetFormat%2A?displayProperty=nameWithType>方法會傳回本身的執行個體。  
  
 如果<xref:System.IFormatProvider>實作未提供格式化方法來明確地<xref:System.Globalization.CultureInfo>所傳回的物件<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>使用代表目前執行緒文化特性的屬性。  
  
 下列範例說明之間的關聯性<xref:System.IFormatProvider>介面和<xref:System.Globalization.DateTimeFormatInfo>在格式化作業中的類別。 它會定義自訂<xref:System.IFormatProvider>實作其<xref:System.IFormatProvider.GetFormat%2A>方法會顯示在格式化作業所要求的物件型別。 如果它要求<xref:System.Globalization.DateTimeFormatInfo>物件，此方法提供<xref:System.Globalization.DateTimeFormatInfo>目前執行緒文化特性的物件。 做為範例所示，從輸出<xref:System.Decimal.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>方法要求<xref:System.Globalization.DateTimeFormatInfo>物件，提供格式設定資訊，而<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>方法要求<xref:System.Globalization.NumberFormatInfo>並<xref:System.Globalization.DateTimeFormatInfo>物件以及<xref:System.ICustomFormatter>實作。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/formatprovider1.cs#9)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/formatprovider1.vb#9)]  
  
## <a name="format-strings-and-datetimeformatinfo-properties"></a>格式字串和 DateTimeFormatInfo 屬性  
 <xref:System.Globalization.DateTimeFormatInfo>物件包含三種類型的屬性，用於格式化日期和時間值的作業：  
  
-   行事曆相關的屬性。 這類的屬性<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames%2A>， <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A>， <xref:System.Globalization.DateTimeFormatInfo.DayNames%2A>，以及<xref:System.Globalization.DateTimeFormatInfo.MonthNames%2A>，會使用的曆法是文化特性，可定義與相關聯<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>屬性。 這些屬性用於完整日期和時間格式。  
  
-   產生的標準定義結果字串的屬性。 <xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A>， <xref:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern%2A>，和<xref:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern%2A>屬性包含產生結果字串，由國際標準定義的自訂格式字串。 這些屬性是唯讀的而且無法修改。  
  
-   定義區分文化特性的結果字串的屬性。 某些屬性，例如<xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A>並<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>，包含[自訂格式字串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)指定結果字串的格式。 其他項目，例如<xref:System.Globalization.DateTimeFormatInfo.AMDesignator%2A>， <xref:System.Globalization.DateTimeFormatInfo.DateSeparator%2A>， <xref:System.Globalization.DateTimeFormatInfo.PMDesignator%2A>，和<xref:System.Globalization.DateTimeFormatInfo.TimeSeparator%2A>，定義區分文化特性的符號或可以包含在結果字串的子字串。  
  
 [標準日期和時間格式字串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)，例如"d"、"D"、"f"和"F"、 是對應至特定的別名<xref:System.Globalization.DateTimeFormatInfo>格式化模式屬性。 大部分[自訂日期和時間格式字串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)與字串或子字串，格式化作業將結果資料流插入相關。 下表列出標準和自訂日期和時間格式規範，以及其相關聯<xref:System.Globalization.DateTimeFormatInfo>屬性。 如需如何使用這些詳細資料格式規範，請參閱[標準日期和時間格式字串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)並[自訂日期和時間格式字串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。 請注意，每個標準格式字串會對應到<xref:System.Globalization.DateTimeFormatInfo>屬性且值為自訂日期和時間格式字串。 此自訂格式字串中的個別規範會對應至其他<xref:System.Globalization.DateTimeFormatInfo>屬性。 表只列出<xref:System.Globalization.DateTimeFormatInfo>的標準格式字串是別名，並不會不可能存取指派給這些別名屬性的自訂格式字串清單屬性的屬性。 此外，資料表會列出對應至自訂格式規範<xref:System.Globalization.DateTimeFormatInfo>屬性。  
  
|格式規範|相關聯的屬性|  
|----------------------|---------------------------|  
|"d"（簡短日期; 標準格式字串）|<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>定義結果字串的整體格式。|  
|"D"（完整日期; 標準格式字串）|<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>定義結果字串的整體格式。|  
|"f"(完整日期 / 簡短時間; 標準格式字串)|<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>定義結果字串的日期元件的格式。<br /><br /> <xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A>定義結果字串的時間元件的格式。|  
|"F"(完整日期 / 長的時間; 標準格式字串)|<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>定義結果字串的日期元件的格式。<br /><br /> <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A>定義結果字串的時間元件的格式。|  
|"g"(一般日期 / 時間短，標準格式字串)|<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>定義結果字串的日期元件的格式。<br /><br /> <xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A>定義結果字串的時間元件的格式。|  
|"G"(一般日期 / 時間時間; 標準格式字串)|<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>定義結果字串的日期元件的格式。<br /><br /> <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A>定義結果字串的時間元件的格式。|  
|"M"、"m"（月/日) 標準格式字串|<xref:System.Globalization.DateTimeFormatInfo.MonthDayPattern%2A>定義結果字串的整體格式。|  
|"O"、"o"(來回日期/時間; 標準格式字串)|無。|  
|"R"、"r"（RFC1123) 標準格式字串|<xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A>來定義的 RFC 1123 標準符合的結果字串。 屬性是唯讀。|  
|"s"（可排序日期/時間; 標準格式字串）|<xref:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern%2A>定義結果字串符合 ISO 8601 標準。 屬性是唯讀。|  
|"t"（簡短時間) 標準格式字串|<xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A>定義結果字串的整體格式。|  
|"T"（很長的時間; 標準格式字串）|<xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A>定義結果字串的整體格式。|  
|"u"（國際可排序日期/時間; 標準格式字串）|<xref:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern%2A>定義國際標準時間以 ISO 8601 標準符合的結果字串。 屬性是唯讀。|  
|"U"（國際完整日期/時間; 標準格式字串）|<xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A>定義結果字串的整體格式。|  
|"Y"、"y"（年月; 標準格式字串）|<xref:System.Globalization.DateTimeFormatInfo.YearMonthPattern%2A>定義結果字串的整體格式。|  
|"ddd"（自訂格式規範）|<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames%2A>包含在結果字串中的一週的星期幾的縮寫的名稱。|  
|"g"、"gg"（自訂格式規範）|呼叫<xref:System.Globalization.DateTimeFormatInfo.GetEraName%2A>插入結果字串中的紀元名稱的方法。|  
|"MMM"（自訂格式規範）|<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A>包含結果字串中的縮寫的月份名稱。|  
|"MMMM"（自訂格式規範）|<xref:System.Globalization.DateTimeFormatInfo.MonthNames%2A> 或<xref:System.Globalization.DateTimeFormatInfo.MonthGenitiveNames%2A>，以便在結果字串中包含的完整月份名稱。|  
|"t"（自訂格式規範）|<xref:System.Globalization.DateTimeFormatInfo.AMDesignator%2A> 或<xref:System.Globalization.DateTimeFormatInfo.PMDesignator%2A>，以便包含在結果字串中的 AM/PM 指示項的第一個字元。|  
|"tt"（自訂格式規範）|<xref:System.Globalization.DateTimeFormatInfo.AMDesignator%2A> 或<xref:System.Globalization.DateTimeFormatInfo.PMDesignator%2A>，以便在結果字串中包含完整 AM/PM 指示項。|  
|":"（自訂格式規範）|<xref:System.Globalization.DateTimeFormatInfo.TimeSeparator%2A>包含在結果字串中的時間分隔符號。|  
|"/"（自訂格式規範）|<xref:System.Globalization.DateTimeFormatInfo.DateSeparator%2A>包含在結果字串中的日期分隔符號。|  
  
<a name="Modifying"></a>   
## <a name="modifying-datetimeformatinfo-properties"></a>修改 DateTimeFormatInfo 屬性  
 您可以變更所產生的日期和時間格式字串，藉由修改相關聯的可寫入屬性的結果字串<xref:System.Globalization.DateTimeFormatInfo>物件。 若要判斷是否<xref:System.Globalization.DateTimeFormatInfo>物件是否可寫入，請使用<xref:System.Globalization.DateTimeFormatInfo.IsReadOnly%2A>屬性。 若要自訂<xref:System.Globalization.DateTimeFormatInfo>物件以這種方式：  
  
1.  建立的讀取/寫入複本<xref:System.Globalization.DateTimeFormatInfo>物件您想要修改其格式設定慣例。 (請參閱[DateTimeFormatInfo 物件具現化](#instantiating)一節。)  
  
2.  修改或多個用來產生所要的結果字串的屬性。 (如需有關如何格式化方法使用資訊<xref:System.Globalization.DateTimeFormatInfo>屬性來定義結果字串，請參閱上一節[格式字串和 DateTimeFormatInfo 屬性](#format-strings-and-datetimeformatinfo-properties)。)  
  
3.  使用自訂<xref:System.Globalization.DateTimeFormatInfo>物件建立為您<xref:System.IFormatProvider>格式化方法的呼叫中引數。  
  
 有兩種方式可變更的結果字串的格式：  
  
-   您可以使用<xref:System.Globalization.CultureAndRegionInfoBuilder>類別來定義自訂的文化特性 （文化特性的文化特性具有唯一的名稱，且以補充現有的） 或取代的文化特性 （一個是用來取代特定的文化特性）。 您可以儲存，並以程式設計方式存取此文化特性，如同任何<xref:System.Globalization.CultureInfo>.NET Framework 所支援的物件。  
  
-   如果結果字串不區分文化特性，而不是採用預先定義的格式，您可以使用的自訂日期和時間格式字串。 例如，如果您要序列化 YYYYMMDDHHmmss 格式的日期和時間資料，您可以產生結果字串傳遞至自訂格式字串<xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType>方法，而且您可以將結果字串的轉換回<xref:System.DateTime>藉由呼叫的值<xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType>方法。  
  
### <a name="changing-the-short-date-pattern"></a>變更的簡短日期模式  
 下列範例會變更"d"（簡短日期） 標準格式字串所產生的結果字串的格式。 它會變更相關聯<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>EN-US 或英文 （美國） 文化特性，從"yyyy/m / 」 至其預設值的屬性"yyyy'-"MM"-"dd"和"d"標準格式字串來顯示日期之前和之後的使用<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>屬性變更。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/example1.cs#10)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/example1.vb#10)]  
  
### <a name="changing-the-date-separator-character"></a>變更日期分隔符號字元  
 下列範例會變更中的日期分隔符號字元<xref:System.Globalization.DateTimeFormatInfo>物件，代表 FR-FR 文化特性的格式化慣例。 此範例使用"g"標準格式字串來顯示之前和之後的日期<xref:System.Globalization.DateTimeFormatInfo.DateSeparator%2A>屬性變更。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/example3.cs#12)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/example3.vb#12)]  
  
### <a name="changing-day-name-abbreviations-and-the-long-date-pattern"></a>變更星期名稱縮寫和完整日期模式  
 在某些情況下，完整日期模式中，通常會顯示完整的日期和月份名稱，以及每月和年的日數，可能太長。 下列範例會縮短 EN-US 文化特性，傳回的年份、 月份名稱縮寫及單字元或兩個字元的星期名稱縮寫，後面接著的日數的完整日期模式。 其做法是將指派至較短的星期名稱縮寫<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames%2A>陣列，並藉由修改自訂格式字串指派給<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>屬性。 這會影響結果字串，傳回的"D"和"f"標準格式字串。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/example2.cs#13)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/example2.vb#13)]  
  
 一般情況下，若要變更<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>屬性也會影響<xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A>屬性，依序定義的"F"標準格式字串所傳回的結果字串。 若要保留原始的完整日期和時間模式，範例會重新指派原始的自訂格式字串指派給<xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A>屬性之後<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>屬性修改。  
  
### <a name="changing-from-a-12-hour-clock-to-a-24-hour-clock"></a>從 12 小時制時鐘變更為 24 小時制時鐘  
 對於許多.NET Framework 中的文化特性，會使用 12 小時制時鐘和 AM/PM 指示項表示的時間。 下列範例會定義`ReplaceWith24HourClock`方法會取代任何使用 24 小時制的格式會使用 12 小時制的時間格式。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/example5.cs#14)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/example5.vb#14)]  
  
 此範例會使用規則運算式，若要修改的格式字串。 規則運算式模式`@"^(?<openAMPM>\s*t+\s*)? (?(openAMPM) h+(?<nonHours>[^ht]+)$ | \s*h+(?<nonHours>[^ht]+)\s*t+)`定義如下：  
  
|模式|描述|  
|-------------|-----------------|  
|`^`|從字串的開頭開始比對。|  
|`(?<openAMPM>\s*t+\s*)?`|比對零或一次出現零或多個空格字元，後面接著字母"t"，其中一或多次，後面接著零或多個空格字元。 此擷取群組會命名為`openAMPM`。|  
|`(?(openAMPM) h+(?<nonHours>[^ht]+)$`|如果`openAMPM`群組有相符項目，比對字母"h"一或多次，後面接著一或多個非"h"或"t"的字元。 比對結束的字串結尾。 擷取名為擷取群組中包含"h"之後的所有字元`nonHours`。|  
|`&#124; \s*h+(?<nonHours>[^ht]+)\s*t+)`|如果`openAMPM`群組並沒有相符項目，比對字母"h"一或多次，後面接著一或多個非"h"或"t"、 字元後面接著零或多個空格字元。 最後，符合一或多個出現字母"t"。 "H"與之前的泛空白字元和"t"包含在名為擷取群組所擷取的所有字元`nonHours`。|  
  
 `nonHours`擷取群組包含分鐘和可能的第二個元件的自訂日期和時間格式字串，以及任何時間分隔符號的符號。 取代模式`HH${nonHours}`前面加上這些元素的子字串"HH"。  
  
### <a name="displaying-and-changing-the-era-in-a-date"></a>顯示和變更的日期中的紀元  
 下列範例會將"g"自訂格式規範來<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>屬性的物件，表示 EN-US 文化特性的格式化慣例。 此新增會影響下列三種標準格式字串：  
  
-   "D"(long date) 的標準格式字串，會直接對應到<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>屬性。  
  
-   "f"(完整日期簡短時間 /) 產生的結果字串會串連所產生的子字串的標準格式字串<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>和<xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A>屬性。  
  
-   "F"(完整日期完整時間 /) 標準格式字串，會直接對應到<xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A>屬性。 因為我們沒有明確設定此屬性值，它會動態產生的串連<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>和<xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A>屬性。  
  
 此範例也示範如何變更其行事曆當中有單一紀元的文化特性的紀元名稱。 在此情況下，EN-US 文化特性會使用西曆，由<xref:System.Globalization.GregorianCalendar>物件。 <xref:System.Globalization.GregorianCalendar>類別支援單一紀元，其名稱 A.D. (P.m)。 此範例的紀元名稱變更為西元 （中古時代） 取代指派給格式字串中的"g"自訂格式規範<xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A>屬性與一個常值的字串。 使用常值字串是有必要，因為紀元名稱通常由<xref:System.Globalization.DateTimeFormatInfo.GetEraName%2A>方法從.NET Framework 或 Windows 作業系統所提供的文化特性資料表中的私用資料。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/example4.cs#11)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/example4.vb#11)]  
  
## <a name="parsing-date-and-time-strings"></a>剖析日期和時間字串  
 剖析是指將轉換的日期和時間的字串表示<xref:System.DateTime>或<xref:System.DateTimeOffset>值。 這兩種類型包括`Parse`， `TryParse`， `ParseExact`，和`TryParseExact`方法，以支援剖析作業。 `Parse`並`TryParse`方法會將字串轉換可以有各種不同的格式，而`ParseExact`和`TryParseExact`需要字串具有已定義的格式。 如果剖析作業失敗，`Parse`並`ParseExact`擲回的例外狀況，而`TryParse`並`TryParseExact`傳回`false`。  
  
 剖析方法會以隱含或明確使用<xref:System.Globalization.DateTimeStyles>列舉值，以判斷哪一個 （例如前置、 尾端，或內部空白字元） 的樣式項目中會有要剖析的字串，以及如何解譯剖析的字串或任何遺漏項目。 如果您未提供<xref:System.Globalization.DateTimeStyles>值，當您呼叫`Parse`或`TryParse`方法，預設值是<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType>，這是包含複合樣式<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite?displayProperty=nameWithType>， <xref:System.Globalization.DateTimeStyles.AllowTrailingWhite?displayProperty=nameWithType>，和<xref:System.Globalization.DateTimeStyles.AllowInnerWhite?displayProperty=nameWithType>旗標。 針對`ParseExact`並`TryParseExact`方法，預設值是<xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>; 輸入的字串必須精確地為特定自訂日期和時間格式字串對應。  
  
 剖析方法也會隱含地或明確地使用<xref:System.Globalization.DateTimeFormatInfo>物件，定義特定符號和模式可能會發生在要剖析的字串。 如果您未提供<xref:System.Globalization.DateTimeFormatInfo>物件，<xref:System.Globalization.DateTimeFormatInfo>物件預設會使用目前執行緒文化特性。 如需剖析日期和時間字串的詳細資訊，請參閱個別的剖析方法，例如<xref:System.DateTime.Parse%2A?displayProperty=nameWithType>， <xref:System.DateTime.TryParse%2A?displayProperty=nameWithType>， <xref:System.DateTimeOffset.ParseExact%2A?displayProperty=nameWithType>，和<xref:System.DateTimeOffset.TryParseExact%2A?displayProperty=nameWithType>。  
  
 下列範例說明剖析的日期和時間字串的區分文化特性的本質。 它會嘗試使用來剖析兩個日期字串 EN-US、 EN-GB、 FR-FR 和 FI-FI 文化特性的慣例。 日期，會解譯為 8/18/2014 en-us 文化特性會擲回<xref:System.FormatException>中其他三個例外狀況文化特性，因為 18 會解譯為月數。 2015 年 1 月 2 日會剖析為 EN-US 文化特性的第一個月的第二天而其餘的文化特性的第二個月的第一天。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/parsing1.cs#15)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/parsing1.vb#15)]  
  
 通常原因有兩個剖析日期和時間的字串：  
  
-   若要將使用者輸入轉換成日期和時間值。  
  
-   若要反覆存取日期和時間值;也就是要還原序列化日期和時間值，這個值之前已序列化為字串。  
  
 下列各節將討論這兩項作業中有更詳細。  
  
### <a name="parsing-user-strings"></a>剖析使用者字串  
 當您剖析使用者輸入的日期和時間字串時，您應該一律具現化<xref:System.Globalization.DateTimeFormatInfo>反映使用者的文化特性設定，包括使用者所做的任何自訂的物件。 否則，日期和時間的物件可能有不正確的值。 如需如何具現化<xref:System.Globalization.DateTimeFormatInfo>物件，以反映使用者文化特性的自訂設定，請參閱[DateTimeFormatInfo 和動態資料](#dynamic)一節。  
  
 下列範例說明剖析作業中，以反映使用者的文化設定及未之間的差異。 在此案例中，預設系統文化特性是 EN-US，但使用者已使用控制台中**地區和語言**簡短日期模式從預設的"m/yyyy"變更"yy/MM/dd"。 當使用者輸入字串會反映使用者設定，且所剖析的字串<xref:System.Globalization.DateTimeFormatInfo>物件，也會反映使用者設定 （覆寫），在剖析作業會傳回正確的結果。 不過，當字串會剖析<xref:System.Globalization.DateTimeFormatInfo>物件，以反映標準 EN-US 文化特性設定，則剖析方法會擲回<xref:System.FormatException>例外狀況因為它可解譯 14 的月數不年份的後兩位數。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/parse2.cs#16)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/parse2.vb#16)]  
  
### <a name="serializing-and-deserializing-date-and-time-data"></a>序列化和還原序列化日期和時間資料  
 序列化日期和時間資料會反覆存取;也就是所有序列化和還原序列化的值應該相同。 如果日期和時間值代表單一時間點，還原序列化的值應該代表不論文化特性或其已還原的系統時區的時間相同時間點。 若要反覆存取日期和時間資料成功，您必須使用所傳回的非變異文化特性的慣例<xref:System.Globalization.DateTimeFormatInfo.InvariantInfo%2A>屬性，以產生和剖析資料。 「 格式化和剖析作業應該不會反映出預設文化特性的慣例。 如果您使用預設文化特性設定，可攜性的資料會嚴格限制;它可以成功還原序列化，只有在執行緒，其文化特性特有的設定是完全相同的執行緒在其序列化。 在某些情況下，這表示，資料無法即使已成功序列化和還原序列化的同一個系統。  
  
 如果很長的時間元件的日期和時間值，應該也轉換成 UTC 並使用"o"或"r"序列化[標準格式字串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)。 然後可以藉由呼叫剖析方法，並將其傳遞適當的格式字串而異的文化特性與還原時間資料`provider`引數。  
  
 下列範例說明如何反覆存取日期和時間值的程序。 它會序列化的日期和時間的系統上，觀察到美國太平洋時間，且目前文化特性為 EN-US。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/serialize1.cs#17)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/serialize1.vb#17)]  
  
 還原序列化布魯塞爾，哥本哈根，馬德里，巴黎時區系統上的資料和目前文化特性為 fr-fr。 還原的日期是 9 個小時的原始日期，會反映從晚 UTC 八小時時區調整 UTC 快一個小時的時間晚。 原始的日期和還原的日期表示相同時間點。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/serialize2.cs#18)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/serialize2.vb#18)]  
  
   
  
## Examples  
 下列範例會使用反映來取得的屬性<xref:System.Globalization.DateTimeFormatInfo>英文 （美國） 文化特性的物件。 它會顯示包含自訂格式字串的那些屬性的值，並使用這些字串來顯示格式的日期。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/format1.cs#5)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/format1.vb#5)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.DateTime" />
    <altmember cref="T:System.Globalization.Calendar" />
    <altmember cref="T:System.Globalization.CultureInfo" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeFormatInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeFormatInfo();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化與文化特性無關 (不因文化特性而異) 之 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 類別的可寫入新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式會建立<xref:System.Globalization.DateTimeFormatInfo>物件，表示文化特性而異的日期和時間資訊。 若要建立<xref:System.Globalization.DateTimeFormatInfo>物件的特定文化特性，建立<xref:System.Globalization.CultureInfo>用於該文化特性物件，並擷取<xref:System.Globalization.DateTimeFormatInfo>所傳回的物件及其<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>屬性。  
  
 屬性<xref:System.Globalization.DateTimeFormatInfo>可以修改這個建構函式所建立的物件。 不過，您無法修改<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>屬性，因為文化特性而異支援西曆的當地語系化的版本。 若要建立<xref:System.Globalization.DateTimeFormatInfo>物件，使用特定的行事曆，您必須具現化<xref:System.Globalization.CultureInfo>物件，該物件支援行事曆，並將指派的行事曆<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>屬性<xref:System.Globalization.DateTimeFormatInfo>所傳回的物件<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>屬性.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
      </Docs>
    </Member>
    <Member MemberName="AbbreviatedDayNames">
      <MemberSignature Language="C#" Value="public string[] AbbreviatedDayNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] AbbreviatedDayNames" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames" />
      <MemberSignature Language="VB.NET" Value="Public Property AbbreviatedDayNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ AbbreviatedDayNames { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AbbreviatedDayNames : string[] with get, set" Usage="System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定包含特定文化特性之星期縮寫名稱的一維陣列 (型別為 <see cref="T:System.String" />)。</summary>
        <value>包含特定文化特性之星期縮寫名稱的一維陣列 (型別為 <see cref="T:System.String" />)。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的陣列包含 "Sun"、"Mon"、"Tue"、"Wed"、"Thu"、"Fri" 和 "Sat"。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果設定此屬性，陣列必須是一維陣列，而且必須完全七個元素。 第一個項目 （項目索引位置為零） 表示中所定義的行事曆週的第一天<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>屬性。  
  
 自訂格式字串"ddd"格式規範，如果<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>或是<xref:System.DateTimeOffset.ToString%2A>方法包含的適當成員<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames%2A>取代"ddd"的結果字串中的陣列。  
  
 如果這個屬性會受影響的值<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>屬性變更。 如果所選<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>不支援縮寫星期幾名稱，則陣列包含完整的日期名稱。  
  
   
  
## Examples  
 下列範例會建立讀取/寫入<xref:System.Globalization.CultureInfo>物件，代表 英文 （美國） 文化特性，並將指派縮寫的星期名稱來其<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames%2A>屬性。 然後，它使用中的"ddd"格式規範來顯示從 2014 5 月 28 日一週日期的字串表示。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.abbreviateddaynames/cs/abbreviateddaynames1.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.abbreviateddaynames/vb/abbreviateddaynames1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">正在將屬性設定為多維或長度不是剛好為 7 的陣列。</exception>
        <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件為唯讀。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.DayNames" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames" />
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedDayName(System.DayOfWeek)" />
      </Docs>
    </Member>
    <Member MemberName="AbbreviatedMonthGenitiveNames">
      <MemberSignature Language="C#" Value="public string[] AbbreviatedMonthGenitiveNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] AbbreviatedMonthGenitiveNames" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames" />
      <MemberSignature Language="VB.NET" Value="Public Property AbbreviatedMonthGenitiveNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ AbbreviatedMonthGenitiveNames { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AbbreviatedMonthGenitiveNames : string[] with get, set" Usage="System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定字串陣列，這個陣列包含與目前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件關聯的縮寫月份名稱。</summary>
        <value>縮寫月份名稱的陣列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在某些語言中，屬於日期的月份名稱會出現在所有格。 比方說，RU-RU 或俄文 （俄羅斯） 文化特性的日期所組成的日數和所有格的月份名稱，例如 1 Января （1 年 1 月）。 對於這些文化特性，自訂格式字串"MMM"格式規範，如果<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>或是<xref:System.DateTimeOffset.ToString%2A>方法包含的適當成員<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames%2A>取代"MMM"的結果字串中的陣列。  
  
 在設定作業中，此陣列必須是一維完全 13 項目時，因為<xref:System.Globalization.Calendar>物件符合有 13 個月的行事曆。 第十三個元素應該是具有 12 個月的行事曆， <xref:System.String.Empty?displayProperty=nameWithType>。 （索引零處的項目） 的第一個項目代表一年所定義的第一個月<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>屬性。  
  
 如果您設定<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames%2A>屬性，您也必須設定<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A>屬性。  
  
   
  
## Examples  
 下列範例會建立讀取/寫入<xref:System.Globalization.CultureInfo>物件，代表 英文 （美國） 文化特性，並將指派縮寫所有格的月份名稱及其<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A>和<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames%2A>屬性。 然後，它會顯示包含每個月的縮寫的月份名稱的文化特性支援行事曆中的日期的字串表示。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.abbreviatedmonthgenitivenames/cs/abbreviatedmonthnames1.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.abbreviatedmonthgenitivenames/vb/abbreviatedmonthnames1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">在 set 作業中，陣列式多維的，或者長度不是剛好為 13。</exception>
        <exception cref="T:System.ArgumentNullException">在 set 作業中，陣列或陣列的其中一個元素為 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">在設定作業中，目前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件是唯讀的。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.MonthGenitiveNames" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames" />
      </Docs>
    </Member>
    <Member MemberName="AbbreviatedMonthNames">
      <MemberSignature Language="C#" Value="public string[] AbbreviatedMonthNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] AbbreviatedMonthNames" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames" />
      <MemberSignature Language="VB.NET" Value="Public Property AbbreviatedMonthNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ AbbreviatedMonthNames { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AbbreviatedMonthNames : string[] with get, set" Usage="System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定包含特定文化特性之月份縮寫名稱的一維字串陣列。</summary>
        <value>包含特定文化特性之月份縮寫名稱且具有 13 個元素的一維字串陣列。 針對 12 月制曆法，陣列的第 13 個元素為空字串。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的陣列包含 "Jan"、"Feb"、"Mar"、"Apr"、"May"、"Jun"、"Jul"、"Aug"、"Sep"、"Oct"、"Nov"、"Dec" 和 ""。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果您設定這個屬性時，必須剛好為 13 個元素的一維陣列。 <xref:System.Globalization.Calendar> 物件符合使用 13 個月的行事曆。 （索引零處的項目） 的第一個項目代表一年所定義的第一個月<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>屬性。  
  
 如果您設定<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A>屬性，您也必須設定<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames%2A>屬性。 <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A>和<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames%2A>屬性用來格式化日期，使用下列格式字串：  
  
-   標準日期和時間格式字串的別名自訂格式化字串中包含"MMM"格式規範。  
  
-   自訂日期和時間格式字串包含"MMM"格式規範。  
  
 如果這個屬性會受影響的值<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>屬性變更。 如果所選<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>不支援縮寫月份名稱，則陣列包含的完整月份名稱。  
  
   
  
## Examples  
 下列範例會建立讀取/寫入<xref:System.Globalization.CultureInfo>物件，代表 英文 （美國） 文化特性，並將指派縮寫所有格的月份名稱及其<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A>和<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames%2A>屬性。 然後，它會顯示包含每個月的縮寫的名稱的文化特性支援行事曆中的日期的字串表示。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.abbreviatedmonthgenitivenames/cs/abbreviatedmonthnames1.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.abbreviatedmonthgenitivenames/vb/abbreviatedmonthnames1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">正在將屬性設定為多維或長度不是剛好為 13 的陣列。</exception>
        <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件為唯讀。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.MonthNames" />
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedMonthName(System.Int32)" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames" />
      </Docs>
    </Member>
    <Member MemberName="AMDesignator">
      <MemberSignature Language="C#" Value="public string AMDesignator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AMDesignator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.AMDesignator" />
      <MemberSignature Language="VB.NET" Value="Public Property AMDesignator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AMDesignator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AMDesignator : string with get, set" Usage="System.Globalization.DateTimeFormatInfo.AMDesignator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 "ante meridiem" (正午以前) 小時的字串指示項。</summary>
        <value>"ante meridiem" (正午以前) 小時的字串指示項。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的預設值為 "AM"。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.AMDesignator%2A>屬性適用於所有時間 0:00:00 （午夜） 到 11:59:59.999。  
  
 如果自訂格式字串包含"tt"格式規範，而且在中午之前時間<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>或是<xref:System.DateTimeOffset.ToString%2A>方法包含的值<xref:System.Globalization.DateTimeFormatInfo.AMDesignator%2A>取代"tt"，結果字串中的屬性。 如果自訂格式字串包含"t"自訂格式規範，只有第一個字元<xref:System.Globalization.DateTimeFormatInfo.AMDesignator%2A>就會包含屬性值。 您應該使用"tt"的語言，是為了維護上午之間的差異 和下午 例如，日文，在其中 A.M. 和下午 指示項的差異在於第二個字元，而不是第一個字元。  
  
 請勿使用 A.M.的文化特性 指示項，這個屬性會傳回空字串。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件為唯讀。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.PMDesignator" />
      </Docs>
    </Member>
    <Member MemberName="Calendar">
      <MemberSignature Language="C#" Value="public System.Globalization.Calendar Calendar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.Calendar Calendar" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.Calendar" />
      <MemberSignature Language="VB.NET" Value="Public Property Calendar As Calendar" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::Calendar ^ Calendar { System::Globalization::Calendar ^ get(); void set(System::Globalization::Calendar ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Calendar : System.Globalization.Calendar with get, set" Usage="System.Globalization.DateTimeFormatInfo.Calendar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.Calendar</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定目前文化特性所使用的曆法。</summary>
        <value>目前文化特性所使用的曆法。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的預設值是 <see cref="T:System.Globalization.GregorianCalendar" /> 物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>屬性可以接受僅適用於相關聯的文化特性的行事曆<xref:System.Globalization.DateTimeFormatInfo>物件。 <xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=nameWithType>屬性會指定可由特定文化特性，行事曆和<xref:System.Globalization.CultureInfo.Calendar%2A?displayProperty=nameWithType>屬性會指定文化特性的預設月曆。  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

變更這個屬性的值會影響下列屬性： <xref:System.Globalization.DateTimeFormatInfo.MonthNames%2A>， <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A>， <xref:System.Globalization.DateTimeFormatInfo.DayNames%2A>， <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames%2A>， <xref:System.Globalization.DateTimeFormatInfo.CalendarWeekRule%2A>， <xref:System.Globalization.DateTimeFormatInfo.FirstDayOfWeek%2A>， <xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A>， <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>， <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>， <xref:System.Globalization.DateTimeFormatInfo.YearMonthPattern%2A>與<xref:System.Globalization.DateTimeFormatInfo.MonthDayPattern%2A>。  
  
 例如，如果目前執行緒文化特性為日本，這個屬性會接受<xref:System.Globalization.JapaneseCalendar>， <xref:System.Globalization.GregorianCalendarTypes.Localized> <xref:System.Globalization.GregorianCalendar>，或<xref:System.Globalization.GregorianCalendarTypes.USEnglish> <xref:System.Globalization.GregorianCalendar>。 當<xref:System.Globalization.JapaneseCalendar>使用時，指定名稱是預設的長日期"gg y '\x5e74 AM' \x6708 有 '\x65e5' 」。 當<xref:System.Globalization.GregorianCalendarTypes.Localized> <xref:System.Globalization.GregorianCalendar>，使用預設的長日期規範"yyyy '\x5e74 AM' \x6708 有 '\x65e5' 」。  
  
   
  
## Examples  
 下列範例會定義`ChangeCalendar`變更為指定行事曆的文化特性的現行曆法，除非它已經是目前行事曆，或不支援的文化特性的方法。 呼叫方法的程式碼會具現化<xref:System.Globalization.CultureInfo>物件，代表阿拉伯文 （埃及） 文化特性，並先嘗試其行事曆將日本曆法。 因為不支援日本曆法，這個方法會使得不會變更文化特性的曆法。 不過，因為 um al Qura 曆法屬於<xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=nameWithType>集合，方法會成功地讓它現行曆法 AR-EG 文化特性。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Calendar#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.DateTimeFormatInfo.Calendar/cs/CalendarTest1.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Calendar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.DateTimeFormatInfo.Calendar/vb/CalendarTest1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">屬性正被設定為對目前文化特性而言並非有效的 <see cref="T:System.Globalization.Calendar" /> 物件。</exception>
        <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件為唯讀。</exception>
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName="CalendarWeekRule">
      <MemberSignature Language="C#" Value="public System.Globalization.CalendarWeekRule CalendarWeekRule { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Globalization.CalendarWeekRule CalendarWeekRule" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.CalendarWeekRule" />
      <MemberSignature Language="VB.NET" Value="Public Property CalendarWeekRule As CalendarWeekRule" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CalendarWeekRule CalendarWeekRule { System::Globalization::CalendarWeekRule get(); void set(System::Globalization::CalendarWeekRule value); };" />
      <MemberSignature Language="F#" Value="member this.CalendarWeekRule : System.Globalization.CalendarWeekRule with get, set" Usage="System.Globalization.DateTimeFormatInfo.CalendarWeekRule" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CalendarWeekRule</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定數值，指定要使用哪一個規則 (Rule) 來決定一年中的第一個日曆週。</summary>
        <value>判斷一年中第一個日曆週的值。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的預設值為 <see cref="F:System.Globalization.CalendarWeekRule.FirstDay" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果這個屬性會受影響的值<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>屬性變更。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">屬性正被設定為不是有效 <see cref="T:System.Globalization.CalendarWeekRule" /> 值的值。</exception>
        <exception cref="T:System.InvalidOperationException">在設定作業中，目前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件是唯讀的。</exception>
        <altmember cref="T:System.Globalization.CalendarWeekRule" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="dateTimeFormatInfo.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>建立 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 的淺層複本。</summary>
        <returns>從原始 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 複製的新 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 複製為可寫入即使原始<xref:System.Globalization.DateTimeFormatInfo>物件是唯讀的。 因此，可修改複製品的屬性，利用使用者定義的模式。  
  
 物件的淺層複本是物件的一份只有。 如果物件包含其他物件的參考，則淺層複製不會建立參考物件的複本。 它改為參考原始物件。 相較之下，物件的深層複本建立一份物件和一份直接或間接參考該物件的所有項目。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.DateTimeFormatInfo CurrentInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.DateTimeFormatInfo CurrentInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.CurrentInfo" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentInfo As DateTimeFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::DateTimeFormatInfo ^ CurrentInfo { System::Globalization::DateTimeFormatInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentInfo : System.Globalization.DateTimeFormatInfo" Usage="System.Globalization.DateTimeFormatInfo.CurrentInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.DateTimeFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得根據目前文化特性格式化值的唯讀 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件。</summary>
        <value>唯讀 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件，根據的是目前執行緒的 <see cref="T:System.Globalization.CultureInfo" /> 物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo>所傳回的物件<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A>屬性會反映使用者覆寫。  
  
   
  
## Examples  
 下列範例會使用<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A>屬性，以擷取<xref:System.Globalization.DateTimeFormatInfo>物件，表示目前的文化特性，在此案例中是 EN-US 文化特性的格式化慣例。 然後，它會顯示格式字串和六個的格式設定屬性的結果字串。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.CurrentInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.DateTimeFormatInfo.CurrentInfo/cs/CurrentInfo1.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.CurrentInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.DateTimeFormatInfo.CurrentInfo/vb/CurrentInfo1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="DateSeparator">
      <MemberSignature Language="C#" Value="public string DateSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DateSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.DateSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property DateSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DateSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DateSeparator : string with get, set" Usage="System.Globalization.DateTimeFormatInfo.DateSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定分隔日期組成部分 (即年、月和日) 的字串。</summary>
        <value>分隔日期組成部分 (即年、月和日) 的字串。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的預設值為 "/"。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果自訂格式字串包含"/"格式規範<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>方法顯示的值<xref:System.Globalization.DateTimeFormatInfo.DateSeparator%2A>來取代"/"的結果字串中。  
  
 <xref:System.Globalization.DateTimeFormatInfo.DateSeparator%2A>屬性定義取代日期分隔符號的字串 （"/"自訂日期和時間格式規範） 在結果字串中，執行格式化作業。 它也會定義剖析作業中的日期分隔符號字串。  
  
   
  
## Examples  
 下列範例會具現化<xref:System.Globalization.CultureInfo>物件是 EN-US 文化特性中，變更其日期分隔符號"-"，並使用"d"、"G"和"g"標準格式字串來顯示日期。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.DateSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.dateseparator/cs/dateseparatorex.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.DateSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.dateseparator/vb/dateseparatorex.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件為唯讀。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" />
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">自訂日期和時間格式字串</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準日期和時間格式字串</related>
      </Docs>
    </Member>
    <Member MemberName="DayNames">
      <MemberSignature Language="C#" Value="public string[] DayNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] DayNames" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.DayNames" />
      <MemberSignature Language="VB.NET" Value="Public Property DayNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ DayNames { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DayNames : string[] with get, set" Usage="System.Globalization.DateTimeFormatInfo.DayNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定包含特定文化特性之星期完整名稱的一維字串陣列。</summary>
        <value>包含特定文化特性之星期完整名稱的一維字串陣列。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的陣列包含 "Sunday"、"Monday"、"Tuesday"、"Wednesday"、"Thursday"、"Friday" 和 "Saturday"。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果設定此屬性，陣列必須是一維陣列，而且必須完全七個元素。 第一個項目 （項目索引位置為零） 表示中所定義的行事曆週的第一天<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>屬性。  
  
 自訂格式字串"ddd"格式規範，如果<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>方法包含的適當值<xref:System.Globalization.DateTimeFormatInfo.DayNames%2A>取代"dddd"，結果字串中的成員。  
  
 如果這個屬性會受影響的值<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>屬性變更。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">正在將屬性設定為多維或長度不是剛好為 7 的陣列。</exception>
        <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件為唯讀。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.MonthNames" />
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetDayName(System.DayOfWeek)" />
      </Docs>
    </Member>
    <Member MemberName="FirstDayOfWeek">
      <MemberSignature Language="C#" Value="public DayOfWeek FirstDayOfWeek { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DayOfWeek FirstDayOfWeek" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.FirstDayOfWeek" />
      <MemberSignature Language="VB.NET" Value="Public Property FirstDayOfWeek As DayOfWeek" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DayOfWeek FirstDayOfWeek { DayOfWeek get(); void set(DayOfWeek value); };" />
      <MemberSignature Language="F#" Value="member this.FirstDayOfWeek : DayOfWeek with get, set" Usage="System.Globalization.DateTimeFormatInfo.FirstDayOfWeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DayOfWeek</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定週的第一天。</summary>
        <value>表示一週第一天的列舉值。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的預設值為 <see cref="F:System.DayOfWeek.Sunday" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果這個屬性會受影響的值<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>屬性變更。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">屬性正被設定為不是有效 <see cref="T:System.DayOfWeek" /> 值的值。</exception>
        <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件為唯讀。</exception>
        <altmember cref="T:System.DayOfWeek" />
      </Docs>
    </Member>
    <Member MemberName="FullDateTimePattern">
      <MemberSignature Language="C#" Value="public string FullDateTimePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullDateTimePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.FullDateTimePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property FullDateTimePattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FullDateTimePattern { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FullDateTimePattern : string with get, set" Usage="System.Globalization.DateTimeFormatInfo.FullDateTimePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定完整日期和時間值的自訂格式字串。</summary>
        <value>完整日期和時間值的自訂格式字串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 "F"標準格式字串是別名<xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A>屬性。 換句話說，指派給這個屬性的自訂格式字串會定義結果字串"F"標準格式字串的格式。 如需詳細資訊，請參閱 <<c0> [ 標準日期和時間格式字串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)。  
  
 值<xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A>屬性會動態產生，藉由串連<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>和<xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A>以空格分隔的屬性。 在下列情況下，就會發生此動態指派：  
  
-   如果之前擷取的屬性值，則它已明確設定。  
  
-   當值<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>屬性變更。  
  
-   當值<xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A>屬性變更。  
  
 如果這個屬性會受影響的值<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>屬性變更。  
  
   
  
## Examples  
 下列範例顯示的值<xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A>少數的文化特性。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.FullDateTimePattern#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.FullDateTimePattern/CPP/dtfi_fulldatetimepattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.FullDateTimePattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.FullDateTimePattern/CS/dtfi_fulldatetimepattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.FullDateTimePattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.FullDateTimePattern/VB/dtfi_fulldatetimepattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件為唯讀。</exception>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準日期和時間格式字串</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">自訂日期和時間格式字串</related>
      </Docs>
    </Member>
    <Member MemberName="GetAbbreviatedDayName">
      <MemberSignature Language="C#" Value="public string GetAbbreviatedDayName (DayOfWeek dayofweek);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAbbreviatedDayName(valuetype System.DayOfWeek dayofweek) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedDayName(System.DayOfWeek)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAbbreviatedDayName(DayOfWeek dayofweek);" />
      <MemberSignature Language="F#" Value="member this.GetAbbreviatedDayName : DayOfWeek -&gt; string" Usage="dateTimeFormatInfo.GetAbbreviatedDayName dayofweek" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dayofweek" Type="System.DayOfWeek" />
      </Parameters>
      <Docs>
        <param name="dayofweek"><see cref="T:System.DayOfWeek" /> 值。</param>
        <summary>根據與目前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件關聯的文化特性，傳回一星期內指定某一天的文化特性特有縮寫名稱。</summary>
        <returns><paramref name="dayofweek" /> 所表示的星期的特定文化特性之縮寫名稱。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設的非變異<xref:System.Globalization.DateTimeFormatInfo>物件，這個方法會傳回從字串<xref:System.Globalization.GregorianCalendar>:  
  
|`dayofweek`|傳回值|  
|-----------------|------------------|  
|星期日|"Sun"|  
|週一|"Mon"|  
|星期二|"Tue"|  
|週三|"Wed"|  
|星期四|"Thu"|  
|週五|"Fri"|  
|星期六|"Sat"|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dayofweek" /> 不是有效的 <see cref="T:System.DayOfWeek" /> 值。</exception>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.GregorianCalendar" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames" />
        <altmember cref="T:System.DayOfWeek" />
      </Docs>
    </Member>
    <Member MemberName="GetAbbreviatedEraName">
      <MemberSignature Language="C#" Value="public string GetAbbreviatedEraName (int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAbbreviatedEraName(int32 era) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAbbreviatedEraName (era As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAbbreviatedEraName(int era);" />
      <MemberSignature Language="F#" Value="member this.GetAbbreviatedEraName : int -&gt; string" Usage="dateTimeFormatInfo.GetAbbreviatedEraName era" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="era" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="era">表示紀元的整數。</param>
        <summary>如果縮寫存在的話，傳回含有指定紀元縮寫名稱的字串。</summary>
        <returns>含有指定紀元縮寫名稱的字串 (如果縮寫存在的話)。  
  
-或- 
含有紀元完整名稱的字串 (如果縮寫不存在的話)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 紀元名稱是用來參考一段時間綑從固定的點或事件的行事曆的名稱。 例如，"A.D." 或者 「 西元" 是西曆中目前的紀元。  
  
 有效值`era`所述<xref:System.Globalization.Calendar.Eras%2A>屬性的適當的類別衍生自<xref:System.Globalization.Calendar>。 例如：<xref:System.Globalization.JapaneseCalendar.Eras%2A?displayProperty=nameWithType>顯示的這項實作所支援的紀元清單。  
  
 在 <xref:System.Globalization.JapaneseCalendar>類別中，縮寫名稱是完整的紀元名稱的第一個字元的紀元。 此字元是單一字元不區分大小寫英文字母縮寫或單一字元漢字縮寫。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="era" /> 不表示 <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> 屬性所指定曆法的有效紀元。</exception>
        <block subset="none" type="usage"><para>如果<see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" />已<see cref="T:System.Globalization.TaiwanCalendar" />但<see cref="P:System.Threading.Thread.CurrentCulture" />不是"ZH-TW"，則<see cref="P:System.Globalization.DateTimeFormatInfo.NativeCalendarName" />， <see cref="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)" />，和<see cref="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName(System.Int32)" />傳回空字串 ("")。</para></block>
        <altmember cref="T:System.Globalization.JapaneseCalendar" />
        <altmember cref="T:System.Globalization.TaiwanCalendar" />
      </Docs>
    </Member>
    <Member MemberName="GetAbbreviatedMonthName">
      <MemberSignature Language="C#" Value="public string GetAbbreviatedMonthName (int month);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAbbreviatedMonthName(int32 month) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedMonthName(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAbbreviatedMonthName (month As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAbbreviatedMonthName(int month);" />
      <MemberSignature Language="F#" Value="member this.GetAbbreviatedMonthName : int -&gt; string" Usage="dateTimeFormatInfo.GetAbbreviatedMonthName month" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="month" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="month">從 1 到 13 的整數，表示要擷取的月份名稱。</param>
        <summary>根據與目前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件關聯的文化特性，傳回指定月份的文化特性特有縮寫名稱。</summary>
        <returns><paramref name="month" /> 所表示月份的特定文化特性之縮寫名稱。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設的非變異<xref:System.Globalization.DateTimeFormatInfo>物件，這個方法會傳回從字串<xref:System.Globalization.GregorianCalendar>物件。  
  
|`month`|傳回值|  
|-------------|------------------|  
|1|"Jan"|  
|2|"Feb"|  
|3|"Mar"|  
|4|"Apr"|  
|5|「 可能 」|  
|6|"Jun"|  
|7|"Jul"|  
|8|"Aug"|  
|9|"Sep"|  
|10|"Oct"|  
|11|"Nov"|  
|12|"Dec"|  
|13|""|  
  
 <xref:System.Globalization.Calendar> 物件可以容納具有 13 個月的行事曆。 針對 12 個月的行事曆，則為空字串一律會傳回做為 13 個月的名稱。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="month" /> 小於 1 或大於 13。</exception>
        <altmember cref="T:System.Globalization.Calendar" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.GregorianCalendar" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAllDateTimePatterns">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>傳回可格式化日期和時間值的標準模式。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAllDateTimePatterns">
      <MemberSignature Language="C#" Value="public string[] GetAllDateTimePatterns ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetAllDateTimePatterns() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllDateTimePatterns () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetAllDateTimePatterns();" />
      <MemberSignature Language="F#" Value="member this.GetAllDateTimePatterns : unit -&gt; string[]" Usage="dateTimeFormatInfo.GetAllDateTimePatterns " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回可格式化日期和時間值的所有標準模式。</summary>
        <returns>陣列，其中包含可格式化日期和時間值的標準模式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會傳回陣列，其中包含所有對應至標準格式字串的自訂格式字串。 請參閱[標準日期和時間格式字串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)取得一份標準格式字串。  
  
 您可以使用自訂格式字串中所傳回的陣列<xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns%2A>在格式化作業中的方法。 不過，如果您這樣做，日期和時間值的字串表示傳回，格式化作業無法永遠剖析成功`Parse`和`TryParse`方法。 因此，您不能假設所傳回的自訂格式字串<xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns%2A>方法可用來反覆存取日期和時間值。 下列範例說明此問題。 它會擷取<xref:System.Globalization.DateTimeFormatInfo>包含義大利 （義大利文） 文化特性格式資訊的物件。 它會傳遞所傳回的陣列的每個自訂格式字串<xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns>方法，以<xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType>方法用來建立日期和時間的字串表示。 此範例接著會嘗試將此值剖析藉由呼叫<xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType>方法。 如範例輸出所示，部分的自訂格式字串不會產生日期和時間值也會成功反覆存取。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.getalldatetimepatterns/cs/getalldatetimepatternsex1.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.getalldatetimepatterns/vb/getalldatetimepatternsex1.vb#1)]  
  
 若要剖析的日期和時間，可以表示幾種預先定義的自訂格式的字串表示，呼叫下列方法之一：  
  
-   <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>  
  
-   <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>  
  
-   <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>  
  
-   <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29?displayProperty=nameWithType>  
  
 所傳回的陣列中的自訂格式字串<xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns%2A>方法而定，文化特性的現行曆法<xref:System.Globalization.DateTimeFormatInfo>物件可提供格式設定資訊。 如果變更行事曆，這個方法所傳回的陣列也會變更。  
  
   
  
## Examples  
 下列範例會顯示日期和時間格式字串，而異的文化特性，以及產生時，格式字串用來設定特定日期的格式的結果字串。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.getalldatetimepatterns/cs/getalldatetimepatternsinv.cs#3)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.getalldatetimepatterns/vb/getalldatetimepatternsinv.vb#3)]  
  
 此範例會具現化<xref:System.Globalization.DateTimeFormatInfo>物件，表示文化特性而異，藉由呼叫<xref:System.Globalization.DateTimeFormatInfo.%23ctor%2A>建構函式。 它也可以擷取<xref:System.Globalization.DateTimeFormatInfo>表示從文化特性而異<xref:System.Globalization.DateTimeFormatInfo.InvariantInfo%2A>屬性。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns(System.String[],System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="GetAllDateTimePatterns">
      <MemberSignature Language="C#" Value="public string[] GetAllDateTimePatterns (char format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetAllDateTimePatterns(char format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllDateTimePatterns (format As Char) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetAllDateTimePatterns(char format);" />
      <MemberSignature Language="F#" Value="member this.GetAllDateTimePatterns : char -&gt; string[]" Usage="dateTimeFormatInfo.GetAllDateTimePatterns format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="format">標準格式字串。</param>
        <summary>傳回可以使用所指定標準格式字串來格式化日期和時間值的所有模式。</summary>
        <returns>包含標準模式的陣列，其中的日期和時間值可以使用指定的格式字串格式化。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會傳回陣列，包含對應至特定的標準格式字串的自訂格式字串。 請參閱[標準日期和時間格式字串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)取得一份標準格式字串。  
  
 您可以使用自訂格式字串中所傳回的陣列<xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns%2A>在格式化作業中的方法。 不過，如果您這樣做，日期和時間值的字串表示傳回，格式化作業無法永遠剖析成功`Parse`和`TryParse`方法。 因此，您不能假設所傳回的自訂格式字串<xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns%2A>方法可用來反覆存取日期和時間值。 下列範例說明此問題。 它會擷取<xref:System.Globalization.DateTimeFormatInfo>包含俄羅斯 （俄羅斯） 文化特性格式資訊的物件。 它會呼叫<xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns%28System.Char%29>方法，每個標準格式字串，然後將每個自訂格式字串中要傳回的陣列<xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType>方法用來建立日期和時間的字串表示。 此範例接著會嘗試將此值剖析藉由呼叫<xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType>方法。 如範例輸出所示，部分的自訂格式字串不會產生日期和時間值也會成功反覆存取。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.getalldatetimepatterns/cs/getalldatetimepatternsex2.cs#2)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.getalldatetimepatterns/vb/getalldatetimepatternsex2.vb#2)]  
  
 若要剖析的日期和時間，可以表示幾種預先定義的自訂格式的字串表示，呼叫下列方法之一：  
  
-   <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>  
  
-   <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>  
  
-   <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>  
  
-   <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29?displayProperty=nameWithType>  
  
 所傳回的陣列中的自訂格式字串<xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns%2A>方法而定，文化特性的現行曆法<xref:System.Globalization.DateTimeFormatInfo>物件可提供格式設定資訊。 如果變更行事曆，這個方法所傳回的陣列也會變更。  
  
   
  
## Examples  
 下列範例顯示現行曆法的日期和時間模式。  
  
 [!code-cpp[Classic DateTimeFormatInfo.GetAllDateTimePatterns Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic DateTimeFormatInfo.GetAllDateTimePatterns Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DateTimeFormatInfo.GetAllDateTimePatterns Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic DateTimeFormatInfo.GetAllDateTimePatterns Example/CS/source.cs#1)]
 [!code-vb[Classic DateTimeFormatInfo.GetAllDateTimePatterns Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic DateTimeFormatInfo.GetAllDateTimePatterns Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="format" /> 不是有效的標準格式字串。</exception>
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns(System.String[],System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="GetDayName">
      <MemberSignature Language="C#" Value="public string GetDayName (DayOfWeek dayofweek);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetDayName(valuetype System.DayOfWeek dayofweek) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetDayName(System.DayOfWeek)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetDayName(DayOfWeek dayofweek);" />
      <MemberSignature Language="F#" Value="member this.GetDayName : DayOfWeek -&gt; string" Usage="dateTimeFormatInfo.GetDayName dayofweek" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dayofweek" Type="System.DayOfWeek" />
      </Parameters>
      <Docs>
        <param name="dayofweek"><see cref="T:System.DayOfWeek" /> 值。</param>
        <summary>根據與目前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件關聯的文化特性，傳回一星期內指定某一天的文化特性特有完整名稱。</summary>
        <returns><paramref name="dayofweek" /> 所表示星期的特定文化特性之完整名稱。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設的非變異<xref:System.Globalization.DateTimeFormatInfo>物件，這個方法會傳回從字串<xref:System.Globalization.GregorianCalendar>物件。  
  
|`dayofweek`|傳回值|  
|-----------------|------------------|  
|星期日|"Sunday"|  
|週一|"Monday"|  
|星期二|"Tuesday"|  
|週三|"Wednesday"|  
|星期四|"Thursday"|  
|週五|"Friday"|  
|星期六|"Saturday"|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dayofweek" /> 不是有效的 <see cref="T:System.DayOfWeek" /> 值。</exception>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.GregorianCalendar" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.DayNames" />
        <altmember cref="T:System.DayOfWeek" />
      </Docs>
    </Member>
    <Member MemberName="GetEra">
      <MemberSignature Language="C#" Value="public int GetEra (string eraName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetEra(string eraName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetEra(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEra (eraName As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetEra(System::String ^ eraName);" />
      <MemberSignature Language="F#" Value="member this.GetEra : string -&gt; int" Usage="dateTimeFormatInfo.GetEra eraName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eraName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eraName">含有紀元名稱的字串。</param>
        <summary>傳回表示指定紀元的整數。</summary>
        <returns>如果 <paramref name="eraName" /> 有效，則為表示紀元的整數，否則為 -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 紀元名稱是用來參考一段時間綑從固定的點或事件的行事曆的名稱。 例如，"A.D." 或者 「 西元" 是西曆中目前的紀元。  
  
 與比較`eraName`不區分大小寫，例如，"A.d." 相當於"a.d."。  
  
 <xref:System.Globalization.DateTimeFormatInfo.GetEra%2A> 會忽略標點符號紀元縮寫的名稱中，只有當<xref:System.Globalization.GregorianCalendar>中選取<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType>和文化特性會使用 「 A.D." 為紀元名稱時，也就是 「 A.D." 相當於"AD"。  
  
 <xref:System.Globalization.DateTimeFormatInfo.GetEra%2A> 比較`eraName`所傳回的完整紀元名稱<xref:System.Globalization.DateTimeFormatInfo.GetEraName%2A>且具有所傳回的縮寫的紀元名稱<xref:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName%2A>。  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

## Examples  
 下列範例顯示<xref:System.Globalization.DateTimeFormatInfo>月曆是西曆和文化特性使用紀元名稱"西元 」 時，才會忽略在紀元名稱中，標點符號。  
  
 [!code-cpp[System.Globalization.GregorianCalendar.GetEra#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.GregorianCalendar.GetEra/CPP/gregorian_getera.cpp#1)]
 [!code-csharp[System.Globalization.GregorianCalendar.GetEra#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.GregorianCalendar.GetEra/CS/gregorian_getera.cs#1)]
 [!code-vb[System.Globalization.GregorianCalendar.GetEra#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.GregorianCalendar.GetEra/VB/gregorian_getera.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="eraName" /> 為 <see langword="null" />。</exception>
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName="GetEraName">
      <MemberSignature Language="C#" Value="public string GetEraName (int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetEraName(int32 era) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEraName (era As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetEraName(int era);" />
      <MemberSignature Language="F#" Value="member this.GetEraName : int -&gt; string" Usage="dateTimeFormatInfo.GetEraName era" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="era" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="era">表示紀元的整數。</param>
        <summary>傳回含有指定紀元名稱的字串。</summary>
        <returns>含有紀元名稱的字串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 紀元名稱是用來參考一段時間綑從固定的點或事件的行事曆的名稱。 例如，"A.D." 或者 「 西元" 是西曆中目前的紀元。  
  
 有效值`era`所述<xref:System.Globalization.Calendar.Eras%2A>屬性的適當的類別衍生自<xref:System.Globalization.Calendar>。 例如：<xref:System.Globalization.JapaneseCalendar.Eras%2A?displayProperty=nameWithType>顯示的這項實作所支援的紀元清單。  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="era" /> 不表示 <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> 屬性所指定曆法的有效紀元。</exception>
        <block subset="none" type="usage"><para>如果所代表的月曆<see cref="T:System.Globalization.TaiwanCalendar" />但<see cref="P:System.Threading.Thread.CurrentCulture" />不是"ZH-TW"，則<see cref="P:System.Globalization.DateTimeFormatInfo.NativeCalendarName" />， <see cref="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)" />，和<see cref="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName(System.Int32)" />傳回空字串 ("")。</para></block>
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetEra(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetFormat">
      <MemberSignature Language="C#" Value="public object GetFormat (Type formatType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetFormat(class System.Type formatType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetFormat(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormat (formatType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetFormat(Type ^ formatType);" />
      <MemberSignature Language="F#" Value="abstract member GetFormat : Type -&gt; obj&#xA;override this.GetFormat : Type -&gt; obj" Usage="dateTimeFormatInfo.GetFormat formatType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormatProvider.GetFormat(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="formatType">需要的格式服務的類型。</param>
        <summary>傳回指定的類型的物件，以提供日期和時間格式服務。</summary>
        <returns>如果 <paramref name="formatType" /> 與目前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 的類型相同，則為目前的物件，否則為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Format(String, IFormatProvider)`基底資料型別支援的方法叫用這個方法時的目前<xref:System.Globalization.DateTimeFormatInfo>物件會傳遞為<xref:System.IFormatProvider>參數。 這個方法會實作 <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormatProvider" />
        <altmember cref="M:System.Globalization.NumberFormatInfo.GetFormat(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public static System.Globalization.DateTimeFormatInfo GetInstance (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.DateTimeFormatInfo GetInstance(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetInstance(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetInstance (provider As IFormatProvider) As DateTimeFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::DateTimeFormatInfo ^ GetInstance(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member GetInstance : IFormatProvider -&gt; System.Globalization.DateTimeFormatInfo" Usage="System.Globalization.DateTimeFormatInfo.GetInstance provider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.DateTimeFormatInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" />，此提供者會取得 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件。  
  
-或- 
 若要取得 <see cref="P:System.Globalization.DateTimeFormatInfo.CurrentInfo" /> 則為 <see langword="null" />。</param>
        <summary>傳回與指定 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 關聯的 <see cref="T:System.IFormatProvider" /> 物件。</summary>
        <returns>與 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 相關聯的 <see cref="T:System.IFormatProvider" /> 物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會使用<xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>方法`formatProvider`使用<xref:System.Globalization.DateTimeFormatInfo>物件做為`Type`參數。 如果`formatProvider`已`null`或者<xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>會傳回`null`，這個方法會傳回<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A>。  
  
 您的應用程式可以取得<xref:System.Globalization.DateTimeFormatInfo>物件特定的文化特性，使用下列方法之一：  
  
-   <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> 屬性。  
  
-   <xref:System.Globalization.DateTimeFormatInfo.GetInstance%2A>方法，其中`provider`是<xref:System.Globalization.CultureInfo>物件。  
  
 A<xref:System.Globalization.DateTimeFormatInfo>只而異的文化特性或特定文化特性，而非中性文化特性，可以建立物件。  
  
 如需文化特性而異，特定的文化特性和中性文化特性的詳細資訊，請參閱<xref:System.Globalization.CultureInfo>類別描述。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="GetMonthName">
      <MemberSignature Language="C#" Value="public string GetMonthName (int month);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetMonthName(int32 month) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetMonthName(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMonthName (month As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetMonthName(int month);" />
      <MemberSignature Language="F#" Value="member this.GetMonthName : int -&gt; string" Usage="dateTimeFormatInfo.GetMonthName month" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="month" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="month">從 1 到 13 的整數，表示要擷取的月份名稱。</param>
        <summary>根據與目前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件關聯的文化特性，傳回指定月份的文化特性特有完整名稱。</summary>
        <returns><paramref name="month" /> 所表示月份的特定文化特性之完整名稱。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設的非變異<xref:System.Globalization.DateTimeFormatInfo>物件，這個方法會傳回從字串<xref:System.Globalization.GregorianCalendar>物件。  
  
|`month`|傳回值|  
|-------------|------------------|  
|1|「 一月 」|  
|2|"February"|  
|3|"March"|  
|4|"April"|  
|5|「 可能 」|  
|6|"June"|  
|7|"July"|  
|8|"August"|  
|9|"September"|  
|10|"October"|  
|11|"November"|  
|12|"December"|  
|13|""|  
  
 <xref:System.Globalization.Calendar> 物件可以容納具有 13 個月的行事曆。 針對 12 個月的行事曆，則為空字串一律會傳回做為 13 個月的名稱。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="month" /> 小於 1 或大於 13。</exception>
        <altmember cref="T:System.Globalization.Calendar" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.GregorianCalendar" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.MonthNames" />
      </Docs>
    </Member>
    <Member MemberName="GetShortestDayName">
      <MemberSignature Language="C#" Value="public string GetShortestDayName (DayOfWeek dayOfWeek);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetShortestDayName(valuetype System.DayOfWeek dayOfWeek) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetShortestDayName(System.DayOfWeek)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetShortestDayName(DayOfWeek dayOfWeek);" />
      <MemberSignature Language="F#" Value="member this.GetShortestDayName : DayOfWeek -&gt; string" Usage="dateTimeFormatInfo.GetShortestDayName dayOfWeek" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dayOfWeek" Type="System.DayOfWeek" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dayOfWeek">其中一個 <see cref="T:System.DayOfWeek" /> 值。</param>
        <summary>為與目前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件關聯的星期內指定的某一天，取得最短的縮寫日名稱。</summary>
        <returns>縮寫星期名稱，對應於 <paramref name="dayOfWeek" /> 參數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例會示範幾個方法和屬性，以指定日期和時間格式模式、 原生行事曆名稱和完整和縮寫的月份和星期名稱。  
  
 [!code-csharp[sys.glob.DTFI1#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.DTFI1/cs/dtfi1.cs#1)]
 [!code-vb[sys.glob.DTFI1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.DTFI1/vb/dtfi1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dayOfWeek" /> 不是 <see cref="T:System.DayOfWeek" /> 列舉中的值。</exception>
      </Docs>
    </Member>
    <Member MemberName="InvariantInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.DateTimeFormatInfo InvariantInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.DateTimeFormatInfo InvariantInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InvariantInfo As DateTimeFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::DateTimeFormatInfo ^ InvariantInfo { System::Globalization::DateTimeFormatInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InvariantInfo : System.Globalization.DateTimeFormatInfo" Usage="System.Globalization.DateTimeFormatInfo.InvariantInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.DateTimeFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得與文化特性無關 (非變異) 的預設唯讀 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件。</summary>
        <value>與文化特性無關 (非變異) 的唯讀物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性不會變更，不論目前的文化特性。 因為這個緣故，而異的文化特性的<xref:System.Globalization.DateTimeFormatInfo>物件可以用來產生一致、 文化特性無關的結果，在剖析和格式化是多重文化特性的資料上的作業。 例如，如果多個文化特性的日期和時間資料保存格式為字串，它可以進行格式化使用<xref:System.Globalization.DateTimeFormatInfo>而異的文化特性的物件和儲存。 然後使用因文化特性而異的剖析<xref:System.Globalization.DateTimeFormatInfo>物件。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Globalization.DateTimeFormatInfo.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，這個值表示 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件是否唯讀。</summary>
        <value>如果 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件是唯讀，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.ReadOnly(System.Globalization.DateTimeFormatInfo)" />
      </Docs>
    </Member>
    <Member MemberName="LongDatePattern">
      <MemberSignature Language="C#" Value="public string LongDatePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LongDatePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.LongDatePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property LongDatePattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LongDatePattern { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.LongDatePattern : string with get, set" Usage="System.Globalization.DateTimeFormatInfo.LongDatePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定完整日期值的自訂格式字串。</summary>
        <value>完整日期值的自訂格式字串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>屬性會定義特定文化特性格式的呼叫所傳回的日期字串<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>和<xref:System.DateTimeOffset.ToString%2A?displayProperty=nameWithType>方法和複合格式字串時，會提供"D"標準格式字串。 下列範例將說明下列之間的關聯性:"D"標準格式字串中，自訂格式字串所傳回<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>屬性和特定文化特性的日期表示。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.LongDatePattern#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongDatePattern/CS/longdatepattern1.cs#2)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.LongDatePattern#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongDatePattern/VB/longdatepattern1.vb#2)]  
  
 請參閱[自訂日期和時間格式字串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)針對個別的自訂格式規範，可以合併以建構例如"dddd，dd MMMM yyyy"自訂格式字串。  
  
 您應該完全相符的字串，而不是使用日期分隔符號預留位置的完整日期模式設定的日期分隔符號。 例如，若要取得模式 MM DD yyyy，設定完整日期模式為 「 MM-DD-yyyy"。  
  
 如果文化特性變更所使用的行事曆，可能會變更這個屬性的值。 比方說，下列範例示範如何<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>的屬性<xref:System.Globalization.CultureInfo>代表阿拉伯文 （敘利亞） 文化特性物件時變更<xref:System.Globalization.Calendar>文化特性變更所使用的物件。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.LongDatePattern#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongDatePattern/CS/longdatepattern2.cs#3)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.LongDatePattern#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongDatePattern/VB/longdatepattern2.vb#3)]  
  
   
  
## Examples  
 下列範例顯示的值<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>少數的文化特性的屬性。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.LongDatePattern#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongDatePattern/CPP/dtfi_longdatepattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.LongDatePattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongDatePattern/CS/dtfi_longdatepattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.LongDatePattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongDatePattern/VB/dtfi_longdatepattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件為唯讀。</exception>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準日期和時間格式字串</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">自訂日期和時間格式字串</related>
      </Docs>
    </Member>
    <Member MemberName="LongTimePattern">
      <MemberSignature Language="C#" Value="public string LongTimePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LongTimePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.LongTimePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property LongTimePattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LongTimePattern { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.LongTimePattern : string with get, set" Usage="System.Globalization.DateTimeFormatInfo.LongTimePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定完整時間值的自訂格式字串。</summary>
        <value>完整時間值的格式模式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A>屬性會定義特定文化特性格式的呼叫所傳回的日期字串<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>和<xref:System.DateTimeOffset.ToString%2A?displayProperty=nameWithType>方法和複合格式字串時，會提供"T"標準格式字串。  
  
 我們建議您設定的時間分隔符號，完全相符的字串，而不是使用時間分隔符號預留位置的長時間模式。 比方說，若要取得模式為 h-mm-ss，設定完整日期模式，以"h-mm-ss"。  
  
   
  
## Examples  
 下列範例顯示的值<xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A>少數的文化特性。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.LongTimePattern#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongTimePattern/CPP/dtfi_longtimepattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.LongTimePattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongTimePattern/CS/dtfi_longtimepattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.LongTimePattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongTimePattern/VB/dtfi_longtimepattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件為唯讀。</exception>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準日期和時間格式字串</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">自訂日期和時間格式字串</related>
      </Docs>
    </Member>
    <Member MemberName="MonthDayPattern">
      <MemberSignature Language="C#" Value="public string MonthDayPattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MonthDayPattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.MonthDayPattern" />
      <MemberSignature Language="VB.NET" Value="Public Property MonthDayPattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MonthDayPattern { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MonthDayPattern : string with get, set" Usage="System.Globalization.DateTimeFormatInfo.MonthDayPattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定月份和日值的自訂格式字串。</summary>
        <value>月份和日值的自訂格式字串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.MonthDayPattern%2A>屬性會定義特定文化特性格式的呼叫所傳回的日期字串<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>和<xref:System.DateTimeOffset.ToString%2A?displayProperty=nameWithType>方法和複合格式字串時，會提供"m"和"M"標準格式字串。  
  
 如果這個屬性會受影響的值<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>屬性變更。  
  
 我們建議您設定的日期分隔符號，完全相符的字串，而不是使用日期分隔符號預留位置的月份和日期模式。 例如，若要取得 YYYY-MM-DD 的模式，設定月份和日期模式，以"YYYY-MM-DD"。  
  
   
  
## Examples  
 下列範例顯示的值<xref:System.Globalization.DateTimeFormatInfo.MonthDayPattern%2A>少數的文化特性。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.MonthDayPattern#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.MonthDayPattern/CPP/dtfi_monthdaypattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.MonthDayPattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.MonthDayPattern/CS/dtfi_monthdaypattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.MonthDayPattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.MonthDayPattern/VB/dtfi_monthdaypattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件為唯讀。</exception>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準日期和時間格式字串</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">自訂日期和時間格式字串</related>
      </Docs>
    </Member>
    <Member MemberName="MonthGenitiveNames">
      <MemberSignature Language="C#" Value="public string[] MonthGenitiveNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] MonthGenitiveNames" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.MonthGenitiveNames" />
      <MemberSignature Language="VB.NET" Value="Public Property MonthGenitiveNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ MonthGenitiveNames { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MonthGenitiveNames : string[] with get, set" Usage="System.Globalization.DateTimeFormatInfo.MonthGenitiveNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定字串陣列，這個陣列包含與目前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件關聯的月份名稱。</summary>
        <value>月份名稱的字串陣列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在某些語言中，屬於日期的月份名稱會出現在所有格。 例如，"RU-RU"的俄文 （俄羅斯） 的日期，文化特性所組成的日數和所有格的月份名稱，例如 1 Января。  
  
 當設定這個屬性時，陣列必須是一維陣列，而且必須剛好為 13 個元素。 <xref:System.Globalization.Calendar> 物件符合使用 13 個月的行事曆。 （索引零處的項目） 的第一個項目代表一年所定義的第一個月<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>屬性。如果您設定<xref:System.Globalization.DateTimeFormatInfo.MonthGenitiveNames%2A>屬性，您也必須設定<xref:System.Globalization.DateTimeFormatInfo.MonthNames%2A>屬性。  
  
   
  
## Examples  
 下列範例會示範幾個方法和屬性，以指定日期和時間格式模式、 原生行事曆名稱和完整和縮寫的月份和星期名稱。  
  
 [!code-csharp[sys.glob.DTFI1#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.DTFI1/cs/dtfi1.cs#1)]
 [!code-vb[sys.glob.DTFI1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.DTFI1/vb/dtfi1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">在 set 作業中，陣列式多維的，或者長度不是剛好為 13。</exception>
        <exception cref="T:System.ArgumentNullException">在設定作業中，陣列或其中一個項目是 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">在設定作業中，目前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件是唯讀的。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.MonthNames" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames" />
      </Docs>
    </Member>
    <Member MemberName="MonthNames">
      <MemberSignature Language="C#" Value="public string[] MonthNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] MonthNames" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.MonthNames" />
      <MemberSignature Language="VB.NET" Value="Public Property MonthNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ MonthNames { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MonthNames : string[] with get, set" Usage="System.Globalization.DateTimeFormatInfo.MonthNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定包含特定文化特性之月份完整名稱的一維陣列 (型別為 <see cref="T:System.String" />)。</summary>
        <value>包含特定文化特性之月份完整名稱的一維陣列 (型別為 <see cref="T:System.String" />)。 在 12 月制曆法中，陣列的第 13 個元素為空字串。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的陣列包含 "January"、"February"、"March"、"April"、"May"、"June"、"July"、"August"、"September"、"October"、"November"、"December" 和 ""。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當設定這個屬性時，陣列必須是一維陣列，而且必須剛好為 13 個元素。 <xref:System.Globalization.Calendar> 物件符合使用 13 個月的行事曆。 （索引零處的項目） 的第一個項目代表一年所定義的第一個月<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>屬性。  
  
 如果您設定<xref:System.Globalization.DateTimeFormatInfo.MonthNames%2A>屬性，您也必須設定<xref:System.Globalization.DateTimeFormatInfo.MonthGenitiveNames%2A>屬性。  
  
 如果自訂模式包含格式模式，"MMMM"，<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>顯示的值<xref:System.Globalization.DateTimeFormatInfo.MonthNames%2A>取代"MMMM"格式模式中。  
  
 如果這個屬性會受影響的值<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>屬性變更。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">正在將屬性設定為多維或長度不是剛好為 13 的陣列。</exception>
        <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件為唯讀。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.MonthGenitiveNames" />
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetMonthName(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="NativeCalendarName">
      <MemberSignature Language="C#" Value="public string NativeCalendarName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NativeCalendarName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.NativeCalendarName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NativeCalendarName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NativeCalendarName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NativeCalendarName : string" Usage="System.Globalization.DateTimeFormatInfo.NativeCalendarName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得行事曆的原生 (Native) 名稱，這個行事曆與目前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件關聯。</summary>
        <value>如果有原生行事曆名稱可用，則為用於文化特性中與目前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件相關聯之行事曆的原生名稱，如果沒有原生行事曆名稱可用，則為空字串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例會示範幾個方法和屬性，以指定日期和時間格式模式、 原生行事曆名稱和完整和縮寫的月份和星期名稱。  
  
 [!code-csharp[sys.glob.DTFI1#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.DTFI1/cs/dtfi1.cs#1)]
 [!code-vb[sys.glob.DTFI1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.DTFI1/vb/dtfi1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para>如果<see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" />已<see cref="T:System.Globalization.TaiwanCalendar" />但<see cref="P:System.Threading.Thread.CurrentCulture" />不是"ZH-TW"，則<see cref="P:System.Globalization.DateTimeFormatInfo.NativeCalendarName" />， <see cref="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)" />，和<see cref="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName(System.Int32)" />傳回空字串 ("")。</para></block>
      </Docs>
    </Member>
    <Member MemberName="PMDesignator">
      <MemberSignature Language="C#" Value="public string PMDesignator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PMDesignator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.PMDesignator" />
      <MemberSignature Language="VB.NET" Value="Public Property PMDesignator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PMDesignator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PMDesignator : string with get, set" Usage="System.Globalization.DateTimeFormatInfo.PMDesignator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 "post meridiem" (正午以後) 小時的字串指示項。</summary>
        <value>"post meridiem" (正午以後) 小時的字串指示項。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的預設值為 "PM"。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.PMDesignator%2A>屬性用於所有的時間從 12:00:00 （中午） 到 23:59:59.999。  
  
 如果自訂模式包含格式模式"tt"，而且時間是在中午<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>顯示的值<xref:System.Globalization.DateTimeFormatInfo.PMDesignator%2A>取代"tt"的格式模式中。 如果自訂模式包含格式模式"t"，只有第一個字元<xref:System.Globalization.DateTimeFormatInfo.PMDesignator%2A>隨即出現。 您的應用程式應該使用"tt"的語言，是為了維護 AM 和 PM 之間的差異。 其中一種就是日文，日文的 AM 和 PM 指示項的第二個字元 (非第一個字元) 不同。  
  
 對於不使用 PM 指示項的文化特性，這個屬性會傳回空字串。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件為唯讀。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AMDesignator" />
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public static System.Globalization.DateTimeFormatInfo ReadOnly (System.Globalization.DateTimeFormatInfo dtfi);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.DateTimeFormatInfo ReadOnly(class System.Globalization.DateTimeFormatInfo dtfi) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.ReadOnly(System.Globalization.DateTimeFormatInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadOnly (dtfi As DateTimeFormatInfo) As DateTimeFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::DateTimeFormatInfo ^ ReadOnly(System::Globalization::DateTimeFormatInfo ^ dtfi);" />
      <MemberSignature Language="F#" Value="static member ReadOnly : System.Globalization.DateTimeFormatInfo -&gt; System.Globalization.DateTimeFormatInfo" Usage="System.Globalization.DateTimeFormatInfo.ReadOnly dtfi" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.DateTimeFormatInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dtfi" Type="System.Globalization.DateTimeFormatInfo" />
      </Parameters>
      <Docs>
        <param name="dtfi">要包裝的 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件。</param>
        <summary>傳回唯讀的 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 包裝函式。</summary>
        <returns>唯讀的 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 包裝函式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個包裝函式可防止修改`dtfi`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="dtfi" /> 為 <see langword="null" />。</exception>
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="RFC1123Pattern">
      <MemberSignature Language="C#" Value="public string RFC1123Pattern { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RFC1123Pattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.RFC1123Pattern" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RFC1123Pattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RFC1123Pattern { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RFC1123Pattern : string" Usage="System.Globalization.DateTimeFormatInfo.RFC1123Pattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得時間值的自訂格式字串，這個字串是根據網際網路工程任務推動小組 (Internet Engineering Task Force，IETF) 要求建議 (RFC) 1123 規格。</summary>
        <value>根據 IETF RFC 1123 規格的時間值的自訂格式字串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A>屬性會定義特定文化特性格式的呼叫所傳回的日期字串<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>和<xref:System.DateTimeOffset.ToString%2A?displayProperty=nameWithType>方法和複合格式字串時，會提供"r"和"R"標準格式字串。  
  
 RFC1123 模式反映已定義的標準，且屬性為唯讀。 因此，它一律為相同，不論文化特性為何。 自訂格式字串為 "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'"。  
  
   
  
## Examples  
 下列範例會顯示一些文化特性的 RFC1123Pattern 的值。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.RFC1123Pattern#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.RFC1123Pattern/CPP/dtfi_rfc1123pattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.RFC1123Pattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.RFC1123Pattern/CS/dtfi_rfc1123pattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.RFC1123Pattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.RFC1123Pattern/VB/dtfi_rfc1123pattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準日期和時間格式字串</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">自訂日期和時間格式字串</related>
      </Docs>
    </Member>
    <Member MemberName="SetAllDateTimePatterns">
      <MemberSignature Language="C#" Value="public void SetAllDateTimePatterns (string[] patterns, char format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAllDateTimePatterns(string[] patterns, char format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns(System.String[],System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAllDateTimePatterns (patterns As String(), format As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAllDateTimePatterns(cli::array &lt;System::String ^&gt; ^ patterns, char format);" />
      <MemberSignature Language="F#" Value="member this.SetAllDateTimePatterns : string[] * char -&gt; unit" Usage="dateTimeFormatInfo.SetAllDateTimePatterns (patterns, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="patterns" Type="System.String[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="format" Type="System.Char" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="patterns">自訂格式字串的陣列。</param>
        <param name="format">與 <paramref name="patterns" /> 參數中所指定的自訂格式字串相關聯的標準格式字串。</param>
        <summary>設定對應於指定之標準格式字串的自訂日期和時間格式字串。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns%2A>方法定義的自訂格式字串對應至特定標準日期和時間格式字串。 如果呼叫的日期和時間格式化方法包含的標準日期和時間格式字串所指定`format`，此方法會使用中的第一個項目`patterns`定義結果字串的格式陣列。  
  
> [!WARNING]
>  `Parse`並`TryParse`方法不完全反覆運算中的所有字串`patterns`時剖析的日期和時間的字串表示。 如果您需要的剖析作業中有特定格式的日期和時間的字串，您應該傳遞有效的格式，以陣列<xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>， <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>， <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>，或<xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29?displayProperty=nameWithType>方法。  
  
 您可以定義自訂格式字串對應至"d"、"D"、"t"、"T"、"y"或"Y"標準日期和時間格式字串。 如果值`format`是任何其他標準格式字串<xref:System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns%2A>方法會擲回<xref:System.ArgumentException>。  
  
 如果您的自訂日期和時間格式字串包含日期分隔符號，您應該明確指定為日期分隔符號，而不是依賴"/"自訂格式規範取代特定的日期分隔符號剖析或格式化方法。 例如，若要取得模式 MM DD yyyy，使用模式為"MM-DD-yyyy"。  
  
   
  
## Examples  
 下列範例會具現化<xref:System.Globalization.CultureInfo>物件代表"EN-US"（英文-美國） 文化特性，並使用它來剖析日期和時間的字串，使用"Y"標準格式字串的陣列。 然後它會使用<xref:System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns%2A>方法相關聯的新的自訂格式字串"Y"標準格式字串，然後嘗試剖析的日期和時間的字串陣列。 範例輸出所示範的新的自訂格式字串，用於剖析和格式化作業。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.setalldatetimepatterns/cs/setalldatetimepatterns.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.setalldatetimepatterns/vb/setalldatetimepatterns.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="patterns" /> 為 <see langword="null" /> 或長度為零的陣列。  
  
-或- 
 <paramref name="format" />不是一個有效的標準格式字串，或者是不能設定形式的標準格式字串。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="patterns" /> 有 <see langword="null" /> 值的陣列元素。</exception>
        <exception cref="T:System.InvalidOperationException">這個 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件是唯讀的。</exception>
        <altmember cref="Overload:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns" />
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準日期和時間格式字串</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">自訂日期和時間格式字串</related>
      </Docs>
    </Member>
    <Member MemberName="ShortDatePattern">
      <MemberSignature Language="C#" Value="public string ShortDatePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ShortDatePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.ShortDatePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property ShortDatePattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ShortDatePattern { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ShortDatePattern : string with get, set" Usage="System.Globalization.DateTimeFormatInfo.ShortDatePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定簡短日期值的自訂格式字串。</summary>
        <value>簡短日期值的自訂格式字串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>屬性會定義特定文化特性格式的呼叫所傳回的日期字串<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>和<xref:System.DateTimeOffset.ToString%2A?displayProperty=nameWithType>方法和複合格式字串時，會提供"d"標準格式字串。  
  
 如果這個屬性會受影響的值<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>屬性變更。  
  
   
  
## Examples  
 下列範例顯示的值<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>使用屬性和日期值格式化<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>少數的文化特性的屬性。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.ShortDatePattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.ShortDatePattern/CS/dtfi_shortdatepattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.ShortDatePattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.ShortDatePattern/VB/dtfi_shortdatepattern.vb#1)]  
  
 下列範例會修改<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>屬性<xref:System.Globalization.DateTimeFormatInfo>物件，表示英文 （美國） 文化特性的格式化慣例。 它也會顯示日期值兩次，先以反映原始<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>屬性，然後以反映新的屬性值。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.ShortDatePattern#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.ShortDatePattern/CS/shortdatepattern1.cs#2)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.ShortDatePattern#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.ShortDatePattern/VB/shortdatepattern1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件為唯讀。</exception>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準日期和時間格式字串</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">自訂日期和時間格式字串</related>
      </Docs>
    </Member>
    <Member MemberName="ShortestDayNames">
      <MemberSignature Language="C#" Value="public string[] ShortestDayNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] ShortestDayNames" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.ShortestDayNames" />
      <MemberSignature Language="VB.NET" Value="Public Property ShortestDayNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ ShortestDayNames { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ShortestDayNames : string[] with get, set" Usage="System.Globalization.DateTimeFormatInfo.ShortestDayNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定字串陣列，這個陣列包含與目前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件關聯的最短唯一縮寫日名稱。</summary>
        <value>日名稱的字串陣列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例會示範幾個方法和屬性，以指定日期和時間格式模式、 原生行事曆名稱和完整和縮寫的月份和星期名稱。  
  
 [!code-csharp[sys.glob.DTFI1#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.DTFI1/cs/dtfi1.cs#1)]
 [!code-vb[sys.glob.DTFI1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.DTFI1/vb/dtfi1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">在設定作業中，陣列未確切包含七個元素。</exception>
        <exception cref="T:System.ArgumentNullException">在設定的作業中，數值陣列或數值陣列的其中一個元素為 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">在設定作業中，目前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件是唯讀的。</exception>
      </Docs>
    </Member>
    <Member MemberName="ShortTimePattern">
      <MemberSignature Language="C#" Value="public string ShortTimePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ShortTimePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.ShortTimePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property ShortTimePattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ShortTimePattern { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ShortTimePattern : string with get, set" Usage="System.Globalization.DateTimeFormatInfo.ShortTimePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定簡短時間值的自訂格式字串。</summary>
        <value>簡短時間值的自訂格式字串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A>屬性會定義特定文化特性格式的呼叫所傳回的日期字串<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>和<xref:System.DateTimeOffset.ToString%2A?displayProperty=nameWithType>方法和複合格式字串時，會提供"t"標準格式字串。  
  
 我們建議您設定時間分隔符號，而不是使用時間分隔符號預留位置完全相符的字串的簡短時間模式。 例如，若要取得模式為 h-mm-ss，設定簡短時間模式，以"h-mm-ss"。  
  
   
  
## Examples  
 下列範例顯示的值<xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A>少數的文化特性。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.ShortTimePattern#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.ShortTimePattern/CPP/dtfi_shorttimepattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.ShortTimePattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.ShortTimePattern/CS/dtfi_shorttimepattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.ShortTimePattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.ShortTimePattern/VB/dtfi_shorttimepattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件為唯讀。</exception>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準日期和時間格式字串</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">自訂日期和時間格式字串</related>
      </Docs>
    </Member>
    <Member MemberName="SortableDateTimePattern">
      <MemberSignature Language="C#" Value="public string SortableDateTimePattern { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SortableDateTimePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SortableDateTimePattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SortableDateTimePattern { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SortableDateTimePattern : string" Usage="System.Globalization.DateTimeFormatInfo.SortableDateTimePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得可排序日期和時間值的自訂格式字串。</summary>
        <value>可排序日期和時間值的自訂格式字串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern%2A>屬性會定義特定文化特性格式的呼叫所傳回的日期字串<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>和<xref:System.DateTimeOffset.ToString%2A?displayProperty=nameWithType>方法和複合格式字串時，會提供"s"標準格式字串。  
  
 所傳回的格式字串<xref:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern%2A>屬性會反映已定義的標準 (ISO 8601)，且屬性為唯讀。 因此，它一律為相同，不論文化特性為何。 自訂格式字串為 "yyyy'-'MM'-'dd'T'HH':'mm':'ss"。  
  
   
  
## Examples  
 下列範例顯示的值<xref:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern%2A>少數的文化特性。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.SortableDateTimePattern#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.SortableDateTimePattern/CPP/dtfi_sortabledatetimepattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.SortableDateTimePattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.SortableDateTimePattern/CS/dtfi_sortabledatetimepattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.SortableDateTimePattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.SortableDateTimePattern/VB/dtfi_sortabledatetimepattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern" />
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準日期和時間格式字串</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">自訂日期和時間格式字串</related>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="info">To be added.</param>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeSeparator">
      <MemberSignature Language="C#" Value="public string TimeSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TimeSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property TimeSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TimeSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TimeSeparator : string with get, set" Usage="System.Globalization.DateTimeFormatInfo.TimeSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定分隔時間組成部分 (即時、分和秒) 的字串。</summary>
        <value>分隔時間組成部分的字串。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的預設值為 ":"。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果自訂模式包含格式模式":"，<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>顯示的值<xref:System.Globalization.DateTimeFormatInfo.TimeSeparator%2A>取代":"在格式模式。  
  
 時間分隔符號衍生自<xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A>屬性。 我們建議您設定時間分隔符號，簡單地說，或長時間模式，以完全相符的字串，而不是使用時間分隔符號的預留位置。 例如，若要取得模式為 h-mm-ss，設定模式，以"h-mm-ss"。 這種做法也可讓您設定模式，例如"h ' mm 是 'ss'"(3 個 h 36 m 12s)，包括多種類型的分隔符號。 <xref:System.Globalization.DateTimeFormatInfo.TimeSeparator%2A>屬性定義的取代時間分隔符號的字串 (":"自訂日期和時間格式規範) 在結果字串中，執行格式化作業。 它也會定義剖析作業中的時間分隔符號字串。  
  
   
  
## Examples  
 下列範例會具現化<xref:System.Globalization.CultureInfo>物件是 EN-US 文化特性中，變更其日期分隔符號"。"，並使用"t"、"T"、"F"、"f"、"G"和"g"標準格式字串來顯示日期。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.TimeSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.timeseparator/cs/timeseparatorex.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.TimeSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.timeseparator/vb/timeseparatorex.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件為唯讀。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.DateSeparator" />
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">自訂日期和時間格式字串</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準日期和時間格式字串</related>
      </Docs>
    </Member>
    <Member MemberName="UniversalSortableDateTimePattern">
      <MemberSignature Language="C#" Value="public string UniversalSortableDateTimePattern { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UniversalSortableDateTimePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UniversalSortableDateTimePattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ UniversalSortableDateTimePattern { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UniversalSortableDateTimePattern : string" Usage="System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得國際標準、可排序日期和時間字串的自訂格式字串。</summary>
        <value>國際標準、可排序日期和時間字串的自訂格式字串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern%2A>屬性會定義呼叫所傳回的日期字串的格式<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>和<xref:System.DateTimeOffset.ToString%2A?displayProperty=nameWithType>方法和複合格式字串時，會提供"u"標準格式字串。 它可以用來顯示日期和時間以國際標準時間指示"Z"結尾的排序順序。 格式是可排序的因為它會使用前置零的年、 月、 日、 小時、 分鐘和秒。 自訂格式字串 ("yyyy ': ' MM'-' dd HH': 'mm': 'ss'Z'") 相同，不論文化特性或格式提供者。  
  
 所傳回的格式字串<xref:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern%2A>屬性會反映已定義的標準，且屬性為唯讀。 因此，它一律為相同，不論文化特性為何。 自訂格式字串為 "yyyy'-'MM'-'dd HH':'mm':'ss'Z'"。  
  
   
  
## Examples  
 下列範例顯示的值<xref:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern%2A>少數的文化特性。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern/CPP/dtfi_universalsortabledatetimepattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern/CS/dtfi_universalsortabledatetimepattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern/VB/dtfi_universalsortabledatetimepattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern" />
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準 DateTime 格式字串</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">自訂日期和時間格式字串</related>
      </Docs>
    </Member>
    <Member MemberName="YearMonthPattern">
      <MemberSignature Language="C#" Value="public string YearMonthPattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string YearMonthPattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.YearMonthPattern" />
      <MemberSignature Language="VB.NET" Value="Public Property YearMonthPattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ YearMonthPattern { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.YearMonthPattern : string with get, set" Usage="System.Globalization.DateTimeFormatInfo.YearMonthPattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定年月值的自訂格式字串。</summary>
        <value>年份和月份值的自訂格式字串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.YearMonthPattern%2A>屬性會定義特定文化特性格式的呼叫所傳回的日期字串<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>和<xref:System.DateTimeOffset.ToString%2A?displayProperty=nameWithType>方法和複合格式字串時，會提供"y"和"Y"標準格式字串。  
  
 如果這個屬性會受影響的值<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>屬性變更。  
  
 我們建議您到完全相符的字串，而不是使用日期分隔符號預留位置年月模式中設定的日期分隔符號。 例如，若要取得模式 MM yyyy，設定為 「 MM-yyyy"年月模式。  
  
   
  
## Examples  
 下列範例顯示的值<xref:System.Globalization.DateTimeFormatInfo.YearMonthPattern%2A>少數的文化特性。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.YearMonthPattern#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.YearMonthPattern/CPP/dtfi_yearmonthpattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.YearMonthPattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.YearMonthPattern/CS/dtfi_yearmonthpattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.YearMonthPattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.YearMonthPattern/VB/dtfi_yearmonthpattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件為唯讀。</exception>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準日期和時間格式字串</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">自訂日期和時間格式字串</related>
      </Docs>
    </Member>
  </Members>
</Type>