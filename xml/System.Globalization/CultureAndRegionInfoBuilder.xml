<Type Name="CultureAndRegionInfoBuilder" FullName="System.Globalization.CultureAndRegionInfoBuilder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c26c13f66e304f51f2aab5a5b382c431b2074595" /><Meta Name="ms.sourcegitcommit" Value="adc8598fd19d91438cacaa8fa7ce613e28c8218e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="12/11/2018" /><Meta Name="ms.locfileid" Value="53222014" /></Metadata><TypeSignature Language="C#" Value="public sealed class CultureAndRegionInfoBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CultureAndRegionInfoBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.CultureAndRegionInfoBuilder" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CultureAndRegionInfoBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class CultureAndRegionInfoBuilder sealed" />
  <TypeSignature Language="F#" Value="type CultureAndRegionInfoBuilder = class" />
  <AssemblyInfo>
    <AssemblyName>sysglobl</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>定義新的自訂文化特性，或根據其他文化特性和國家/地區的自訂文化特性。 自訂的文化特性可安裝在電腦上，隨後供電腦上執行的應用程式使用。 這個類別無法被繼承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo>類別包含特定文化特性資訊，例如相關聯的語言、 次語言、 國家/地區、 日曆和文化特性的慣例。 這個類別也會提供特定文化特性的執行個體<xref:System.Globalization.DateTimeFormatInfo>， <xref:System.Globalization.NumberFormatInfo>， <xref:System.Globalization.CompareInfo>，和<xref:System.Globalization.TextInfo>類別，所需的特定文化特性的作業，例如大小寫、 格式化和剖析日期和數字項目，以及比較字串。  
  
 根據預設，.NET Framework 支援<xref:System.Globalization.CultureInfo>代表一組預先定義的文化特性的物件。 如需這些文化特性的清單，請參閱 <<c0> [ 國家語言支援 (NLS) API 參考](https://go.microsoft.com/fwlink/?LinkId=200048)在 Go Global Developer Center。 <xref:System.Globalization.CultureAndRegionInfoBuilder>類別可讓您建立第一次，或會覆寫預先定義的文化特性的自訂文化特性。  當安裝自訂的文化特性，並在特定電腦上註冊時，它會變成無法區別預先定義<xref:System.Globalization.CultureInfo>物件，和可具現化，並使用這些物件一樣。  
  
> [!IMPORTANT]
>  請注意，<xref:System.Globalization.CultureAndRegionInfoBuilder>類別位於名為 sysglobl.dll 組件。 已成功編譯使用這種類型的程式碼會要求您新增 sysglobl.dll 的參考。  
  
 只能由該電腦具有系統管理權限的使用者，可以在電腦上註冊的自訂文化特性。 因此，應用程式通常並未建立及安裝自訂的文化特性。 相反地，您可以使用<xref:System.Globalization.CultureAndRegionInfoBuilder>類別來建立一種特殊用途的工具，系統管理員可用來建立、 安裝及註冊自訂的文化特性。 自訂文化特性的電腦上註冊之後，您可以使用<xref:System.Globalization.CultureInfo>建立自訂的文化特性的執行個體，就像您一樣的預先定義的文化特性的應用程式中的類別。  
  
 如果您剖析產生自訂的文化特性的日期和時間字串，您應該使用<xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType>或是<xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType>方法，而非<xref:System.DateTime.Parse%2A?displayProperty=nameWithType>或<xref:System.DateTime.TryParse%2A?displayProperty=nameWithType>方法，以改善剖析作業會成功的機率。 自訂文化特性的日期和時間字串可以是很複雜，因此很難剖析。 <xref:System.DateTime.Parse%2A>和<xref:System.DateTime.TryParse%2A>方法嘗試剖析的字串與數個隱含的剖析模式，其中都可能會失敗。 <xref:System.DateTime.TryParseExact%2A>方法中，相較之下，需要應用程式明確地指定一或多個實際的剖析模式可能會成功。  
  
## <a name="defining-and-creating-a-custom-culture"></a>定義和建立自訂的文化特性  
 您使用<xref:System.Globalization.CultureAndRegionInfoBuilder>定義和命名自訂文化特性的類別。 自訂的文化特性可能是全新的文化特性、 新的文化特性為基礎的現有的文化特性 （也就是補充的文化特性） 或取代現有的.NET Framework 文化特性的文化特性。 在每個案例中，基本的步驟都相同：  
  
1.  具現化<xref:System.Globalization.CultureAndRegionInfoBuilder>物件，藉由呼叫其<xref:System.Globalization.CultureAndRegionInfoBuilder.%23ctor%28System.String%2CSystem.Globalization.CultureAndRegionModifiers%29>建構函式。 若要取代現有的文化特性，傳遞該文化特性的名稱和<xref:System.Globalization.CultureAndRegionModifiers.Replacement?displayProperty=nameWithType>建構函式的列舉值。 若要建立新的文化特性或補充的文化特性，傳遞唯一的文化特性名稱，然後<xref:System.Globalization.CultureAndRegionModifiers.Neutral?displayProperty=nameWithType>或<xref:System.Globalization.CultureAndRegionModifiers.None?displayProperty=nameWithType>列舉值。  
  
    > [!NOTE]
    >  如果您使用<xref:System.Globalization.CultureAndRegionModifiers.Replacement?displayProperty=nameWithType>列舉值，以具現化<xref:System.Globalization.CultureAndRegionInfoBuilder>物件，<xref:System.Globalization.CultureAndRegionInfoBuilder>物件的屬性會自動填入的值<xref:System.Globalization.CultureInfo>来被取代的物件。  
  
2.  如果您要建立新的或補充的文化特性：  
  
    -   填入<xref:System.Globalization.CultureAndRegionInfoBuilder>物件的屬性，藉由呼叫<xref:System.Globalization.CultureAndRegionInfoBuilder.LoadDataFromCultureInfo%2A>方法並傳遞<xref:System.Globalization.CultureInfo>其屬性值會類似於您的新物件的物件。  
  
    -   填入<xref:System.Globalization.CultureAndRegionInfoBuilder>藉由呼叫物件的區域屬性<xref:System.Globalization.CultureAndRegionInfoBuilder.LoadDataFromRegionInfo%2A>方法並傳遞<xref:System.Globalization.RegionInfo>物件，表示您的自訂文化特性的區域。  
  
3.  修改的內容<xref:System.Globalization.CultureAndRegionInfoBuilder>視物件。  
  
4.  如果您打算註冊自訂的文化特性在不同的常式，呼叫<xref:System.Globalization.CultureAndRegionInfoBuilder.Save%2A>方法。 這會產生 XML 檔案，您可以載入並註冊個別的自訂文化特性安裝常式中。  
  
## <a name="registering-a-custom-culture"></a>註冊自訂的文化特性  
 如果您正在開發不同應用程式的自訂文化特性的註冊應用程式，會建立文化特性，您呼叫<xref:System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml%2A>方法來載入 XML 檔案，其中包含自訂文化特性的定義，並具現化<xref:System.Globalization.CultureAndRegionInfoBuilder>物件。 若要處理的註冊，請呼叫<xref:System.Globalization.CultureAndRegionInfoBuilder.Register%2A>方法。 登錄才能成功，會註冊自訂的文化特性的應用程式必須以系統管理權限上執行目標系統中;否則，呼叫<xref:System.Globalization.CultureAndRegionInfoBuilder.Register%2A>會擲回<xref:System.UnauthorizedAccessException>例外狀況。  
  
> [!WARNING]
>  文化特性的資料可能會不同系統之間。 如果您使用<xref:System.Globalization.CultureAndRegionInfoBuilder>類別來建立跨多個的系統，和統一的自訂文化特性建立您的自訂文化特性中現有的資料載入<xref:System.Globalization.CultureInfo>和<xref:System.Globalization.RegionInfo>物件和自訂，您應該開發兩個不同的公用程式。 第一個建立的自訂文化特性，並將它儲存至 XML 檔案。 第二個使用<xref:System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml%2A>方法來載入自訂的文化特性，從 XML 檔案，並註冊目標電腦上。  
  
 註冊程序會執行下列工作：  
  
-   會建立包含資訊中所定義的.nlp 檔案<xref:System.Globalization.CultureAndRegionInfoBuilder>物件。  
  
-   在目標電腦上 %windir%\Globalization 系統目錄中儲存.nlp 檔案。 這可讓自訂文化特性設定，以工作階段之間保存。 (<xref:System.Globalization.CultureAndRegionInfoBuilder>方法需要系統管理權限，因為.nlp 檔案儲存在系統目錄。)  
  
-   準備要在下一次搜尋 %windir%\Globalization 系統目錄，而不是內部快取的.NET Framework 有建立新的自訂文化特性的要求。  
  
 已成功註冊的自訂文化特性時，就區別預先定義之.NET Framework 文化特性。 自訂文化特性可呼叫<xref:System.Globalization.CultureAndRegionInfoBuilder>方法會從本機電腦移除.nlp 檔案。  
  
## <a name="instantiating-a-custom-culture"></a>具現化自訂文化特性  
 您可以建立自訂的文化特性的執行個體中的下列方法之一：  
  
-   藉由叫用<xref:System.Globalization.CultureInfo.%23ctor%2A?displayProperty=nameWithType>建構函式使用的文化特性名稱。  
  
-   藉由呼叫<xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType>與文化特性名稱的方法。  
  
-   藉由呼叫<xref:System.Globalization.CultureInfo.GetCultureInfo%2A?displayProperty=nameWithType>與文化特性名稱的方法。  
  
 此外，陣列<xref:System.Globalization.CultureInfo>所傳回的物件<xref:System.Globalization.CultureInfo.GetCultures%2A?displayProperty=nameWithType>方法包含自訂的文化特性。  
  
   
  
## Examples  
 下列範例會定義自訂的 ru 美國文化特性，表示在美國境內的俄文語言。 此範例會藉由從俄文 （俄羅斯） 載入設定定義自訂的文化特性<xref:System.Globalization.CultureInfo>物件和美國<xref:System.Globalization.RegionInfo>物件，然後再設定一些<xref:System.Globalization.CultureAndRegionInfoBuilder>屬性。 此範例會註冊自訂的文化特性，然後加以具現化，並將目前執行緒文化特性。  
  
 [!code-csharp[System.Globalization.CultureAndRegionInfoBuilder.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureandregioninfobuilder.class/cs/car.cs#1)]
 [!code-vb[System.Globalization.CultureAndRegionInfoBuilder.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureandregioninfobuilder.class/vb/car.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureAndRegionInfoBuilder (string cultureName, System.Globalization.CultureAndRegionModifiers flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string cultureName, valuetype System.Globalization.CultureAndRegionModifiers flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureAndRegionInfoBuilder.#ctor(System.String,System.Globalization.CultureAndRegionModifiers)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (cultureName As String, flags As CultureAndRegionModifiers)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureAndRegionInfoBuilder(System::String ^ cultureName, System::Globalization::CultureAndRegionModifiers flags);" />
      <MemberSignature Language="F#" Value="new System.Globalization.CultureAndRegionInfoBuilder : string * System.Globalization.CultureAndRegionModifiers -&gt; System.Globalization.CultureAndRegionInfoBuilder" Usage="new System.Globalization.CultureAndRegionInfoBuilder (cultureName, flags)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cultureName" Type="System.String" />
        <Parameter Name="flags" Type="System.Globalization.CultureAndRegionModifiers" />
      </Parameters>
      <Docs>
        <param name="cultureName">文化特性的名稱。</param>
        <param name="flags">其中一個 <see cref="T:System.Globalization.CultureAndRegionModifiers" /> 值，指定新的 <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 物件是否為中性文化特性、是否取代現有的文化特性和國家/地區，或者是新的文化特性。</param>
        <summary>初始化 <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `cultureName`參數指定新名稱<xref:System.Globalization.CultureAndRegionInfoBuilder>物件。  
  
 `flags`參數用於<xref:System.Globalization.CultureAndRegionModifiers>值，指定是否新<xref:System.Globalization.CultureAndRegionInfoBuilder>物件是新的自訂文化特性，或取代現有的中性文化特性、 特定文化特性或 Windows 地區設定。  
  
 如果`cultureName`參數指定現有的.NET Framework 文化特性，已登錄之自訂文化特性或 Windows 地區設定中，從產生的文化特性<xref:System.Globalization.CultureAndRegionInfoBuilder.%23ctor%2A>建構函式會自動填入新<xref:System.Globalization.CultureAndRegionInfoBuilder>不因文化特性的物件和國家/地區資訊。  
  
 填入新<xref:System.Globalization.CultureAndRegionInfoBuilder>叫用物件的文化特性和國家/地區資訊<xref:System.Globalization.CultureAndRegionInfoBuilder.LoadDataFromCultureInfo%2A>和<xref:System.Globalization.CultureAndRegionInfoBuilder.LoadDataFromRegionInfo%2A>方法。  
  
## <a name="custom-culture-names"></a>自訂文化特性名稱  
 慣用的格式`cultureName`新的自訂文化特性的參數是"[`prefix`-]`language`[-`region`] [-`suffix`[`…`]]"，其中`language`元件是必要的和`prefix`，`region`，和`suffix`元件是選擇性的。 每個元件的最大長度是 8 個字元和最大長度的整個`cultureName`參數為 84 個字元。  
  
 `prefix`元件是 Internet 指派 Numbers Authority (IANA) 識別。 指定 「 i-」 或 「 我-」 向 IANA，或"x"或"X"的文化特性名稱私用的文化特性名稱。 否則，不需要前置詞。 如需詳細資訊，請參閱 RFC 4646，"Tags for the Identification of Languages"。  
  
 `language`元件`cultureName`參數會指定衍生自 ISO 639-1，小寫雙字母代碼和`region`指定衍生自 ISO 3166 的大寫雙字母代碼。 例如，EN-US 代表英文中是在美國境內。 如果沒有`region`元件表示中性文化特性。  
  
 A`cultureName`也就是相同的.NET Framework 隨附文化特性名稱表示取代 （覆寫） 的文化特性。 可取代的文化特性的屬性指派的值為有限的。 如需這類限制的詳細資訊，請參閱每一個屬性的例外狀況。  
  
 應用程式使用`suffix`區分類似的文化特性的元件。 例如，兩家公司，ABC 和 XYZ，建立並共用新的 ASP.NET Web 服務，以提升他們在世界各地不同的市場中的產品。 網頁服務的顯示區域的標誌和每一家公司，根據使用者的文化特性的當地電話號碼等資訊。 每個網頁的特定文化特性的內容是在個別的資源檔的文化特性名稱來識別，而且由公司名稱所限定。  比方說，EN-US 和 JA-JP 文化特性的資源檔會命名為 en-us-US-ABC、 XYZ-英文-美國、 日本-JP-ABC 和日本-JP-XYZ。 "ABC"和"XYZ"後置詞啟用 Web 服務使用相同的應用程式邏輯，以顯示不同的市場特定資訊。  
  
 `suffix`元件可以包含子元件，其中每一個子元件以連字號分隔，而每一個子元件的最大長度是 8 個字元。 例如，如果 「 英文-美國-honda-cars] 是`cultureName`參數，[-honda-cars 」 是`suffix`元件。  
  
   
  
## Examples  
 下列程式碼範例使用私用前置詞，建立自訂的文化特性，然後列出它的屬性集。 第一個屬性列出的文化特性名稱。  
  
 [!code-cpp[sys.glob.carib1#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.glob.carib1/CPP/carib.cpp#1)]
 [!code-csharp[sys.glob.carib1#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.carib1/CS/carib.cs#1)]
 [!code-vb[sys.glob.carib1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.carib1/VB/carib.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="cultureName" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="cultureName" /> 為空字串 ("")。  
  
-或- 
 <paramref name="cultureName" /> 包含除了 "0" 到 "9"、"a" 到 "z"、"A" 到 "Z"、連字號 (-) 或底線 (_) 以外的字元。  
  
-或- 
 <paramref name="cultureName" /> 包含用來分隔元件的短破折號 (-)，但一個或多個 <paramref name="prefix" />、<paramref name="language" />、<paramref name="region" /> 或 <paramref name="suffix" /> 元件不存在。 也就是說，兩個或更多的短破折號是相鄰的。  
  
-或- 
 <paramref name="cultureName" /> 的長度超過 84 個字元。  
  
-或- 
 <paramref name="cultureName" /> 包含用來分隔元件的短破折號，但一個或多個元件的長度超過 8 個字元。  
  
-或- 
 <paramref name="cultureName" /> 包含前置或後置短破折號 (-) 或底線 (_)。  
  
-或- 
 <paramref name="cultureName" /> 指定 .NET Framework 文化特性之外的其他排序取代文化特性。 例如，<paramref name="culturenName" /> 是 "de-de_phoneb" (排序出現於德文電話簿內之字串的文化特性)，而非 "de-DE" (德文 (德國) 文化特性)。  
  
-或- 
 <paramref name="flags" /> 包含 <see cref="T:System.Globalization.CultureAndRegionModifiers" /> 值的無效組合。  
  
-或- 
 <paramref name="flags" /> 包含 <see cref="F:System.Globalization.CultureAndRegionModifiers.Replacement" /> 或 <see cref="F:System.Globalization.CultureAndRegionModifiers.Neutral" />，而 <paramref name="cultureName" /> 指定找不到的文化特性。  
  
-或- 
 <paramref name="flags" /> 包含 <see cref="F:System.Globalization.CultureAndRegionModifiers.Replacement" />，而 <paramref name="cultureName" /> 指定使用者建立的自訂文化特性，但該文化特性不會取代 .NET Framework 隨附的文化特性。  
  
-或- 
 <paramref name="flags" /> 包含 <see cref="F:System.Globalization.CultureAndRegionModifiers.Neutral" />，而 <paramref name="cultureName" /> 指定非中性文化特性的文化特性。  
  
-或- 
 <paramref name="flags" /> 包含 <see cref="F:System.Globalization.CultureAndRegionModifiers.Neutral" />，而 <paramref name="cultureName" /> 指定使用者建立的自訂文化特性，且該文化特性會取代 .NET Framework 隨附的特定文化特性。</exception>
        <altmember cref="T:System.Globalization.CultureTypes" />
        <altmember cref="T:System.Globalization.CultureAndRegionModifiers" />
      </Docs>
    </Member>
    <Member MemberName="AvailableCalendars">
      <MemberSignature Language="C#" Value="public System.Globalization.Calendar[] AvailableCalendars { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.Calendar[] AvailableCalendars" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.AvailableCalendars" />
      <MemberSignature Language="VB.NET" Value="Public Property AvailableCalendars As Calendar()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Globalization::Calendar ^&gt; ^ AvailableCalendars { cli::array &lt;System::Globalization::Calendar ^&gt; ^ get(); void set(cli::array &lt;System::Globalization::Calendar ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AvailableCalendars : System.Globalization.Calendar[] with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.AvailableCalendars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.Calendar[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定此 <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 物件所支援之曆法的陣列。</summary>
        <value>曆法的陣列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.AvailableCalendars%2A>屬性會對應至<xref:System.Globalization.CultureInfo.OptionalCalendars%2A>屬性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">在設定作業中，指派的陣列是 <see langword="null" />，或所指派陣列的元素是 <see langword="null" />。</exception>
        <exception cref="T:System.NotSupportedException">這個屬性不支援中性文化特性。  
  
-或- 
在設定作業中，指派的陣列包含 <see cref="T:System.Globalization.PersianCalendar" />、<see cref="T:System.Globalization.TaiwanLunisolarCalendar" />、<see cref="T:System.Globalization.KoreanLunisolarCalendar" />、<see cref="T:System.Globalization.JapaneseLunisolarCalendar" />、<see cref="T:System.Globalization.ChineseLunisolarCalendar" /> 或 <see cref="T:System.Globalization.JulianCalendar" />。  
  
-或- 
在設定作業中，指派的陣列包含自訂行事曆。</exception>
        <altmember cref="P:System.Globalization.CultureAndRegionInfoBuilder.GregorianDateTimeFormat" />
      </Docs>
    </Member>
    <Member MemberName="CompareInfo">
      <MemberSignature Language="C#" Value="public System.Globalization.CompareInfo CompareInfo { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CompareInfo CompareInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.CompareInfo" />
      <MemberSignature Language="VB.NET" Value="Public Property CompareInfo As CompareInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CompareInfo ^ CompareInfo { System::Globalization::CompareInfo ^ get(); void set(System::Globalization::CompareInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CompareInfo : System.Globalization.CompareInfo with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.CompareInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.Globalization.CompareInfo" /> 物件，它定義如何比較文化特性的字串。</summary>
        <value><see cref="T:System.Globalization.CompareInfo" /> 物件，它定義如何比較文化特性的字串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.CompareInfo%2A?displayProperty=nameWithType>屬性會對應至<xref:System.Globalization.CultureInfo.CompareInfo%2A?displayProperty=nameWithType>屬性。  
  
 <xref:System.Globalization.TextInfo>並<xref:System.Globalization.CompareInfo>物件指派給<xref:System.Globalization.CultureAndRegionInfoBuilder.TextInfo%2A>和<xref:System.Globalization.CultureAndRegionInfoBuilder.CompareInfo%2A>屬性都支援區分文化特性和區分大小寫字串比較。 <xref:System.Globalization.CompareInfo>物件也有方法，包括<xref:System.Globalization.CompareOptions>參數支援區分文化特性、 不區分大小寫的比較。 這兩個屬性都應該指派<xref:System.Globalization.TextInfo>和<xref:System.Globalization.CompareInfo>代表相同的地區設定物件。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">在設定作業中，指派的值是 <see langword="null" />。</exception>
        <exception cref="T:System.NotSupportedException">這個自訂文化特性是內建文化特性的覆寫。</exception>
        <altmember cref="P:System.Globalization.CultureAndRegionInfoBuilder.TextInfo" />
      </Docs>
    </Member>
    <Member MemberName="ConsoleFallbackUICulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo ConsoleFallbackUICulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo ConsoleFallbackUICulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.ConsoleFallbackUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Property ConsoleFallbackUICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ ConsoleFallbackUICulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConsoleFallbackUICulture : System.Globalization.CultureInfo with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.ConsoleFallbackUICulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>當預設的圖形使用者介面不適當時，為主控台應用程式取得或設定適合的替代使用者介面文化特性。</summary>
        <value>替代的文化特性，用來在主控台上讀取和顯示文字。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在 get 作業中，<xref:System.Globalization.CultureAndRegionInfoBuilder.ConsoleFallbackUICulture%2A>屬性會對應至<xref:System.Globalization.CultureInfo.GetConsoleFallbackUICulture%2A>方法。 指定`null`在設定作業中指出的文化特性定義目前<xref:System.Globalization.CultureAndRegionInfoBuilder>物件是替代的使用者介面文化特性。 如果您嘗試將屬性設定為本身有不同的主控台後援 UI 文化特性的文化特性，然後它會指派該最終 「 分葉 」 文化特性。  
  
 阿拉伯文、 希伯來文、 波斯文、 烏都文和敘利亞文等語言是以雙向文字為基礎。 Windows 應用程式，採用的圖形化使用者介面，支援雙向語言。 不過，主控台應用程式，運用作業系統主控台的文字使用者介面，不提供雙向的支援。 因此，如果主控台應用程式已當地語系化為阿拉伯文或希伯來文，它會顯示無法讀取文字主控台畫面上。  
  
 使用者介面文化特性會指定應用程式需要支援、 使用者輸入和輸出，而且預設是作業系統的文化特性相同的資源。 比方說，<xref:System.Globalization.CultureInfo.CurrentUICulture%2A>屬性會傳回適用於阿拉伯文作業系統的阿拉伯文化特性。 應用程式應該使用<xref:System.Globalization.CultureAndRegionInfoBuilder.ConsoleFallbackUICulture%2A>屬性來擷取適用於主控台應用程式使用者介面是中性文化特性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">在所指定文化特性不是 <see langword="null" /> 的設定作業中，所指定文化特性的 <see cref="P:System.Globalization.CultureAndRegionInfoBuilder.ConsoleFallbackUICulture" /> 屬性會與所指定的文化特性不同。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateFromLdml">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureAndRegionInfoBuilder CreateFromLdml (string xmlFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureAndRegionInfoBuilder CreateFromLdml(string xmlFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateFromLdml (xmlFileName As String) As CultureAndRegionInfoBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureAndRegionInfoBuilder ^ CreateFromLdml(System::String ^ xmlFileName);" />
      <MemberSignature Language="F#" Value="static member CreateFromLdml : string -&gt; System.Globalization.CultureAndRegionInfoBuilder" Usage="System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml xmlFileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureAndRegionInfoBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xmlFileName">包含 <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 物件之 XML 表示的檔案名稱。</param>
        <summary>從包含物件表示的指定 XML 檔案，重新組成 <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 物件。</summary>
        <returns>新物件，相當於存放在 <paramref name="xmlFileName" /> 參數中的資訊。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `xmlFileName`參數指定的檔案名稱包含的 XML 表示法<xref:System.Globalization.CultureAndRegionInfoBuilder>物件。 XML 檔案的格式稱為地區設定資料標記語言 (LDML) 1.1 版。 新<xref:System.Globalization.CultureAndRegionInfoBuilder>物件是建立和使用中的資料初始化`xmlFileName`。 <xref:System.Globalization.CultureAndRegionInfoBuilder.Save%2A>方法會執行的反向作業<xref:System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml%2A>方法。  
  
 在 LDML 檔案中，不因文化特性的屬性會指定為子項目的`<special>`中的項目`<identity>`一節。 屬性值通常由項目的`type`屬性。 比方說，LDML 檔案中的下列摘錄英文的中性文化特性來定義文化特性的父代。  
  
```xml  
<identity>  
   <version number="1.1">ldml version 1.1</version>  
   <generation date="2012-05-16" />  
   <special xmlns:msLocale="http://schemas.microsoft.com/globalization/2004/08/carib/ldml">  
      <!-content removed -->  
      <msLocale:parentName type="en" />  
      <!-content removed -->  
   </special>  
</identity>  
```  
  
 如需詳細的 LDML 標準的詳細資訊，請參閱[Unicode 技術標準 #35、 「 地區設定資料標記語言 (LDML)"](https://go.microsoft.com/fwlink/p/?LinkId=252840) Unicode 協會網站上。  
  
   
  
## Examples  
 下列範例示範<xref:System.Globalization.CultureAndRegionInfoBuilder.Save%2A>和<xref:System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml%2A>方法。  
  
 [!code-csharp[sys.glob.carib.saveLdml#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.carib.saveLdml/cs/sl.cs#1)]
 [!code-vb[sys.glob.carib.saveLdml#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.carib.saveLdml/vb/sl.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="xmlFileName" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="xmlFileName" /> 是一個空字串 ("")，或是無效的檔案或路徑名稱。</exception>
        <exception cref="T:System.Xml.XmlException"><paramref name="xmlFileName" /> 中的資料不是有效的 XML 格式。  
  
-或- 
當存取 <paramref name="xmlFileName" /> 時，發生 I/O 錯誤。</exception>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException"><paramref name="xmlFileName" /> 中的資料不是有效的 LDML 格式。</exception>
        <altmember cref="M:System.Globalization.CultureAndRegionInfoBuilder.Save(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CultureEnglishName">
      <MemberSignature Language="C#" Value="public string CultureEnglishName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CultureEnglishName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.CultureEnglishName" />
      <MemberSignature Language="VB.NET" Value="Public Property CultureEnglishName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CultureEnglishName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CultureEnglishName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.CultureEnglishName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定英文的文化特性名稱。</summary>
        <value>英文的文化特性名稱。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.CultureEnglishName%2A>屬性會對應至<xref:System.Globalization.CultureInfo.EnglishName%2A>屬性。  
  
 例如，傳回值的<xref:System.Globalization.CultureAndRegionInfoBuilder.CultureEnglishName%2A>屬性的特定文化特性在美國的英文是 「 英文 （美國） 」。  
  
 這個屬性的值是相同，不論哪個版本的.NET framework 的語言。  
  
   
  
## Examples  
 下列程式碼範例使用私用前置詞，建立自訂的文化特性，然後列出它的屬性集。 第一個屬性列出的文化特性名稱。  
  
 [!code-cpp[sys.glob.carib1#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.glob.carib1/CPP/carib.cpp#1)]
 [!code-csharp[sys.glob.carib1#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.carib1/CS/carib.cs#1)]
 [!code-vb[sys.glob.carib1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.carib1/VB/carib.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">在設定作業中，此值為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">設定作業中值的長度範圍並不是 0 到 79 個字元之間。</exception>
      </Docs>
    </Member>
    <Member MemberName="CultureName">
      <MemberSignature Language="C#" Value="public string CultureName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CultureName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.CultureName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CultureName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CultureName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CultureName : string" Usage="System.Globalization.CultureAndRegionInfoBuilder.CultureName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得將建立之文化特性的名稱。</summary>
        <value>目前 <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 物件的文化特性名稱。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 傳回值是在指定的文化特性的名稱<xref:System.Globalization.CultureAndRegionInfoBuilder.%23ctor%2A>建構函式。 如果指定的文化特性名稱做為現有的文化特性，但大小寫不同，相同的傳回值是現有的文化特性，不是指定的文化特性名稱的名稱。  
  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.CultureName%2A>屬性會對應至<xref:System.Globalization.CultureInfo.Name%2A>屬性。  
  
   
  
## Examples  
 下列程式碼範例使用私用前置詞，建立自訂的文化特性，然後列出它的屬性集。 第一個屬性列出的文化特性名稱。  
  
 [!code-cpp[sys.glob.carib1#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.glob.carib1/CPP/carib.cpp#1)]
 [!code-csharp[sys.glob.carib1#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.carib1/CS/carib.cs#1)]
 [!code-vb[sys.glob.carib1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.carib1/VB/carib.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CultureNativeName">
      <MemberSignature Language="C#" Value="public string CultureNativeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CultureNativeName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.CultureNativeName" />
      <MemberSignature Language="VB.NET" Value="Public Property CultureNativeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CultureNativeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CultureNativeName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.CultureNativeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定文化特性名稱，使用文化特性設定所要顯示的格式和語言。</summary>
        <value>文化特性名稱，使用文化特性設定所要顯示的格式和語言。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.CultureNativeName%2A>屬性會對應至<xref:System.Globalization.CultureInfo.NativeName%2A>屬性。  
  
 這個屬性的值是相同，不論哪個版本的.NET framework 的語言。  
  
 如果系統未正確顯示文化特性的語言設定，文化特性的完整名稱可能無法正確顯示。 例如，如果<xref:System.Globalization.CultureAndRegionInfoBuilder.CultureName%2A>屬性是"JA-JP"日文 （日本），<xref:System.Globalization.CultureAndRegionInfoBuilder.CultureNativeName%2A>只設定為英文的系統上的屬性不會正確顯示。 不過，多國語言的作業系統，例如 Windows 2000 中，顯示<xref:System.Globalization.CultureAndRegionInfoBuilder.CultureNativeName%2A>屬性正確。  
  
   
  
## Examples  
 下列程式碼範例使用私用前置詞，建立自訂的文化特性，然後列出它的屬性集。 第一個屬性列出的文化特性名稱。  
  
 [!code-cpp[sys.glob.carib1#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.glob.carib1/CPP/carib.cpp#1)]
 [!code-csharp[sys.glob.carib1#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.carib1/CS/carib.cs#1)]
 [!code-vb[sys.glob.carib1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.carib1/VB/carib.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">在設定作業中，此值為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">設定作業中值的長度範圍並不是 0 到 79 個字元之間。</exception>
      </Docs>
    </Member>
    <Member MemberName="CultureTypes">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureTypes CultureTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Globalization.CultureTypes CultureTypes" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.CultureTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CultureTypes As CultureTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureTypes CultureTypes { System::Globalization::CultureTypes get(); };" />
      <MemberSignature Language="F#" Value="member this.CultureTypes : System.Globalization.CultureTypes" Usage="System.Globalization.CultureAndRegionInfoBuilder.CultureTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.Globalization.CultureTypes" /> 值，它描述目前 <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 物件所表示的文化特性。</summary>
        <value>其中一個 <see cref="T:System.Globalization.CultureTypes" /> 值。</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Globalization.CultureTypes" />
        <altmember cref="P:System.Globalization.CultureInfo.CultureTypes" />
        <altmember cref="M:System.Globalization.CultureInfo.GetCultures(System.Globalization.CultureTypes)" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyEnglishName">
      <MemberSignature Language="C#" Value="public string CurrencyEnglishName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrencyEnglishName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.CurrencyEnglishName" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyEnglishName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CurrencyEnglishName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencyEnglishName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.CurrencyEnglishName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定英文的貨幣名稱，這個貨幣是用於目前 <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 物件所表示的國家/地區。</summary>
        <value>地區所使用之貨幣的名稱，以英文表示。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.CurrencyEnglishName%2A>屬性就相當於<xref:System.Globalization.RegionInfo.CurrencyEnglishName%2A>屬性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">在設定作業中，此值為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">設定作業中的值是空字串 ("")。</exception>
        <exception cref="T:System.NotSupportedException">目前 <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 物件是中性文化特性。</exception>
      </Docs>
    </Member>
    <Member MemberName="CurrencyNativeName">
      <MemberSignature Language="C#" Value="public string CurrencyNativeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrencyNativeName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.CurrencyNativeName" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyNativeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CurrencyNativeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencyNativeName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.CurrencyNativeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定貨幣的原生名稱，這個貨幣是用於目前 <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 物件所表示的國家/地區。</summary>
        <value>貨幣名稱，這個貨幣用於目前 <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 物件所表示的國家/地區，並以與該地區的 ISO 3166 國家/地區碼相關聯的語言格式顯示。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.CurrencyNativeName%2A>屬性就相當於<xref:System.Globalization.RegionInfo.CurrencyNativeName%2A>屬性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">在設定作業中，此值為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">設定作業中的值是空字串 ("")。</exception>
        <exception cref="T:System.NotSupportedException">目前 <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 物件是中性文化特性。</exception>
      </Docs>
    </Member>
    <Member MemberName="GeoId">
      <MemberSignature Language="C#" Value="public int GeoId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 GeoId" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.GeoId" />
      <MemberSignature Language="VB.NET" Value="Public Property GeoId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int GeoId { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.GeoId : int with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.GeoId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定地區、國家、縣市或位置的唯一識別碼。</summary>
        <value>32 位元帶正負號的數字，專門識別地理位置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.GeoId%2A>屬性會對應至<xref:System.Globalization.RegionInfo.GeoId%2A>屬性。  
  
 應用程式應該使用<xref:System.Globalization.CultureAndRegionInfoBuilder.GeoId%2A>屬性設為客戶提供特定文化特性的服務。 比方說，<xref:System.Globalization.CultureAndRegionInfoBuilder.GeoId%2A>屬性可以用做為索引鍵來存取資料庫記錄，其中包含區域的特定資訊。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">目前 <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 物件定義中性文化特性。</exception>
      </Docs>
    </Member>
    <Member MemberName="GregorianDateTimeFormat">
      <MemberSignature Language="C#" Value="public System.Globalization.DateTimeFormatInfo GregorianDateTimeFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.DateTimeFormatInfo GregorianDateTimeFormat" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.GregorianDateTimeFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property GregorianDateTimeFormat As DateTimeFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::DateTimeFormatInfo ^ GregorianDateTimeFormat { System::Globalization::DateTimeFormatInfo ^ get(); void set(System::Globalization::DateTimeFormatInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.GregorianDateTimeFormat : System.Globalization.DateTimeFormatInfo with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.GregorianDateTimeFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.DateTimeFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件，此物件會根據西曆定義日期和時間的格式。</summary>
        <value><see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每個文化特性，包括目前所定義的文化特性<xref:System.Globalization.CultureAndRegionInfoBuilder>物件，包含相關聯的當地語系化的西曆<xref:System.Globalization.DateTimeFormatInfo>物件。 <xref:System.Globalization.DateTimeFormatInfo>物件會定義您的應用程式會顯示日期和時間。 <xref:System.Globalization.CultureAndRegionInfoBuilder.GregorianDateTimeFormat%2A>屬性值是<xref:System.Globalization.DateTimeFormatInfo>所傳回第一個當地語系化西曆日曆與相關聯的物件<xref:System.Globalization.CultureAndRegionInfoBuilder.AvailableCalendars%2A>屬性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">在設定作業中，此值為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">設定作業中值的屬性傳回無效的屬性值。</exception>
        <exception cref="T:System.NotSupportedException">目前 <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 物件是中性文化特性。</exception>
      </Docs>
    </Member>
    <Member MemberName="IetfLanguageTag">
      <MemberSignature Language="C#" Value="public string IetfLanguageTag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string IetfLanguageTag" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.IetfLanguageTag" />
      <MemberSignature Language="VB.NET" Value="Public Property IetfLanguageTag As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ IetfLanguageTag { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.IetfLanguageTag : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.IetfLanguageTag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定文化特性名稱，其格式是根據 RFC 4646 標準＜Tags for the Identification of Languages＞。</summary>
        <value>根據 RFC 4646 設定格式的文化特性名稱。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.IetfLanguageTag%2A>屬性取得或設定文化特性名稱，根據 RFC 4646，可能會不同於所傳回的文化特性名稱格式化<xref:System.Globalization.CultureInfo.Name%2A>屬性。 比方說，在.NET Framework 1.0 版中，包括繁體中文的中性文化特性名稱是"ZH-CHT 」。 相反地，RFC 4646"ZH-HANT 」 來定義該文化特性名稱。 （請注意在.NET Framework 第 4 版中，「 ZH-CHT"的顯示名稱是"中文 （繁體） 舊版"）。  
  
 RFC 4646 文化特性名稱是由數個元件所組成。 典型的文化特性名稱是由必要的語言識別項、 選擇性的指令碼識別項和選擇性的國家/地區識別碼所組成。 比方說，塞爾維亞文語言、 斯拉夫文的指令碼和塞爾維亞地區的有效 RFC 4646 文化特性名稱是"sr-Cyrl-RS"。  
  
 請注意，有兩個或多個文化特性相同的 IETF 語言標記。  
  
 詳細資訊，請參閱 RFC 4646，「 標記的識別的語言，」，網址[要求的註解](https://go.microsoft.com/fwlink/?linkid=45286)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">在設定作業中，此值為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">在設定作業中，該值的長度不是從 1 到 84 個字元。</exception>
        <exception cref="T:System.ArgumentException">在設定作業中，該值中所指定的元件名稱是空的或長度大於 8 個字元，不是英數字元或短破折號 (-)，或包含前置或後置短破折號的名稱。</exception>
        <altmember cref="M:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsMetric">
      <MemberSignature Language="C#" Value="public bool IsMetric { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMetric" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.IsMetric" />
      <MemberSignature Language="VB.NET" Value="Public Property IsMetric As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMetric { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsMetric : bool with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.IsMetric" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出國家/地區是否使用公制系統為度量。</summary>
        <value>如果國家/地區使用公制系統為度量，則為 <see langword="true" />；否則為 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">這個作業對中性文化特性無效。</exception>
      </Docs>
    </Member>
    <Member MemberName="ISOCurrencySymbol">
      <MemberSignature Language="C#" Value="public string ISOCurrencySymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ISOCurrencySymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.ISOCurrencySymbol" />
      <MemberSignature Language="VB.NET" Value="Public Property ISOCurrencySymbol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ISOCurrencySymbol { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ISOCurrencySymbol : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.ISOCurrencySymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定與國家/地區關聯之三個字元的 ISO 4217 貨幣符號。</summary>
        <value>與國家/地區關聯之三個字元的 ISO 4217 貨幣符號。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.ISOCurrencySymbol%2A>屬性會對應至<xref:System.Globalization.RegionInfo.ISOCurrencySymbol%2A>屬性。  
  
 中提供的三個字元的 ISO 4217 貨幣符號清單<xref:System.Globalization.RegionInfo>類別主題。 例如，美國貨幣的 ISO 4217 貨幣符號是""。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">這是一個中性文化特性。</exception>
        <exception cref="T:System.ArgumentNullException">在設定作業中，此值為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">在設定作業中，該值的長度不是從 0 到 8 個字元。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsRightToLeft">
      <MemberSignature Language="C#" Value="public bool IsRightToLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRightToLeft" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.IsRightToLeft" />
      <MemberSignature Language="VB.NET" Value="Public Property IsRightToLeft As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsRightToLeft { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsRightToLeft : bool with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.IsRightToLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定與目前 <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 物件關聯之書寫系統中文字行的主要方向。</summary>
        <value>如果目前書寫系統中文字行的主要方向由右至左，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 應用程式使用<xref:System.Globalization.CultureAndRegionInfoBuilder.IsRightToLeft%2A>屬性來判斷相對位置的控制項，例如按鈕和捲軸中的圖形化使用者介面。  
  
 若要存取 自訂建立從目前的文化特性中文字的主要方向<xref:System.Globalization.CultureAndRegionInfoBuilder>物件，使用應用程式應該<xref:System.Globalization.TextInfo.IsRightToLeft%2A>屬性所傳回的物件<xref:System.Globalization.CultureInfo.TextInfo%2A>自訂文化特性的屬性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyboardLayoutId">
      <MemberSignature Language="C#" Value="public int KeyboardLayoutId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 KeyboardLayoutId" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.KeyboardLayoutId" />
      <MemberSignature Language="VB.NET" Value="Public Property KeyboardLayoutId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int KeyboardLayoutId { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.KeyboardLayoutId : int with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.KeyboardLayoutId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定使用中的輸入地區設定識別項。</summary>
        <value>32 位元帶正負號的數字，指定輸入地區設定識別項。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.KeyboardLayoutId%2A>屬性會對應至<xref:System.Globalization.CultureInfo.KeyboardLayoutId%2A>屬性。  
  
 輸入法地區設定識別碼先前稱為鍵盤配置。 識別項可用於語音轉換文字轉換器、 輸入法 (IME) 或任何其他形式的輸入。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">在設定作業中，該值是零。</exception>
      </Docs>
    </Member>
    <Member MemberName="LCID">
      <MemberSignature Language="C#" Value="public int LCID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LCID" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.LCID" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LCID As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LCID { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LCID : int" Usage="System.Globalization.CultureAndRegionInfoBuilder.LCID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得目前 <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 物件的文化特性識別項。</summary>
        <value>目前 <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 物件的文化特性識別項。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.LCID%2A?displayProperty=nameWithType>屬性會對應至<xref:System.Globalization.CultureInfo.LCID%2A?displayProperty=nameWithType>屬性。  
  
 取代的文化特性的文化特性識別項會對應至相對應的國家語言支援 (NLS) 地區設定識別碼。 對於使用者定義自訂文化特性，這個屬性的值一律是十六進位 0x1000。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadDataFromCultureInfo">
      <MemberSignature Language="C#" Value="public void LoadDataFromCultureInfo (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadDataFromCultureInfo(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureAndRegionInfoBuilder.LoadDataFromCultureInfo(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadDataFromCultureInfo (culture As CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadDataFromCultureInfo(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.LoadDataFromCultureInfo : System.Globalization.CultureInfo -&gt; unit" Usage="cultureAndRegionInfoBuilder.LoadDataFromCultureInfo culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture">要使用其屬性的物件。</param>
        <summary>使用指定之 <see cref="T:System.Globalization.CultureInfo" /> 物件的對應屬性，設定目前 <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 物件的屬性。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="culture" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadDataFromRegionInfo">
      <MemberSignature Language="C#" Value="public void LoadDataFromRegionInfo (System.Globalization.RegionInfo region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadDataFromRegionInfo(class System.Globalization.RegionInfo region) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureAndRegionInfoBuilder.LoadDataFromRegionInfo(System.Globalization.RegionInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadDataFromRegionInfo (region As RegionInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadDataFromRegionInfo(System::Globalization::RegionInfo ^ region);" />
      <MemberSignature Language="F#" Value="member this.LoadDataFromRegionInfo : System.Globalization.RegionInfo -&gt; unit" Usage="cultureAndRegionInfoBuilder.LoadDataFromRegionInfo region" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Globalization.RegionInfo" />
      </Parameters>
      <Docs>
        <param name="region">要使用其屬性的物件。</param>
        <summary>使用指定之 <see cref="T:System.Globalization.RegionInfo" /> 物件的對應屬性，設定目前 <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 物件的屬性。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="region" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">因為目前的 <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 物件指定中性文化特性，所以無法設定國家/地區資訊。</exception>
      </Docs>
    </Member>
    <Member MemberName="NumberFormat">
      <MemberSignature Language="C#" Value="public System.Globalization.NumberFormatInfo NumberFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.NumberFormatInfo NumberFormat" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.NumberFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property NumberFormat As NumberFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::NumberFormatInfo ^ NumberFormat { System::Globalization::NumberFormatInfo ^ get(); void set(System::Globalization::NumberFormatInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NumberFormat : System.Globalization.NumberFormatInfo with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.NumberFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件，定義數字、貨幣和百分比在文化特性上適當的顯示格式。</summary>
        <value><see cref="T:System.Globalization.NumberFormatInfo" /> 物件，定義數字、貨幣和百分比在文化特性上適當的顯示格式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.NumberFormat%2A>屬性會對應至<xref:System.Globalization.CultureInfo.NumberFormat%2A>屬性。  
  
 您的應用程式應該呼叫這個屬性只供特定文化特性。  
  
 <xref:System.Globalization.NumberFormatInfo.PercentDecimalSeparator%2A>， <xref:System.Globalization.NumberFormatInfo.PercentGroupSeparator%2A>， <xref:System.Globalization.NumberFormatInfo.PercentGroupSizes%2A>，以及<xref:System.Globalization.NumberFormatInfo.PercentDecimalDigits%2A>的屬性<xref:System.Globalization.CultureAndRegionInfoBuilder.NumberFormat%2A>都會被忽略。 文化特性的已儲存的表單不會儲存這些屬性的明確值。 相反地，當載入的文化特性時，它們一律會預設為<xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>， <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>， <xref:System.Globalization.NumberFormatInfo.NumberGroupSizes%2A>，和<xref:System.Globalization.NumberFormatInfo.NumberDecimalDigits%2A>分別。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">在設定作業中，此值為 <see langword="null" />。</exception>
        <exception cref="T:System.NotSupportedException">這個作業對中性文化特性無效。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">此文化特性的數字、貨幣、或百分比屬性規格包含太多數字或超出範圍。</exception>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Parent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Parent" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.Parent" />
      <MemberSignature Language="VB.NET" Value="Public Property Parent As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Parent { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Globalization.CultureInfo with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.Globalization.CultureInfo" /> 物件，表示目前自訂文化特性的父文化特性。</summary>
        <value><see cref="T:System.Globalization.CultureInfo" /> 物件，表示目前自訂文化特性的父文化特性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文化特性具有階層。 預先定義的文化特性的父代特定文化特性是中性文化特性，而是中性文化特性的父代為<xref:System.Globalization.CultureInfo.InvariantCulture%2A>。 父文化特性，涵蓋了只是在其子系之間常見的資訊集。  
  
 通常建議的自訂文化特性都符合這個階層架構。 不過，根據預設，<xref:System.Globalization.CultureAndRegionInfoBuilder.Parent%2A>的自訂文化特性是<xref:System.Globalization.CultureAndRegionInfoBuilder.Parent%2A>所依據的文化特性。 如果應用程式會建立具有文化特性<xref:System.Globalization.CultureAndRegionInfoBuilder.CultureName%2A>「 英文-美國-MyCulture"基礎"EN-US"，其父代為"en"，因為那是<xref:System.Globalization.CultureAndRegionInfoBuilder.Parent%2A>的"EN-US"。 如果應用程式會使用"EN-US"作為<xref:System.Globalization.CultureAndRegionInfoBuilder.Parent%2A>新的自訂文化特性，它必須明確將此值。  
  
 如果特定的文化特性的資源不是系統所提供的則會使用中性文化特性的資源。 如果無法使用中性文化特性的資源時，會使用內嵌於主要組件中的資源。 如需有關資源後援處理序的詳細資訊，請參閱 <<c0> [ 封裝和部署資源](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md)。  
  
 Windows API 中的文化特性的清單是稍微不同的.NET Framework 中的文化特性的清單。 如果需要與 Windows 的互通性，例如，透過平台叫用的機制，應用程式應該使用.NET Framework 中定義特定文化特性。 這可確保與對等的 Windows 地區設定，這具有相同識別的一致性<xref:System.Globalization.CultureInfo.LCID%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在設定作業中，找不到文化特性值。 可能的原因是，指定的值是未登錄的自訂文化特性。</exception>
        <exception cref="T:System.ArgumentNullException">在設定作業中，此值為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">在目前文化特性的祖系周遊移動的設定作業中，無法在 10 層代 (Generation) 祖系中找到不因文化特性而異 (Invariant Culture)。  
  
-或- 
在設定作業中，發現循環參考：指定的值是目前自訂文化特性的祖系。</exception>
      </Docs>
    </Member>
    <Member MemberName="RegionEnglishName">
      <MemberSignature Language="C#" Value="public string RegionEnglishName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RegionEnglishName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.RegionEnglishName" />
      <MemberSignature Language="VB.NET" Value="Public Property RegionEnglishName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RegionEnglishName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.RegionEnglishName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.RegionEnglishName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定國家/地區的完整英文名稱。</summary>
        <value>國家/地區的完整英文名稱。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.RegionEnglishName%2A>屬性會對應至<xref:System.Globalization.RegionInfo.EnglishName%2A>屬性。  
  
 例如，傳回值的<xref:System.Globalization.CultureAndRegionInfoBuilder.RegionEnglishName%2A>美國為 「 美國 」。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">這個作業對中性文化特性無效。</exception>
        <exception cref="T:System.ArgumentNullException">在設定作業中，此值為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">設定作業中值的長度範圍並不是 0 到 79 個字元之間。</exception>
      </Docs>
    </Member>
    <Member MemberName="RegionName">
      <MemberSignature Language="C#" Value="public string RegionName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RegionName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.RegionName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RegionName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RegionName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RegionName : string" Usage="System.Globalization.CultureAndRegionInfoBuilder.RegionName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>為目前的 <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 物件取得國家/地區名稱。</summary>
        <value>目前 <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 物件的國家/地區名稱。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 傳回值是在指定的文化特性的名稱<xref:System.Globalization.CultureAndRegionInfoBuilder.%23ctor%2A>建構函式。 如果指定的文化特性名稱做為現有的文化特性，但大小寫不同，相同的傳回值是現有的文化特性，不是指定的文化特性名稱的名稱。  
  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.RegionName%2A>屬性會對應至<xref:System.Globalization.RegionInfo.Name%2A>屬性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">這個作業對中性文化特性無效。</exception>
      </Docs>
    </Member>
    <Member MemberName="RegionNativeName">
      <MemberSignature Language="C#" Value="public string RegionNativeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RegionNativeName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.RegionNativeName" />
      <MemberSignature Language="VB.NET" Value="Public Property RegionNativeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RegionNativeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.RegionNativeName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.RegionNativeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定此自訂文化特性為人們熟知的國家/地區全名。</summary>
        <value>國家/地區的當地名稱。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.RegionNativeName%2A>屬性會對應至<xref:System.Globalization.RegionInfo.NativeName%2A>屬性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">這個作業對中性文化特性無效。</exception>
        <exception cref="T:System.ArgumentNullException">在設定作業中，此值為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">設定作業中值的長度範圍並不是 1 到 79 個字元之間。</exception>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public void Register ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Register() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureAndRegionInfoBuilder.Register" />
      <MemberSignature Language="VB.NET" Value="Public Sub Register ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Register();" />
      <MemberSignature Language="F#" Value="member this.Register : unit -&gt; unit" Usage="cultureAndRegionInfoBuilder.Register " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將目前的 <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 物件當做自訂文化特性保存在本機電腦上，並讓應用程式可以使用該文化特性。 必須有系統管理員權限。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.Register%2A>方法會將自訂的文化特性儲存為檔案的本機電腦上，全球化目錄的子目錄中傳回 win32 [GetWindowsDirectory](https://go.microsoft.com/fwlink/?LinkId=191561)函式。 此程序會呼叫註冊自訂的文化特性。 註冊自訂的文化特性之後，可以藉由指定的文化特性名稱建立新的自訂文化特性<xref:System.Globalization.CultureInfo.%23ctor%2A>建構函式或呼叫<xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType>方法。  
  
 會移除自訂文化特性，請呼叫<xref:System.Globalization.CultureAndRegionInfoBuilder.Unregister%2A>方法。  
  
   
  
## Examples  
 下列範例示範<xref:System.Globalization.CultureAndRegionInfoBuilder.Register%2A>方法。  
  
 [!code-csharp[sys.glob.carib.register#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.carib.register/CS/persist.cs#1)]
 [!code-vb[sys.glob.carib.register#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.carib.register/VB/persist.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">自訂文化特性已經登錄。  
  
-或- 
目前的 <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 物件有一個必須在文化特性登錄之前設定的屬性。 所有的文化特性，不論中性或特定，都必須設定 <see cref="P:System.Globalization.CultureAndRegionInfoBuilder.TextInfo" /> 和 <see cref="P:System.Globalization.CultureAndRegionInfoBuilder.CompareInfo" />。 特定文化特性還必須設定 <see cref="P:System.Globalization.CultureAndRegionInfoBuilder.NumberFormat" />、<see cref="P:System.Globalization.CultureAndRegionInfoBuilder.GregorianDateTimeFormat" /> 和 <see cref="P:System.Globalization.CultureAndRegionInfoBuilder.AvailableCalendars" />。  
  
如果未定義下列屬性，則這個方法也會擲回 <see cref="T:System.InvalidOperationException" />： 
 <see cref="P:System.Globalization.CultureAndRegionInfoBuilder.CultureEnglishName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.CultureNativeName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.CurrencyEnglishName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.CurrencyNativeName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.ISOCurrencySymbol" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.Parent" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.RegionEnglishName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.RegionNativeName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISOLanguageName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISORegionName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterWindowsLanguageName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterWindowsRegionName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISOLanguageName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISORegionName" /></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 物件屬性值超出其最大長度或值。</exception>
        <exception cref="T:System.UnauthorizedAccessException">使用者沒有系統管理員權限。</exception>
        <altmember cref="M:System.Globalization.CultureAndRegionInfoBuilder.Unregister(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(string filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureAndRegionInfoBuilder.Save(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (filename As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::String ^ filename);" />
      <MemberSignature Language="F#" Value="member this.Save : string -&gt; unit" Usage="cultureAndRegionInfoBuilder.Save filename" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">包含此自訂文化特性之 XML 表示的檔案名稱。</param>
        <summary>將目前 <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 物件的 XML 表示寫入指定檔案中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.Save%2A>方法會寫入目前<xref:System.Globalization.CultureAndRegionInfoBuilder>所指定的檔案物件`filename`以 XML 格式的參數稱為 「 地區設定資料標記語言 (LDML) 1.1 版。 <xref:System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml%2A>方法會執行的反向作業<xref:System.Globalization.CultureAndRegionInfoBuilder.Save%2A>方法。  
  
 LDML 檔案格式的相關資訊，請參閱<xref:System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml%2A>方法。 如需 LDML 標準資訊，請參閱 < [Unicode 技術標準 #35、 「 地區設定資料標記語言 (LDML)"](https://go.microsoft.com/fwlink/p/?LinkId=252840) Unicode 協會網站上。  
  
   
  
## Examples  
 下列範例示範<xref:System.Globalization.CultureAndRegionInfoBuilder.Save%2A>和<xref:System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml%2A>方法。  
  
 [!code-csharp[sys.glob.carib.saveLdml#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.carib.saveLdml/cs/sl.cs#1)]
 [!code-vb[sys.glob.carib.saveLdml#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.carib.saveLdml/vb/sl.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="filename" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="filename" /> 為空字串 ("")。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">目前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件中所含之 <see cref="T:System.Globalization.TextInfo" />、<see cref="T:System.Globalization.NumberFormatInfo" /> 或 <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 物件的屬性值無效。</exception>
        <altmember cref="M:System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TextInfo">
      <MemberSignature Language="C#" Value="public System.Globalization.TextInfo TextInfo { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.TextInfo TextInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.TextInfo" />
      <MemberSignature Language="VB.NET" Value="Public Property TextInfo As TextInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::TextInfo ^ TextInfo { System::Globalization::TextInfo ^ get(); void set(System::Globalization::TextInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TextInfo : System.Globalization.TextInfo with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.TextInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.TextInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.Globalization.TextInfo" /> 物件，它定義與此自訂文化特性相關的書寫系統。</summary>
        <value>物件，定義與此自訂文化特性關聯的書寫系統。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.TextInfo%2A?displayProperty=nameWithType>屬性會提供特定文化特性的大小寫字串的資訊。 它會對應至<xref:System.Globalization.CultureInfo.TextInfo%2A?displayProperty=nameWithType>屬性。  
  
 <xref:System.Globalization.TextInfo>並<xref:System.Globalization.CompareInfo>物件指派給<xref:System.Globalization.CultureAndRegionInfoBuilder.TextInfo%2A>和<xref:System.Globalization.CultureAndRegionInfoBuilder.CompareInfo%2A>屬性都支援區分文化特性和區分大小寫字串比較。 <xref:System.Globalization.CompareInfo>物件也有方法，包括<xref:System.Globalization.CompareOptions>參數支援區分文化特性、 不區分大小寫的比較。 這兩個屬性都應該指派<xref:System.Globalization.TextInfo>和<xref:System.Globalization.CompareInfo>代表相同的地區設定物件。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">這個作業不支援取代的文化特性。</exception>
        <exception cref="T:System.ArgumentNullException">在設定作業中，此值為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">清單分隔符號的字元數範圍不是從 0 到 3 個字元。</exception>
        <altmember cref="P:System.Globalization.CultureAndRegionInfoBuilder.CompareInfo" />
      </Docs>
    </Member>
    <Member MemberName="ThreeLetterISOLanguageName">
      <MemberSignature Language="C#" Value="public string ThreeLetterISOLanguageName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ThreeLetterISOLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISOLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Property ThreeLetterISOLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ThreeLetterISOLanguageName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ThreeLetterISOLanguageName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISOLanguageName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定此自訂文化特性之語言的 ISO 639-2 三個字母代碼。</summary>
        <value>目前 <see cref="T:System.Globalization.CultureInfo" /> 物件之語言的 ISO 639-2 三個字母代碼。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISOLanguageName%2A>屬性會對應至<xref:System.Globalization.CultureInfo.ThreeLetterISOLanguageName%2A>屬性。  
  
 例如，適用於英文的三個字母縮寫為"eng"。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">在設定作業中，此值為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">設定作業中值的長度範圍並不是 1 到 8 個字元之間。</exception>
        <exception cref="T:System.ArgumentException">設定作業中的值包含不在以下範圍中的字元：'a' 到 'z'、'A' 到 'Z' 或 '0' 到 '9'。</exception>
      </Docs>
    </Member>
    <Member MemberName="ThreeLetterISORegionName">
      <MemberSignature Language="C#" Value="public string ThreeLetterISORegionName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ThreeLetterISORegionName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISORegionName" />
      <MemberSignature Language="VB.NET" Value="Public Property ThreeLetterISORegionName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ThreeLetterISORegionName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ThreeLetterISORegionName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISORegionName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定國家/地區在 ISO 3166 中定義的三個字母代碼。</summary>
        <value>為國家/地區定義於 ISO 3166 中的三個字母代碼。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISORegionName%2A>屬性會對應至<xref:System.Globalization.RegionInfo.ThreeLetterISORegionName%2A>屬性。  
  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISORegionName%2A>屬性包含其中一個國家/地區在 ISO 3166 中定義的三個字母代碼。 例如，美國的三個字母代碼為"USA"。  
  
 案例並不重要。 不過， <xref:System.Globalization.CultureAndRegionInfoBuilder.RegionName%2A>， <xref:System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISORegionName%2A>，和<xref:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISORegionName%2A>屬性包含適當的程式碼，以大寫。  
  
 預先定義的國家/地區名稱會列在<xref:System.Globalization.RegionInfo>類別主題。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">在設定作業中，此值為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">設定作業中值的長度範圍並不是 1 到 8 個字元之間。</exception>
        <exception cref="T:System.ArgumentException">設定作業中的值包含不在以下範圍中的字元：'a' 到 'z'、'A' 到 'Z' 或 '0' 到 '9'。</exception>
      </Docs>
    </Member>
    <Member MemberName="ThreeLetterWindowsLanguageName">
      <MemberSignature Language="C#" Value="public string ThreeLetterWindowsLanguageName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ThreeLetterWindowsLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterWindowsLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Property ThreeLetterWindowsLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ThreeLetterWindowsLanguageName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ThreeLetterWindowsLanguageName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterWindowsLanguageName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定在 Windows API 中所定義之語言的三個字母代碼。</summary>
        <value>Windows API 中所定義之語言的三個字母代碼。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterWindowsLanguageName%2A>屬性會對應至<xref:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName%2A>屬性。  
  
 這個屬性會傳回相同的值做為 Windows API 方法`GetLocaleInfo`LOCALE_SABBREVLANGNAME 值。 例如，英文 （美國） Windows API 中所定義的三個字母代碼為"enu"。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">在設定作業中，此值為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">設定作業中值的長度範圍並不是 1 到 8 個字元之間。</exception>
        <exception cref="T:System.ArgumentException">設定作業中的值包含不在以下範圍中的字元：'a' 到 'z'、'A' 到 'Z' 或 '0' 到 '9'。</exception>
        <exception cref="T:System.NotSupportedException">在設定作業中，目前的自訂文化特性是取代的文化特性。</exception>
      </Docs>
    </Member>
    <Member MemberName="ThreeLetterWindowsRegionName">
      <MemberSignature Language="C#" Value="public string ThreeLetterWindowsRegionName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ThreeLetterWindowsRegionName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterWindowsRegionName" />
      <MemberSignature Language="VB.NET" Value="Public Property ThreeLetterWindowsRegionName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ThreeLetterWindowsRegionName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ThreeLetterWindowsRegionName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterWindowsRegionName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 Windows 指派給由目前自訂文化特性所表示之國家/地區的三個字母代碼。</summary>
        <value>Windows 指派給由這個 <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 物件所表示之國家/地區的三個字母代碼。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterWindowsRegionName%2A>屬性會對應至<xref:System.Globalization.RegionInfo.ThreeLetterWindowsRegionName%2A>屬性。  
  
 例如，美國的三個字母代碼為"USA"。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">在設定作業中，此值為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">設定作業中值的長度範圍並不是 1 到 8 個字元之間。</exception>
        <exception cref="T:System.ArgumentException">設定作業中的值包含不在以下範圍中的字元：'a' 到 'z'、'A' 到 'Z' 或 '0' 到 '9'。</exception>
        <exception cref="T:System.NotSupportedException">在設定作業中，目前的自訂文化特性是取代的文化特性或中性文化特性。</exception>
      </Docs>
    </Member>
    <Member MemberName="TwoLetterISOLanguageName">
      <MemberSignature Language="C#" Value="public string TwoLetterISOLanguageName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TwoLetterISOLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISOLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Property TwoLetterISOLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TwoLetterISOLanguageName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TwoLetterISOLanguageName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISOLanguageName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定目前 <see cref="T:System.Globalization.CultureInfo" /> 物件之語言的 ISO 639-1 兩個字母代碼。</summary>
        <value>目前 <see cref="T:System.Globalization.CultureInfo" /> 物件之語言的 ISO 639-1 兩個字母代碼。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISOLanguageName%2A>屬性會對應至<xref:System.Globalization.CultureInfo.TwoLetterISOLanguageName%2A>屬性。  
  
 例如，英文版的兩個字母縮寫是"en"。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">在設定作業中，此值為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">設定作業中值的長度範圍並不是 1 到 8 個字元之間。</exception>
        <exception cref="T:System.ArgumentException">設定作業中的值包含不在以下範圍中的字元：'a' 到 'z'、'A' 到 'Z' 或 '0' 到 '9'。</exception>
      </Docs>
    </Member>
    <Member MemberName="TwoLetterISORegionName">
      <MemberSignature Language="C#" Value="public string TwoLetterISORegionName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TwoLetterISORegionName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISORegionName" />
      <MemberSignature Language="VB.NET" Value="Public Property TwoLetterISORegionName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TwoLetterISORegionName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TwoLetterISORegionName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISORegionName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定國家/地區在 ISO 3166 中定義的兩個字母代碼。</summary>
        <value>為國家/地區定義於 ISO 3166 中的兩個字母代碼。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISORegionName%2A>屬性會對應至<xref:System.Globalization.RegionInfo.TwoLetterISORegionName%2A>屬性。  
  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISORegionName%2A>屬性值是其中一個國家/地區在 ISO 3166 中定義的兩個字母代碼。 例如，美國的兩個字母代碼是 「 我們的 」。 預先定義<xref:System.Globalization.RegionInfo>名稱會列在<xref:System.Globalization.RegionInfo>類別主題。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">在設定作業中，此值為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">設定作業中值的長度範圍並不是 1 到 8 個字元之間。</exception>
        <exception cref="T:System.ArgumentException">設定作業中的值包含不在以下範圍中的字元：'a' 到 'z'、'A' 到 'Z' 或 '0' 到 '9'。</exception>
        <exception cref="T:System.NotSupportedException">在設定作業中，目前的自訂文化特性是中性文化特性。</exception>
      </Docs>
    </Member>
    <Member MemberName="Unregister">
      <MemberSignature Language="C#" Value="public static void Unregister (string cultureName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Unregister(string cultureName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureAndRegionInfoBuilder.Unregister(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Unregister (cultureName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unregister(System::String ^ cultureName);" />
      <MemberSignature Language="F#" Value="static member Unregister : string -&gt; unit" Usage="System.Globalization.CultureAndRegionInfoBuilder.Unregister cultureName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cultureName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="cultureName">要刪除之自訂文化特性的名稱。</param>
        <summary>從本機電腦刪除自訂的文化特性。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.Unregister%2A>方法會執行的反向<xref:System.Globalization.CultureAndRegionInfoBuilder.Register%2A>方法。 <xref:System.Globalization.CultureAndRegionInfoBuilder.Register%2A>方法會將自訂的文化特性儲存為 Win32 API 所傳回的目錄的全球化子目錄中的本機電腦上的檔案[GetWindowsDirectory](https://go.microsoft.com/fwlink/?LinkId=191561)函式。 <xref:System.Globalization.CultureAndRegionInfoBuilder.Unregister%2A>方法會從電腦刪除持續性的自訂文化特性的檔案。 刪除檔案之後，在電腦記憶體中的自訂文化特性的現有執行個體繼續運作，但無法建立自訂的文化特性的新執行個體。  
  
   
  
## Examples  
 下列範例示範<xref:System.Globalization.CultureAndRegionInfoBuilder.Unregister%2A>方法。  
  
 [!code-csharp[sys.glob.carib.unregister#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.carib.unregister/CS/unregister.cs#1)]
 [!code-vb[sys.glob.carib.unregister#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.carib.unregister/VB/unregister.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><paramref name="cultureName" /> 是父文化特性，或是相依文化特性的主控台後援使用者介面文化特性。</exception>
        <exception cref="T:System.UnauthorizedAccessException">使用者沒有系統管理員權限。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="cultureName" /> 指定找不到的文化特性。</exception>
        <altmember cref="M:System.Globalization.CultureAndRegionInfoBuilder.Register" />
      </Docs>
    </Member>
  </Members>
</Type>