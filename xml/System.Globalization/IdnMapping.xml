<Type Name="IdnMapping" FullName="System.Globalization.IdnMapping">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ed62e8499764dd5b075b00bc015a4b6e1563ef14" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52193509" /></Metadata><TypeSignature Language="C#" Value="public sealed class IdnMapping" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit IdnMapping extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.IdnMapping" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class IdnMapping" />
  <TypeSignature Language="C++ CLI" Value="public ref class IdnMapping sealed" />
  <TypeSignature Language="F#" Value="type IdnMapping = class" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization.Extensions</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>支援在網際網路網域名稱中使用非 ASCII 字元。 這個類別無法被繼承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 網際網路網域名稱是由一或多個部分，呼叫以標籤分隔符號分隔的網域名稱標籤所組成。 例如，網域名稱"www.proseware.com 」 包含標籤、"www"、"有關 proseware"和"com"，以句點分隔。 標準的網域名稱是由 US-ASCII （或基本拉丁文） 字元範圍，從 007E u+0000 到 U + 0021 中的指定字元所組成。 若要以便在不使用 US-ASCII 字元集，國際化網域名稱的應用程式 (IDNA) 的文化特性的網際網路使用標準已採用的 2003，以支援包含 US-ASCII 字元範圍以外的 Unicode 字元的方式。 不過，名稱伺服器和網域名稱解析繼續依賴 US-ASCII 字元範圍內的字元。  
  
 IDNA 機制會使用 Punycode，來將包含 US-ASCII 字元範圍，網域名稱系統所支援的 US-ASCII 字元範圍以外的 Unicode 字元的國際化的網域名稱對應。 IDNA 機制用來只將網域名稱轉換，不透過網際網路傳輸的資料。  
  
> [!IMPORTANT]
>  在  [!INCLUDE[net_v45](~/includes/net-v45-md.md)]，則<xref:System.Globalization.IdnMapping>類別支援不同版本的 IDNA 標準，根據使用中的作業系統：  
>   
>  -   在上執行時[!INCLUDE[win8](~/includes/win8-md.md)]，它支援 2008年版的 IDNA 標準所述[RFC 5891： 國際化網域名稱中的應用程式 (IDNA): 通訊協定](https://go.microsoft.com/fwlink/?LinkId=231875)。  
> -   舊版的 Windows 作業系統上執行時，它支援 2003年版本的所述的標準[RFC 3490： 國際化網域名稱的應用程式 (IDNA)](https://go.microsoft.com/fwlink/?LinkId=158110)。  
>   
>  請參閱[Unicode 技術標準 #46: IDNA 相容性處理](https://go.microsoft.com/fwlink/?LinkId=232459)這些標準的差異的方式處理特定集的字元。  
  
 <xref:System.Globalization.IdnMapping.GetAscii%2A?displayProperty=nameWithType>方法將正規化的網域名稱，將標準化的名稱轉換成 US-ASCII 字碼指標範圍 (U + 0020 到 U + 007E)，在可顯示的 Unicode 字元所組成，前面加上了 ASCII 相容編碼 (ACE) 的前置詞的表示法 ("xn-」) 給每個標籤。 <xref:System.Globalization.IdnMapping.GetUnicode%2A?displayProperty=nameWithType>方法會將還原的網域名稱標籤，來轉換<xref:System.Globalization.IdnMapping.GetAscii%2A>方法。  
  
 如果要轉換的字串包含標籤分隔符號字元表意字元句點 (U + 3002)，全形句點 (U + FF0E) 和半形表意字元完全停止 (U + FF61)<xref:System.Globalization.IdnMapping.GetAscii%2A>方法將它們轉換成標籤分隔符號完全停止 （句號，U +002E)。 <xref:System.Globalization.IdnMapping.GetUnicode%2A>方法，不過，不會還原原始的標籤分隔符號字元。  
  
   
  
## Examples  
 下列範例會使用<xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29>方法，以將陣列轉換國際化網域名稱為 Punycode。 <xref:System.Globalization.IdnMapping.GetUnicode%2A>方法再回到原始的網域名稱，會將轉換的 Punycode 網域名稱，但標準標籤分隔符號以取代原始的標籤分隔符號。  
  
 [!code-csharp[System.Globalization.IdnMapping.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.class/cs/conversion1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.class/vb/conversion1.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>所有公用方法<see cref="T:System.Globalization.IdnMapping" />是安全執行緒，而且用於同時從多個執行緒，因此只要<see cref="T:System.Globalization.IdnMapping" />執行個體的屬性不也同時設定。</threadsafe>
    <altmember cref="Overload:System.String.Normalize" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IdnMapping ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IdnMapping();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Globalization.IdnMapping" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.IdnMapping.AllowUnassigned%2A?displayProperty=nameWithType>並<xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A?displayProperty=nameWithType>屬性會初始化為`false`。 一小部分 ASCII 字元 A-Z、 0-9、 連字號 （-） 以外的字元 (U + 002D)，和網域名稱中允許的句號 （.） 字元，但未指派的 Unicode 字碼指標不是。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowUnassigned">
      <MemberSignature Language="C#" Value="public bool AllowUnassigned { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowUnassigned" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.IdnMapping.AllowUnassigned" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowUnassigned As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowUnassigned { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowUnassigned : bool with get, set" Usage="System.Globalization.IdnMapping.AllowUnassigned" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出目前 <see cref="T:System.Globalization.IdnMapping" /> 物件成員執行的作業中是否使用未指定的 Unicode 字碼指標。</summary>
        <value>如果作業中使用未指定的字碼指標則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 已註冊的網域名稱不能包含未指派的字碼指標。 因此，預設值<xref:System.Globalization.IdnMapping.AllowUnassigned%2A>屬性是`false`。 IDNA 規格進行比對字串的查詢中只允許未指派的字碼指標 (也就是在網域名稱查閱)。 如需有關使用的網域名稱中的未指派的字碼指標，請參閱[RFC 3454、 「 準備的國際化字串 (stringprep) 」](https://go.microsoft.com/fwlink/?LinkId=231873)和[RFC 5891、"國際化網域名稱中的應用程式 （IDNA): 通訊協定 」](https://go.microsoft.com/fwlink/?LinkId=231875)。  
  
> [!IMPORTANT]
>  如果<xref:System.Globalization.IdnMapping.AllowUnassigned%2A>屬性是`false`，與屬性相關聯的行為取決於基礎作業系統。 在  [!INCLUDE[win8](~/includes/win8-md.md)]，則<xref:System.Globalization.IdnMapping>類別符合 IDNA 2008，它以 Unicode 6.0 標準為基礎。 在舊版 Windows 中，<xref:System.Globalization.IdnMapping>類別根據 IDNA 2003，這根據 Unicode 3。*x*。 已指派 IDNA 2003 中的一些字碼指標已指派的字元，而且支援 IDNA 2008。 例如，U + 0221年中引進了 Unicode 4.0。 上[!INCLUDE[win8](~/includes/win8-md.md)]，它會編碼為 「 xn-6la"。 在舊版 Windows 中，就會擲回<xref:System.ArgumentException>例外狀況。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="idnMapping.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">要與目前的物件進行比較的物件。</param>
        <summary>指出指定的物件和目前的 <see cref="T:System.Globalization.IdnMapping" /> 物件是否相等。</summary>
        <returns>如果 <paramref name="obj" /> 參數指定的物件是從 <see cref="T:System.Globalization.IdnMapping" /> 衍生，並且其 <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> 和 <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> 屬性相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAscii">
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將包含 US-ASCII 字元範圍以外之 Unicode 字元的網域名稱標籤字串，編碼為 US-ASCII 字元範圍 (U+0020 到 U+007E) 中可顯示之 Unicode 字元的字串。 此字串是依據 IDNA 標準來格式化。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAscii">
      <MemberSignature Language="C#" Value="public string GetAscii (string unicode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAscii(string unicode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetAscii(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAscii (unicode As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAscii(System::String ^ unicode);" />
      <MemberSignature Language="F#" Value="member this.GetAscii : string -&gt; string" Usage="idnMapping.GetAscii unicode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicode" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="unicode">要轉換的字串，其包含以標籤分隔符號分隔的一個或多個網域名稱標籤。</param>
        <summary>將網域名稱標籤的字串 (包含 Unicode 字元) 編碼為 US-ASCII 字元範圍中可顯示的 Unicode 字元字串。 此字串是依據 IDNA 標準來格式化。</summary>
        <returns>由 <paramref name="unicode" /> 參數指定的字串的對等用法，以 US-ASCII 字元範圍 (U+0020 到 U+007E) 中可顯示的 Unicode 字元組成，並根據 IDNA 標準進行格式化。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `unicode`參數指定有效的 Unicode 字元組成的一或多個標籤的字串。 標籤會以標籤分隔符號分隔。 `unicode`參數不能以標籤分隔符號，開頭，但它可以包含，並選擇性地以分隔符號為結尾。 標籤分隔符號會完全停止 (週期、 U + 002E)、 表意文字全文停止 (U + 3002)，全形句點 (U + FF0E) 和半形表意字元完全停止 (U + FF61)。 例如，網域名稱"www.adatum.com 」 包含標籤、"www"、"adatum，"和"com"，以句號分隔。  
  
 標籤不能包含任何下列字元：  
  
-   從 u+0000 0001 U + 001F 和 U + 007F Unicode 控制字元。  
  
-   如果未指定 Unicode 字元的值<xref:System.Globalization.IdnMapping.AllowUnassigned%2A>屬性是`false`。  
  
-   非標準字元，以 US-ASCII 字元範圍，例如空間 (u+0020)，驚嘆號標記 (U + 0021)，且如果低列 (U + 005F) 字元的值<xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A>屬性是`true`。  
  
-   特定版本的 IDNA 標準禁止的字元。 如需有關禁止的字元的詳細資訊，請參閱[RFC 3454： 準備的國際化字串 ("stringprep 」)](https://go.microsoft.com/fwlink/?LinkId=231873) IDNA 2003 和[RFC 5982: Unicode 字碼指標和國際化網域名稱應用程式](https://go.microsoft.com/fwlink/?LinkId=231877)IDNA 2008。  
  
 <xref:System.Globalization.IdnMapping.GetAscii%2A>方法會將完全停止 (週期、 U + 002E) 中的所有標籤的分隔符號。  
  
 如果`unicode`不包含任何外部 US-ASCII 字元禁止的字元範圍和 US-ASCII 字元範圍內的任何字元，則方法會傳回`unicode`不變。  
  
   
  
## Examples  
 下列範例會使用<xref:System.Globalization.IdnMapping.GetAscii%28System.String%29>方法，以將陣列轉換國際化網域名稱為 Punycode，這是包含 US-ASCII 字元範圍中的字元編碼同等權限。 <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%29>方法再將的 Punycode 網域名稱轉換回原始的網域名稱，但標準標籤分隔符號以取代原始的標籤分隔符號。  
  
 [!code-csharp[System.Globalization.IdnMapping.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.class/cs/conversion1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.class/vb/conversion1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="unicode" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">根據 <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> 和 <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> 屬性以及 IDNA 標準，<paramref name="unicode" /> 無效。</exception>
        <block subset="none" type="usage"><para>在  [!INCLUDE[net_v45](~/includes/net-v45-md.md)]，則<see cref="T:System.Globalization.IdnMapping" />類別支援不同版本的 IDNA 標準，根據使用中的作業系統： 
-當上執行[!INCLUDE[win8](~/includes/win8-md.md)]，它支援 2008年版的 IDNA 標準所述[RFC 5891： 國際化網域名稱中的應用程式 (IDNA): 通訊協定](https://go.microsoft.com/fwlink/?LinkId=231875)。  
  
-當在舊版的 Windows 作業系統上執行，它會支援 2003年版本的所述的標準[RFC 3490： 國際化網域名稱的應用程式 (IDNA)](https://go.microsoft.com/fwlink/?LinkId=158110)。  
  
請參閱[Unicode 技術標準 #46: IDNA 相容性處理](https://go.microsoft.com/fwlink/?LinkId=232459)這些標準的差異的方式處理特定集的字元。</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetAscii">
      <MemberSignature Language="C#" Value="public string GetAscii (string unicode, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAscii(string unicode, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetAscii(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAscii (unicode As String, index As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAscii(System::String ^ unicode, int index);" />
      <MemberSignature Language="F#" Value="member this.GetAscii : string * int -&gt; string" Usage="idnMapping.GetAscii (unicode, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicode" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="unicode">要轉換的字串，其包含以標籤分隔符號分隔的一個或多個網域名稱標籤。</param>
        <param name="index">針對 <paramref name="unicode" /> 以零為起始的位移，指定要轉換的子字串起點。 轉換作業會持續到 <paramref name="unicode" /> 字串尾端。</param>
        <summary>將包含 US-ASCII 字元範圍以外之 Unicode 字元的網域名稱標籤子字串編碼。 子字串會轉換成 US-ASCII 字元範圍中可顯示的 Unicode 字元，並根據 IDNA 標準進行格式化。</summary>
        <returns>由 <paramref name="unicode" /> 和 <paramref name="index" /> 參數指定的子字串的對等用法，以 US-ASCII 字元範圍 (U+0020 到 U+007E) 中可顯示的 Unicode 字元組成，並根據 IDNA 標準進行格式化。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `unicode`和`index`參數定義具有有效的 Unicode 字元組成的一或多個標籤子字串。 標籤會以標籤分隔符號分隔。 子字串的第一個字元不能以標籤分隔符號，開頭，但它可以包含，並選擇性地以分隔符號為結尾。 標籤分隔符號會完全停止 (週期、 U + 002E)、 表意文字全文停止 (U + 3002)，全形句點 (U + FF0E) 和半形表意字元完全停止 (U + FF61)。 例如，網域名稱"www.adatum.com 」 包含標籤、"www"、"adatum，"和"com"，以句號分隔。  
  
 標籤不能包含任何下列字元：  
  
-   從 u+0000 0001 U + 001F 和 U + 007F Unicode 控制字元。  
  
-   未指派的值而定的 Unicode 字元<xref:System.Globalization.IdnMapping.AllowUnassigned%2A>屬性。  
  
-   非標準字元，以 US-ASCII 字元範圍，例如空間 (u+0020)，驚嘆號標記 (U + 0021)，和低 (U + 005F) 字元，根據的值<xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A>屬性。  
  
-   特定版本的 IDNA 標準禁止的字元。 如需有關禁止的字元的詳細資訊，請參閱[RFC 3454： 準備的國際化字串 ("stringprep 」)](https://go.microsoft.com/fwlink/?LinkId=231873) IDNA 2003 和[RFC 5982: Unicode 字碼指標和國際化網域名稱應用程式](https://go.microsoft.com/fwlink/?LinkId=231877)IDNA 2008。  
  
 <xref:System.Globalization.IdnMapping.GetAscii%2A>方法會將完全停止 (週期、 U + 002E) 中的所有標籤的分隔符號。  
  
 如果`unicode`不包含任何外部 US-ASCII 字元禁止的字元範圍和 US-ASCII 字元範圍內的任何字元，則方法會傳回`unicode`不變。  
  
   
  
## Examples  
 下列範例會移除本機部分和 @ 字元從電子郵件地址，並傳遞產生的網域名稱來<xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%29>方法來建立包含 US-ASCII 字元編碼對等的 Punycode 網域名稱字元範圍。 <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%2CSystem.Int32%2CSystem.Int32%29>方法再將的 Punycode 網域名稱轉換回原始的網域名稱，但標準標籤分隔符號以取代原始的標籤分隔符號。  
  
 [!code-csharp[System.Globalization.IdnMapping.GetAscii#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/cs/conversion1a.cs#2)]
 [!code-vb[System.Globalization.IdnMapping.GetAscii#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/vb/conversion1a.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="unicode" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> 小於零。  
  
-或- 
 <paramref name="index" /> 大於 <paramref name="unicode" /> 的長度。</exception>
        <exception cref="T:System.ArgumentException">根據 <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> 和 <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> 屬性以及 IDNA 標準，<paramref name="unicode" /> 無效。</exception>
        <block subset="none" type="usage"><para>在  [!INCLUDE[net_v45](~/includes/net-v45-md.md)]，則<see cref="T:System.Globalization.IdnMapping" />類別支援不同版本的 IDNA 標準，根據使用中的作業系統： 
-當上執行[!INCLUDE[win8](~/includes/win8-md.md)]，它支援 2008年版的 IDNA 標準所述[RFC 5891： 國際化網域名稱中的應用程式 (IDNA): 通訊協定](https://go.microsoft.com/fwlink/?LinkId=231875)。  
  
-當在舊版的 Windows 作業系統上執行，它會支援 2003年版本的所述的標準[RFC 3490： 國際化網域名稱的應用程式 (IDNA)](https://go.microsoft.com/fwlink/?LinkId=158110)。  
  
請參閱[Unicode 技術標準 #46: IDNA 相容性處理](https://go.microsoft.com/fwlink/?LinkId=232459)這些標準的差異的方式處理特定集的字元。</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetAscii">
      <MemberSignature Language="C#" Value="public string GetAscii (string unicode, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAscii(string unicode, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetAscii(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAscii (unicode As String, index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAscii(System::String ^ unicode, int index, int count);" />
      <MemberSignature Language="F#" Value="member this.GetAscii : string * int * int -&gt; string" Usage="idnMapping.GetAscii (unicode, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicode" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="unicode">要轉換的字串，其包含以標籤分隔符號分隔的一個或多個網域名稱標籤。</param>
        <param name="index">針對 <paramref name="unicode" /> 以零起始的位移，指定子字串起點。</param>
        <param name="count">子字串中要轉換的字元數，此子字串從 <paramref name="index" /> 字串中的 <paramref name="unicode" /> 所指定的位置開始。</param>
        <summary>在包含 US-ASCII 字元範圍以外之 Unicode 字元的網域名稱標籤子字串中，將指定數目的字元編碼。 子字串會轉換成 US-ASCII 字元範圍中可顯示的 Unicode 字元，並根據 IDNA 標準進行格式化。</summary>
        <returns>由 <paramref name="unicode" />、<paramref name="index" /> 和 <paramref name="count" /> 參數指定的子字串對等用法，其包含 US-ASCII 字元範圍 (U+0020 到 U+007E) 中可顯示的 Unicode 字元組成，並根據 IDNA 標準進行格式化。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Unicode`， `index`，和`count`參數定義具有有效的 Unicode 字元組成的一或多個標籤子字串。 標籤會以標籤分隔符號分隔。 子字串的第一個字元不能以標籤分隔符號，開頭，但它可以包含，並選擇性地以分隔符號為結尾。 標籤分隔符號會完全停止 (週期、 U + 002E)、 表意文字全文停止 (U + 3002)，全形句點 (U + FF0E) 和半形表意字元完全停止 (U + FF61)。 例如，網域名稱"www.adatum.com 」 包含標籤、"www"、"adatum，"和"com"，以句號分隔。  
  
 標籤不能包含任何下列字元：  
  
-   從 u+0000 0001 U + 001F 和 U + 007F Unicode 控制字元。  
  
-   未指派的值而定的 Unicode 字元<xref:System.Globalization.IdnMapping.AllowUnassigned%2A>屬性。  
  
-   非標準字元，以 US-ASCII 字元範圍，例如空間 (u+0020)，驚嘆號標記 (U + 0021)，和低 (U + 005F) 字元，根據的值<xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A>屬性。  
  
-   特定版本的 IDNA 標準禁止的字元。 如需有關禁止的字元的詳細資訊，請參閱[RFC 3454： 準備的國際化字串 ("stringprep 」)](https://go.microsoft.com/fwlink/?LinkId=231873) IDNA 2003 和[RFC 5982: Unicode 字碼指標和國際化網域名稱應用程式](https://go.microsoft.com/fwlink/?LinkId=231877)IDNA 2008。  
  
 <xref:System.Globalization.IdnMapping.GetAscii%2A>方法會將完全停止 (週期、 U + 002E) 中的所有標籤的分隔符號。 如果子字串不包含 US-ASCII 字元範圍以外的任何字元，並禁止使用 US-ASCII 字元範圍內的任何字元，則方法會傳回未變更的子字串。  
  
   
  
## Examples  
 下列範例會使用<xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29>方法來轉換 IDNA 標準符合的網域名稱使用國際化的網域名稱。 <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%2CSystem.Int32%2CSystem.Int32%29>方法，然後將標準化的網域名稱轉換回原始的網域名稱，但標準標籤分隔符號以取代原始的標籤分隔符號。  
  
 [!code-csharp[IdnMapping.GetX#1](~/samples/snippets/csharp/VS_Snippets_CLR/IdnMapping.GetX/CS/getx.cs#1)]
 [!code-vb[IdnMapping.GetX#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IdnMapping.GetX/VB/getx.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="unicode" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> 或 <paramref name="count" /> 小於零。  
  
-或- 
 <paramref name="index" /> 大於 <paramref name="unicode" /> 的長度。  
  
-或- 
 <paramref name="index" /> 大於 <paramref name="unicode" /> 減去 <paramref name="count" /> 之後的長度。</exception>
        <exception cref="T:System.ArgumentException">根據 <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> 和 <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> 屬性以及 IDNA 標準，<paramref name="unicode" /> 無效。</exception>
        <block subset="none" type="usage"><para>在  [!INCLUDE[net_v45](~/includes/net-v45-md.md)]，則<see cref="T:System.Globalization.IdnMapping" />類別支援不同版本的 IDNA 標準，根據使用中的作業系統： 
-當上執行[!INCLUDE[win8](~/includes/win8-md.md)]，它支援 2008年版的 IDNA 標準所述[RFC 5891： 國際化網域名稱中的應用程式 (IDNA): 通訊協定](https://go.microsoft.com/fwlink/?LinkId=231875)。  
  
-當在舊版的 Windows 作業系統上執行，它會支援 2003年版本的所述的標準[RFC 3490： 國際化網域名稱的應用程式 (IDNA)](https://go.microsoft.com/fwlink/?LinkId=158110)。  
  
請參閱[Unicode 技術標準 #46: IDNA 相容性處理](https://go.microsoft.com/fwlink/?LinkId=232459)這些標準的差異的方式處理特定集的字元。</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="idnMapping.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回這個 <see cref="T:System.Globalization.IdnMapping" /> 物件的雜湊程式碼。</summary>
        <returns>四個 32 位元帶正負號的常數的其中一個，這些常數是從 <see cref="T:System.Globalization.IdnMapping" /> 物件的屬性衍生。  傳回值沒有特別意義，且不適合在雜湊程式碼演算法中使用。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 覆寫<xref:System.Globalization.IdnMapping.GetHashCode%2A>方法，如果您的應用程式必須實作有意義的雜湊程式碼演算法。  
  
   
  
## Examples  
 下列範例會假設為單一字串可以包含多個以空格分隔的電子郵件地址。 它會移除本機部分和 @ 字元從每個電子郵件地址，並將產生的網域名稱來<xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%29>或<xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29>方法用來建立的 Punycode 網域名稱。 <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%2CSystem.Int32%2CSystem.Int32%29>方法接著會將的 Punycode 網域名稱轉換回原始的網域名稱。  
  
 [!code-csharp[System.Globalization.IdnMapping.GetAscii#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/cs/conversion1b.cs#3)]
 [!code-vb[System.Globalization.IdnMapping.GetAscii#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/vb/conversion1b.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUnicode">
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將一個或多個根據 IDNA 標準編碼的網域名稱標籤解碼為 Unicode 字元的字串。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUnicode">
      <MemberSignature Language="C#" Value="public string GetUnicode (string ascii);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetUnicode(string ascii) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetUnicode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUnicode (ascii As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetUnicode(System::String ^ ascii);" />
      <MemberSignature Language="F#" Value="member this.GetUnicode : string -&gt; string" Usage="idnMapping.GetUnicode ascii" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ascii" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ascii">要解碼的字串，其包含 US-ASCII 字元範圍 (U+0020 到 U+007E) 中一個或多個標籤，根據 IDNA 標準編碼。</param>
        <summary>將根據 IDNA 標準編碼的一個或多個網域名稱標籤字串解碼為 Unicode 字元字串。</summary>
        <returns>IDNA 子字串的 Unicode 對等用法，由 <paramref name="ascii" /> 參數指定。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需網域名稱、 標籤和標籤分隔符號的詳細資訊，請參閱的 < 備註 ><xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType>方法。  
  
   
  
## Examples  
 下列範例會使用<xref:System.Globalization.IdnMapping.GetAscii%28System.String%29>方法，以將陣列轉換國際化網域名稱為 Punycode。 <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%29>方法再將的 Punycode 網域名稱轉換回原始的網域名稱，但標準標籤分隔符號以取代原始的標籤分隔符號。  
  
 [!code-csharp[System.Globalization.IdnMapping.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.class/cs/conversion1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.class/vb/conversion1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="ascii" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">根據 <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> 和 <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> 屬性以及 IDNA 標準，<paramref name="ascii" /> 無效。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUnicode">
      <MemberSignature Language="C#" Value="public string GetUnicode (string ascii, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetUnicode(string ascii, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUnicode (ascii As String, index As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetUnicode(System::String ^ ascii, int index);" />
      <MemberSignature Language="F#" Value="member this.GetUnicode : string * int -&gt; string" Usage="idnMapping.GetUnicode (ascii, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ascii" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ascii">要解碼的字串，其包含 US-ASCII 字元範圍 (U+0020 到 U+007E) 中一個或多個標籤，根據 IDNA 標準編碼。</param>
        <param name="index">針對 <paramref name="ascii" /> 以零為起始的位移，指定要解碼的子字串起點。 解碼作業會持續到 <paramref name="ascii" /> 字串尾端。</param>
        <summary>將根據 IDNA 標準編碼的一個或多個網域名稱標籤子字串解碼為 Unicode 字元字串。</summary>
        <returns><paramref name="ascii" /> 和 <paramref name="index" /> 參數指定 IDNA 子字串的 Unicode 對等用法。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需網域名稱、 標籤和標籤分隔符號的詳細資訊，請參閱的 < 備註 ><xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="ascii" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> 小於零。  
  
-或- 
 <paramref name="index" /> 大於 <paramref name="ascii" /> 的長度。</exception>
        <exception cref="T:System.ArgumentException">根據 <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> 和 <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> 屬性以及 IDNA 標準，<paramref name="ascii" /> 無效。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUnicode">
      <MemberSignature Language="C#" Value="public string GetUnicode (string ascii, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetUnicode(string ascii, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUnicode (ascii As String, index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetUnicode(System::String ^ ascii, int index, int count);" />
      <MemberSignature Language="F#" Value="member this.GetUnicode : string * int * int -&gt; string" Usage="idnMapping.GetUnicode (ascii, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ascii" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ascii">要解碼的字串，其包含 US-ASCII 字元範圍 (U+0020 到 U+007E) 中一個或多個標籤，根據 IDNA 標準編碼。</param>
        <param name="index">針對 <paramref name="ascii" /> 以零起始的位移，指定子字串起點。</param>
        <param name="count">子字串中要轉換的字元數，此子字串從 <paramref name="ascii" /> 字串中 <paramref name="index" /> 所指定的位置開始。</param>
        <summary>將根據 IDNA 標準編碼的一個或多個網域名稱標籤的指定長度子字串，解碼為 Unicode 字元字串。</summary>
        <returns><paramref name="ascii" />、<paramref name="index" /> 和 <paramref name="count" /> 參數指定 IDNA 子字串的 Unicode 對等用法。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需網域名稱、 標籤和標籤分隔符號的詳細資訊，請參閱的 < 備註 ><xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="ascii" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> 或 <paramref name="count" /> 小於零。  
  
-或- 
 <paramref name="index" /> 大於 <paramref name="ascii" /> 的長度。  
  
-或- 
 <paramref name="index" /> 大於 <paramref name="ascii" /> 減去 <paramref name="count" /> 之後的長度。</exception>
        <exception cref="T:System.ArgumentException">根據 <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> 和 <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> 屬性以及 IDNA 標準，<paramref name="ascii" /> 無效。</exception>
      </Docs>
    </Member>
    <Member MemberName="UseStd3AsciiRules">
      <MemberSignature Language="C#" Value="public bool UseStd3AsciiRules { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseStd3AsciiRules" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.IdnMapping.UseStd3AsciiRules" />
      <MemberSignature Language="VB.NET" Value="Public Property UseStd3AsciiRules As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseStd3AsciiRules { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseStd3AsciiRules : bool with get, set" Usage="System.Globalization.IdnMapping.UseStd3AsciiRules" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出目前 <see cref="T:System.Globalization.IdnMapping" /> 物件成員執行的作業中是否使用標準或寬鬆命名慣例。</summary>
        <value>如果作業中使用標準命名慣例，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 請遵循標準的命名規則的網域名稱是由 US-ASCII 字元範圍中的字元的特定子集所組成。 字元是字母 A 到 Z、 0 到 9 的數字、 連字號 （-） 字元 (U + 002D)，以及句號 （.） 字元。 字元的大小寫不重要。 比較不嚴謹的命名慣例允許使用更廣泛範圍的 ASCII 字元，包括空格字元 (u+0020)、 驚嘆號字元 (U + 0021)，和上方橫線字元 (U + 005F)。 如果<xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A>已`true`，標準的字元可以出現在所傳回的標籤<xref:System.Globalization.IdnMapping.GetAscii%2A>方法。  
  
 根據預設，windows 7<xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A>屬性是`false`，以及擴充的 ASCII 字元子集允許在標籤中。  
  
> [!NOTE]
>  <xref:System.Globalization.IdnMapping>類別會禁止使用雙位元字元 u+0000 到 U + 001F，，和 U + 007F 的網域名稱標籤不論設定為何<xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A>屬性。 這項限制可降低受到安全性攻擊，例如詐騙的風險。  
  
   
  
## Examples  
 下列範例會產生包含在 u+0000 到 U + 007F ASCII 範圍內的字元的 Url，並將它們傳遞至<xref:System.Globalization.IdnMapping.GetAscii%28System.String%29>兩個方法<xref:System.Globalization.IdnMapping>物件。 一個物件都有其<xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A>屬性設定為`true`，和另一個物件都有設為`false`。 輸出會顯示時，都會在無效的字元<xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A>屬性是`true`時，但有效`false`。  
  
 [!code-csharp[System.Globalization.IdnMapping.UseStd3AsciiRules#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.usestd3asciirules/cs/usestd3asciirules1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.UseStd3AsciiRules#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.usestd3asciirules/vb/usestd3asciirules1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>