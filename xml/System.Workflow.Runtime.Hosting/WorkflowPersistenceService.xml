<Type Name="WorkflowPersistenceService" FullName="System.Workflow.Runtime.Hosting.WorkflowPersistenceService">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ec1eb1e036001431540c10b6cc57bb283cfb6ce8" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30720772" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class WorkflowPersistenceService : System.Workflow.Runtime.Hosting.WorkflowRuntimeService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit WorkflowPersistenceService extends System.Workflow.Runtime.Hosting.WorkflowRuntimeService" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.Runtime.Hosting.WorkflowPersistenceService" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class WorkflowPersistenceService&#xA;Inherits WorkflowRuntimeService" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowPersistenceService abstract : System::Workflow::Runtime::Hosting::WorkflowRuntimeService" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Workflow.Runtime.Hosting.WorkflowRuntimeService</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>所有持續性服務都是衍生自此抽象基底類別。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 在工作流程執行中發生特定情況時，工作流程執行階段引擎會保存有關工作流程執行個體的狀態資訊。 例如，不可部分完成的交易完成時、工作流程執行個體閒置時、主機呼叫工作流程執行個體上的 <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A?displayProperty=nameWithType> 時、或工作流程執行個體終止或完成時，都可能發生保存。 工作流程執行階段引擎語意指示保存應發生時，工作流程執行階段引擎會呼叫持續性服務所提供的方法，以儲存有關工作流程執行個體的狀態資訊。 同樣地，當工作流程執行階段引擎需要還原之前保存的工作流程執行個體時，它會呼叫持續性服務所提供的方法以載入此狀態資訊。 工作流程執行階段引擎處理有關何時執行保存的語意。 持續性服務實際上是在資料存放區來回儲存和載入工作流程狀態資訊。  
  
 您可以藉由衍生自 <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> 類別的類別來建立持續性服務。  您可以藉由呼叫 <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A>，或在應用程式組態檔中建立適當的項目，來將您的持續性服務加入至工作流程執行階段引擎。 <xref:System.Workflow.Runtime.WorkflowRuntime> 應該只包含一個持續性服務。 Windows Workflow Foundation 提供 <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> 類別，這是一種您可以依原狀使用或加以擴充的預設持續性服務。  
  
 工作流程執行階段引擎具有鎖定工作流程狀態資訊的語意，當執行於不同處理序中的持續性服務可能具有同一個資料存放區的存取權時便可使用這類語意。 <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> 類別透過提供參數至 <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> 指定是否解除鎖定資料存放區中的工作流程執行個體狀態資訊，並提供解除鎖定先前鎖定之工作流程狀態資訊的 <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState%2A> 方法，來支援這項工作流程執行階段引擎功能。 在實作鎖定的持續性服務中，呼叫 <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A> 應會鎖定工作流程執行個體的狀態資訊。  
  
 如果您的持續性服務無法儲存狀態資訊到其資料存放區，或無法從其資料存放區載入狀態資訊，應會擲回 <xref:System.Workflow.Runtime.Hosting.PersistenceException>。 工作流程執行階段引擎需要這個行為。  
  
 系統提供批次處理機制給使用長期存放區儲存工作流程狀態資訊的服務。 在這些情況中，保持持續性服務使用的長期存放區與工作流程執行階段引擎內部狀態之間的一致性相當重要。 您可以將 <xref:System.Workflow.Runtime.IPendingWork> 介面定義的功能加入至您的服務，然後透過加入變更到您的資料存放區，並將工作項目加入至 <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService>，來參與 <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A> 所提供的工作流程交易批次處理。 長期存放區本身應實作 <xref:System.Transactions.IEnlistmentNotification> 介面，如此在交易復原時就不會錯誤地保存工作流程資訊。 如需詳細資訊，請參閱 <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveCompletedContextActivity%2A>或 <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A>。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WorkflowPersistenceService ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WorkflowPersistenceService();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>在衍生類別中實作時，初始化 <see cref="T:System.Workflow.Runtime.Hosting.WorkflowPersistenceService" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例示範建立 `SqlWorkflowPersistenceService` 類別 (衍生自 `WorkflowPersistenceService`) 的執行個體。 這個範例來自 Program.cs 類別中的＜巢狀例外處理常式 SDK＞範例。  如需詳細資訊，請參閱[巢狀例外狀況處理常式範例](http://msdn.microsoft.com/library/d1da0209-842b-41c8-9b7c-0cbaa1034265)。  
  
 [!code-csharp[WF_Samples#161](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets11.cs#161)]
 [!code-vb[WF_Samples#161](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets11.vb#161)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDefaultSerializedForm">
      <MemberSignature Language="C#" Value="protected static byte[] GetDefaultSerializedForm (System.Workflow.ComponentModel.Activity activity);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig unsigned int8[] GetDefaultSerializedForm(class System.Workflow.ComponentModel.Activity activity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetDefaultSerializedForm(System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static cli::array &lt;System::Byte&gt; ^ GetDefaultSerializedForm(System::Workflow::ComponentModel::Activity ^ activity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="activity">要求其序列化表單的 <see cref="T:System.Workflow.ComponentModel.Activity" />。</param>
        <summary>擷取 <see cref="T:System.Workflow.ComponentModel.Activity" /> 的序列化預設表單。</summary>
        <returns>
          <see cref="T:System.Workflow.ComponentModel.Activity" /> 的序列化預設表單。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIsBlocked">
      <MemberSignature Language="C#" Value="protected internal static bool GetIsBlocked (System.Workflow.ComponentModel.Activity rootActivity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblystatic hidebysig bool GetIsBlocked(class System.Workflow.ComponentModel.Activity rootActivity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetIsBlocked(System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Shared Function GetIsBlocked (rootActivity As Activity) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; static bool GetIsBlocked(System::Workflow::ComponentModel::Activity ^ rootActivity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootActivity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="rootActivity">工作流程執行個體的根活動。</param>
        <summary>指出是否封鎖指定活動。</summary>
        <returns>
          如果封鎖指定活動則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSuspendOrTerminateInfo">
      <MemberSignature Language="C#" Value="protected internal static string GetSuspendOrTerminateInfo (System.Workflow.ComponentModel.Activity rootActivity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblystatic hidebysig string GetSuspendOrTerminateInfo(class System.Workflow.ComponentModel.Activity rootActivity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetSuspendOrTerminateInfo(System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Shared Function GetSuspendOrTerminateInfo (rootActivity As Activity) As String" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; static System::String ^ GetSuspendOrTerminateInfo(System::Workflow::ComponentModel::Activity ^ rootActivity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootActivity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="rootActivity">工作流程執行個體的根活動。</param>
        <summary>擷取指定活動的終止或暫停資訊。</summary>
        <returns>包含終止或暫停資訊的 <see cref="T:System.String" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWorkflowStatus">
      <MemberSignature Language="C#" Value="protected internal static System.Workflow.Runtime.WorkflowStatus GetWorkflowStatus (System.Workflow.ComponentModel.Activity rootActivity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblystatic hidebysig valuetype System.Workflow.Runtime.WorkflowStatus GetWorkflowStatus(class System.Workflow.ComponentModel.Activity rootActivity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus(System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Shared Function GetWorkflowStatus (rootActivity As Activity) As WorkflowStatus" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; static System::Workflow::Runtime::WorkflowStatus GetWorkflowStatus(System::Workflow::ComponentModel::Activity ^ rootActivity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootActivity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="rootActivity">工作流程執行個體的根活動。</param>
        <summary>擷取工作流程的狀態。</summary>
        <returns>代表工作流程狀態的 <see cref="T:System.Workflow.Runtime.WorkflowStatus" /> 列舉值。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadCompletedContextActivity">
      <MemberSignature Language="C#" Value="protected internal abstract System.Workflow.ComponentModel.Activity LoadCompletedContextActivity (Guid scopeId, System.Workflow.ComponentModel.Activity outerActivity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Workflow.ComponentModel.Activity LoadCompletedContextActivity(valuetype System.Guid scopeId, class System.Workflow.ComponentModel.Activity outerActivity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity(System.Guid,System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend MustOverride Function LoadCompletedContextActivity (scopeId As Guid, outerActivity As Activity) As Activity" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract System::Workflow::ComponentModel::Activity ^ LoadCompletedContextActivity(Guid scopeId, System::Workflow::ComponentModel::Activity ^ outerActivity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Activity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scopeId" Type="System.Guid" />
        <Parameter Name="outerActivity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="scopeId">已完成範圍的 <see cref="T:System.Guid" />。</param>
        <param name="outerActivity">
          <see cref="T:System.Workflow.ComponentModel.Activity" />，表示包圍已完成範圍的活動。</param>
        <summary>在衍生類別中實作時，將指定的完成範圍載回記憶體中。</summary>
        <returns>表示已完成範圍的 <see cref="T:System.Workflow.ComponentModel.Activity" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 工作流程執行階段引擎使用 <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A> 實作補償。 您必須還原已完成範圍的相同複本。 若要執行這項作業，您必須從資料存放區中的已完成範圍代表項還原有效的 <xref:System.IO.Stream>。 然後您必須將此 <xref:System.IO.Stream> 傳遞至 <xref:System.Workflow.ComponentModel.Activity.Load%2A> 的其中一個多載方法，以執行範圍的還原序列化。  
  
 如果您的持續性服務無法從它的資料存放區中載入已完成的範圍，應該擲回有適當錯誤訊息的 <xref:System.Workflow.Runtime.Hosting.PersistenceException>。  
  
   
  
## Examples  
 下列範例示範 `LoadCompletedContextActivity` 方法的實作。 這個範例來自 FilePersistenceService.cs 檔案中的＜自訂持續性服務＞範例。 如需詳細資訊，請參閱[自訂持續性服務範例](http://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d)。  
  
 [!code-csharp[WF_Samples#269](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#269)]
 [!code-vb[WF_Samples#269](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#269)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadWorkflowInstanceState">
      <MemberSignature Language="C#" Value="protected internal abstract System.Workflow.ComponentModel.Activity LoadWorkflowInstanceState (Guid instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Workflow.ComponentModel.Activity LoadWorkflowInstanceState(valuetype System.Guid instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend MustOverride Function LoadWorkflowInstanceState (instanceId As Guid) As Activity" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract System::Workflow::ComponentModel::Activity ^ LoadWorkflowInstanceState(Guid instanceId);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Activity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="instanceId">工作流程執行個體之根活動的 <see cref="T:System.Guid" />。</param>
        <summary>在衍生類別中實作時，將工作流程執行個體的指定狀態載回記憶體中。</summary>
        <returns>
          <see cref="T:System.Workflow.ComponentModel.Activity" />，代表工作流程執行個體的根活動。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您必須還原活動的相同複本。 若要執行這項作業，您必須從資料存放區中的工作流程執行個體代表項載入有效的 <xref:System.IO.Stream>，然後您必須將此 <xref:System.IO.Stream> 傳遞至其中一個多載的 <xref:System.Workflow.ComponentModel.Activity.Load%2A> 方法，以將工作流程執行個體狀態還原序列化。 如果您的持續性服務無法從它的資料存放區中載入工作流程執行個體狀態，應該擲回有適當錯誤訊息的 <xref:System.Workflow.Runtime.Hosting.PersistenceException>。  
  
 工作流程執行階段引擎實作鎖定語意，以限制存取儲存在資料存放區中的工作流程執行個體狀態。 這可由在多個處理序中執行的持續性服務存取。 鎖定語意的設計是為了避免兩個不同處理序中執行的持續性服務，同時將相同的工作流程執行個體載入記憶體中。 視您的持續性服務在設計上所支援的環境類型而定，您可以選擇是否支援這項功能。 如果您選擇支援執行階段鎖定語意，而且此工作流程執行個體狀態之前已由其他處理序鎖定，則您應該擲回 <xref:System.Workflow.Runtime.WorkflowOwnershipException>。 否則，您應該鎖定對資料存放區中工作流程執行個體狀態的存取。 工作流程執行個體狀態可以由呼叫 <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState%2A>，或呼叫解除鎖定參數設定為 <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> 的 `true` 加以解除鎖定。  
  
   
  
## Examples  
 下列範例示範 `LoadWorkflowInstanceState` 方法的實作。 這個範例來自 FilePersistenceService.cs 檔案中的＜自訂持續性服務＞範例。 如需詳細資訊，請參閱[自訂持續性服務範例](http://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d)。  
  
 [!code-csharp[WF_Samples#266](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#266)]
 [!code-vb[WF_Samples#266](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#266)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RestoreFromDefaultSerializedForm">
      <MemberSignature Language="C#" Value="protected static System.Workflow.ComponentModel.Activity RestoreFromDefaultSerializedForm (byte[] activityBytes, System.Workflow.ComponentModel.Activity outerActivity);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Workflow.ComponentModel.Activity RestoreFromDefaultSerializedForm(unsigned int8[] activityBytes, class System.Workflow.ComponentModel.Activity outerActivity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.RestoreFromDefaultSerializedForm(System.Byte[],System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function RestoreFromDefaultSerializedForm (activityBytes As Byte(), outerActivity As Activity) As Activity" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static System::Workflow::ComponentModel::Activity ^ RestoreFromDefaultSerializedForm(cli::array &lt;System::Byte&gt; ^ activityBytes, System::Workflow::ComponentModel::Activity ^ outerActivity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Activity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activityBytes" Type="System.Byte[]" />
        <Parameter Name="outerActivity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="activityBytes">
          <see cref="T:System.Workflow.ComponentModel.Activity" /> 的序列化表單。</param>
        <param name="outerActivity">外部 <see cref="T:System.Workflow.ComponentModel.Activity" />，其中包含要還原的 <see cref="T:System.Workflow.ComponentModel.Activity" />。</param>
        <summary>從其序列化表單中還原 <see cref="T:System.Workflow.ComponentModel.Activity" />。</summary>
        <returns>還原的 <see cref="T:System.Workflow.ComponentModel.Activity" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例示範 `RestoreFromDefaultSerializedForm` 方法的實作。 這個範例來自 FilePersistenceService.cs 檔案中的＜自訂持續性服務＞範例。 如需詳細資訊，請參閱[自訂持續性服務範例](http://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d)。  
  
 [!code-csharp[WF_Samples#269](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#269)]
 [!code-vb[WF_Samples#269](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#269)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveCompletedContextActivity">
      <MemberSignature Language="C#" Value="protected internal abstract void SaveCompletedContextActivity (System.Workflow.ComponentModel.Activity activity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void SaveCompletedContextActivity(class System.Workflow.ComponentModel.Activity activity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveCompletedContextActivity(System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract void SaveCompletedContextActivity(System::Workflow::ComponentModel::Activity ^ activity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="activity">表示已完成範圍的 <see cref="T:System.Workflow.ComponentModel.Activity" />。</param>
        <summary>在衍生類別中實作時，將指定的完成範圍儲存至資料存放區中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 工作流程執行階段引擎會儲存已完成範圍活動的狀態以實作補償。 您必須呼叫其中一個多載的 <xref:System.Workflow.ComponentModel.Activity.Save%2A> 方法將 `activity` 序列化至 <xref:System.IO.Stream> 中，然後您可以選擇在將它寫入您的資料存放區之前進一步處理 <xref:System.IO.Stream>。 然而，當工作流程執行階段引擎呼叫 <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A> 時，您必須還原活動的相同複本。  
  
 工作流程執行個體完成或終止時，您必須能夠將完成的範圍與包圍它的工作流程執行個體產生關聯，以在您的資料存放區中將範圍標示為不需要的範圍。 因此，您也應該儲存與完成範圍關聯的工作流程執行個體的 <xref:System.Guid>。這可以從與 <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> 關聯的 <xref:System.Workflow.Runtime.WorkflowInstance> 的 `activity` 屬性中取得。  
  
 <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A> 會接受完成範圍的 <xref:System.Guid> 做為參數。 因此，您也必須儲存與 <xref:System.Workflow.ComponentModel.ActivityExecutionContext.ContextGuid%2A> 關聯的 `activity` 屬性。 這個屬性可以透過 <xref:System.Workflow.ComponentModel.Activity.ActivityContextGuidProperty> 的 `activity` 欄位來加以參考。  
  
 如果您實作使用長期存放區的持續性服務，為了維持與工作流程執行階段引擎內部狀態的一致性，您應該參與工作流程異動批次處理，以延遲對您的長期存放區的實際寫入，直到工作流程認可點為止。 若要參與批次處理，請將代表暫停變更資料庫的工作項目加入至 <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A> 屬性中，然後在您的持續性服務中實作 <xref:System.Workflow.Runtime.IPendingWork> 介面。  
  
 如果您無法將完成的範圍儲存至資料存放區中，則應該擲回有適當錯誤訊息的 <xref:System.Workflow.Runtime.Hosting.PersistenceException>。  
  
   
  
## Examples  
 下列範例示範 `SaveCompletedContextActivity` 方法的實作。 這個範例來自 FilePersistenceService.cs 檔案中的＜自訂持續性服務＞範例。 如需詳細資訊，請參閱[自訂持續性服務範例](http://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d)。  
  
 [!code-csharp[WF_Samples#268](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#268)]
 [!code-vb[WF_Samples#268](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#268)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveWorkflowInstanceState">
      <MemberSignature Language="C#" Value="protected internal abstract void SaveWorkflowInstanceState (System.Workflow.ComponentModel.Activity rootActivity, bool unlock);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void SaveWorkflowInstanceState(class System.Workflow.ComponentModel.Activity rootActivity, bool unlock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState(System.Workflow.ComponentModel.Activity,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend MustOverride Sub SaveWorkflowInstanceState (rootActivity As Activity, unlock As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract void SaveWorkflowInstanceState(System::Workflow::ComponentModel::Activity ^ rootActivity, bool unlock);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootActivity" Type="System.Workflow.ComponentModel.Activity" />
        <Parameter Name="unlock" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rootActivity">工作流程執行個體的根活動。</param>
        <param name="unlock">
          如果不應鎖定工作流程執行個體則為 <see langword="true" />，如果應鎖定工作流程執行個體則為 <see langword="false" />。</param>
        <summary>在衍生類別中實作時，將工作流程執行個體狀態儲存至資料存放區中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您必須呼叫其中一個多載的 <xref:System.Workflow.ComponentModel.Activity.Save%2A> 方法將 `rootActivity` 序列化至 <xref:System.IO.Stream> 中。 然後您可以選擇在寫入至您的資料存放區之前進一步處理 <xref:System.IO.Stream>。 然而，當工作流程執行階段引擎呼叫 <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A> 時，您必須還原根活動的相同複本。 如果您無法將工作流程執行個體狀態儲存至資料存放區中，則應該擲回有適當錯誤訊息的 <xref:System.Workflow.Runtime.Hosting.PersistenceException>。  
  
 工作流程執行階段引擎提供鎖定語意，以限制存取儲存在資料存放區中的工作流程執行個體狀態。 這可以由在多台主機中執行並指向相同資料存放區的持續性服務來存取。 鎖定語意的設計是為了避免兩個不同工作流程執行階段中執行的持續性服務，同時將相同的工作流程執行個體載入記憶體中。 視您的持續性服務在設計上所支援的環境類型而定，您可以選擇是否支援這項功能。 如果您選擇支援執行階段鎖定語意，然後，如果持續性服務嘗試儲存之前由其他持續性服務鎖定的工作流程執行個體狀態，則您應該擲回 <xref:System.Workflow.Runtime.WorkflowOwnershipException>。 如果 `unlock` 是 `true`，您應該在儲存之後解除鎖定對工作流程執行個體狀態的存取。  
  
 <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A> 會接受工作流程執行個體的 <xref:System.Guid> 做為參數。 因此，您應該儲存此 <xref:System.Guid>。 您也可以使用此 <xref:System.Guid> 將工作流程執行個體與其已完成範圍的儲存狀態產生關聯。 之所以必須這樣做是因為您必須能夠在工作流程執行個體完成時，將這些完成的範圍標示為不需要的範圍。  
  
 工作流程執行個體引擎在工作流程執行個體完成或終止時，對 <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> 做最後的呼叫。 因此，如果 <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus%2A> 等於 <xref:System.Workflow.Runtime.WorkflowStatus.Completed> 或 <xref:System.Workflow.Runtime.WorkflowStatus.Terminated>，您就可以從資料存放區中，安全地刪除工作流程執行個體和所有與它關聯的完成範圍。 或者，您可以訂閱 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted> 或 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated> 事件，以判斷何時是刪除與工作流程執行個體關聯之記錄的安全時機。 是否實際從您的資料存放區刪除記錄要視您的實作而定。  
  
 如果您實作使用長期存放區的持續性服務，為了維持與工作流程執行階段引擎內部狀態的一致性，您應該參與工作流程交易批次處理，以延遲對您的長期存放區的實際寫入，直到工作流程認可點為止。 若要參與批次處理，請將代表暫停變更長期存放區的工作項目加入至 <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A> 屬性中，然後在您的持續性服務中實作 <xref:System.Workflow.Runtime.IPendingWork> 介面。  
  
   
  
## Examples  
 下列範例示範 `SaveWorkflowInstanceState` 方法的實作。 這個範例來自 FilePersistenceService.cs 檔案中的＜自訂持續性服務＞範例。 如需詳細資訊，請參閱[自訂持續性服務範例](http://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d)。  
  
 [!code-csharp[WF_Samples#264](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#264)]
 [!code-vb[WF_Samples#264](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#264)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnloadOnIdle">
      <MemberSignature Language="C#" Value="protected internal abstract bool UnloadOnIdle (System.Workflow.ComponentModel.Activity activity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool UnloadOnIdle(class System.Workflow.ComponentModel.Activity activity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnloadOnIdle(System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract bool UnloadOnIdle(System::Workflow::ComponentModel::Activity ^ activity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="activity">表示已完成範圍的 <see cref="T:System.Workflow.ComponentModel.Activity" />。</param>
        <summary>判斷是否應在工作流程閒置時加以卸載。</summary>
        <returns>若為 <see langword="true" />，表示指定的工作流程閒置時，工作流程執行階段引擎會將它卸載。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例示範 `UnloadOnIdle` 方法的實作。 這個範例來自 FilePersistenceService.cs 檔案中的＜自訂持續性服務＞範例。 如需詳細資訊，請參閱[自訂持續性服務範例](http://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d)。  
  
 [!code-csharp[WF_Samples#270](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#270)]
 [!code-vb[WF_Samples#270](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#270)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnlockWorkflowInstanceState">
      <MemberSignature Language="C#" Value="protected internal abstract void UnlockWorkflowInstanceState (System.Workflow.ComponentModel.Activity rootActivity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void UnlockWorkflowInstanceState(class System.Workflow.ComponentModel.Activity rootActivity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState(System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend MustOverride Sub UnlockWorkflowInstanceState (rootActivity As Activity)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract void UnlockWorkflowInstanceState(System::Workflow::ComponentModel::Activity ^ rootActivity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootActivity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="rootActivity">工作流程執行個體的根活動。</param>
        <summary>在衍生類別中覆寫時，解除鎖定工作流程執行個體狀態。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法是抽象的，所以它不包含有關鎖定與解除鎖定的預設實作。  
  
 實作自訂持續性服務時，如果想要實作鎖定配置，您將需要覆寫此方法，並且在以解除鎖定參數的值為基礎的 <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> 方法中提供鎖定-解除鎖定機制。  
  
   
  
## Examples  
 下列範例示範 `UnlockWorkflowInstanceState` 方法的實作。 這個範例來自 FilePersistenceService.cs 檔案中的＜自訂持續性服務＞範例。 如需詳細資訊，請參閱[自訂持續性服務範例](http://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d)。  
  
 [!code-csharp[WF_Samples#267](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#267)]
 [!code-vb[WF_Samples#267](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#267)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>