<Type Name="NegotiateStream" FullName="System.Net.Security.NegotiateStream">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c14dd401696189bb315395ed828de5f1c0c89ba3" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30461132" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class NegotiateStream : System.Net.Security.AuthenticatedStream" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NegotiateStream extends System.Net.Security.AuthenticatedStream" />
  <TypeSignature Language="DocId" Value="T:System.Net.Security.NegotiateStream" />
  <TypeSignature Language="VB.NET" Value="Public Class NegotiateStream&#xA;Inherits AuthenticatedStream" />
  <TypeSignature Language="C++ CLI" Value="public ref class NegotiateStream : System::Net::Security::AuthenticatedStream" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Security</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Net.Security.AuthenticatedStream</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供資料流，該資料流會在用戶端與伺服器之間的通訊中，使用交涉安全性通訊協定驗證用戶端，並選擇性地驗證伺服器。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Net.Security.NegotiateStream>類別進行驗證，並協助保護資訊的用戶端與伺服器之間傳輸。 使用<xref:System.Net.Security.NegotiateStream>，您可以執行下列。  
  
-   傳送至伺服器的用戶端的認證模擬或委派。  
  
-   要求伺服器驗證。  
  
-   加密及/或簽署資料在傳輸之前。  
  
 傳輸資訊前，必須執行驗證。 用戶端要求驗證使用同步<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>方法會封鎖，直到完成驗證，或非同步<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>方法，不會封鎖等候完成驗證。 伺服器要求驗證使用同步<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>或非同步<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>方法。 用戶端，並選擇性地在伺服器上，會透過驗證交涉安全性通訊協定。 在 Windows 95/98 系統上 Windows NT LAN Manager (NTLM) 是用於驗證的通訊協定。 Kerberos 的其他平台上通訊協定用於驗證用戶端和伺服器都支援; 如果否則會使用 NTLM。 如需這些通訊協定的詳細描述，請參閱 Platform SDK 文件 MSDN msdn.microsoft.com/library/。 <xref:System.Net.Security.NegotiateStream>類別本身會執行使用安全性支援提供者介面 (SSPI) 驗證。  
  
 當驗證成功時，您必須檢查<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>和<xref:System.Net.Security.NegotiateStream.IsSigned%2A>屬性，以便判斷哪些安全性服務將使用<xref:System.Net.Security.NegotiateStream>來協助保護您的資料在傳輸期間。 請檢查<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>屬性來判斷是否發生過相互驗證。 您可以從中取得資訊的遠端用戶端或伺服器使用<xref:System.Net.Security.NegotiateStream.RemoteIdentity%2A>屬性。  
  
 如果驗證失敗時，您會收到<xref:System.Security.Authentication.AuthenticationException>或<xref:System.Security.Authentication.InvalidCredentialException>。 在此情況下，您可以重試與不同的認證驗證。  
  
 您將使用同步的資料傳送<xref:System.Net.Security.NegotiateStream.Write%2A>或非同步<xref:System.Net.Security.NegotiateStream.BeginWrite%2A>方法。 接收資料，使用同步<xref:System.Net.Security.NegotiateStream.Read%2A>或非同步<xref:System.Net.Security.NegotiateStream.BeginRead%2A>方法。 如果安全性服務，例如啟用加密或簽章，這些會自動套用到資料的<xref:System.Net.Security.NegotiateStream>。  
  
 <xref:System.Net.Security.NegotiateStream>會將使用您在建立時提供的資料流的資料傳輸<xref:System.Net.Security.NegotiateStream>。 當您提供此基礎資料流時，您可以指定是否關閉<xref:System.Net.Security.NegotiateStream>也會關閉基礎資料流。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用用戶端與伺服器連接的用戶端<xref:System.Net.Security.NegotiateStream>。 用戶端驗證，並以非同步方式將訊息傳送到伺服器。  
  
 [!code-cpp[NclNegoAsyncClient#0](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#0)]
 [!code-csharp[NclNegoAsyncClient#0](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#0)]  
  
 下列程式碼範例示範如何使用用戶端與伺服器連接的伺服器端<xref:System.Net.Security.NegotiateStream>驗證用戶端和讀取用戶端所傳送的訊息。  
  
 [!code-cpp[NclNegoAsyncServer#0](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#0)]
 [!code-csharp[NclNegoAsyncServer#0](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#0)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Net.Security.NegotiateStream" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要避免<xref:System.Net.Security.NegotiateStream>關閉您提供的資料流，從使用<xref:System.Net.Security.NegotiateStream.%23ctor%28System.IO.Stream%2CSystem.Boolean%29>建構函式。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NegotiateStream (System.IO.Stream innerStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream innerStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.#ctor(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (innerStream As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NegotiateStream(System::IO::Stream ^ innerStream);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="innerStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="innerStream">
          <see cref="T:System.IO.Stream" /> 物件，由 <see cref="T:System.Net.Security.NegotiateStream" /> 用來傳送及接收資料。</param>
        <summary>使用指定的 <see cref="T:System.Net.Security.NegotiateStream" />，初始化 <see cref="T:System.IO.Stream" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例示範如何呼叫這個建構函式。  
  
 [!code-cpp[NclNegoSyncClient#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#3)]
 [!code-csharp[NclNegoSyncClient#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NegotiateStream (System.IO.Stream innerStream, bool leaveInnerStreamOpen);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream innerStream, bool leaveInnerStreamOpen) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.#ctor(System.IO.Stream,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (innerStream As Stream, leaveInnerStreamOpen As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NegotiateStream(System::IO::Stream ^ innerStream, bool leaveInnerStreamOpen);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="innerStream" Type="System.IO.Stream" />
        <Parameter Name="leaveInnerStreamOpen" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="innerStream">
          <see cref="T:System.IO.Stream" /> 物件，由 <see cref="T:System.Net.Security.NegotiateStream" /> 用來傳送及接收資料。</param>
        <param name="leaveInnerStreamOpen">
          <see langword="true" /> 指示關閉這個 <see cref="T:System.Net.Security.NegotiateStream" /> 不會對 <c>innerstream</c> 產生任何作用；<see langword="false" /> 指示關閉這個 <see cref="T:System.Net.Security.NegotiateStream" />，也會關閉 <c>innerStream</c>。</param>
        <summary>使用指定的 <see cref="T:System.Net.Security.NegotiateStream" /> 和資料流結束行為，初始化 <see cref="T:System.IO.Stream" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當您指定`true`如`leaveStreamOpen`參數，關閉<xref:System.Net.Security.NegotiateStream>沒有任何作用`innerStream`串流處理; 您必須明確地關閉`innerStream`當您不再需要它。  
  
   
  
## Examples  
 下列程式碼範例示範如何呼叫這個建構函式。 這個程式碼範例是針對所提供之較大範例的一部分<xref:System.Net.Security.NegotiateStream>類別。  
  
 [!code-cpp[NclNegoAsyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#1)]
 [!code-csharp[NclNegoAsyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="innerStream" /> 為 <see langword="null" />。  
  
 \-或-  
  
 <paramref name="innerStream" /> 等於 <see cref="F:System.IO.Stream.Null" />。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsClient">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>由用戶端呼叫以驗證用戶端與伺服器連接中的用戶端，並選擇性地驗證伺服器。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>由用戶端呼叫以驗證用戶端與伺服器連接中的用戶端，並選擇性地驗證伺服器。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 驗證會使用用戶端<xref:System.Net.CredentialCache.DefaultCredentials%2A>。 不指定伺服器的任何服務主要名稱 (SPN)。 模擬等級是<xref:System.Security.Principal.TokenImpersonationLevel.Identification>，安全性層級是<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>，並要求相互驗證。 <xref:System.Net.Security.NegotiateStream>類別將會建構使用相互驗證的 SPN。  
  
 當驗證成功時，您必須檢查<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>和<xref:System.Net.Security.NegotiateStream.IsSigned%2A>屬性，以便判斷哪些安全性服務由<xref:System.Net.Security.NegotiateStream>。 請檢查<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>屬性來判斷是否發生過相互驗證。  
  
 如果驗證失敗時，您會收到<xref:System.Security.Authentication.AuthenticationException>或<xref:System.Security.Authentication.InvalidCredentialException>。 在此情況下，您可以重試與不同的認證驗證。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">驗證失敗。 您可以使用這個物件重試驗證。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">驗證失敗。 您可以使用這個物件重試驗證。</exception>
        <exception cref="T:System.ObjectDisposedException">此物件已關閉。</exception>
        <exception cref="T:System.InvalidOperationException">已經進行驗證。  
  
 \-或-  
  
 這個資料流先前是用來以伺服器的身分嘗試驗證。 您不能使用資料流以用戶端身分重試驗證。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">若要使用明確<see cref="T:System.Net.NetworkCredential" />。 關聯的列舉型別：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient (credential As NetworkCredential, targetName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::String ^ targetName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="credential">建立用戶端識別所用的 <see cref="T:System.Net.NetworkCredential" />。</param>
        <param name="targetName">服務主要名稱 (SPN)，用來唯一識別要驗證的伺服器。</param>
        <summary>由用戶端呼叫以驗證用戶端與伺服器連接中的用戶端，並選擇性地驗證伺服器。 驗證處理序使用指定的用戶端認證。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 模擬等級是<xref:System.Security.Principal.TokenImpersonationLevel.Identification>，安全性層級是<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>，並要求相互驗證。 <xref:System.Net.Security.NegotiateStream>類別將會建構使用相互驗證的 SPN。  
  
 當驗證成功時，您必須檢查<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>和<xref:System.Net.Security.NegotiateStream.IsSigned%2A>屬性，以便判斷哪些安全性服務由<xref:System.Net.Security.NegotiateStream>。 請檢查<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>屬性來判斷是否發生過相互驗證。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">驗證失敗。 您可以使用這個物件重試驗證。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">驗證失敗。 您可以使用這個物件重試驗證。</exception>
        <exception cref="T:System.ObjectDisposedException">此物件已關閉。</exception>
        <exception cref="T:System.InvalidOperationException">已經進行驗證。  
  
 \-或-  
  
 這個資料流先前是用來以伺服器的身分嘗試驗證。 您不能使用資料流以用戶端身分重試驗證。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> 為 <see langword="null" />。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">若要使用明確<see cref="T:System.Net.NetworkCredential" />。 關聯的列舉型別：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient (credential As NetworkCredential, binding As ChannelBinding, targetName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="credential">建立用戶端識別所用的 <see cref="T:System.Net.NetworkCredential" />。</param>
        <param name="binding">用於延伸保護的 <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />。</param>
        <param name="targetName">服務主要名稱 (SPN)，用來唯一識別要驗證的伺服器。</param>
        <summary>由用戶端呼叫以驗證用戶端與伺服器連接中的用戶端，並選擇性地驗證伺服器。 驗證處理序使用指定的用戶端認證和通道繫結。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 模擬等級是<xref:System.Security.Principal.TokenImpersonationLevel.Identification>，安全性層級是<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>，並要求相互驗證。 <xref:System.Net.Security.NegotiateStream>類別將會建構使用相互驗證的 SPN。  
  
 <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>用於傳遞給這個方法中的擴充保護`binding`參數會從應用程式來擷取<xref:System.Net.Security.SslStream.TransportContext%2A>上相關聯的屬性<xref:System.Net.Security.SslStream>。  
  
 當驗證成功時，您必須檢查<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>和<xref:System.Net.Security.NegotiateStream.IsSigned%2A>屬性，以便判斷哪些安全性服務由<xref:System.Net.Security.NegotiateStream>。 請檢查<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>屬性來判斷是否發生過相互驗證。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> 為 <see langword="null" />。  
  
 \-或-  
  
 <paramref name="credential" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">驗證失敗。 您可以使用這個物件重試驗證。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">驗證失敗。 您可以使用這個物件重試驗證。</exception>
        <exception cref="T:System.InvalidOperationException">已經進行驗證。  
  
 \-或-  
  
 這個資料流先前是用來以伺服器的身分嘗試驗證。 您不能使用資料流以用戶端身分重試驗證。</exception>
        <exception cref="T:System.ObjectDisposedException">此物件已關閉。</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient (credential As NetworkCredential, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As TokenImpersonationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">建立用戶端識別所用的 <see cref="T:System.Net.NetworkCredential" />。</param>
        <param name="targetName">服務主要名稱 (SPN)，用來唯一識別要驗證的伺服器。</param>
        <param name="requiredProtectionLevel">其中一個 <see cref="T:System.Net.Security.ProtectionLevel" /> 值，表示資料流的安全性服務。</param>
        <param name="allowedImpersonationLevel">其中一個 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值，表示伺服器要如何使用用戶端的認證來存取資源。</param>
        <summary>由用戶端呼叫以驗證用戶端與伺服器連接中的用戶端，並選擇性地驗證伺服器。 驗證處理序使用指定的認證和驗證選項。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用`requiredProtectionLevel`參數，以使用已驗證的資料流傳輸資料的要求安全性服務。 例如，若要進行加密及簽署的資料，請指定<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>值。 成功驗證不保證要求<xref:System.Net.Security.ProtectionLevel>已被授與。 您必須檢查<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>和<xref:System.Net.Security.NegotiateStream.IsSigned%2A>屬性，以便判斷哪些安全性服務由<xref:System.Net.Security.NegotiateStream>。  
  
 如果驗證失敗時，您會收到<xref:System.Security.Authentication.AuthenticationException>或<xref:System.Security.Authentication.InvalidCredentialException>。 在此情況下，您可以重試與不同的認證驗證。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="allowedImpersonationLevel" /> 不是有效的值。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> 為 null。</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">驗證失敗。 您可以使用這個物件重試驗證。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">驗證失敗。 您可以使用這個物件重試驗證。</exception>
        <exception cref="T:System.ObjectDisposedException">此物件已關閉。</exception>
        <exception cref="T:System.InvalidOperationException">已經進行驗證。  
  
 \-或-  
  
 這個資料流先前是用來以伺服器的身分嘗試驗證。 您不能使用資料流以用戶端身分重試驗證。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">若要使用明確<see cref="T:System.Net.NetworkCredential" />。 關聯的列舉型別：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient (credential As NetworkCredential, binding As ChannelBinding, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As TokenImpersonationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">建立用戶端識別所用的 <see cref="T:System.Net.NetworkCredential" />。</param>
        <param name="binding">用於延伸保護的 <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />。</param>
        <param name="targetName">服務主要名稱 (SPN)，用來唯一識別要驗證的伺服器。</param>
        <param name="requiredProtectionLevel">其中一個 <see cref="T:System.Net.Security.ProtectionLevel" /> 值，表示資料流的安全性服務。</param>
        <param name="allowedImpersonationLevel">其中一個 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值，表示伺服器要如何使用用戶端的認證來存取資源。</param>
        <summary>由用戶端呼叫以驗證用戶端與伺服器連接中的用戶端，並選擇性地驗證伺服器。 驗證處理序使用指定的認證、驗證選項和通道繫結。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用`requiredProtectionLevel`參數，以使用已驗證的資料流傳輸資料的要求安全性服務。 例如，若要進行加密及簽署的資料，請指定<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>值。 成功驗證不保證要求<xref:System.Net.Security.ProtectionLevel>已被授與。 您必須檢查<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>和<xref:System.Net.Security.NegotiateStream.IsSigned%2A>屬性，以便判斷哪些安全性服務由<xref:System.Net.Security.NegotiateStream>。  
  
 <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>用於傳遞給這個方法中的擴充保護`binding`參數會從應用程式來擷取<xref:System.Net.Security.SslStream.TransportContext%2A>上相關聯的屬性<xref:System.Net.Security.SslStream>。  
  
 如果驗證失敗時，您會收到<xref:System.Security.Authentication.AuthenticationException>或<xref:System.Security.Authentication.InvalidCredentialException>。 在此情況下，您可以重試與不同的認證驗證。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> 為 <see langword="null" />。  
  
 \-或-  
  
 <paramref name="credential" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="allowedImpersonationLevel" /> 不是有效的值。</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">驗證失敗。 您可以使用這個物件重試驗證。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">驗證失敗。 您可以使用這個物件重試驗證。</exception>
        <exception cref="T:System.InvalidOperationException">已經進行驗證。  
  
 \-或-  
  
 這個資料流先前是用來以伺服器的身分嘗試驗證。 您不能使用資料流以用戶端身分重試驗證。</exception>
        <exception cref="T:System.ObjectDisposedException">此物件已關閉。</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsClientAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>由用戶端呼叫做為非同步作業，以驗證用戶端與伺服器連接中的用戶端，並選擇性地驗證伺服器。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>由用戶端呼叫做為非同步作業，以驗證用戶端與伺服器連接中的用戶端，並選擇性地驗證伺服器。</summary>
        <returns>傳回 <see cref="T:System.Threading.Tasks.Task" />。  
  
 工作物件，表示非同步作業。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 驗證會使用用戶端<xref:System.Net.CredentialCache.DefaultCredentials%2A>。 不指定伺服器的任何服務主要名稱 (SPN)。 模擬等級是<xref:System.Security.Principal.TokenImpersonationLevel.Identification>，安全性層級是<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>，並要求相互驗證。 <xref:System.Net.Security.NegotiateStream>類別將會建構使用相互驗證的 SPN。  
  
 當驗證成功時，您必須檢查<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>和<xref:System.Net.Security.NegotiateStream.IsSigned%2A>屬性，以便判斷哪些安全性服務由<xref:System.Net.Security.NegotiateStream>。 請檢查<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>屬性來判斷是否發生過相互驗證。  
  
 如果驗證失敗時，您會收到<xref:System.Security.Authentication.AuthenticationException>或<xref:System.Security.Authentication.InvalidCredentialException>。 在此情況下，您可以重試與不同的認證驗證。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">驗證失敗。 您可以使用這個物件重試驗證。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">驗證失敗。 您可以使用這個物件重試驗證。</exception>
        <exception cref="T:System.ObjectDisposedException">此物件已關閉。</exception>
        <exception cref="T:System.InvalidOperationException">已經進行驗證。  
  
 \-或-  
  
 這個資料流先前是用來以伺服器的身分嘗試驗證。 您不能使用資料流以用戶端身分重試驗證。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">若要使用明確<see cref="T:System.Net.NetworkCredential" />。 關聯的列舉型別：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync (credential As NetworkCredential, targetName As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::Net::NetworkCredential ^ credential, System::String ^ targetName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="credential">建立用戶端識別所用的 <see cref="T:System.Net.NetworkCredential" />。</param>
        <param name="targetName">服務主要名稱 (SPN)，用來唯一識別要驗證的伺服器。</param>
        <summary>由用戶端呼叫做為非同步作業，以驗證用戶端與伺服器連接中的用戶端，並選擇性地驗證伺服器。 驗證處理序使用指定的用戶端認證。</summary>
        <returns>傳回 <see cref="T:System.Threading.Tasks.Task" />。  
  
 工作物件，表示非同步作業。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 模擬等級是<xref:System.Security.Principal.TokenImpersonationLevel.Identification>，安全性層級是<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>，並要求相互驗證。 <xref:System.Net.Security.NegotiateStream>類別將會建構使用相互驗證的 SPN。  
  
 當驗證成功時，您必須檢查<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>和<xref:System.Net.Security.NegotiateStream.IsSigned%2A>屬性，以便判斷哪些安全性服務由<xref:System.Net.Security.NegotiateStream>。 請檢查<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>屬性來判斷是否發生過相互驗證。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">驗證失敗。 您可以使用這個物件重試驗證。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">驗證失敗。 您可以使用這個物件重試驗證。</exception>
        <exception cref="T:System.ObjectDisposedException">此物件已關閉。</exception>
        <exception cref="T:System.InvalidOperationException">已經進行驗證。  
  
 \-或-  
  
 這個資料流先前是用來以伺服器的身分嘗試驗證。 您不能使用資料流以用戶端身分重試驗證。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> 為 <see langword="null" />。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">若要使用明確<see cref="T:System.Net.NetworkCredential" />。 關聯的列舉型別：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync (credential As NetworkCredential, binding As ChannelBinding, targetName As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="credential">建立用戶端識別所用的 <see cref="T:System.Net.NetworkCredential" />。</param>
        <param name="binding">用於延伸保護的 <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />。</param>
        <param name="targetName">服務主要名稱 (SPN)，用來唯一識別要驗證的伺服器。</param>
        <summary>由用戶端呼叫做為非同步作業，以驗證用戶端與伺服器連接中的用戶端，並選擇性地驗證伺服器。 驗證處理序使用指定的用戶端認證和通道繫結。</summary>
        <returns>傳回 <see cref="T:System.Threading.Tasks.Task" />。  
  
 工作物件，表示非同步作業。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 模擬等級是<xref:System.Security.Principal.TokenImpersonationLevel.Identification>，安全性層級是<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>，並要求相互驗證。 <xref:System.Net.Security.NegotiateStream>類別將會建構使用相互驗證的 SPN。  
  
 <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>用於傳遞給這個方法中的擴充保護`binding`參數會從應用程式來擷取<xref:System.Net.Security.SslStream.TransportContext%2A>上相關聯的屬性<xref:System.Net.Security.SslStream>。  
  
 當驗證成功時，您必須檢查<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>和<xref:System.Net.Security.NegotiateStream.IsSigned%2A>屬性，以便判斷哪些安全性服務由<xref:System.Net.Security.NegotiateStream>。 請檢查<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>屬性來判斷是否發生過相互驗證。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> 為 <see langword="null" />。  
  
 \-或-  
  
 <paramref name="credential" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">驗證失敗。 您可以使用這個物件重試驗證。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">驗證失敗。 您可以使用這個物件重試驗證。</exception>
        <exception cref="T:System.InvalidOperationException">已經進行驗證。  
  
 \-或-  
  
 這個資料流先前是用來以伺服器的身分嘗試驗證。 您不能使用資料流以用戶端身分重試驗證。</exception>
        <exception cref="T:System.ObjectDisposedException">此物件已關閉。</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync (credential As NetworkCredential, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As TokenImpersonationLevel) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::Net::NetworkCredential ^ credential, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">建立用戶端識別所用的 <see cref="T:System.Net.NetworkCredential" />。</param>
        <param name="targetName">服務主要名稱 (SPN)，用來唯一識別要驗證的伺服器。</param>
        <param name="requiredProtectionLevel">其中一個 <see cref="T:System.Net.Security.ProtectionLevel" /> 值，表示資料流的安全性服務。</param>
        <param name="allowedImpersonationLevel">其中一個 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值，表示伺服器要如何使用用戶端的認證來存取資源。</param>
        <summary>由用戶端呼叫做為非同步作業，以驗證用戶端與伺服器連接中的用戶端，並選擇性地驗證伺服器。 驗證處理序使用指定的認證和驗證選項。</summary>
        <returns>傳回 <see cref="T:System.Threading.Tasks.Task" />。  
  
 工作物件，表示非同步作業。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用`requiredProtectionLevel`參數，以使用已驗證的資料流傳輸資料的要求安全性服務。 例如，若要進行加密及簽署的資料，請指定<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>值。 成功驗證不保證要求<xref:System.Net.Security.ProtectionLevel>已被授與。 您必須檢查<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>和<xref:System.Net.Security.NegotiateStream.IsSigned%2A>屬性，以便判斷哪些安全性服務由<xref:System.Net.Security.NegotiateStream>。  
  
 如果驗證失敗時，您會收到<xref:System.Security.Authentication.AuthenticationException>或<xref:System.Security.Authentication.InvalidCredentialException>。 在此情況下，您可以重試與不同的認證驗證。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="allowedImpersonationLevel" /> 不是有效的值。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> 為 null。</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">驗證失敗。 您可以使用這個物件重試驗證。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">驗證失敗。 您可以使用這個物件重試驗證。</exception>
        <exception cref="T:System.ObjectDisposedException">此物件已關閉。</exception>
        <exception cref="T:System.InvalidOperationException">已經進行驗證。  
  
 \-或-  
  
 這個資料流先前是用來以伺服器的身分嘗試驗證。 您不能使用資料流以用戶端身分重試驗證。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">若要使用明確<see cref="T:System.Net.NetworkCredential" />。 關聯的列舉型別：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync (credential As NetworkCredential, binding As ChannelBinding, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As TokenImpersonationLevel) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">建立用戶端識別所用的 <see cref="T:System.Net.NetworkCredential" />。</param>
        <param name="binding">用於延伸保護的 <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />。</param>
        <param name="targetName">服務主要名稱 (SPN)，用來唯一識別要驗證的伺服器。</param>
        <param name="requiredProtectionLevel">其中一個 <see cref="T:System.Net.Security.ProtectionLevel" /> 值，表示資料流的安全性服務。</param>
        <param name="allowedImpersonationLevel">其中一個 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值，表示伺服器要如何使用用戶端的認證來存取資源。</param>
        <summary>由用戶端呼叫做為非同步作業，以驗證用戶端與伺服器連接中的用戶端，並選擇性地驗證伺服器。 驗證處理序使用指定的認證、驗證選項和通道繫結。</summary>
        <returns>傳回 <see cref="T:System.Threading.Tasks.Task" />。  
  
 工作物件，表示非同步作業。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用`requiredProtectionLevel`參數，以使用已驗證的資料流傳輸資料的要求安全性服務。 例如，若要進行加密及簽署的資料，請指定<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>值。 成功驗證不保證要求<xref:System.Net.Security.ProtectionLevel>已被授與。 您必須檢查<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>和<xref:System.Net.Security.NegotiateStream.IsSigned%2A>屬性，以便判斷哪些安全性服務由<xref:System.Net.Security.NegotiateStream>。  
  
 <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>用於傳遞給這個方法中的擴充保護`binding`參數會從應用程式來擷取<xref:System.Net.Security.SslStream.TransportContext%2A>上相關聯的屬性<xref:System.Net.Security.SslStream>。  
  
 如果驗證失敗時，您會收到<xref:System.Security.Authentication.AuthenticationException>或<xref:System.Security.Authentication.InvalidCredentialException>。 在此情況下，您可以重試與不同的認證驗證。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> 為 <see langword="null" />。  
  
 \-或-  
  
 <paramref name="credential" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="allowedImpersonationLevel" /> 不是有效的值。</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">驗證失敗。 您可以使用這個物件重試驗證。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">驗證失敗。 您可以使用這個物件重試驗證。</exception>
        <exception cref="T:System.InvalidOperationException">已經進行驗證。  
  
 \-或-  
  
 這個資料流先前是用來以伺服器的身分嘗試驗證。 您不能使用資料流以用戶端身分重試驗證。</exception>
        <exception cref="T:System.ObjectDisposedException">此物件已關閉。</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsServer">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>處理用戶端與伺服器連接之驗證的伺服器端。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 驗證正在進行中時，就會封鎖這些方法。 若要防止應用程式封鎖等候驗證完成時，使用<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsServer ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsServer();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>由伺服器呼叫以驗證用戶端與伺服器連接中的用戶端，並選擇性地驗證伺服器。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 驗證會使用伺服器的<xref:System.Net.CredentialCache.DefaultCredentials%2A>。 不指定伺服器的任何服務主要名稱 (SPN)。 模擬等級是<xref:System.Security.Principal.TokenImpersonationLevel.Identification>，和安全性層級是<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>。  
  
 當驗證成功時，您必須檢查<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>和<xref:System.Net.Security.NegotiateStream.IsSigned%2A>屬性，以便判斷哪些安全性服務由<xref:System.Net.Security.NegotiateStream>。 請檢查<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>屬性來判斷是否發生過相互驗證。  
  
 這個方法會封鎖直到作業完成為止。 若要防止封鎖直到作業完成為止，使用其中一種<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>方法多載。  
  
 如果驗證失敗時，您會收到<xref:System.Security.Authentication.AuthenticationException>或<xref:System.Security.Authentication.InvalidCredentialException>。 在此情況下，您可以重試與不同的認證驗證。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">驗證失敗。 您可以使用這個物件重試驗證。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">驗證失敗。 您可以使用這個物件重試驗證。</exception>
        <exception cref="T:System.ObjectDisposedException">此物件已關閉。</exception>
        <exception cref="T:System.NotSupportedException">不支援 Windows 95 和 Windows 98。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">若要使用明確<see cref="T:System.Net.NetworkCredential" />。 關聯的列舉型別：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer(class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsServer (policy As ExtendedProtectionPolicy)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsServer(System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Parameters>
      <Docs>
        <param name="policy">用於延伸保護的 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />。</param>
        <summary>由伺服器呼叫以驗證用戶端與伺服器連接中的用戶端，並選擇性地驗證伺服器。 驗證處理序使用指定的延伸保護原則。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 驗證會使用伺服器的<xref:System.Net.CredentialCache.DefaultCredentials%2A>。 不指定伺服器的任何服務主要名稱 (SPN)。 模擬等級是<xref:System.Security.Principal.TokenImpersonationLevel.Identification>，和安全性層級是<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>。  
  
 如果`policy`參數是`null`，則延伸的保護原則會使用具有<xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>設<xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>。  
  
 當驗證成功時，您必須檢查<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>和<xref:System.Net.Security.NegotiateStream.IsSigned%2A>屬性，以便判斷哪些安全性服務由<xref:System.Net.Security.NegotiateStream>。 請檢查<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>屬性來判斷是否發生過相互驗證。  
  
 這個方法會封鎖直到作業完成為止。 若要防止封鎖直到作業完成為止，使用其中一種<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>方法多載。  
  
 如果驗證失敗時，您會收到<xref:System.Security.Authentication.AuthenticationException>或<xref:System.Security.Authentication.InvalidCredentialException>。 在此情況下，您可以重試與不同的認證驗證。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">根據延伸保護原則傳入 <paramref name="policy" /> 參數中的 <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> 和 <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> 都是 <see langword="null" />。</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">驗證失敗。 您可以使用這個物件重試驗證。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">驗證失敗。 您可以使用這個物件重試驗證。</exception>
        <exception cref="T:System.NotSupportedException">不支援 Windows 95 和 Windows 98。</exception>
        <exception cref="T:System.ObjectDisposedException">此物件已關閉。</exception>
        <exception cref="T:System.PlatformNotSupportedException">在不支援延伸保護的平台上，<paramref name="policy" /> 參數設定為 <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" />。</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer(class System.Net.NetworkCredential credential, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsServer (credential As NetworkCredential, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As TokenImpersonationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsServer(System::Net::NetworkCredential ^ credential, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">建立伺服器識別所用的 <see cref="T:System.Net.NetworkCredential" />。</param>
        <param name="requiredProtectionLevel">其中一個 <see cref="T:System.Net.Security.ProtectionLevel" /> 值，表示資料流的安全性服務。</param>
        <param name="requiredImpersonationLevel">其中一個 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值，表示伺服器要如何使用用戶端的認證來存取資源。</param>
        <summary>由伺服器呼叫以驗證用戶端與伺服器連接中的用戶端，並選擇性地驗證伺服器。 驗證處理序使用指定的伺服器認證和驗證選項。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當驗證成功時，您必須檢查<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>和<xref:System.Net.Security.NegotiateStream.IsSigned%2A>屬性，以便判斷哪些安全性服務由<xref:System.Net.Security.NegotiateStream>。 請檢查<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>屬性來判斷是否發生過相互驗證。  
  
 這個方法會封鎖直到作業完成為止。 若要防止封鎖直到作業完成為止，使用其中一種<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>方法多載。  
  
 如果驗證失敗時，您會收到<xref:System.Security.Authentication.AuthenticationException>或<xref:System.Security.Authentication.InvalidCredentialException>。 在此情況下，您可以重試與不同的認證驗證。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="requiredImpersonationLevel" /> 必須是 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" /> 或 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />。</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">驗證失敗。 您可以使用這個物件嘗試再次驗證。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">驗證失敗。 您可以使用這個物件重試驗證。</exception>
        <exception cref="T:System.ObjectDisposedException">此物件已關閉。</exception>
        <exception cref="T:System.InvalidOperationException">已經進行驗證。  
  
 \-或-  
  
 這個資料流先前是用來以用戶端的身分嘗試驗證。 您不能使用資料流以伺服器身分重試驗證。</exception>
        <exception cref="T:System.NotSupportedException">不支援 Windows 95 和 Windows 98。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">若要使用明確<see cref="T:System.Net.NetworkCredential" />。 關聯的列舉型別：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsServer (credential As NetworkCredential, policy As ExtendedProtectionPolicy, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As TokenImpersonationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsServer(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">建立用戶端識別所用的 <see cref="T:System.Net.NetworkCredential" />。</param>
        <param name="policy">用於延伸保護的 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />。</param>
        <param name="requiredProtectionLevel">其中一個 <see cref="T:System.Net.Security.ProtectionLevel" /> 值，表示資料流的安全性服務。</param>
        <param name="requiredImpersonationLevel">其中一個 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值，表示伺服器要如何使用用戶端的認證來存取資源。</param>
        <summary>由伺服器呼叫以驗證用戶端與伺服器連接中的用戶端，並選擇性地驗證伺服器。 驗證處理序使用指定的伺服器認證、驗證選項和延伸保護原則。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`policy`參數是`null`，則延伸的保護原則會使用具有<xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>設<xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>。  
  
 當驗證成功時，您必須檢查<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>和<xref:System.Net.Security.NegotiateStream.IsSigned%2A>屬性，以便判斷哪些安全性服務由<xref:System.Net.Security.NegotiateStream>。 請檢查<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>屬性來判斷是否發生過相互驗證。  
  
 這個方法會封鎖直到作業完成為止。 若要防止封鎖直到作業完成為止，使用其中一種<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>方法多載。  
  
 如果驗證失敗時，您會收到<xref:System.Security.Authentication.AuthenticationException>或<xref:System.Security.Authentication.InvalidCredentialException>。 在此情況下，您可以重試與不同的認證驗證。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">根據延伸保護原則傳入 <paramref name="policy" /> 參數中的 <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> 和 <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> 都是 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="requiredImpersonationLevel" /> 必須是 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" /> 或 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />。</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">驗證失敗。 您可以使用這個物件嘗試再次驗證。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">驗證失敗。 您可以使用這個物件重試驗證。</exception>
        <exception cref="T:System.InvalidOperationException">已經進行驗證。  
  
 \-或-  
  
 這個資料流先前是用來以用戶端的身分嘗試驗證。 您不能使用資料流以伺服器身分重試驗證。</exception>
        <exception cref="T:System.NotSupportedException">不支援 Windows 95 和 Windows 98。</exception>
        <exception cref="T:System.ObjectDisposedException">此物件已關閉。</exception>
        <exception cref="T:System.PlatformNotSupportedException">在不支援延伸保護的平台上，<paramref name="policy" /> 參數設定為 <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" />。</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsServerAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>以非同步作業方式處理驗證用戶端與伺服器連接的伺服器端。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsServerAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsServerAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>由伺服器呼叫做為非同步作業，以驗證用戶端與伺服器連接中的用戶端，並選擇性地驗證伺服器。</summary>
        <returns>傳回 <see cref="T:System.Threading.Tasks.Task" />。  
  
 工作物件，表示非同步作業。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 驗證會使用伺服器的<xref:System.Net.CredentialCache.DefaultCredentials%2A>。 不指定伺服器的任何服務主要名稱 (SPN)。 模擬等級是<xref:System.Security.Principal.TokenImpersonationLevel.Identification>，和安全性層級是<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>。  
  
 當驗證成功時，您必須檢查<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>和<xref:System.Net.Security.NegotiateStream.IsSigned%2A>屬性，以便判斷哪些安全性服務由<xref:System.Net.Security.NegotiateStream>。 請檢查<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>屬性來判斷是否發生過相互驗證。  
  
 如果驗證失敗時，您會收到<xref:System.Security.Authentication.AuthenticationException>或<xref:System.Security.Authentication.InvalidCredentialException>。 在此情況下，您可以重試與不同的認證驗證。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">驗證失敗。 您可以使用這個物件重試驗證。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">驗證失敗。 您可以使用這個物件重試驗證。</exception>
        <exception cref="T:System.ObjectDisposedException">此物件已關閉。</exception>
        <exception cref="T:System.NotSupportedException">不支援 Windows 95 和 Windows 98。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">若要使用明確<see cref="T:System.Net.NetworkCredential" />。 關聯的列舉型別：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync(class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsServerAsync (policy As ExtendedProtectionPolicy) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsServerAsync(System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Parameters>
      <Docs>
        <param name="policy">用於延伸保護的 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />。</param>
        <summary>由伺服器呼叫做為非同步作業，以驗證用戶端與伺服器連接中的用戶端，並選擇性地驗證伺服器。 驗證處理序使用指定的延伸保護原則。</summary>
        <returns>傳回 <see cref="T:System.Threading.Tasks.Task" />。  
  
 工作物件，表示非同步作業。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 驗證會使用伺服器的<xref:System.Net.CredentialCache.DefaultCredentials%2A>。 不指定伺服器的任何服務主要名稱 (SPN)。 模擬等級是<xref:System.Security.Principal.TokenImpersonationLevel.Identification>，和安全性層級是<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>。  
  
 如果`policy`參數是`null`，則延伸的保護原則會使用具有<xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>設<xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>。  
  
 當驗證成功時，您必須檢查<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>和<xref:System.Net.Security.NegotiateStream.IsSigned%2A>屬性，以便判斷哪些安全性服務由<xref:System.Net.Security.NegotiateStream>。 請檢查<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>屬性來判斷是否發生過相互驗證。  
  
 如果驗證失敗時，您會收到<xref:System.Security.Authentication.AuthenticationException>或<xref:System.Security.Authentication.InvalidCredentialException>。 在此情況下，您可以重試與不同的認證驗證。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">根據延伸保護原則傳入 <paramref name="policy" /> 參數中的 <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> 和 <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> 都是 <see langword="null" />。</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">驗證失敗。 您可以使用這個物件重試驗證。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">驗證失敗。 您可以使用這個物件重試驗證。</exception>
        <exception cref="T:System.NotSupportedException">不支援 Windows 95 和 Windows 98。</exception>
        <exception cref="T:System.ObjectDisposedException">此物件已關閉。</exception>
        <exception cref="T:System.PlatformNotSupportedException">在不支援延伸保護的平台上，<paramref name="policy" /> 參數設定為 <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" />。</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync(class System.Net.NetworkCredential credential, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsServerAsync (credential As NetworkCredential, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As TokenImpersonationLevel) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsServerAsync(System::Net::NetworkCredential ^ credential, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">建立伺服器識別所用的 <see cref="T:System.Net.NetworkCredential" />。</param>
        <param name="requiredProtectionLevel">其中一個 <see cref="T:System.Net.Security.ProtectionLevel" /> 值，表示資料流的安全性服務。</param>
        <param name="requiredImpersonationLevel">其中一個 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值，表示伺服器要如何使用用戶端的認證來存取資源。</param>
        <summary>由伺服器呼叫做為非同步作業，以驗證用戶端與伺服器連接中的用戶端，並選擇性地驗證伺服器。 驗證處理序使用指定的伺服器認證和驗證選項。</summary>
        <returns>傳回 <see cref="T:System.Threading.Tasks.Task" />。  
  
 工作物件，表示非同步作業。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當驗證成功時，您必須檢查<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>和<xref:System.Net.Security.NegotiateStream.IsSigned%2A>屬性，以便判斷哪些安全性服務由<xref:System.Net.Security.NegotiateStream>。 請檢查<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>屬性來判斷是否發生過相互驗證。  
  
 如果驗證失敗時，您會收到<xref:System.Security.Authentication.AuthenticationException>或<xref:System.Security.Authentication.InvalidCredentialException>。 在此情況下，您可以重試與不同的認證驗證。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="requiredImpersonationLevel" /> 必須是 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" /> 或 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />。</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">驗證失敗。 您可以使用這個物件嘗試再次驗證。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">驗證失敗。 您可以使用這個物件重試驗證。</exception>
        <exception cref="T:System.ObjectDisposedException">此物件已關閉。</exception>
        <exception cref="T:System.InvalidOperationException">已經進行驗證。  
  
 \-或-  
  
 這個資料流先前是用來以用戶端的身分嘗試驗證。 您不能使用資料流以伺服器身分重試驗證。</exception>
        <exception cref="T:System.NotSupportedException">不支援 Windows 95 和 Windows 98。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">若要使用明確<see cref="T:System.Net.NetworkCredential" />。 關聯的列舉型別：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsServerAsync (credential As NetworkCredential, policy As ExtendedProtectionPolicy, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As TokenImpersonationLevel) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsServerAsync(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">建立用戶端識別所用的 <see cref="T:System.Net.NetworkCredential" />。</param>
        <param name="policy">用於延伸保護的 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />。</param>
        <param name="requiredProtectionLevel">其中一個 <see cref="T:System.Net.Security.ProtectionLevel" /> 值，表示資料流的安全性服務。</param>
        <param name="requiredImpersonationLevel">其中一個 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值，表示伺服器要如何使用用戶端的認證來存取資源。</param>
        <summary>由伺服器呼叫做為非同步作業，以驗證用戶端與伺服器連接中的用戶端，並選擇性地驗證伺服器。 驗證處理序使用指定的伺服器認證、驗證選項和延伸保護原則。</summary>
        <returns>傳回 <see cref="T:System.Threading.Tasks.Task" />。  
  
 工作物件，表示非同步作業。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`policy`參數是`null`，則延伸的保護原則會使用具有<xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>設<xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>。  
  
 當驗證成功時，您必須檢查<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>和<xref:System.Net.Security.NegotiateStream.IsSigned%2A>屬性，以便判斷哪些安全性服務由<xref:System.Net.Security.NegotiateStream>。 請檢查<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>屬性來判斷是否發生過相互驗證。  
  
 如果驗證失敗時，您會收到<xref:System.Security.Authentication.AuthenticationException>或<xref:System.Security.Authentication.InvalidCredentialException>。 在此情況下，您可以重試與不同的認證驗證。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">根據延伸保護原則傳入 <paramref name="policy" /> 參數中的 <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> 和 <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> 都是 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="requiredImpersonationLevel" /> 必須是 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" /> 或 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />。</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">驗證失敗。 您可以使用這個物件嘗試再次驗證。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">驗證失敗。 您可以使用這個物件重試驗證。</exception>
        <exception cref="T:System.InvalidOperationException">已經進行驗證。  
  
 \-或-  
  
 這個資料流先前是用來以用戶端的身分嘗試驗證。 您不能使用資料流以伺服器身分重試驗證。</exception>
        <exception cref="T:System.NotSupportedException">不支援 Windows 95 和 Windows 98。</exception>
        <exception cref="T:System.ObjectDisposedException">此物件已關閉。</exception>
        <exception cref="T:System.PlatformNotSupportedException">在不支援延伸保護的平台上，<paramref name="policy" /> 參數設定為 <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" />。</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAuthenticateAsClient">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>開始非同步作業以驗證用戶端與伺服器連接中的用戶端。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 驗證正在進行時，此方法的多載不會封鎖。 若要封鎖等候驗證完成時，使用其中一種<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="asyncCallback">
          <see cref="T:System.AsyncCallback" /> 委派，會於驗證完成時參考要叫用的方法。</param>
        <param name="asyncState">包含作業資訊的使用者定義物件。 作業完成時，這個物件會傳遞給 <c>asyncCallback</c> 委派。</param>
        <summary>由用戶端呼叫以開始非同步作業，以便驗證用戶端與伺服器連接中的用戶端，並選擇性地驗證伺服器。 這個方法不會封鎖。</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> 物件，指出非同步作業的狀態。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 驗證會使用用戶端<xref:System.Net.CredentialCache.DefaultCredentials%2A>。 不指定伺服器的任何服務主要名稱 (SPN)。 模擬等級是<xref:System.Security.Principal.TokenImpersonationLevel.Identification>，和安全性層級是<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>。 <xref:System.Net.Security.NegotiateStream>類別將會建構使用相互驗證的 SPN。  
  
 這個方法是非同步，而且不會封鎖在作業完成時。 若要封鎖直到作業完成為止，使用其中一種<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>方法多載。  
  
 完成非同步的驗證作業，藉由呼叫<xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A>方法。 一般而言，方法由叫用`asyncCallback`委派。 如需使用非同步程式設計模型的詳細資訊，請參閱[非同步呼叫同步方法](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 如果驗證失敗時，您會收到<xref:System.Security.Authentication.AuthenticationException>或<xref:System.Security.Authentication.InvalidCredentialException>。 在此情況下，您可以重試與不同的認證驗證。  
  
   
  
## Examples  
 下列程式碼範例示範如何呼叫這個方法來開始非同步的驗證用戶端。  
  
 [!code-cpp[NclNegoAsyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#2)]
 [!code-csharp[NclNegoAsyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">驗證失敗。 您可以使用這個物件重試驗證。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">驗證失敗。 您可以使用這個物件重試驗證。</exception>
        <exception cref="T:System.ObjectDisposedException">此物件已關閉。</exception>
        <exception cref="T:System.InvalidOperationException">已經進行驗證。  
  
 \-或-  
  
 這個資料流先前是用來以伺服器的身分嘗試驗證。 您不能使用資料流以用戶端身分重試驗證。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">若要使用明確<see cref="T:System.Net.NetworkCredential" />。 關聯的列舉型別：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::String ^ targetName, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential">建立用戶端識別所用的 <see cref="T:System.Net.NetworkCredential" />。</param>
        <param name="targetName">服務主要名稱 (SPN)，用來唯一識別要驗證的伺服器。</param>
        <param name="asyncCallback">
          <see cref="T:System.AsyncCallback" /> 委派，會於驗證完成時參考要叫用的方法。</param>
        <param name="asyncState">包含寫入作業資訊的使用者定義物件。 作業完成時，這個物件會傳遞給 <c>asyncCallback</c> 委派。</param>
        <summary>由用戶端呼叫以開始非同步作業，以便驗證用戶端與伺服器連接中的用戶端，並選擇性地驗證伺服器。 驗證處理序使用指定的認證。 這個方法不會封鎖。</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> 物件，指出非同步作業的狀態。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法是非同步，而且不會封鎖在作業完成時。 若要封鎖直到作業完成為止，使用其中一種<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>方法多載。  
  
 完成非同步的驗證作業，藉由呼叫<xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A>方法。 一般而言，方法由叫用`asyncCallback`委派。 如需使用非同步程式設計模型的詳細資訊，請參閱[非同步呼叫同步方法](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 如果驗證失敗時，您會收到<xref:System.Security.Authentication.AuthenticationException>或<xref:System.Security.Authentication.InvalidCredentialException>。 在此情況下，您可以重試與不同的認證驗證。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> 為 <see langword="null" />。  
  
 \-或-  
  
 <paramref name="targetName" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">驗證失敗。 您可以使用這個物件重試驗證。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">驗證失敗。 您可以使用這個物件重試驗證。</exception>
        <exception cref="T:System.ObjectDisposedException">此物件已關閉。</exception>
        <exception cref="T:System.InvalidOperationException">已經進行驗證。  
  
 \-或-  
  
 這個資料流先前是用來以伺服器的身分嘗試驗證。 您不能使用資料流以用戶端身分重試驗證。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">若要使用明確<see cref="T:System.Net.NetworkCredential" />。 關聯的列舉型別：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential">建立用戶端識別所用的 <see cref="T:System.Net.NetworkCredential" />。</param>
        <param name="binding">用於延伸保護的 <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />。</param>
        <param name="targetName">服務主要名稱 (SPN)，用來唯一識別要驗證的伺服器。</param>
        <param name="asyncCallback">
          <see cref="T:System.AsyncCallback" /> 委派，會於驗證完成時參考要叫用的方法。</param>
        <param name="asyncState">包含寫入作業資訊的使用者定義物件。 作業完成時，這個物件會傳遞給 <c>asyncCallback</c> 委派。</param>
        <summary>由用戶端呼叫以開始非同步作業，以便驗證用戶端與伺服器連接中的用戶端，並選擇性地驗證伺服器。 驗證處理序使用指定的認證和通道繫結。 這個方法不會封鎖。</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> 物件，指出非同步作業的狀態。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法是非同步，而且不會封鎖在作業完成時。 若要封鎖直到作業完成為止，使用其中一種<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>方法多載。  
  
 完成非同步的驗證作業，藉由呼叫<xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A>方法。 一般而言，方法由叫用`asyncCallback`委派。 如需使用非同步程式設計模型的詳細資訊，請參閱[非同步呼叫同步方法](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 如果驗證失敗時，您會收到<xref:System.Security.Authentication.AuthenticationException>或<xref:System.Security.Authentication.InvalidCredentialException>。 在此情況下，您可以重試與不同的認證驗證。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> 為 <see langword="null" />。  
  
 \-或-  
  
 <paramref name="targetName" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">驗證失敗。 您可以使用這個物件重試驗證。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">驗證失敗。 您可以使用這個物件重試驗證。</exception>
        <exception cref="T:System.InvalidOperationException">已經進行驗證。  
  
 \-或-  
  
 這個資料流先前是用來以伺服器的身分嘗試驗證。 您不能使用資料流以用戶端身分重試驗證。</exception>
        <exception cref="T:System.ObjectDisposedException">此物件已關閉。</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential">建立用戶端識別所用的 <see cref="T:System.Net.NetworkCredential" />。</param>
        <param name="targetName">服務主要名稱 (SPN)，用來唯一識別要驗證的伺服器。</param>
        <param name="requiredProtectionLevel">其中一個 <see cref="T:System.Net.Security.ProtectionLevel" /> 值，表示資料流的安全性服務。</param>
        <param name="allowedImpersonationLevel">其中一個 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值，表示伺服器要如何使用用戶端的認證來存取資源。</param>
        <param name="asyncCallback">
          <see cref="T:System.AsyncCallback" /> 委派，會於驗證完成時參考要叫用的方法。</param>
        <param name="asyncState">包含寫入作業資訊的使用者定義物件。 作業完成時，這個物件會傳遞給 <c>asyncCallback</c> 委派。</param>
        <summary>由用戶端呼叫以開始非同步作業，以便驗證用戶端與伺服器連接中的用戶端，並選擇性地驗證伺服器。 驗證處理序使用指定的認證和驗證選項。 這個方法不會封鎖。</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> 物件，指出非同步作業的狀態。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用`requiredProtectionLevel`參數，以使用已驗證的資料流傳輸資料的要求安全性服務。 例如，若要進行加密及簽署的資料，請指定<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>值。 成功驗證不保證要求<xref:System.Net.Security.ProtectionLevel>已被授與。 您必須檢查<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>和<xref:System.Net.Security.NegotiateStream.IsSigned%2A>屬性，以便判斷哪些安全性服務由<xref:System.Net.Security.NegotiateStream>。  
  
 這個方法是非同步，而且不會封鎖在作業完成時。 若要封鎖直到作業完成為止，使用其中一種<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>方法多載。  
  
 完成非同步的驗證作業，藉由呼叫<xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A>方法。 一般而言，方法由叫用`asyncCallback`委派。 如需使用非同步程式設計模型的詳細資訊，請參閱[非同步呼叫同步方法](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 如果驗證失敗時，您會收到<xref:System.Security.Authentication.AuthenticationException>或<xref:System.Security.Authentication.InvalidCredentialException>。 在此情況下，您可以重試與不同的認證驗證。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> 為 <see langword="null" />。  
  
 \-或-  
  
 <paramref name="targetName" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">驗證失敗。 您可以使用這個物件重試驗證。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">驗證失敗。 您可以使用這個物件重試驗證。</exception>
        <exception cref="T:System.ObjectDisposedException">此物件已關閉。</exception>
        <exception cref="T:System.InvalidOperationException">已經進行驗證。  
  
 \-或-  
  
 這個資料流先前是用來以伺服器的身分嘗試驗證。 您不能使用資料流以用戶端身分重試驗證。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">若要使用明確<see cref="T:System.Net.NetworkCredential" />。 關聯的列舉型別：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential">建立用戶端識別所用的 <see cref="T:System.Net.NetworkCredential" />。</param>
        <param name="binding">用於延伸保護的 <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />。</param>
        <param name="targetName">服務主要名稱 (SPN)，用來唯一識別要驗證的伺服器。</param>
        <param name="requiredProtectionLevel">其中一個 <see cref="T:System.Net.Security.ProtectionLevel" /> 值，表示資料流的安全性服務。</param>
        <param name="allowedImpersonationLevel">其中一個 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值，表示伺服器要如何使用用戶端的認證來存取資源。</param>
        <param name="asyncCallback">
          <see cref="T:System.AsyncCallback" /> 委派，會於驗證完成時參考要叫用的方法。</param>
        <param name="asyncState">包含寫入作業資訊的使用者定義物件。 作業完成時，這個物件會傳遞給 <c>asyncCallback</c> 委派。</param>
        <summary>由用戶端呼叫以開始非同步作業，以便驗證用戶端與伺服器連接中的用戶端，並選擇性地驗證伺服器。 驗證處理序使用指定的認證、驗證選項和通道繫結。 這個方法不會封鎖。</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> 物件，指出非同步作業的狀態。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用`requiredProtectionLevel`參數，以使用已驗證的資料流傳輸資料的要求安全性服務。 例如，若要進行加密及簽署的資料，請指定<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>值。 成功驗證不保證要求<xref:System.Net.Security.ProtectionLevel>已被授與。 您必須檢查<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>和<xref:System.Net.Security.NegotiateStream.IsSigned%2A>屬性，以便判斷哪些安全性服務由<xref:System.Net.Security.NegotiateStream>。  
  
 這個方法是非同步，而且不會封鎖在作業完成時。 若要封鎖直到作業完成為止，使用其中一種<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>方法多載。  
  
 完成非同步的驗證作業，藉由呼叫<xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A>方法。 一般而言，方法由叫用`asyncCallback`委派。 如需使用非同步程式設計模型的詳細資訊，請參閱[非同步呼叫同步方法](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 如果驗證失敗時，您會收到<xref:System.Security.Authentication.AuthenticationException>或<xref:System.Security.Authentication.InvalidCredentialException>。 在此情況下，您可以重試與不同的認證驗證。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> 為 <see langword="null" />。  
  
 \-或-  
  
 <paramref name="targetName" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">驗證失敗。 您可以使用這個物件重試驗證。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">驗證失敗。 您可以使用這個物件重試驗證。</exception>
        <exception cref="T:System.InvalidOperationException">已經進行驗證。  
  
 \-或-  
  
 這個資料流先前是用來以伺服器的身分嘗試驗證。 您不能使用資料流以用戶端身分重試驗證。</exception>
        <exception cref="T:System.ObjectDisposedException">此物件已關閉。</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAuthenticateAsServer">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>開始非同步作業以處理驗證用戶端與伺服器連接的伺服器端。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 驗證正在進行時，此方法的多載不會封鎖。 若要封鎖等候驗證完成時，請使用<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsServer(AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="asyncCallback">
          <see cref="T:System.AsyncCallback" /> 委派，會於驗證完成時參考要叫用的方法。</param>
        <param name="asyncState">包含作業資訊的使用者定義物件。 作業完成時，這個物件會傳遞給 <c>asyncCallback</c> 委派。</param>
        <summary>由伺服器呼叫以開始非同步作業，以便驗證用戶端與伺服器連接中的用戶端，並選擇性地驗證伺服器。 這個方法不會封鎖。</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> 物件，指出非同步作業的狀態。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 驗證會使用伺服器的<xref:System.Net.CredentialCache.DefaultCredentials%2A>。 不指定伺服器的任何服務主要名稱 (SPN)。 模擬等級是<xref:System.Security.Principal.TokenImpersonationLevel.Identification>，安全性層級是<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>。  
  
 當驗證成功時，您必須檢查<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>和<xref:System.Net.Security.NegotiateStream.IsSigned%2A>屬性，以便判斷哪些安全性服務由<xref:System.Net.Security.NegotiateStream>。 請檢查<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>屬性來判斷是否發生過相互驗證。  
  
 若要封鎖直到作業完成為止，使用其中一種<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>方法多載。  
  
 如果驗證失敗時，您會收到<xref:System.Security.Authentication.AuthenticationException>或<xref:System.Security.Authentication.InvalidCredentialException>。 在此情況下，您可以重試與不同的認證驗證。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">驗證失敗。 您可以使用這個物件重試驗證。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">驗證失敗。 您可以使用這個物件重試驗證。</exception>
        <exception cref="T:System.ObjectDisposedException">此物件已關閉。</exception>
        <exception cref="T:System.NotSupportedException">不支援 Windows 95 和 Windows 98。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">若要使用明確<see cref="T:System.Net.NetworkCredential" />。 關聯的列舉型別：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsServer(System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="policy">用於延伸保護的 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />。</param>
        <param name="asyncCallback">
          <see cref="T:System.AsyncCallback" /> 委派，會於驗證完成時參考要叫用的方法。</param>
        <param name="asyncState">包含寫入作業資訊的使用者定義物件。 作業完成時，這個物件會傳遞給 <c>asyncCallback</c> 委派。</param>
        <summary>由伺服器呼叫以開始非同步作業，以便驗證用戶端與伺服器連接中的用戶端，並選擇性地驗證伺服器。 驗證處理序使用指定的延伸保護原則。 這個方法不會封鎖。</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> 物件，指出非同步作業的狀態。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 驗證會使用伺服器的<xref:System.Net.CredentialCache.DefaultCredentials%2A>。 不指定伺服器的任何服務主要名稱 (SPN)。 模擬等級是<xref:System.Security.Principal.TokenImpersonationLevel.Identification>，安全性層級是<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>。  
  
 如果`policy`參數是`null`，則延伸的保護原則會使用具有<xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>設<xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>。  
  
 當驗證成功時，您必須檢查<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>和<xref:System.Net.Security.NegotiateStream.IsSigned%2A>屬性，以便判斷哪些安全性服務由<xref:System.Net.Security.NegotiateStream>。 請檢查<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>屬性來判斷是否發生過相互驗證。  
  
 若要封鎖直到作業完成為止，使用其中一種<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>方法多載。  
  
 如果驗證失敗時，您會收到<xref:System.Security.Authentication.AuthenticationException>或<xref:System.Security.Authentication.InvalidCredentialException>。 在此情況下，您可以重試與不同的認證驗證。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">根據延伸保護原則傳入 <paramref name="policy" /> 參數中的 <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> 和 <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> 都是 <see langword="null" />。</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">驗證失敗。 您可以使用這個物件重試驗證。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">驗證失敗。 您可以使用這個物件重試驗證。</exception>
        <exception cref="T:System.NotSupportedException">不支援 Windows 95 和 Windows 98。</exception>
        <exception cref="T:System.ObjectDisposedException">此物件已關閉。</exception>
        <exception cref="T:System.PlatformNotSupportedException">在不支援延伸保護的平台上，<paramref name="policy" /> 參數設定為 <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" />。</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.Net.NetworkCredential credential, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsServer(System::Net::NetworkCredential ^ credential, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential">建立用戶端識別所用的 <see cref="T:System.Net.NetworkCredential" />。</param>
        <param name="requiredProtectionLevel">其中一個 <see cref="T:System.Net.Security.ProtectionLevel" /> 值，表示資料流的安全性服務。</param>
        <param name="requiredImpersonationLevel">其中一個 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值，表示伺服器要如何使用用戶端的認證來存取資源。</param>
        <param name="asyncCallback">
          <see cref="T:System.AsyncCallback" /> 委派，會於驗證完成時參考要叫用的方法。</param>
        <param name="asyncState">包含作業資訊的使用者定義物件。 作業完成時，這個物件會傳遞給 <c>asyncCallback</c> 委派。</param>
        <summary>由伺服器呼叫以開始非同步作業，以便驗證用戶端與伺服器連接中的用戶端，並選擇性地驗證伺服器。 驗證處理序使用指定的伺服器認證和驗證選項。 這個方法不會封鎖。</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> 物件，指出非同步作業的狀態。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用`requiredProtectionLevel`參數，以使用已驗證的資料流傳輸資料的要求安全性服務。 例如，若要進行加密及簽署的資料，請指定<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>值。 成功驗證不保證，要求<xref:System.Net.Security.ProtectionLevel>已被授與。 您必須檢查<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>和<xref:System.Net.Security.NegotiateStream.IsSigned%2A>屬性，以便判斷哪些安全性服務由<xref:System.Net.Security.NegotiateStream>。  
  
 這個方法是非同步，而且不會封鎖在作業完成時。 若要封鎖直到作業完成為止，使用其中一種<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>方法多載。  
  
 完成非同步的驗證作業，藉由呼叫<xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A>方法。 一般而言，方法由叫用`asyncCallback`委派。 如需使用非同步程式設計模型的詳細資訊，請參閱[非同步呼叫同步方法](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 如果驗證失敗時，您會收到<xref:System.Security.Authentication.AuthenticationException>或<xref:System.Security.Authentication.InvalidCredentialException>。 在此情況下，您可以重試與不同的認證驗證。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="requiredImpersonationLevel" /> 必須是 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" /> 或 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />。</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">驗證失敗。 您可以使用這個物件重試驗證。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">驗證失敗。 您可以使用這個物件重試驗證。</exception>
        <exception cref="T:System.ObjectDisposedException">此物件已關閉。</exception>
        <exception cref="T:System.InvalidOperationException">已經進行驗證。  
  
 \-或-  
  
 這個資料流先前是用來以用戶端的身分嘗試驗證。 您不能使用資料流以伺服器身分重試驗證。</exception>
        <exception cref="T:System.NotSupportedException">不支援 Windows 95 和 Windows 98。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">若要使用明確<see cref="T:System.Net.NetworkCredential" />。 關聯的列舉型別：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsServer(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential">建立用戶端識別所用的 <see cref="T:System.Net.NetworkCredential" />。</param>
        <param name="policy">用於延伸保護的 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />。</param>
        <param name="requiredProtectionLevel">其中一個 <see cref="T:System.Net.Security.ProtectionLevel" /> 值，表示資料流的安全性服務。</param>
        <param name="requiredImpersonationLevel">其中一個 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值，表示伺服器要如何使用用戶端的認證來存取資源。</param>
        <param name="asyncCallback">
          <see cref="T:System.AsyncCallback" /> 委派，會於驗證完成時參考要叫用的方法。</param>
        <param name="asyncState">包含寫入作業資訊的使用者定義物件。 作業完成時，這個物件會傳遞給 <c>asyncCallback</c> 委派。</param>
        <summary>由伺服器呼叫以開始非同步作業，以便驗證用戶端與伺服器連接中的用戶端，並選擇性地驗證伺服器。 驗證處理序使用指定的伺服器認證、驗證選項和延伸保護原則。 這個方法不會封鎖。</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> 物件，指出非同步作業的狀態。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用`requiredProtectionLevel`參數，以使用已驗證的資料流傳輸資料的要求安全性服務。 例如，若要進行加密及簽署的資料，請指定<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>值。 成功驗證不保證，要求<xref:System.Net.Security.ProtectionLevel>已被授與。 您必須檢查<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>和<xref:System.Net.Security.NegotiateStream.IsSigned%2A>屬性，以便判斷哪些安全性服務由<xref:System.Net.Security.NegotiateStream>。  
  
 如果`policy`參數是`null`，則延伸的保護原則會使用具有<xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>設<xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>。  
  
 這個方法是非同步，而且不會封鎖在作業完成時。 若要封鎖直到作業完成為止，使用其中一種<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>方法多載。  
  
 完成非同步的驗證作業，藉由呼叫<xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A>方法。 一般而言，方法由叫用`asyncCallback`委派。 如需使用非同步程式設計模型的詳細資訊，請參閱[非同步呼叫同步方法](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 如果驗證失敗時，您會收到<xref:System.Security.Authentication.AuthenticationException>或<xref:System.Security.Authentication.InvalidCredentialException>。 在此情況下，您可以重試與不同的認證驗證。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">根據延伸保護原則傳入 <paramref name="policy" /> 參數中的 <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> 和 <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> 都是 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="requiredImpersonationLevel" /> 必須是 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" /> 或 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />。</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">驗證失敗。 您可以使用這個物件重試驗證。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">驗證失敗。 您可以使用這個物件重試驗證。</exception>
        <exception cref="T:System.InvalidOperationException">已經進行驗證。  
  
 \-或-  
  
 這個資料流先前是用來以用戶端的身分嘗試驗證。 您不能使用資料流以伺服器身分重試驗證。</exception>
        <exception cref="T:System.NotSupportedException">不支援 Windows 95 和 Windows 98。</exception>
        <exception cref="T:System.ObjectDisposedException">此物件已關閉。</exception>
        <exception cref="T:System.PlatformNotSupportedException">在不支援延伸保護的平台上，<paramref name="policy" /> 參數設定為 <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" />。</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="BeginRead">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginRead (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginRead(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override IAsyncResult ^ BeginRead(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <see cref="T:System.Byte" /> 陣列，接收從資料流中讀取的位元組。</param>
        <param name="offset">「緩衝區」<c></c>中以零為起始的位置，用來開始儲存從此資料流讀取的資料。</param>
        <param name="count">自資料流中讀取的最大位元組數。</param>
        <param name="asyncCallback">
          <see cref="T:System.AsyncCallback" /> 委派，其會參考讀取作業完成時要叫用的方法。</param>
        <param name="asyncState">包含讀取作業資訊的使用者定義物件。 作業完成時，這個物件會傳遞給 <c>asyncCallback</c> 委派。</param>
        <summary>開始非同步讀取作業，這個作業會從資料流中讀取資料並將其儲存於指定的陣列中。</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> 物件，指出非同步作業的狀態。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果已啟用加密、 簽署或加密和簽章，讀取的作業會從基礎資料流讀取資料、 檢查資料完整性和加以解密。 如果沒有安全性服務，例如資料加密或簽章是使用中，此方法會啟動在基礎資料流非同步讀取的作業。  
  
 這個方法是非同步，而且不會封鎖在作業完成時。 若要封鎖的作業完成之前，請使用<xref:System.Net.Security.NegotiateStream.Read%2A>方法。  
  
 非同步讀取的作業必須完成呼叫<xref:System.Net.Security.NegotiateStream.EndRead%2A>方法。 一般而言，方法由叫用`asyncCallback`委派。 如需使用非同步程式設計模型的詳細資訊，請參閱[非同步呼叫同步方法](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 <xref:System.Net.Security.NegotiateStream>類別不支援多個同時進行讀取作業。 如果您嘗試啟動另一個讀取作業已經在執行相同的資料流讀取的作業<xref:System.NotSupportedException>擲回例外狀況。  
  
 已成功驗證之前，無法呼叫此方法。 若要驗證，請呼叫其中一種<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>， <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>， <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>，或<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>方法。  
  
   
  
## Examples  
 下列程式碼範例會示範如何開始非同步的讀取的作業。 這個程式碼範例是針對所提供之較大範例的一部分<xref:System.Net.Security.NegotiateStream>類別。  
  
 [!code-cpp[NclNegoAsyncServer#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#1)]
 [!code-csharp[NclNegoAsyncServer#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset" /> 小於 0。  
  
 \-或-  
  
 <paramref name="offset" /> 大於 <paramref name="buffer" /> 的長度。  
  
 \-或-  
  
 <paramref name="offset" /> 加上 <paramref name="count" /> 大於 <paramref name="buffer" /> 的長度。</exception>
        <exception cref="T:System.IO.IOException">讀取作業失敗。  
  
 \-或-  
  
 使用了加密，但無法解密資料。</exception>
        <exception cref="T:System.NotSupportedException">已經有讀取作業正在進行中。</exception>
        <exception cref="T:System.ObjectDisposedException">此物件已關閉。</exception>
        <exception cref="T:System.InvalidOperationException">尚未執行驗證。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginWrite">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginWrite (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginWrite(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override IAsyncResult ^ BeginWrite(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <see cref="T:System.Byte" /> 陣列，提供將要寫入至資料流的位元組。</param>
        <param name="offset">「緩衝區」<c></c>中以零為起始的位置，用來開始讀取將要寫入資料流的位元組。</param>
        <param name="count">
          <see cref="T:System.Int32" /> 值，指定從「緩衝區」<c></c>中讀取的位元組數目。</param>
        <param name="asyncCallback">
          <see cref="T:System.AsyncCallback" /> 委派，其會參考寫入作業完成時要叫用的方法。</param>
        <param name="asyncState">包含寫入作業資訊的使用者定義物件。 作業完成時，這個物件會傳遞給 <c>asyncCallback</c> 委派。</param>
        <summary>開始非同步寫入作業，此作業會從指定的緩衝區寫入 <see cref="T:System.Byte" /> 至資料流。</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> 物件，指出非同步作業的狀態。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果已啟用加密、 簽署或加密和簽章，這個方法從緩衝區讀取資料、 加密、 簽章或加密並加以簽署，和傳輸使用基礎資料流。 如果沒有安全性服務，例如資料加密或簽章是使用中，此方法會啟動在基礎資料流上的非同步寫入作業。  
  
 這個方法是非同步，而且不會封鎖在作業完成時。 若要封鎖的作業完成之前，請使用<xref:System.Net.Security.NegotiateStream.Read%2A>方法。  
  
 非同步讀取的作業必須完成呼叫<xref:System.Net.Security.NegotiateStream.EndWrite%2A>方法。 一般而言，方法由叫用`asyncCallback`委派。 如需使用非同步程式設計模型的詳細資訊，請參閱[非同步呼叫同步方法](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 <xref:System.Net.Security.NegotiateStream>類別不支援多個同時進行寫入作業。 如果您嘗試啟動另一個寫入作業已經在執行相同的資料流的寫入作業<xref:System.NotSupportedException>擲回例外狀況。  
  
 已成功驗證之前，無法呼叫此方法。 若要驗證，請呼叫其中一種<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>， <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>， <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>，或<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>方法。  
  
   
  
## Examples  
 下列程式碼範例將示範如何開始執行非同步的寫入作業。  
  
 [!code-cpp[NclNegoAsyncClient#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#3)]
 [!code-csharp[NclNegoAsyncClient#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#3)]  
  
 作業完成時，會呼叫下列方法。  
  
 [!code-cpp[NclNegoAsyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#4)]
 [!code-csharp[NclNegoAsyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset is less than 0" />。  
  
 \-或-  
  
 <paramref name="offset" /> 大於 <paramref name="buffer" /> 的長度。  
  
 \-或-  
  
 <paramref name="offset" /> 加上計數大於 <paramref name="buffer" /> 的長度。</exception>
        <exception cref="T:System.IO.IOException">寫入作業失敗。  
  
 \-或-  
  
 使用了加密，但無法解密資料。</exception>
        <exception cref="T:System.NotSupportedException">已經有寫入作業正在進行中。</exception>
        <exception cref="T:System.ObjectDisposedException">此物件已關閉。</exception>
        <exception cref="T:System.InvalidOperationException">尚未執行驗證。</exception>
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public override bool CanRead { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRead" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanRead" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanRead As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanRead { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.Boolean" /> 值，指示基礎資料流是否可讀取。</summary>
        <value>
          如果執行驗證且基礎資料流可讀取，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果驗證成功，這個屬性會傳回所叫用傳回的值<xref:System.IO.Stream.CanRead%2A>基礎資料流上的屬性。 當您建立的執行個體時，指定基礎資料流<xref:System.Net.Security.NegotiateStream>類別。  
  
   
  
## Examples  
 下列程式碼範例會示範如何顯示這個屬性的值。  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSeek">
      <MemberSignature Language="C#" Value="public override bool CanSeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSeek" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanSeek" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanSeek As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanSeek { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.Boolean" /> 值，指示基礎資料流是否可搜尋。</summary>
        <value>這個屬性永遠會傳回 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您不應嘗試設定的位置<xref:System.Net.Security.NegotiateStream>物件或其基礎資料流。 當您建立的執行個體時，指定基礎資料流<xref:System.Net.Security.NegotiateStream>類別。  
  
   
  
## Examples  
 下列程式碼範例會示範如何顯示這個屬性的值。  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Security.NegotiateStream.Position" />
      </Docs>
    </Member>
    <Member MemberName="CanTimeout">
      <MemberSignature Language="C#" Value="public override bool CanTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanTimeout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanTimeout { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.Boolean" /> 值，指示基礎資料流是否支援逾時。</summary>
        <value>
          如果基礎資料流支援逾時，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性會傳回所叫用傳回的值<xref:System.IO.Stream.CanTimeout%2A>基礎資料流上的屬性。 當您建立的執行個體時，指定基礎資料流<xref:System.Net.Security.NegotiateStream>類別。  
  
   
  
## Examples  
 下列程式碼範例會示範如何顯示這個屬性的值。  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWrite">
      <MemberSignature Language="C#" Value="public override bool CanWrite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWrite" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanWrite" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanWrite As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanWrite { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.Boolean" /> 值，指示基礎資料流是否可寫入。</summary>
        <value>
          如果執行驗證且基礎資料流可寫入，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果驗證成功，這個屬性會傳回所叫用傳回的值<xref:System.IO.Stream.CanWrite%2A>基礎資料流上的屬性。 當您建立的執行個體時，指定基礎資料流<xref:System.Net.Security.NegotiateStream>類別。  
  
   
  
## Examples  
 下列程式碼範例會示範如何顯示這個屬性的值。  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
        <summary>釋放 <see cref="T:System.Net.Security.NegotiateStream" /> 所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會呼叫公用`Dispose()`方法和<xref:System.Object.Finalize%2A>方法。 `Dispose()` 叫用受保護`Dispose(Boolean)`方法`disposing`參數設定為`true`。 <xref:System.Object.Finalize%2A> 叫用`Dispose`與`disposing`設`false`。  
  
 當`disposing`參數為 true，這個方法的任何 managed 物件所持有的資源全部釋出這個<xref:System.Net.Security.NegotiateStream>參考。 這個方法會叫用每個參考物件的 `Dispose()` 方法。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Dispose" /> 可以被其他物件呼叫多次。 在覆寫<see langword="Dispose(Boolean)" />小心不要參考物件已處置過的早期呼叫中<see langword="Dispose" />。 如需有關如何實作<see langword="Dispose(Boolean)" />，請參閱[實作 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。  
  
 如需有關<see langword="Dispose" />和<see cref="M:System.Object.Finalize" />，請參閱[清除 Unmanaged 資源上](~/docs/standard/garbage-collection/unmanaged.md)和[覆寫 Finalize 方法](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="EndAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void EndAuthenticateAsClient (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndAuthenticateAsClient(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndAuthenticateAsClient(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndAuthenticateAsClient (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndAuthenticateAsClient(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <see cref="T:System.IAsyncResult" /> 執行個體，由對 <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" /> 的呼叫所傳回。</param>
        <summary>結束藉由呼叫 <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" /> 啟動的暫止非同步用戶端驗證作業。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果作業尚未完成，這個方法會封鎖，直到它執行。 當驗證成功時，您必須檢查<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>和<xref:System.Net.Security.NegotiateStream.IsSigned%2A>屬性，以便判斷哪些安全性服務由<xref:System.Net.Security.NegotiateStream>。 請檢查<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>屬性來判斷是否發生過相互驗證。  
  
 如果驗證失敗時，您會收到<xref:System.Security.Authentication.AuthenticationException>或<xref:System.Security.Authentication.InvalidCredentialException>。 在此情況下，您可以重試與不同的認證驗證。  
  
 若要以同步方式執行這項作業，請使用其中一種<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> 不是由呼叫 <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" /> 的方式所建立。</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">驗證失敗。 您可以使用這個物件重試驗證。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">驗證失敗。 您可以使用這個物件重試驗證。</exception>
        <exception cref="T:System.InvalidOperationException">不存在要完成的暫止用戶端驗證。</exception>
      </Docs>
    </Member>
    <Member MemberName="EndAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void EndAuthenticateAsServer (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndAuthenticateAsServer(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndAuthenticateAsServer(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndAuthenticateAsServer (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndAuthenticateAsServer(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <see cref="T:System.IAsyncResult" /> 執行個體，由對 <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" /> 的呼叫所傳回。</param>
        <summary>結束藉由呼叫 <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" /> 啟動的暫止非同步用戶端驗證作業。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果作業尚未完成，這個方法會封鎖，直到它執行。  
  
 當驗證成功時，您必須檢查<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>和<xref:System.Net.Security.NegotiateStream.IsSigned%2A>屬性，以便判斷哪些安全性服務由<xref:System.Net.Security.NegotiateStream>。 請檢查<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>屬性來判斷是否發生過相互驗證。  
  
 如果驗證失敗時，您會收到<xref:System.Security.Authentication.AuthenticationException>或<xref:System.Security.Authentication.InvalidCredentialException>。 在此情況下，您可以重試與不同的認證驗證。  
  
 若要以同步方式執行這項作業，使用<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> 不是由呼叫 <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" /> 的方式所建立。</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">驗證失敗。 您可以使用這個物件重試驗證。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">驗證失敗。 您可以使用這個物件重試驗證。</exception>
        <exception cref="T:System.InvalidOperationException">不存在要完成的暫止驗證。</exception>
      </Docs>
    </Member>
    <Member MemberName="EndRead">
      <MemberSignature Language="C#" Value="public override int EndRead (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 EndRead(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndRead(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function EndRead (asyncResult As IAsyncResult) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int EndRead(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <see cref="T:System.IAsyncResult" /> 執行個體，由對 <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 的呼叫所傳回</param>
        <summary>結束藉由呼叫 <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 啟動的非同步讀取作業。</summary>
        <returns>
          <see cref="T:System.Int32" /> 值，指定從基礎資料流中讀取的位元組數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果作業尚未完成，這個方法會封鎖，直到它執行。  
  
 若要以同步方式執行這項作業，使用<xref:System.Net.Security.NegotiateStream.Read%2A>方法。  
  
 已成功驗證之前，無法呼叫此方法。 若要驗證，請呼叫其中一種<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>， <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>， <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>，或<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>方法。  
  
   
  
## Examples  
 下列程式碼範例示範結束非同步讀取作業。 如需示範如何啟動作業的範例，請參閱<xref:System.Net.Security.NegotiateStream.BeginRead%2A>。  
  
 [!code-cpp[NclNegoAsyncServer#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#3)]
 [!code-csharp[NclNegoAsyncServer#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">AsyncResult 不是由呼叫 <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 的方式所建立。</exception>
        <exception cref="T:System.InvalidOperationException">尚未執行驗證。</exception>
        <exception cref="T:System.IO.IOException">讀取作業失敗。</exception>
      </Docs>
    </Member>
    <Member MemberName="EndWrite">
      <MemberSignature Language="C#" Value="public override void EndWrite (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EndWrite(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndWrite(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub EndWrite (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void EndWrite(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <see cref="T:System.IAsyncResult" /> 執行個體，由對 <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 的呼叫所傳回</param>
        <summary>結束藉由呼叫 <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 啟動的非同步寫入作業。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果作業尚未完成，這個方法會封鎖，直到它執行。  
  
 已成功驗證之前，無法呼叫此方法。 若要驗證，請呼叫其中一種<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>， <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>， <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>，或<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>方法。  
  
 若要以同步方式執行這項作業，使用<xref:System.Net.Security.NegotiateStream.Write%2A>方法。  
  
   
  
## Examples  
 下列程式碼範例示範呼叫以完成非同步寫入作業的方法。 如需示範如何啟動作業的範例，請參閱<xref:System.Net.Security.NegotiateStream.BeginWrite%2A>。  
  
 [!code-cpp[NclNegoAsyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#4)]
 [!code-csharp[NclNegoAsyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">AsyncResult 不是由呼叫 <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 的方式所建立。</exception>
        <exception cref="T:System.InvalidOperationException">尚未執行驗證。</exception>
        <exception cref="T:System.IO.IOException">寫入作業失敗。</exception>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>造成任何緩衝資料都將寫入基礎裝置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會叫用<xref:System.IO.Stream.Flush%2A>在基礎資料流。  
  
   
  
## Examples  
 下列程式碼範例示範排清資料流。  
  
 [!code-cpp[NclNegoSyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#4)]
 [!code-csharp[NclNegoSyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task FlushAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.FlushAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ FlushAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImpersonationLevel">
      <MemberSignature Language="C#" Value="public virtual System.Security.Principal.TokenImpersonationLevel ImpersonationLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Principal.TokenImpersonationLevel ImpersonationLevel" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.ImpersonationLevel" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ImpersonationLevel As TokenImpersonationLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::Principal::TokenImpersonationLevel ImpersonationLevel { System::Security::Principal::TokenImpersonationLevel get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Principal.TokenImpersonationLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指示伺服器如何使用用戶端的認證。</summary>
        <value>其中一個 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您必須成功執行驗證之前呼叫這個方法。 透過呼叫其中一個要求驗證時，用戶端指定的模擬等級<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>或<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>方法。 如果您未指定驗證<xref:System.Security.Principal.TokenImpersonationLevel>，<xref:System.Security.Principal.TokenImpersonationLevel.Identification>用。  
  
   
  
## Examples  
 下列程式碼範例會示範如何顯示這個屬性的值。  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">驗證失敗或尚未執行驗證。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsAuthenticated">
      <MemberSignature Language="C#" Value="public override bool IsAuthenticated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAuthenticated" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsAuthenticated" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsAuthenticated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsAuthenticated { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.Boolean" /> 值，指示驗證是否成功。</summary>
        <value>
          如果驗證成功，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 用戶端驗證，藉由呼叫<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>或<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>方法。 伺服器驗證，藉由呼叫<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>或<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>方法。  
  
   
  
## Examples  
 下列程式碼範例會示範如何顯示這個屬性的值。  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEncrypted">
      <MemberSignature Language="C#" Value="public override bool IsEncrypted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEncrypted" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsEncrypted" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsEncrypted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsEncrypted { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.Boolean" /> 值，指示這個 <see cref="T:System.Net.Security.NegotiateStream" /> 是否使用資料加密。</summary>
        <value>
          如果在經由網路傳輸資料前對其進行加密，並在到達遠端端點時將其解密，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 加密可協助保護其資料。也就是說，它有助於確保，資料是在傳輸時它無法進行解譯第三方。  
  
   
  
## Examples  
 下列程式碼範例會示範如何顯示這個屬性的值。  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Security.ProtectionLevel" />
      </Docs>
    </Member>
    <Member MemberName="IsMutuallyAuthenticated">
      <MemberSignature Language="C#" Value="public override bool IsMutuallyAuthenticated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMutuallyAuthenticated" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsMutuallyAuthenticated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsMutuallyAuthenticated { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.Boolean" /> 值，指示伺服器和用戶端是否都已經過驗證。</summary>
        <value>
          如果已經驗證伺服器，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當用戶端想要提供認證以進行驗證的伺服器時，用戶端被指定相互驗證。 根據預設，用戶端會要求相互驗證。  
  
 交涉通訊協定會根據用戶端和伺服器所支援的安全性通訊協定選取 NTLM 或 Kerberos。 NTLM 不支援相互驗證。  
  
   
  
## Examples  
 下列程式碼範例會示範如何顯示這個屬性的值。  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsServer">
      <MemberSignature Language="C#" Value="public override bool IsServer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsServer" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsServer" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsServer As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsServer { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.Boolean" /> 值，指示這個 <see cref="T:System.Net.Security.NegotiateStream" /> 使用之連接的本機端是否以伺服器的身分驗證。</summary>
        <value>
          如果本機端點已成功以經過驗證之連接的伺服器端身分驗證，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果驗證失敗，或未執行，這個屬性會傳回`false`。  
  
 若要與伺服器進行驗證，呼叫<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>或<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>方法。  
  
   
  
## Examples  
 下列程式碼範例會示範如何顯示這個屬性的值。  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSigned">
      <MemberSignature Language="C#" Value="public override bool IsSigned { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSigned" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsSigned" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSigned As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSigned { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.Boolean" /> 值，指示使用此資料流傳送的資料是否簽章。</summary>
        <value>
          如果在傳輸資料前對其簽章，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 資料簽章協助保護資料的完整性也就是說，它可以協助判斷是否資料已遭竄改傳輸中的收件者。  
  
   
  
## Examples  
 下列程式碼範例會示範如何顯示這個屬性的值。  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public override long Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Length" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.Length" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Length As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Length { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得基礎資料流的長度。</summary>
        <value>
          <see cref="T:System.Int64" />，指定基礎資料流的長度。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性會傳回所叫用傳回的值<xref:System.IO.Stream.Length%2A>基礎資料流上的屬性。 如果基礎資料流不是可搜尋，這個屬性通常會擲回例外狀況。 基礎資料流的執行階段類型會決定執行階段類型，就會擲回的例外狀況。  
  
   
  
## Examples  
 下列程式碼範例會示範如何顯示這個屬性的值。  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">當基礎資料流為 <see cref="T:System.Net.Sockets.NetworkStream" /> 時，不支援取得這個屬性的值。</exception>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public override long Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Position" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.Position" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Position As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Position { long get(); void set(long value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定基礎資料流中目前的位置。</summary>
        <value>
          <see cref="T:System.Int64" />，指定基礎資料流中目前的位置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性會傳回所叫用傳回的值<xref:System.IO.Stream.Position%2A>基礎資料流上的屬性。 如果基礎資料流不是可搜尋，這個屬性通常會擲回例外狀況。 基礎資料流的執行階段類型會決定執行階段類型，就會擲回的例外狀況。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">不支援這個屬性的設定。  
  
 \-或-  
  
 當基礎資料流為 <see cref="T:System.Net.Sockets.NetworkStream" /> 時，不支援取得這個屬性的值。</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override int Read (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Read(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Read (buffer As Byte(), offset As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Read(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <see cref="T:System.Byte" /> 陣列，接收從資料流中讀取的位元組。</param>
        <param name="offset">
          <see cref="T:System.Int32" />，包含「緩衝區」<c></c>中以零起始的位置，用來開始儲存從此資料流中讀取的資料。</param>
        <param name="count">
          <see cref="T:System.Int32" />，包含從資料流中讀取的最大位元組數。</param>
        <summary>從這個資料流中讀取資料並將其儲存於指定的陣列中。</summary>
        <returns>
          <see cref="T:System.Int32" /> 值，指定從基礎資料流中讀取的位元組數。 如果不再有要讀取的資料，則傳回 0。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法會讀取最多`count`位元組從目前資料流，且將其儲存在`buffer`開始`offset`。  
  
 已成功驗證之前，無法呼叫此方法。 若要驗證，請呼叫其中一種<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>， <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>， <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>，或<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>方法。  
  
 若要以非同步方式執行此操作，使用<xref:System.Net.Security.NegotiateStream.BeginRead%2A>方法。  
  
   
  
## Examples  
 下列程式碼範例示範如何讀取<xref:System.Net.Security.NegotiateStream>。  
  
 [!code-cpp[NclNegoSyncServer#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncServer/CPP/NclNegoSyncServer.cpp#1)]
 [!code-csharp[NclNegoSyncServer#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncServer/CS/server.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">讀取作業失敗。</exception>
        <exception cref="T:System.InvalidOperationException">尚未執行驗證。</exception>
        <exception cref="T:System.NotSupportedException">
          <see cref="M:System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)" /> 作業已在執行中。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadTimeout">
      <MemberSignature Language="C#" Value="public override int ReadTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReadTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.ReadTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ReadTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int ReadTimeout { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定讀取作業封鎖等待資料的時間長度。</summary>
        <value>
          <see cref="T:System.Int32" />，指定讀取作業失敗前經過的時間長度。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性會傳回所叫用傳回的值<xref:System.IO.Stream.ReadTimeout%2A>基礎資料流上的屬性。 當您設定此屬性，<xref:System.IO.Stream.ReadTimeout%2A>基礎資料流上的值設定為指定的值。  
  
 如果基礎資料流<xref:System.Net.Sockets.NetworkStream>，<xref:System.Net.Security.NegotiateStream.ReadTimeout%2A>以毫秒為單位，並設定為<xref:System.Threading.Timeout.Infinite>依預設，讓讀取作業不會逾。  
  
   
  
## Examples  
 下列程式碼範例會示範如何顯示這個屬性的值。  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoteIdentity">
      <MemberSignature Language="C#" Value="public virtual System.Security.Principal.IIdentity RemoteIdentity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Principal.IIdentity RemoteIdentity" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.RemoteIdentity" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property RemoteIdentity As IIdentity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::Principal::IIdentity ^ RemoteIdentity { System::Security::Principal::IIdentity ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Principal.IIdentity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得共用這個經過驗證資料流之遠端群體識別的相關資訊。</summary>
        <value>
          <see cref="T:System.Security.Principal.IIdentity" /> 物件，描述遠端端點的識別。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當存取用戶端，這個屬性會傳回<xref:System.Security.Principal.GenericIdentity>包含服務主體名稱 (SPN) 的伺服器和使用的驗證通訊協定。 當存取伺服器，這個屬性會傳回<xref:System.Security.Principal.WindowsIdentity>描述用戶端。 如果<xref:System.Security.Principal.WindowsIdentity>是無法使用，用戶端資訊會傳回到伺服器<xref:System.Security.Principal.GenericIdentity>。  
  
   
  
## Examples  
 下列程式碼範例會示範如何顯示這個屬性的值。  
  
 [!code-cpp[NclNegoAsyncServer#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#2)]
 [!code-csharp[NclNegoAsyncServer#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">驗證失敗或尚未執行驗證。</exception>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public override long Seek (long offset, System.IO.SeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int64 Seek(int64 offset, valuetype System.IO.SeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Seek(System.Int64,System.IO.SeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Seek (offset As Long, origin As SeekOrigin) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override long Seek(long offset, System::IO::SeekOrigin origin);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="origin" Type="System.IO.SeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">這個值會被忽略。</param>
        <param name="origin">這個值會被忽略。</param>
        <summary>擲回 <see cref="T:System.NotSupportedException" />。</summary>
        <returns>永遠擲回 <see cref="T:System.NotSupportedException" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 請勿呼叫這個方法。 它繼承的但不是支援<xref:System.Net.Security.NegotiateStream>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <see cref="T:System.Net.Security.NegotiateStream" /> 上不支援搜尋。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetLength">
      <MemberSignature Language="C#" Value="public override void SetLength (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetLength(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.SetLength(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub SetLength (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void SetLength(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="T:System.Int64" /> 值，指定資料流的長度。</param>
        <summary>設定基礎資料流的長度。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Write(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Byte(), offset As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <see cref="T:System.Byte" /> 陣列，提供寫入至資料流的位元組。</param>
        <param name="offset">
          <see cref="T:System.Int32" /> ，包含「緩衝區」<c></c>中以零起始的位置，用來開始讀取將要寫入資料流的位元組。</param>
        <param name="count">
          <see cref="T:System.Int32" />，包含要從「緩衝區」<c></c>讀取的位元組數。</param>
        <summary>使用指定的緩衝區和位移，將指定數目的 <see cref="T:System.Byte" /> 寫入至基礎資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果已啟用加密、 簽署或加密和簽章，這個方法從緩衝區讀取資料、 加密、 簽章或加密並加以簽署，和傳輸使用基礎資料流。 如果沒有安全性服務，例如資料加密或簽章是使用中，這個方法會叫用<xref:System.IO.Stream.Write%2A>在基礎資料流。  
  
 這個方法會封鎖寫入作業完成時。 若要防止封鎖在作業完成時，使用<xref:System.Net.Security.NegotiateStream.Write%2A>方法。  
  
 已成功驗證之前，無法呼叫此方法。 若要驗證，請呼叫其中一種<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>， <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>， <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>，或<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>方法。  
  
 <xref:System.Net.Security.NegotiateStream>類別不支援多個同時進行寫入作業。 如果您嘗試啟動另一個寫入作業已經在執行相同的資料流的寫入作業<xref:System.NotSupportedException>擲回例外狀況。  
  
   
  
## Examples  
 下列程式碼範例示範如何寫入<xref:System.Net.Security.NegotiateStream>。  
  
 [!code-cpp[NclNegoSyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#4)]
 [!code-csharp[NclNegoSyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset is less than 0" />。  
  
 \-或-  
  
 <paramref name="offset" /> 大於 <paramref name="buffer" /> 的長度。  
  
 \-或-  
  
 <paramref name="offset" /> 加上計數大於 <paramref name="buffer" /> 的長度。</exception>
        <exception cref="T:System.IO.IOException">寫入作業失敗。  
  
 \-或-  
  
 使用了加密，但無法解密資料。</exception>
        <exception cref="T:System.NotSupportedException">已經有寫入作業正在進行中。</exception>
        <exception cref="T:System.ObjectDisposedException">此物件已關閉。</exception>
        <exception cref="T:System.InvalidOperationException">尚未執行驗證。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteTimeout">
      <MemberSignature Language="C#" Value="public override int WriteTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WriteTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.WriteTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property WriteTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int WriteTimeout { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定寫入作業封鎖等待資料的時間長度。</summary>
        <value>
          <see cref="T:System.Int32" />，指定寫入作業失敗前經過的時間長度。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性會傳回所叫用傳回的值<xref:System.IO.Stream.WriteTimeout%2A>基礎資料流上的屬性。 指定的值設定為設定作業，<xref:System.IO.Stream.WriteTimeout%2A>基礎資料流上的值。  
  
 如果基礎資料流<xref:System.Net.Sockets.NetworkStream>，<xref:System.Net.Security.NegotiateStream.WriteTimeout%2A>以毫秒為單位，並設定為<xref:System.Threading.Timeout.Infinite>依預設，寫入作業不會逾。  
  
   
  
## Examples  
 下列程式碼範例會示範如何顯示這個屬性的值。  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>