<Type Name="AntiXssEncoder" FullName="System.Web.Security.AntiXss.AntiXssEncoder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b91ddd2c5b3a0e85bd53329c243386ca09aa7389" /><Meta Name="ms.sourcegitcommit" Value="303c57f737f11b89445bb845737721fee7ab8051" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="02/26/2019" /><Meta Name="ms.locfileid" Value="56834038" /></Metadata><TypeSignature Language="C#" Value="public class AntiXssEncoder : System.Web.Util.HttpEncoder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AntiXssEncoder extends System.Web.Util.HttpEncoder" />
  <TypeSignature Language="DocId" Value="T:System.Web.Security.AntiXss.AntiXssEncoder" />
  <TypeSignature Language="VB.NET" Value="Public Class AntiXssEncoder&#xA;Inherits HttpEncoder" />
  <TypeSignature Language="C++ CLI" Value="public ref class AntiXssEncoder : System::Web::Util::HttpEncoder" />
  <TypeSignature Language="F#" Value="type AntiXssEncoder = class&#xA;    inherit HttpEncoder" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Util.HttpEncoder</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>將字串編碼，以用於 HTML、XML、CSS 及 URL 字串。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用<xref:System.Web.Security.AntiXss.AntiXssEncoder>類別來覆寫<xref:System.Web.Util.HttpEncoder>類別，用來編碼和解碼類別方法中的字串，例如預設<xref:System.Web.HttpUtility>， <xref:System.Web.HttpServerUtility>，和<xref:System.Net.HttpResponseHeader>。  
  
 在 <xref:System.Web.Security.AntiXss.AntiXssEncoder>類別，安全清單中找不到的所有字元都會都編碼所<xref:System.Web.Security.AntiXss.AntiXssEncoder.HtmlAttributeEncode%2A>和<xref:System.Web.Security.AntiXss.AntiXssEncoder.HtmlEncode%2A>方法。  
  
 若要取代<xref:System.Web.Util.HttpEncoder>類別<xref:System.Web.Security.AntiXss.AntiXssEncoder>類別中，使用登錄它`encoderType`httpRuntime 項目，在 Web.config 檔案中，如下列範例所示的屬性：  
  
```  
<httpRuntime encoderType="System.Web.Security.AntiXss.AntiXssEncoder" />  
```  
  
 如需不同的編碼方法的預設安全字元清單可以找到中的 < 備註 > <xref:System.Web.Security.AntiXss.AntiXssEncoder.HtmlAttributeEncode%2A>， <xref:System.Web.Security.AntiXss.AntiXssEncoder.HtmlEncode%2A>， <xref:System.Web.Security.AntiXss.AntiXssEncoder.XmlAttributeEncode%2A>，和<xref:System.Web.Security.AntiXss.AntiXssEncoder.XmlEncode%2A>方法。 使用也可以修改預設的安全清單<xref:System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe%2A>方法。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AntiXssEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AntiXssEncoder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.Security.AntiXss.AntiXssEncoder" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CssEncode">
      <MemberSignature Language="C#" Value="public static string CssEncode (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string CssEncode(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.CssEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CssEncode (input As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CssEncode(System::String ^ input);" />
      <MemberSignature Language="F#" Value="static member CssEncode : string -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.CssEncode input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">要編碼的字串。</param>
        <summary>將指定的字串編碼以用於階層式樣式表 (CSS) 中。</summary>
        <returns>編碼的字串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會將不安全的清單中的所有字元都編碼。  
  
> [!NOTE]
>  加上引號 ("") 括住產生的字串之前將它新增至階層式樣式表。  
  
 下表列出預設安全的字元。 所有都是從[Unicode C0 控制項和基本拉丁文](https://www.unicode.org/charts/PDF/U0000.pdf)字元範圍。
  
|字元|描述|  
|--------------------|-----------------|  
|A-Z|大寫的字母字元|  
|a-z|小寫字母的字元|  
|0-9|編號|  
  
 下表列出範例輸入，以及對應編碼的輸出。  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert\000028\000027XSS\000020Attack\000021\000027\000029\00003B`|  
|`user@contoso.com`|`user\000040contoso\00002Ecom`|  
|`Anti-Cross Site Scripting Namespace`|`Anti\00002DCross\000020Site\000020Scripting\000020Namespace`|  
  
 CSS 字元逸出序列所組成的反斜線字元 (\\) 後面最多六個十六進位數字，代表從 ISO 10646 標準的字元碼。 （會有效等同於 Unicode 標準 ISO 10646）。十六進位數字以外的任何字元是逸出序列的結尾。 如果遵循逸出序列的字元也是有效的十六進位數字，它必須逸出序列中包含六個位數，或使用空格字元來終止逸出序列。 比方說，`\000020`代表空間。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HtmlAttributeEncode">
      <MemberSignature Language="C#" Value="protected internal override void HtmlAttributeEncode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void HtmlAttributeEncode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub HtmlAttributeEncode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void HtmlAttributeEncode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="override this.HtmlAttributeEncode : string * System.IO.TextWriter -&gt; unit" Usage="antiXssEncoder.HtmlAttributeEncode (value, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">要編碼的字串。</param>
        <param name="output">要用來輸出字串的文字寫入器。</param>
        <summary>將指定的字串編碼並輸出，以用於 HTML 屬性中用。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會將不安全的清單中的所有字元都編碼。 字元都會編碼使用`&#DECIMAL;`標記法。  
  
> [!NOTE]
>  雙引號 ("") 或單一引號 (' ') 括住產生的字串之前將它新增至頁面。  
  
 下表列出預設安全的字元。 所有已從 Unicode [C0 控制項和基本拉丁文](https://www.unicode.org/charts/PDF/U0000.pdf)字元範圍，除非另有說明，在 [描述] 欄中。  
  
|字元|描述|  
|--------------------|-----------------|  
|A-Z|大寫英文字母字元|  
||a-z|小寫英文字母字元|  
|0-9|編號|  
|!|驚嘆號|  
|#|數字的符號，雜湊|  
|$|貨幣符號|  
|%|百分比符號|  
|( )|括號|  
|*|星號|  
|+|加號|  
|,|逗號|  
|-|連字號、 減號|  
|。|期間，點，完全停止|  
|/|斜線|  
|:|冒號|  
|;|分號|  
|=|等號|  
|?|問號|  
|@|商業 at 記號|  
|[ ]|方括號|  
|&#92;|反斜線|  
|^|插入號|  
|_|底線|  
|\`|抑音符號|  
|{ }|大括號、 大括號|  
|&#124;|垂直線|  
|~|波狀符號|  
|0x00A1 - 0x00AC|0x00A1 (161 十進位) 和從 Unicode 0x00AC (172 十進位) 之間的特殊字元[C1 控制項和拉丁文 1 補充](https://www.unicode.org/charts/PDF/U0080.pdf)字元範圍。|  
|0x00AE-0x00FF|0x00AE (174 十進位) 和從 Unicode 0x00FF (十進位 255) 之間的特殊字元[C1 控制項和拉丁文 1 補充](https://www.unicode.org/charts/PDF/U0080.pdf)字元範圍。|  
|0x0100 - 0x017F|0x0100 (256 十進位) 和 0x017F (383 十進位) 之間的字元。 (Unicode[拉丁文擴充-A](https://www.unicode.org/charts/PDF/U0100.pdf)字元範圍。)|
|0x0180 - 0x024F|0x0180 (384 十進位) 和 0x024F (小數點 591) 之間的字元。 (Unicode[拉丁文擴充-B](https://www.unicode.org/charts/PDF/U0180.pdf)字元範圍。)|  
|0x0250 - 0x02AF|0x0250 (十進位 592) 和 0x02AF (十進位 687) 之間的字元。 (Unicode[國際音標擴充](https://www.unicode.org/charts/PDF/U0250.pdf)字元範圍。)| 
|0x02B0 - 0x02FF|0x02B0 (688 十進位) 和 0x02FF (十進位 767) 之間的字元。 (Unicode[間隔修飾字元](https://www.unicode.org/charts/PDF/U02B0.pdf)字元範圍。)|
|0x0300 - 0x036F|0x0300 (768 十進位) 和 0x036F (十進位 879) 之間的字元。 (Unicode[組合變音符號標記](https://www.unicode.org/charts/PDF/U0300.pdf)字元範圍。)|  
  
 下表列出範例輸入，以及對應編碼的輸出。  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert(&#39;XSS&#32;Attack!&#39;);`|  
|`<script>alert('XSS Attack!');</script>`|`&lt;script&gt;alert(&#39;XSS Attack!&#39;);&lt;/script&gt;`|  
|`alert('XSSあAttack!');`|`alert(&#39;XSS&#12354;Attack!&#39;);`|  
|`user@contoso.com`|`user@contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`&quot;Anti-Cross&#32;Site&#32;Scripting&#32;Namespace&quot;`|  
  
 若要自訂安全清單，請呼叫<xref:System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe%2A>方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="HtmlEncode">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將指定的字串編碼以做為 HTML 標記中的文字。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="public static string HtmlEncode (string input, bool useNamedEntities);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string HtmlEncode(string input, bool useNamedEntities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.HtmlEncode(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HtmlEncode (input As String, useNamedEntities As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ HtmlEncode(System::String ^ input, bool useNamedEntities);" />
      <MemberSignature Language="F#" Value="static member HtmlEncode : string * bool -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.HtmlEncode (input, useNamedEntities)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="useNamedEntities" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="input">要編碼的字串。</param>
        <param name="useNamedEntities"><see langword="true" /> 表示使用 HTML 4.0 具名實體進行特定字元編碼，<see langword="false" /> 表示只使用 <c>&amp;#DECIMAL;</c> 標記法進行編碼。</param>
        <summary>將指定的字串編碼以做為 HTML 標記中的文字，並選擇性指定是否要使用 HTML 4.0 具名實體。</summary>
        <returns>編碼的字串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會將不安全的清單中的所有字元都編碼。 字元都會編碼使用`&#DECIMAL;`標記法。  
  
> [!NOTE]
>  雙引號 ("") 或單一引號 (' ') 括住產生的字串之前將它新增至頁面。  
  
 下表列出預設安全的字元。 所有字元都是從 Unicode [C0 控制項和基本拉丁文](https://www.unicode.org/charts/PDF/U0000.pdf)字元範圍，除非另有說明，在 [描述] 欄中。
  
|字元|描述|  
|--------------------|-----------------|  
|A-Z|大寫英文字母字元|  
|a-z|小寫英文字母字元|  
|0-9|編號|  
|（空格）|空格|  
|!|驚嘆號|  
|#|數字的符號，雜湊|  
|$|貨幣符號|  
|%|百分比符號|  
|( )|括號|  
|*|星號|  
|+|加號|  
|,|逗號|  
|-|連字號、 減號|  
|。|期間，點，完全停止|  
|/|斜線|  
|:|冒號|  
|;|分號|  
|=|等號|  
|?|問號|  
|@|在商業|  
|[ ]|方括號|  
|&#92;|反斜線|  
|^|插入號|  
|_|底線|  
|\`|抑音符號|  
|{ }|大括號、 大括號|  
|&#124;|垂直線|  
|~|波狀符號|  
|0x00A1 - 0x00AC|0x00A1 (161 十進位) 和從 Unicode 0x00AC (172 十進位) 之間的特殊字元[C1 控制項和拉丁文 1 補充](https://www.unicode.org/charts/PDF/U0080.pdf)字元範圍。 在這個範圍內的字元都會編碼時`useNamedEntities`是`true`。|  
|0x00AE-0x00FF|0x00AE (174 十進位) 和從 Unicode 0x00FF (十進位 255) 之間的特殊字元[C1 控制項和拉丁文 1 補充](https://www.unicode.org/charts/PDF/U0080.pdf)字元範圍。 在這個範圍內的字元都會編碼時`useNamedEntities`是`true`。|  
|0x0100 - 0x017F|0x0100 (256 十進位) 和 0x017F (383 十進位) 之間的字元。 (Unicode[拉丁文擴充-A](https://www.unicode.org/charts/PDF/U0100.pdf)字元範圍。)|
|0x0180 - 0x024F|0x0180 (384 十進位) 和 0x024F (小數點 591) 之間的字元。 (Unicode[拉丁文擴充-B](https://www.unicode.org/charts/PDF/U0180.pdf)字元範圍。)|  
|0x0250 - 0x02AF|0x0250 (十進位 592) 和 0x02AF (十進位 687) 之間的字元。 (Unicode[國際音標擴充](https://www.unicode.org/charts/PDF/U0250.pdf)字元範圍。)|  
|0x02B0 - 0x02FF|0x02B0 (688 十進位) 和 0x02FF (十進位 767) 之間的字元。 (Unicode[間隔修飾字元](https://www.unicode.org/charts/PDF/U02B0.pdf)字元範圍。)|
|0x0300 - 0x036F|0x0300 (768 十進位) 和 0x036F (十進位 879) 之間的字元。 (Unicode[組合變音符號標記](https://www.unicode.org/charts/PDF/U0300.pdf)字元範圍。)| 
  
 下表列出範例輸入，以及對應編碼的輸出。  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert(&#39;XSS&#32;Attack!&#39;);`|  
|`<script>alert('XSS Attack!');</script>`|`&lt;script&gt;alert(&#39;XSS Attack!&#39;);&lt;/script&gt;`|  
|`alert('XSSあAttack!');`|`alert(&#39;XSS&#12354;Attack!&#39;);`|  
|`user@contoso.com`|`user@contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`&quot;Anti-Cross&#32;Site&#32;Scripting&#32;Namespace&quot;`|  
  
 若要自訂安全清單，請呼叫<xref:System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe%2A>方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="protected internal override void HtmlEncode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void HtmlEncode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.HtmlEncode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub HtmlEncode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void HtmlEncode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="override this.HtmlEncode : string * System.IO.TextWriter -&gt; unit" Usage="antiXssEncoder.HtmlEncode (value, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">要編碼的字串。</param>
        <param name="output">要用來輸出字串的文字寫入器。</param>
        <summary>將指定的字串編碼以做為 HTML 標記中的文字，使用指定的文字寫入器來輸出字串。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會將不安全的清單中的所有字元都編碼。 字元都會編碼使用`&#DECIMAL;`標記法。  
  
> [!NOTE]
>  雙引號 ("") 或單一引號 (' ') 括住產生的字串之前將它新增至頁面。  
  
 下表列出預設安全的字元。 所有字元都是從 Unicode [C0 控制項和基本拉丁文](https://www.unicode.org/charts/PDF/U0000.pdf)字元範圍，除非另有說明，在 [描述] 欄中。
  
|字元|描述|  
|--------------------|-----------------|  
|A-Z|大寫英文字母字元|  
|a-z|小寫英文字母字元|  
|0-9|編號|  
|（空格）|空格|  
|!|驚嘆號|  
|#|數字的符號，雜湊|  
|$|貨幣符號|  
|%|百分比符號|  
|( )|括號|  
|*|星號|  
|+|加號|  
|,|逗號|  
|-|連字號、 減號|  
|。|期間，點，完全停止|  
|/|斜線|  
|:|冒號|  
|;|分號|  
|=|等號|  
|?|問號|  
|@|在商業|  
|[ ]|方括號|  
|&#92;|反斜線|  
|^|插入號|  
|_|底線|  
|\`|抑音符號|  
|{ }|大括號、 大括號|  
|&#124;|垂直線|  
|~|波狀符號|  
|0x00A1 - 0x00AC|0x00A1 (161 十進位) 和從 Unicode 0x00AC (172 十進位) 之間的特殊字元[C1 控制項和拉丁文 1 補充](https://www.unicode.org/charts/PDF/U0080.pdf)字元範圍。 在這個範圍內的字元都會編碼時`useNamedEntities`是`true`。|  
|0x00AE-0x00FF|0x00AE (174 十進位) 和從 Unicode 0x00FF (十進位 255) 之間的特殊字元[C1 控制項和拉丁文 1 補充](https://www.unicode.org/charts/PDF/U0080.pdf)字元範圍。 在這個範圍內的字元都會編碼時`useNamedEntities`是`true`。|  
|0x0100 - 0x017F|0x0100 (256 十進位) 和 0x017F (383 十進位) 之間的字元。 (Unicode[拉丁文擴充-A](https://www.unicode.org/charts/PDF/U0100.pdf)字元範圍。)|
|0x0180 - 0x024F|0x0180 (384 十進位) 和 0x024F (小數點 591) 之間的字元。 (Unicode[拉丁文擴充-B](https://www.unicode.org/charts/PDF/U0180.pdf)字元範圍。)| 
|0x0250 - 0x02AF|0x0250 (十進位 592) 和 0x02AF (十進位 687) 之間的字元。 (Unicode[國際音標擴充](https://www.unicode.org/charts/PDF/U0250.pdf)字元範圍。)| 
|0x02B0 - 0x02FF|0x02B0 (688 十進位) 和 0x02FF (十進位 767) 之間的字元。 (Unicode[間隔修飾字元](https://www.unicode.org/charts/PDF/U02B0.pdf)字元範圍。)|
|0x0300 - 0x036F|0x0300 (768 十進位) 和 0x036F (十進位 879) 之間的字元。 (Unicode[組合變音符號標記](https://www.unicode.org/charts/PDF/U0300.pdf)字元範圍。)| 
  
 下表列出範例輸入，以及對應編碼的輸出。  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert(&#39;XSS&#32;Attack!&#39;);`|  
|`<script>alert('XSS Attack!');</script>`|`&lt;script&gt;alert(&#39;XSS Attack!&#39;);&lt;/script&gt;`|  
|`alert('XSSあAttack!');`|`alert(&#39;XSS&#12354;Attack!&#39;);`|  
|`user@contoso.com`|`user@contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`&quot;Anti-Cross&#32;Site&#32;Scripting&#32;Namespace&quot;`|  
  
 若要自訂安全清單，請呼叫<xref:System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe%2A>方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="HtmlFormUrlEncode">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將指定的字串編碼以用來提交 MIME 類型為 "application/x-www-form-urlencoded" 的表單。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HtmlFormUrlEncode">
      <MemberSignature Language="C#" Value="public static string HtmlFormUrlEncode (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string HtmlFormUrlEncode(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.HtmlFormUrlEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HtmlFormUrlEncode (input As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ HtmlFormUrlEncode(System::String ^ input);" />
      <MemberSignature Language="F#" Value="static member HtmlFormUrlEncode : string -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.HtmlFormUrlEncode input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">要編碼的字串。</param>
        <summary>將指定的字串編碼以用來提交 MIME 類型為 "application/x-www-form-urlencoded" 的表單。</summary>
        <returns>編碼的字串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會將不安全的清單中的所有字元都編碼。 字元都會編碼使用`%SINGLE_BYTE_HEX`標記法。 
  
> [!NOTE]
>  雙引號 ("") 或單一引號 (' ') 括住產生的字串之前將它新增至頁面。   

下表列出預設安全的字元。 所有字元都是從 Unicode [C0 控制項和基本拉丁文](https://www.unicode.org/charts/PDF/U0000.pdf)字元範圍。 
    
|Unicode 程式碼圖表|字元|描述|  
|------------------------|--------------------|-----------------|  
|A-Z|大寫的字母字元|  
|a-z|小寫字母的字元|  
|0-9|編號|  
|-|連字號、 減號|  
|。|期間，點，完全停止|  
|_|底線|  
|~|波狀符號|  
  
 下表列出範例輸入，以及對應編碼的輸出。  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert%28%27XSS+Attack%21%27%29%3b`|  
|`<script>alert('XSS Attack!');</script>`|`%3cscript%3ealert%28%27XSS+Attack%21%27%29%3b%3c%2fscript%3e`|  
|`alert('XSSあAttack!');`|`alert%28%27XSS%e3%81%82Attack%21%27%29%3b`|  
|`user@contoso.com`|`user@contoso.com`|  
|`Anti-Cross Site Scripting Namespace`|`Anti-Cross+Site+Scripting+Namespace`|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HtmlFormUrlEncode">
      <MemberSignature Language="C#" Value="public static string HtmlFormUrlEncode (string input, int codePage);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string HtmlFormUrlEncode(string input, int32 codePage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.HtmlFormUrlEncode(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HtmlFormUrlEncode (input As String, codePage As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ HtmlFormUrlEncode(System::String ^ input, int codePage);" />
      <MemberSignature Language="F#" Value="static member HtmlFormUrlEncode : string * int -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.HtmlFormUrlEncode (input, codePage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="codePage" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">要編碼的字串。</param>
        <param name="codePage">要用於編碼 <paramref name="input" /> 字串的字碼頁。</param>
        <summary>使用指定的字碼頁，將指定的字串編碼以用來提交 MIME 類型為 "application/x-www-form-urlencoded" 的表單。</summary>
        <returns>編碼的字串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會將不安全的清單中的所有字元都編碼。 字元都會編碼使用`%SINGLE_BYTE_HEX`標記法。  
  
> [!NOTE]
>  雙引號 ("") 或單一引號 (' ') 括住產生的字串之前將它新增至頁面。  
  
 下表列出預設安全的字元。 所有字元都是從 Unicode [C0 控制項和基本拉丁文](https://www.unicode.org/charts/PDF/U0000.pdf)字元範圍。 
  
|字元|描述|  
|--------------------|-----------------|  
|A-Z|大寫的字母字元|  
|a-z|小寫字母的字元|  
|0-9|編號|  
|-|連字號、 減號|  
|。|期間，點，完全停止|  
|_|底線|  
|~|波狀符號|  
  
 下表列出範例輸入，以及對應編碼的輸出。  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert%28%27XSS+Attack%21%27%29%3b`|  
|`<script>alert('XSS Attack!');</script>`|`%3cscript%3ealert%28%27XSS+Attack%21%27%29%3b%3c%2fscript%3e`|  
|`alert('XSSあAttack!');`|`alert%28%27XSS%e3%81%82Attack%21%27%29%3b`|  
|`user@contoso.com`|`user%40contoso.com`|  
|`Anti-Cross Site Scripting Namespace`|`Anti-Cross+Site+Scripting+Namespace`|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HtmlFormUrlEncode">
      <MemberSignature Language="C#" Value="public static string HtmlFormUrlEncode (string input, System.Text.Encoding inputEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string HtmlFormUrlEncode(string input, class System.Text.Encoding inputEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.HtmlFormUrlEncode(System.String,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HtmlFormUrlEncode (input As String, inputEncoding As Encoding) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ HtmlFormUrlEncode(System::String ^ input, System::Text::Encoding ^ inputEncoding);" />
      <MemberSignature Language="F#" Value="static member HtmlFormUrlEncode : string * System.Text.Encoding -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.HtmlFormUrlEncode (input, inputEncoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="inputEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="input">要編碼的字串。</param>
        <param name="inputEncoding">輸入編碼類型。</param>
        <summary>使用指定的字元編碼類型，將指定的字串編碼以用於 MIME 類型為 "application/x-www-form-urlencoded" 的表單提交。</summary>
        <returns>編碼的字串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會將不安全的清單中的所有字元都編碼。 字元都會編碼使用`%SINGLE_BYTE_HEX`標記法。  
  
> [!NOTE]
>  雙引號 ("") 或單一引號 (' ') 括住產生的字串之前將它新增至頁面。  
  
 下表列出預設安全的字元。 所有字元都是從 Unicode [C0 控制項和基本拉丁文](https://www.unicode.org/charts/PDF/U0000.pdf)字元範圍。 
  
|字元|描述|  
|--------------------|-----------------|  
|A-Z|大寫的字母字元|  
|a-z|小寫字母的字元|  
|0-9|編號|  
|-|連字號、 減號|  
|。|期間，點，完全停止|  
|_|底線|  
|~|波狀符號|  
  
 下表列出範例輸入，以及對應編碼的輸出。  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert%28%27XSS+Attack%21%27%29%3b`|  
|`<script>alert('XSS Attack!');</script>`|`%3cscript%3ealert%28%27XSS+Attack%21%27%29%3b%3c%2fscript%3e`|  
|`alert('XSSあAttack!');`|`alert%28%27XSS%e3%81%82Attack%21%27%29%3b`|  
|`user@contoso.com`|`user%40contoso.com`|  
|`Anti-Cross Site Scripting Namespace`|`Anti-Cross+Site+Scripting+Namespace`|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MarkAsSafe">
      <MemberSignature Language="C#" Value="public static void MarkAsSafe (System.Web.Security.AntiXss.LowerCodeCharts lowerCodeCharts, System.Web.Security.AntiXss.LowerMidCodeCharts lowerMidCodeCharts, System.Web.Security.AntiXss.MidCodeCharts midCodeCharts, System.Web.Security.AntiXss.UpperMidCodeCharts upperMidCodeCharts, System.Web.Security.AntiXss.UpperCodeCharts upperCodeCharts);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MarkAsSafe(valuetype System.Web.Security.AntiXss.LowerCodeCharts lowerCodeCharts, valuetype System.Web.Security.AntiXss.LowerMidCodeCharts lowerMidCodeCharts, valuetype System.Web.Security.AntiXss.MidCodeCharts midCodeCharts, valuetype System.Web.Security.AntiXss.UpperMidCodeCharts upperMidCodeCharts, valuetype System.Web.Security.AntiXss.UpperCodeCharts upperCodeCharts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe(System.Web.Security.AntiXss.LowerCodeCharts,System.Web.Security.AntiXss.LowerMidCodeCharts,System.Web.Security.AntiXss.MidCodeCharts,System.Web.Security.AntiXss.UpperMidCodeCharts,System.Web.Security.AntiXss.UpperCodeCharts)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MarkAsSafe(System::Web::Security::AntiXss::LowerCodeCharts lowerCodeCharts, System::Web::Security::AntiXss::LowerMidCodeCharts lowerMidCodeCharts, System::Web::Security::AntiXss::MidCodeCharts midCodeCharts, System::Web::Security::AntiXss::UpperMidCodeCharts upperMidCodeCharts, System::Web::Security::AntiXss::UpperCodeCharts upperCodeCharts);" />
      <MemberSignature Language="F#" Value="static member MarkAsSafe : System.Web.Security.AntiXss.LowerCodeCharts * System.Web.Security.AntiXss.LowerMidCodeCharts * System.Web.Security.AntiXss.MidCodeCharts * System.Web.Security.AntiXss.UpperMidCodeCharts * System.Web.Security.AntiXss.UpperCodeCharts -&gt; unit" Usage="System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe (lowerCodeCharts, lowerMidCodeCharts, midCodeCharts, upperMidCodeCharts, upperCodeCharts)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lowerCodeCharts" Type="System.Web.Security.AntiXss.LowerCodeCharts" />
        <Parameter Name="lowerMidCodeCharts" Type="System.Web.Security.AntiXss.LowerMidCodeCharts" />
        <Parameter Name="midCodeCharts" Type="System.Web.Security.AntiXss.MidCodeCharts" />
        <Parameter Name="upperMidCodeCharts" Type="System.Web.Security.AntiXss.UpperMidCodeCharts" />
        <Parameter Name="upperCodeCharts" Type="System.Web.Security.AntiXss.UpperCodeCharts" />
      </Parameters>
      <Docs>
        <param name="lowerCodeCharts">標示為安全的下代碼表的組合。</param>
        <param name="lowerMidCodeCharts">標示為安全的中下代碼表的組合。</param>
        <param name="midCodeCharts">標示為安全的中代碼表的組合。</param>
        <param name="upperMidCodeCharts">標示為安全的中上代碼表的組合。</param>
        <param name="upperCodeCharts">標示為安全的上代碼表的組合。</param>
        <summary>將來自指定之 Unicode 代碼表的字元標記為安全。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 安全清單會影響所有 HTML XML、 CSS 和 URL 編碼的方法。  
  
 但有些例外狀況，Unicode 字碼圖表未直接對應到書寫語言。 若要新增支援特定語言或語言組通常需要將多個程式碼圖表標示為安全。  
  
 若要新增日文語言的支援，同時允許英文繼續，請使用下列語法：  
  
```  
  
MarkAsSafe(  
            LowerCodeCharts.Default,  
            LowerMidCodeCharts.HangulJamo,  
            MidCodeCharts.None,  
            UpperMidCodeCharts.CjkRadicalsSupplement |   
            UpperMidCodeCharts.CjkSymbolsAndPunctuation |   
            UpperMidCodeCharts.Hiragana |   
            UpperMidCodeCharts.Katakana |   
            UpperMidCodeCharts.KatakanaPhoneticExtensions |   
            UpperMidCodeCharts.LatinExtendedD |  
            UpperMidCodeCharts.CjkUnifiedIdeographs,  
            UpperCodeCharts.None);  
```  
  
> [!NOTE]
>  <xref:System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe%2A>必須呼叫方法`Application_Start`Global.asax 檔案中的方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在 Global.asax 檔中，會在 <see langword="Application_Start" /> 方法外部呼叫 <see cref="M:System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe(System.Web.Security.AntiXss.LowerCodeCharts,System.Web.Security.AntiXss.LowerMidCodeCharts,System.Web.Security.AntiXss.MidCodeCharts,System.Web.Security.AntiXss.UpperMidCodeCharts,System.Web.Security.AntiXss.UpperCodeCharts)" />方法。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="UrlEncode">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將字串和位元組陣列編碼以用於 URL 中。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UrlEncode">
      <MemberSignature Language="C#" Value="public static string UrlEncode (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string UrlEncode(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.UrlEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UrlEncode (input As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UrlEncode(System::String ^ input);" />
      <MemberSignature Language="F#" Value="static member UrlEncode : string -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.UrlEncode input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">要編碼的字串。</param>
        <summary>將指定的字串編碼以用於 URL 中。</summary>
        <returns>編碼的字串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會將不安全的清單中的所有字元都編碼。 字元都會編碼使用`%SINGLE_BYTE_HEX`標記法。  
  
 下表列出預設安全的字元。 所有字元都是從 Unicode [C0 控制項和基本拉丁文](https://www.unicode.org/charts/PDF/U0000.pdf)字元範圍。 
    
  
|字元|描述|  
|--------------------|-----------------|  
|A-Z|大寫的字母字元|  
|a-z|小寫字母的字元|  
|0-9|編號|  
|-|連字號、 減號|  
|。|期間，點，完全停止|  
|_|底線|  
|~|波狀符號|  
  
 下表列出範例輸入，以及對應編碼的輸出。  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert%28%27XSS%20Attack%21%27%29%3b`|  
|`<script>alert('XSS Attack!');</script>`|`%3cscript%3ealert%28%27XSS%20Attack%21%27%29%3b%3c%2fscript%3e`|  
|`alert('XSSあAttack!');`|`alert%28%27XSS%e3%81%82Attack%21%27%29%3b`|  
|`user@contoso.com`|`user%40contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`%22Anti-Cross%20Site%20Scripting%20Namespace%22`|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlEncode">
      <MemberSignature Language="C#" Value="public static string UrlEncode (string input, int codePage);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string UrlEncode(string input, int32 codePage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.UrlEncode(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UrlEncode (input As String, codePage As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UrlEncode(System::String ^ input, int codePage);" />
      <MemberSignature Language="F#" Value="static member UrlEncode : string * int -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.UrlEncode (input, codePage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="codePage" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">要編碼的字串。</param>
        <param name="codePage">要用於編碼 <paramref name="input" /> 字串的字碼頁。</param>
        <summary>使用指定的字碼頁，將指定的字串編碼以用於 URL 中。</summary>
        <returns>編碼的字串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會將不安全的清單中的所有字元都編碼。 字元都會編碼使用`%SINGLE_BYTE_HEX`標記法。  
  
 下表列出預設安全的字元。 所有字元都是從 Unicode [C0 控制項和基本拉丁文](https://www.unicode.org/charts/PDF/U0000.pdf)字元範圍。 
    
  
|Unicode 程式碼圖表|字元|描述|  
|------------------------|--------------------|-----------------|  
|A-Z|大寫的字母字元|  
|a-z|小寫字母的字元|  
|0-9|編號|  
|-|連字號、 減號|  
|。|期間，點，完全停止|  
|_|底線|  
|~|波狀符號|  
  
 下表列出範例輸入，以及對應編碼的輸出。  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert%28%27XSS%20Attack%21%27%29%3b`|  
|`<script>alert('XSS Attack!');</script>`|`%3cscript%3ealert%28%27XSS%20Attack%21%27%29%3b%3c%2fscript%3e`|  
|`alert('XSSあAttack!');`|`alert%28%27XSS%e3%81%82Attack%21%27%29%3b`|  
|`user@contoso.com`|`user%40contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`%22Anti-Cross%20Site%20Scripting%20Namespace%22`|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlEncode">
      <MemberSignature Language="C#" Value="public static string UrlEncode (string input, System.Text.Encoding inputEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string UrlEncode(string input, class System.Text.Encoding inputEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.UrlEncode(System.String,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UrlEncode (input As String, inputEncoding As Encoding) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UrlEncode(System::String ^ input, System::Text::Encoding ^ inputEncoding);" />
      <MemberSignature Language="F#" Value="static member UrlEncode : string * System.Text.Encoding -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.UrlEncode (input, inputEncoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="inputEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="input">要編碼的字串。</param>
        <param name="inputEncoding">輸入編碼類型。</param>
        <summary>使用指定的字元編碼類型，將指定的字串編碼以用於 URL 中。</summary>
        <returns>編碼的字串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會將不安全的清單中的所有字元都編碼。 字元都會編碼使用`%SINGLE_BYTE_HEX`標記法。  
  
 下表列出預設安全的字元。 所有字元都是從 Unicode [C0 控制項和基本拉丁文](https://www.unicode.org/charts/PDF/U0000.pdf)字元範圍。 
    
  
|字元|描述|  
|--------------------|-----------------|  
|A-Z|大寫的字母字元|  
|a-z|小寫字母的字元|  
|0-9|編號|  
|-|連字號、 減號|  
|。|期間，點，完全停止|  
|_|底線|  
|~|波狀符號|  
  
 下表列出範例輸入，以及對應編碼的輸出。  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert%28%27XSS%20Attack%21%27%29%3b`|  
|`<script>alert('XSS Attack!');</script>`|`%3cscript%3ealert%28%27XSS%20Attack%21%27%29%3b%3c%2fscript%3e`|  
|`alert('XSSあAttack!');`|`alert%28%27XSS%e3%81%82Attack%21%27%29%3b`|  
|`user@contoso.com`|`user%40contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`%22Anti-Cross%20Site%20Scripting%20Namespace%22`|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlEncode">
      <MemberSignature Language="C#" Value="protected internal override byte[] UrlEncode (byte[] bytes, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance unsigned int8[] UrlEncode(unsigned int8[] bytes, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.UrlEncode(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function UrlEncode (bytes As Byte(), offset As Integer, count As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override cli::array &lt;System::Byte&gt; ^ UrlEncode(cli::array &lt;System::Byte&gt; ^ bytes, int offset, int count);" />
      <MemberSignature Language="F#" Value="override this.UrlEncode : byte[] * int * int -&gt; byte[]" Usage="antiXssEncoder.UrlEncode (bytes, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">要編碼的位元組陣列。</param>
        <param name="offset">要編碼的第一個位元組索引。</param>
        <param name="count">要編碼的位元組數。</param>
        <summary>從位元組陣列中指定的位移開始將指定數目的位元組編碼，以用於 URL 中</summary>
        <returns>編碼的位元組陣列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會將不安全的清單中的所有字元都編碼。 字元都會編碼使用`%SINGLE_BYTE_HEX`標記法。  
  
 下表列出預設安全的字元。 所有字元都是從 Unicode [C0 控制項和基本拉丁文](https://www.unicode.org/charts/PDF/U0000.pdf)字元範圍。 
   
  
|字元|描述|  
|--------------------|-----------------|  
|A-Z|大寫的字母字元|  
|a-z|小寫字母的字元|  
|0-9|編號|  
|-|連字號、 減號|  
|。|期間，點，完全停止|  
|_|底線|  
|~|波狀符號|  
  
 下表列出範例輸入，以及對應編碼的輸出。  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert%28%27XSS%20Attack%21%27%29%3b`|  
|`<script>alert('XSS Attack!');</script>`|`%3cscript%3ealert%28%27XSS%20Attack%21%27%29%3b%3c%2fscript%3e`|  
|`alert('XSSあAttack!');`|`alert%28%27XSS%e3%81%82Attack%21%27%29%3b`|  
|`user@contoso.com`|`user%40contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`%22Anti-Cross%20Site%20Scripting%20Namespace%22`|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlPathEncode">
      <MemberSignature Language="C#" Value="protected internal override string UrlPathEncode (string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance string UrlPathEncode(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.UrlPathEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function UrlPathEncode (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::String ^ UrlPathEncode(System::String ^ value);" />
      <MemberSignature Language="F#" Value="override this.UrlPathEncode : string -&gt; string" Usage="antiXssEncoder.UrlPathEncode value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">要編碼的字串。</param>
        <summary>將路徑字串編碼以用於 URL 中。</summary>
        <returns>包含編碼路徑的 URL。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
這個方法會將不安全的清單中的所有字元都編碼。 字元都會編碼使用`%SINGLE_BYTE_HEX`標記法。  

下表列出預設安全的字元。 所有字元都是從 Unicode [C0 控制項和基本拉丁文](https://www.unicode.org/charts/PDF/U0000.pdf)字元範圍。 
    
|字元|描述|  
|--------------------|-----------------|  
|A-Z|大寫的字母字元|  
|a-z|小寫字母的字元|  
|0-9|編號|  
|#|數字的符號，雜湊|  
|%|百分比符號|  
|( )|括號|  
|-|連字號、 減號|  
|。|期間，點，完全停止|  
|/|斜線|  
|&#92;|反斜線|  
|_|底線|  
|{ }|大括號、 大括號|  
|&#124;|垂直線|  
|~|波狀符號|  
  
 下表列出範例輸入，以及對應編碼的輸出。  
  
|||  
|-|-|  
|`http://www.contoso.com:8080/<en-us>/[page].htm?v={value1}#x=[amount]`|`http://www.contoso.com:8080/%3cen-us%3e/%5bpage%5d.htm?v={value1}#x=[amount]`|  
|`alert('XSS Attack!');`|`alert(%27XSS%20Attack%21%27)%3b`|  
|`<script>alert('XSS Attack!');</script>`|`%3cscript%3ealert(%27XSS%20Attack%21%27)%3b%3c/script%3e`|  
|`alert('XSSあAttack!');`|`alert(%27XSS%e3%81%82Attack%21%27)%3b`|  
|`user@contoso.com`|`user%40contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`%22Anti-Cross%20Site%20Scripting%20Namespace%22`|  
  
 這個方法會將編碼 URL 的路徑。 這個方法不會編碼配置 (例如`http:`， `ftp:`，或`file:`)，將授權單位 (比方說，`www.northwind.com`或`www.contoso.com:8080`)，查詢或片段 (比方說， `?v=s978dfs9#x=103`)。 如果沒有任何配置或字串中的授權單位，為相對路徑，會假設字串是，而且路徑會編碼。 在下列 URL 中，子字串`/default.htm`編碼：  
  
 `http://www.contoso.com:8080/default.htm?v=s978dfs9#x=103`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlAttributeEncode">
      <MemberSignature Language="C#" Value="public static string XmlAttributeEncode (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string XmlAttributeEncode(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.XmlAttributeEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlAttributeEncode (input As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ XmlAttributeEncode(System::String ^ input);" />
      <MemberSignature Language="F#" Value="static member XmlAttributeEncode : string -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.XmlAttributeEncode input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">要編碼的字串。</param>
        <summary>將指定的字串編碼以用於 XML 屬性中。</summary>
        <returns>編碼的字串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會將不安全的清單中的所有字元都編碼。 字元都會編碼使用`&#DECIMAL;`標記法。  
  
> [!NOTE]
>  雙引號 ("") 或單一引號 (' ') 括住產生的字串之前將它新增至頁面。  
  
 下表列出預設安全的字元。 所有字元都是從 Unicode [C0 控制項和基本拉丁文](https://www.unicode.org/charts/PDF/U0000.pdf)字元範圍，除非另有說明，在 [描述] 欄中。  
   
  
|Unicode 程式碼圖表|字元|描述|  
|------------------------|--------------------|-----------------|  
|A-Z|大寫英文字母字元|  
|a-z|小寫英文字母字元|  
|0-9|編號|  
|!|驚嘆號|  
|#|數字的符號，雜湊|  
|$|貨幣符號|  
|%|百分比符號|  
|( )|括號|  
|*|星號|  
|+|加號|  
|,|逗號|  
|-|連字號、 減號|  
|。|期間，點，完全停止|  
|/|斜線|  
|:|冒號|  
|;|分號|  
|=|等號|  
|?|問號|  
|@|商業 at 記號|  
|[ ]|方括號|  
|&#92;|反斜線|  
|^|插入號|  
|_|底線|  
|\`|抑音符號|  
|{ }|大括號、 大括號|  
|&#124;|垂直線|  
|~|波狀符號|  
|0x00A1 - 0x00AC|0x00A1 (161 十進位) 和從 Unicode 0x00AC (172 十進位) 之間的特殊字元[C1 控制項和拉丁文 1 補充](https://www.unicode.org/charts/PDF/U0080.pdf)字元範圍。|  
|0x00AE (174 十進位) 和從 Unicode 0x00FF (十進位 255) 之間的特殊字元[C1 控制項和拉丁文 1 補充](https://www.unicode.org/charts/PDF/U0080.pdf)字元範圍。|  
|0x0100 - 0x017F|0x0100 (256 十進位) 和 0x017F (383 十進位) 之間的字元。 (Unicode[拉丁文擴充-A](https://www.unicode.org/charts/PDF/U0100.pdf)字元範圍。)| 
|0x0180 - 0x024F|0x0180 (384 十進位) 和 0x024F (小數點 591) 之間的字元。 (Unicode[拉丁文擴充-B](https://www.unicode.org/charts/PDF/U0180.pdf)字元範圍。)| 
|0x0250 - 0x02AF|0x0250 (十進位 592) 和 0x02AF (十進位 687) 之間的字元。 (Unicode[國際音標擴充](https://www.unicode.org/charts/PDF/U0250.pdf)字元範圍。)| 
|0x02B0 - 0x02FF|0x02B0 (688 十進位) 和 0x02FF (十進位 767) 之間的字元。 (Unicode[間隔修飾字元](https://www.unicode.org/charts/PDF/U02B0.pdf)字元範圍。)|
|0x0300 - 0x036F|0x0300 (768 十進位) 和 0x036F (十進位 879) 之間的字元。 (Unicode[組合變音符號標記](https://www.unicode.org/charts/PDF/U0300.pdf)字元範圍。)|  
  
 下表列出範例輸入，以及對應編碼的輸出。  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert(&apos;XSS&#32;Attack!&apos;);`|  
|`<script>alert('XSS Attack!');</script>`|`&lt;script&gt;alert(&apos;XSS&#32;Attack!&apos;);&lt;/script&gt;`|  
|`alert('XSSあAttack!');`|`alert(&apos;XSS&#12354;Attack!&apos;);`|  
|`user@contoso.com`|`user@contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`&quot;Anti-Cross&#32;Site&#32;Scripting&#32;Namespace&quot;`|  
  
 若要自訂安全清單，請呼叫<xref:System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe%2A>方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlEncode">
      <MemberSignature Language="C#" Value="public static string XmlEncode (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string XmlEncode(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.XmlEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlEncode (input As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ XmlEncode(System::String ^ input);" />
      <MemberSignature Language="F#" Value="static member XmlEncode : string -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.XmlEncode input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">要編碼的字串。</param>
        <summary>將指定的字串編碼以用於 XML 屬性中。</summary>
        <returns>編碼的字串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會將不安全的清單中的所有字元都編碼。 字元都會編碼使用`&#DECIMAL;`標記法。  
  
> [!NOTE]
>  雙引號 ("") 或單一引號 (' ') 括住產生的字串之前將它新增至頁面。  
  
 下表列出預設安全的字元。 所有字元都是從 Unicode [C0 控制項和基本拉丁文](https://www.unicode.org/charts/PDF/U0000.pdf)字元範圍以外時記下 [描述] 欄中。   
  
|字元|描述|  
|--------------------|-----------------|  
|A-Z|大寫英文字母字元|  
|a-z|小寫英文字母字元|  
|0-9|編號|  
|（空格）|空格|  
|!|驚嘆號|  
|#|數字的符號，雜湊|  
|$|貨幣符號|  
|%|百分比符號|  
|( )|括號|  
|*|星號|  
|+|加號|  
|,|逗號|  
|-|連字號、 減號|  
|。|期限|  
|/|斜線|  
|:|冒號|  
|;|分號|  
|=|等號|  
|?|問號|  
|@|在商業|  
|[ ]|方括號|  
|&#92;|反斜線|  
|^|插入號|  
|_|底線|  
|\`|抑音符號|  
|{ }|大括號、 大括號|  
|&#124;|垂直線|  
|~|波狀符號|  
|0x00A1 - 0x00AC|0x00A1 (161 十進位) 和從 Unicode 0x00AC (172 十進位) 之間的特殊字元[C1 控制項和拉丁文 1 補充](https://www.unicode.org/charts/PDF/U0080.pdf)字元範圍。 在這個範圍內的字元都會編碼時`useNamedEntities`是`true`。|  
|0x00AE-0x00FF|0x00AE (174 十進位) 和從 Unicode 0x00FF (十進位 255) 之間的特殊字元[C1 控制項和拉丁文 1 補充](https://www.unicode.org/charts/PDF/U0080.pdf)字元範圍。 在這個範圍內的字元都會編碼時`useNamedEntities`是`true`。|  
|0x0100 - 0x017F|0x0100 (256 十進位) 和 0x017F (383 十進位) 之間的字元。 (Unicode[拉丁文擴充-A](https://www.unicode.org/charts/PDF/U0100.pdf)字元範圍。)| 
|0x0180 - 0x024F|0x0180 (384 十進位) 和 0x024F (小數點 591) 之間的字元。 (Unicode[拉丁文擴充-B](https://www.unicode.org/charts/PDF/U0180.pdf)字元範圍。)|
|0x0250 - 0x02AF|0x0250 (十進位 592) 和 0x02AF (十進位 687) 之間的字元。 (Unicode[國際音標擴充](https://www.unicode.org/charts/PDF/U0250.pdf)字元範圍。)| 
|0x02B0 - 0x02FF|0x02B0 (688 十進位) 和 0x02FF (十進位 767) 之間的字元。 (Unicode[間隔修飾字元](https://www.unicode.org/charts/PDF/U02B0.pdf)字元範圍。)|
|0x0300 - 0x036F|0x0300 (768 十進位) 和 0x036F (十進位 879) 之間的字元。 (Unicode[組合變音符號標記](https://www.unicode.org/charts/PDF/U0300.pdf)字元範圍。)| 
  
 下表列出範例輸入，以及對應編碼的輸出。  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert(&#39;XSS&#32;Attack!&#39;);`|  
|`<script>alert('XSS Attack!');</script>`|`&lt;script&gt;alert(&apos;XSS Attack!&apos;);&lt;/script&gt;`|  
|`alert('XSSあAttack!');`|`alert(&apos;XSS&#12354;Attack!&apos;);`|  
|`user@contoso.com`|`user@contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`&quot;Anti-Cross&#32;Site&#32;Scripting&#32;Namespace&quot;`|  
  
 若要自訂安全清單，請呼叫<xref:System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe%2A>方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>