<Type Name="Monitor" FullName="System.Threading.Monitor">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="04c73d8d6d8c0205db70235fd1bb85ce866c6212" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36606685" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Monitor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Monitor extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Monitor" />
  <TypeSignature Language="VB.NET" Value="Public Class Monitor" />
  <TypeSignature Language="C++ CLI" Value="public ref class Monitor abstract sealed" />
  <TypeSignature Language="F#" Value="type Monitor = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="d0e85-101">提供一套機制，同步處理物件的存取。</span>
      <span class="sxs-lookup">
        <span data-stu-id="d0e85-101">Provides a mechanism that synchronizes access to objects.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0e85-102"><xref:System.Threading.Monitor>類別可讓您取得和釋放特定物件上的鎖定，藉由呼叫來同步存取程式的程式碼區域<xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType>， <xref:System.Threading.Monitor.TryEnter%2A?displayProperty=nameWithType>，和<xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="d0e85-102">The <xref:System.Threading.Monitor> class allows you to synchronize access to a region of code by taking and releasing a lock on a particular object by calling the <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType>, <xref:System.Threading.Monitor.TryEnter%2A?displayProperty=nameWithType>, and <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> methods.</span></span> <span data-ttu-id="d0e85-103">物件鎖定提供的功能限制的存取權的程式碼，通常稱為重要區段的區塊。</span><span class="sxs-lookup"><span data-stu-id="d0e85-103">Object locks provide the ability to restrict access to a block of code, commonly called a critical section.</span></span> <span data-ttu-id="d0e85-104">執行緒擁有之物件的鎖定，而沒有其他執行緒可以取得的鎖定。</span><span class="sxs-lookup"><span data-stu-id="d0e85-104">While a thread owns the lock for an object, no other thread can acquire that lock.</span></span> <span data-ttu-id="d0e85-105">您也可以使用<xref:System.Threading.Monitor>類別以確保沒有其他執行緒可以存取一段應用程式的程式碼正在執行的鎖定擁有者，除非另一個執行緒正在執行使用不同的鎖定的物件的程式碼。</span><span class="sxs-lookup"><span data-stu-id="d0e85-105">You can also use the <xref:System.Threading.Monitor> class to ensure that no other thread is allowed to access a section of application code being executed by the lock owner, unless the other thread is executing the code using a different locked object.</span></span>  
  
 <span data-ttu-id="d0e85-106">本文內容：</span><span class="sxs-lookup"><span data-stu-id="d0e85-106">In this article:</span></span>  
  
 <span data-ttu-id="d0e85-107">[Monitor 類別： 概觀](#Overview) </span><span class="sxs-lookup"><span data-stu-id="d0e85-107">[The Monitor class: An overview](#Overview) </span></span>  
 <span data-ttu-id="d0e85-108">[鎖定物件](#Lock) </span><span class="sxs-lookup"><span data-stu-id="d0e85-108">[The lock object](#Lock) </span></span>  
 <span data-ttu-id="d0e85-109">[關鍵區段](#CriticalSection) </span><span class="sxs-lookup"><span data-stu-id="d0e85-109">[The critical section](#CriticalSection) </span></span>  
 <span data-ttu-id="d0e85-110">[Pulse、 PulseAll，並等候](#Pulse) </span><span class="sxs-lookup"><span data-stu-id="d0e85-110">[Pulse, PulseAll, and Wait](#Pulse) </span></span>  
 [<span data-ttu-id="d0e85-111">監視與等候控制代碼</span><span class="sxs-lookup"><span data-stu-id="d0e85-111">Monitors and wait handles</span></span>](#WaitHandles)  
  
<a name="Overview"></a>   
## <a name="the-monitor-class-an-overview"></a><span data-ttu-id="d0e85-112">Monitor 類別： 概觀</span><span class="sxs-lookup"><span data-stu-id="d0e85-112">The Monitor class: An overview</span></span>  
 <span data-ttu-id="d0e85-113"><xref:System.Threading.Monitor> 具有下列功能：</span><span class="sxs-lookup"><span data-stu-id="d0e85-113"><xref:System.Threading.Monitor> has the following features:</span></span>  
  
-   <span data-ttu-id="d0e85-114">它是隨選物件相關聯。</span><span class="sxs-lookup"><span data-stu-id="d0e85-114">It is associated with an object on demand.</span></span>  
  
-   <span data-ttu-id="d0e85-115">它是未繫結，這表示它可以直接從任何的內容中呼叫。</span><span class="sxs-lookup"><span data-stu-id="d0e85-115">It is unbound, which means it can be called directly from any context.</span></span>  
  
-   <span data-ttu-id="d0e85-116">執行個體<xref:System.Threading.Monitor>無法建立類別; 的方法<xref:System.Threading.Monitor>類別都是靜態的。</span><span class="sxs-lookup"><span data-stu-id="d0e85-116">An instance of the <xref:System.Threading.Monitor> class cannot be created; the methods of the <xref:System.Threading.Monitor> class are all static.</span></span> <span data-ttu-id="d0e85-117">同步處理控制存取的物件傳遞給每個方法的重要區段。</span><span class="sxs-lookup"><span data-stu-id="d0e85-117">Each method is passed the synchronized object that controls access to the critical section.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d0e85-118">使用<xref:System.Threading.Monitor>字串以外的鎖定物件的類別 (也就是參考型別以外<xref:System.String>)，不實值類型。</span><span class="sxs-lookup"><span data-stu-id="d0e85-118">Use the <xref:System.Threading.Monitor> class to lock objects other than strings (that is, reference types other than <xref:System.String>), not value types.</span></span> <span data-ttu-id="d0e85-119">如需詳細資訊，請參閱的多載<xref:System.Threading.Monitor.Enter%2A>方法和[之鎖定物件](#Lock)本文中稍後的章節。</span><span class="sxs-lookup"><span data-stu-id="d0e85-119">For details, see the overloads of the <xref:System.Threading.Monitor.Enter%2A> method and [The lock object](#Lock) section later in this article.</span></span>  
  
 <span data-ttu-id="d0e85-120">下表描述可以存取已同步處理的物件的執行緒所採取的動作：</span><span class="sxs-lookup"><span data-stu-id="d0e85-120">The following table describes the actions that can be taken by threads that access synchronized objects:</span></span>  
  
|<span data-ttu-id="d0e85-121">動作</span><span class="sxs-lookup"><span data-stu-id="d0e85-121">Action</span></span>|<span data-ttu-id="d0e85-122">描述</span><span class="sxs-lookup"><span data-stu-id="d0e85-122">Description</span></span>|  
|------------|-----------------|  
|<span data-ttu-id="d0e85-123"><xref:System.Threading.Monitor.Enter%2A>, <xref:System.Threading.Monitor.TryEnter%2A></span><span class="sxs-lookup"><span data-stu-id="d0e85-123"><xref:System.Threading.Monitor.Enter%2A>, <xref:System.Threading.Monitor.TryEnter%2A></span></span>|<span data-ttu-id="d0e85-124">取得物件的鎖定。</span><span class="sxs-lookup"><span data-stu-id="d0e85-124">Acquires a lock for an object.</span></span> <span data-ttu-id="d0e85-125">此動作也會標示重要區段的開頭。</span><span class="sxs-lookup"><span data-stu-id="d0e85-125">This action also marks the beginning of a critical section.</span></span> <span data-ttu-id="d0e85-126">沒有其他執行緒可以進入重要區段，除非它使用不同的鎖定的物件的重要區段中執行的指示。</span><span class="sxs-lookup"><span data-stu-id="d0e85-126">No other thread can enter the critical section unless it is executing the instructions in the critical section using a different locked object.</span></span>|  
|<xref:System.Threading.Monitor.Wait%2A>|<span data-ttu-id="d0e85-127">若要允許其他鎖定和存取物件的執行緒釋放物件上的鎖定。</span><span class="sxs-lookup"><span data-stu-id="d0e85-127">Releases the lock on an object in order to permit other threads to lock and access the object.</span></span> <span data-ttu-id="d0e85-128">呼叫執行緒等候另一個執行緒存取的物件。</span><span class="sxs-lookup"><span data-stu-id="d0e85-128">The calling thread waits while another thread accesses the object.</span></span> <span data-ttu-id="d0e85-129">Pulse 信號用來通知物件狀態變更的相關的等候中執行緒。</span><span class="sxs-lookup"><span data-stu-id="d0e85-129">Pulse signals are used to notify waiting threads about changes to an object's state.</span></span>|  
|<span data-ttu-id="d0e85-130"><xref:System.Threading.Monitor.Pulse%2A> （信號）， <xref:System.Threading.Monitor.PulseAll%2A></span><span class="sxs-lookup"><span data-stu-id="d0e85-130"><xref:System.Threading.Monitor.Pulse%2A> (signal), <xref:System.Threading.Monitor.PulseAll%2A></span></span>|<span data-ttu-id="d0e85-131">將訊號傳送至一個或多個等候中執行緒。</span><span class="sxs-lookup"><span data-stu-id="d0e85-131">Sends a signal to one or more waiting threads.</span></span> <span data-ttu-id="d0e85-132">信號通知等候的鎖定物件的狀態已變更，執行緒和鎖定擁有者已準備好解除鎖定。</span><span class="sxs-lookup"><span data-stu-id="d0e85-132">The signal notifies a waiting thread that the state of the locked object has changed, and the owner of the lock is ready to release the lock.</span></span> <span data-ttu-id="d0e85-133">等候執行緒被放在物件的就緒佇列，讓它最後可能會收到物件的鎖定。</span><span class="sxs-lookup"><span data-stu-id="d0e85-133">The waiting thread is placed in the object's ready queue so that it might eventually receive the lock for the object.</span></span> <span data-ttu-id="d0e85-134">一旦執行緒擁有鎖定，它可以檢查以查看是否已到達所需的狀態物件的新狀態。</span><span class="sxs-lookup"><span data-stu-id="d0e85-134">Once the thread has the lock, it can check the new state of the object to see if the required state has been reached.</span></span>|  
|<xref:System.Threading.Monitor.Exit%2A>|<span data-ttu-id="d0e85-135">釋放物件上的鎖定。</span><span class="sxs-lookup"><span data-stu-id="d0e85-135">Releases the lock on an object.</span></span> <span data-ttu-id="d0e85-136">此動作也會標示鎖定物件所保護的重要區段的結尾。</span><span class="sxs-lookup"><span data-stu-id="d0e85-136">This action also marks the end of a critical section protected by the locked object.</span></span>|  
  
 <span data-ttu-id="d0e85-137">開頭為[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]，有兩組多載<xref:System.Threading.Monitor.Enter%2A>和<xref:System.Threading.Monitor.TryEnter%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="d0e85-137">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], there are two sets of overloads for the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.TryEnter%2A> methods.</span></span> <span data-ttu-id="d0e85-138">一組多載具有`ref`（C# 中） 或`ByRef`（在 Visual Basic)<xref:System.Boolean>參數，自動設定為`true`如果已取得鎖定，即使取得鎖定時，會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="d0e85-138">One set of overloads has a `ref` (in C#) or `ByRef` (in Visual Basic) <xref:System.Boolean> parameter that is atomically set to `true` if the lock is acquired, even if an exception is thrown when acquiring the lock.</span></span> <span data-ttu-id="d0e85-139">如果很重要，鎖定在所有情況下，即使鎖定所保護的資源可能未處於一致的狀態，請使用這些多載。</span><span class="sxs-lookup"><span data-stu-id="d0e85-139">Use these overloads if it is critical to release the lock in all cases, even when the resources the lock is protecting might not be in a consistent state.</span></span>  
  
<a name="Lock"></a>   
## <a name="the-lock-object"></a><span data-ttu-id="d0e85-140">鎖定物件</span><span class="sxs-lookup"><span data-stu-id="d0e85-140">The lock object</span></span>  
 <span data-ttu-id="d0e85-141">Monitor 類別組成`static`（C# 中） 或`Shared`（在 Visual Basic) 控制存取關鍵區段的物件運作的方法。</span><span class="sxs-lookup"><span data-stu-id="d0e85-141">The Monitor class consists of `static` (in C#) or  `Shared` (in Visual Basic) methods that operate on an object that controls access to the critical section.</span></span>  <span data-ttu-id="d0e85-142">下列資訊會保留每個同步處理的物件：</span><span class="sxs-lookup"><span data-stu-id="d0e85-142">The following information is maintained for each synchronized object:</span></span>  
  
-   <span data-ttu-id="d0e85-143">參考目前擁有鎖定的執行緒。</span><span class="sxs-lookup"><span data-stu-id="d0e85-143">A reference to the thread that currently holds the lock.</span></span>  
  
-   <span data-ttu-id="d0e85-144">參考就緒佇列，其中包含要取得的鎖定的執行緒。</span><span class="sxs-lookup"><span data-stu-id="d0e85-144">A reference to a ready queue, which contains the threads that are ready to obtain the lock.</span></span>  
  
-   <span data-ttu-id="d0e85-145">等候佇列，其中包含的執行緒正在等候的鎖定物件的狀態變更通知所參考。</span><span class="sxs-lookup"><span data-stu-id="d0e85-145">A reference to a waiting queue, which contains the threads that are waiting for notification of a change in the state of the locked object.</span></span>  
  
 <span data-ttu-id="d0e85-146"><xref:System.Threading.Monitor> 會鎖定物件 (也就是參考類型)，而不會鎖定值類型。</span><span class="sxs-lookup"><span data-stu-id="d0e85-146"><xref:System.Threading.Monitor> locks objects (that is, reference types), not value types.</span></span> <span data-ttu-id="d0e85-147">雖然您可以傳遞值類型到 <xref:System.Threading.Monitor.Enter%2A> 和 <xref:System.Threading.Monitor.Exit%2A>，它會個別針對每個呼叫進行 boxed 處理。</span><span class="sxs-lookup"><span data-stu-id="d0e85-147">While you can pass a value type to <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A>, it is boxed separately for each call.</span></span> <span data-ttu-id="d0e85-148">因為每個呼叫會建立不同的物件，<xref:System.Threading.Monitor.Enter%2A> 絕不會封鎖，且它應該要保護的程式碼不會真地同步處理。</span><span class="sxs-lookup"><span data-stu-id="d0e85-148">Since each call creates a separate object, <xref:System.Threading.Monitor.Enter%2A> never blocks, and the code it is supposedly protecting is not really synchronized.</span></span> <span data-ttu-id="d0e85-149">此外，傳遞給 <xref:System.Threading.Monitor.Exit%2A> 的物件不同於傳遞給 <xref:System.Threading.Monitor.Enter%2A> 的物件，因此 <xref:System.Threading.Monitor> 會擲回 <xref:System.Threading.SynchronizationLockException> 例外狀況，以及訊息「從未同步處理的程式碼區塊呼叫物件同步化方法」。</span><span class="sxs-lookup"><span data-stu-id="d0e85-149">In addition, the object passed to <xref:System.Threading.Monitor.Exit%2A> is different from the object passed to <xref:System.Threading.Monitor.Enter%2A>, so <xref:System.Threading.Monitor> throws <xref:System.Threading.SynchronizationLockException> exception with the message "Object synchronization method was called from an unsynchronized block of code."</span></span>  
  
 <span data-ttu-id="d0e85-150">下列範例說明此問題。</span><span class="sxs-lookup"><span data-stu-id="d0e85-150">The following example illustrates this problem.</span></span> <span data-ttu-id="d0e85-151">它會啟動 10 個工作，其中每個工作睡眠 250 毫秒。</span><span class="sxs-lookup"><span data-stu-id="d0e85-151">It launches ten tasks, each of which just sleeps for 250 milliseconds.</span></span> <span data-ttu-id="d0e85-152">每一項工作接著會更新計數器變數 `nTasks`，這是要計算實際啟動並執行的工作數目。</span><span class="sxs-lookup"><span data-stu-id="d0e85-152">Each task then updates a counter variable, `nTasks`, which is intended to count the number of tasks that actually launched and executed.</span></span> <span data-ttu-id="d0e85-153">由於 `nTasks` 是可以同時由多個工作更新的全域變數，因此使用監視器來防止多個工作同時修改。</span><span class="sxs-lookup"><span data-stu-id="d0e85-153">Because `nTasks` is a global variable that can be updated by multiple tasks simultaneously, a monitor is used to protect it from simultaneous modification by multiple tasks.</span></span> <span data-ttu-id="d0e85-154">不過，如範例的輸出所示，每項工作都擲回 <xref:System.Threading.SynchronizationLockException> 例外狀況。</span><span class="sxs-lookup"><span data-stu-id="d0e85-154">However, as the output from the example shows, each of the tasks throws a <xref:System.Threading.SynchronizationLockException> exception.</span></span>  
  
 [!code-csharp[Conceptual.Monitors#2](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.monitors/cs/badlock1.cs#2)]
 [!code-vb[Conceptual.Monitors#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.monitors/vb/badlock1.vb#2)]  
  
 <span data-ttu-id="d0e85-155">每個工作都擲回 <xref:System.Threading.SynchronizationLockException> 例外狀況是因為 `nTasks` 變數在呼叫每個工作中的 <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> 方法之前會進行 boxed 處理。</span><span class="sxs-lookup"><span data-stu-id="d0e85-155">Each task throws a <xref:System.Threading.SynchronizationLockException> exception because the `nTasks` variable is boxed before the call to the <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> method in each task.</span></span> <span data-ttu-id="d0e85-156">換句話說，每個方法呼叫都被傳遞個別的變數，且與其他變數無關。</span><span class="sxs-lookup"><span data-stu-id="d0e85-156">In other words, each method call is passed a separate variable that is independent of the others.</span></span> <span data-ttu-id="d0e85-157">`nTasks` 在呼叫 <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> 方法時會再次進行 boxed 處理。</span><span class="sxs-lookup"><span data-stu-id="d0e85-157">`nTasks` is boxed again in the call to the <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="d0e85-158">同樣地，這會建立十個彼此獨立的新 boxed 變數 `nTasks`，以及在呼叫 <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> 方法時建立的十個 boxed 變數。</span><span class="sxs-lookup"><span data-stu-id="d0e85-158">Once again, this creates ten new boxed variables, which are independent of each other, `nTasks`, and the ten boxed variables created in the call to the <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="d0e85-159">接著便擲回例外狀況，因為我們的程式碼嘗試對於先前未鎖定的新建變數釋放鎖定。</span><span class="sxs-lookup"><span data-stu-id="d0e85-159">The exception is thrown, then, because our code is attempting to release a lock on a newly created variable that was not previously locked.</span></span>  
  
 <span data-ttu-id="d0e85-160">雖然您可以先將值類型變數進行 box 處理，然後再呼叫 <xref:System.Threading.Monitor.Enter%2A> 和 <xref:System.Threading.Monitor.Exit%2A>，如下列範例所示，並將相同的 boxed 物件傳遞給這兩種方法，但這麼做並沒有任何益處。</span><span class="sxs-lookup"><span data-stu-id="d0e85-160">Although you can box a value type variable before calling <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A>, as shown in the following example, and pass the same boxed object to both methods, there is no advantage to doing this.</span></span> <span data-ttu-id="d0e85-161">變更 unboxed 變數不會反映在 boxed 複本，且沒有任何方法可變更 boxed 複本的值。</span><span class="sxs-lookup"><span data-stu-id="d0e85-161">Changes to the unboxed variable are not reflected in the boxed copy, and there is no way to change the value of the boxed copy.</span></span>  
  
 [!code-csharp[Conceptual.Monitors#3](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.monitors/cs/badbox1.cs#3)]
 [!code-vb[Conceptual.Monitors#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.monitors/vb/badbox1.vb#3)]  
  
 <span data-ttu-id="d0e85-162">選取要同步處理的物件，您應該鎖定只有在私用或內部的物件上。</span><span class="sxs-lookup"><span data-stu-id="d0e85-162">When selecting an object on which to synchronize, you should lock only on private or internal objects.</span></span> <span data-ttu-id="d0e85-163">外部物件上鎖定可能會導致死結，因為不相關的程式碼可能會選擇相同的物件，來針對不同目的鎖定。</span><span class="sxs-lookup"><span data-stu-id="d0e85-163">Locking on external objects might result in deadlocks, because unrelated code could choose the same objects to lock on for different purposes.</span></span>  
  
 <span data-ttu-id="d0e85-164">請注意，您可以同步處理多個應用程式定義域中的物件上如果用於鎖定的物件衍生自<xref:System.MarshalByRefObject>。</span><span class="sxs-lookup"><span data-stu-id="d0e85-164">Note that you can synchronize on an object in multiple application domains if the object used for the lock derives from <xref:System.MarshalByRefObject>.</span></span>  
  
<a name="CriticalSection"></a>   
## <a name="the-critical-section"></a><span data-ttu-id="d0e85-165">關鍵區段</span><span class="sxs-lookup"><span data-stu-id="d0e85-165">The critical section</span></span>  
 <span data-ttu-id="d0e85-166">使用<xref:System.Threading.Monitor.Enter%2A>和<xref:System.Threading.Monitor.Exit%2A>標記開頭和結尾關鍵區段的方法。</span><span class="sxs-lookup"><span data-stu-id="d0e85-166">Use the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> methods to mark the beginning and end of a critical section.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d0e85-167">所提供的功能<xref:System.Threading.Monitor.Enter%2A>和<xref:System.Threading.Monitor.Exit%2A>方法等同於所提供的[鎖定](~/docs/csharp/language-reference/keywords/lock-statement.md)C# 中的陳述式和[SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) ，除了在 Visual Basic 中的陳述式語言建構包裝<xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29?displayProperty=nameWithType>方法多載而<xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType>方法中的`try`...`finally`</span><span class="sxs-lookup"><span data-stu-id="d0e85-167">The functionality provided by the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> methods is identical to that provided by the [lock](~/docs/csharp/language-reference/keywords/lock-statement.md) statement in C# and the [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) statement in Visual Basic, except that the language constructs wrap the <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29?displayProperty=nameWithType> method overload and the <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> method in a `try`…`finally`</span></span> <span data-ttu-id="d0e85-168">區塊，以確保釋放監視器。</span><span class="sxs-lookup"><span data-stu-id="d0e85-168">block to ensure that the monitor is released.</span></span>  
  
 <span data-ttu-id="d0e85-169">如果重要區段是一組連續的指示，然後取得的鎖定<xref:System.Threading.Monitor.Enter%2A>方法保證只有單一執行緒可以執行括住的程式碼，與鎖定的物件。</span><span class="sxs-lookup"><span data-stu-id="d0e85-169">If the critical section is a set of contiguous instructions, then the lock acquired by the <xref:System.Threading.Monitor.Enter%2A> method guarantees that only a single thread can execute the enclosed code with the locked object.</span></span> <span data-ttu-id="d0e85-170">在此情況下，我們建議您將在該程式碼`try`封鎖，並將呼叫<xref:System.Threading.Monitor.Exit%2A>方法中的`finally`區塊。</span><span class="sxs-lookup"><span data-stu-id="d0e85-170">In this case, we recommend that you place that code in a `try` block and place the call to the <xref:System.Threading.Monitor.Exit%2A> method in a `finally` block.</span></span> <span data-ttu-id="d0e85-171">這可確保即使發生例外狀況，就會釋放鎖定。</span><span class="sxs-lookup"><span data-stu-id="d0e85-171">This ensures that the lock is released even if an exception occurs.</span></span> <span data-ttu-id="d0e85-172">下列程式碼片段將示範這個模式。</span><span class="sxs-lookup"><span data-stu-id="d0e85-172">The following code fragment illustrates this pattern.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.class/cs/Pattern2.cs#2)]
 [!code-vb[System.Threading.Monitor.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.class/vb/Pattern2.vb#2)]  
  
 <span data-ttu-id="d0e85-173">這項工具通常用來同步處理存取靜態或類別的執行個體方法。</span><span class="sxs-lookup"><span data-stu-id="d0e85-173">This facility is typically used to synchronize access to a static or instance method of a class.</span></span>  
  
 <span data-ttu-id="d0e85-174">如果關鍵區段跨越整個方法，可以達成的鎖定機能放置<xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType>於方法，並指定<xref:System.Runtime.CompilerServices.MethodImplOptions.Synchronized>的建構函式中的值<xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="d0e85-174">If a critical section spans an entire method, the locking facility can be achieved by placing the <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType> on the method, and specifying the <xref:System.Runtime.CompilerServices.MethodImplOptions.Synchronized> value in the constructor of <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType>.</span></span> <span data-ttu-id="d0e85-175">當您使用這個屬性，<xref:System.Threading.Monitor.Enter%2A>和<xref:System.Threading.Monitor.Exit%2A>方法呼叫不需要。</span><span class="sxs-lookup"><span data-stu-id="d0e85-175">When you use this attribute, the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> method calls are not needed.</span></span> <span data-ttu-id="d0e85-176">下列程式碼片段將說明這種模式：</span><span class="sxs-lookup"><span data-stu-id="d0e85-176">The following code fragment illustrates this pattern:</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.class/cs/Pattern2.cs#3)]
 [!code-vb[System.Threading.Monitor.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.class/vb/Pattern2.vb#3)]  
  
 <span data-ttu-id="d0e85-177">請注意，此屬性會造成目前的執行緒持有的鎖定，直到該方法傳回。如果可以更快地解除鎖定，使用<xref:System.Threading.Monitor>類別，C#[鎖定](~/docs/csharp/language-reference/keywords/lock-statement.md)陳述式或 Visual Basic [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md)方法，而不是屬性內的陳述式。</span><span class="sxs-lookup"><span data-stu-id="d0e85-177">Note that the attribute causes the current thread to hold the lock until the method returns; if the lock can be released sooner, use the <xref:System.Threading.Monitor> class, the C# [lock](~/docs/csharp/language-reference/keywords/lock-statement.md) statement, or the Visual Basic [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) statement inside of the method instead of the attribute.</span></span>  
  
 <span data-ttu-id="d0e85-178">雖然您可以針對<xref:System.Threading.Monitor.Enter%2A>和<xref:System.Threading.Monitor.Exit%2A>鎖定和釋出跨成員或類別界限或兩者的指定的物件的陳述式，不建議此做法。</span><span class="sxs-lookup"><span data-stu-id="d0e85-178">While it is possible for the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> statements that lock and release a given object to cross member or class boundaries or both, this practice is not recommended.</span></span>  
  
<a name="Pulse"></a>   
## <a name="pulse-pulseall-and-wait"></a><span data-ttu-id="d0e85-179">Pulse、 PulseAll，並等候</span><span class="sxs-lookup"><span data-stu-id="d0e85-179">Pulse, PulseAll, and Wait</span></span>  
 <span data-ttu-id="d0e85-180">一旦執行緒擁有鎖定，而且已進入鎖定來保護重要區段，它可以呼叫<xref:System.Threading.Monitor.Wait%2A?displayProperty=nameWithType>， <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType>，和<xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="d0e85-180">Once a thread owns the lock and has entered the critical section that the lock protects, it can call the <xref:System.Threading.Monitor.Wait%2A?displayProperty=nameWithType>, <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType>, and <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> methods.</span></span>  
  
 <span data-ttu-id="d0e85-181"><xref:System.Threading.Monitor.Wait%2A> 如果它會保留、 允許等候執行緒或執行緒取得鎖定，進入重要區段，並等候通知呼叫釋放鎖定<xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType>或<xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="d0e85-181"><xref:System.Threading.Monitor.Wait%2A> releases the lock if it is held, allows a waiting thread or threads to obtain the lock and enter the critical section,   and waits to be notified by a call to the <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType> or <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="d0e85-182">當 <xref:System.Threading.Monitor.Wait%2A> 收到通知時，它會傳回並再一次取得鎖定。</span><span class="sxs-lookup"><span data-stu-id="d0e85-182">When <xref:System.Threading.Monitor.Wait%2A> is notified, it returns and obtains the lock again.</span></span>  
  
 <span data-ttu-id="d0e85-183"><xref:System.Threading.Monitor.Pulse%2A> 和 <xref:System.Threading.Monitor.PulseAll%2A> 都會傳送訊號，以便等候佇列中的下一個執行緒能繼續。</span><span class="sxs-lookup"><span data-stu-id="d0e85-183">Both <xref:System.Threading.Monitor.Pulse%2A> and <xref:System.Threading.Monitor.PulseAll%2A> signal for the next thread in the wait queue to proceed.</span></span>  
  
<a name="WaitHandles"></a>   
## <a name="monitors-and-wait-handles"></a><span data-ttu-id="d0e85-184">監視與等候控制代碼</span><span class="sxs-lookup"><span data-stu-id="d0e85-184">Monitors and wait handles</span></span>  
 <span data-ttu-id="d0e85-185">請務必注意使用區別<xref:System.Threading.Monitor>類別和<xref:System.Threading.WaitHandle>物件。</span><span class="sxs-lookup"><span data-stu-id="d0e85-185">It is important to note the distinction between the use of the <xref:System.Threading.Monitor> class and <xref:System.Threading.WaitHandle> objects.</span></span>  
  
-   <span data-ttu-id="d0e85-186"><xref:System.Threading.Monitor>類別是純粹 managed、 完全可攜，而且可能在作業系統資源需求方面更有效率。</span><span class="sxs-lookup"><span data-stu-id="d0e85-186">The <xref:System.Threading.Monitor> class is purely managed, fully portable, and might be more efficient in terms of operating-system resource requirements.</span></span>  
  
-   <span data-ttu-id="d0e85-187"><xref:System.Threading.WaitHandle> 物件代表作業系統可等候物件、適用於 managed 和 unmanaged 程式碼之間的同步處理，並且公開一些進階的作業系統功能，例如一次等候許多物件的能力。</span><span class="sxs-lookup"><span data-stu-id="d0e85-187"><xref:System.Threading.WaitHandle> objects represent operating-system waitable objects, are useful for synchronizing between managed and unmanaged code, and expose some advanced operating-system features like the ability to wait on many objects at once.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d0e85-188">下列範例會使用<xref:System.Threading.Monitor>類別以同步存取單一執行個體所表示的隨機號碼產生器<xref:System.Random>類別。</span><span class="sxs-lookup"><span data-stu-id="d0e85-188">The following example uses the <xref:System.Threading.Monitor> class to synchronize access to a single instance of a random number generator represented by the <xref:System.Random> class.</span></span> <span data-ttu-id="d0e85-189">此範例會建立十個工作，其中每個執行緒集區執行緒非同步執行。</span><span class="sxs-lookup"><span data-stu-id="d0e85-189">The example creates ten tasks, each of which executes asynchronously on a thread pool thread.</span></span> <span data-ttu-id="d0e85-190">每項工作會產生 10,000 的隨機數字，計算其平均值，然後更新維護累計值產生隨機數字的數目和其總和的兩個程序層級變數。</span><span class="sxs-lookup"><span data-stu-id="d0e85-190">Each task generates 10,000 random numbers, calculates their average, and updates two procedure-level variables that maintain a running total of the number of random numbers generated and their sum.</span></span> <span data-ttu-id="d0e85-191">尚未執行所有工作之後，這兩個值然後可用來計算整體的平均數。</span><span class="sxs-lookup"><span data-stu-id="d0e85-191">After all tasks have executed, these two values are then used to calculate the overall mean.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.class/cs/example1.cs#1)]
 [!code-vb[System.Threading.Monitor.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.class/vb/example1.vb#1)]  
  
 <span data-ttu-id="d0e85-192">它們可存取從任何執行緒集區執行緒上執行的工作，因為存取變數`total`和`n`也進行同步處理。</span><span class="sxs-lookup"><span data-stu-id="d0e85-192">Because they can be accessed from any task running on a thread pool thread, access to the variables `total` and `n` must also be synchronized.</span></span> <span data-ttu-id="d0e85-193"><xref:System.Threading.Interlocked.Add%2A?displayProperty=nameWithType>方法用於此目的。</span><span class="sxs-lookup"><span data-stu-id="d0e85-193">The <xref:System.Threading.Interlocked.Add%2A?displayProperty=nameWithType> method is used for this purpose.</span></span>  
  
 <span data-ttu-id="d0e85-194">下列範例示範如何結合的使用<xref:System.Threading.Monitor>類別 (實作`lock`或`SyncLock`語言建構)，則<xref:System.Threading.Interlocked>類別，而<xref:System.Threading.AutoResetEvent>類別。</span><span class="sxs-lookup"><span data-stu-id="d0e85-194">The following example demonstrates the combined use of the <xref:System.Threading.Monitor> class (implemented with the `lock` or `SyncLock` language construct), the <xref:System.Threading.Interlocked> class, and the <xref:System.Threading.AutoResetEvent> class.</span></span> <span data-ttu-id="d0e85-195">它會定義兩個`internal`（C# 中） 或`Friend`（在 Visual Basic) 類別，`SyncResource`和`UnSyncResource`，分別提供同步和非同步存取資源。</span><span class="sxs-lookup"><span data-stu-id="d0e85-195">It defines two `internal` (in C#) or `Friend` (in Visual Basic) classes, `SyncResource` and `UnSyncResource`, that respectively provide synchronized and unsynchronized access to a resource.</span></span> <span data-ttu-id="d0e85-196">為了確保範例說明同步存取和非同步存取 （這可能是大小寫，如果每個方法呼叫都迅速完成） 之間的差異，這個方法會包含隨機延遲： 針對其執行緒<xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType>屬性為偶數，方法會呼叫<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>以引入 2000 毫秒的延遲。</span><span class="sxs-lookup"><span data-stu-id="d0e85-196">To ensure that the example illustrates the difference between the synchronized and unsynchronized access (which could be the case if each method call completes rapidly), the method includes a random delay: for threads whose <xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType> property is even, the method calls <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> to introduce a delay of 2,000 milliseconds.</span></span> <span data-ttu-id="d0e85-197">請注意，因為`SyncResource`類別不是公用的用戶端程式碼都在同步處理的資源上取得鎖定; 內部類別本身會取得鎖定。</span><span class="sxs-lookup"><span data-stu-id="d0e85-197">Note that, because the `SyncResource` class is not public, none of the client code takes a lock on the synchronized resource; the internal class itself takes the lock.</span></span> <span data-ttu-id="d0e85-198">這可防止惡意程式碼在公開物件上取得鎖定。</span><span class="sxs-lookup"><span data-stu-id="d0e85-198">This prevents malicious code from taking a lock on a public object.</span></span>  
  
 [!code-csharp[Conceptual.Monitors#1](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.monitors/cs/source.cs#1)]
 [!code-vb[Conceptual.Monitors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.monitors/vb/source.vb#1)]  
  
 <span data-ttu-id="d0e85-199">此範例會定義變數， `numOps`，定義嘗試存取資源的執行緒數目。</span><span class="sxs-lookup"><span data-stu-id="d0e85-199">The example defines a variable, `numOps`, that defines the number of threads that will attempt to access the resource.</span></span> <span data-ttu-id="d0e85-200">應用程式執行緒呼叫<xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType>方法的同步和非同步存取五次時，每個。</span><span class="sxs-lookup"><span data-stu-id="d0e85-200">The application thread calls the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> method for synchronized and unsynchronized access five times each.</span></span> <span data-ttu-id="d0e85-201"><xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType>方法具有單一參數，不接受任何參數，且不傳回值的委派。</span><span class="sxs-lookup"><span data-stu-id="d0e85-201">The <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> method has a single parameter, a delegate that accepts no parameters and returns no value.</span></span> <span data-ttu-id="d0e85-202">針對同步存取，它會叫用`SyncUpdateResource`方法; 針對未同步存取，它會叫用`UnSyncUpdateResource`方法。</span><span class="sxs-lookup"><span data-stu-id="d0e85-202">For synchronized access, it invokes the `SyncUpdateResource` method; for unsynchronized access, it invokes the `UnSyncUpdateResource` method.</span></span> <span data-ttu-id="d0e85-203">在方法呼叫的每個設定之後呼叫的應用程式執行緒[AutoResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne*)方法，以封鎖直到<xref:System.Threading.AutoResetEvent>執行個體收到訊號。</span><span class="sxs-lookup"><span data-stu-id="d0e85-203">After each set of method calls, the application thread calls the [AutoResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne*) method so that it blocks until the <xref:System.Threading.AutoResetEvent> instance is signaled.</span></span>  
  
 <span data-ttu-id="d0e85-204">每次呼叫`SyncUpdateResource`方法都會呼叫內部`SyncResource.Access`方法，然後呼叫<xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType>方法以遞減`numOps`計數器。</span><span class="sxs-lookup"><span data-stu-id="d0e85-204">Each call to the `SyncUpdateResource` method calls the internal `SyncResource.Access` method and then calls the <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method to decrement the `numOps` counter.</span></span> <span data-ttu-id="d0e85-205"><xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType>方法會用於遞減的計數器，因為否則您無法確定在第二個執行緒會存取該值，才能在第一個執行緒的遞減值儲存在變數。</span><span class="sxs-lookup"><span data-stu-id="d0e85-205">The <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method Is used to decrement the counter, because otherwise you cannot be certain that a second thread will access the value before a first thread's decremented value has been stored in the variable.</span></span> <span data-ttu-id="d0e85-206">當上次同步處理背景工作執行緒遞減的計數器為零時，表示所有同步處理的執行緒都已完成存取資源，`SyncUpdateResource`方法呼叫<xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType>方法，以指示主執行緒繼續執行。</span><span class="sxs-lookup"><span data-stu-id="d0e85-206">When the last synchronized worker thread decrements the counter to zero, indicating that all synchronized threads have completed accessing the resource, the `SyncUpdateResource` method calls the <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> method, which signals the main thread to continue execution.</span></span>  
  
 <span data-ttu-id="d0e85-207">每次呼叫`UnSyncUpdateResource`方法都會呼叫內部`UnSyncResource.Access`方法，然後呼叫<xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType>方法以遞減`numOps`計數器。</span><span class="sxs-lookup"><span data-stu-id="d0e85-207">Each call to the `UnSyncUpdateResource` method calls the internal `UnSyncResource.Access` method and then calls the <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method to decrement the `numOps` counter.</span></span> <span data-ttu-id="d0e85-208">同樣地，<xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType>方法會用於遞減的計數器，以確保第二個執行緒不會無法存取值在第一個執行緒的遞減值已指派給變數之前。</span><span class="sxs-lookup"><span data-stu-id="d0e85-208">Once again, the <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method Is used to decrement the counter to ensure that a second thread does not access the value before a first thread's decremented value has been assigned to the variable.</span></span> <span data-ttu-id="d0e85-209">當上次非同步處理背景工作執行緒將計數器為零時，表示沒有其他非同步處理的執行緒需要存取資源，`UnSyncUpdateResource`方法呼叫<xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType>方法，以指示主執行緒繼續執行.</span><span class="sxs-lookup"><span data-stu-id="d0e85-209">When the last unsynchronized worker thread decrements the counter to zero, indicating that no more unsynchronized threads need to access the resource, the `UnSyncUpdateResource` method calls the <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> method, which signals the main thread to continue execution.</span></span>  
  
 <span data-ttu-id="d0e85-210">如範例輸出所示，同步存取可確保呼叫執行緒會先結束受保護的資源，其他執行緒才能存取該資源；每個執行緒都會等候其前置項。</span><span class="sxs-lookup"><span data-stu-id="d0e85-210">As the output from  the example shows, synchronized access ensures that the calling thread exits the protected resource before another thread can access it; each thread waits on its predecessor.</span></span> <span data-ttu-id="d0e85-211">相反地，若未鎖定，`UnSyncResource.Access`依執行緒到達的順序呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="d0e85-211">On the other hand, without the lock, the `UnSyncResource.Access` method is called in the order in which threads reach it.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="d0e85-212">此型別具備執行緒安全。</span>
      <span class="sxs-lookup">
        <span data-stu-id="d0e85-212">This type is thread safe.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Threading.Thread" />
  </Docs>
  <Members>
    <MemberGroup MemberName="Enter">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d0e85-213">取得指定之物件的獨佔鎖定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-213">Acquires an exclusive lock on a specified object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public static void Enter (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Enter(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Enter(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Enter (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Enter(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member Enter : obj -&gt; unit" Usage="System.Threading.Monitor.Enter obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="d0e85-214">要從其上取得監視器鎖定的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-214">The object on which to acquire the monitor lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0e85-215">取得指定物件的獨佔鎖定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-215">Acquires an exclusive lock on the specified object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0e85-216">使用`Enter`取得<xref:System.Threading.Monitor>上做為參數傳遞的物件。</span><span class="sxs-lookup"><span data-stu-id="d0e85-216">Use `Enter` to acquire the <xref:System.Threading.Monitor> on the object passed as the parameter.</span></span> <span data-ttu-id="d0e85-217">如果另一個執行緒已執行`Enter`物件但尚未執行對應<xref:System.Threading.Monitor.Exit%2A>，目前的執行緒會封鎖直到另一個執行緒釋放物件。</span><span class="sxs-lookup"><span data-stu-id="d0e85-217">If another thread has executed an `Enter` on the object but has not yet executed the corresponding <xref:System.Threading.Monitor.Exit%2A>, the current thread will block until the other thread releases the object.</span></span> <span data-ttu-id="d0e85-218">它是合法的叫用的相同執行緒`Enter`不止一次，而不封鎖它; 不過，有相同數目的`Exit`其他執行緒等候的物件會解除封鎖之前，必須叫用呼叫。</span><span class="sxs-lookup"><span data-stu-id="d0e85-218">It is legal for the same thread to invoke `Enter` more than once without it blocking; however, an equal number of `Exit` calls must be invoked before other threads waiting on the object will unblock.</span></span>  
  
 <span data-ttu-id="d0e85-219">使用<xref:System.Threading.Monitor>鎖定的物件 （也就是參考類型），不實值類型。</span><span class="sxs-lookup"><span data-stu-id="d0e85-219">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="d0e85-220">當您將傳遞的值類型變數`Enter`，它會進行 boxed 處理做為物件。</span><span class="sxs-lookup"><span data-stu-id="d0e85-220">When you pass a value type variable to `Enter`, it is boxed as an object.</span></span> <span data-ttu-id="d0e85-221">如果您將傳遞至相同的變數`Enter`同樣地，它會進行 boxed 處理為不同的物件，並不會封鎖執行緒。</span><span class="sxs-lookup"><span data-stu-id="d0e85-221">If you pass the same variable to `Enter` again, it is boxed as a separate object, and the thread does not block.</span></span> <span data-ttu-id="d0e85-222">在此情況下，程式碼，`Monitor`會真地保護未受保護。</span><span class="sxs-lookup"><span data-stu-id="d0e85-222">In this case, the code that `Monitor` is supposedly protecting is not protected.</span></span> <span data-ttu-id="d0e85-223">此外，當您將變數傳遞給`Exit`，建立另一個不同的物件。</span><span class="sxs-lookup"><span data-stu-id="d0e85-223">Furthermore, when you pass the variable to `Exit`, still another separate object is created.</span></span> <span data-ttu-id="d0e85-224">因為物件傳遞給`Exit`不同於傳遞給物件`Enter`，`Monitor`會擲回<xref:System.Threading.SynchronizationLockException>。</span><span class="sxs-lookup"><span data-stu-id="d0e85-224">Because the object passed to `Exit` is different from the object passed to `Enter`, `Monitor` throws <xref:System.Threading.SynchronizationLockException>.</span></span> <span data-ttu-id="d0e85-225">如需詳細資訊，請參閱觀念性主題[監視器](xref:System.Threading.Monitor)。</span><span class="sxs-lookup"><span data-stu-id="d0e85-225">For more information, see the conceptual topic [Monitors](xref:System.Threading.Monitor).</span></span>  
  
 <span data-ttu-id="d0e85-226"><xref:System.Threading.Thread.Interrupt%2A> 可以中斷執行緒正在等候輸入`Monitor`物件上。</span><span class="sxs-lookup"><span data-stu-id="d0e85-226"><xref:System.Threading.Thread.Interrupt%2A> can interrupt threads that are waiting to enter a `Monitor` on an object.</span></span> <span data-ttu-id="d0e85-227">A<xref:System.Threading.ThreadInterruptedException>就會擲回。</span><span class="sxs-lookup"><span data-stu-id="d0e85-227">A <xref:System.Threading.ThreadInterruptedException> will be thrown.</span></span>  
  
 <span data-ttu-id="d0e85-228">使用 C# `try`...`finally`</span><span class="sxs-lookup"><span data-stu-id="d0e85-228">Use a C# `try`…`finally`</span></span> <span data-ttu-id="d0e85-229">區塊 (`Try`...`Finally`</span><span class="sxs-lookup"><span data-stu-id="d0e85-229">block (`Try`…`Finally`</span></span> <span data-ttu-id="d0e85-230">在 Visual Basic) 以確保您發行監視，或使用 C#`lock`陳述式 (`SyncLock`陳述式在 Visual Basic 中的)，其中包裝<xref:System.Threading.Monitor.Enter%2A>和<xref:System.Threading.Monitor.Exit%2A>方法`try`...`finally`</span><span class="sxs-lookup"><span data-stu-id="d0e85-230">in Visual Basic) to ensure that you release the monitor, or use the C# `lock` statement (`SyncLock` statement in Visual Basic), which wraps the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> methods in a `try`…`finally`</span></span> <span data-ttu-id="d0e85-231">區塊。</span><span class="sxs-lookup"><span data-stu-id="d0e85-231">block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d0e85-232">下列範例示範如何使用 `Enter` 方法。</span><span class="sxs-lookup"><span data-stu-id="d0e85-232">The following example demonstrates how to use the `Enter` method.</span></span>  
  
 [!code-cpp[MonitorExmpl2#1](~/samples/snippets/cpp/VS_Snippets_CLR/MonitorExmpl2/CPP/monitor2.cpp#1)]
 [!code-csharp[MonitorExmpl2#1](~/samples/snippets/csharp/VS_Snippets_CLR/MonitorExmpl2/CS/monitor2.cs#1)]
 [!code-vb[MonitorExmpl2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MonitorExmpl2/VB/monitor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0e85-233">
            <paramref name="obj" /> 參數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-233">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public static void Enter (object obj, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Enter(object obj, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Enter (obj As Object, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Enter(System::Object ^ obj, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="static member Enter : obj *  -&gt; unit" Usage="System.Threading.Monitor.Enter (obj, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="lockTaken" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="d0e85-234">要等候的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-234">The object on which to wait.</span>
          </span>
        </param>
        <param name="lockTaken">
          <span data-ttu-id="d0e85-235">嘗試取得鎖定的結果 (以傳址方式傳遞)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-235">The result of the attempt to acquire the lock, passed by reference.</span>
          </span>
          <span data-ttu-id="d0e85-236">輸入必須是 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-236">The input must be <see langword="false" />.</span>
          </span>
          <span data-ttu-id="d0e85-237">如果已取得鎖定，輸出就是 <see langword="true" />；否則輸出為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-237">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span>
          </span>
          <span data-ttu-id="d0e85-238">嘗試取得鎖定期間，即使發生例外狀況，仍然會設定輸出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-238">The output is set even if an exception occurs during the attempt to acquire the lock.</span>
          </span>
          <span data-ttu-id="d0e85-239">注意：如果沒有發生例外狀況，這個方法的輸出一律為 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-239">Note   If no exception occurs, the output of this method is always <see langword="true" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0e85-240">取得指定之物件的獨佔鎖定，並且完整設定值，指出是否採用鎖定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-240">Acquires an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0e85-241">使用`Enter`取得<xref:System.Threading.Monitor>方式傳遞的物件上`obj`參數。</span><span class="sxs-lookup"><span data-stu-id="d0e85-241">Use `Enter` to acquire the <xref:System.Threading.Monitor> on the object passed as the `obj` parameter.</span></span> <span data-ttu-id="d0e85-242">如果另一個執行緒已執行`Enter`物件但尚未執行對應<xref:System.Threading.Monitor.Exit%2A>，目前的執行緒會封鎖直到另一個執行緒釋放物件。</span><span class="sxs-lookup"><span data-stu-id="d0e85-242">If another thread has executed an `Enter` on the object but has not yet executed the corresponding <xref:System.Threading.Monitor.Exit%2A>, the current thread will block until the other thread releases the object.</span></span> <span data-ttu-id="d0e85-243">它是合法的叫用的相同執行緒`Enter`不止一次，而不封鎖它; 不過，有相同數目的`Exit`其他執行緒等候的物件會解除封鎖之前，必須叫用呼叫。</span><span class="sxs-lookup"><span data-stu-id="d0e85-243">It is legal for the same thread to invoke `Enter` more than once without it blocking; however, an equal number of `Exit` calls must be invoked before other threads waiting on the object will unblock.</span></span>  
  
 <span data-ttu-id="d0e85-244">如果無法取得鎖定，因為發生例外狀況，該變數的指定`lockTaken`參數是`false`這個方法會結束之後。</span><span class="sxs-lookup"><span data-stu-id="d0e85-244">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="d0e85-245">這可讓程式能夠判斷是否需要釋出鎖定，請在所有情況下。</span><span class="sxs-lookup"><span data-stu-id="d0e85-245">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span> <span data-ttu-id="d0e85-246">如果這個方法會傳回而不擲回例外狀況變數指定`lockTaken`參數永遠是`true`，並不需要進行測試。</span><span class="sxs-lookup"><span data-stu-id="d0e85-246">If this method returns without throwing an exception, the variable specified for the `lockTaken` parameter is always `true`, and there is no need to test it.</span></span>  
  
 <span data-ttu-id="d0e85-247">使用<xref:System.Threading.Monitor>鎖定的物件 （也就是參考類型），不實值類型。</span><span class="sxs-lookup"><span data-stu-id="d0e85-247">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="d0e85-248">當您將傳遞的值類型變數`Enter`，它會進行 boxed 處理做為物件。</span><span class="sxs-lookup"><span data-stu-id="d0e85-248">When you pass a value type variable to `Enter`, it is boxed as an object.</span></span> <span data-ttu-id="d0e85-249">如果您將傳遞至相同的變數`Enter`同樣地，它會進行 boxed 處理為不同的物件，並不會封鎖執行緒。</span><span class="sxs-lookup"><span data-stu-id="d0e85-249">If you pass the same variable to `Enter` again, it is boxed as a separate object, and the thread does not block.</span></span> <span data-ttu-id="d0e85-250">在此情況下，程式碼，`Monitor`會真地保護未受保護。</span><span class="sxs-lookup"><span data-stu-id="d0e85-250">In this case, the code that `Monitor` is supposedly protecting is not protected.</span></span> <span data-ttu-id="d0e85-251">此外，當您將變數傳遞給`Exit`，建立另一個不同的物件。</span><span class="sxs-lookup"><span data-stu-id="d0e85-251">Furthermore, when you pass the variable to `Exit`, another separate object is created.</span></span> <span data-ttu-id="d0e85-252">因為物件傳遞給`Exit`不同於傳遞給物件`Enter`，`Monitor`會擲回<xref:System.Threading.SynchronizationLockException>。</span><span class="sxs-lookup"><span data-stu-id="d0e85-252">Because the object passed to `Exit` is different from the object passed to `Enter`, `Monitor` throws <xref:System.Threading.SynchronizationLockException>.</span></span> <span data-ttu-id="d0e85-253">如需詳細資訊，請參閱觀念性主題[監視器](xref:System.Threading.Monitor)。</span><span class="sxs-lookup"><span data-stu-id="d0e85-253">For more information, see the conceptual topic [Monitors](xref:System.Threading.Monitor).</span></span>  
  
 <span data-ttu-id="d0e85-254"><xref:System.Threading.Thread.Interrupt%2A> 可以中斷執行緒正在等候輸入`Monitor`物件上。</span><span class="sxs-lookup"><span data-stu-id="d0e85-254"><xref:System.Threading.Thread.Interrupt%2A> can interrupt threads that are waiting to enter a `Monitor` on an object.</span></span> <span data-ttu-id="d0e85-255">A<xref:System.Threading.ThreadInterruptedException>就會擲回。</span><span class="sxs-lookup"><span data-stu-id="d0e85-255">A <xref:System.Threading.ThreadInterruptedException> will be thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d0e85-256">下列程式碼示範基本模式使用<xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29>方法多載。</span><span class="sxs-lookup"><span data-stu-id="d0e85-256">The following code shows the basic pattern for using the <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29> method overload.</span></span> <span data-ttu-id="d0e85-257">這個多載一律設定為傳遞給變數的值`ref`參數 (`ByRef`在 Visual Basic 中) `lockTaken`，即使方法擲回例外狀況，因此變數的值是可靠的方式來測試是否為已鎖定已發行。</span><span class="sxs-lookup"><span data-stu-id="d0e85-257">This overload always sets the value of the variable that is passed to the `ref` parameter (`ByRef` in Visual Basic) `lockTaken`, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Enter#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.enter/cs/example.cs#2)]
 [!code-vb[System.Threading.Monitor.Enter#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.enter/vb/example.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d0e85-258">
            <paramref name="lockTaken" /> 的輸入為 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-258">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0e85-259">
            <paramref name="obj" /> 參數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-259">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Exit">
      <MemberSignature Language="C#" Value="public static void Exit (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Exit(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Exit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Exit (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Exit(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member Exit : obj -&gt; unit" Usage="System.Threading.Monitor.Exit obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="d0e85-260">要從其上釋出鎖定的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-260">The object on which to release the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0e85-261">釋出指定物件的獨佔鎖定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-261">Releases an exclusive lock on the specified object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0e85-262">呼叫的執行緒必須在擁有鎖定`obj`參數。</span><span class="sxs-lookup"><span data-stu-id="d0e85-262">The calling thread must own the lock on the `obj` parameter.</span></span> <span data-ttu-id="d0e85-263">如果呼叫執行緒擁有之指定的物件上的鎖定，而且已有相同數目的`Exit`和<xref:System.Threading.Monitor.Enter%2A>呼叫物件的則會釋放鎖定。</span><span class="sxs-lookup"><span data-stu-id="d0e85-263">If the calling thread owns the lock on the specified object, and has made an equal number of `Exit` and <xref:System.Threading.Monitor.Enter%2A> calls for the object, then the lock is released.</span></span> <span data-ttu-id="d0e85-264">如果呼叫執行緒已不會叫用`Exit`每次`Enter`，不會釋放鎖定。</span><span class="sxs-lookup"><span data-stu-id="d0e85-264">If the calling thread has not invoked `Exit` as many times as `Enter`, the lock is not released.</span></span>  
  
 <span data-ttu-id="d0e85-265">如果在釋放鎖定其他執行緒處於就緒佇列物件，其中一個執行緒取得鎖定。</span><span class="sxs-lookup"><span data-stu-id="d0e85-265">If the lock is released and other threads are in the ready queue for the object, one of the threads acquires the lock.</span></span> <span data-ttu-id="d0e85-266">如果其他的執行緒在等候取得鎖定的等候佇列中，它們不會自動移動到就緒佇列時的鎖定擁有者呼叫`Exit`。</span><span class="sxs-lookup"><span data-stu-id="d0e85-266">If other threads are in the waiting queue waiting to acquire the lock, they are not automatically moved to the ready queue when the owner of the lock calls `Exit`.</span></span> <span data-ttu-id="d0e85-267">若要移動一或多個等候中執行緒進入就緒佇列，呼叫<xref:System.Threading.Monitor.Pulse%2A>或<xref:System.Threading.Monitor.PulseAll%2A>叫用之前`Exit`。</span><span class="sxs-lookup"><span data-stu-id="d0e85-267">To move one or more waiting threads into the ready queue, call <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> before invoking `Exit`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d0e85-268">下列範例示範如何使用 `Exit` 方法。</span><span class="sxs-lookup"><span data-stu-id="d0e85-268">The following example demonstrates how to use the `Exit` method.</span></span>  
  
 [!code-cpp[MonitorExmpl2#1](~/samples/snippets/cpp/VS_Snippets_CLR/MonitorExmpl2/CPP/monitor2.cpp#1)]
 [!code-csharp[MonitorExmpl2#1](~/samples/snippets/csharp/VS_Snippets_CLR/MonitorExmpl2/CS/monitor2.cs#1)]
 [!code-vb[MonitorExmpl2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MonitorExmpl2/VB/monitor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0e85-269">
            <paramref name="obj" /> 參數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-269">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="d0e85-270">目前執行緒沒有指定物件的鎖定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-270">The current thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="IsEntered">
      <MemberSignature Language="C#" Value="public static bool IsEntered (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsEntered(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.IsEntered(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsEntered (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsEntered(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member IsEntered : obj -&gt; bool" Usage="System.Threading.Monitor.IsEntered obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="d0e85-271">要測試的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-271">The object to test.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0e85-272">判斷目前執行緒是否保持鎖定指定的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-272">Determines whether the current thread holds the lock on the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0e85-273">如果目前的執行緒持有 <paramref name="obj" /> 的鎖定，則為 <see langword="true" />；否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-273">
              <see langword="true" /> if the current thread holds the lock on <paramref name="obj" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0e85-274">這個方法僅適用於所使用的方法取得的鎖定<xref:System.Threading.Monitor>類別，或使用 C#`lock`陳述式或 Visual Basic`SyncLock`陳述式，以實作<xref:System.Threading.Monitor>。</span><span class="sxs-lookup"><span data-stu-id="d0e85-274">This method works only for locks that are acquired by using the methods of the <xref:System.Threading.Monitor> class, or by using the C# `lock` statement or the Visual Basic `SyncLock` statement, which are implemented with <xref:System.Threading.Monitor>.</span></span>  
  
 <span data-ttu-id="d0e85-275">使用此方法使用診斷工具，例如<xref:System.Diagnostics.Debug.Assert%2A>方法和<xref:System.Diagnostics.Contracts.Contract>類別，以偵錯涉及的鎖定問題<xref:System.Threading.Monitor>類別。</span><span class="sxs-lookup"><span data-stu-id="d0e85-275">Use this method with diagnostic tools, such as the <xref:System.Diagnostics.Debug.Assert%2A> method and the <xref:System.Diagnostics.Contracts.Contract> class, to debug locking issues that involve the <xref:System.Threading.Monitor> class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0e85-276">
            <paramref name="obj" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-276">
              <paramref name="obj" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Pulse">
      <MemberSignature Language="C#" Value="public static void Pulse (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Pulse(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Pulse(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Pulse (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Pulse(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member Pulse : obj -&gt; unit" Usage="System.Threading.Monitor.Pulse obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="d0e85-277">執行緒正等候的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-277">The object a thread is waiting for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0e85-278">通知等候佇列中的執行緒，鎖定物件的狀態有所變更。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-278">Notifies a thread in the waiting queue of a change in the locked object's state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0e85-279">只有目前的鎖定擁有者可以發出信號，正在等候的物件使用`Pulse`。</span><span class="sxs-lookup"><span data-stu-id="d0e85-279">Only the current owner of the lock can signal a waiting object using `Pulse`.</span></span>  
  
 <span data-ttu-id="d0e85-280">目前擁有指定的物件上鎖定的執行緒會叫用這個方法來通知鎖定列中的下一個執行緒。</span><span class="sxs-lookup"><span data-stu-id="d0e85-280">The thread that currently owns the lock on the specified object invokes this method to signal the next thread in line for the lock.</span></span> <span data-ttu-id="d0e85-281">接收 pulse，等候的執行緒會移到就緒佇列。</span><span class="sxs-lookup"><span data-stu-id="d0e85-281">Upon receiving the pulse, the waiting thread is moved to the ready queue.</span></span> <span data-ttu-id="d0e85-282">當執行緒，叫用`Pulse`釋出鎖定就緒佇列 （這不一定接受 pulse 的執行緒） 中的下一個執行緒取得鎖定。</span><span class="sxs-lookup"><span data-stu-id="d0e85-282">When the thread that invoked `Pulse` releases the lock, the next thread in the ready queue (which is not necessarily the thread that was pulsed) acquires the lock.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d0e85-283"><xref:System.Threading.Monitor>類別不會維護狀態，表示<xref:System.Threading.Monitor.Pulse%2A>呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="d0e85-283">The <xref:System.Threading.Monitor> class does not maintain state indicating that the <xref:System.Threading.Monitor.Pulse%2A> method has been called.</span></span> <span data-ttu-id="d0e85-284">因此，如果您呼叫<xref:System.Threading.Monitor.Pulse%2A>時沒有任何執行緒正在等待下, 一個執行緒呼叫<xref:System.Threading.Monitor.Wait%2A>區塊如同<xref:System.Threading.Monitor.Pulse%2A>永遠不會呼叫。</span><span class="sxs-lookup"><span data-stu-id="d0e85-284">Thus, if you call <xref:System.Threading.Monitor.Pulse%2A> when no threads are waiting, the next thread that calls <xref:System.Threading.Monitor.Wait%2A> blocks as if <xref:System.Threading.Monitor.Pulse%2A> had never been called.</span></span> <span data-ttu-id="d0e85-285">如果使用兩個執行緒<xref:System.Threading.Monitor.Pulse%2A>和<xref:System.Threading.Monitor.Wait%2A>互動，這可能會造成死結。</span><span class="sxs-lookup"><span data-stu-id="d0e85-285">If two threads are using <xref:System.Threading.Monitor.Pulse%2A> and <xref:System.Threading.Monitor.Wait%2A> to interact, this could result in a deadlock.</span></span> <span data-ttu-id="d0e85-286">這和行為的<xref:System.Threading.AutoResetEvent>類別： 如果您發出信號<xref:System.Threading.AutoResetEvent>藉由呼叫其<xref:System.Threading.EventWaitHandle.Set%2A>方法，而且沒有任何執行緒等候，<xref:System.Threading.AutoResetEvent>仍會留在收到信號狀態，直到執行緒呼叫<xref:System.Threading.WaitHandle.WaitOne%2A>， <xref:System.Threading.WaitHandle.WaitAny%2A>，或<xref:System.Threading.WaitHandle.WaitAll%2A>。</span><span class="sxs-lookup"><span data-stu-id="d0e85-286">Contrast this with the behavior of the <xref:System.Threading.AutoResetEvent> class: If you signal an <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, and there are no threads waiting, the <xref:System.Threading.AutoResetEvent> remains in a signaled state until a thread calls <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, or <xref:System.Threading.WaitHandle.WaitAll%2A>.</span></span> <span data-ttu-id="d0e85-287"><xref:System.Threading.AutoResetEvent>釋出該執行緒，並傳回未發出信號的狀態。</span><span class="sxs-lookup"><span data-stu-id="d0e85-287">The <xref:System.Threading.AutoResetEvent> releases that thread and returns to the unsignaled state.</span></span>  
  
 <span data-ttu-id="d0e85-288">請注意，同步處理的物件擁有數個的參考，包括之執行緒的目前擁有鎖定，參考到就緒佇列，其中包含要取得的鎖定的執行緒，以及參考等候佇列中，參考它包含正在等候的物件的狀態變更通知的執行緒。</span><span class="sxs-lookup"><span data-stu-id="d0e85-288">Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="d0e85-289">`Pulse`， <xref:System.Threading.Monitor.PulseAll%2A>，和<xref:System.Threading.Monitor.Wait%2A>方法必須從叫用同步處理的程式碼區塊內。</span><span class="sxs-lookup"><span data-stu-id="d0e85-289">The `Pulse`, <xref:System.Threading.Monitor.PulseAll%2A>, and <xref:System.Threading.Monitor.Wait%2A> methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="d0e85-290">若要表示多個執行緒，使用<xref:System.Threading.Monitor.PulseAll%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="d0e85-290">To signal multiple threads, use the <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0e85-291">
            <paramref name="obj" /> 參數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-291">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="d0e85-292">呼叫執行緒沒有指定物件的鎖定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-292">The calling thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="PulseAll">
      <MemberSignature Language="C#" Value="public static void PulseAll (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PulseAll(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.PulseAll(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub PulseAll (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PulseAll(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member PulseAll : obj -&gt; unit" Usage="System.Threading.Monitor.PulseAll obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="d0e85-293">送出 Pulse 的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-293">The object that sends the pulse.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0e85-294">通知所有等候中的執行緒，物件的狀態有所變更。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-294">Notifies all waiting threads of a change in the object's state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0e85-295">目前擁有指定的物件上鎖定的執行緒會叫用這個方法來通知所有等候取得物件鎖定的執行緒。</span><span class="sxs-lookup"><span data-stu-id="d0e85-295">The thread that currently owns the lock on the specified object invokes this method to signal all threads waiting to acquire the lock on the object.</span></span> <span data-ttu-id="d0e85-296">訊號傳送之後，等候中的執行緒會移到就緒佇列。</span><span class="sxs-lookup"><span data-stu-id="d0e85-296">After the signal is sent, the waiting threads are moved to the ready queue.</span></span> <span data-ttu-id="d0e85-297">當執行緒，叫用`PulseAll`釋出鎖定就緒佇列中的下一個執行緒取得鎖定。</span><span class="sxs-lookup"><span data-stu-id="d0e85-297">When the thread that invoked `PulseAll` releases the lock, the next thread in the ready queue acquires the lock.</span></span>  
  
 <span data-ttu-id="d0e85-298">請注意，同步處理的物件擁有數個的參考，包括之執行緒的目前擁有鎖定，參考到就緒佇列，其中包含要取得的鎖定的執行緒，以及參考等候佇列中，參考它包含正在等候的物件的狀態變更通知的執行緒。</span><span class="sxs-lookup"><span data-stu-id="d0e85-298">Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="d0e85-299"><xref:System.Threading.Monitor.Pulse%2A>， `PulseAll`，和<xref:System.Threading.Monitor.Wait%2A>方法必須從叫用同步處理的程式碼區塊內。</span><span class="sxs-lookup"><span data-stu-id="d0e85-299">The <xref:System.Threading.Monitor.Pulse%2A>, `PulseAll`, and <xref:System.Threading.Monitor.Wait%2A> methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="d0e85-300">備註<xref:System.Threading.Monitor.Pulse%2A>方法說明發生什麼事如果<xref:System.Threading.Monitor.Pulse%2A>時沒有任何執行緒正在等候呼叫。</span><span class="sxs-lookup"><span data-stu-id="d0e85-300">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 <span data-ttu-id="d0e85-301">若要表示的單一執行緒，使用`Pulse`方法。</span><span class="sxs-lookup"><span data-stu-id="d0e85-301">To signal a single thread, use the `Pulse` method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0e85-302">
            <paramref name="obj" /> 參數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-302">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="d0e85-303">呼叫執行緒沒有指定物件的鎖定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-303">The calling thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TryEnter">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d0e85-304">嘗試取得指定物件的獨佔鎖定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-304">Attempts to acquire an exclusive lock on the specified object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static bool TryEnter (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEnter(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEnter (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEnter(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj -&gt; bool" Usage="System.Threading.Monitor.TryEnter obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="d0e85-305">要取得鎖定的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-305">The object on which to acquire the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0e85-306">嘗試取得指定物件的獨佔鎖定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-306">Attempts to acquire an exclusive lock on the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0e85-307">如果目前執行緒取得鎖定，則為 <see langword="true" />；否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-307">
              <see langword="true" /> if the current thread acquires the lock; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0e85-308">如果成功，這個方法會取得獨佔鎖定上`obj`參數。</span><span class="sxs-lookup"><span data-stu-id="d0e85-308">If successful, this method acquires an exclusive lock on the `obj` parameter.</span></span> <span data-ttu-id="d0e85-309">這個方法會立即傳回，鎖定可用。</span><span class="sxs-lookup"><span data-stu-id="d0e85-309">This method returns immediately, whether or not the lock is available.</span></span>  
  
 <span data-ttu-id="d0e85-310">這個方法是類似於<xref:System.Threading.Monitor.Enter%2A>，但永遠不會封鎖目前的執行緒。</span><span class="sxs-lookup"><span data-stu-id="d0e85-310">This method is similar to <xref:System.Threading.Monitor.Enter%2A>, but it will never block the current thread.</span></span> <span data-ttu-id="d0e85-311">如果執行緒無法輸入而不會封鎖，則方法會傳回`false,`。</span><span class="sxs-lookup"><span data-stu-id="d0e85-311">If the thread cannot enter without blocking, the method returns `false,`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d0e85-312">使用<xref:System.Threading.Monitor>鎖定的物件 （也就是參考類型），不實值類型。</span><span class="sxs-lookup"><span data-stu-id="d0e85-312">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="d0e85-313">如需詳細資訊，請參閱<xref:System.Threading.Monitor>發行項。</span><span class="sxs-lookup"><span data-stu-id="d0e85-313">For details, see the <xref:System.Threading.Monitor> article.</span></span>  
  
 <span data-ttu-id="d0e85-314">若要確保執行緒不進入重要區段，您應該檢查方法的傳回值和關鍵區段中執行程式碼，只有它的傳回值是`true`。</span><span class="sxs-lookup"><span data-stu-id="d0e85-314">To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is `true`.</span></span> <span data-ttu-id="d0e85-315">下列程式碼片段會顯示呼叫這個方法所使用的模式。</span><span class="sxs-lookup"><span data-stu-id="d0e85-315">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="d0e85-316">請注意，您應該呼叫<xref:System.Threading.Monitor.Exit%2A>中`finally`區塊，以確保呼叫執行緒釋放其重要區段的鎖定，發生例外狀況。</span><span class="sxs-lookup"><span data-stu-id="d0e85-316">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#1)]
 [!code-vb[System.Threading.Monitor.TryEnter#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="d0e85-317">下列程式碼範例會示範如何使用 `TryEnter` 方法。</span><span class="sxs-lookup"><span data-stu-id="d0e85-317">The following code example demonstrates how to use the `TryEnter` method.</span></span>  
  
 [!code-cpp[MonitorExmpl2#1](~/samples/snippets/cpp/VS_Snippets_CLR/MonitorExmpl2/CPP/monitor2.cpp#1)]
 [!code-csharp[MonitorExmpl2#1](~/samples/snippets/csharp/VS_Snippets_CLR/MonitorExmpl2/CS/monitor2.cs#1)]
 [!code-vb[MonitorExmpl2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MonitorExmpl2/VB/monitor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0e85-318">
            <paramref name="obj" /> 參數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-318">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static void TryEnter (object obj, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryEnter(object obj, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TryEnter (obj As Object, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TryEnter(System::Object ^ obj, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj *  -&gt; unit" Usage="System.Threading.Monitor.TryEnter (obj, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="lockTaken" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="d0e85-319">要取得鎖定的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-319">The object on which to acquire the lock.</span>
          </span>
        </param>
        <param name="lockTaken">
          <span data-ttu-id="d0e85-320">嘗試取得鎖定的結果 (以傳址方式傳遞)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-320">The result of the attempt to acquire the lock, passed by reference.</span>
          </span>
          <span data-ttu-id="d0e85-321">輸入必須是 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-321">The input must be <see langword="false" />.</span>
          </span>
          <span data-ttu-id="d0e85-322">如果已取得鎖定，輸出就是 <see langword="true" />；否則輸出為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-322">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span>
          </span>
          <span data-ttu-id="d0e85-323">嘗試取得鎖定期間，即使發生例外狀況，仍然會設定輸出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-323">The output is set even if an exception occurs during the attempt to acquire the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0e85-324">嘗試取得指定之物件的獨佔鎖定，並且完整設定值，指出是否採用鎖定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-324">Attempts to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0e85-325">如果成功，這個方法會取得獨佔鎖定上`obj`參數。</span><span class="sxs-lookup"><span data-stu-id="d0e85-325">If successful, this method acquires an exclusive lock on the `obj` parameter.</span></span> <span data-ttu-id="d0e85-326">這個方法會立即傳回，鎖定可用。</span><span class="sxs-lookup"><span data-stu-id="d0e85-326">This method returns immediately, whether or not the lock is available.</span></span>  
  
 <span data-ttu-id="d0e85-327">如果無法取得鎖定，因為發生例外狀況，該變數的指定`lockTaken`參數是`false`這個方法會結束之後。</span><span class="sxs-lookup"><span data-stu-id="d0e85-327">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="d0e85-328">這可讓程式能夠判斷是否需要釋出鎖定，請在所有情況下。</span><span class="sxs-lookup"><span data-stu-id="d0e85-328">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span>  
  
 <span data-ttu-id="d0e85-329">這個方法是類似於<xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29>，但永遠不會封鎖目前的執行緒。</span><span class="sxs-lookup"><span data-stu-id="d0e85-329">This method is similar to <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29>, but it will never block the current thread.</span></span> <span data-ttu-id="d0e85-330">如果執行緒無法進入而不會封鎖，`lockTaken`引數設定為`false`此方法傳回時。</span><span class="sxs-lookup"><span data-stu-id="d0e85-330">If the thread cannot enter without blocking, the `lockTaken` argument is set to `false` when the method returns.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d0e85-331">使用<xref:System.Threading.Monitor>鎖定的物件 （也就是參考類型），不實值類型。</span><span class="sxs-lookup"><span data-stu-id="d0e85-331">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="d0e85-332">如需詳細資訊，請參閱<xref:System.Threading.Monitor>發行項。</span><span class="sxs-lookup"><span data-stu-id="d0e85-332">For more information, see the <xref:System.Threading.Monitor> article.</span></span>  
  
 <span data-ttu-id="d0e85-333">為確保執行緒不進入重要區段，您應該檢查的值`lockTaken`並執行程式碼在重要區段中，只有其值是`true`。</span><span class="sxs-lookup"><span data-stu-id="d0e85-333">To ensure that the thread does not enter the critical section, you should examine the value of `lockTaken` and  execute code in the critical section only if its value is `true`.</span></span> <span data-ttu-id="d0e85-334">下列程式碼片段會顯示呼叫這個方法所使用的模式。</span><span class="sxs-lookup"><span data-stu-id="d0e85-334">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="d0e85-335">請注意，您應該呼叫<xref:System.Threading.Monitor.Exit%2A>中`finally`區塊，以確保呼叫執行緒釋放其重要區段的鎖定，發生例外狀況。</span><span class="sxs-lookup"><span data-stu-id="d0e85-335">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#2)]
 [!code-vb[System.Threading.Monitor.TryEnter#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#2)]  
  
   
  
## Examples  
 <span data-ttu-id="d0e85-336">下列程式碼示範基本模式使用<xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29>方法多載。</span><span class="sxs-lookup"><span data-stu-id="d0e85-336">The following code shows the basic pattern for using the <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> method overload.</span></span> <span data-ttu-id="d0e85-337">這個多載一律設定為傳遞給變數的值`ref`參數 (`ByRef`在 Visual Basic 中) `lockTaken`，即使方法擲回例外狀況，因此變數的值是可靠的方式來測試是否為已鎖定已發行。</span><span class="sxs-lookup"><span data-stu-id="d0e85-337">This overload always sets the value of the variable that is passed to the `ref` parameter (`ByRef` in Visual Basic) `lockTaken`, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Enter#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.enter/cs/example.cs#3)]
 [!code-vb[System.Threading.Monitor.Enter#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.enter/vb/example.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d0e85-338">
            <paramref name="lockTaken" /> 的輸入為 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-338">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0e85-339">
            <paramref name="obj" /> 參數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-339">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static bool TryEnter (object obj, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEnter(object obj, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEnter (obj As Object, millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEnter(System::Object ^ obj, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj * int -&gt; bool" Usage="System.Threading.Monitor.TryEnter (obj, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="d0e85-340">要取得鎖定的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-340">The object on which to acquire the lock.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="d0e85-341">等候鎖定的毫秒數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-341">The number of milliseconds to wait for the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0e85-342">嘗試取得指定物件的獨佔鎖定 (在指定的毫秒數時間內)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-342">Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0e85-343">如果目前執行緒取得鎖定，則為 <see langword="true" />；否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-343">
              <see langword="true" /> if the current thread acquires the lock; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0e85-344">如果`millisecondsTimeout`參數等於<xref:System.Threading.Timeout.Infinite>，這個方法相當於<xref:System.Threading.Monitor.Enter%2A>。</span><span class="sxs-lookup"><span data-stu-id="d0e85-344">If the `millisecondsTimeout` parameter equals <xref:System.Threading.Timeout.Infinite>, this method is equivalent to <xref:System.Threading.Monitor.Enter%2A>.</span></span> <span data-ttu-id="d0e85-345">如果`millisecondsTimeout`等於 0，此方法相當於<xref:System.Threading.Monitor.TryEnter%2A>。</span><span class="sxs-lookup"><span data-stu-id="d0e85-345">If `millisecondsTimeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d0e85-346">使用<xref:System.Threading.Monitor>鎖定的物件 （也就是參考類型），不實值類型。</span><span class="sxs-lookup"><span data-stu-id="d0e85-346">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="d0e85-347">如需詳細資訊，請參閱<xref:System.Threading.Monitor>發行項。</span><span class="sxs-lookup"><span data-stu-id="d0e85-347">For details, see the <xref:System.Threading.Monitor> article.</span></span>  
  
 <span data-ttu-id="d0e85-348">若要確保執行緒不進入重要區段，您應該檢查方法的傳回值和關鍵區段中執行程式碼，只有它的傳回值是`true`。</span><span class="sxs-lookup"><span data-stu-id="d0e85-348">To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is `true`.</span></span> <span data-ttu-id="d0e85-349">下列程式碼片段會顯示呼叫這個方法所使用的模式。</span><span class="sxs-lookup"><span data-stu-id="d0e85-349">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="d0e85-350">請注意，您應該呼叫<xref:System.Threading.Monitor.Exit%2A>中`finally`區塊，以確保呼叫執行緒釋放其重要區段的鎖定，發生例外狀況。</span><span class="sxs-lookup"><span data-stu-id="d0e85-350">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#3)]
 [!code-vb[System.Threading.Monitor.TryEnter#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0e85-351">
            <paramref name="obj" /> 參數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-351">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="d0e85-352">
            <paramref name="millisecondsTimeout" /> 是負數，且不等於 <see cref="F:System.Threading.Timeout.Infinite" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-352">
              <paramref name="millisecondsTimeout" /> is negative, and not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static bool TryEnter (object obj, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEnter(object obj, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEnter (obj As Object, timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEnter(System::Object ^ obj, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj * TimeSpan -&gt; bool" Usage="System.Threading.Monitor.TryEnter (obj, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="d0e85-353">要取得鎖定的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-353">The object on which to acquire the lock.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="d0e85-354">
            <see cref="T:System.TimeSpan" />，代表等候鎖定的時間量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-354">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait for the lock.</span>
          </span>
          <span data-ttu-id="d0e85-355">-1 毫秒的值會指定無限期等候。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-355">A value of –1 millisecond specifies an infinite wait.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0e85-356">嘗試取得指定物件的獨佔鎖定 (在指定的時間內)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-356">Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0e85-357">如果目前執行緒取得鎖定，則為 <see langword="true" />；否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-357">
              <see langword="true" /> if the current thread acquires the lock; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0e85-358">如果值`timeout`轉換成毫秒參數等於-1，此方法相當於<xref:System.Threading.Monitor.Enter%2A>。</span><span class="sxs-lookup"><span data-stu-id="d0e85-358">If the value of the `timeout` parameter converted to milliseconds equals –1, this method is equivalent to <xref:System.Threading.Monitor.Enter%2A>.</span></span> <span data-ttu-id="d0e85-359">如果值`timeout`等於 0，此方法相當於<xref:System.Threading.Monitor.TryEnter%2A>。</span><span class="sxs-lookup"><span data-stu-id="d0e85-359">If the value of `timeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d0e85-360">使用<xref:System.Threading.Monitor>鎖定的物件 （也就是參考類型），不實值類型。</span><span class="sxs-lookup"><span data-stu-id="d0e85-360">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="d0e85-361">如需詳細資訊，請參閱<xref:System.Threading.Monitor>類別主題。</span><span class="sxs-lookup"><span data-stu-id="d0e85-361">For details, see the <xref:System.Threading.Monitor> class topic.</span></span>  
  
 <span data-ttu-id="d0e85-362">若要確保執行緒不進入重要區段，您應該檢查方法的傳回值和關鍵區段中執行程式碼，只有它的傳回值是`true`。</span><span class="sxs-lookup"><span data-stu-id="d0e85-362">To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is `true`.</span></span> <span data-ttu-id="d0e85-363">下列程式碼片段會顯示呼叫這個方法所使用的模式。</span><span class="sxs-lookup"><span data-stu-id="d0e85-363">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="d0e85-364">請注意，您應該呼叫<xref:System.Threading.Monitor.Exit%2A>中`finally`區塊，以確保呼叫執行緒釋放其重要區段的鎖定，發生例外狀況。</span><span class="sxs-lookup"><span data-stu-id="d0e85-364">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#5)]
 [!code-vb[System.Threading.Monitor.TryEnter#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0e85-365">
            <paramref name="obj" /> 參數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-365">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="d0e85-366">
            <paramref name="timeout" /> 的值 (毫秒) 為負數且不等於 <see cref="F:System.Threading.Timeout.Infinite" /> (–1 毫秒)，或大於 <see cref="F:System.Int32.MaxValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-366">The value of <paramref name="timeout" /> in milliseconds is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (–1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static void TryEnter (object obj, int millisecondsTimeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryEnter(object obj, int32 millisecondsTimeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TryEnter (obj As Object, millisecondsTimeout As Integer, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TryEnter(System::Object ^ obj, int millisecondsTimeout, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj * int *  -&gt; unit" Usage="System.Threading.Monitor.TryEnter (obj, millisecondsTimeout, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="lockTaken" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="d0e85-367">要取得鎖定的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-367">The object on which to acquire the lock.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="d0e85-368">等候鎖定的毫秒數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-368">The number of milliseconds to wait for the lock.</span>
          </span>
        </param>
        <param name="lockTaken">
          <span data-ttu-id="d0e85-369">嘗試取得鎖定的結果 (以傳址方式傳遞)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-369">The result of the attempt to acquire the lock, passed by reference.</span>
          </span>
          <span data-ttu-id="d0e85-370">輸入必須是 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-370">The input must be <see langword="false" />.</span>
          </span>
          <span data-ttu-id="d0e85-371">如果已取得鎖定，輸出就是 <see langword="true" />；否則輸出為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-371">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span>
          </span>
          <span data-ttu-id="d0e85-372">嘗試取得鎖定期間，即使發生例外狀況，仍然會設定輸出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-372">The output is set even if an exception occurs during the attempt to acquire the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0e85-373">嘗試在指定的毫秒數內取得指定之物件的獨佔鎖定，並且完整設定值，指出是否採用鎖定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-373">Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0e85-374">如果`millisecondsTimeout`參數等於<xref:System.Threading.Timeout.Infinite>，這個方法相當於<xref:System.Threading.Monitor.Enter%28System.Object%29>。</span><span class="sxs-lookup"><span data-stu-id="d0e85-374">If the `millisecondsTimeout` parameter equals <xref:System.Threading.Timeout.Infinite>, this method is equivalent to <xref:System.Threading.Monitor.Enter%28System.Object%29>.</span></span> <span data-ttu-id="d0e85-375">如果`millisecondsTimeout`等於 0，此方法相當於<xref:System.Threading.Monitor.TryEnter%28System.Object%29>。</span><span class="sxs-lookup"><span data-stu-id="d0e85-375">If `millisecondsTimeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%28System.Object%29>.</span></span>  
  
 <span data-ttu-id="d0e85-376">如果無法取得鎖定，因為發生例外狀況，該變數的指定`lockTaken`參數是`false`這個方法會結束之後。</span><span class="sxs-lookup"><span data-stu-id="d0e85-376">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="d0e85-377">這可讓程式能夠判斷是否需要釋出鎖定，請在所有情況下。</span><span class="sxs-lookup"><span data-stu-id="d0e85-377">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d0e85-378">使用<xref:System.Threading.Monitor>鎖定的物件 （也就是參考類型），不實值類型。</span><span class="sxs-lookup"><span data-stu-id="d0e85-378">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="d0e85-379">如需詳細資訊，請參閱<xref:System.Threading.Monitor>類別主題。</span><span class="sxs-lookup"><span data-stu-id="d0e85-379">For more information, see the <xref:System.Threading.Monitor> class topic.</span></span>  
  
 <span data-ttu-id="d0e85-380">為確保執行緒不進入重要區段，您應該檢查的值`lockTaken`並執行程式碼在重要區段中，只有其值是`true`。</span><span class="sxs-lookup"><span data-stu-id="d0e85-380">To ensure that the thread does not enter the critical section, you should examine the value of `lockTaken` and  execute code in the critical section only if its value is `true`.</span></span> <span data-ttu-id="d0e85-381">下列程式碼片段會顯示呼叫這個方法所使用的模式。</span><span class="sxs-lookup"><span data-stu-id="d0e85-381">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="d0e85-382">請注意，您應該呼叫<xref:System.Threading.Monitor.Exit%2A>中`finally`區塊，以確保呼叫執行緒釋放其重要區段的鎖定，發生例外狀況。</span><span class="sxs-lookup"><span data-stu-id="d0e85-382">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#4)]
 [!code-vb[System.Threading.Monitor.TryEnter#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#4)]  
  
   
  
## Examples  
 <span data-ttu-id="d0e85-383">下列程式碼示範基本模式使用<xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29>方法多載。</span><span class="sxs-lookup"><span data-stu-id="d0e85-383">The following code shows the basic pattern for using the <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> method overload.</span></span> <span data-ttu-id="d0e85-384">這個多載一律設定為傳遞給變數的值`ref`參數 (`ByRef`在 Visual Basic 中) `lockTaken`，即使方法擲回例外狀況，因此變數的值是可靠的方式來測試是否為已鎖定已發行。</span><span class="sxs-lookup"><span data-stu-id="d0e85-384">This overload always sets the value of the variable that is passed to the `ref` parameter (`ByRef` in Visual Basic) `lockTaken`, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Enter#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.enter/cs/example.cs#4)]
 [!code-vb[System.Threading.Monitor.Enter#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.enter/vb/example.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d0e85-385">
            <paramref name="lockTaken" /> 的輸入為 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-385">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0e85-386">
            <paramref name="obj" /> 參數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-386">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="d0e85-387">
            <paramref name="millisecondsTimeout" /> 是負數，且不等於 <see cref="F:System.Threading.Timeout.Infinite" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-387">
              <paramref name="millisecondsTimeout" /> is negative, and not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static void TryEnter (object obj, TimeSpan timeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryEnter(object obj, valuetype System.TimeSpan timeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TryEnter (obj As Object, timeout As TimeSpan, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TryEnter(System::Object ^ obj, TimeSpan timeout, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj * TimeSpan *  -&gt; unit" Usage="System.Threading.Monitor.TryEnter (obj, timeout, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="lockTaken" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="d0e85-388">要取得鎖定的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-388">The object on which to acquire the lock.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="d0e85-389">等候鎖定的時間長度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-389">The amount of time to wait for the lock.</span>
          </span>
          <span data-ttu-id="d0e85-390">-1 毫秒的值會指定無限期等候。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-390">A value of –1 millisecond specifies an infinite wait.</span>
          </span>
        </param>
        <param name="lockTaken">
          <span data-ttu-id="d0e85-391">嘗試取得鎖定的結果 (以傳址方式傳遞)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-391">The result of the attempt to acquire the lock, passed by reference.</span>
          </span>
          <span data-ttu-id="d0e85-392">輸入必須是 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-392">The input must be <see langword="false" />.</span>
          </span>
          <span data-ttu-id="d0e85-393">如果已取得鎖定，輸出就是 <see langword="true" />；否則輸出為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-393">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span>
          </span>
          <span data-ttu-id="d0e85-394">嘗試取得鎖定期間，即使發生例外狀況，仍然會設定輸出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-394">The output is set even if an exception occurs during the attempt to acquire the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0e85-395">嘗試在指定的時間內取得指定之物件的獨佔鎖定，並且完整設定值，指出是否採用鎖定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-395">Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0e85-396">如果值`timeout`轉換成毫秒參數等於-1，此方法相當於<xref:System.Threading.Monitor.Enter%28System.Object%29>。</span><span class="sxs-lookup"><span data-stu-id="d0e85-396">If the value of the `timeout` parameter converted to milliseconds equals –1, this method is equivalent to <xref:System.Threading.Monitor.Enter%28System.Object%29>.</span></span> <span data-ttu-id="d0e85-397">如果值`timeout`等於 0，此方法相當於<xref:System.Threading.Monitor.TryEnter%28System.Object%29>。</span><span class="sxs-lookup"><span data-stu-id="d0e85-397">If the value of `timeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%28System.Object%29>.</span></span>  
  
 <span data-ttu-id="d0e85-398">如果無法取得鎖定，因為發生例外狀況，該變數的指定`lockTaken`參數是`false`這個方法會結束之後。</span><span class="sxs-lookup"><span data-stu-id="d0e85-398">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="d0e85-399">這可讓程式能夠判斷是否需要釋出鎖定，請在所有情況下。</span><span class="sxs-lookup"><span data-stu-id="d0e85-399">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d0e85-400">使用<xref:System.Threading.Monitor>鎖定的物件 （也就是參考類型），不實值類型。</span><span class="sxs-lookup"><span data-stu-id="d0e85-400">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="d0e85-401">如需詳細資訊，請參閱<xref:System.Threading.Monitor>類別主題。</span><span class="sxs-lookup"><span data-stu-id="d0e85-401">For more information, see the <xref:System.Threading.Monitor> class topic.</span></span>  
  
 <span data-ttu-id="d0e85-402">為確保執行緒不進入重要區段，您應該檢查的值`lockTaken`並執行程式碼在重要區段中，只有其值是`true`。</span><span class="sxs-lookup"><span data-stu-id="d0e85-402">To ensure that the thread does not enter the critical section, you should examine the value of `lockTaken` and  execute code in the critical section only if its value is `true`.</span></span> <span data-ttu-id="d0e85-403">下列程式碼片段會顯示呼叫這個方法所使用的模式。</span><span class="sxs-lookup"><span data-stu-id="d0e85-403">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="d0e85-404">請注意，您應該呼叫<xref:System.Threading.Monitor.Exit%2A>中`finally`區塊，以確保呼叫執行緒釋放其重要區段的鎖定，發生例外狀況。</span><span class="sxs-lookup"><span data-stu-id="d0e85-404">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#6)]
 [!code-vb[System.Threading.Monitor.TryEnter#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d0e85-405">
            <paramref name="lockTaken" /> 的輸入為 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-405">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0e85-406">
            <paramref name="obj" /> 參數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-406">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="d0e85-407">
            <paramref name="timeout" /> 的值 (毫秒) 為負數且不等於 <see cref="F:System.Threading.Timeout.Infinite" /> (–1 毫秒)，或大於 <see cref="F:System.Int32.MaxValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-407">The value of <paramref name="timeout" /> in milliseconds is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (–1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Wait">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d0e85-408">釋出物件的鎖並且封鎖目前的執行緒，直到這個執行緒重新取得鎖定為止。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-408">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member Wait : obj -&gt; bool" Usage="System.Threading.Monitor.Wait obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="d0e85-409">要等候的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-409">The object on which to wait.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0e85-410">釋出物件的鎖並且封鎖目前的執行緒，直到這個執行緒重新取得鎖定為止。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-410">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0e85-411">如果因為呼叫端重新取得指定物件的鎖定所以呼叫被傳回，則為 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-411">
              <see langword="true" /> if the call returned because the caller reacquired the lock for the specified object.</span>
          </span>
          <span data-ttu-id="d0e85-412">如果鎖定不被重新取得，則這個方法不會傳回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-412">This method does not return if the lock is not reacquired.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0e85-413">目前擁有指定的物件上鎖定的執行緒叫用此方法，以便釋出物件，以供另一個執行緒存取。</span><span class="sxs-lookup"><span data-stu-id="d0e85-413">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="d0e85-414">呼叫端會在等待重新取得鎖定時遭到封鎖。</span><span class="sxs-lookup"><span data-stu-id="d0e85-414">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="d0e85-415">當呼叫端必須等候另一個執行緒的作業之後會發生的狀態變更時，會呼叫這個方法。</span><span class="sxs-lookup"><span data-stu-id="d0e85-415">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="d0e85-416">當一個執行緒呼叫`Wait`，它會釋放鎖定的物件上並進入物件的等候佇列。</span><span class="sxs-lookup"><span data-stu-id="d0e85-416">When a thread calls `Wait`, it releases the lock on the object and enters the object's waiting queue.</span></span> <span data-ttu-id="d0e85-417">物件的就緒佇列中的下一個執行緒 （如果有的話） 取得鎖定，且物件的獨佔使用。</span><span class="sxs-lookup"><span data-stu-id="d0e85-417">The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object.</span></span> <span data-ttu-id="d0e85-418">所有呼叫的執行緒`Wait`保留在等候佇列，直到它們收到信號，以從<xref:System.Threading.Monitor.Pulse%2A>或<xref:System.Threading.Monitor.PulseAll%2A>、 傳送的鎖定擁有者。</span><span class="sxs-lookup"><span data-stu-id="d0e85-418">All threads that call `Wait` remain in the waiting queue until they receive a signal from <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>, sent by the owner of the lock.</span></span> <span data-ttu-id="d0e85-419">如果`Pulse`會傳送執行緒在等候中佇列的開頭會受到影響。</span><span class="sxs-lookup"><span data-stu-id="d0e85-419">If `Pulse` is sent, only the thread at the head of the waiting queue is affected.</span></span> <span data-ttu-id="d0e85-420">如果`PulseAll`傳送時，會影響所有的執行緒正在等候的物件。</span><span class="sxs-lookup"><span data-stu-id="d0e85-420">If `PulseAll` is sent, all threads that are waiting for the object are affected.</span></span> <span data-ttu-id="d0e85-421">當收到信號時，一或多個執行緒離開等候佇列，並進入就緒佇列。</span><span class="sxs-lookup"><span data-stu-id="d0e85-421">When the signal is received, one or more threads leave the waiting queue and enter the ready queue.</span></span> <span data-ttu-id="d0e85-422">允許就緒佇列中的執行緒重新取得鎖定。</span><span class="sxs-lookup"><span data-stu-id="d0e85-422">A thread in the ready queue is permitted to reacquire the lock.</span></span>  
  
 <span data-ttu-id="d0e85-423">這個方法傳回時呼叫的執行緒重新取得鎖定的物件。</span><span class="sxs-lookup"><span data-stu-id="d0e85-423">This method returns when the calling thread reacquires the lock on the object.</span></span> <span data-ttu-id="d0e85-424">請注意，這個方法會無限期地封鎖的鎖定擁有者不會呼叫如果`Pulse`或`PulseAll`。</span><span class="sxs-lookup"><span data-stu-id="d0e85-424">Note that this method blocks indefinitely if the holder of the lock does not call `Pulse` or `PulseAll`.</span></span>  
  
 <span data-ttu-id="d0e85-425">呼叫端執行`Wait`一次，不論次數<xref:System.Threading.Monitor.Enter%2A>已叫用指定的物件。</span><span class="sxs-lookup"><span data-stu-id="d0e85-425">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="d0e85-426">就概念而言，`Wait`方法儲存的呼叫端叫用的次數`Enter`物件上，並叫用`Exit`任意多次，視需要以完全釋放鎖定的物件。</span><span class="sxs-lookup"><span data-stu-id="d0e85-426">Conceptually, the `Wait` method stores the number of times the caller invoked `Enter` on the object and invokes `Exit` as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="d0e85-427">等候重新取得物件時再封鎖呼叫端。</span><span class="sxs-lookup"><span data-stu-id="d0e85-427">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="d0e85-428">當呼叫端重新取得鎖定時，系統就會呼叫`Enter`視需要還原已儲存的次數`Enter`呼叫端的計數。</span><span class="sxs-lookup"><span data-stu-id="d0e85-428">When the caller reacquires the lock, the system calls `Enter` as many times as necessary to restore the saved `Enter` count for the caller.</span></span> <span data-ttu-id="d0e85-429">呼叫`Wait`釋放的鎖定指定的物件; 如果呼叫端的其他物件的鎖定擁有者，這些鎖定不會被釋放。</span><span class="sxs-lookup"><span data-stu-id="d0e85-429">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
 <span data-ttu-id="d0e85-430">請注意，同步處理的物件擁有數個的參考，包括之執行緒的目前擁有鎖定，參考到就緒佇列，其中包含要取得的鎖定的執行緒，以及參考等候佇列中，參考它包含正在等候的物件的狀態變更通知的執行緒。</span><span class="sxs-lookup"><span data-stu-id="d0e85-430">Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="d0e85-431"><xref:System.Threading.Monitor.Pulse%2A>， <xref:System.Threading.Monitor.PulseAll%2A>，和`Wait`方法必須從叫用同步處理的程式碼區塊內。</span><span class="sxs-lookup"><span data-stu-id="d0e85-431">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="d0e85-432">備註<xref:System.Threading.Monitor.Pulse%2A>方法說明發生什麼事如果<xref:System.Threading.Monitor.Pulse%2A>時沒有任何執行緒正在等候呼叫。</span><span class="sxs-lookup"><span data-stu-id="d0e85-432">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0e85-433">
            <paramref name="obj" /> 參數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-433">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="d0e85-434">呼叫執行緒沒有指定物件的鎖定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-434">The calling thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">
          <span data-ttu-id="d0e85-435">叫用 <see langword="Wait" /> 的執行緒稍後會從等候狀態被插斷。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-435">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span>
          </span>
          <span data-ttu-id="d0e85-436">當另一個執行緒呼叫此執行緒的 <see cref="M:System.Threading.Thread.Interrupt" /> 方法時，就會發生此狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-436">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member Wait : obj * int -&gt; bool" Usage="System.Threading.Monitor.Wait (obj, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="d0e85-437">要等候的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-437">The object on which to wait.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="d0e85-438">在執行緒進入就緒佇列之前要等候的毫秒數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-438">The number of milliseconds to wait before the thread enters the ready queue.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0e85-439">釋出物件的鎖並且封鎖目前的執行緒，直到這個執行緒重新取得鎖定為止。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-439">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
          <span data-ttu-id="d0e85-440">如果超過指定的逾時間隔時間，執行緒會進入就緒序列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-440">If the specified time-out interval elapses, the thread enters the ready queue.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0e85-441">如果在經過指定的時間之前重新取得鎖定，則為 <see langword="true" />；如果在經過指定的時間之後重新取得鎖定，則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-441">
              <see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span>
          </span>
          <span data-ttu-id="d0e85-442">要等到重新取得鎖定之後，此方法才會傳回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-442">The method does not return until the lock is reacquired.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0e85-443">這個方法不會傳回它在鎖的獨佔鎖定直到`obj`參數。</span><span class="sxs-lookup"><span data-stu-id="d0e85-443">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="d0e85-444">目前擁有指定的物件上鎖定的執行緒叫用此方法，以便釋出物件，以供另一個執行緒存取。</span><span class="sxs-lookup"><span data-stu-id="d0e85-444">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="d0e85-445">呼叫端會在等待重新取得鎖定時遭到封鎖。</span><span class="sxs-lookup"><span data-stu-id="d0e85-445">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="d0e85-446">當呼叫端必須等候另一個執行緒的作業之後會發生的狀態變更時，會呼叫這個方法。</span><span class="sxs-lookup"><span data-stu-id="d0e85-446">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="d0e85-447">逾時可確保在目前的執行緒在如果另一個執行緒釋放的鎖定，而不會第一個呼叫不會無限期地封鎖<xref:System.Threading.Monitor.Pulse%2A>或<xref:System.Threading.Monitor.PulseAll%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="d0e85-447">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="d0e85-448">它也會將執行緒移至就緒佇列，並略過比較早等候佇列中的其他執行緒，使它可以更快取得鎖定。</span><span class="sxs-lookup"><span data-stu-id="d0e85-448">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="d0e85-449">執行緒可以測試的傳回值<xref:System.Threading.Monitor.Wait%2A>方法，以判斷它是否重新在逾時前的鎖定。執行緒可以評估的條件，導致它進入等候，而且如果必要的呼叫<xref:System.Threading.Monitor.Wait%2A>方法一次。</span><span class="sxs-lookup"><span data-stu-id="d0e85-449">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="d0e85-450">當一個執行緒呼叫`Wait`，它會釋放鎖定的物件上並進入物件的等候佇列。</span><span class="sxs-lookup"><span data-stu-id="d0e85-450">When a thread calls `Wait`, it releases the lock on the object and enters the object's waiting queue.</span></span> <span data-ttu-id="d0e85-451">物件的就緒佇列中的下一個執行緒 （如果有的話） 取得鎖定，且物件的獨佔使用。</span><span class="sxs-lookup"><span data-stu-id="d0e85-451">The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object.</span></span> <span data-ttu-id="d0e85-452">叫用執行緒`Wait`仍會留在等候佇列，直到擁有鎖定的執行緒會叫用<xref:System.Threading.Monitor.PulseAll%2A>，或它是在佇列中的下一步，並保持鎖定的執行緒叫用<xref:System.Threading.Monitor.Pulse%2A>。</span><span class="sxs-lookup"><span data-stu-id="d0e85-452">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="d0e85-453">不過，如果`millisecondsTimeout`另一個執行緒叫用這個物件之前經過<xref:System.Threading.Monitor.Pulse%2A>或<xref:System.Threading.Monitor.PulseAll%2A>方法，原始執行緒時，會移至就緒佇列上，才能重新取得鎖定。</span><span class="sxs-lookup"><span data-stu-id="d0e85-453">However, if `millisecondsTimeout` elapses before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d0e85-454">如果<xref:System.Threading.Timeout.Infinite>指定`millisecondsTimeout`參數，這個方法會封鎖無限期除非鎖定的擁有者呼叫<xref:System.Threading.Monitor.Pulse%2A>或<xref:System.Threading.Monitor.PulseAll%2A>。</span><span class="sxs-lookup"><span data-stu-id="d0e85-454">If <xref:System.Threading.Timeout.Infinite> is specified for the `millisecondsTimeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="d0e85-455">如果`millisecondsTimeout`等於 0，呼叫的執行緒`Wait`釋出鎖定，然後才能重新取得鎖定立即進入就緒佇列。</span><span class="sxs-lookup"><span data-stu-id="d0e85-455">If `millisecondsTimeout` equals 0, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="d0e85-456">呼叫端執行`Wait`一次，不論次數<xref:System.Threading.Monitor.Enter%2A>已叫用指定的物件。</span><span class="sxs-lookup"><span data-stu-id="d0e85-456">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="d0e85-457">就概念而言，`Wait`方法儲存的呼叫端叫用的次數<xref:System.Threading.Monitor.Enter%2A>物件上，並叫用<xref:System.Threading.Monitor.Exit%2A>任意多次，視需要以完全釋放鎖定的物件。</span><span class="sxs-lookup"><span data-stu-id="d0e85-457">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="d0e85-458">等候重新取得物件時再封鎖呼叫端。</span><span class="sxs-lookup"><span data-stu-id="d0e85-458">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="d0e85-459">當呼叫端重新取得鎖定時，系統就會呼叫<xref:System.Threading.Monitor.Enter%2A>視需要還原已儲存的次數<xref:System.Threading.Monitor.Enter%2A>呼叫端的計數。</span><span class="sxs-lookup"><span data-stu-id="d0e85-459">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="d0e85-460">呼叫`Wait`釋放的鎖定指定的物件; 如果呼叫端的其他物件的鎖定擁有者，這些鎖定不會被釋放。</span><span class="sxs-lookup"><span data-stu-id="d0e85-460">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d0e85-461">同步處理的物件擁有數個參考，包括之執行緒的目前擁有鎖定，參考到就緒佇列，其中包含要取得的鎖定的執行緒，以及參考等候佇列，其中包含的參考正在等候的物件的狀態變更通知的執行緒。</span><span class="sxs-lookup"><span data-stu-id="d0e85-461">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="d0e85-462"><xref:System.Threading.Monitor.Pulse%2A>， <xref:System.Threading.Monitor.PulseAll%2A>，和`Wait`方法必須從叫用同步處理的程式碼區塊內。</span><span class="sxs-lookup"><span data-stu-id="d0e85-462">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="d0e85-463">備註<xref:System.Threading.Monitor.Pulse%2A>方法說明發生什麼事如果<xref:System.Threading.Monitor.Pulse%2A>時沒有任何執行緒正在等候呼叫。</span><span class="sxs-lookup"><span data-stu-id="d0e85-463">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0e85-464">
            <paramref name="obj" /> 參數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-464">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="d0e85-465">呼叫執行緒沒有指定物件的鎖定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-465">The calling thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">
          <span data-ttu-id="d0e85-466">叫用 <see langword="Wait" /> 的執行緒稍後會從等候狀態被插斷。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-466">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span>
          </span>
          <span data-ttu-id="d0e85-467">當另一個執行緒呼叫此執行緒的 <see cref="M:System.Threading.Thread.Interrupt" /> 方法時，就會發生此狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-467">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="d0e85-468">
            <paramref name="millisecondsTimeout" /> 參數的值為負，且不等於 <see cref="F:System.Threading.Timeout.Infinite" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-468">The value of the <paramref name="millisecondsTimeout" /> parameter is negative, and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Wait : obj * TimeSpan -&gt; bool" Usage="System.Threading.Monitor.Wait (obj, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="d0e85-469">要等候的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-469">The object on which to wait.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="d0e85-470">
            <see cref="T:System.TimeSpan" />，代表在執行緒進入就緒佇列之前要等候的時間量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-470">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait before the thread enters the ready queue.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0e85-471">釋出物件的鎖並且封鎖目前的執行緒，直到這個執行緒重新取得鎖定為止。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-471">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
          <span data-ttu-id="d0e85-472">如果超過指定的逾時間隔時間，執行緒會進入就緒序列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-472">If the specified time-out interval elapses, the thread enters the ready queue.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0e85-473">如果在經過指定的時間之前重新取得鎖定，則為 <see langword="true" />；如果在經過指定的時間之後重新取得鎖定，則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-473">
              <see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span>
          </span>
          <span data-ttu-id="d0e85-474">要等到重新取得鎖定之後，此方法才會傳回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-474">The method does not return until the lock is reacquired.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0e85-475">這個方法不會傳回它在鎖的獨佔鎖定直到`obj`參數。</span><span class="sxs-lookup"><span data-stu-id="d0e85-475">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="d0e85-476">目前擁有指定的物件上鎖定的執行緒叫用此方法，以便釋出物件，以供另一個執行緒存取。</span><span class="sxs-lookup"><span data-stu-id="d0e85-476">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="d0e85-477">呼叫端會在等待重新取得鎖定時遭到封鎖。</span><span class="sxs-lookup"><span data-stu-id="d0e85-477">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="d0e85-478">當呼叫端必須等候另一個執行緒的作業之後會發生的狀態變更時，會呼叫這個方法。</span><span class="sxs-lookup"><span data-stu-id="d0e85-478">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="d0e85-479">逾時可確保在目前的執行緒在如果另一個執行緒釋放的鎖定，而不會第一個呼叫不會無限期地封鎖<xref:System.Threading.Monitor.Pulse%2A>或<xref:System.Threading.Monitor.PulseAll%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="d0e85-479">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="d0e85-480">它也會將執行緒移至就緒佇列，並略過比較早等候佇列中的其他執行緒，使它可以更快取得鎖定。</span><span class="sxs-lookup"><span data-stu-id="d0e85-480">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="d0e85-481">執行緒可以測試的傳回值<xref:System.Threading.Monitor.Wait%2A>方法，以判斷它是否重新在逾時前的鎖定。執行緒可以評估的條件，導致它進入等候，而且如果必要的呼叫<xref:System.Threading.Monitor.Wait%2A>方法一次。</span><span class="sxs-lookup"><span data-stu-id="d0e85-481">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="d0e85-482">當一個執行緒呼叫`Wait`，它會釋放鎖定的物件上並進入物件的等候佇列。</span><span class="sxs-lookup"><span data-stu-id="d0e85-482">When a thread calls `Wait`, it releases the lock on the object and enters the object's waiting queue.</span></span> <span data-ttu-id="d0e85-483">物件的就緒佇列中的下一個執行緒 （如果有的話） 取得鎖定，且物件的獨佔使用。</span><span class="sxs-lookup"><span data-stu-id="d0e85-483">The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object.</span></span> <span data-ttu-id="d0e85-484">叫用執行緒`Wait`仍會留在等候佇列，直到擁有鎖定的執行緒會叫用<xref:System.Threading.Monitor.PulseAll%2A>，或它是在佇列中的下一步，並保持鎖定的執行緒叫用<xref:System.Threading.Monitor.Pulse%2A>。</span><span class="sxs-lookup"><span data-stu-id="d0e85-484">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="d0e85-485">不過，如果`timeout`另一個執行緒叫用這個物件之前經過<xref:System.Threading.Monitor.Pulse%2A>或<xref:System.Threading.Monitor.PulseAll%2A>方法，原始執行緒時，會移至就緒佇列上，才能重新取得鎖定。</span><span class="sxs-lookup"><span data-stu-id="d0e85-485">However, if `timeout` elapses before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d0e85-486">如果<xref:System.TimeSpan>代表-1 毫秒指定`timeout`參數，這個方法會封鎖無限期除非鎖定的擁有者呼叫<xref:System.Threading.Monitor.Pulse%2A>或<xref:System.Threading.Monitor.PulseAll%2A>。</span><span class="sxs-lookup"><span data-stu-id="d0e85-486">If a <xref:System.TimeSpan> representing –1 millisecond is specified for the `timeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="d0e85-487">如果`timeout`為 0 毫秒，呼叫的執行緒`Wait`釋出鎖定，然後才能重新取得鎖定立即進入就緒佇列。</span><span class="sxs-lookup"><span data-stu-id="d0e85-487">If `timeout` is 0 milliseconds, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="d0e85-488">呼叫端執行`Wait`一次，不論次數<xref:System.Threading.Monitor.Enter%2A>已叫用指定的物件。</span><span class="sxs-lookup"><span data-stu-id="d0e85-488">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="d0e85-489">就概念而言，`Wait`方法儲存的呼叫端叫用的次數<xref:System.Threading.Monitor.Enter%2A>物件上，並叫用<xref:System.Threading.Monitor.Exit%2A>任意多次，視需要以完全釋放鎖定的物件。</span><span class="sxs-lookup"><span data-stu-id="d0e85-489">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="d0e85-490">等候重新取得物件時再封鎖呼叫端。</span><span class="sxs-lookup"><span data-stu-id="d0e85-490">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="d0e85-491">當呼叫端重新取得鎖定時，系統就會呼叫<xref:System.Threading.Monitor.Enter%2A>視需要還原已儲存的次數<xref:System.Threading.Monitor.Enter%2A>呼叫端的計數。</span><span class="sxs-lookup"><span data-stu-id="d0e85-491">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="d0e85-492">呼叫`Wait`釋放的鎖定指定的物件; 如果呼叫端的其他物件的鎖定擁有者，這些鎖定不會被釋放。</span><span class="sxs-lookup"><span data-stu-id="d0e85-492">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d0e85-493">同步處理的物件擁有數個參考，包括之執行緒的目前擁有鎖定，參考到就緒佇列，其中包含要取得的鎖定的執行緒，以及參考等候佇列，其中包含的參考正在等候的物件的狀態變更通知的執行緒。</span><span class="sxs-lookup"><span data-stu-id="d0e85-493">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="d0e85-494"><xref:System.Threading.Monitor.Pulse%2A>， <xref:System.Threading.Monitor.PulseAll%2A>，和`Wait`方法必須從叫用同步處理的程式碼區塊內。</span><span class="sxs-lookup"><span data-stu-id="d0e85-494">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="d0e85-495">備註<xref:System.Threading.Monitor.Pulse%2A>方法說明發生什麼事如果<xref:System.Threading.Monitor.Pulse%2A>時沒有任何執行緒正在等候呼叫。</span><span class="sxs-lookup"><span data-stu-id="d0e85-495">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0e85-496">
            <paramref name="obj" /> 參數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-496">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="d0e85-497">呼叫執行緒沒有指定物件的鎖定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-497">The calling thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">
          <span data-ttu-id="d0e85-498">叫用 <see langword="Wait" /> 的執行緒稍後會從等候狀態被插斷。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-498">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span>
          </span>
          <span data-ttu-id="d0e85-499">當另一個執行緒呼叫此執行緒的 <see cref="M:System.Threading.Thread.Interrupt" /> 方法時，就會發生此狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-499">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="d0e85-500">
            <paramref name="timeout" /> 參數的毫秒值為負，且不表示 <see cref="F:System.Threading.Timeout.Infinite" /> (-1 毫秒)，或大於 <see cref="F:System.Int32.MaxValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-500">The value of the <paramref name="timeout" /> parameter in milliseconds is negative and does not represent <see cref="F:System.Threading.Timeout.Infinite" /> (–1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member Wait : obj * int * bool -&gt; bool" Usage="System.Threading.Monitor.Wait (obj, millisecondsTimeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="d0e85-501">要等候的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-501">The object on which to wait.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="d0e85-502">在執行緒進入就緒佇列之前要等候的毫秒數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-502">The number of milliseconds to wait before the thread enters the ready queue.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="d0e85-503">在等候前離開內容的同步化領域 (如果在同步化內容中) 並重新取得它，則為 <see langword="true" />；否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-503">
              <see langword="true" /> to exit and reacquire the synchronization domain for the context (if in a synchronized context) before the wait; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0e85-504">釋出物件的鎖並且封鎖目前的執行緒，直到這個執行緒重新取得鎖定為止。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-504">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
          <span data-ttu-id="d0e85-505">如果超過指定的逾時間隔時間，執行緒會進入就緒序列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-505">If the specified time-out interval elapses, the thread enters the ready queue.</span>
          </span>
          <span data-ttu-id="d0e85-506">這個方法也會指定等候之前和重新取得之後，是否要離開內容 (Context) 的同步處理領域 (如果在同步化內容中的話)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-506">This method also specifies whether the synchronization domain for the context (if in a synchronized context) is exited before the wait and reacquired afterward.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0e85-507">如果在經過指定的時間之前重新取得鎖定，則為 <see langword="true" />；如果在經過指定的時間之後重新取得鎖定，則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-507">
              <see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span>
          </span>
          <span data-ttu-id="d0e85-508">要等到重新取得鎖定之後，此方法才會傳回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-508">The method does not return until the lock is reacquired.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0e85-509">這個方法不會傳回它在鎖的獨佔鎖定直到`obj`參數。</span><span class="sxs-lookup"><span data-stu-id="d0e85-509">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="d0e85-510">目前擁有指定的物件上鎖定的執行緒叫用此方法，以便釋出物件，以供另一個執行緒存取。</span><span class="sxs-lookup"><span data-stu-id="d0e85-510">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="d0e85-511">呼叫端會在等待重新取得鎖定時遭到封鎖。</span><span class="sxs-lookup"><span data-stu-id="d0e85-511">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="d0e85-512">當呼叫端必須等候另一個執行緒的作業之後會發生的狀態變更時，會呼叫這個方法。</span><span class="sxs-lookup"><span data-stu-id="d0e85-512">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="d0e85-513">逾時可確保在目前的執行緒在如果另一個執行緒釋放的鎖定，而不會第一個呼叫不會無限期地封鎖<xref:System.Threading.Monitor.Pulse%2A>或<xref:System.Threading.Monitor.PulseAll%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="d0e85-513">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="d0e85-514">它也會將執行緒移至就緒佇列，並略過比較早等候佇列中的其他執行緒，使它可以更快取得鎖定。</span><span class="sxs-lookup"><span data-stu-id="d0e85-514">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="d0e85-515">執行緒可以測試的傳回值<xref:System.Threading.Monitor.Wait%2A>方法，以判斷它是否重新在逾時前的鎖定。執行緒可以評估的條件，導致它進入等候，而且如果必要的呼叫<xref:System.Threading.Monitor.Wait%2A>方法一次。</span><span class="sxs-lookup"><span data-stu-id="d0e85-515">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="d0e85-516">當一個執行緒呼叫`Wait`，它會釋放鎖定，並進入等候佇列。</span><span class="sxs-lookup"><span data-stu-id="d0e85-516">When a thread calls `Wait`, it releases the lock and enters the waiting queue.</span></span> <span data-ttu-id="d0e85-517">此時，就緒佇列中的下一個執行緒 （如果有的話） 可取得其控制權的鎖定。</span><span class="sxs-lookup"><span data-stu-id="d0e85-517">At this point, the next thread in the ready queue (if there is one) is allowed to take control of the lock.</span></span> <span data-ttu-id="d0e85-518">叫用執行緒`Wait`仍會留在等候佇列，直到擁有鎖定的執行緒會叫用<xref:System.Threading.Monitor.PulseAll%2A>，或它是在佇列中的下一步，並保持鎖定的執行緒叫用<xref:System.Threading.Monitor.Pulse%2A>。</span><span class="sxs-lookup"><span data-stu-id="d0e85-518">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="d0e85-519">不過，如果`millisecondsTimeout`另一個執行緒叫用這個物件之前經過<xref:System.Threading.Monitor.Pulse%2A>或<xref:System.Threading.Monitor.PulseAll%2A>方法，原始執行緒時，會移至就緒佇列上，才能重新取得鎖定。</span><span class="sxs-lookup"><span data-stu-id="d0e85-519">However, if `millisecondsTimeout` elapses before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d0e85-520">如果<xref:System.Threading.Timeout.Infinite>指定`millisecondsTimeout`參數，這個方法會封鎖無限期除非鎖定的擁有者呼叫<xref:System.Threading.Monitor.Pulse%2A>或<xref:System.Threading.Monitor.PulseAll%2A>。</span><span class="sxs-lookup"><span data-stu-id="d0e85-520">If <xref:System.Threading.Timeout.Infinite> is specified for the `millisecondsTimeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="d0e85-521">如果`millisecondsTimeout`等於 0，呼叫的執行緒`Wait`釋出鎖定，然後才能重新取得鎖定立即進入就緒佇列。</span><span class="sxs-lookup"><span data-stu-id="d0e85-521">If `millisecondsTimeout` equals 0, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="d0e85-522">呼叫端執行`Wait`一次，不論次數<xref:System.Threading.Monitor.Enter%2A>已叫用指定的物件。</span><span class="sxs-lookup"><span data-stu-id="d0e85-522">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="d0e85-523">就概念而言，`Wait`方法儲存的呼叫端叫用的次數<xref:System.Threading.Monitor.Enter%2A>物件上，並叫用<xref:System.Threading.Monitor.Exit%2A>任意多次，視需要以完全釋放鎖定的物件。</span><span class="sxs-lookup"><span data-stu-id="d0e85-523">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="d0e85-524">等候重新取得物件時再封鎖呼叫端。</span><span class="sxs-lookup"><span data-stu-id="d0e85-524">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="d0e85-525">當呼叫端重新取得鎖定時，系統就會呼叫<xref:System.Threading.Monitor.Enter%2A>視需要還原已儲存的次數<xref:System.Threading.Monitor.Enter%2A>呼叫端的計數。</span><span class="sxs-lookup"><span data-stu-id="d0e85-525">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="d0e85-526">呼叫`Wait`釋放的鎖定指定的物件; 如果呼叫端的其他物件的鎖定擁有者，這些鎖定不會被釋放。</span><span class="sxs-lookup"><span data-stu-id="d0e85-526">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d0e85-527">同步處理的物件擁有數個參考，包括之執行緒的目前擁有鎖定，參考到就緒佇列，其中包含要取得的鎖定的執行緒，以及參考等候佇列，其中包含的參考正在等候的物件的狀態變更通知的執行緒。</span><span class="sxs-lookup"><span data-stu-id="d0e85-527">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="d0e85-528"><xref:System.Threading.Monitor.Pulse%2A>， <xref:System.Threading.Monitor.PulseAll%2A>，和`Wait`方法必須從叫用同步處理的程式碼區塊內。</span><span class="sxs-lookup"><span data-stu-id="d0e85-528">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="d0e85-529">備註<xref:System.Threading.Monitor.Pulse%2A>方法說明發生什麼事如果<xref:System.Threading.Monitor.Pulse%2A>時沒有任何執行緒正在等候呼叫。</span><span class="sxs-lookup"><span data-stu-id="d0e85-529">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="d0e85-530">結束內容的資訊</span><span class="sxs-lookup"><span data-stu-id="d0e85-530">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="d0e85-531">`exitContext`參數沒有任何作用，除非<xref:System.Threading.Monitor.Wait%2A>方法從非預設的 managed 內容內呼叫。</span><span class="sxs-lookup"><span data-stu-id="d0e85-531">The`exitContext` parameter has no effect unless the <xref:System.Threading.Monitor.Wait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="d0e85-532">如果執行緒位呼叫內部的衍生自類別的執行個體此情形<xref:System.ContextBoundObject>。</span><span class="sxs-lookup"><span data-stu-id="d0e85-532">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="d0e85-533">即使您目前正在執行的方法不衍生自的類別上<xref:System.ContextBoundObject>、 like <xref:System.String>，您可以在非預設的內容中如果<xref:System.ContextBoundObject>您目前的應用程式定義域中的堆疊上。</span><span class="sxs-lookup"><span data-stu-id="d0e85-533">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="d0e85-534">當您的程式碼在非預設的內容中執行時，指定`true`如`exitContext`造成執行緒結束的非預設的 managed 的內容 (也就是轉換至預設內容) 執行之前<xref:System.Threading.Monitor.Wait%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="d0e85-534">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.Monitor.Wait%2A> method.</span></span> <span data-ttu-id="d0e85-535">它會傳回原始的非預設內容呼叫之後<xref:System.Threading.Monitor.Wait%2A>方法完成。</span><span class="sxs-lookup"><span data-stu-id="d0e85-535">It returns to the original nondefault context after the call to the <xref:System.Threading.Monitor.Wait%2A> method completes.</span></span>  
  
 <span data-ttu-id="d0e85-536">這有助於進行此內容繫結類別具有<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>套用的屬性。</span><span class="sxs-lookup"><span data-stu-id="d0e85-536">This can be useful when the context-bound class has the <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> attribute applied.</span></span> <span data-ttu-id="d0e85-537">在此情況下，類別的成員的所有呼叫都會自動同步都處理，且同步處理網域為類別的程式碼的整個本文。</span><span class="sxs-lookup"><span data-stu-id="d0e85-537">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="d0e85-538">如果成員的呼叫堆疊中的程式碼會呼叫<xref:System.Threading.Monitor.Wait%2A>方法，並指定`true`如`exitContext`，執行緒結束的同步處理網域，讓呼叫物件的任何成員，以繼續進行遭到封鎖的執行緒。</span><span class="sxs-lookup"><span data-stu-id="d0e85-538">If code in the call stack of a member calls the <xref:System.Threading.Monitor.Wait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="d0e85-539">當<xref:System.Threading.Monitor.Wait%2A>方法傳回時，進行呼叫的執行緒必須等待重新輸入同步處理網域。</span><span class="sxs-lookup"><span data-stu-id="d0e85-539">When the <xref:System.Threading.Monitor.Wait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0e85-540">
            <paramref name="obj" /> 參數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-540">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="d0e85-541">
            <see langword="Wait" /> 不是從同步處理的程式碼區塊中呼叫。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-541">
              <see langword="Wait" /> is not invoked from within a synchronized block of code.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">
          <span data-ttu-id="d0e85-542">叫用 <see langword="Wait" /> 的執行緒稍後會從等候狀態被插斷。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-542">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span>
          </span>
          <span data-ttu-id="d0e85-543">當另一個執行緒呼叫此執行緒的 <see cref="M:System.Threading.Thread.Interrupt" /> 方法時，就會發生此狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-543">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="d0e85-544">
            <paramref name="millisecondsTimeout" /> 參數的值為負，且不等於 <see cref="F:System.Threading.Timeout.Infinite" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-544">The value of the <paramref name="millisecondsTimeout" /> parameter is negative, and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member Wait : obj * TimeSpan * bool -&gt; bool" Usage="System.Threading.Monitor.Wait (obj, timeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="d0e85-545">要等候的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-545">The object on which to wait.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="d0e85-546">
            <see cref="T:System.TimeSpan" />，代表在執行緒進入就緒佇列之前要等候的時間量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-546">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait before the thread enters the ready queue.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="d0e85-547">在等候前離開內容的同步化領域 (如果在同步化內容中) 並重新取得它，則為 <see langword="true" />；否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-547">
              <see langword="true" /> to exit and reacquire the synchronization domain for the context (if in a synchronized context) before the wait; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0e85-548">釋出物件的鎖並且封鎖目前的執行緒，直到這個執行緒重新取得鎖定為止。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-548">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
          <span data-ttu-id="d0e85-549">如果超過指定的逾時間隔時間，執行緒會進入就緒序列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-549">If the specified time-out interval elapses, the thread enters the ready queue.</span>
          </span>
          <span data-ttu-id="d0e85-550">在等候之前和重新取得領域之後，可選擇性地結束同步化內容的同步處理領域。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-550">Optionally exits the synchronization domain for the synchronized context before the wait and reacquires the domain afterward.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0e85-551">如果在經過指定的時間之前重新取得鎖定，則為 <see langword="true" />；如果在經過指定的時間之後重新取得鎖定，則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-551">
              <see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span>
          </span>
          <span data-ttu-id="d0e85-552">要等到重新取得鎖定之後，此方法才會傳回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-552">The method does not return until the lock is reacquired.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0e85-553">這個方法不會傳回它在鎖的獨佔鎖定直到`obj`參數。</span><span class="sxs-lookup"><span data-stu-id="d0e85-553">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="d0e85-554">目前擁有指定的物件上鎖定的執行緒叫用此方法，以便釋出物件，以供另一個執行緒存取。</span><span class="sxs-lookup"><span data-stu-id="d0e85-554">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="d0e85-555">呼叫端會在等待重新取得鎖定時遭到封鎖。</span><span class="sxs-lookup"><span data-stu-id="d0e85-555">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="d0e85-556">當呼叫端必須等候另一個執行緒的作業之後會發生的狀態變更時，會呼叫這個方法。</span><span class="sxs-lookup"><span data-stu-id="d0e85-556">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="d0e85-557">逾時可確保在目前的執行緒在如果另一個執行緒釋放的鎖定，而不會第一個呼叫不會無限期地封鎖<xref:System.Threading.Monitor.Pulse%2A>或<xref:System.Threading.Monitor.PulseAll%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="d0e85-557">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="d0e85-558">它也會將執行緒移至就緒佇列，並略過比較早等候佇列中的其他執行緒，使它可以更快取得鎖定。</span><span class="sxs-lookup"><span data-stu-id="d0e85-558">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="d0e85-559">執行緒可以測試的傳回值<xref:System.Threading.Monitor.Wait%2A>方法，以判斷它是否重新在逾時前的鎖定。執行緒可以評估的條件，導致它進入等候，而且如果必要的呼叫<xref:System.Threading.Monitor.Wait%2A>方法一次。</span><span class="sxs-lookup"><span data-stu-id="d0e85-559">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="d0e85-560">當一個執行緒呼叫`Wait`，它會釋放鎖定，並進入等候佇列。</span><span class="sxs-lookup"><span data-stu-id="d0e85-560">When a thread calls `Wait`, it releases the lock and enters the waiting queue.</span></span> <span data-ttu-id="d0e85-561">此時，就緒佇列中的下一個執行緒 （如果有的話） 可取得其控制權的鎖定。</span><span class="sxs-lookup"><span data-stu-id="d0e85-561">At this point, the next thread in the ready queue (if there is one) is allowed to take control of the lock.</span></span> <span data-ttu-id="d0e85-562">叫用執行緒`Wait`仍會留在等候佇列，直到擁有鎖定的執行緒會叫用<xref:System.Threading.Monitor.PulseAll%2A>，或它是在佇列中的下一步，並保持鎖定的執行緒叫用<xref:System.Threading.Monitor.Pulse%2A>。</span><span class="sxs-lookup"><span data-stu-id="d0e85-562">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="d0e85-563">不過，如果`timeout`另一個執行緒叫用此物件經過毫秒<xref:System.Threading.Monitor.Pulse%2A>或<xref:System.Threading.Monitor.PulseAll%2A>方法，原始執行緒時，會移至就緒佇列上，才能重新取得鎖定。</span><span class="sxs-lookup"><span data-stu-id="d0e85-563">However, if `timeout` milliseconds elapse before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d0e85-564">如果<xref:System.TimeSpan>代表-1 毫秒指定`timeout`參數，這個方法會封鎖無限期除非鎖定的擁有者呼叫<xref:System.Threading.Monitor.Pulse%2A>或<xref:System.Threading.Monitor.PulseAll%2A>。</span><span class="sxs-lookup"><span data-stu-id="d0e85-564">If a <xref:System.TimeSpan> representing -1 millisecond is specified for the `timeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="d0e85-565">如果`timeout`為 0 毫秒，呼叫的執行緒`Wait`釋出鎖定，然後才能重新取得鎖定立即進入就緒佇列。</span><span class="sxs-lookup"><span data-stu-id="d0e85-565">If `timeout` is 0 milliseconds, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="d0e85-566">呼叫端執行`Wait`一次，不論次數<xref:System.Threading.Monitor.Enter%2A>已叫用指定的物件。</span><span class="sxs-lookup"><span data-stu-id="d0e85-566">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="d0e85-567">就概念而言，`Wait`方法儲存的呼叫端叫用的次數<xref:System.Threading.Monitor.Enter%2A>物件上，並叫用<xref:System.Threading.Monitor.Exit%2A>任意多次，視需要以完全釋放鎖定的物件。</span><span class="sxs-lookup"><span data-stu-id="d0e85-567">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="d0e85-568">等候重新取得物件時再封鎖呼叫端。</span><span class="sxs-lookup"><span data-stu-id="d0e85-568">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="d0e85-569">當呼叫端重新取得鎖定時，系統就會呼叫<xref:System.Threading.Monitor.Enter%2A>視需要還原已儲存的次數<xref:System.Threading.Monitor.Enter%2A>呼叫端的計數。</span><span class="sxs-lookup"><span data-stu-id="d0e85-569">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="d0e85-570">呼叫`Wait`釋放的鎖定指定的物件; 如果呼叫端的其他物件的鎖定擁有者，這些鎖定不會被釋放。</span><span class="sxs-lookup"><span data-stu-id="d0e85-570">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d0e85-571">同步處理的物件擁有數個參考，包括之執行緒的目前擁有鎖定，參考到就緒佇列，其中包含要取得的鎖定的執行緒，以及參考等候佇列，其中包含的參考正在等候的物件的狀態變更通知的執行緒。</span><span class="sxs-lookup"><span data-stu-id="d0e85-571">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="d0e85-572"><xref:System.Threading.Monitor.Pulse%2A>， <xref:System.Threading.Monitor.PulseAll%2A>，和`Wait`方法必須從叫用同步處理的程式碼區塊內。</span><span class="sxs-lookup"><span data-stu-id="d0e85-572">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="d0e85-573">備註<xref:System.Threading.Monitor.Pulse%2A>方法說明發生什麼事如果<xref:System.Threading.Monitor.Pulse%2A>時沒有任何執行緒正在等候呼叫。</span><span class="sxs-lookup"><span data-stu-id="d0e85-573">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="d0e85-574">結束內容的資訊</span><span class="sxs-lookup"><span data-stu-id="d0e85-574">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="d0e85-575">`exitContext`參數沒有任何作用，除非<xref:System.Threading.Monitor.Wait%2A>方法從非預設的 managed 內容內呼叫。</span><span class="sxs-lookup"><span data-stu-id="d0e85-575">The`exitContext` parameter has no effect unless the <xref:System.Threading.Monitor.Wait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="d0e85-576">如果執行緒位呼叫內部的衍生自類別的執行個體此情形<xref:System.ContextBoundObject>。</span><span class="sxs-lookup"><span data-stu-id="d0e85-576">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="d0e85-577">即使您目前正在執行的方法不衍生自的類別上<xref:System.ContextBoundObject>、 like <xref:System.String>，您可以在非預設的內容中如果<xref:System.ContextBoundObject>您目前的應用程式定義域中的堆疊上。</span><span class="sxs-lookup"><span data-stu-id="d0e85-577">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="d0e85-578">當您的程式碼在非預設的內容中執行時，指定`true`如`exitContext`造成執行緒結束的非預設的 managed 的內容 (也就是轉換至預設內容) 執行之前<xref:System.Threading.Monitor.Wait%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="d0e85-578">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.Monitor.Wait%2A> method.</span></span> <span data-ttu-id="d0e85-579">它會傳回原始的非預設內容呼叫之後<xref:System.Threading.Monitor.Wait%2A>方法完成。</span><span class="sxs-lookup"><span data-stu-id="d0e85-579">It returns to the original nondefault context after the call to the <xref:System.Threading.Monitor.Wait%2A> method completes.</span></span>  
  
 <span data-ttu-id="d0e85-580">這有助於進行此內容繫結類別具有<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>套用的屬性。</span><span class="sxs-lookup"><span data-stu-id="d0e85-580">This can be useful when the context-bound class has the <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> attribute applied.</span></span> <span data-ttu-id="d0e85-581">在此情況下，類別的成員的所有呼叫都會自動同步都處理，且同步處理網域為類別的程式碼的整個本文。</span><span class="sxs-lookup"><span data-stu-id="d0e85-581">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="d0e85-582">如果成員的呼叫堆疊中的程式碼會呼叫<xref:System.Threading.Monitor.Wait%2A>方法，並指定`true`如`exitContext`，執行緒結束的同步處理網域，讓呼叫物件的任何成員，以繼續進行遭到封鎖的執行緒。</span><span class="sxs-lookup"><span data-stu-id="d0e85-582">If code in the call stack of a member calls the <xref:System.Threading.Monitor.Wait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="d0e85-583">當<xref:System.Threading.Monitor.Wait%2A>方法傳回時，進行呼叫的執行緒必須等待重新輸入同步處理網域。</span><span class="sxs-lookup"><span data-stu-id="d0e85-583">When the <xref:System.Threading.Monitor.Wait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0e85-584">
            <paramref name="obj" /> 參數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-584">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="d0e85-585">
            <see langword="Wait" /> 不是從同步處理的程式碼區塊中呼叫。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-585">
              <see langword="Wait" /> is not invoked from within a synchronized block of code.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">
          <span data-ttu-id="d0e85-586">叫用 Wait 的執行緒稍後會從等候狀態中斷。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-586">The thread that invokes Wait is later interrupted from the waiting state.</span>
          </span>
          <span data-ttu-id="d0e85-587">當另一個執行緒呼叫此執行緒的 <see cref="M:System.Threading.Thread.Interrupt" /> 方法時，就會發生此狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-587">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="d0e85-588">
            <paramref name="timeout" /> 參數是負值且不代表 <see cref="F:System.Threading.Timeout.Infinite" /> (–1 毫秒)，或是大於 <see cref="F:System.Int32.MaxValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0e85-588">The <paramref name="timeout" /> parameter is negative and does not represent <see cref="F:System.Threading.Timeout.Infinite" /> (–1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
  </Members>
</Type>