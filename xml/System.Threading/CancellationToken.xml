<Type Name="CancellationToken" FullName="System.Threading.CancellationToken">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5c5fac7bdec18fbbf1ea2804c8637088b9838920" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52224592" /></Metadata><TypeSignature Language="C#" Value="public struct CancellationToken" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit CancellationToken extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Threading.CancellationToken" />
  <TypeSignature Language="VB.NET" Value="Public Structure CancellationToken" />
  <TypeSignature Language="C++ CLI" Value="public value class CancellationToken" />
  <TypeSignature Language="F#" Value="type CancellationToken = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("IsCancellationRequested = {IsCancellationRequested}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-2.1;netcore-2.2">
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="d94e3-101">散佈通知，表示不應取消作業。</span><span class="sxs-lookup"><span data-stu-id="d94e3-101">Propagates notification that operations should be canceled.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d94e3-102">A<xref:System.Threading.CancellationToken>可讓執行緒，執行緒集區工作項目之間的合作式取消或<xref:System.Threading.Tasks.Task>物件。</span><span class="sxs-lookup"><span data-stu-id="d94e3-102">A <xref:System.Threading.CancellationToken> enables cooperative cancellation between threads, thread pool work items, or <xref:System.Threading.Tasks.Task> objects.</span></span> <span data-ttu-id="d94e3-103">您建立以具現化的取消語彙基元<xref:System.Threading.CancellationTokenSource>物件，用來管理取消語彙基元擷取自其<xref:System.Threading.CancellationTokenSource.Token%2A?displayProperty=nameWithType>屬性。</span><span class="sxs-lookup"><span data-stu-id="d94e3-103">You create a cancellation token by instantiating a <xref:System.Threading.CancellationTokenSource> object, which manages cancellation tokens retrieved from its <xref:System.Threading.CancellationTokenSource.Token%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="d94e3-104">然後，將取消語彙基元傳遞至任意數目的執行緒、 工作或作業來接收取消通知。</span><span class="sxs-lookup"><span data-stu-id="d94e3-104">You then  pass the cancellation token to any number of threads, tasks, or operations that should receive notice of cancellation.</span></span> <span data-ttu-id="d94e3-105">語彙基元無法用以起始取消。</span><span class="sxs-lookup"><span data-stu-id="d94e3-105">The token cannot be used to initiate cancellation.</span></span> <span data-ttu-id="d94e3-106">當主控的物件呼叫<xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType>，則<xref:System.Threading.CancellationToken.IsCancellationRequested%2A>的取消語彙基元的每個複本上的屬性設定為`true`。</span><span class="sxs-lookup"><span data-stu-id="d94e3-106">When the owning object calls <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType>, the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property on every copy of the cancellation token is set to `true`.</span></span> <span data-ttu-id="d94e3-107">接收通知的物件可以回應適合的方式。</span><span class="sxs-lookup"><span data-stu-id="d94e3-107">The objects that receive the notification can respond in whatever manner is appropriate.</span></span>  
  
 <span data-ttu-id="d94e3-108">如需詳細資訊和程式碼範例，請參閱[受控執行緒中的取消](~/docs/standard/threading/cancellation-in-managed-threads.md)。</span><span class="sxs-lookup"><span data-stu-id="d94e3-108">For more information and code examples see [Cancellation in Managed Threads](~/docs/standard/threading/cancellation-in-managed-threads.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d94e3-109">下列範例會使用亂數產生器，來模擬從 11 個不同的 instruments 讀取 10 的整數值的資料收集應用程式。</span><span class="sxs-lookup"><span data-stu-id="d94e3-109">The following example uses a random number generator to emulate a data collection application that reads 10 integral values from eleven different instruments.</span></span> <span data-ttu-id="d94e3-110">值為零表示度量已失敗的一個檢測，要計算在此情況下應該取消作業並沒有整體的平均值。</span><span class="sxs-lookup"><span data-stu-id="d94e3-110">A value of zero indicates that the measurement has failed for one instrument, in which case the operation should be cancelled and no overall mean should be computed.</span></span>  
  
 <span data-ttu-id="d94e3-111">若要處理可能取消作業，此範例會具現化<xref:System.Threading.CancellationTokenSource>物件，產生的取消語彙基元傳遞至<xref:System.Threading.Tasks.TaskFactory>物件。</span><span class="sxs-lookup"><span data-stu-id="d94e3-111">To handle the possible cancellation of the operation, the example instantiates a <xref:System.Threading.CancellationTokenSource> object that generates a cancellation token which is passed to a <xref:System.Threading.Tasks.TaskFactory> object.</span></span> <span data-ttu-id="d94e3-112"><xref:System.Threading.Tasks.TaskFactory>物件接著傳遞取消語彙基元給每個工作負責收集特定的檢測的讀數。</span><span class="sxs-lookup"><span data-stu-id="d94e3-112">The <xref:System.Threading.Tasks.TaskFactory> object in turn passes the cancellation token to each of the tasks responsible for collecting readings for a particular instrument.</span></span> <span data-ttu-id="d94e3-113"><xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%60%602%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2CSystem.Func%7BSystem.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2C%60%601%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType>以確保平均值會計算所有的讀數蒐集成功之後，才會呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="d94e3-113">The <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%60%602%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2CSystem.Func%7BSystem.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2C%60%601%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> method is called to ensure that the mean is computed only after all readings have been gathered successfully.</span></span> <span data-ttu-id="d94e3-114">如果工作有不是已被取消，因為呼叫<xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=nameWithType>方法會擲回的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="d94e3-114">If a task has not because it has been cancelled, the call to the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=nameWithType> method throws an exception.</span></span>  
  
 [!code-csharp[System.Threading.CancellationTokenSource.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.cancellationtokensource.class/cs/cancel1.cs#1)]
 [!code-vb[System.Threading.CancellationTokenSource.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.cancellationtokensource.class/vb/cancel1.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="d94e3-115">所有 public 和 protected 成員<see cref="T:System.Threading.CancellationToken" />是安全執行緒，且可能會從多個執行緒同時使用。</span><span class="sxs-lookup"><span data-stu-id="d94e3-115">All public and protected members of <see cref="T:System.Threading.CancellationToken" /> are thread-safe and may be used concurrently from multiple threads.</span></span></threadsafe>
    <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="d94e3-116">取消</span><span class="sxs-lookup"><span data-stu-id="d94e3-116">Cancellation</span></span></related>
    <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="d94e3-117">工作取消</span><span class="sxs-lookup"><span data-stu-id="d94e3-117">Task Cancellation</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CancellationToken (bool canceled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool canceled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (canceled As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CancellationToken(bool canceled);" />
      <MemberSignature Language="F#" Value="new System.Threading.CancellationToken : bool -&gt; System.Threading.CancellationToken" Usage="new System.Threading.CancellationToken canceled" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="canceled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="canceled"><span data-ttu-id="d94e3-118">語彙基元的已取消狀態。</span><span class="sxs-lookup"><span data-stu-id="d94e3-118">The canceled state for the token.</span></span></param>
        <summary><span data-ttu-id="d94e3-119">初始化 <see cref="T:System.Threading.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="d94e3-119">Initializes the <see cref="T:System.Threading.CancellationToken" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d94e3-120">使用這個建構函式建立的權杖會保留在所指定的已取消狀態`canceled`參數。</span><span class="sxs-lookup"><span data-stu-id="d94e3-120">Tokens created with this constructor will remain in the canceled state specified by the `canceled` parameter.</span></span> <span data-ttu-id="d94e3-121">如果`canceled`已`false`，這兩個<xref:System.Threading.CancellationToken.CanBeCanceled%2A>並<xref:System.Threading.CancellationToken.IsCancellationRequested%2A>會`false`。</span><span class="sxs-lookup"><span data-stu-id="d94e3-121">If `canceled` is `false`, both <xref:System.Threading.CancellationToken.CanBeCanceled%2A> and <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> will be `false`.</span></span>  
  
 <span data-ttu-id="d94e3-122">如果`canceled`已`true`，這兩個<xref:System.Threading.CancellationToken.CanBeCanceled%2A>並<xref:System.Threading.CancellationToken.IsCancellationRequested%2A>會`true`。</span><span class="sxs-lookup"><span data-stu-id="d94e3-122">If `canceled` is `true`, both <xref:System.Threading.CancellationToken.CanBeCanceled%2A> and <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> will be `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="d94e3-123">取消</span><span class="sxs-lookup"><span data-stu-id="d94e3-123">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="d94e3-124">工作取消</span><span class="sxs-lookup"><span data-stu-id="d94e3-124">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CanBeCanceled">
      <MemberSignature Language="C#" Value="public bool CanBeCanceled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanBeCanceled" />
      <MemberSignature Language="DocId" Value="P:System.Threading.CancellationToken.CanBeCanceled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanBeCanceled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanBeCanceled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanBeCanceled : bool" Usage="System.Threading.CancellationToken.CanBeCanceled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d94e3-125">取得這個語彙基元是否能夠處於已取消狀態。</span><span class="sxs-lookup"><span data-stu-id="d94e3-125">Gets whether this token is capable of being in the canceled state.</span></span></summary>
        <value><span data-ttu-id="d94e3-126">如果這個語彙基元能夠處於已取消狀態，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d94e3-126"><see langword="true" /> if this token is capable of being in the canceled state; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d94e3-127">如果<xref:System.Threading.CancellationToken.CanBeCanceled%2A>會傳回`false`，並保證，權杖將永遠不會轉換為已取消的狀態，表示<xref:System.Threading.CancellationToken.IsCancellationRequested%2A>永遠不會傳回`true`。</span><span class="sxs-lookup"><span data-stu-id="d94e3-127">If <xref:System.Threading.CancellationToken.CanBeCanceled%2A> returns `false`, it is guaranteed that the token will never transition into a canceled state, meaning that <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> will never return `true`.</span></span> <span data-ttu-id="d94e3-128">無法取消的取消語彙基元由靜態<xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType>屬性。</span><span class="sxs-lookup"><span data-stu-id="d94e3-128">A cancellation token that cannot be canceled is returned by the static <xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="d94e3-129">您選擇是否可以使用這個屬性來判斷是否可以進行的取消語彙基元 examing 之前，已取消的值<xref:System.Threading.CancellationToken.IsCancellationRequested%2A>屬性來判斷是否已取消。</span><span class="sxs-lookup"><span data-stu-id="d94e3-129">You can optionally use this property to determine whether a cancellation token can be canceled before examing the value of the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property to determine whether it has been canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="d94e3-130">取消</span><span class="sxs-lookup"><span data-stu-id="d94e3-130">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="d94e3-131">工作取消</span><span class="sxs-lookup"><span data-stu-id="d94e3-131">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d94e3-132">判斷目前的 <see cref="T:System.Threading.CancellationToken" /> 執行個體與指定的語彙基元是否相等。</span><span class="sxs-lookup"><span data-stu-id="d94e3-132">Determines whether the current <see cref="T:System.Threading.CancellationToken" /> instance is equal to the specified token.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (other As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ other);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="cancellationToken.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="d94e3-133">與這個執行個體相互比較的其他物件。</span><span class="sxs-lookup"><span data-stu-id="d94e3-133">The other object to compare with this instance.</span></span></param>
        <summary><span data-ttu-id="d94e3-134">判斷目前的 <see cref="T:System.Threading.CancellationToken" /> 執行個體與指定的 <see cref="T:System.Object" /> 是否相等。</span><span class="sxs-lookup"><span data-stu-id="d94e3-134">Determines whether the current <see cref="T:System.Threading.CancellationToken" /> instance is equal to the specified <see cref="T:System.Object" />.</span></span></summary>
        <returns><span data-ttu-id="d94e3-135">如果 <paramref name="other" /> 是 <see cref="T:System.Threading.CancellationToken" />，且兩個執行個體相等，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d94e3-135"><see langword="true" /> if <paramref name="other" /> is a <see cref="T:System.Threading.CancellationToken" /> and if the two instances are equal; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="d94e3-136">如需詳細資訊，請參閱＜備註＞一節。</span><span class="sxs-lookup"><span data-stu-id="d94e3-136">See the Remarks section for more information.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
## Remarks  

<span data-ttu-id="d94e3-137">兩個的取消語彙基元是相等，如果任何下列條件為真：</span><span class="sxs-lookup"><span data-stu-id="d94e3-137">Two cancellation tokens are equal if any one of the following conditions is true:</span></span> 

- <span data-ttu-id="d94e3-138">與其相關聯的相同<xref:System.Threading.CancellationTokenSource>。</span><span class="sxs-lookup"><span data-stu-id="d94e3-138">They are associated with the same <xref:System.Threading.CancellationTokenSource>.</span></span>

- <span data-ttu-id="d94e3-139">兩者都從公用來建構他們<xref:System.Threading.CancellationToken>建構函式，且其<xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType>值是否相等。</span><span class="sxs-lookup"><span data-stu-id="d94e3-139">They were both constructed from public <xref:System.Threading.CancellationToken> constructors, and their <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> values are equal.</span></span>

- <span data-ttu-id="d94e3-140">這兩個取消語彙基元的值是<xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="d94e3-140">The value of both cancellation tokens is <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>.</span></span>

       ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d94e3-141">相關聯的 <see cref="T:System.Threading.CancellationTokenSource" /> 已經過處置。</span><span class="sxs-lookup"><span data-stu-id="d94e3-141">An associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="d94e3-142">取消</span><span class="sxs-lookup"><span data-stu-id="d94e3-142">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="d94e3-143">工作取消</span><span class="sxs-lookup"><span data-stu-id="d94e3-143">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Threading.CancellationToken other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(valuetype System.Threading.CancellationToken other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Equals(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As CancellationToken) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::Threading::CancellationToken other);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Threading.CancellationToken -&gt; bool" Usage="cancellationToken.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="d94e3-144">與這個執行個體比較的其他 <see cref="T:System.Threading.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="d94e3-144">The other <see cref="T:System.Threading.CancellationToken" /> to compare with this instance.</span></span></param>
        <summary><span data-ttu-id="d94e3-145">判斷目前的 <see cref="T:System.Threading.CancellationToken" /> 執行個體與指定的語彙基元是否相等。</span><span class="sxs-lookup"><span data-stu-id="d94e3-145">Determines whether the current <see cref="T:System.Threading.CancellationToken" /> instance is equal to the specified token.</span></span></summary>
        <returns><span data-ttu-id="d94e3-146">如果執行個體相等，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d94e3-146"><see langword="true" /> if the instances are equal; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="d94e3-147">如需詳細資訊，請參閱＜備註＞一節。</span><span class="sxs-lookup"><span data-stu-id="d94e3-147">See the Remarks section for more information.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
## Remarks  

<span data-ttu-id="d94e3-148">兩個的取消語彙基元是相等，如果任何下列條件為真：</span><span class="sxs-lookup"><span data-stu-id="d94e3-148">Two cancellation tokens are equal if any one of the following conditions is true:</span></span> 

- <span data-ttu-id="d94e3-149">與其相關聯的相同<xref:System.Threading.CancellationTokenSource>。</span><span class="sxs-lookup"><span data-stu-id="d94e3-149">They are associated with the same <xref:System.Threading.CancellationTokenSource>.</span></span>

- <span data-ttu-id="d94e3-150">兩者都從公用來建構他們<xref:System.Threading.CancellationToken>建構函式，且其<xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType>值是否相等。</span><span class="sxs-lookup"><span data-stu-id="d94e3-150">They were both constructed from public <xref:System.Threading.CancellationToken> constructors, and their <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> values are equal.</span></span>

- <span data-ttu-id="d94e3-151">這兩個取消語彙基元的值是<xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="d94e3-151">The value of both cancellation tokens is <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>.</span></span>

       ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="d94e3-152">取消</span><span class="sxs-lookup"><span data-stu-id="d94e3-152">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="d94e3-153">工作取消</span><span class="sxs-lookup"><span data-stu-id="d94e3-153">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="cancellationToken.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d94e3-154">做為 <see cref="T:System.Threading.CancellationToken" /> 的雜湊函式。</span><span class="sxs-lookup"><span data-stu-id="d94e3-154">Serves as a hash function for a <see cref="T:System.Threading.CancellationToken" />.</span></span></summary>
        <returns><span data-ttu-id="d94e3-155">目前 <see cref="T:System.Threading.CancellationToken" /> 執行個體的雜湊碼。</span><span class="sxs-lookup"><span data-stu-id="d94e3-155">A hash code for the current <see cref="T:System.Threading.CancellationToken" /> instance.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCancellationRequested">
      <MemberSignature Language="C#" Value="public bool IsCancellationRequested { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCancellationRequested" />
      <MemberSignature Language="DocId" Value="P:System.Threading.CancellationToken.IsCancellationRequested" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCancellationRequested As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCancellationRequested { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCancellationRequested : bool" Usage="System.Threading.CancellationToken.IsCancellationRequested" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d94e3-156">取得是否已要求取消這個語彙基元。</span><span class="sxs-lookup"><span data-stu-id="d94e3-156">Gets whether cancellation has been requested for this token.</span></span></summary>
        <value><span data-ttu-id="d94e3-157">如果已為這個語彙基元要求取消，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d94e3-157"><see langword="true" /> if cancellation has been requested for this token; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d94e3-158">這個屬性會指出是否已要求取消這個語彙基元，可透過在已取消狀態中，一開始所建構的語彙基元或呼叫<xref:System.Threading.CancellationTokenSource.Cancel%2A>上的相關聯的語彙基元<xref:System.Threading.CancellationTokenSource>。</span><span class="sxs-lookup"><span data-stu-id="d94e3-158">This property indicates whether cancellation has been requested for this token, either through the token initially being constructed in a canceled state, or through calling <xref:System.Threading.CancellationTokenSource.Cancel%2A> on the token's associated <xref:System.Threading.CancellationTokenSource>.</span></span>  
  
 <span data-ttu-id="d94e3-159">如果此屬性為`true`，而只會保證已要求取消。</span><span class="sxs-lookup"><span data-stu-id="d94e3-159">If this property is `true`, it only guarantees that cancellation has been requested.</span></span> <span data-ttu-id="d94e3-160">它並不保證每個已註冊的處理常式已完成執行時，也不取消要求已完成傳播至所有註冊處理常式。</span><span class="sxs-lookup"><span data-stu-id="d94e3-160">It does not guarantee that every registered handler has finished executing, nor that cancellation requests have finished propagating to all registered handlers.</span></span> <span data-ttu-id="d94e3-161">額外的同步處理可能是必要項，特別是在同時取消相關的物件位置的情況。</span><span class="sxs-lookup"><span data-stu-id="d94e3-161">Additional synchronization may be required, particularly in situations where related objects are being canceled concurrently.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d94e3-162">以下是簡單的範例執行的伺服器處理序，直到<xref:System.Threading.CancellationToken.IsCancellationRequested%2A>屬性會傳回`true`。</span><span class="sxs-lookup"><span data-stu-id="d94e3-162">The following is a simple example that executes a server process until the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property returns `true`.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.CancellationToken.IsCancellationRequested#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Tasks.CancellationToken.IsCancellationRequested/cs/cancellation.cs#12)]
 [!code-vb[System.Threading.Tasks.CancellationToken.IsCancellationRequested#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Tasks.CancellationToken.IsCancellationRequested/vb/cancelthreads.vb#12)]  
  
 <span data-ttu-id="d94e3-163">此範例會具現化<xref:System.Threading.CancellationTokenSource>物件，用來控制存取權的取消語彙基元。</span><span class="sxs-lookup"><span data-stu-id="d94e3-163">The example instantiates a <xref:System.Threading.CancellationTokenSource> object, which controls access to the cancellation token.</span></span> <span data-ttu-id="d94e3-164">然後，它會定義兩個執行緒程序。</span><span class="sxs-lookup"><span data-stu-id="d94e3-164">It then defines two thread procedures.</span></span> <span data-ttu-id="d94e3-165">第一個定義為 lambda 運算式，集區的鍵盤，然後按下的"C"索引鍵時，呼叫<xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType>設定的取消語彙基元已取消的狀態。</span><span class="sxs-lookup"><span data-stu-id="d94e3-165">The first is defined as a lambda expression that pools the keyboard and, when the "C" key is pressed, calls <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> to set the cancellation token to the cancelled state.</span></span> <span data-ttu-id="d94e3-166">第二個是參數化的方法， `ServerClass.StaticMethod`，會執行迴圈，直到<xref:System.Threading.CancellationToken.IsCancellationRequested%2A>屬性是`true`。</span><span class="sxs-lookup"><span data-stu-id="d94e3-166">The second is a parameterized method, `ServerClass.StaticMethod`, that executes a loop until the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property is `true`.</span></span>  
  
 <span data-ttu-id="d94e3-167">主執行緒然後啟動兩個執行緒和區塊之前執行的執行緒`ServerClass.StaticMethod`方法會結束。</span><span class="sxs-lookup"><span data-stu-id="d94e3-167">The main thread then starts the two threads and blocks until the thread that executes the `ServerClass.StaticMethod` method terminates.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="d94e3-168">取消</span><span class="sxs-lookup"><span data-stu-id="d94e3-168">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="d94e3-169">工作取消</span><span class="sxs-lookup"><span data-stu-id="d94e3-169">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="public static System.Threading.CancellationToken None { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Threading.CancellationToken None" />
      <MemberSignature Language="DocId" Value="P:System.Threading.CancellationToken.None" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property None As CancellationToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::CancellationToken None { System::Threading::CancellationToken get(); };" />
      <MemberSignature Language="F#" Value="member this.None : System.Threading.CancellationToken" Usage="System.Threading.CancellationToken.None" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d94e3-170">傳回空的 <see cref="T:System.Threading.CancellationToken" /> 值。</span><span class="sxs-lookup"><span data-stu-id="d94e3-170">Returns an empty <see cref="T:System.Threading.CancellationToken" /> value.</span></span></summary>
        <value><span data-ttu-id="d94e3-171">空的取消語彙基元。</span><span class="sxs-lookup"><span data-stu-id="d94e3-171">An empty cancellation token.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d94e3-172">無法取消的取消語彙基元傳回此屬性;也就是說，其<xref:System.Threading.CancellationToken.CanBeCanceled%2A>屬性是`false`。</span><span class="sxs-lookup"><span data-stu-id="d94e3-172">The cancellation token returned by this property cannot be canceled; that is, its <xref:System.Threading.CancellationToken.CanBeCanceled%2A> property is `false`.</span></span>  
  
 <span data-ttu-id="d94e3-173">您也可以使用 C# [default(CancellationToken)](~/docs/csharp/language-reference/keywords/default.md)陳述式來建立空的取消語彙基元。</span><span class="sxs-lookup"><span data-stu-id="d94e3-173">You can also use the C#  [default(CancellationToken)](~/docs/csharp/language-reference/keywords/default.md) statement to create an empty cancellation token.</span></span> 

 <span data-ttu-id="d94e3-174">兩個空的取消語彙基元都相等。</span><span class="sxs-lookup"><span data-stu-id="d94e3-174">Two empty cancellation tokens are always equal.</span></span>
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="d94e3-175">取消</span><span class="sxs-lookup"><span data-stu-id="d94e3-175">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="d94e3-176">工作取消</span><span class="sxs-lookup"><span data-stu-id="d94e3-176">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Threading.CancellationToken left, System.Threading.CancellationToken right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Threading.CancellationToken left, valuetype System.Threading.CancellationToken right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.op_Equality(System.Threading.CancellationToken,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As CancellationToken, right As CancellationToken) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Threading::CancellationToken left, System::Threading::CancellationToken right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Threading.CancellationToken * System.Threading.CancellationToken -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Threading.CancellationToken" />
        <Parameter Name="right" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="d94e3-177">第一個執行個體。</span><span class="sxs-lookup"><span data-stu-id="d94e3-177">The first instance.</span></span></param>
        <param name="right"><span data-ttu-id="d94e3-178">第二個執行個體。</span><span class="sxs-lookup"><span data-stu-id="d94e3-178">The second instance.</span></span></param>
        <summary><span data-ttu-id="d94e3-179">判斷兩個 <see cref="T:System.Threading.CancellationToken" /> 執行個體是否相等。</span><span class="sxs-lookup"><span data-stu-id="d94e3-179">Determines whether two <see cref="T:System.Threading.CancellationToken" /> instances are equal.</span></span></summary>
        <returns><span data-ttu-id="d94e3-180">如果執行個體相等，則為 <see langword="true" />；否則為 <see langword="false" />。如需詳細資訊，請參閱＜備註＞一節。</span><span class="sxs-lookup"><span data-stu-id="d94e3-180"><see langword="true" /> if the instances are equal; otherwise, <see langword="false" /> See the Remarks section for more information.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
## Remarks  

<span data-ttu-id="d94e3-181">兩個的取消語彙基元是相等，如果任何下列條件為真：</span><span class="sxs-lookup"><span data-stu-id="d94e3-181">Two cancellation tokens are equal if any one of the following conditions is true:</span></span> 

- <span data-ttu-id="d94e3-182">與其相關聯的相同<xref:System.Threading.CancellationTokenSource>。</span><span class="sxs-lookup"><span data-stu-id="d94e3-182">They are associated with the same <xref:System.Threading.CancellationTokenSource>.</span></span>

- <span data-ttu-id="d94e3-183">兩者都從公用來建構他們<xref:System.Threading.CancellationToken>建構函式，且其<xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType>值是否相等。</span><span class="sxs-lookup"><span data-stu-id="d94e3-183">They were both constructed from public <xref:System.Threading.CancellationToken> constructors, and their <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> values are equal.</span></span>

- <span data-ttu-id="d94e3-184">這兩個取消語彙基元的值是<xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="d94e3-184">The value of both cancellation tokens is <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>.</span></span>
       ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d94e3-185">相關聯的 <see cref="T:System.Threading.CancellationTokenSource" /> 已經過處置。</span><span class="sxs-lookup"><span data-stu-id="d94e3-185">An associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="d94e3-186">取消</span><span class="sxs-lookup"><span data-stu-id="d94e3-186">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="d94e3-187">工作取消</span><span class="sxs-lookup"><span data-stu-id="d94e3-187">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Threading.CancellationToken left, System.Threading.CancellationToken right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Threading.CancellationToken left, valuetype System.Threading.CancellationToken right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.op_Inequality(System.Threading.CancellationToken,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As CancellationToken, right As CancellationToken) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Threading::CancellationToken left, System::Threading::CancellationToken right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Threading.CancellationToken * System.Threading.CancellationToken -&gt; bool" Usage="System.Threading.CancellationToken.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Threading.CancellationToken" />
        <Parameter Name="right" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="d94e3-188">第一個執行個體。</span><span class="sxs-lookup"><span data-stu-id="d94e3-188">The first instance.</span></span></param>
        <param name="right"><span data-ttu-id="d94e3-189">第二個執行個體。</span><span class="sxs-lookup"><span data-stu-id="d94e3-189">The second instance.</span></span></param>
        <summary><span data-ttu-id="d94e3-190">判斷兩個 <see cref="T:System.Threading.CancellationToken" /> 執行個體是否不相等。</span><span class="sxs-lookup"><span data-stu-id="d94e3-190">Determines whether two <see cref="T:System.Threading.CancellationToken" /> instances are not equal.</span></span></summary>
        <returns><span data-ttu-id="d94e3-191">如果執行個體不相等，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d94e3-191"><see langword="true" /> if the instances are not equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
## Remarks  

<span data-ttu-id="d94e3-192">等號比較定義，請參閱<xref:System.Threading.CancellationToken.Equals%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="d94e3-192">For the definition of equality, see the <xref:System.Threading.CancellationToken.Equals%2A> method.</span></span> 
       ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d94e3-193">相關聯的 <see cref="T:System.Threading.CancellationTokenSource" /> 已經過處置。</span><span class="sxs-lookup"><span data-stu-id="d94e3-193">An associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="d94e3-194">取消</span><span class="sxs-lookup"><span data-stu-id="d94e3-194">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="d94e3-195">工作取消</span><span class="sxs-lookup"><span data-stu-id="d94e3-195">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Register">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d94e3-196">註冊委派，當取消這個 <see cref="T:System.Threading.CancellationToken" /> 時將會呼叫該委派。</span><span class="sxs-lookup"><span data-stu-id="d94e3-196">Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></summary>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="d94e3-197">取消</span><span class="sxs-lookup"><span data-stu-id="d94e3-197">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="d94e3-198">工作取消</span><span class="sxs-lookup"><span data-stu-id="d94e3-198">Task Cancellation</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationTokenRegistration Register (Action callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.CancellationTokenRegistration Register(class System.Action callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Register(System.Action)" />
      <MemberSignature Language="VB.NET" Value="Public Function Register (callback As Action) As CancellationTokenRegistration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CancellationTokenRegistration Register(Action ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Register : Action -&gt; System.Threading.CancellationTokenRegistration" Usage="cancellationToken.Register callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenRegistration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="d94e3-199">取消 <see cref="T:System.Threading.CancellationToken" /> 時所要執行的委派。</span><span class="sxs-lookup"><span data-stu-id="d94e3-199">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></param>
        <summary><span data-ttu-id="d94e3-200">註冊委派，當取消這個 <see cref="T:System.Threading.CancellationToken" /> 時將會呼叫該委派。</span><span class="sxs-lookup"><span data-stu-id="d94e3-200">Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></summary>
        <returns><span data-ttu-id="d94e3-201">可用來取消註冊回呼的 <see cref="T:System.Threading.CancellationTokenRegistration" /> 執行個體。</span><span class="sxs-lookup"><span data-stu-id="d94e3-201">The <see cref="T:System.Threading.CancellationTokenRegistration" /> instance that can be used to unregister the callback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d94e3-202">如果這個語彙基元處於已取消的狀態，委派會立即和同步地執行。</span><span class="sxs-lookup"><span data-stu-id="d94e3-202">If this token is already in the canceled state, the delegate will be run immediately and synchronously.</span></span> <span data-ttu-id="d94e3-203">委派會產生任何例外狀況會傳播從這個方法呼叫。</span><span class="sxs-lookup"><span data-stu-id="d94e3-203">Any exception the delegate generates will be propagated out of this method call.</span></span>  
  
 <span data-ttu-id="d94e3-204">目前<xref:System.Threading.ExecutionContext>擷取以及委派，而且會在執行它時使用。</span><span class="sxs-lookup"><span data-stu-id="d94e3-204">The current <xref:System.Threading.ExecutionContext> is captured along with the delegate and will be used when executing it.</span></span> 

 <span data-ttu-id="d94e3-205">目前<xref:System.Threading.SynchronizationContext>不會擷取。</span><span class="sxs-lookup"><span data-stu-id="d94e3-205">The current <xref:System.Threading.SynchronizationContext> is not captured.</span></span>
 
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d94e3-206">相關聯的 <see cref="T:System.Threading.CancellationTokenSource" /> 已經處置。</span><span class="sxs-lookup"><span data-stu-id="d94e3-206">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d94e3-207"><paramref name="callback" /> 為 null。</span><span class="sxs-lookup"><span data-stu-id="d94e3-207"><paramref name="callback" /> is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="d94e3-208">取消</span><span class="sxs-lookup"><span data-stu-id="d94e3-208">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="d94e3-209">工作取消</span><span class="sxs-lookup"><span data-stu-id="d94e3-209">Task Cancellation</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/8838dd75-18ed-4b8b-b322-cd4531faac64"><span data-ttu-id="d94e3-210">如何：註冊取消要求的回呼</span><span class="sxs-lookup"><span data-stu-id="d94e3-210">How to: Register Callbacks for Cancellation Requests</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationTokenRegistration Register (Action callback, bool useSynchronizationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.CancellationTokenRegistration Register(class System.Action callback, bool useSynchronizationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Register(System.Action,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Register (callback As Action, useSynchronizationContext As Boolean) As CancellationTokenRegistration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CancellationTokenRegistration Register(Action ^ callback, bool useSynchronizationContext);" />
      <MemberSignature Language="F#" Value="member this.Register : Action * bool -&gt; System.Threading.CancellationTokenRegistration" Usage="cancellationToken.Register (callback, useSynchronizationContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenRegistration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="useSynchronizationContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="d94e3-211">取消 <see cref="T:System.Threading.CancellationToken" /> 時所要執行的委派。</span><span class="sxs-lookup"><span data-stu-id="d94e3-211">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></param>
        <param name="useSynchronizationContext"><span data-ttu-id="d94e3-212">指示是否要擷取目前的 <see cref="T:System.Threading.SynchronizationContext" /> 並在叫用 <paramref name="callback" /> 時使用它的值。</span><span class="sxs-lookup"><span data-stu-id="d94e3-212">A value that indicates whether to capture the current <see cref="T:System.Threading.SynchronizationContext" /> and use it when invoking the <paramref name="callback" />.</span></span></param>
        <summary><span data-ttu-id="d94e3-213">註冊委派，當取消這個 <see cref="T:System.Threading.CancellationToken" /> 時將會呼叫該委派。</span><span class="sxs-lookup"><span data-stu-id="d94e3-213">Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></summary>
        <returns><span data-ttu-id="d94e3-214">可用來取消註冊回呼的 <see cref="T:System.Threading.CancellationTokenRegistration" /> 執行個體。</span><span class="sxs-lookup"><span data-stu-id="d94e3-214">The <see cref="T:System.Threading.CancellationTokenRegistration" /> instance that can be used to unregister the callback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d94e3-215">如果這個語彙基元處於已取消的狀態，委派會立即和同步地執行。</span><span class="sxs-lookup"><span data-stu-id="d94e3-215">If this token is already in the canceled state, the delegate will be run immediately and synchronously.</span></span> <span data-ttu-id="d94e3-216">委派會產生任何例外狀況會傳播從這個方法呼叫。</span><span class="sxs-lookup"><span data-stu-id="d94e3-216">Any exception the delegate generates will be propagated out of this method call.</span></span>  
  
 <span data-ttu-id="d94e3-217">目前<xref:System.Threading.ExecutionContext>擷取以及委派，而且會在執行它時使用。</span><span class="sxs-lookup"><span data-stu-id="d94e3-217">The current <xref:System.Threading.ExecutionContext> is captured along with the delegate and will be used when executing it.</span></span> 

 <span data-ttu-id="d94e3-218">如果`useSynchronizationContext`已`true`，目前<xref:System.Threading.SynchronizationContext>，如果其中一個存在，也會擷取委派以及而且會在執行它時使用。</span><span class="sxs-lookup"><span data-stu-id="d94e3-218">If `useSynchronizationContext` is `true`, the current <xref:System.Threading.SynchronizationContext>, if one exists, is also captured along with the delegate and will be used when executing it.</span></span> <span data-ttu-id="d94e3-219">否則，<xref:System.Threading.SynchronizationContext>不會擷取。</span><span class="sxs-lookup"><span data-stu-id="d94e3-219">Otherwise, <xref:System.Threading.SynchronizationContext> is not captured.</span></span>
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d94e3-220">相關聯的 <see cref="T:System.Threading.CancellationTokenSource" /> 已經處置。</span><span class="sxs-lookup"><span data-stu-id="d94e3-220">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d94e3-221"><paramref name="callback" /> 為 null。</span><span class="sxs-lookup"><span data-stu-id="d94e3-221"><paramref name="callback" /> is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="d94e3-222">取消</span><span class="sxs-lookup"><span data-stu-id="d94e3-222">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="d94e3-223">工作取消</span><span class="sxs-lookup"><span data-stu-id="d94e3-223">Task Cancellation</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/8838dd75-18ed-4b8b-b322-cd4531faac64"><span data-ttu-id="d94e3-224">如何：註冊取消要求的回呼</span><span class="sxs-lookup"><span data-stu-id="d94e3-224">How to: Register Callbacks for Cancellation Requests</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationTokenRegistration Register (Action&lt;object&gt; callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.CancellationTokenRegistration Register(class System.Action`1&lt;object&gt; callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Register (callback As Action(Of Object), state As Object) As CancellationTokenRegistration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CancellationTokenRegistration Register(Action&lt;System::Object ^&gt; ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.Register : Action&lt;obj&gt; * obj -&gt; System.Threading.CancellationTokenRegistration" Usage="cancellationToken.Register (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenRegistration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="d94e3-225">取消 <see cref="T:System.Threading.CancellationToken" /> 時所要執行的委派。</span><span class="sxs-lookup"><span data-stu-id="d94e3-225">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></param>
        <param name="state"><span data-ttu-id="d94e3-226">當叫用委派時，要傳遞給 <paramref name="callback" /> 的狀態。</span><span class="sxs-lookup"><span data-stu-id="d94e3-226">The state to pass to the <paramref name="callback" /> when the delegate is invoked.</span></span> <span data-ttu-id="d94e3-227">這可能是 null。</span><span class="sxs-lookup"><span data-stu-id="d94e3-227">This may be null.</span></span></param>
        <summary><span data-ttu-id="d94e3-228">註冊委派，當取消這個 <see cref="T:System.Threading.CancellationToken" /> 時將會呼叫該委派。</span><span class="sxs-lookup"><span data-stu-id="d94e3-228">Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></summary>
        <returns><span data-ttu-id="d94e3-229">可用來取消註冊回呼的 <see cref="T:System.Threading.CancellationTokenRegistration" /> 執行個體。</span><span class="sxs-lookup"><span data-stu-id="d94e3-229">The <see cref="T:System.Threading.CancellationTokenRegistration" /> instance that can be used to unregister the callback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d94e3-230">如果這個語彙基元處於已取消的狀態，委派會立即和同步地執行。</span><span class="sxs-lookup"><span data-stu-id="d94e3-230">If this token is already in the canceled state, the delegate will be run immediately and synchronously.</span></span> <span data-ttu-id="d94e3-231">委派會產生任何例外狀況會傳播從這個方法呼叫。</span><span class="sxs-lookup"><span data-stu-id="d94e3-231">Any exception the delegate generates will be propagated out of this method call.</span></span>  
  
 <span data-ttu-id="d94e3-232">目前<xref:System.Threading.ExecutionContext>擷取以及委派，而且會在執行它時使用。</span><span class="sxs-lookup"><span data-stu-id="d94e3-232">The current <xref:System.Threading.ExecutionContext> is captured along with the delegate and will be used when executing it.</span></span> 

 <span data-ttu-id="d94e3-233">目前<xref:System.Threading.SynchronizationContext>不會擷取。</span><span class="sxs-lookup"><span data-stu-id="d94e3-233">The current <xref:System.Threading.SynchronizationContext> is not captured.</span></span>
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d94e3-234">相關聯的 <see cref="T:System.Threading.CancellationTokenSource" /> 已經處置。</span><span class="sxs-lookup"><span data-stu-id="d94e3-234">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d94e3-235"><paramref name="callback" /> 為 null。</span><span class="sxs-lookup"><span data-stu-id="d94e3-235"><paramref name="callback" /> is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="d94e3-236">取消</span><span class="sxs-lookup"><span data-stu-id="d94e3-236">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="d94e3-237">工作取消</span><span class="sxs-lookup"><span data-stu-id="d94e3-237">Task Cancellation</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/8838dd75-18ed-4b8b-b322-cd4531faac64"><span data-ttu-id="d94e3-238">如何：註冊取消要求的回呼</span><span class="sxs-lookup"><span data-stu-id="d94e3-238">How to: Register Callbacks for Cancellation Requests</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationTokenRegistration Register (Action&lt;object&gt; callback, object state, bool useSynchronizationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.CancellationTokenRegistration Register(class System.Action`1&lt;object&gt; callback, object state, bool useSynchronizationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Register (callback As Action(Of Object), state As Object, useSynchronizationContext As Boolean) As CancellationTokenRegistration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CancellationTokenRegistration Register(Action&lt;System::Object ^&gt; ^ callback, System::Object ^ state, bool useSynchronizationContext);" />
      <MemberSignature Language="F#" Value="member this.Register : Action&lt;obj&gt; * obj * bool -&gt; System.Threading.CancellationTokenRegistration" Usage="cancellationToken.Register (callback, state, useSynchronizationContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenRegistration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="useSynchronizationContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="d94e3-239">取消 <see cref="T:System.Threading.CancellationToken" /> 時所要執行的委派。</span><span class="sxs-lookup"><span data-stu-id="d94e3-239">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></param>
        <param name="state"><span data-ttu-id="d94e3-240">當叫用委派時，要傳遞給 <paramref name="callback" /> 的狀態。</span><span class="sxs-lookup"><span data-stu-id="d94e3-240">The state to pass to the <paramref name="callback" /> when the delegate is invoked.</span></span> <span data-ttu-id="d94e3-241">這可能是 null。</span><span class="sxs-lookup"><span data-stu-id="d94e3-241">This may be null.</span></span></param>
        <param name="useSynchronizationContext"><span data-ttu-id="d94e3-242">布林值，表示是否要擷取目前的 <see cref="T:System.Threading.SynchronizationContext" /> 並在叫用 <paramref name="callback" /> 時使用它。</span><span class="sxs-lookup"><span data-stu-id="d94e3-242">A Boolean value that indicates whether to capture the current <see cref="T:System.Threading.SynchronizationContext" /> and use it when invoking the <paramref name="callback" />.</span></span></param>
        <summary><span data-ttu-id="d94e3-243">註冊委派，當取消這個 <see cref="T:System.Threading.CancellationToken" /> 時將會呼叫該委派。</span><span class="sxs-lookup"><span data-stu-id="d94e3-243">Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></summary>
        <returns><span data-ttu-id="d94e3-244">可用來取消註冊回呼的 <see cref="T:System.Threading.CancellationTokenRegistration" /> 執行個體。</span><span class="sxs-lookup"><span data-stu-id="d94e3-244">The <see cref="T:System.Threading.CancellationTokenRegistration" /> instance that can be used to unregister the callback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d94e3-245">如果這個語彙基元處於已取消的狀態，委派會立即和同步地執行。</span><span class="sxs-lookup"><span data-stu-id="d94e3-245">If this token is already in the canceled state, the delegate will be run immediately and synchronously.</span></span> <span data-ttu-id="d94e3-246">委派會產生任何例外狀況會傳播從這個方法呼叫。</span><span class="sxs-lookup"><span data-stu-id="d94e3-246">Any exception the delegate generates will be propagated out of this method call.</span></span>  
  
 <span data-ttu-id="d94e3-247">目前<xref:System.Threading.ExecutionContext>擷取以及委派，而且會在執行它時使用。</span><span class="sxs-lookup"><span data-stu-id="d94e3-247">The current <xref:System.Threading.ExecutionContext> is captured along with the delegate and will be used when executing it.</span></span> 

 <span data-ttu-id="d94e3-248">如果`useSynchronizationContext`已`true`，目前<xref:System.Threading.SynchronizationContext>，如果其中一個存在，也會擷取委派以及而且會在執行它時使用。</span><span class="sxs-lookup"><span data-stu-id="d94e3-248">If `useSynchronizationContext` is `true`, the current <xref:System.Threading.SynchronizationContext>, if one exists, is also captured along with the delegate and will be used when executing it.</span></span> <span data-ttu-id="d94e3-249">否則，<xref:System.Threading.SynchronizationContext>不會擷取。</span><span class="sxs-lookup"><span data-stu-id="d94e3-249">Otherwise, <xref:System.Threading.SynchronizationContext> is not captured.</span></span>
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d94e3-250">相關聯的 <see cref="T:System.Threading.CancellationTokenSource" /> 已經處置。</span><span class="sxs-lookup"><span data-stu-id="d94e3-250">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d94e3-251"><paramref name="callback" /> 為 null。</span><span class="sxs-lookup"><span data-stu-id="d94e3-251"><paramref name="callback" /> is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="d94e3-252">取消</span><span class="sxs-lookup"><span data-stu-id="d94e3-252">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="d94e3-253">工作取消</span><span class="sxs-lookup"><span data-stu-id="d94e3-253">Task Cancellation</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/8838dd75-18ed-4b8b-b322-cd4531faac64"><span data-ttu-id="d94e3-254">如何：註冊取消要求的回呼</span><span class="sxs-lookup"><span data-stu-id="d94e3-254">How to: Register Callbacks for Cancellation Requests</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ThrowIfCancellationRequested">
      <MemberSignature Language="C#" Value="public void ThrowIfCancellationRequested ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ThrowIfCancellationRequested() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.ThrowIfCancellationRequested" />
      <MemberSignature Language="VB.NET" Value="Public Sub ThrowIfCancellationRequested ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ThrowIfCancellationRequested();" />
      <MemberSignature Language="F#" Value="member this.ThrowIfCancellationRequested : unit -&gt; unit" Usage="cancellationToken.ThrowIfCancellationRequested " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d94e3-255">如果已要求取消這個語彙基元，則擲回 <see cref="T:System.OperationCanceledException" />。</span><span class="sxs-lookup"><span data-stu-id="d94e3-255">Throws a <see cref="T:System.OperationCanceledException" /> if this token has had cancellation requested.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d94e3-256">這個方法會提供相當於的功能：</span><span class="sxs-lookup"><span data-stu-id="d94e3-256">This method provides functionality equivalent to:</span></span>  
  
 <span data-ttu-id="d94e3-257">C#</span><span class="sxs-lookup"><span data-stu-id="d94e3-257">C#</span></span>  
  
```csharp  
if (token.IsCancellationRequested)   
    throw new OperationCanceledException(token);  
```  
  
```vb  
If token.IsCancellationRequested Then  
    Throw New OperationCanceledException(token)  
End If  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="d94e3-258">已要求取消這個語彙基元。</span><span class="sxs-lookup"><span data-stu-id="d94e3-258">The token has had cancellation requested.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d94e3-259">相關聯的 <see cref="T:System.Threading.CancellationTokenSource" /> 已經處置。</span><span class="sxs-lookup"><span data-stu-id="d94e3-259">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="d94e3-260">取消</span><span class="sxs-lookup"><span data-stu-id="d94e3-260">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="d94e3-261">工作取消</span><span class="sxs-lookup"><span data-stu-id="d94e3-261">Task Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/how-to-cancel-a-task-and-its-children.md"><span data-ttu-id="d94e3-262">如何：取消工作及其子系</span><span class="sxs-lookup"><span data-stu-id="d94e3-262">How to: Cancel a Task and Its Children</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WaitHandle">
      <MemberSignature Language="C#" Value="public System.Threading.WaitHandle WaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle WaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.CancellationToken.WaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WaitHandle As WaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::WaitHandle ^ WaitHandle { System::Threading::WaitHandle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WaitHandle : System.Threading.WaitHandle" Usage="System.Threading.CancellationToken.WaitHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d94e3-263">取得取消語彙基元時所發出的 <see cref="T:System.Threading.WaitHandle" /> 信號。</span><span class="sxs-lookup"><span data-stu-id="d94e3-263">Gets a <see cref="T:System.Threading.WaitHandle" /> that is signaled when the token is canceled.</span></span></summary>
        <value><span data-ttu-id="d94e3-264">取消語彙基元時所發出的 <see cref="T:System.Threading.WaitHandle" /> 信號。</span><span class="sxs-lookup"><span data-stu-id="d94e3-264">A <see cref="T:System.Threading.WaitHandle" /> that is signaled when the token is canceled.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d94e3-265">存取這個屬性會導致<xref:System.Threading.WaitHandle>来具現化。</span><span class="sxs-lookup"><span data-stu-id="d94e3-265">Accessing this property causes a <xref:System.Threading.WaitHandle> to be instantiated.</span></span> <span data-ttu-id="d94e3-266">建議您最好只使用如有必要，這個屬性，然後處置相關聯<xref:System.Threading.CancellationTokenSource>儘早 (disposing 來源將會處置此配置的控制代碼) 的執行個體。</span><span class="sxs-lookup"><span data-stu-id="d94e3-266">It is preferable to only use this property when necessary, and to then dispose the associated <xref:System.Threading.CancellationTokenSource> instance at the earliest opportunity (disposing the source will dispose of this allocated handle).</span></span> <span data-ttu-id="d94e3-267">控制代碼不應該關閉或直接處置。</span><span class="sxs-lookup"><span data-stu-id="d94e3-267">The handle should not be closed or disposed directly.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d94e3-268">相關聯的 <see cref="T:System.Threading.CancellationTokenSource" /> 已經處置。</span><span class="sxs-lookup"><span data-stu-id="d94e3-268">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="d94e3-269">取消</span><span class="sxs-lookup"><span data-stu-id="d94e3-269">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="d94e3-270">工作取消</span><span class="sxs-lookup"><span data-stu-id="d94e3-270">Task Cancellation</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/6e2aa49b-fc84-4bcf-962b-17db98b7edcb"><span data-ttu-id="d94e3-271">如何：接聽具有等候控制代碼的取消要求</span><span class="sxs-lookup"><span data-stu-id="d94e3-271">How to: Listen for Cancellation Requests That Have Wait Handles</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>