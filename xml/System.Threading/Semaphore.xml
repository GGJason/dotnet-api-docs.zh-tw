<Type Name="Semaphore" FullName="System.Threading.Semaphore">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="589fcf34edfc4ff1eb1c243acad8b5ad0d3cd911" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30530942" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Semaphore : System.Threading.WaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Semaphore extends System.Threading.WaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Semaphore" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Semaphore&#xA;Inherits WaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class Semaphore sealed : System::Threading::WaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>限制可以同時存取資源或資源集區的執行緒數目。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Threading.Semaphore>類別來控制存取權的資源集區。 執行緒進入號誌，藉由呼叫<xref:System.Threading.WaitHandle.WaitOne%2A>方法，都繼承自<xref:System.Threading.WaitHandle>類別，並藉由呼叫釋放號誌<xref:System.Threading.Semaphore.Release%2A>方法。  
  
 號誌計數會每次在執行緒進入號誌，及執行緒釋放號誌時遞增遞減。 當計數為零時，後續的要求封鎖，直到其他的執行緒釋放號誌。 所有執行緒都釋放號誌，計數為最大值時指定已建立號誌。  
  
 沒有任何的保證的順序，例如 FIFO 或 LIFO，在其中已封鎖的執行緒進入號誌。  
  
 執行緒可以進入號誌多次，藉由呼叫<xref:System.Threading.WaitHandle.WaitOne%2A>方法重複。 若要釋放部分或所有這些項目，執行緒可以呼叫無參數<xref:System.Threading.Semaphore.Release>多的時間，或可以呼叫的方法多載<xref:System.Threading.Semaphore.Release%28System.Int32%29>方法多載會指定釋出的項目數目。  
  
 <xref:System.Threading.Semaphore>類別不會強制執行呼叫的執行緒識別<xref:System.Threading.WaitHandle.WaitOne%2A>或<xref:System.Threading.Semaphore.Release%2A>。 它是程式設計人員的責任在於確保的執行緒沒有釋放號誌太多次。 例如，假設某個號誌的最大計數為 2，且執行緒 A 和執行緒 B 都進入號誌。 如果執行緒 B 中的程式設計錯誤導致呼叫<xref:System.Threading.Semaphore.Release%2A>兩次，這兩個呼叫會成功。 此時號誌計數已滿，當執行緒 A 終於呼叫 <xref:System.Threading.Semaphore.Release%2A> 時，就會擲回 <xref:System.Threading.SemaphoreFullException>。  
  
 號誌有兩種類型： 本機號誌和具名的系統號誌。 如果您建立<xref:System.Threading.Semaphore>物件使用的建構函式接受名稱，它是與作業系統號誌，該名稱的關聯。 具名的系統號誌可在作業系統各處並可用來同步處理程序的活動。 您可以建立多個<xref:System.Threading.Semaphore>物件，代表相同具名系統號誌，而且您可以使用<xref:System.Threading.Semaphore.OpenExisting%2A>方法來開啟現有的具名系統號誌。  
  
 只有在您的程序內，存在本機號誌。 在處理序內，只要是參考了本機 <xref:System.Threading.Semaphore> 物件的執行緒，就可使用本機 Mutex。 每個<xref:System.Threading.Semaphore>物件是不同的區域號誌。  
  
   
  
## Examples  
 下列程式碼範例會建立信號的最大計數的三個與初始計數為零。 此範例會啟動五個執行緒，封鎖而等待號誌。 主要執行緒會使用<xref:System.Threading.Semaphore.Release%28System.Int32%29>號誌計數增加至其最大值，讓三個執行緒進入號誌的方法多載。 每個執行緒使用<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>方法等候一秒，以模擬工作，然後呼叫<xref:System.Threading.Semaphore.Release>方法多載來釋放號誌。 已釋放號誌，每次會顯示先前的號誌計數。 主控台訊息追蹤號誌的使用。 模擬的工作間隔會稍微增加每個執行緒，可讓輸出更容易閱讀。  
  
 [!code-cpp[System.Threading.Semaphore2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore2/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>此型別具備執行緒安全。</threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Threading.Semaphore" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Semaphore (int initialCount, int maximumCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount, int32 maximumCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialCount As Integer, maximumCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Semaphore(int initialCount, int maximumCount);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" />
        <Parameter Name="maximumCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="initialCount">可同時授與給號誌的初始要求數目。</param>
        <param name="maximumCount">可以同時授與之號誌要求的最大數目。</param>
        <summary>初始化 <see cref="T:System.Threading.Semaphore" /> 類別的新執行個體，以及指定並行項目的最大數目及選擇性地保留某些項目。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式會初始化未命名的號誌。 使用這類號誌的執行個體的所有執行緒都必須都有執行個體的參考。  
  
 如果`initialCount`是小於`maximumCount`，結果是相同的目前執行緒已呼叫<xref:System.Threading.WaitHandle.WaitOne%2A>(`maximumCount`減去`initialCount`) 時間。 如果您不想要保留之執行緒建立號誌的任何項目，使用相同號碼`maximumCount`和`initialCount`。  
  
   
  
## Examples  
 下列範例會建立一個號誌的最大計數，這三個與初始計數為零。 此範例會啟動五個執行緒，封鎖而等待號誌。 主要執行緒會使用<xref:System.Threading.Semaphore.Release%28System.Int32%29>號誌計數增加至其最大值，讓三個執行緒進入號誌的方法多載。 每個執行緒使用<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>方法等候一秒，以模擬工作，然後呼叫<xref:System.Threading.Semaphore.Release>方法多載來釋放號誌。 已釋放號誌，每次會顯示先前的號誌計數。 主控台訊息追蹤號誌的使用。 模擬的工作間隔會稍微增加每個執行緒，可讓輸出更容易閱讀。  
  
 [!code-cpp[System.Threading.Semaphore2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="initialCount" /> 大於 <paramref name="maximumCount" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="maximumCount" /> 小於 1。  
  
 -或-  
  
 <paramref name="initialCount" /> 小於 0。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Semaphore (int initialCount, int maximumCount, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount, int32 maximumCount, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialCount As Integer, maximumCount As Integer, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Semaphore(int initialCount, int maximumCount, System::String ^ name);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" />
        <Parameter Name="maximumCount" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="initialCount">可同時授與給號誌的初始要求數目。</param>
        <param name="maximumCount">可以同時授與之號誌要求的最大數目。</param>
        <param name="name">具名系統號誌物件的名稱。</param>
        <summary>初始化 <see cref="T:System.Threading.Semaphore" /> 類別的新執行個體，然後指定初始項目數目與並行項目的最大數目，以及選擇性地指定系統號誌物件的名稱。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式初始化<xref:System.Threading.Semaphore>表示具名的系統號誌的物件。 您可以建立多個<xref:System.Threading.Semaphore>物件，代表相同具名系統號誌。  
  
 如果具名的系統號誌不存在，就會建立初始計數與所指定的最大計數`initialCount`和`maximumCount`。 如果已經存在的具名的系統號誌，`initialCount`和`maximumCount`不會使用，雖然無效的值仍然會造成例外狀況。 如果您需要確定是否具名的系統號誌已建立，請使用<xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.String%2CSystem.Boolean%40%29>改為建構函式多載。  
  
> [!IMPORTANT]
>  當您使用這個建構函式多載時，建議的作法是指定相同數目的`initialCount`和`maximumCount`。 如果`initialCount`是小於`maximumCount`，和建立具名的系統號誌，結果是相同的目前執行緒已呼叫<xref:System.Threading.WaitHandle.WaitOne%2A>(`maximumCount`減去`initialCount`) 時間。 不過，使用這個建構函式多載沒有任何方法來判斷是否已建立了具名的系統號誌。  
  
 如果您指定`null`或為空字串。 `name`，建立本機號誌時，您必須呼叫<xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%29>建構函式多載。  
  
 由於具名號誌是在作業系統各處，它們可用來協調資源使用跨處理序界限。  
  
 如果您想要了解是否有具名的系統號誌，請使用<xref:System.Threading.Semaphore.OpenExisting%2A>方法。 <xref:System.Threading.Semaphore.OpenExisting%2A>方法會嘗試開啟現有的具名號誌，並擲回例外狀況，如果不存在之系統號誌。  
  
   
  
## Examples  
 下列程式碼範例示範具名號誌的跨處理序行為。 範例會建立具名號誌的最大計數為 5 與初始計數為 5。 讓程式三次呼叫<xref:System.Threading.WaitHandle.WaitOne%2A>方法。 因此，如果您從兩個命令視窗執行編譯的範例，第二個副本將會封鎖第三個呼叫<xref:System.Threading.WaitHandle.WaitOne%2A>。 放開解除封鎖第二個程式的第一個複本中的一個或多個項目。  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 3/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 3/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 3/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="initialCount" /> 大於 <paramref name="maximumCount" />。  
  
 -或-  
  
 <paramref name="name" /> 的長度超過 260 個字元。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="maximumCount" /> 小於 1。  
  
 -或-  
  
 <paramref name="initialCount" /> 小於 0。</exception>
        <exception cref="T:System.IO.IOException">發生 Win32 錯誤。</exception>
        <exception cref="T:System.UnauthorizedAccessException">具名信號已存在，並且具有存取控制安全性，而使用者沒有 <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" />。</exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">無法建立具名信號，可能是因為不同類型的等候控制代碼具有相同的名稱。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用於呼叫 unmanaged 程式碼來建立具名的系統號誌。 關聯的列舉型別：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。  
  
 安全性動作： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Semaphore (int initialCount, int maximumCount, string name, out bool createdNew);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount, int32 maximumCount, string name, [out] bool&amp; createdNew) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialCount As Integer, maximumCount As Integer, name As String, ByRef createdNew As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Semaphore(int initialCount, int maximumCount, System::String ^ name, [Runtime::InteropServices::Out] bool % createdNew);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" />
        <Parameter Name="maximumCount" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="createdNew" Type="System.Boolean&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="initialCount">可以同時滿足之號誌要求的初始數目。</param>
        <param name="maximumCount">可以同時滿足之號誌要求的最大數目。</param>
        <param name="name">具名系統號誌物件的名稱。</param>
        <param name="createdNew">當此方法傳回時，如果已建立本機旗號 (也就是說，如果 <c>name</c> 為 <see langword="null" /> 或空字串)，或是已建立指定的具名系統旗號，則會包含 <see langword="true" />；如果指定的具名系統旗號已存在，則為 <see langword="false" />。 這個參數會以未初始化的狀態傳遞。</param>
        <summary>初始化 <see cref="T:System.Threading.Semaphore" /> 類別的新執行個體，然後指定初始項目物件數目與並行項目的最大數目，選擇性地指定系統號誌物件的名稱，以及指定接收值的變數，指出是否已建立新的系統號誌。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式初始化<xref:System.Threading.Semaphore>表示具名的系統號誌的物件。 您可以建立多個<xref:System.Threading.Semaphore>物件，代表相同具名系統號誌。  
  
 如果具名的系統號誌不存在，就會建立初始計數與所指定的最大計數`initialCount`和`maximumCount`。 如果已經存在的具名的系統號誌，`initialCount`和`maximumCount`不會使用，雖然無效的值仍然會造成例外狀況。 使用`createdNew`來判斷是否已建立之系統號誌。  
  
 如果`initialCount`是小於`maximumCount`，和`createdNew`是`true`，結果是相同的目前執行緒已呼叫<xref:System.Threading.WaitHandle.WaitOne%2A>(`maximumCount`減去`initialCount`) 時間。  
  
 如果您指定`null`或為空字串。 `name`，建立本機號誌時，您必須呼叫<xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%29>建構函式多載。 在此情況下，`createdNew`一律`true`。  
  
 由於具名號誌是在作業系統各處，它們可用來協調資源使用跨處理序界限。  
  
   
  
## Examples  
 下列程式碼範例示範具名號誌的跨處理序行為。 範例會建立具名號誌的最大計數為 5，且兩個初始計數。 也就是說，它會保留之執行緒的呼叫建構函式的三個項目。 如果`createNew`是`false`，讓程式三次呼叫<xref:System.Threading.WaitHandle.WaitOne%2A>方法。 因此，如果您從兩個命令視窗執行編譯的範例，第二個副本將會封鎖第三個呼叫<xref:System.Threading.WaitHandle.WaitOne%2A>。 放開解除封鎖第二個程式的第一個複本中的一個或多個項目。  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 4/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 4/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 4/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="initialCount" /> 大於 <paramref name="maximumCount" />。  
  
 -或-  
  
 <paramref name="name" /> 的長度超過 260 個字元。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="maximumCount" /> 小於 1。  
  
 -或-  
  
 <paramref name="initialCount" /> 小於 0。</exception>
        <exception cref="T:System.IO.IOException">發生 Win32 錯誤。</exception>
        <exception cref="T:System.UnauthorizedAccessException">具名信號已存在，並且具有存取控制安全性，而使用者沒有 <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" />。</exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">無法建立具名信號，可能是因為不同類型的等候控制代碼具有相同的名稱。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用於呼叫 unmanaged 程式碼來建立具名的系統號誌。 關聯的列舉型別：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。  
  
 安全性動作： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Semaphore (int initialCount, int maximumCount, string name, out bool createdNew, System.Security.AccessControl.SemaphoreSecurity semaphoreSecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount, int32 maximumCount, string name, [out] bool&amp; createdNew, class System.Security.AccessControl.SemaphoreSecurity semaphoreSecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String,System.Boolean@,System.Security.AccessControl.SemaphoreSecurity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Semaphore(int initialCount, int maximumCount, System::String ^ name, [Runtime::InteropServices::Out] bool % createdNew, System::Security::AccessControl::SemaphoreSecurity ^ semaphoreSecurity);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" />
        <Parameter Name="maximumCount" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="createdNew" Type="System.Boolean&amp;" RefType="out" />
        <Parameter Name="semaphoreSecurity" Type="System.Security.AccessControl.SemaphoreSecurity" />
      </Parameters>
      <Docs>
        <param name="initialCount">可以同時滿足之號誌要求的初始數目。</param>
        <param name="maximumCount">可以同時滿足之號誌要求的最大數目。</param>
        <param name="name">具名系統號誌物件的名稱。</param>
        <param name="createdNew">當此方法傳回時，如果已建立本機旗號 (也就是說，如果 <c>name</c> 為 <see langword="null" /> 或空字串)，或是已建立指定的具名系統旗號，則會包含 <see langword="true" />；如果指定的具名系統旗號已存在，則為 <see langword="false" />。 這個參數會以未初始化的狀態傳遞。</param>
        <param name="semaphoreSecurity">
          <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> 物件，表示要套用到具名系統旗號的存取控制安全性。</param>
        <summary>初始化 <see cref="T:System.Threading.Semaphore" /> 類別的新執行個體，然後指定初始項目數目與並行項目的最大數目，選擇性地指定系統號誌物件的名稱，指定接收值的變數 (以指示是否已建立新的系統號誌)，以及指定系統號誌的安全性存取控制。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 要套用至具名的系統號誌的存取控制安全性，建立時，防止控管之號誌的其他程式碼中使用這個建構函式。  
  
 這個建構函式初始化<xref:System.Threading.Semaphore>表示具名的系統號誌的物件。 您可以建立多個<xref:System.Threading.Semaphore>物件，代表相同具名系統號誌。  
  
 如果具名的系統號誌不存在，則會建立具有指定的存取控制安全性。 如果具名號誌已存在，則會忽略指定的存取控制安全性。  
  
> [!NOTE]
>  呼叫端具有對於新建立的完整控制權<xref:System.Threading.Semaphore>物件，即使`semaphoreSecurity`拒絕，或將某些存取權授與目前的使用者就會失敗。 不過，如果目前的使用者試圖取得另一個<xref:System.Threading.Semaphore>物件代表相同具名號誌，使用建構函式或<xref:System.Threading.Semaphore.OpenExisting%2A>方法時，Windows 會套用存取控制安全性。  
  
 如果具名的系統號誌不存在，就會建立初始計數與所指定的最大計數`initialCount`和`maximumCount`。 如果已經存在的具名的系統號誌，`initialCount`和`maximumCount`不會使用，雖然無效的值仍然會造成例外狀況。 使用`createdNew`參數，來判斷是否由這個建構函式所建立之系統號誌。  
  
 如果`initialCount`是小於`maximumCount`，和`createdNew`是`true`，結果是相同的目前執行緒已呼叫<xref:System.Threading.WaitHandle.WaitOne%2A>(`maximumCount`減去`initialCount`) 時間。  
  
 如果您指定`null`或為空字串。 `name`，建立本機號誌時，您必須呼叫<xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%29>建構函式多載。 在此情況下，`createdNew`一律`true`。  
  
 由於具名號誌是在作業系統各處，它們可用來協調資源使用跨處理序界限。  
  
   
  
## Examples  
 下列程式碼範例示範具名號誌的跨處理序行為與存取控制安全性。 此範例會使用<xref:System.Threading.Semaphore.OpenExisting%28System.String%29>方法多載來測試是否存在的具名號誌。 如果號誌不存在，它會建立兩個的最大計數與拒絕目前的使用者使用號誌的權限，但讀取和變更，號誌上的權限的權限會授與存取控制安全性。 如果您從兩個命令視窗執行編譯的範例，第二個副本將會擲回存取違規的例外狀況上呼叫<xref:System.Threading.Semaphore.OpenExisting%28System.String%29>方法。 例外狀況時，和此範例會使用<xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29>方法多載來讀取和變更的權限所需的權限來開啟號誌。  
  
 變更權限之後，號誌被開啟來輸入，並釋放所需的權限。 如果您是從第三個命令視窗執行編譯的範例，它會使用執行新的權限。  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="initialCount" /> 大於 <paramref name="maximumCount" />。  
  
 -或-  
  
 <paramref name="name" /> 的長度超過 260 個字元。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="maximumCount" /> 小於 1。  
  
 -或-  
  
 <paramref name="initialCount" /> 小於 0。</exception>
        <exception cref="T:System.UnauthorizedAccessException">具名信號已存在，並且具有存取控制安全性，而使用者沒有 <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" />。</exception>
        <exception cref="T:System.IO.IOException">發生 Win32 錯誤。</exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">無法建立具名信號，可能是因為不同類型的等候控制代碼具有相同的名稱。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用於呼叫 unmanaged 程式碼來建立具名的系統號誌。 關聯的列舉型別：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。 安全性動作： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="GetAccessControl">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.SemaphoreSecurity GetAccessControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.AccessControl.SemaphoreSecurity GetAccessControl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.GetAccessControl" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAccessControl () As SemaphoreSecurity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::AccessControl::SemaphoreSecurity ^ GetAccessControl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.SemaphoreSecurity</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>為具名系統號誌取得存取控制安全性。</summary>
        <returns>
          <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> 物件，表示具名系統號誌的存取控制安全性。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.Semaphore.GetAccessControl%2A>方法會使用下列旗標 （使用位元 OR 運算結合） 的組合來搜尋權限： <xref:System.Security.AccessControl.AccessControlSections.Access?displayProperty=nameWithType>， <xref:System.Security.AccessControl.AccessControlSections.Owner?displayProperty=nameWithType>，和<xref:System.Security.AccessControl.AccessControlSections.Group?displayProperty=nameWithType>。  
  
 使用者必須擁有<xref:System.Security.AccessControl.SemaphoreRights.ReadPermissions?displayProperty=nameWithType>呼叫這個方法和號誌的權限必須是與開啟<xref:System.Security.AccessControl.SemaphoreRights.ReadPermissions?displayProperty=nameWithType>權限。  
  
 存取控制安全性區域號誌，是不相關。 如果<xref:System.Threading.Semaphore>物件不代表具名的系統號誌，則這個方法會傳回<xref:System.Security.AccessControl.SemaphoreSecurity>授與任何使用者所有權限的物件。  
  
   
  
## Examples  
 下列程式碼範例示範具名號誌的跨處理序行為與存取控制安全性。 此範例會使用<xref:System.Threading.Semaphore.OpenExisting%28System.String%29>方法多載來測試是否存在的具名號誌。  
  
 如果號誌不存在，它會建立兩個的最大計數與拒絕目前使用者的權限使用號誌，但讀取和變更，號誌上的權限的權限會授與存取控制安全性。  
  
 如果您從兩個命令視窗執行編譯的範例，第二個副本將會擲回存取違規的例外狀況上呼叫<xref:System.Threading.Semaphore.OpenExisting%28System.String%29>方法。 例外狀況時，和此範例會使用<xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29>方法多載來讀取和變更的權限所需的權限來開啟號誌。 使用來取得系統號誌的存取控制安全性<xref:System.Threading.Semaphore.GetAccessControl%2A>方法。  
  
 變更權限之後，號誌被開啟來輸入，並釋放所需的權限。 如果您是從第三個命令視窗執行編譯的範例，它會使用執行新的權限。  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">目前的 <see cref="T:System.Threading.Semaphore" /> 物件代表具名的系統信號，而且使用者沒有 <see cref="F:System.Security.AccessControl.SemaphoreRights.ReadPermissions" /> 權限。  
  
 -或-  
  
 目前的 <see cref="T:System.Threading.Semaphore" /> 物件代表具名的系統信號，而且不是使用 <see cref="F:System.Security.AccessControl.SemaphoreRights.ReadPermissions" /> 權限所開啟。</exception>
        <exception cref="T:System.NotSupportedException">不支援 Windows 98 或 Windows Millennium Edition。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenExisting">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>開啟指定的具名號誌 (如果已經存在)。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenExisting">
      <MemberSignature Language="C#" Value="public static System.Threading.Semaphore OpenExisting (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Semaphore OpenExisting(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.OpenExisting(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenExisting (name As String) As Semaphore" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Semaphore ^ OpenExisting(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Semaphore</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">要開啟之系統號誌的名稱。</param>
        <summary>開啟指定的具名號誌 (如果已經存在)。</summary>
        <returns>表示具名系統號誌的物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.Semaphore.OpenExisting%2A>方法嘗試開啟指定的具名號誌。 如果不存在之系統號誌，這個方法會擲回例外狀況而建立之系統號誌。 若要建立之系統號誌，已經不存在時，使用其中一種<xref:System.Threading.Semaphore.%23ctor%2A>建構函式具有`name`參數。  
  
 使用相同的值，這個方法的多次呼叫`name`不一定會傳回相同<xref:System.Threading.Semaphore>物件，即使會傳回代表的物件相同具名系統號誌。  
  
 這個方法多載就相當於呼叫<xref:System.Threading.Semaphore.OpenExisting%2A>方法多載，並指定<xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType>和<xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType>權限，使用位元 OR 運算結合。  
  
 指定<xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType>旗標可讓執行緒進入號誌，並指定<xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType>旗標可讓呼叫執行緒<xref:System.Threading.Semaphore.Release%2A>方法。  
  
   
  
## Examples  
 下列程式碼範例示範具名號誌的跨處理序行為與存取控制安全性。 此範例會使用<xref:System.Threading.Semaphore.OpenExisting%28System.String%29>方法多載來測試是否存在的具名號誌。  
  
 如果號誌不存在，它會建立兩個的最大計數與拒絕的目前使用者的權限使用號誌，但以授與讀取和變更，號誌上的權限的權限的存取控制安全性。  
  
 如果您從兩個命令視窗執行編譯的範例，第二個副本將會擲回存取違規的例外狀況上呼叫<xref:System.Threading.Semaphore.OpenExisting%28System.String%29>方法多載。 例外狀況時，和此範例會使用<xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29>方法多載來讀取和變更的權限所需的權限來開啟號誌。  
  
 變更權限之後，號誌被開啟輸入，並釋放它所需的權限。 如果您是從第三個命令視窗執行編譯的範例，它會使用執行新的權限。  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> 為空字串。  
  
 -或-  
  
 <paramref name="name" /> 的長度超過 260 個字元。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">具名號誌不存在。</exception>
        <exception cref="T:System.IO.IOException">發生 Win32 錯誤。</exception>
        <exception cref="T:System.UnauthorizedAccessException">具名的信號已存在，但使用者沒有使用它所需的安全性存取權。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用於呼叫 unmanaged 程式碼，以開啟具名的系統號誌。 關聯的列舉型別：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。  
  
 安全性動作： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="OpenExisting">
      <MemberSignature Language="C#" Value="public static System.Threading.Semaphore OpenExisting (string name, System.Security.AccessControl.SemaphoreRights rights);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Semaphore OpenExisting(string name, valuetype System.Security.AccessControl.SemaphoreRights rights) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.OpenExisting(System.String,System.Security.AccessControl.SemaphoreRights)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenExisting (name As String, rights As SemaphoreRights) As Semaphore" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Semaphore ^ OpenExisting(System::String ^ name, System::Security::AccessControl::SemaphoreRights rights);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Semaphore</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="rights" Type="System.Security.AccessControl.SemaphoreRights" />
      </Parameters>
      <Docs>
        <param name="name">要開啟之系統號誌的名稱。</param>
        <param name="rights">列舉值的位元組合，表示所需的安全性存取。</param>
        <summary>使用所需的安全性存取權，開啟指定的具名號誌 (如果已經存在)。</summary>
        <returns>表示具名系統號誌的物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `rights`參數必須包含<xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType>旗標以允許的執行緒進入號誌，而<xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType>旗標以允許呼叫的執行緒<xref:System.Threading.Semaphore.Release%2A>方法。  
  
 <xref:System.Threading.Semaphore.OpenExisting%2A>方法嘗試開啟現有的具名號誌。 如果不存在之系統號誌，這個方法會擲回例外狀況而建立之系統號誌。 若要建立之系統號誌，已經不存在時，使用其中一種<xref:System.Threading.Semaphore.%23ctor%2A>建構函式具有`name`參數。  
  
 使用相同的值，這個方法的多次呼叫`name`不一定會傳回相同<xref:System.Threading.Semaphore>物件，即使會傳回代表的物件相同具名系統號誌。  
  
   
  
## Examples  
 下列程式碼範例示範具名號誌的跨處理序行為與存取控制安全性。 此範例會使用<xref:System.Threading.Semaphore.OpenExisting%28System.String%29>方法多載來測試是否存在的具名號誌。  
  
 如果號誌不存在，它會建立兩個的最大計數與拒絕目前使用者的權限使用號誌，但讀取和變更，號誌上的權限的權限會授與存取控制安全性。  
  
 如果您從兩個命令視窗執行編譯的範例，第二個副本將會擲回存取違規的例外狀況上呼叫<xref:System.Threading.Semaphore.OpenExisting%28System.String%29>方法。 例外狀況時，和此範例會使用<xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29>方法多載來讀取和變更的權限所需的權限來開啟號誌。  
  
 變更權限之後，號誌被開啟輸入，並釋放它所需的權限。 如果您是從第三個命令視窗執行編譯的範例，它會使用執行新的權限。  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> 為空字串。  
  
 -或-  
  
 <paramref name="name" /> 的長度超過 260 個字元。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">具名號誌不存在。</exception>
        <exception cref="T:System.IO.IOException">發生 Win32 錯誤。</exception>
        <exception cref="T:System.UnauthorizedAccessException">具名號誌已存在，但是使用者沒有所需的安全性存取權限。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用於呼叫 unmanaged 程式碼來建立具名的系統號誌。 關聯的列舉型別：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。  
  
 安全性動作： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="Release">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>結束號誌。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public int Release ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Release() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.Release" />
      <MemberSignature Language="VB.NET" Value="Public Function Release () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Release();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.PrePrepareMethod</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>結束號誌，並傳回上一個計數。</summary>
        <returns>呼叫 <see cref="Overload:System.Threading.Semaphore.Release" /> 方法之前，號誌上的計數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 執行緒通常會使用<xref:System.Threading.WaitHandle.WaitOne%2A>方法進入號誌，而且它們通常使用這個方法多載來結束。  
  
 如果<xref:System.Threading.SemaphoreFullException>，所擲回<xref:System.Threading.Semaphore.Release%2A>方法，不一定表示呼叫執行緒的問題。 另一個執行緒中的程式設計錯誤可能導致該執行緒結束次數多於進入號誌。  
  
 如果目前<xref:System.Threading.Semaphore>物件代表具名的系統號誌，使用者必須擁有<xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType>權限和號誌必須已經開啟與<xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType>權限。  
  
   
  
## Examples  
 下列程式碼範例會建立信號的最大計數的三個與初始計數為零。 此範例會啟動五個執行緒，封鎖而等待號誌。 主要執行緒會使用<xref:System.Threading.Semaphore.Release%28System.Int32%29>號誌計數增加至其最大值，讓三個執行緒進入號誌的方法多載。 每個執行緒使用<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>方法等候一秒，以模擬工作，然後呼叫<xref:System.Threading.Semaphore.Release>方法多載來釋放號誌。  
  
 已釋放號誌，每次會顯示先前的號誌計數。 主控台訊息追蹤號誌的使用。 模擬的工作間隔會稍微增加每個執行緒，可讓輸出更容易閱讀。  
  
 [!code-cpp[System.Threading.Semaphore2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SemaphoreFullException">號誌計數已達到最大值。</exception>
        <exception cref="T:System.IO.IOException">具名號誌中發生 Win32 錯誤。</exception>
        <exception cref="T:System.UnauthorizedAccessException">目前的號誌代表具名系統號誌，但是使用者沒有 <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" />。  
  
 -或-  
  
 目前的號誌代表具名系統號誌，但是並未以 <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" /> 開啟。</exception>
      </Docs>
    </Member>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public int Release (int releaseCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Release(int32 releaseCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.Release(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Release (releaseCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Release(int releaseCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="releaseCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="releaseCount">結束號誌的次數。</param>
        <summary>以指定的次數結束號誌，並回到上一個計數。</summary>
        <returns>呼叫 <see cref="Overload:System.Threading.Semaphore.Release" /> 方法之前，號誌上的計數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果執行緒已進入號誌多次，這個方法多載可讓與某個呼叫還原整個號誌計數。  
  
 如果<xref:System.Threading.SemaphoreFullException>，所擲回<xref:System.Threading.Semaphore.Release%2A>方法，不一定表示呼叫執行緒的問題。 另一個執行緒中的程式設計錯誤可能導致該執行緒結束次數多於進入號誌。  
  
 如果目前<xref:System.Threading.Semaphore>物件代表具名的系統號誌，使用者必須擁有<xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType>權限和號誌必須已經開啟與<xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType>權限。  
  
   
  
## Examples  
 下列程式碼範例會建立信號的最大計數的三個與初始計數為零。 此範例會啟動五個執行緒，封鎖而等待號誌。 主要執行緒會使用<xref:System.Threading.Semaphore.Release%28System.Int32%29>號誌計數增加至其最大值，讓三個執行緒進入號誌的方法多載。 每個執行緒使用<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>方法等候一秒，以模擬工作，然後呼叫<xref:System.Threading.Semaphore.Release>方法多載來釋放號誌。  
  
 已釋放號誌，每次會顯示先前的號誌計數。 主控台訊息追蹤號誌的使用。 模擬的工作間隔會稍微增加每個執行緒，可讓輸出更容易閱讀。  
  
 [!code-cpp[System.Threading.Semaphore2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="releaseCount" /> 小於 1。</exception>
        <exception cref="T:System.Threading.SemaphoreFullException">號誌計數已達到最大值。</exception>
        <exception cref="T:System.IO.IOException">具名號誌中發生 Win32 錯誤。</exception>
        <exception cref="T:System.UnauthorizedAccessException">目前的號誌代表具名系統號誌，但是使用者沒有 <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" /> 權限。  
  
 -或-  
  
 目前的號誌代表具名系統號誌，但是並未以 <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" /> 權限開啟。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetAccessControl">
      <MemberSignature Language="C#" Value="public void SetAccessControl (System.Security.AccessControl.SemaphoreSecurity semaphoreSecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAccessControl(class System.Security.AccessControl.SemaphoreSecurity semaphoreSecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.SetAccessControl(System.Security.AccessControl.SemaphoreSecurity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAccessControl(System::Security::AccessControl::SemaphoreSecurity ^ semaphoreSecurity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semaphoreSecurity" Type="System.Security.AccessControl.SemaphoreSecurity" />
      </Parameters>
      <Docs>
        <param name="semaphoreSecurity">
          <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> 物件，表示要套用到具名系統旗號的存取控制安全性。</param>
        <summary>為具名系統號誌設定存取控制安全性。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您只能上設定存取控制安全性<xref:System.Threading.Semaphore>表示具名的系統號誌的物件。  
  
 使用者必須擁有<xref:System.Security.AccessControl.SemaphoreRights.ChangePermissions?displayProperty=nameWithType>呼叫這個方法和號誌的權限必須是與開啟<xref:System.Security.AccessControl.SemaphoreRights.ChangePermissions?displayProperty=nameWithType>權限。  
  
   
  
## Examples  
 下列程式碼範例示範具名號誌的跨處理序行為與存取控制安全性。 此範例會使用<xref:System.Threading.Semaphore.OpenExisting%28System.String%29>方法多載來測試是否存在的具名號誌。  
  
 如果號誌不存在，它會建立兩個的最大計數與拒絕目前的使用者使用號誌的權限，但讀取和變更，號誌上的權限的權限會授與存取控制安全性。  
  
 如果您從兩個命令視窗執行編譯的範例，第二個副本將會擲回存取違規的例外狀況上呼叫<xref:System.Threading.Semaphore.OpenExisting%28System.String%29>方法。 例外狀況時，和此範例會使用<xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29>方法多載來讀取和變更的權限所需的權限來開啟號誌。  
  
 變更的權限，使用後<xref:System.Threading.Semaphore.SetAccessControl%2A>來輸入，並釋放所需的權限開啟方法，號誌。 如果您是從第三個命令視窗執行編譯的範例，它會使用執行新的權限。  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="semaphoreSecurity" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.UnauthorizedAccessException">使用者沒有 <see cref="F:System.Security.AccessControl.SemaphoreRights.ChangePermissions" /> 權限。  
  
 -或-  
  
 並未以 <see cref="F:System.Security.AccessControl.SemaphoreRights.ChangePermissions" /> 權限開啟號誌。</exception>
        <exception cref="T:System.NotSupportedException">目前的 <see cref="T:System.Threading.Semaphore" /> 物件不代表具名系統號誌。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryOpenExisting">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>開啟指定的具名號誌 (如果已經存在)，並傳回值，指出作業是否成功。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryOpenExisting">
      <MemberSignature Language="C#" Value="public static bool TryOpenExisting (string name, out System.Threading.Semaphore result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryOpenExisting(string name, [out] class System.Threading.Semaphore&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.TryOpenExisting(System.String,System.Threading.Semaphore@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryOpenExisting (name As String, ByRef result As Semaphore) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryOpenExisting(System::String ^ name, [Runtime::InteropServices::Out] System::Threading::Semaphore ^ % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="result" Type="System.Threading.Semaphore&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="name">要開啟之系統號誌的名稱。</param>
        <param name="result">這個方法傳回時，如果呼叫成功，則包含 <see cref="T:System.Threading.Semaphore" /> 物件，此物件代表具名信號，如果呼叫失敗，則為<see langword="null" />。 這個參數會被視為未初始化。</param>
        <summary>開啟指定的具名號誌 (如果已經存在)，並傳回值，指出作業是否成功。</summary>
        <returns>
          如果已成功開啟具名號誌，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果不存在的具名號誌，這個方法不會建立它。 若要建立之系統號誌，已經不存在時，使用其中一種<xref:System.Threading.Semaphore.%23ctor%2A>建構函式具有`name`參數。  
  
 如果您不確定具名號誌是否存在，請使用這個方法多載，而不是<xref:System.Threading.Semaphore.OpenExisting%28System.String%29>方法多載，如果號誌不存在，擲回例外狀況。  
  
 這個方法多載就相當於呼叫<xref:System.Threading.Semaphore.TryOpenExisting%2A>方法多載，並指定<xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType>和<xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType>權限，使用位元 OR 運算結合。 指定<xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType>旗標可讓執行緒進入號誌，並指定<xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType>旗標可讓呼叫執行緒<xref:System.Threading.Semaphore.Release%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> 為空字串。  
  
 -或-  
  
 <paramref name="name" /> 的長度超過 260 個字元。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.IOException">發生 Win32 錯誤。</exception>
        <exception cref="T:System.UnauthorizedAccessException">具名的信號已存在，但使用者沒有使用它所需的安全性存取權。</exception>
      </Docs>
    </Member>
    <Member MemberName="TryOpenExisting">
      <MemberSignature Language="C#" Value="public static bool TryOpenExisting (string name, System.Security.AccessControl.SemaphoreRights rights, out System.Threading.Semaphore result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryOpenExisting(string name, valuetype System.Security.AccessControl.SemaphoreRights rights, [out] class System.Threading.Semaphore&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.TryOpenExisting(System.String,System.Security.AccessControl.SemaphoreRights,System.Threading.Semaphore@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryOpenExisting (name As String, rights As SemaphoreRights, ByRef result As Semaphore) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryOpenExisting(System::String ^ name, System::Security::AccessControl::SemaphoreRights rights, [Runtime::InteropServices::Out] System::Threading::Semaphore ^ % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="rights" Type="System.Security.AccessControl.SemaphoreRights" />
        <Parameter Name="result" Type="System.Threading.Semaphore&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="name">要開啟之系統號誌的名稱。</param>
        <param name="rights">列舉值的位元組合，表示所需的安全性存取。</param>
        <param name="result">這個方法傳回時，如果呼叫成功，則包含 <see cref="T:System.Threading.Semaphore" /> 物件，此物件代表具名信號，如果呼叫失敗，則為<see langword="null" />。 這個參數會被視為未初始化。</param>
        <summary>使用所需的安全性存取權，開啟指定的具名號誌 (如果已經存在)，並傳回值，指出作業是否成功。</summary>
        <returns>
          如果已成功開啟具名號誌，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果不存在的具名號誌，這個方法不會建立它。 若要建立之系統號誌，已經不存在時，使用其中一種<xref:System.Threading.Semaphore.%23ctor%2A>建構函式具有`name`參數。  
  
 如果您不確定具名號誌是否存在，請使用這個方法多載，而不是<xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29>方法多載，如果號誌不存在，擲回例外狀況。  
  
 `rights`參數必須包含<xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType>旗標以允許的執行緒進入號誌，而<xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType>旗標以允許呼叫的執行緒<xref:System.Threading.Semaphore.Release%2A>方法。  
  
 使用相同的值，這個方法的多次呼叫`name`不一定會傳回相同<xref:System.Threading.Semaphore>物件，即使會傳回代表的物件相同具名系統號誌。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> 為空字串。  
  
 -或-  
  
 <paramref name="name" /> 的長度超過 260 個字元。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.IOException">發生 Win32 錯誤。</exception>
        <exception cref="T:System.UnauthorizedAccessException">具名的信號已存在，但使用者沒有使用它所需的安全性存取權。</exception>
      </Docs>
    </Member>
  </Members>
</Type>