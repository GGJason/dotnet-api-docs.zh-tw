<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="WaitOrTimerCallback.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5b5d797b515515af78c99d7bae5dc98c881fba73b.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b5d797b515515af78c99d7bae5dc98c881fba73b</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.WaitOrTimerCallback">
          <source>An object containing information to be used by the callback method each time it executes.</source>
          <target state="translated">物件，它包含回呼方法所使用的資訊。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Threading.WaitOrTimerCallback">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> timed out; <ph id="ph3">&lt;see langword="false" /&gt;</ph> if it was signaled.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>，表示 <ph id="ph2">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> 逾時；<ph id="ph3">&lt;see langword="false" /&gt;</ph>，表示收到信號。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Threading.WaitOrTimerCallback">
          <source>Represents a method to be called when a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> is signaled or times out.</source>
          <target state="translated">表示 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> 收到信號或逾時時呼叫的方法。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitOrTimerCallback">
          <source><ph id="ph1">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> represents a callback method that you want to execute when a registered wait handle times out or is signaled.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> 代表您想要的已註冊之等候控制代碼會逾時或收到信號時執行的回呼方法。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitOrTimerCallback">
          <source>Create the delegate by passing your callback method to the <ph id="ph1">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> constructor.</source>
          <target state="translated">藉由傳遞至回呼方法建立委派<ph id="ph1">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph>建構函式。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitOrTimerCallback">
          <source>Your method must have the signature shown here.</source>
          <target state="translated">您的方法必須有簽章如下所示。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitOrTimerCallback">
          <source>Create the registered wait handle by passing the <ph id="ph1">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> delegate and a <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph> to <ph id="ph3">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">建立已註冊之等候控制代碼傳遞<ph id="ph1">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph>委派和<ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>至<ph id="ph3">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitOrTimerCallback">
          <source>Your callback method executes each time the <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> times out or is signaled.</source>
          <target state="translated">執行每次回呼方法<ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph>逾時或收到信號。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitOrTimerCallback">
          <source>Visual Basic users can omit the <ph id="ph1">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> constructor, and simply use the <ph id="ph2">`AddressOf`</ph> operator when passing the callback method to <ph id="ph3">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 使用者可以省略<ph id="ph1">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph>建構函式，並只是使用<ph id="ph2">`AddressOf`</ph>運算子時傳遞至回呼方法<ph id="ph3">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitOrTimerCallback">
          <source>Visual Basic automatically calls the correct delegate constructor.</source>
          <target state="translated">Visual Basic 會自動呼叫正確的委派建構函式。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitOrTimerCallback">
          <source>If you want to pass information to your callback method, create an object that contains the necessary information and pass it to <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> when you create the registered wait handle.</source>
          <target state="translated">如果您想要將資訊傳遞至回呼方法，建立包含必要資訊的物件，並將它傳遞給<ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>當您建立的已註冊之等候控制代碼。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitOrTimerCallback">
          <source>Each time your callback method executes, the <ph id="ph1">`state`</ph> parameter contains this object.</source>
          <target state="translated">執行回呼方法時，每次<ph id="ph1">`state`</ph>參數包含此物件。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitOrTimerCallback">
          <source>For more information about using callback methods to synchronize thread pool threads, see <bpt id="p1">[</bpt>The Managed Thread Pool<ept id="p1">](~/docs/standard/threading/the-managed-thread-pool.md)</ept>.</source>
          <target state="translated">如需使用回呼方法來同步處理執行緒集區執行緒的詳細資訊，請參閱<bpt id="p1">[</bpt>Managed 執行緒集區<ept id="p1">](~/docs/standard/threading/the-managed-thread-pool.md)</ept>。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitOrTimerCallback">
          <source>The following example shows how to use the <ph id="ph1">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> delegate to represent a callback method that is executed when a wait handle is signaled.</source>
          <target state="translated">下列範例示範如何使用<ph id="ph1">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph>委派來代表等候控制代碼會收到信號時所執行的回呼方法。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitOrTimerCallback">
          <source>The example also shows how to use the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method to execute a specified callback method when a specified wait handle is signaled.</source>
          <target state="translated">此範例也示範如何使用<ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>方法來指定的等候控制代碼會收到信號時，執行指定的回呼方法。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitOrTimerCallback">
          <source>In this example, the callback method is <ph id="ph1">`WaitProc`</ph> and the wait handle is an <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>.</source>
          <target state="translated">在此範例中，回呼方法是<ph id="ph1">`WaitProc`</ph>等候控制代碼，且<ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitOrTimerCallback">
          <source>The example defines a <ph id="ph1">`TaskInfo`</ph> class to hold the information that is passed to the callback when it executes.</source>
          <target state="translated">此範例會定義<ph id="ph1">`TaskInfo`</ph>類別以包裝在執行時傳遞至回呼的資訊。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitOrTimerCallback">
          <source>The example creates a <ph id="ph1">`TaskInfo`</ph> object and assigns it some string data.</source>
          <target state="translated">此範例會建立<ph id="ph1">`TaskInfo`</ph>物件，並將其指派一些字串資料。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitOrTimerCallback">
          <source>The <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> that is returned by the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method is assigned to the <ph id="ph3">`Handle`</ph> field of the <ph id="ph4">`TaskInfo`</ph> object, so that the callback method has access to the <ph id="ph5">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>所傳回<ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>方法指派給<ph id="ph3">`Handle`</ph>欄位<ph id="ph4">`TaskInfo`</ph>物件，使回呼方法具有存取權<ph id="ph5">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitOrTimerCallback">
          <source>In addition to the <ph id="ph1">`TaskInfo`</ph> object, the call to the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method specifies the <ph id="ph3">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> the task waits on, a <ph id="ph4">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> delegate that represents the <ph id="ph5">`WaitProc`</ph> callback method, a one-second timeout interval, and multiple callbacks.</source>
          <target state="translated">除了<ph id="ph1">`TaskInfo`</ph>物件，會呼叫<ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>方法指定<ph id="ph3">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>工作會等待，<ph id="ph4">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph>委派，表示<ph id="ph5">`WaitProc`</ph>回呼方法，一秒的逾時間隔，以及多個回呼.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitOrTimerCallback">
          <source>When the main thread signals the <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> by calling its <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> method, the <ph id="ph3">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> delegate is invoked.</source>
          <target state="translated">當主執行緒發出的訊號<ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>藉由呼叫其<ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph>方法，<ph id="ph3">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph>叫用委派。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitOrTimerCallback">
          <source>The <ph id="ph1">`WaitProc`</ph> method tests <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> to determine whether a timeout occurred.</source>
          <target state="translated"><ph id="ph1">`WaitProc`</ph>方法測試<ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>來判斷是否發生逾時。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitOrTimerCallback">
          <source>If the callback was invoked because the wait handle was signaled, the <ph id="ph1">`WaitProc`</ph> method unregisters the <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>, stopping further callbacks.</source>
          <target state="translated">如果回呼已叫用，因為已收到信號，等候控制代碼，<ph id="ph1">`WaitProc`</ph>方法會移除註冊<ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>，停止進一步的回呼。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitOrTimerCallback">
          <source>In the case of a timeout, the task continues waiting.</source>
          <target state="translated">在逾時，工作會繼續等候。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitOrTimerCallback">
          <source>The <ph id="ph1">`WaitProc`</ph> method ends by printing a message to the console.</source>
          <target state="translated"><ph id="ph1">`WaitProc`</ph>方法結束列印訊息至主控台。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>