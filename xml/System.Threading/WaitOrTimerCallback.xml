<Type Name="WaitOrTimerCallback" FullName="System.Threading.WaitOrTimerCallback">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0bbfa013120262f762e4cf955271e6d0ee2830e1" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58706405" /></Metadata><TypeSignature Language="C#" Value="public delegate void WaitOrTimerCallback(object state, bool timedOut);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed WaitOrTimerCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.WaitOrTimerCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub WaitOrTimerCallback(state As Object, timedOut As Boolean)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void WaitOrTimerCallback(System::Object ^ state, bool timedOut);" />
  <TypeSignature Language="F#" Value="type WaitOrTimerCallback = delegate of obj * bool -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.ThreadPool</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="state" Type="System.Object" />
    <Parameter Name="timedOut" Type="System.Boolean" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="state">物件，它包含回呼方法所使用的資訊。</param>
    <param name="timedOut"><see langword="true" />，表示 <see cref="T:System.Threading.WaitHandle" /> 逾時；<see langword="false" />，表示收到信號。</param>
    <summary>表示 <see cref="T:System.Threading.WaitHandle" /> 收到信號或逾時時呼叫的方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.WaitOrTimerCallback> 表示您想要執行的已註冊之等候控制代碼會逾時或收到信號時的回呼方法。 建立藉由傳遞至回呼方法的委派<xref:System.Threading.WaitOrTimerCallback>建構函式。 您的方法必須有簽章如下所示。  
  
 建立已註冊之等候控制代碼藉由傳遞<xref:System.Threading.WaitOrTimerCallback>委派並<xref:System.Threading.WaitHandle>至<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=nameWithType>。 每次執行的回呼方法<xref:System.Threading.WaitHandle>逾時或收到信號。  
  
  
> [!NOTE]
>  Visual Basic 使用者可以省略<xref:System.Threading.WaitOrTimerCallback>建構函式，並只使用`AddressOf`運算子傳遞至回呼方法時<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>。 Visual Basic 會自動呼叫正確的委派建構函式。  
  
 如果您想要將資訊傳遞至回呼方法，建立物件，包含所需的資訊，並將它傳遞給<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>當您建立的已註冊之等候控制代碼。 執行回呼方法時，每次`state`參數會包含此物件。  
  
 如需使用回呼方法來同步處理執行緒集區的詳細資訊，請參閱[managed 的執行緒集區](~/docs/standard/threading/the-managed-thread-pool.md)。  
  
   
  
## Examples  
 下列範例示範如何使用<xref:System.Threading.WaitOrTimerCallback>委派來代表等候控制代碼會收到信號時，所執行的回呼方法。  
  
 此範例也示範如何使用<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法來指定的等候控制代碼會收到信號時，執行指定的回呼方法。 在此範例中，是回呼方法`WaitProc`等候控制代碼，而且<xref:System.Threading.AutoResetEvent>。  
  
 此範例會定義`TaskInfo`類別來保存執行時傳遞至回呼的資訊。 此範例會建立`TaskInfo`物件，並將其指派一些字串資料。 <xref:System.Threading.RegisteredWaitHandle>傳回的<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法指派給`Handle`欄位`TaskInfo`物件，使回呼方法可以存取<xref:System.Threading.RegisteredWaitHandle>。  
  
 除了`TaskInfo`物件，會呼叫<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法會指定<xref:System.Threading.AutoResetEvent>工作等候，<xref:System.Threading.WaitOrTimerCallback>委派，表示`WaitProc`回呼方法，一秒逾時間隔，以及多個回呼.  
  
 當主執行緒發出信號<xref:System.Threading.AutoResetEvent>藉由呼叫其<xref:System.Threading.EventWaitHandle.Set%2A>方法，<xref:System.Threading.WaitOrTimerCallback>叫用委派。 `WaitProc`方法會測試<xref:System.Threading.RegisteredWaitHandle>來判斷是否發生逾時。 如果等候控制代碼發出訊號，因為叫用回呼`WaitProc`方法會移除註冊<xref:System.Threading.RegisteredWaitHandle>，停止進一步的回呼。 在逾時，工作會繼續等候。 `WaitProc`方法結束列印至主控台的訊息。  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/threading/threads-and-threading.md">執行緒和執行緒處理</related>
    <related type="Article" href="~/docs/standard/threading/the-managed-thread-pool.md">受控執行緒集區</related>
  </Docs>
</Type>