<Type Name="WaitOrTimerCallback" FullName="System.Threading.WaitOrTimerCallback">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b1a2dd4ad85878912bdbddf89cd8d606de47b160" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36605447" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void WaitOrTimerCallback(object state, bool timedOut);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed WaitOrTimerCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.WaitOrTimerCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub WaitOrTimerCallback(state As Object, timedOut As Boolean)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void WaitOrTimerCallback(System::Object ^ state, bool timedOut);" />
  <TypeSignature Language="F#" Value="type WaitOrTimerCallback = delegate of obj * bool -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.ThreadPool</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="state" Type="System.Object" />
    <Parameter Name="timedOut" Type="System.Boolean" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="state">
      <span data-ttu-id="b3923-101">物件，它包含回呼方法所使用的資訊。</span>
      <span class="sxs-lookup">
        <span data-stu-id="b3923-101">An object containing information to be used by the callback method each time it executes.</span>
      </span>
    </param>
    <param name="timedOut">
      <span data-ttu-id="b3923-102">
        <see langword="true" />，表示 <see cref="T:System.Threading.WaitHandle" /> 逾時；<see langword="false" />，表示收到信號。</span>
      <span class="sxs-lookup">
        <span data-stu-id="b3923-102">
          <see langword="true" /> if the <see cref="T:System.Threading.WaitHandle" /> timed out; <see langword="false" /> if it was signaled.</span>
      </span>
    </param>
    <summary>
      <span data-ttu-id="b3923-103">表示 <see cref="T:System.Threading.WaitHandle" /> 收到信號或逾時時呼叫的方法。</span>
      <span class="sxs-lookup">
        <span data-stu-id="b3923-103">Represents a method to be called when a <see cref="T:System.Threading.WaitHandle" /> is signaled or times out.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3923-104"><xref:System.Threading.WaitOrTimerCallback> 代表您想要的已註冊之等候控制代碼會逾時或收到信號時執行的回呼方法。</span><span class="sxs-lookup"><span data-stu-id="b3923-104"><xref:System.Threading.WaitOrTimerCallback> represents a callback method that you want to execute when a registered wait handle times out or is signaled.</span></span> <span data-ttu-id="b3923-105">藉由傳遞至回呼方法建立委派<xref:System.Threading.WaitOrTimerCallback>建構函式。</span><span class="sxs-lookup"><span data-stu-id="b3923-105">Create the delegate by passing your callback method to the <xref:System.Threading.WaitOrTimerCallback> constructor.</span></span> <span data-ttu-id="b3923-106">您的方法必須有簽章如下所示。</span><span class="sxs-lookup"><span data-stu-id="b3923-106">Your method must have the signature shown here.</span></span>  
  
 <span data-ttu-id="b3923-107">建立已註冊之等候控制代碼傳遞<xref:System.Threading.WaitOrTimerCallback>委派和<xref:System.Threading.WaitHandle>至<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b3923-107">Create the registered wait handle by passing the <xref:System.Threading.WaitOrTimerCallback> delegate and a <xref:System.Threading.WaitHandle> to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="b3923-108">執行每次回呼方法<xref:System.Threading.WaitHandle>逾時或收到信號。</span><span class="sxs-lookup"><span data-stu-id="b3923-108">Your callback method executes each time the <xref:System.Threading.WaitHandle> times out or is signaled.</span></span>  
  
  
> [!NOTE]
>  <span data-ttu-id="b3923-109">Visual Basic 使用者可以省略<xref:System.Threading.WaitOrTimerCallback>建構函式，並只是使用`AddressOf`運算子時傳遞至回呼方法<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>。</span><span class="sxs-lookup"><span data-stu-id="b3923-109">Visual Basic users can omit the <xref:System.Threading.WaitOrTimerCallback> constructor, and simply use the `AddressOf` operator when passing the callback method to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>.</span></span> <span data-ttu-id="b3923-110">Visual Basic 會自動呼叫正確的委派建構函式。</span><span class="sxs-lookup"><span data-stu-id="b3923-110">Visual Basic automatically calls the correct delegate constructor.</span></span>  
  
 <span data-ttu-id="b3923-111">如果您想要將資訊傳遞至回呼方法，建立包含必要資訊的物件，並將它傳遞給<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>當您建立的已註冊之等候控制代碼。</span><span class="sxs-lookup"><span data-stu-id="b3923-111">If you want to pass information to your callback method, create an object that contains the necessary information and pass it to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> when you create the registered wait handle.</span></span> <span data-ttu-id="b3923-112">執行回呼方法時，每次`state`參數包含此物件。</span><span class="sxs-lookup"><span data-stu-id="b3923-112">Each time your callback method executes, the `state` parameter contains this object.</span></span>  
  
 <span data-ttu-id="b3923-113">如需使用回呼方法來同步處理執行緒集區執行緒的詳細資訊，請參閱[Managed 執行緒集區](~/docs/standard/threading/the-managed-thread-pool.md)。</span><span class="sxs-lookup"><span data-stu-id="b3923-113">For more information about using callback methods to synchronize thread pool threads, see [The Managed Thread Pool](~/docs/standard/threading/the-managed-thread-pool.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b3923-114">下列範例示範如何使用<xref:System.Threading.WaitOrTimerCallback>委派來代表等候控制代碼會收到信號時所執行的回呼方法。</span><span class="sxs-lookup"><span data-stu-id="b3923-114">The following example shows how to use the <xref:System.Threading.WaitOrTimerCallback> delegate to represent a callback method that is executed when a wait handle is signaled.</span></span>  
  
 <span data-ttu-id="b3923-115">此範例也示範如何使用<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法來指定的等候控制代碼會收到信號時，執行指定的回呼方法。</span><span class="sxs-lookup"><span data-stu-id="b3923-115">The example also shows how to use the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method to execute a specified callback method when a specified wait handle is signaled.</span></span> <span data-ttu-id="b3923-116">在此範例中，回呼方法是`WaitProc`等候控制代碼，且<xref:System.Threading.AutoResetEvent>。</span><span class="sxs-lookup"><span data-stu-id="b3923-116">In this example, the callback method is `WaitProc` and the wait handle is an <xref:System.Threading.AutoResetEvent>.</span></span>  
  
 <span data-ttu-id="b3923-117">此範例會定義`TaskInfo`類別以包裝在執行時傳遞至回呼的資訊。</span><span class="sxs-lookup"><span data-stu-id="b3923-117">The example defines a `TaskInfo` class to hold the information that is passed to the callback when it executes.</span></span> <span data-ttu-id="b3923-118">此範例會建立`TaskInfo`物件，並將其指派一些字串資料。</span><span class="sxs-lookup"><span data-stu-id="b3923-118">The example creates a `TaskInfo` object and assigns it some string data.</span></span> <span data-ttu-id="b3923-119"><xref:System.Threading.RegisteredWaitHandle>所傳回<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法指派給`Handle`欄位`TaskInfo`物件，使回呼方法具有存取權<xref:System.Threading.RegisteredWaitHandle>。</span><span class="sxs-lookup"><span data-stu-id="b3923-119">The <xref:System.Threading.RegisteredWaitHandle> that is returned by the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method is assigned to the `Handle` field of the `TaskInfo` object, so that the callback method has access to the <xref:System.Threading.RegisteredWaitHandle>.</span></span>  
  
 <span data-ttu-id="b3923-120">除了`TaskInfo`物件，會呼叫<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法指定<xref:System.Threading.AutoResetEvent>工作會等待，<xref:System.Threading.WaitOrTimerCallback>委派，表示`WaitProc`回呼方法，一秒的逾時間隔，以及多個回呼.</span><span class="sxs-lookup"><span data-stu-id="b3923-120">In addition to the `TaskInfo` object, the call to the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method specifies the <xref:System.Threading.AutoResetEvent> the task waits on, a <xref:System.Threading.WaitOrTimerCallback> delegate that represents the `WaitProc` callback method, a one-second timeout interval, and multiple callbacks.</span></span>  
  
 <span data-ttu-id="b3923-121">當主執行緒發出的訊號<xref:System.Threading.AutoResetEvent>藉由呼叫其<xref:System.Threading.EventWaitHandle.Set%2A>方法，<xref:System.Threading.WaitOrTimerCallback>叫用委派。</span><span class="sxs-lookup"><span data-stu-id="b3923-121">When the main thread signals the <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, the <xref:System.Threading.WaitOrTimerCallback> delegate is invoked.</span></span> <span data-ttu-id="b3923-122">`WaitProc`方法測試<xref:System.Threading.RegisteredWaitHandle>來判斷是否發生逾時。</span><span class="sxs-lookup"><span data-stu-id="b3923-122">The `WaitProc` method tests <xref:System.Threading.RegisteredWaitHandle> to determine whether a timeout occurred.</span></span> <span data-ttu-id="b3923-123">如果回呼已叫用，因為已收到信號，等候控制代碼，`WaitProc`方法會移除註冊<xref:System.Threading.RegisteredWaitHandle>，停止進一步的回呼。</span><span class="sxs-lookup"><span data-stu-id="b3923-123">If the callback was invoked because the wait handle was signaled, the `WaitProc` method unregisters the <xref:System.Threading.RegisteredWaitHandle>, stopping further callbacks.</span></span> <span data-ttu-id="b3923-124">在逾時，工作會繼續等候。</span><span class="sxs-lookup"><span data-stu-id="b3923-124">In the case of a timeout, the task continues waiting.</span></span> <span data-ttu-id="b3923-125">`WaitProc`方法結束列印訊息至主控台。</span><span class="sxs-lookup"><span data-stu-id="b3923-125">The `WaitProc` method ends by printing a message to the console.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>