<Type Name="LazyInitializer" FullName="System.Threading.LazyInitializer">
  <TypeSignature Language="C#" Value="public static class LazyInitializer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit LazyInitializer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.LazyInitializer" />
  <TypeSignature Language="VB.NET" Value="Public Class LazyInitializer" />
  <TypeSignature Language="C++ CLI" Value="public ref class LazyInitializer abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="09da3-101">提供延遲初始化常式。</span><span class="sxs-lookup"><span data-stu-id="09da3-101">Provides lazy initialization routines.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09da3-102">這些常式會避免需要配置的專用、 延遲初始設定執行個體，以確保它們存取已初始化目標使用的參考。</span><span class="sxs-lookup"><span data-stu-id="09da3-102">These routines avoid needing to allocate a dedicated, lazy-initialization instance, instead using references to ensure targets have been initialized as they are accessed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="09da3-103">下列範例會示範如何使用 EnsureInitialized 延遲初始化值，來追蹤是否已發生初始化使用布林值，並以物件來做為互斥鎖定。</span><span class="sxs-lookup"><span data-stu-id="09da3-103">The following example demonstrates how to use EnsureInitialized to lazily initialize a value using a Boolean value to track whether initialization has already happened and an object to use as the mutual exclusion lock.</span></span>  
  
```vb  
Dim _data As ExpensiveData = Nothing  
Dim _dataInitialized As Boolean = False  
Dim _dataLock As Object = Nothing  
'    ...  
Dim name = LazyInitializer.EnsureInitialized(_data, _dataInitialized, _dataLock)  
```  
  
```csharp  
ExpensiveData _data = null;  
                     bool _dataInitialized = false;  
                     object _dataLock = new object();  
                  //  ...  
  
                    ExpensiveData dataToUse = LazyInitializer.EnsureInitialized(ref _data, ref _dataInitialized, ref _dataLock);  
```  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="09da3-104">方法的<see cref="T:System.Threading.LazyInitializer" />是安全執行緒，並可能同時呼叫從多個執行緒。</span><span class="sxs-lookup"><span data-stu-id="09da3-104">The methods of <see cref="T:System.Threading.LazyInitializer" /> are thread-safe and may be called from multiple threads concurrently.</span></span></threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName="EnsureInitialized&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="09da3-105">初始化目標型別 (如果尚未初始化)。</span><span class="sxs-lookup"><span data-stu-id="09da3-105">Initializes a target type if it hasn't already been initialized.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;class T&gt;(!!T&amp; target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T As Class) (ByRef target As T) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T EnsureInitialized(T % target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="09da3-106">要初始化之參考的型別。</span><span class="sxs-lookup"><span data-stu-id="09da3-106">The type of the reference to be initialized.</span></span></typeparam>
        <param name="target"><span data-ttu-id="09da3-107">要初始化 (如果尚未初始化) 的 <c>T</c> 類型參考。</span><span class="sxs-lookup"><span data-stu-id="09da3-107">A reference of type <c>T</c> to initialize if it has not already been initialized.</span></span></param>
        <summary><span data-ttu-id="09da3-108">如果目標參考型別尚未初始化，則使用該型別的預設建構函式來進行初始化。</span><span class="sxs-lookup"><span data-stu-id="09da3-108">Initializes a target reference type with the type's default constructor if it hasn't already been initialized.</span></span></summary>
        <returns><span data-ttu-id="09da3-109">型別 <paramref name="T" /> 的已初始化參考。</span><span class="sxs-lookup"><span data-stu-id="09da3-109">The initialized reference of type <paramref name="T" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09da3-110">這個方法只可用在參考類型。</span><span class="sxs-lookup"><span data-stu-id="09da3-110">This method may only be used on reference types.</span></span> <span data-ttu-id="09da3-111">若要確保的實值型別初始設定，請參閱 EnsureInitialized 的其他多載。</span><span class="sxs-lookup"><span data-stu-id="09da3-111">To ensure initialization of value types, see other overloads of EnsureInitialized.</span></span>  
  
 <span data-ttu-id="09da3-112">這個方法可同時由多個執行緒初始化`target`。</span><span class="sxs-lookup"><span data-stu-id="09da3-112">This method may be used concurrently by multiple threads to initialize `target`.</span></span>  
  
 <span data-ttu-id="09da3-113">多個執行緒存取此方法同時也會多個執行個體`T`可能建立，但只有一個存放到`target`。</span><span class="sxs-lookup"><span data-stu-id="09da3-113">In the event that multiple threads access this method concurrently, multiple instances of `T` may be created, but only one will be stored into `target`.</span></span> <span data-ttu-id="09da3-114">在這類情況，這個方法將處置並未儲存的物件。</span><span class="sxs-lookup"><span data-stu-id="09da3-114">In such an occurrence, this method will not dispose of the objects that were not stored.</span></span> <span data-ttu-id="09da3-115">如果這類物件必須已處置，則由呼叫者以判斷物件已不在使用，並適當地處置的物件。</span><span class="sxs-lookup"><span data-stu-id="09da3-115">If such objects must be disposed, it is up to the caller to determine if an object was not used and to then dispose of the object appropriately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="09da3-116">缺少存取型別 <paramref name="T" />之建構函式的使用權限。</span><span class="sxs-lookup"><span data-stu-id="09da3-116">Permissions to access the constructor of type <paramref name="T" /> were missing.</span></span></exception>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="09da3-117"><paramref name="T" /> 型別沒有預設的建構函式。</span><span class="sxs-lookup"><span data-stu-id="09da3-117">Type <paramref name="T" /> does not have a default constructor.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, Func&lt;T&gt; valueFactory) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;class T&gt;(!!T&amp; target, class System.Func`1&lt;!!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T As Class) (ByRef target As T, valueFactory As Func(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T EnsureInitialized(T % target, Func&lt;T&gt; ^ valueFactory);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T&amp;" RefType="ref" />
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="09da3-118">要初始化之參考的參考型別。</span><span class="sxs-lookup"><span data-stu-id="09da3-118">The reference type of the reference to be initialized.</span></span></typeparam>
        <param name="target"><span data-ttu-id="09da3-119">要初始化 (如果尚未初始化) 的 <c>T</c> 類型參考。</span><span class="sxs-lookup"><span data-stu-id="09da3-119">The reference of type <c>T</c> to initialize if it hasn't already been initialized.</span></span></param>
        <param name="valueFactory"><span data-ttu-id="09da3-120">呼叫來初始化參考的函式。</span><span class="sxs-lookup"><span data-stu-id="09da3-120">The function that is called to initialize the reference.</span></span></param>
        <summary><span data-ttu-id="09da3-121">如果目標型別尚未初始化，則使用指定的函式來初始化目標的參考型別。</span><span class="sxs-lookup"><span data-stu-id="09da3-121">Initializes a target reference type by using a specified function if it hasn't already been initialized.</span></span></summary>
        <returns><span data-ttu-id="09da3-122">型別 <paramref name="T" /> 的已初始化實值。</span><span class="sxs-lookup"><span data-stu-id="09da3-122">The initialized value of type <paramref name="T" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09da3-123">這個方法只可用在參考類型和`valueFactory`可能不會傳回 null 參考 (在 Visual Basic 中 Nothing)。</span><span class="sxs-lookup"><span data-stu-id="09da3-123">This method may only be used on reference types, and `valueFactory` may not return a null reference (Nothing in Visual Basic).</span></span> <span data-ttu-id="09da3-124">若要確保實值類型的初始設定，或允許 null 的參考型別，請參閱 EnsureInitialized 的其他多載。</span><span class="sxs-lookup"><span data-stu-id="09da3-124">To ensure initialization of value types or to allow null reference types, see other overloads of EnsureInitialized.</span></span>  
  
 <span data-ttu-id="09da3-125">這個方法可同時由多個執行緒初始化`target`。</span><span class="sxs-lookup"><span data-stu-id="09da3-125">This method may be used concurrently by multiple threads to initialize `target`.</span></span>  
  
 <span data-ttu-id="09da3-126">多個執行緒存取此方法同時也會多個執行個體`T`可能建立，但只有一個存放到`target`。</span><span class="sxs-lookup"><span data-stu-id="09da3-126">In the event that multiple threads access this method concurrently, multiple instances of `T` may be created, but only one will be stored into `target`.</span></span> <span data-ttu-id="09da3-127">在這類情況，這個方法將處置並未儲存的物件。</span><span class="sxs-lookup"><span data-stu-id="09da3-127">In such an occurrence, this method will not dispose of the objects that were not stored.</span></span> <span data-ttu-id="09da3-128">如果這類物件必須已處置，則由呼叫者以判斷物件已不在使用，並適當地處置的物件。</span><span class="sxs-lookup"><span data-stu-id="09da3-128">If such objects must be disposed, it is up to the caller to determine if an object was not used and to then dispose of the object appropriately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="09da3-129"><paramref name="T" /> 型別沒有預設的建構函式。</span><span class="sxs-lookup"><span data-stu-id="09da3-129">Type <paramref name="T" /> does not have a default constructor.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="09da3-130"><paramref name="valueFactory" />傳回 null (在 Visual Basic 中為 Nothing)。</span><span class="sxs-lookup"><span data-stu-id="09da3-130"><paramref name="valueFactory" /> returned null (Nothing in Visual Basic).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, ref bool initialized, ref object syncLock);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;T&gt;(!!T&amp; target, bool&amp; initialized, object&amp; syncLock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T) (ByRef target As T, ByRef initialized As Boolean, ByRef syncLock As Object) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T EnsureInitialized(T % target, bool % initialized, System::Object ^ % syncLock);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T&amp;" RefType="ref" />
        <Parameter Name="initialized" Type="System.Boolean&amp;" RefType="ref" />
        <Parameter Name="syncLock" Type="System.Object&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="09da3-131">要初始化之參考的型別。</span><span class="sxs-lookup"><span data-stu-id="09da3-131">The type of the reference to be initialized.</span></span></typeparam>
        <param name="target"><span data-ttu-id="09da3-132">要初始化 (如果尚未初始化) 的 <c>T</c> 類型參考或值。</span><span class="sxs-lookup"><span data-stu-id="09da3-132">A reference or value of type <c>T</c> to initialize if it hasn't already been initialized.</span></span></param>
        <param name="initialized"><span data-ttu-id="09da3-133">布林值的參考，這個值可判斷目標是否已初始化。</span><span class="sxs-lookup"><span data-stu-id="09da3-133">A reference to a Boolean value that determines whether the target has already been initialized.</span></span></param>
        <param name="syncLock"><span data-ttu-id="09da3-134">物件的參考，這個物件用來當作初始化 <c>target</c> 時的互斥鎖定。</span><span class="sxs-lookup"><span data-stu-id="09da3-134">A reference to an object used as the mutually exclusive lock for initializing <c>target</c>.</span></span> <span data-ttu-id="09da3-135">如果 <c>syncLock</c> 為 <see langword="null" />，則具現化新的物件。</span><span class="sxs-lookup"><span data-stu-id="09da3-135">If <c>syncLock</c> is <see langword="null" />, a new object will be instantiated.</span></span></param>
        <summary><span data-ttu-id="09da3-136">如果目標型別尚未初始化，則使用其預設建構函式來初始化目標的參考型別或實值型別。</span><span class="sxs-lookup"><span data-stu-id="09da3-136">Initializes a target reference or value type with its default constructor if it hasn't already been initialized.</span></span></summary>
        <returns><span data-ttu-id="09da3-137">型別 <paramref name="T" /> 的已初始化實值。</span><span class="sxs-lookup"><span data-stu-id="09da3-137">The initialized value of type <paramref name="T" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09da3-138">如果`intialized`指定為 true，則會不進行任何進一步的初始化。</span><span class="sxs-lookup"><span data-stu-id="09da3-138">If `intialized` is specified as true, then no further initialization occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="09da3-139">缺少存取型別 <paramref name="T" />之建構函式的使用權限。</span><span class="sxs-lookup"><span data-stu-id="09da3-139">Permissions to access the constructor of type <paramref name="T" /> were missing.</span></span></exception>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="09da3-140"><paramref name="T" /> 型別沒有預設的建構函式。</span><span class="sxs-lookup"><span data-stu-id="09da3-140">Type <paramref name="T" /> does not have a default constructor.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, ref object syncLock, Func&lt;T&gt; valueFactory) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;class T&gt;(!!T&amp; target, object&amp; syncLock, class System.Func`1&lt;!!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Object@,System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T As Class) (ByRef target As T, ByRef syncLock As Object, valueFactory As Func(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T EnsureInitialized(T % target, System::Object ^ % syncLock, Func&lt;T&gt; ^ valueFactory);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T&amp;" RefType="ref" />
        <Parameter Name="syncLock" Type="System.Object&amp;" RefType="ref" />
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="target">To be added.</param>
        <param name="syncLock">To be added.</param>
        <param name="valueFactory">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, ref bool initialized, ref object syncLock, Func&lt;T&gt; valueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;T&gt;(!!T&amp; target, bool&amp; initialized, object&amp; syncLock, class System.Func`1&lt;!!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@,System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T) (ByRef target As T, ByRef initialized As Boolean, ByRef syncLock As Object, valueFactory As Func(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T EnsureInitialized(T % target, bool % initialized, System::Object ^ % syncLock, Func&lt;T&gt; ^ valueFactory);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T&amp;" RefType="ref" />
        <Parameter Name="initialized" Type="System.Boolean&amp;" RefType="ref" />
        <Parameter Name="syncLock" Type="System.Object&amp;" RefType="ref" />
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="09da3-141">要初始化之參考的型別。</span><span class="sxs-lookup"><span data-stu-id="09da3-141">The type of the reference to be initialized.</span></span></typeparam>
        <param name="target"><span data-ttu-id="09da3-142">要初始化 (如果尚未初始化) 的 <c>T</c> 類型參考或值。</span><span class="sxs-lookup"><span data-stu-id="09da3-142">A reference or value of type <c>T</c> to initialize if it hasn't already been initialized.</span></span></param>
        <param name="initialized"><span data-ttu-id="09da3-143">布林值的參考，這個值可判斷目標是否已初始化。</span><span class="sxs-lookup"><span data-stu-id="09da3-143">A reference to a Boolean value that determines whether the target has already been initialized.</span></span></param>
        <param name="syncLock"><span data-ttu-id="09da3-144">物件的參考，這個物件用來當作初始化 <c>target</c> 時的互斥鎖定。</span><span class="sxs-lookup"><span data-stu-id="09da3-144">A reference to an object used as the mutually exclusive lock for initializing <c>target</c>.</span></span> <span data-ttu-id="09da3-145">如果 <c>syncLock</c> 為 <see langword="null" />，則具現化新的物件。</span><span class="sxs-lookup"><span data-stu-id="09da3-145">If <c>syncLock</c> is <see langword="null" />, a new object will be instantiated.</span></span></param>
        <param name="valueFactory"><span data-ttu-id="09da3-146">呼叫來初始化參考或值的函式。</span><span class="sxs-lookup"><span data-stu-id="09da3-146">The function that is called to initialize the reference or value.</span></span></param>
        <summary><span data-ttu-id="09da3-147">如果目標型別尚未初始化，則使用指定的函式來初始化目標的參考或實值型別。</span><span class="sxs-lookup"><span data-stu-id="09da3-147">Initializes a target reference or value type by using a specified function if it hasn't already been initialized.</span></span></summary>
        <returns><span data-ttu-id="09da3-148">型別 <paramref name="T" /> 的已初始化實值。</span><span class="sxs-lookup"><span data-stu-id="09da3-148">The initialized value of type <paramref name="T" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09da3-149">如果`intialized`指定為 true，則會不進行任何進一步的初始化。</span><span class="sxs-lookup"><span data-stu-id="09da3-149">If `intialized` is specified as true, then no further initialization occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="09da3-150">缺少存取型別 <paramref name="T" />之建構函式的使用權限。</span><span class="sxs-lookup"><span data-stu-id="09da3-150">Permissions to access the constructor of type <paramref name="T" /> were missing.</span></span></exception>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="09da3-151"><paramref name="T" /> 型別沒有預設的建構函式。</span><span class="sxs-lookup"><span data-stu-id="09da3-151">Type <paramref name="T" /> does not have a default constructor.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>