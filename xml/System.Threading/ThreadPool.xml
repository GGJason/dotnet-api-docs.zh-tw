<Type Name="ThreadPool" FullName="System.Threading.ThreadPool">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2a9494e53c8c3c4a4db1cc0f00c52b716f7945b8" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36406992" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class ThreadPool" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ThreadPool extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ThreadPool" />
  <TypeSignature Language="VB.NET" Value="Public Class ThreadPool" />
  <TypeSignature Language="C++ CLI" Value="public ref class ThreadPool abstract sealed" />
  <TypeSignature Language="F#" Value="type ThreadPool = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.ThreadPool</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="6b202-101">提供執行緒的集區，可用來執行工作、張貼工作項目、處理非同步 I/O、代表其他執行緒等候，以及處理計時器。</span>
      <span class="sxs-lookup">
        <span data-stu-id="6b202-101">Provides a pool of threads that can be used to execute tasks, post work items, process asynchronous I/O, wait on behalf of other threads, and process timers.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b202-102">許多應用程式建立大部分的時間在睡眠狀態，等候事件發生的執行緒。</span><span class="sxs-lookup"><span data-stu-id="6b202-102">Many applications create threads that spend a great deal of time in the sleeping state, waiting for an event to occur.</span></span> <span data-ttu-id="6b202-103">其他執行緒可能會進入休眠狀態，才能定期喚醒輪詢變更或更新狀態資訊。</span><span class="sxs-lookup"><span data-stu-id="6b202-103">Other threads might enter a sleeping state only to be awakened periodically to poll for a change or update status information.</span></span> <span data-ttu-id="6b202-104">執行緒集區可讓您藉由提供您的系統所管理的背景工作執行緒集區的應用程式更有效率地使用執行緒。</span><span class="sxs-lookup"><span data-stu-id="6b202-104">The thread pool enables you to use threads more efficiently by providing your application with a pool of worker threads that are managed by the system.</span></span> <span data-ttu-id="6b202-105">使用執行緒集區執行緒的作業的範例包括：</span><span class="sxs-lookup"><span data-stu-id="6b202-105">Examples of operations that use thread pool threads include the following:</span></span>  
  
-   <span data-ttu-id="6b202-106">當您建立<xref:System.Threading.Tasks.Task>或<xref:System.Threading.Tasks.Task%601>執行緒集區執行緒上執行排定工作預設以非同步方式執行某些工作的物件。</span><span class="sxs-lookup"><span data-stu-id="6b202-106">When you create a <xref:System.Threading.Tasks.Task> or <xref:System.Threading.Tasks.Task%601> object to perform some task asynchronously, by default the task is scheduled to run on a thread pool thread.</span></span>  
  
-   <span data-ttu-id="6b202-107">非同步計時器會使用執行緒集區。</span><span class="sxs-lookup"><span data-stu-id="6b202-107">Asynchronous timers use the thread pool.</span></span> <span data-ttu-id="6b202-108">執行緒集區執行緒執行回呼<xref:System.Threading.Timer?displayProperty=nameWithType>類別，並引發事件<xref:System.Timers.Timer?displayProperty=nameWithType>類別。</span><span class="sxs-lookup"><span data-stu-id="6b202-108">Thread pool threads execute callbacks from the <xref:System.Threading.Timer?displayProperty=nameWithType> class and raise events from the <xref:System.Timers.Timer?displayProperty=nameWithType> class.</span></span>  
  
-   <span data-ttu-id="6b202-109">當您使用已註冊之等候控制代碼時，則系統執行緒會監視等候控制代碼的狀態。</span><span class="sxs-lookup"><span data-stu-id="6b202-109">When you use registered wait handles, a system thread monitors the status of the wait handles.</span></span> <span data-ttu-id="6b202-110">等候作業完成時，執行緒集區的背景工作執行緒會執行對應的回呼函式。</span><span class="sxs-lookup"><span data-stu-id="6b202-110">When a wait operation completes, a worker thread from the thread pool executes the corresponding callback function.</span></span>  
  
-   <span data-ttu-id="6b202-111">當您呼叫<xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>加入佇列的方法，以便在執行緒集區執行緒上執行的方法。</span><span class="sxs-lookup"><span data-stu-id="6b202-111">When you call the <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> method to queue a method for execution on a thread pool thread.</span></span> <span data-ttu-id="6b202-112">您可以傳遞方法<xref:System.Threading.WaitCallback>委派。</span><span class="sxs-lookup"><span data-stu-id="6b202-112">You do this by passing the method a <xref:System.Threading.WaitCallback> delegate.</span></span>   <span data-ttu-id="6b202-113">委派的簽章</span><span class="sxs-lookup"><span data-stu-id="6b202-113">The delegate has the signature</span></span>  
  
    ```csharp  
    void WaitCallback(Object state)  
    ```  
  
    ```vb  
    Sub WaitCallback(state As Object)  
    ```  
  
     <span data-ttu-id="6b202-114">其中`state`是物件，包含要由委派所使用的資料。</span><span class="sxs-lookup"><span data-stu-id="6b202-114">where `state` is an object that contains data to be used by the delegate.</span></span> <span data-ttu-id="6b202-115">實際的資料可以傳遞給委派，藉由呼叫<xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29>方法。</span><span class="sxs-lookup"><span data-stu-id="6b202-115">The actual data can be passed to the delegate by calling the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6b202-116">Managed 的執行緒集區中的執行緒為背景執行緒。</span><span class="sxs-lookup"><span data-stu-id="6b202-116">The threads in the managed thread pool are background threads.</span></span> <span data-ttu-id="6b202-117">也就是說，其<xref:System.Threading.Thread.IsBackground%2A>屬性`true`。</span><span class="sxs-lookup"><span data-stu-id="6b202-117">That is, their <xref:System.Threading.Thread.IsBackground%2A> properties are `true`.</span></span> <span data-ttu-id="6b202-118">這表示<xref:System.Threading.ThreadPool>執行緒不會保留所有前景執行緒都結束後執行的應用程式。</span><span class="sxs-lookup"><span data-stu-id="6b202-118">This means that a <xref:System.Threading.ThreadPool> thread will not keep an application running after all foreground threads have exited.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6b202-119">當執行緒集區重複使用的執行緒時，它不會清除執行緒區域儲存區中，或標示的欄位中的資料<xref:System.ThreadStaticAttribute>屬性。</span><span class="sxs-lookup"><span data-stu-id="6b202-119">When the thread pool reuses a thread, it does not clear the data in thread local storage or in fields that are marked with the <xref:System.ThreadStaticAttribute> attribute.</span></span> <span data-ttu-id="6b202-120">因此，當方法會檢查執行緒區域儲存區或欄位，會標記為<xref:System.ThreadStaticAttribute>屬性，它找到的值可能會留下的執行緒集區執行緒的先前使用。</span><span class="sxs-lookup"><span data-stu-id="6b202-120">Therefore, when a method examines thread local storage or fields that are marked with the <xref:System.ThreadStaticAttribute> attribute, the values it finds might be left over from an earlier use of the thread pool thread.</span></span>  
  
 <span data-ttu-id="6b202-121">您也可以將與等候作業的執行緒集區不相關的工作項目佇列。</span><span class="sxs-lookup"><span data-stu-id="6b202-121">You can also queue work items that are not related to a wait operation to the thread pool.</span></span> <span data-ttu-id="6b202-122">若要要求在執行緒集區的執行緒所處理的工作項目，呼叫<xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="6b202-122">To request that a work item be handled by a thread in the thread pool, call the <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> method.</span></span> <span data-ttu-id="6b202-123">這個方法會將參數當成方法或委派，會選取從執行緒集區的執行緒所呼叫的參考。</span><span class="sxs-lookup"><span data-stu-id="6b202-123">This method takes as a parameter a reference to the method or delegate that will be called by the thread selected from the thread pool.</span></span> <span data-ttu-id="6b202-124">沒有任何取消的工作項目已加入佇列的方法。</span><span class="sxs-lookup"><span data-stu-id="6b202-124">There is no way to cancel a work item after it has been queued.</span></span>  
  
 <span data-ttu-id="6b202-125">計時器佇列中的計時器和已註冊之等候作業也會使用執行緒集區。</span><span class="sxs-lookup"><span data-stu-id="6b202-125">Timer-queue timers and registered wait operations also use the thread pool.</span></span> <span data-ttu-id="6b202-126">在執行緒集區佇列及其回呼函式。</span><span class="sxs-lookup"><span data-stu-id="6b202-126">Their callback functions are queued to the thread pool.</span></span>  
  
 <span data-ttu-id="6b202-127">沒有一個執行緒集區，每個處理序。</span><span class="sxs-lookup"><span data-stu-id="6b202-127">There is one thread pool per process.</span></span> <span data-ttu-id="6b202-128">從 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 開始，處理序的執行緒集區預設大小取決於數個因素，例如虛擬位址空間的大小。</span><span class="sxs-lookup"><span data-stu-id="6b202-128">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the default size of the thread pool for a process depends on several factors, such as the size of the virtual address space.</span></span> <span data-ttu-id="6b202-129">處理序可以呼叫 <xref:System.Threading.ThreadPool.GetMaxThreads%2A> 方法來決定執行緒數目。</span><span class="sxs-lookup"><span data-stu-id="6b202-129">A process can call the <xref:System.Threading.ThreadPool.GetMaxThreads%2A> method to determine the number of threads.</span></span> <span data-ttu-id="6b202-130">執行緒集區中的執行緒數目可以透過變更<xref:System.Threading.ThreadPool.SetMaxThreads%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="6b202-130">The number of threads in the thread pool can be changed by using the <xref:System.Threading.ThreadPool.SetMaxThreads%2A> method.</span></span> <span data-ttu-id="6b202-131">每個執行緒使用的預設堆疊大小，並執行預設的優先權。</span><span class="sxs-lookup"><span data-stu-id="6b202-131">Each thread uses the default stack size and runs at the default priority.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6b202-132">裝載.NET Framework 的 unmanaged 程式碼可以使用變更的執行緒集區大小`CorSetMaxThreads`函式，mscoree.h 檔案中定義。</span><span class="sxs-lookup"><span data-stu-id="6b202-132">Unmanaged code that hosts the .NET Framework can change the size of the thread pool by using the `CorSetMaxThreads` function, defined in the mscoree.h file.</span></span>  
  
 <span data-ttu-id="6b202-133">執行緒集區視需要提供新的背景工作執行緒或 I/O 完成執行緒直到達到每個類別目錄的最小值。</span><span class="sxs-lookup"><span data-stu-id="6b202-133">The thread pool provides new worker threads or I/O completion threads on demand until it reaches the minimum for each category.</span></span> <span data-ttu-id="6b202-134">當達到最小值時，執行緒集區可以在該分類建立額外的執行緒，或等候部分工作完成。</span><span class="sxs-lookup"><span data-stu-id="6b202-134">When a minimum is reached, the thread pool can create additional threads in that category or wait until some tasks complete.</span></span> <span data-ttu-id="6b202-135">從 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 開始，執行緒集區會建立並終結背景工作執行緒，以便最佳化輸送量，輸送量的定義為每個時間單位完成的工作數目。</span><span class="sxs-lookup"><span data-stu-id="6b202-135">Beginning with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], the thread pool creates and destroys worker threads in order to optimize throughput, which is defined as the number of tasks that complete per unit of time.</span></span> <span data-ttu-id="6b202-136">執行緒太少可能無法最有效地利用可用資源，而執行緒太多則可能增加資源爭用的情況。</span><span class="sxs-lookup"><span data-stu-id="6b202-136">Too few threads might not make optimal use of available resources, whereas too many threads could increase resource contention.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6b202-137">當需求很低時，執行緒集區執行緒的實際數目可能低於最小值。</span><span class="sxs-lookup"><span data-stu-id="6b202-137">When demand is low, the actual number of thread pool threads can fall below the minimum values.</span></span>  
  
 <span data-ttu-id="6b202-138">您可以使用 <xref:System.Threading.ThreadPool.GetMinThreads%2A> 方法取得這些最小值。</span><span class="sxs-lookup"><span data-stu-id="6b202-138">You can use the <xref:System.Threading.ThreadPool.GetMinThreads%2A> method to obtain these minimum values.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="6b202-139">您可以使用<xref:System.Threading.ThreadPool.SetMinThreads%2A>方法，以增加執行緒的最小數目。</span><span class="sxs-lookup"><span data-stu-id="6b202-139">You can use the <xref:System.Threading.ThreadPool.SetMinThreads%2A> method to increase the minimum number of threads.</span></span> <span data-ttu-id="6b202-140">不過，不必要地增加這些值，可能會造成效能問題。</span><span class="sxs-lookup"><span data-stu-id="6b202-140">However, unnecessarily increasing these values can cause performance problems.</span></span> <span data-ttu-id="6b202-141">如果太多工作同時啟動，則所有工作可能都會變慢。</span><span class="sxs-lookup"><span data-stu-id="6b202-141">If too many tasks start at the same time, all of them might appear to be slow.</span></span> <span data-ttu-id="6b202-142">在大部分情況下，執行緒集區使用自己的演算法來配置執行緒的效能較佳。</span><span class="sxs-lookup"><span data-stu-id="6b202-142">In most cases the thread pool will perform better with its own algorithm for allocating threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6b202-143">在下列範例中，主應用程式執行緒方法排入佇列名為`ThreadProc`在執行緒集區執行緒，每秒，然後結束睡眠上執行。</span><span class="sxs-lookup"><span data-stu-id="6b202-143">In the following example, the main application thread  queues a method named `ThreadProc` to execute on a thread pool thread, sleeps for one second, and then exits.</span></span> <span data-ttu-id="6b202-144">`ThreadProc`方法只會顯示一則訊息。</span><span class="sxs-lookup"><span data-stu-id="6b202-144">The `ThreadProc` method simply displays a message.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/VB/source.vb#1)]  
  
 <span data-ttu-id="6b202-145">如果您註解的呼叫<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>方法中，主執行緒會先結束執行緒集區執行緒上執行的方法。</span><span class="sxs-lookup"><span data-stu-id="6b202-145">If you comment out the call to the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method, the main thread exits before         method runs on the thread pool thread.</span></span>  <span data-ttu-id="6b202-146">執行緒集區會使用背景執行緒，不會保留應用程式執行，如果所有的前景執行緒已經終止。</span><span class="sxs-lookup"><span data-stu-id="6b202-146">The thread pool uses background         threads, which do not keep the application running if all foreground threads have terminated.</span></span>  <span data-ttu-id="6b202-147">（這是簡單的範例競爭條件）。</span><span class="sxs-lookup"><span data-stu-id="6b202-147">(This         is a simple example of a race condition.)</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="6b202-148">此型別具備執行緒安全。</span>
      <span class="sxs-lookup">
        <span data-stu-id="6b202-148">This type is thread safe.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName="BindHandle">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6b202-149">可將作業系統的控制代碼繫結至 <see cref="T:System.Threading.ThreadPool" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-149">Binds an operating system handle to the <see cref="T:System.Threading.ThreadPool" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BindHandle">
      <MemberSignature Language="C#" Value="public static bool BindHandle (IntPtr osHandle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool BindHandle(native int osHandle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BindHandle (osHandle As IntPtr) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool BindHandle(IntPtr osHandle);" />
      <MemberSignature Language="F#" Value="static member BindHandle : nativeint -&gt; bool" Usage="System.Threading.ThreadPool.BindHandle osHandle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("ThreadPool.BindHandle(IntPtr) has been deprecated.  Please use ThreadPool.BindHandle(SafeHandle) instead.", false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="osHandle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="osHandle">
          <span data-ttu-id="6b202-150">持有控制代碼的 <see cref="T:System.IntPtr" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-150">An <see cref="T:System.IntPtr" /> that holds the handle.</span>
          </span>
          <span data-ttu-id="6b202-151">控制代碼必須已經對 Unmanaged 側的重疊 I/O 開啟。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-151">The handle must have been opened for overlapped I/O on the unmanaged side.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6b202-152">可將作業系統的控制代碼繫結至 <see cref="T:System.Threading.ThreadPool" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-152">Binds an operating system handle to the <see cref="T:System.Threading.ThreadPool" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6b202-153">如果控制代碼已繫結，則為 <see langword="true" />；否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-153">
              <see langword="true" /> if the handle is bound; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="6b202-154">呼叫端沒有必要的權限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-154">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="6b202-155">提供呼叫 unmanaged 程式碼的能力。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-155">for the ability to call unmanaged code.</span>
          </span>
          <span data-ttu-id="6b202-156">關聯的列舉型別：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-156">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="BindHandle">
      <MemberSignature Language="C#" Value="public static bool BindHandle (System.Runtime.InteropServices.SafeHandle osHandle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool BindHandle(class System.Runtime.InteropServices.SafeHandle osHandle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BindHandle (osHandle As SafeHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool BindHandle(System::Runtime::InteropServices::SafeHandle ^ osHandle);" />
      <MemberSignature Language="F#" Value="static member BindHandle : System.Runtime.InteropServices.SafeHandle -&gt; bool" Usage="System.Threading.ThreadPool.BindHandle osHandle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="osHandle" Type="System.Runtime.InteropServices.SafeHandle" />
      </Parameters>
      <Docs>
        <param name="osHandle">
          <span data-ttu-id="6b202-157">
            <see cref="T:System.Runtime.InteropServices.SafeHandle" />，包含作業系統控制代碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-157">A <see cref="T:System.Runtime.InteropServices.SafeHandle" /> that holds the operating system handle.</span>
          </span>
          <span data-ttu-id="6b202-158">控制代碼必須已經對 Unmanaged 側的重疊 I/O 開啟。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-158">The handle must have been opened for overlapped I/O on the unmanaged side.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6b202-159">可將作業系統的控制代碼繫結至 <see cref="T:System.Threading.ThreadPool" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-159">Binds an operating system handle to the <see cref="T:System.Threading.ThreadPool" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6b202-160">如果控制代碼已繫結，則為 <see langword="true" />；否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-160">
              <see langword="true" /> if the handle is bound; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b202-161">`osHandle`參數應該是<xref:Microsoft.Win32.SafeHandles.SafeFileHandle>，其衍生自抽象<xref:System.Runtime.InteropServices.SafeHandle>類別。</span><span class="sxs-lookup"><span data-stu-id="6b202-161">The `osHandle` parameter should be a <xref:Microsoft.Win32.SafeHandles.SafeFileHandle>, which derives from the abstract <xref:System.Runtime.InteropServices.SafeHandle> class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6b202-162">
            <paramref name="osHandle" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-162">
              <paramref name="osHandle" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="6b202-163">提供呼叫 unmanaged 程式碼的能力。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-163">for the ability to call unmanaged code.</span>
          </span>
          <span data-ttu-id="6b202-164">關聯的列舉型別：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-164">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetAvailableThreads">
      <MemberSignature Language="C#" Value="public static void GetAvailableThreads (out int workerThreads, out int completionPortThreads);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetAvailableThreads([out] int32&amp; workerThreads, [out] int32&amp; completionPortThreads) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub GetAvailableThreads (ByRef workerThreads As Integer, ByRef completionPortThreads As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void GetAvailableThreads([Runtime::InteropServices::Out] int % workerThreads, [Runtime::InteropServices::Out] int % completionPortThreads);" />
      <MemberSignature Language="F#" Value="static member GetAvailableThreads :  *  -&gt; unit" Usage="System.Threading.ThreadPool.GetAvailableThreads (workerThreads, completionPortThreads)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerThreads" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="completionPortThreads" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="workerThreads">
          <span data-ttu-id="6b202-165">可用背景工作執行緒的數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-165">The number of available worker threads.</span>
          </span>
        </param>
        <param name="completionPortThreads">
          <span data-ttu-id="6b202-166">可用非同步 I/O 執行緒的數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-166">The number of available asynchronous I/O threads.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6b202-167">擷取 <see cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" /> 方法所傳回之執行緒集區的執行緒最大數目，與目前作用中數目之間的差異。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-167">Retrieves the difference between the maximum number of thread pool threads returned by the <see cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" /> method, and the number currently active.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b202-168">當<xref:System.Threading.ThreadPool.GetAvailableThreads%2A>傳回時，所指定的變數`workerThreads`包含額外的背景工作執行緒，可以啟動，且指定的變數`completionPortThreads`包含可能是其他非同步 I/O 執行緒數目已啟動。</span><span class="sxs-lookup"><span data-stu-id="6b202-168">When <xref:System.Threading.ThreadPool.GetAvailableThreads%2A> returns, the variable specified by `workerThreads` contains the number of additional worker threads that can be started, and the variable specified by `completionPortThreads` contains the number of additional asynchronous I/O threads that can be started.</span></span>  
  
 <span data-ttu-id="6b202-169">如果沒有可用的執行緒，其他的執行緒集區要求繼續佇列，直到可以使用執行緒集區執行緒為止。</span><span class="sxs-lookup"><span data-stu-id="6b202-169">If there are no available threads, additional thread pool requests remain queued until thread pool threads become available.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6b202-170">簡單的應用程式啟動時，下列範例會顯示背景工作執行緒和可用的 I/O 執行緒的數目。</span><span class="sxs-lookup"><span data-stu-id="6b202-170">The following example displays the number of worker threads and I/O threads available when a simple app is started.</span></span>  
  
 [!code-csharp[System.Threading.ThreadPool.GetAvailableThreads#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetAvailableThreads/CS/Example2.cs#2)]
 [!code-vb[System.Threading.ThreadPool.GetAvailableThreads#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetAvailableThreads/VB/Example2.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxThreads">
      <MemberSignature Language="C#" Value="public static void GetMaxThreads (out int workerThreads, out int completionPortThreads);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetMaxThreads([out] int32&amp; workerThreads, [out] int32&amp; completionPortThreads) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub GetMaxThreads (ByRef workerThreads As Integer, ByRef completionPortThreads As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void GetMaxThreads([Runtime::InteropServices::Out] int % workerThreads, [Runtime::InteropServices::Out] int % completionPortThreads);" />
      <MemberSignature Language="F#" Value="static member GetMaxThreads :  *  -&gt; unit" Usage="System.Threading.ThreadPool.GetMaxThreads (workerThreads, completionPortThreads)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerThreads" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="completionPortThreads" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="workerThreads">
          <span data-ttu-id="6b202-171">執行緒集區中的背景工作執行緒最大數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-171">The maximum number of worker threads in the thread pool.</span>
          </span>
        </param>
        <param name="completionPortThreads">
          <span data-ttu-id="6b202-172">執行緒集區中的非同步 I/O 執行緒最大數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-172">The maximum number of asynchronous I/O threads in the thread pool.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6b202-173">擷取可並行使用之執行緒集區的要求數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-173">Retrieves the number of requests to the thread pool that can be active concurrently.</span>
          </span>
          <span data-ttu-id="6b202-174">超過該數目的所有要求會繼續佇列，直到可以使用執行緒集區執行緒為止。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-174">All requests above that number remain queued until thread pool threads become available.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b202-175">當<xref:System.Threading.ThreadPool.GetMaxThreads%2A>傳回時，所指定的變數`workerThreads`包含背景工作執行緒集區中允許的執行緒和變數所指定的最大數目`completionPortThreads`包含中允許的非同步 I/O 執行緒最大數目執行緒集區。</span><span class="sxs-lookup"><span data-stu-id="6b202-175">When <xref:System.Threading.ThreadPool.GetMaxThreads%2A> returns, the variable specified by `workerThreads` contains the maximum number of worker threads allowed in the thread pool, and the variable specified by `completionPortThreads` contains the maximum number of asynchronous I/O threads allowed in the thread pool.</span></span>  
  
 <span data-ttu-id="6b202-176">您可以使用<xref:System.Threading.ThreadPool.GetAvailableThreads%2A>方法，以判斷在任何指定時間的執行緒集區執行緒的實際數目。</span><span class="sxs-lookup"><span data-stu-id="6b202-176">You can use the <xref:System.Threading.ThreadPool.GetAvailableThreads%2A> method to determine the actual number of threads in the thread pool at any given time.</span></span>  
  
 <span data-ttu-id="6b202-177">您可以使用<xref:System.Threading.ThreadPool.SetMaxThreads%2A>在執行緒集區中設定工作者執行緒和非同步 I/O 執行緒的最大數目。</span><span class="sxs-lookup"><span data-stu-id="6b202-177">You can use the <xref:System.Threading.ThreadPool.SetMaxThreads%2A> to set the maximum number of worker threads and asynchronous I/O threads in the thread pool.</span></span>  
  
 <span data-ttu-id="6b202-178">您可以將佇列無數個執行緒集區要求可讓系統記憶體。</span><span class="sxs-lookup"><span data-stu-id="6b202-178">You can queue as many thread pool requests as system memory allows.</span></span> <span data-ttu-id="6b202-179">如果沒有更多超過執行緒集區執行緒的要求，其他要求會繼續佇列，直到可以使用執行緒集區執行緒為止。</span><span class="sxs-lookup"><span data-stu-id="6b202-179">If there are more requests than thread pool threads, the additional requests remain queued until thread pool threads become available.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6b202-180">下列程式碼範例示範如何擷取最大和可用的執行緒集區中的執行緒數目的計數。</span><span class="sxs-lookup"><span data-stu-id="6b202-180">The following code example shows how to retrieve a count of the maximum and available number of threads in the thread pool.</span></span> <span data-ttu-id="6b202-181">工作項目排入佇列，使用`FileStream`以非同步方式寫入兩個檔案。</span><span class="sxs-lookup"><span data-stu-id="6b202-181">A work item is queued that uses `FileStream` to asynchronously write to two files.</span></span> <span data-ttu-id="6b202-182">回呼方法的計時重疊。</span><span class="sxs-lookup"><span data-stu-id="6b202-182">The callback methods are timed to overlap.</span></span> <span data-ttu-id="6b202-183">背景工作執行緒處理的工作項目，並根據速度和電腦上的處理器數目，一或兩個完成連接埠執行緒處理的寫入作業。</span><span class="sxs-lookup"><span data-stu-id="6b202-183">A worker thread handles the work item and, depending on the speed and number of processors on the computer, one or two completion port threads handle the write operations.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool.GetAvailableThreads#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetAvailableThreads/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool.GetAvailableThreads#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetAvailableThreads/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool.GetAvailableThreads#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetAvailableThreads/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetMinThreads">
      <MemberSignature Language="C#" Value="public static void GetMinThreads (out int workerThreads, out int completionPortThreads);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetMinThreads([out] int32&amp; workerThreads, [out] int32&amp; completionPortThreads) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub GetMinThreads (ByRef workerThreads As Integer, ByRef completionPortThreads As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void GetMinThreads([Runtime::InteropServices::Out] int % workerThreads, [Runtime::InteropServices::Out] int % completionPortThreads);" />
      <MemberSignature Language="F#" Value="static member GetMinThreads :  *  -&gt; unit" Usage="System.Threading.ThreadPool.GetMinThreads (workerThreads, completionPortThreads)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerThreads" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="completionPortThreads" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="workerThreads">
          <span data-ttu-id="6b202-184">當這個方法傳回時，會包含執行緒集區視需要建立的背景工作執行緒最小數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-184">When this method returns, contains the minimum number of worker threads that the thread pool creates on demand.</span>
          </span>
        </param>
        <param name="completionPortThreads">
          <span data-ttu-id="6b202-185">當這個方法傳回時，會包含執行緒集區視需要建立的非同步 I/O 執行緒最小數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-185">When this method returns, contains the minimum number of asynchronous I/O threads that the thread pool creates on demand.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6b202-186">在切換至管理執行緒建立和解構的演算法之前，擷取執行緒集區隨著提出新要求，視需要建立的執行緒最小數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-186">Retrieves the minimum number of threads the thread pool creates on demand, as new requests are made, before switching to an algorithm for managing thread creation and destruction.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b202-187">執行緒集區視需要提供新的背景工作執行緒或 I/O 完成執行緒直到達到每個類別目錄的最小值。</span><span class="sxs-lookup"><span data-stu-id="6b202-187">The thread pool provides new worker threads or I/O completion threads on demand until it reaches the minimum for each category.</span></span> <span data-ttu-id="6b202-188">根據預設，執行緒的最小數目設定為在系統上的處理器數目。</span><span class="sxs-lookup"><span data-stu-id="6b202-188">By default, the minimum number of threads is set to the number of processors on a system.</span></span> <span data-ttu-id="6b202-189">當達到最小值時，執行緒集區可以在該分類建立額外的執行緒，或等候部分工作完成。</span><span class="sxs-lookup"><span data-stu-id="6b202-189">When the minimum is reached, the thread pool can create additional threads in that category or wait until some tasks complete.</span></span> <span data-ttu-id="6b202-190">開頭為[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]，執行緒集區會建立並終結執行緒，以便最佳化輸送量，輸送量的定義為每個時間單位完成的工作數目。</span><span class="sxs-lookup"><span data-stu-id="6b202-190">Beginning with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], the thread pool creates and destroys threads in order to optimize throughput, which is defined as the number of tasks that complete per unit of time.</span></span> <span data-ttu-id="6b202-191">執行緒太少可能無法最有效地利用可用資源，而執行緒太多則可能增加資源爭用的情況。</span><span class="sxs-lookup"><span data-stu-id="6b202-191">Too few threads might not make optimal use of available resources, whereas too many threads could increase resource contention.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6b202-192">當需求很低時，執行緒集區執行緒的實際數目可能低於最小值。</span><span class="sxs-lookup"><span data-stu-id="6b202-192">When demand is low, the actual number of thread pool threads can fall below the minimum values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6b202-193">下列範例為 4，設定工作者執行緒的最小數目，並保留非同步 I/O 完成執行緒的最小數目的原始值。</span><span class="sxs-lookup"><span data-stu-id="6b202-193">The following example sets the minimum number of worker threads to four, and preserves the original value for the minimum number of asynchronous I/O completion threads.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="QueueUserWorkItem">
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6b202-194">將方法排入佇列，以等候執行。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-194">Queues a method for execution.</span>
          </span>
          <span data-ttu-id="6b202-195">可以使用執行緒集區執行緒時，即可執行這個方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-195">The method executes when a thread pool thread becomes available.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="QueueUserWorkItem">
      <MemberSignature Language="C#" Value="public static bool QueueUserWorkItem (System.Threading.WaitCallback callBack);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool QueueUserWorkItem(class System.Threading.WaitCallback callBack) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function QueueUserWorkItem (callBack As WaitCallback) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool QueueUserWorkItem(System::Threading::WaitCallback ^ callBack);" />
      <MemberSignature Language="F#" Value="static member QueueUserWorkItem : System.Threading.WaitCallback -&gt; bool" Usage="System.Threading.ThreadPool.QueueUserWorkItem callBack" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callBack" Type="System.Threading.WaitCallback" />
      </Parameters>
      <Docs>
        <param name="callBack">
          <span data-ttu-id="6b202-196">
            <see cref="T:System.Threading.WaitCallback" />，代表要執行的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-196">A <see cref="T:System.Threading.WaitCallback" /> that represents the method to be executed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6b202-197">將方法排入佇列，以等候執行。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-197">Queues a method for execution.</span>
          </span>
          <span data-ttu-id="6b202-198">可以使用執行緒集區執行緒時，即可執行這個方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-198">The method executes when a thread pool thread becomes available.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6b202-199">如果方法成功佇列則為 <see langword="true" />；如果工作項目無法佇列則會擲回 <see cref="T:System.NotSupportedException" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-199">
              <see langword="true" /> if the method is successfully queued; <see cref="T:System.NotSupportedException" /> is thrown if the work item could not be queued.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b202-200">您可以放置在類別定義方法，或者您可以使用的執行個體欄位中排入佇列的方法所需的資料<xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29>多載會接受物件，其中包含必要的資料。</span><span class="sxs-lookup"><span data-stu-id="6b202-200">You can place data required by the queued method in the instance fields of the class in which the method is defined, or you can use the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29> overload that accepts an object containing the necessary data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6b202-201">Visual Basic 使用者可以省略<xref:System.Threading.WaitCallback>建構函式，並只是使用`AddressOf`運算子時傳遞至回呼方法<xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>。</span><span class="sxs-lookup"><span data-stu-id="6b202-201">Visual Basic users can omit the <xref:System.Threading.WaitCallback> constructor, and simply use the `AddressOf` operator when passing the callback method to <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>.</span></span> <span data-ttu-id="6b202-202">Visual Basic 會自動呼叫正確的委派建構函式。</span><span class="sxs-lookup"><span data-stu-id="6b202-202">Visual Basic automatically calls the correct delegate constructor.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="6b202-203">版本資訊</span><span class="sxs-lookup"><span data-stu-id="6b202-203">Version Information</span></span>  
 <span data-ttu-id="6b202-204">在.NET Framework 2.0 版中，<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType>屬性值會傳播至背景工作執行緒排入佇列使用<xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="6b202-204">In the .NET Framework version 2.0, the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property value is propagated to worker threads queued using the <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> method.</span></span> <span data-ttu-id="6b202-205">在舊版中，主體的資訊不會傳播。</span><span class="sxs-lookup"><span data-stu-id="6b202-205">In earlier versions, the principal information is not propagated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6b202-206">下列範例會使用<xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29>方法多載來工作排入佇列，這由`ThreadProc`方法，才能執行執行緒時。</span><span class="sxs-lookup"><span data-stu-id="6b202-206">The following example uses the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29> method overload to queue a task, which is represented by the `ThreadProc` method, to execute when a thread becomes available.</span></span> <span data-ttu-id="6b202-207">沒有工作資訊提供給這個多載。</span><span class="sxs-lookup"><span data-stu-id="6b202-207">No task information is supplied with this overload.</span></span> <span data-ttu-id="6b202-208">因此，若要使用的資訊`ThreadProc`方法僅限於方法所屬的物件。</span><span class="sxs-lookup"><span data-stu-id="6b202-208">Therefore, the information that is available to the `ThreadProc` method is limited to the object the method belongs to.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6b202-209">
            <paramref name="callBack" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-209">
              <paramref name="callBack" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="6b202-210">Common Language Runtime (CLR) 已裝載，而且主機不支援這個動作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-210">The common language runtime (CLR) is hosted, and the host does not support this action.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="QueueUserWorkItem">
      <MemberSignature Language="C#" Value="public static bool QueueUserWorkItem (System.Threading.WaitCallback callBack, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool QueueUserWorkItem(class System.Threading.WaitCallback callBack, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function QueueUserWorkItem (callBack As WaitCallback, state As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool QueueUserWorkItem(System::Threading::WaitCallback ^ callBack, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="static member QueueUserWorkItem : System.Threading.WaitCallback * obj -&gt; bool" Usage="System.Threading.ThreadPool.QueueUserWorkItem (callBack, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callBack" Type="System.Threading.WaitCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callBack">
          <span data-ttu-id="6b202-211">
            <see cref="T:System.Threading.WaitCallback" />，代表要執行的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-211">A <see cref="T:System.Threading.WaitCallback" /> representing the method to execute.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="6b202-212">物件，包含這個方法所要使用的資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-212">An object containing data to be used by the method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6b202-213">將方法排入佇列，以等候執行，並指定包含這個方法所要使用之資料的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-213">Queues a method for execution, and specifies an object containing data to be used by the method.</span>
          </span>
          <span data-ttu-id="6b202-214">可以使用執行緒集區執行緒時，即可執行這個方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-214">The method executes when a thread pool thread becomes available.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6b202-215">如果方法成功佇列則為 <see langword="true" />；如果工作項目無法佇列則會擲回 <see cref="T:System.NotSupportedException" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-215">
              <see langword="true" /> if the method is successfully queued; <see cref="T:System.NotSupportedException" /> is thrown if the work item could not be queued.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b202-216">如果回呼方法需要複雜的資料，您可以定義要包含資料的類別。</span><span class="sxs-lookup"><span data-stu-id="6b202-216">If the callback method requires complex data, you can define a class to contain the data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6b202-217">Visual Basic 使用者可以省略<xref:System.Threading.WaitCallback>建構函式，並只是使用`AddressOf`運算子時傳遞至回呼方法<xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>。</span><span class="sxs-lookup"><span data-stu-id="6b202-217">Visual Basic users can omit the <xref:System.Threading.WaitCallback> constructor, and simply use the `AddressOf` operator when passing the callback method to <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>.</span></span> <span data-ttu-id="6b202-218">Visual Basic 會自動呼叫正確的委派建構函式。</span><span class="sxs-lookup"><span data-stu-id="6b202-218">Visual Basic automatically calls the correct delegate constructor.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="6b202-219">版本資訊</span><span class="sxs-lookup"><span data-stu-id="6b202-219">Version Information</span></span>  
 <span data-ttu-id="6b202-220">在.NET Framework 2.0 版中，<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType>屬性值會傳播至背景工作執行緒排入佇列使用<xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="6b202-220">In the .NET Framework version 2.0, the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property value is propagated to worker threads queued using the <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> method.</span></span> <span data-ttu-id="6b202-221">在舊版中，主體的資訊不會傳播。</span><span class="sxs-lookup"><span data-stu-id="6b202-221">In earlier versions, the principal information is not propagated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6b202-222">下列範例會示範如何建立包含工作資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="6b202-222">The following example shows how to create an object that contains task information.</span></span> <span data-ttu-id="6b202-223">它也會示範如何將該物件傳遞至為佇列中等待執行的工作中，執行緒集區。</span><span class="sxs-lookup"><span data-stu-id="6b202-223">It also demonstrates how to pass that object to a task that is queued for execution by the thread pool.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem1/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool QueueUserWorkItem1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem1/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool QueueUserWorkItem1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="6b202-224">Common Language Runtime (CLR) 已裝載，而且主機不支援這個動作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-224">The common language runtime (CLR) is hosted, and the host does not support this action.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6b202-225">
            <paramref name="callBack" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-225">
              <paramref name="callBack" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="QueueUserWorkItem&lt;TState&gt;">
      <MemberSignature Language="C#" Value="public static bool QueueUserWorkItem&lt;TState&gt; (Action&lt;TState&gt; callBack, TState state, bool preferLocal);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool QueueUserWorkItem&lt;TState&gt;(class System.Action`1&lt;!!TState&gt; callBack, !!TState state, bool preferLocal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.QueueUserWorkItem``1(System.Action{``0},``0,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function QueueUserWorkItem(Of TState) (callBack As Action(Of TState), state As TState, preferLocal As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TState&gt;&#xA; static bool QueueUserWorkItem(Action&lt;TState&gt; ^ callBack, TState state, bool preferLocal);" />
      <MemberSignature Language="F#" Value="static member QueueUserWorkItem : Action&lt;'State&gt; * 'State * bool -&gt; bool" Usage="System.Threading.ThreadPool.QueueUserWorkItem (callBack, state, preferLocal)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callBack" Type="System.Action&lt;TState&gt;" />
        <Parameter Name="state" Type="TState" />
        <Parameter Name="preferLocal" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TState">To be added.</typeparam>
        <param name="callBack">To be added.</param>
        <param name="state">To be added.</param>
        <param name="preferLocal">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterWaitForSingleObject">
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6b202-226">註冊正在等候 <see cref="T:System.Threading.WaitHandle" /> 的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-226">Registers a delegate that is waiting for a <see cref="T:System.Threading.WaitHandle" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, int millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, int32 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As Integer, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ RegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, int millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="F#" Value="static member RegisterWaitForSingleObject : System.Threading.WaitHandle * System.Threading.WaitOrTimerCallback * obj * int * bool -&gt; System.Threading.RegisteredWaitHandle" Usage="System.Threading.ThreadPool.RegisterWaitForSingleObject (waitObject, callBack, state, millisecondsTimeOutInterval, executeOnlyOnce)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.Int32" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="6b202-227">要註冊的 <see cref="T:System.Threading.WaitHandle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-227">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="6b202-228">使用 <see cref="T:System.Threading.WaitHandle" />，而不要使用 <see cref="T:System.Threading.Mutex" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-228">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="6b202-229">通知 <c>waitObject</c> 參數時要呼叫的 <see cref="T:System.Threading.WaitOrTimerCallback" /> 委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-229">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="6b202-230">傳遞至委派的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-230">The object that is passed to the delegate.</span>
          </span>
        </param>
        <param name="millisecondsTimeOutInterval">
          <span data-ttu-id="6b202-231">逾時以毫秒為單位。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-231">The time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="6b202-232">如果 <c>millisecondsTimeOutInterval</c> 參數為 0 (零)，函式會測試物件的狀態並立即傳回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-232">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="6b202-233">如果 <c>millisecondsTimeOutInterval</c> 為 -1，則絕對不會耗用函式的逾時間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-233">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="6b202-234">
            <see langword="true" /> 表示在呼叫委派之後，執行緒將不再等候 <c>waitObject</c> 參數；<see langword="false" /> 表示每當等候作業完成即重設計時器，直到移除註冊等候作業為止。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-234">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6b202-235">指定 32 位元帶正負號的整數表示逾時值 (以毫秒為單位)，藉此註冊要等候 <see cref="T:System.Threading.WaitHandle" /> 的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-235">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 32-bit signed integer for the time-out in milliseconds.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6b202-236">封裝原生控制代碼的 <see cref="T:System.Threading.RegisteredWaitHandle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-236">The <see cref="T:System.Threading.RegisteredWaitHandle" /> that encapsulates the native handle.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b202-237">完畢時使用<xref:System.Threading.RegisteredWaitHandle>這個方法傳回時，請呼叫其<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法，以釋放等候控制代碼的參考。</span><span class="sxs-lookup"><span data-stu-id="6b202-237">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="6b202-238">我們建議一律呼叫<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法，即使您指定`true`如`executeOnlyOnce`。</span><span class="sxs-lookup"><span data-stu-id="6b202-238">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="6b202-239">記憶體回收會更有效率地如果您呼叫<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法，而非根據 已註冊之等候控制代碼的完成項。</span><span class="sxs-lookup"><span data-stu-id="6b202-239">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 <span data-ttu-id="6b202-240"><xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法排入佇列的執行緒集區指定的委派。</span><span class="sxs-lookup"><span data-stu-id="6b202-240">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method queues the specified delegate to the thread pool.</span></span> <span data-ttu-id="6b202-241">當發生下列其中一項時，背景工作執行緒會執行委派：</span><span class="sxs-lookup"><span data-stu-id="6b202-241">A worker thread will execute the delegate when one of the following occurs:</span></span>  
  
-   <span data-ttu-id="6b202-242">指定的物件是處於信號狀態。</span><span class="sxs-lookup"><span data-stu-id="6b202-242">The specified object is in the signaled state.</span></span>  
  
-   <span data-ttu-id="6b202-243">經過逾時間隔。</span><span class="sxs-lookup"><span data-stu-id="6b202-243">The time-out interval elapses.</span></span>  
  
 <span data-ttu-id="6b202-244"><xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法會檢查指定的物件的目前狀態<xref:System.Threading.WaitHandle>。</span><span class="sxs-lookup"><span data-stu-id="6b202-244">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method checks the current state of the specified object's <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="6b202-245">如果未發出信號，物件狀態，方法會註冊等候作業。</span><span class="sxs-lookup"><span data-stu-id="6b202-245">If the object's state is unsignaled, the method registers a wait operation.</span></span> <span data-ttu-id="6b202-246">等候作業是由執行緒集區的執行緒執行。</span><span class="sxs-lookup"><span data-stu-id="6b202-246">The wait operation is performed by a thread from the thread pool.</span></span> <span data-ttu-id="6b202-247">委派是物件的狀態變成發出信號，或超過逾時間隔時，工作者執行緒所執行。</span><span class="sxs-lookup"><span data-stu-id="6b202-247">The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</span></span> <span data-ttu-id="6b202-248">如果`timeOutInterval`參數不是 0 （零） 和`executeOnlyOnce`參數是`false`，每次事件發出信號，或超過逾時間隔會重設的計時器。</span><span class="sxs-lookup"><span data-stu-id="6b202-248">If the `timeOutInterval` parameter is not 0 (zero) and the `executeOnlyOnce` parameter is `false`, the timer is reset every time the event is signaled or the time-out interval elapses.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6b202-249">使用<xref:System.Threading.Mutex>如`waitObject`不提供互斥回呼，因為基礎的 Win32 API 會使用預設`WT_EXECUTEDEFAULT`旗標，因此每個回呼分派另一個執行緒集區執行緒上。</span><span class="sxs-lookup"><span data-stu-id="6b202-249">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span> <span data-ttu-id="6b202-250">而不是<xref:System.Threading.Mutex>，使用<xref:System.Threading.Semaphore>最大計數為 1。</span><span class="sxs-lookup"><span data-stu-id="6b202-250">Instead of a <xref:System.Threading.Mutex>, use a <xref:System.Threading.Semaphore> with a maximum count of 1.</span></span>  
  
 <span data-ttu-id="6b202-251">若要取消的等候作業，請呼叫<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="6b202-251">To cancel the wait operation, call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="6b202-252">等候執行緒會使用 Win32`WaitForMultipleObjects`函式監視已註冊之等候作業。</span><span class="sxs-lookup"><span data-stu-id="6b202-252">The wait thread uses the Win32 `WaitForMultipleObjects` function to monitor registered wait operations.</span></span> <span data-ttu-id="6b202-253">因此，如果您必須使用相同的原生作業系統控制代碼，在多個呼叫<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>，您必須重複使用 Win32 控制代碼`DuplicateHandle`函式。</span><span class="sxs-lookup"><span data-stu-id="6b202-253">Therefore, if you must use the same native operating system handle in multiple calls to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, you must duplicate the handle using the Win32 `DuplicateHandle` function.</span></span> <span data-ttu-id="6b202-254">請注意，您不應該轉盤式事件物件傳遞至<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>，因為等候執行緒可能無法偵測出事件發出信號之前會重設。</span><span class="sxs-lookup"><span data-stu-id="6b202-254">Note that you should not pulse an event object passed to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, because the wait thread might not detect that the event is signaled before it is reset.</span></span>  
  
 <span data-ttu-id="6b202-255">在傳回之前函式會修改某些類型的同步處理物件的狀態。</span><span class="sxs-lookup"><span data-stu-id="6b202-255">Before returning, the function modifies the state of some types of synchronization objects.</span></span> <span data-ttu-id="6b202-256">只針對其信號的狀態造成要滿足等候條件的物件進行修改。</span><span class="sxs-lookup"><span data-stu-id="6b202-256">Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</span></span> <span data-ttu-id="6b202-257">例如，一個號誌計數就會減少一個。</span><span class="sxs-lookup"><span data-stu-id="6b202-257">For example, the count of a semaphore is decreased by one.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="6b202-258">版本資訊</span><span class="sxs-lookup"><span data-stu-id="6b202-258">Version Information</span></span>  
 <span data-ttu-id="6b202-259">以.NET Framework 2.0 版中，啟動<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType>屬性值會傳播至背景工作執行緒排入佇列使用<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="6b202-259">Starting with the .NET Framework version 2.0, the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property value is propagated to worker threads queued using the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method.</span></span> <span data-ttu-id="6b202-260">在舊版中，主體的資訊不會傳播。</span><span class="sxs-lookup"><span data-stu-id="6b202-260">In earlier versions, the principal information is not propagated.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="6b202-261">
            <paramref name="millisecondsTimeOutInterval" /> 參數小於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-261">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, long millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, int64 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As Long, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ RegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, long millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="F#" Value="static member RegisterWaitForSingleObject : System.Threading.WaitHandle * System.Threading.WaitOrTimerCallback * obj * int64 * bool -&gt; System.Threading.RegisteredWaitHandle" Usage="System.Threading.ThreadPool.RegisterWaitForSingleObject (waitObject, callBack, state, millisecondsTimeOutInterval, executeOnlyOnce)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.Int64" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="6b202-262">要註冊的 <see cref="T:System.Threading.WaitHandle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-262">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="6b202-263">使用 <see cref="T:System.Threading.WaitHandle" />，而不要使用 <see cref="T:System.Threading.Mutex" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-263">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="6b202-264">通知 <c>waitObject</c> 參數時要呼叫的 <see cref="T:System.Threading.WaitOrTimerCallback" /> 委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-264">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="6b202-265">傳送至委派的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-265">The object passed to the delegate.</span>
          </span>
        </param>
        <param name="millisecondsTimeOutInterval">
          <span data-ttu-id="6b202-266">逾時以毫秒為單位。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-266">The time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="6b202-267">如果 <c>millisecondsTimeOutInterval</c> 參數為 0 (零)，函式會測試物件的狀態並立即傳回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-267">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="6b202-268">如果 <c>millisecondsTimeOutInterval</c> 為 -1，則絕對不會耗用函式的逾時間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-268">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="6b202-269">
            <see langword="true" /> 表示在呼叫委派之後，執行緒將不再等候 <c>waitObject</c> 參數；<see langword="false" /> 表示每當等候作業完成即重設計時器，直到移除註冊等候作業為止。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-269">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6b202-270">指定 64 位元帶正負號的整數表示逾時值 (以毫秒為單位)，藉此註冊要等候 <see cref="T:System.Threading.WaitHandle" /> 的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-270">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 64-bit signed integer for the time-out in milliseconds.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6b202-271">封裝原生控制代碼的 <see cref="T:System.Threading.RegisteredWaitHandle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-271">The <see cref="T:System.Threading.RegisteredWaitHandle" /> that encapsulates the native handle.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b202-272">完畢時使用<xref:System.Threading.RegisteredWaitHandle>這個方法傳回時，請呼叫其<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法，以釋放等候控制代碼的參考。</span><span class="sxs-lookup"><span data-stu-id="6b202-272">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="6b202-273">我們建議一律呼叫<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法，即使您指定`true`如`executeOnlyOnce`。</span><span class="sxs-lookup"><span data-stu-id="6b202-273">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="6b202-274">記憶體回收會更有效率地如果您呼叫<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法，而非根據 已註冊之等候控制代碼的完成項。</span><span class="sxs-lookup"><span data-stu-id="6b202-274">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 <span data-ttu-id="6b202-275"><xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法排入佇列的執行緒集區指定的委派。</span><span class="sxs-lookup"><span data-stu-id="6b202-275">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method queues the specified delegate to the thread pool.</span></span> <span data-ttu-id="6b202-276">當發生下列其中一項時，背景工作執行緒會執行委派：</span><span class="sxs-lookup"><span data-stu-id="6b202-276">A worker thread will execute the delegate when one of the following occurs:</span></span>  
  
-   <span data-ttu-id="6b202-277">指定的物件是處於信號狀態。</span><span class="sxs-lookup"><span data-stu-id="6b202-277">The specified object is in the signaled state.</span></span>  
  
-   <span data-ttu-id="6b202-278">經過逾時間隔。</span><span class="sxs-lookup"><span data-stu-id="6b202-278">The time-out interval elapses.</span></span>  
  
 <span data-ttu-id="6b202-279"><xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法會檢查指定的物件的目前狀態<xref:System.Threading.WaitHandle>。</span><span class="sxs-lookup"><span data-stu-id="6b202-279">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method checks the current state of the specified object's <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="6b202-280">如果未發出信號，物件狀態，方法會註冊等候作業。</span><span class="sxs-lookup"><span data-stu-id="6b202-280">If the object's state is unsignaled, the method registers a wait operation.</span></span> <span data-ttu-id="6b202-281">等候作業是由執行緒集區的執行緒執行。</span><span class="sxs-lookup"><span data-stu-id="6b202-281">The wait operation is performed by a thread from the thread pool.</span></span> <span data-ttu-id="6b202-282">委派是物件的狀態變成發出信號，或超過逾時間隔時，工作者執行緒所執行。</span><span class="sxs-lookup"><span data-stu-id="6b202-282">The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</span></span> <span data-ttu-id="6b202-283">如果`timeOutInterval`參數不是 0 （零） 和`executeOnlyOnce`參數是`false`，每次事件發出信號，或超過逾時間隔會重設的計時器。</span><span class="sxs-lookup"><span data-stu-id="6b202-283">If the `timeOutInterval` parameter is not 0 (zero) and the `executeOnlyOnce` parameter is `false`, the timer is reset every time the event is signaled or the time-out interval elapses.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6b202-284">使用<xref:System.Threading.Mutex>如`waitObject`不提供互斥回呼，因為基礎的 Win32 API 會使用預設`WT_EXECUTEDEFAULT`旗標，因此每個回呼分派另一個執行緒集區執行緒上。</span><span class="sxs-lookup"><span data-stu-id="6b202-284">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span> <span data-ttu-id="6b202-285">而不是<xref:System.Threading.Mutex>，使用<xref:System.Threading.Semaphore>最大計數為 1。</span><span class="sxs-lookup"><span data-stu-id="6b202-285">Instead of a <xref:System.Threading.Mutex>, use a <xref:System.Threading.Semaphore> with a maximum count of 1.</span></span>  
  
 <span data-ttu-id="6b202-286">若要取消的等候作業，請呼叫<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="6b202-286">To cancel the wait operation, call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="6b202-287">等候執行緒會使用 Win32`WaitForMultipleObjects`函式監視已註冊之等候作業。</span><span class="sxs-lookup"><span data-stu-id="6b202-287">The wait thread uses the Win32 `WaitForMultipleObjects` function to monitor registered wait operations.</span></span> <span data-ttu-id="6b202-288">因此，如果您必須使用相同的原生作業系統控制代碼，在多個呼叫<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>，您必須重複使用 Win32 控制代碼`DuplicateHandle`函式。</span><span class="sxs-lookup"><span data-stu-id="6b202-288">Therefore, if you must use the same native operating system handle in multiple calls to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, you must duplicate the handle using the Win32 `DuplicateHandle` function.</span></span> <span data-ttu-id="6b202-289">請注意，您不應該轉盤式事件物件傳遞至<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>，因為等候執行緒可能無法偵測出事件發出信號之前會重設。</span><span class="sxs-lookup"><span data-stu-id="6b202-289">Note that you should not pulse an event object passed to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, because the wait thread might not detect that the event is signaled before it is reset.</span></span>  
  
 <span data-ttu-id="6b202-290">在傳回之前函式會修改某些類型的同步處理物件的狀態。</span><span class="sxs-lookup"><span data-stu-id="6b202-290">Before returning, the function modifies the state of some types of synchronization objects.</span></span> <span data-ttu-id="6b202-291">只針對其信號的狀態造成要滿足等候條件的物件進行修改。</span><span class="sxs-lookup"><span data-stu-id="6b202-291">Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</span></span> <span data-ttu-id="6b202-292">例如，一個號誌計數就會減少一個。</span><span class="sxs-lookup"><span data-stu-id="6b202-292">For example, the count of a semaphore is decreased by one.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="6b202-293">版本資訊</span><span class="sxs-lookup"><span data-stu-id="6b202-293">Version Information</span></span>  
 <span data-ttu-id="6b202-294">以.NET Framework 2.0 版中，啟動<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType>屬性值會傳播至背景工作執行緒排入佇列使用<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="6b202-294">Starting with the .NET Framework version 2.0, the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property value is propagated to worker threads queued using the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method.</span></span> <span data-ttu-id="6b202-295">在舊版中，主體的資訊不會傳播。</span><span class="sxs-lookup"><span data-stu-id="6b202-295">In earlier versions, the principal information is not propagated.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="6b202-296">
            <paramref name="millisecondsTimeOutInterval" /> 參數小於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-296">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, TimeSpan timeout, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, valuetype System.TimeSpan timeout, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, timeout As TimeSpan, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ RegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, TimeSpan timeout, bool executeOnlyOnce);" />
      <MemberSignature Language="F#" Value="static member RegisterWaitForSingleObject : System.Threading.WaitHandle * System.Threading.WaitOrTimerCallback * obj * TimeSpan * bool -&gt; System.Threading.RegisteredWaitHandle" Usage="System.Threading.ThreadPool.RegisterWaitForSingleObject (waitObject, callBack, state, timeout, executeOnlyOnce)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="6b202-297">要註冊的 <see cref="T:System.Threading.WaitHandle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-297">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="6b202-298">使用 <see cref="T:System.Threading.WaitHandle" />，而不要使用 <see cref="T:System.Threading.Mutex" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-298">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="6b202-299">通知 <c>waitObject</c> 參數時要呼叫的 <see cref="T:System.Threading.WaitOrTimerCallback" /> 委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-299">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="6b202-300">傳送至委派的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-300">The object passed to the delegate.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="6b202-301">以 <see cref="T:System.TimeSpan" /> 表示的逾時值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-301">The time-out represented by a <see cref="T:System.TimeSpan" />.</span>
          </span>
          <span data-ttu-id="6b202-302">如果 <c>timeout</c> 為 0 (零)，則函式會測試物件的狀態並立即傳回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-302">If <c>timeout</c> is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="6b202-303">如果 <c>timeout</c> 為 -1，則絕對不會耗用函式的逾時間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-303">If <c>timeout</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="6b202-304">
            <see langword="true" /> 表示在呼叫委派之後，執行緒將不再等候 <c>waitObject</c> 參數；<see langword="false" /> 表示每當等候作業完成即重設計時器，直到移除註冊等候作業為止。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-304">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6b202-305">指定 <see cref="T:System.TimeSpan" /> 值表示逾時值，藉此註冊要等候 <see cref="T:System.Threading.WaitHandle" /> 的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-305">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a <see cref="T:System.TimeSpan" /> value for the time-out.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6b202-306">封裝原生控制代碼的 <see cref="T:System.Threading.RegisteredWaitHandle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-306">The <see cref="T:System.Threading.RegisteredWaitHandle" /> that encapsulates the native handle.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b202-307">完畢時使用<xref:System.Threading.RegisteredWaitHandle>這個方法傳回時，請呼叫其<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法，以釋放等候控制代碼的參考。</span><span class="sxs-lookup"><span data-stu-id="6b202-307">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="6b202-308">我們建議一律呼叫<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法，即使您指定`true`如`executeOnlyOnce`。</span><span class="sxs-lookup"><span data-stu-id="6b202-308">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="6b202-309">記憶體回收會更有效率地如果您呼叫<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法，而非根據 已註冊之等候控制代碼的完成項。</span><span class="sxs-lookup"><span data-stu-id="6b202-309">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 <span data-ttu-id="6b202-310"><xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法排入佇列的執行緒集區指定的委派。</span><span class="sxs-lookup"><span data-stu-id="6b202-310">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method queues the specified delegate to the thread pool.</span></span> <span data-ttu-id="6b202-311">當發生下列其中一項時，背景工作執行緒會執行委派：</span><span class="sxs-lookup"><span data-stu-id="6b202-311">A worker thread will execute the delegate when one of the following occurs:</span></span>  
  
-   <span data-ttu-id="6b202-312">指定的物件是處於信號狀態。</span><span class="sxs-lookup"><span data-stu-id="6b202-312">The specified object is in the signaled state.</span></span>  
  
-   <span data-ttu-id="6b202-313">經過逾時間隔。</span><span class="sxs-lookup"><span data-stu-id="6b202-313">The time-out interval elapses.</span></span>  
  
 <span data-ttu-id="6b202-314"><xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法會檢查指定的物件的目前狀態<xref:System.Threading.WaitHandle>。</span><span class="sxs-lookup"><span data-stu-id="6b202-314">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method checks the current state of the specified object's <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="6b202-315">如果未發出信號，物件狀態，方法會註冊等候作業。</span><span class="sxs-lookup"><span data-stu-id="6b202-315">If the object's state is unsignaled, the method registers a wait operation.</span></span> <span data-ttu-id="6b202-316">等候作業是由執行緒集區的執行緒執行。</span><span class="sxs-lookup"><span data-stu-id="6b202-316">The wait operation is performed by a thread from the thread pool.</span></span> <span data-ttu-id="6b202-317">委派是物件的狀態變成發出信號，或超過逾時間隔時，工作者執行緒所執行。</span><span class="sxs-lookup"><span data-stu-id="6b202-317">The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</span></span> <span data-ttu-id="6b202-318">如果`timeOutInterval`參數不是 0 （零） 和`executeOnlyOnce`參數是`false`，每次事件發出信號，或超過逾時間隔會重設的計時器。</span><span class="sxs-lookup"><span data-stu-id="6b202-318">If the `timeOutInterval` parameter is not 0 (zero) and the `executeOnlyOnce` parameter is `false`, the timer is reset every time the event is signaled or the time-out interval elapses.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6b202-319">使用<xref:System.Threading.Mutex>如`waitObject`不提供互斥回呼，因為基礎的 Win32 API 會使用預設`WT_EXECUTEDEFAULT`旗標，因此每個回呼分派另一個執行緒集區執行緒上。</span><span class="sxs-lookup"><span data-stu-id="6b202-319">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span> <span data-ttu-id="6b202-320">而不是<xref:System.Threading.Mutex>，使用<xref:System.Threading.Semaphore>最大計數為 1。</span><span class="sxs-lookup"><span data-stu-id="6b202-320">Instead of a <xref:System.Threading.Mutex>, use a <xref:System.Threading.Semaphore> with a maximum count of 1.</span></span>  
  
 <span data-ttu-id="6b202-321">若要取消的等候作業，請呼叫<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="6b202-321">To cancel the wait operation, call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="6b202-322">等候執行緒會使用 Win32`WaitForMultipleObjects`函式監視已註冊之等候作業。</span><span class="sxs-lookup"><span data-stu-id="6b202-322">The wait thread uses the Win32 `WaitForMultipleObjects` function to monitor registered wait operations.</span></span> <span data-ttu-id="6b202-323">因此，如果您必須使用相同的原生作業系統控制代碼，在多個呼叫<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>，您必須重複使用 Win32 控制代碼`DuplicateHandle`函式。</span><span class="sxs-lookup"><span data-stu-id="6b202-323">Therefore, if you must use the same native operating system handle in multiple calls to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, you must duplicate the handle using the Win32 `DuplicateHandle` function.</span></span> <span data-ttu-id="6b202-324">請注意，您不應該轉盤式事件物件傳遞至<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>，因為等候執行緒可能無法偵測出事件發出信號之前會重設。</span><span class="sxs-lookup"><span data-stu-id="6b202-324">Note that you should not pulse an event object passed to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, because the wait thread might not detect that the event is signaled before it is reset.</span></span>  
  
 <span data-ttu-id="6b202-325">在傳回之前函式會修改某些類型的同步處理物件的狀態。</span><span class="sxs-lookup"><span data-stu-id="6b202-325">Before returning, the function modifies the state of some types of synchronization objects.</span></span> <span data-ttu-id="6b202-326">只針對其信號的狀態造成要滿足等候條件的物件進行修改。</span><span class="sxs-lookup"><span data-stu-id="6b202-326">Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</span></span> <span data-ttu-id="6b202-327">例如，一個號誌計數就會減少一個。</span><span class="sxs-lookup"><span data-stu-id="6b202-327">For example, the count of a semaphore is decreased by one.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="6b202-328">版本資訊</span><span class="sxs-lookup"><span data-stu-id="6b202-328">Version Information</span></span>  
 <span data-ttu-id="6b202-329">以.NET Framework 2.0 版中，啟動<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType>屬性值會傳播至背景工作執行緒排入佇列使用<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="6b202-329">Starting with the .NET Framework version 2.0, the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property value is propagated to worker threads queued using the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method.</span></span> <span data-ttu-id="6b202-330">在舊版中，主體的資訊不會傳播。</span><span class="sxs-lookup"><span data-stu-id="6b202-330">In earlier versions, the principal information is not propagated.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="6b202-331">
            <paramref name="timeout" /> 參數小於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-331">The <paramref name="timeout" /> parameter is less than -1.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="6b202-332">
            <paramref name="timeout" /> 參數大於 <see cref="F:System.Int32.MaxValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-332">The <paramref name="timeout" /> parameter is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, uint millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, unsigned int32 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As UInteger, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ RegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, System::UInt32 millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="F#" Value="static member RegisterWaitForSingleObject : System.Threading.WaitHandle * System.Threading.WaitOrTimerCallback * obj * uint32 * bool -&gt; System.Threading.RegisteredWaitHandle" Usage="System.Threading.ThreadPool.RegisterWaitForSingleObject (waitObject, callBack, state, millisecondsTimeOutInterval, executeOnlyOnce)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.UInt32" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="6b202-333">要註冊的 <see cref="T:System.Threading.WaitHandle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-333">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="6b202-334">使用 <see cref="T:System.Threading.WaitHandle" />，而不要使用 <see cref="T:System.Threading.Mutex" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-334">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="6b202-335">通知 <c>waitObject</c> 參數時要呼叫的 <see cref="T:System.Threading.WaitOrTimerCallback" /> 委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-335">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="6b202-336">傳送至委派的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-336">The object passed to the delegate.</span>
          </span>
        </param>
        <param name="millisecondsTimeOutInterval">
          <span data-ttu-id="6b202-337">逾時以毫秒為單位。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-337">The time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="6b202-338">如果 <c>millisecondsTimeOutInterval</c> 參數為 0 (零)，函式會測試物件的狀態並立即傳回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-338">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="6b202-339">如果 <c>millisecondsTimeOutInterval</c> 為 -1，則絕對不會耗用函式的逾時間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-339">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="6b202-340">
            <see langword="true" /> 表示在呼叫委派之後，執行緒將不再等候 <c>waitObject</c> 參數；<see langword="false" /> 表示每當等候作業完成即重設計時器，直到移除註冊等候作業為止。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-340">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6b202-341">指定 32 位元帶正負號的整數表示逾時值 (以毫秒為單位)，藉此註冊要等候 <see cref="T:System.Threading.WaitHandle" /> 的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-341">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 32-bit unsigned integer for the time-out in milliseconds.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6b202-342">可用來取消已註冊之等候作業的 <see cref="T:System.Threading.RegisteredWaitHandle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-342">The <see cref="T:System.Threading.RegisteredWaitHandle" /> that can be used to cancel the registered wait operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b202-343">完畢時使用<xref:System.Threading.RegisteredWaitHandle>這個方法傳回時，請呼叫其<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法，以釋放等候控制代碼的參考。</span><span class="sxs-lookup"><span data-stu-id="6b202-343">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="6b202-344">我們建議一律呼叫<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法，即使您指定`true`如`executeOnlyOnce`。</span><span class="sxs-lookup"><span data-stu-id="6b202-344">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="6b202-345">記憶體回收會更有效率地如果您呼叫<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法，而非根據 已註冊之等候控制代碼的完成項。</span><span class="sxs-lookup"><span data-stu-id="6b202-345">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 <span data-ttu-id="6b202-346"><xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法排入佇列的執行緒集區指定的委派。</span><span class="sxs-lookup"><span data-stu-id="6b202-346">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method queues the specified delegate to the thread pool.</span></span> <span data-ttu-id="6b202-347">當發生下列其中一項時，背景工作執行緒會執行委派：</span><span class="sxs-lookup"><span data-stu-id="6b202-347">A worker thread will execute the delegate when one of the following occurs:</span></span>  
  
-   <span data-ttu-id="6b202-348">指定的物件是處於信號狀態。</span><span class="sxs-lookup"><span data-stu-id="6b202-348">The specified object is in the signaled state.</span></span>  
  
-   <span data-ttu-id="6b202-349">經過逾時間隔。</span><span class="sxs-lookup"><span data-stu-id="6b202-349">The time-out interval elapses.</span></span>  
  
 <span data-ttu-id="6b202-350"><xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法會檢查指定的物件的目前狀態<xref:System.Threading.WaitHandle>。</span><span class="sxs-lookup"><span data-stu-id="6b202-350">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method checks the current state of the specified object's <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="6b202-351">如果未發出信號，物件狀態，方法會註冊等候作業。</span><span class="sxs-lookup"><span data-stu-id="6b202-351">If the object's state is unsignaled, the method registers a wait operation.</span></span> <span data-ttu-id="6b202-352">等候作業是由執行緒集區的執行緒執行。</span><span class="sxs-lookup"><span data-stu-id="6b202-352">The wait operation is performed by a thread from the thread pool.</span></span> <span data-ttu-id="6b202-353">委派是物件的狀態變成發出信號，或超過逾時間隔時，工作者執行緒所執行。</span><span class="sxs-lookup"><span data-stu-id="6b202-353">The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</span></span> <span data-ttu-id="6b202-354">如果`timeOutInterval`參數不是 0 （零） 和`executeOnlyOnce`參數是`false`，每次事件發出信號，或超過逾時間隔會重設的計時器。</span><span class="sxs-lookup"><span data-stu-id="6b202-354">If the `timeOutInterval` parameter is not 0 (zero) and the `executeOnlyOnce` parameter is `false`, the timer is reset every time the event is signaled or the time-out interval elapses.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6b202-355">使用<xref:System.Threading.Mutex>如`waitObject`不提供互斥回呼，因為基礎的 Win32 API 會使用預設`WT_EXECUTEDEFAULT`旗標，因此每個回呼分派另一個執行緒集區執行緒上。</span><span class="sxs-lookup"><span data-stu-id="6b202-355">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span> <span data-ttu-id="6b202-356">而不是<xref:System.Threading.Mutex>，使用<xref:System.Threading.Semaphore>最大計數為 1。</span><span class="sxs-lookup"><span data-stu-id="6b202-356">Instead of a <xref:System.Threading.Mutex>, use a <xref:System.Threading.Semaphore> with a maximum count of 1.</span></span>  
  
 <span data-ttu-id="6b202-357">若要取消的等候作業，請呼叫<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="6b202-357">To cancel the wait operation, call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="6b202-358">等候執行緒會使用 Win32`WaitForMultipleObjects`函式監視已註冊之等候作業。</span><span class="sxs-lookup"><span data-stu-id="6b202-358">The wait thread uses the Win32 `WaitForMultipleObjects` function to monitor registered wait operations.</span></span> <span data-ttu-id="6b202-359">因此，如果您必須使用相同的原生作業系統控制代碼，在多個呼叫<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>，您必須重複使用 Win32 控制代碼`DuplicateHandle`函式。</span><span class="sxs-lookup"><span data-stu-id="6b202-359">Therefore, if you must use the same native operating system handle in multiple calls to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, you must duplicate the handle using the Win32 `DuplicateHandle` function.</span></span> <span data-ttu-id="6b202-360">請注意，您不應該轉盤式事件物件傳遞至<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>，因為等候執行緒可能無法偵測出事件發出信號之前會重設。</span><span class="sxs-lookup"><span data-stu-id="6b202-360">Note that you should not pulse an event object passed to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, because the wait thread might not detect that the event is signaled before it is reset.</span></span>  
  
 <span data-ttu-id="6b202-361">在傳回之前函式會修改某些類型的同步處理物件的狀態。</span><span class="sxs-lookup"><span data-stu-id="6b202-361">Before returning, the function modifies the state of some types of synchronization objects.</span></span> <span data-ttu-id="6b202-362">只針對其信號的狀態造成要滿足等候條件的物件進行修改。</span><span class="sxs-lookup"><span data-stu-id="6b202-362">Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</span></span> <span data-ttu-id="6b202-363">例如，一個號誌計數就會減少一個。</span><span class="sxs-lookup"><span data-stu-id="6b202-363">For example, the count of a semaphore is decreased by one.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="6b202-364">版本資訊</span><span class="sxs-lookup"><span data-stu-id="6b202-364">Version Information</span></span>  
 <span data-ttu-id="6b202-365">以.NET Framework 2.0 版中，啟動<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType>屬性值會傳播至背景工作執行緒排入佇列使用<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="6b202-365">Starting with the .NET Framework version 2.0, the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property value is propagated to worker threads queued using the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method.</span></span> <span data-ttu-id="6b202-366">在舊版中，主體的資訊不會傳播。</span><span class="sxs-lookup"><span data-stu-id="6b202-366">In earlier versions, the principal information is not propagated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6b202-367">下列範例示範如何使用<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法來指定的等候控制代碼會收到信號時，執行指定的回呼方法。</span><span class="sxs-lookup"><span data-stu-id="6b202-367">The following example shows how to use the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method to execute a specified callback method when a specified wait handle is signaled.</span></span> <span data-ttu-id="6b202-368">在此範例中，回呼方法是`WaitProc`，等候控制代碼，且<xref:System.Threading.AutoResetEvent>。</span><span class="sxs-lookup"><span data-stu-id="6b202-368">In this example, the callback method is `WaitProc`, and the wait handle is an <xref:System.Threading.AutoResetEvent>.</span></span>  
  
 <span data-ttu-id="6b202-369">此範例會定義`TaskInfo`類別以包裝在執行時傳遞至回呼的資訊。</span><span class="sxs-lookup"><span data-stu-id="6b202-369">The example defines a `TaskInfo` class to hold the information that is passed to the callback when it executes.</span></span> <span data-ttu-id="6b202-370">此範例會建立`TaskInfo`物件，並將其指派一些字串資料。</span><span class="sxs-lookup"><span data-stu-id="6b202-370">The example creates a `TaskInfo` object and assigns it some string data.</span></span> <span data-ttu-id="6b202-371"><xref:System.Threading.RegisteredWaitHandle>所傳回<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法指派給`Handle`欄位`TaskInfo`物件，使回呼方法具有存取權<xref:System.Threading.RegisteredWaitHandle>。</span><span class="sxs-lookup"><span data-stu-id="6b202-371">The <xref:System.Threading.RegisteredWaitHandle> that is returned by the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method is assigned to the `Handle` field of the `TaskInfo` object so that the callback method has access to the <xref:System.Threading.RegisteredWaitHandle>.</span></span>  
  
 <span data-ttu-id="6b202-372">除了指定`TaskInfo`做為傳遞至回呼方法，呼叫物件<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法指定<xref:System.Threading.AutoResetEvent>等候工作，<xref:System.Threading.WaitOrTimerCallback>委派，表示`WaitProc`回呼方法一個第二個逾時間隔及多個回呼。</span><span class="sxs-lookup"><span data-stu-id="6b202-372">In addition to specifying `TaskInfo` as the object to pass to the callback method, the call to the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method specifies the <xref:System.Threading.AutoResetEvent> that the task will wait for, a <xref:System.Threading.WaitOrTimerCallback> delegate that represents the `WaitProc` callback method, a one second time-out interval, and multiple callbacks.</span></span>  
  
 <span data-ttu-id="6b202-373">當主執行緒發出的訊號<xref:System.Threading.AutoResetEvent>藉由呼叫其<xref:System.Threading.EventWaitHandle.Set%2A>方法，<xref:System.Threading.WaitOrTimerCallback>叫用委派。</span><span class="sxs-lookup"><span data-stu-id="6b202-373">When the main thread signals the <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, the <xref:System.Threading.WaitOrTimerCallback> delegate is invoked.</span></span> <span data-ttu-id="6b202-374">`WaitProc`方法測試<xref:System.Threading.RegisteredWaitHandle>來判斷是否發生逾時。</span><span class="sxs-lookup"><span data-stu-id="6b202-374">The `WaitProc` method tests <xref:System.Threading.RegisteredWaitHandle> to determine whether a time-out occurred.</span></span> <span data-ttu-id="6b202-375">如果回呼已叫用，因為已收到信號，等候控制代碼，`WaitProc`方法會移除註冊<xref:System.Threading.RegisteredWaitHandle>，停止其他的回呼。</span><span class="sxs-lookup"><span data-stu-id="6b202-375">If the callback was invoked because the wait handle was signaled, the `WaitProc` method unregisters the <xref:System.Threading.RegisteredWaitHandle>, stopping additional callbacks.</span></span> <span data-ttu-id="6b202-376">在逾時，工作會繼續等候。</span><span class="sxs-lookup"><span data-stu-id="6b202-376">In the case of a time-out, the task continues to wait.</span></span> <span data-ttu-id="6b202-377">`WaitProc`方法結束列印訊息至主控台。</span><span class="sxs-lookup"><span data-stu-id="6b202-377">The `WaitProc` method ends by printing a message to the console.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="6b202-378">
            <paramref name="millisecondsTimeOutInterval" /> 參數小於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-378">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetMaxThreads">
      <MemberSignature Language="C#" Value="public static bool SetMaxThreads (int workerThreads, int completionPortThreads);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SetMaxThreads(int32 workerThreads, int32 completionPortThreads) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SetMaxThreads (workerThreads As Integer, completionPortThreads As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SetMaxThreads(int workerThreads, int completionPortThreads);" />
      <MemberSignature Language="F#" Value="static member SetMaxThreads : int * int -&gt; bool" Usage="System.Threading.ThreadPool.SetMaxThreads (workerThreads, completionPortThreads)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerThreads" Type="System.Int32" />
        <Parameter Name="completionPortThreads" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="workerThreads">
          <span data-ttu-id="6b202-379">執行緒集區中的背景工作執行緒最大數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-379">The maximum number of worker threads in the thread pool.</span>
          </span>
        </param>
        <param name="completionPortThreads">
          <span data-ttu-id="6b202-380">執行緒集區中的非同步 I/O 執行緒最大數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-380">The maximum number of asynchronous I/O threads in the thread pool.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6b202-381">設定可並行使用之執行緒集區的要求數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-381">Sets the number of requests to the thread pool that can be active concurrently.</span>
          </span>
          <span data-ttu-id="6b202-382">超過該數目的所有要求會繼續佇列，直到可以使用執行緒集區執行緒為止。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-382">All requests above that number remain queued until thread pool threads become available.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6b202-383">如果變更成功，則為 <see langword="true" />；否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-383">
              <see langword="true" /> if the change is successful; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b202-384">您無法設定背景工作執行緒或 I/O 完成執行緒的最大數目的數字小於電腦上的處理器數目。</span><span class="sxs-lookup"><span data-stu-id="6b202-384">You cannot set the maximum number of worker threads or I/O completion threads to a number smaller than the number of processors on the computer.</span></span> <span data-ttu-id="6b202-385">若要判斷有多少處理器，擷取的值<xref:System.Environment.ProcessorCount%2A?displayProperty=nameWithType>屬性。</span><span class="sxs-lookup"><span data-stu-id="6b202-385">To determine how many processors are present, retrieve the value of the <xref:System.Environment.ProcessorCount%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="6b202-386">此外，您無法設定背景工作執行緒或 I/O 完成執行緒來比對應的最小背景工作執行緒數目較小的數字或 I/O 完成執行緒的最大數目。</span><span class="sxs-lookup"><span data-stu-id="6b202-386">In addition, you cannot set the maximum number of worker threads or I/O completion threads to a number smaller than the corresponding minimum number of worker threads or I/O completion threads.</span></span> <span data-ttu-id="6b202-387">若要判斷最小執行緒集區大小，請呼叫<xref:System.Threading.ThreadPool.GetMinThreads%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="6b202-387">To determine the minimum thread pool size,  call the <xref:System.Threading.ThreadPool.GetMinThreads%2A> method.</span></span>  
  
 <span data-ttu-id="6b202-388">如果裝載 common language runtime，例如藉由網際網路資訊服務 (IIS) 或 SQL Server，主機可以限制或阻止變更執行緒集區大小。</span><span class="sxs-lookup"><span data-stu-id="6b202-388">If the common language runtime is hosted, for example by Internet Information Services (IIS) or SQL Server, the host can limit or prevent changes to the thread pool size.</span></span>  
  
 <span data-ttu-id="6b202-389">變更執行緒集區中的執行緒數目上限時，請務必小心。</span><span class="sxs-lookup"><span data-stu-id="6b202-389">Use caution when changing the maximum number of threads in the thread pool.</span></span> <span data-ttu-id="6b202-390">而獲益的程式碼，所做的變更可能造成負面影響您使用的程式碼程式庫。</span><span class="sxs-lookup"><span data-stu-id="6b202-390">While your code might benefit, the changes might have an adverse effect on code libraries you use.</span></span>  
  
 <span data-ttu-id="6b202-391">設定執行緒集區大小太大，可能會造成效能問題。</span><span class="sxs-lookup"><span data-stu-id="6b202-391">Setting the thread pool size too large can cause performance problems.</span></span> <span data-ttu-id="6b202-392">如果同時執行太多執行緒，工作切換額外負荷會變成的重要因素。</span><span class="sxs-lookup"><span data-stu-id="6b202-392">If too many threads are executing at the same time, the task switching overhead becomes a significant factor.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="6b202-393">提供控制執行緒的能力。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-393">for the ability to control threads.</span>
          </span>
          <span data-ttu-id="6b202-394">權限的值： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-394">Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)" />
      </Docs>
    </Member>
    <Member MemberName="SetMinThreads">
      <MemberSignature Language="C#" Value="public static bool SetMinThreads (int workerThreads, int completionPortThreads);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SetMinThreads(int32 workerThreads, int32 completionPortThreads) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SetMinThreads (workerThreads As Integer, completionPortThreads As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SetMinThreads(int workerThreads, int completionPortThreads);" />
      <MemberSignature Language="F#" Value="static member SetMinThreads : int * int -&gt; bool" Usage="System.Threading.ThreadPool.SetMinThreads (workerThreads, completionPortThreads)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerThreads" Type="System.Int32" />
        <Parameter Name="completionPortThreads" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="workerThreads">
          <span data-ttu-id="6b202-395">執行緒集區視需要建立的背景工作執行緒最小數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-395">The minimum number of worker threads that the thread pool creates on demand.</span>
          </span>
        </param>
        <param name="completionPortThreads">
          <span data-ttu-id="6b202-396">執行緒集區視需要建立的非同步 I/O 執行緒最小數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-396">The minimum number of asynchronous I/O threads that the thread pool creates on demand.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6b202-397">在切換至管理執行緒建立和解構的演算法之前，設定執行緒集區隨著提出新要求，視需要建立的執行緒最小數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-397">Sets the minimum number of threads the thread pool creates on demand, as new requests are made, before switching to an algorithm for managing thread creation and destruction.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6b202-398">如果變更成功，則為 <see langword="true" />；否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-398">
              <see langword="true" /> if the change is successful; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b202-399">執行緒集區視需要提供新的背景工作執行緒或 I/O 完成執行緒直到達到每個類別目錄的最小值。</span><span class="sxs-lookup"><span data-stu-id="6b202-399">The thread pool provides new worker threads or I/O completion threads on demand until it reaches the minimum for each category.</span></span> <span data-ttu-id="6b202-400">當達到最小值時，執行緒集區可以在該分類建立額外的執行緒，或等候部分工作完成。</span><span class="sxs-lookup"><span data-stu-id="6b202-400">When the minimum is reached, the thread pool can create additional threads in that category or wait until some tasks complete.</span></span> <span data-ttu-id="6b202-401">開頭為[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]，執行緒集區會建立並終結執行緒，以便最佳化輸送量，輸送量的定義為每個時間單位完成的工作數目。</span><span class="sxs-lookup"><span data-stu-id="6b202-401">Beginning with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], the thread pool creates and destroys threads in order to optimize throughput, which is defined as the number of tasks that complete per unit of time.</span></span> <span data-ttu-id="6b202-402">執行緒太少可能無法最有效地利用可用資源，而執行緒太多則可能增加資源爭用的情況。</span><span class="sxs-lookup"><span data-stu-id="6b202-402">Too few threads might not make optimal use of available resources, whereas too many threads could increase resource contention.</span></span>  
  
 <span data-ttu-id="6b202-403">當需求很低時，執行緒集區執行緒的實際數目可能低於最小值。</span><span class="sxs-lookup"><span data-stu-id="6b202-403">When demand is low, the actual number of thread pool threads can fall below the minimum values.</span></span>  
  
 <span data-ttu-id="6b202-404">如果您指定為負數或大於的使用中執行緒集區執行緒的數目上限的數字 (使用取得<xref:System.Threading.ThreadPool.GetMaxThreads%2A>)，<xref:System.Threading.ThreadPool.SetMinThreads%2A>傳回`false`也不會變更其中一個最小值。</span><span class="sxs-lookup"><span data-stu-id="6b202-404">If you specify a negative number or a number larger than the maximum number of active thread pool threads (obtained using <xref:System.Threading.ThreadPool.GetMaxThreads%2A>), <xref:System.Threading.ThreadPool.SetMinThreads%2A> returns `false` and does not change either of the minimum values.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="6b202-405">根據預設，執行緒的最小數目設定為在系統上的處理器數目。</span><span class="sxs-lookup"><span data-stu-id="6b202-405">By default, the minimum number of threads is set to the number of processors on a system.</span></span> <span data-ttu-id="6b202-406">您可以使用<xref:System.Threading.ThreadPool.SetMinThreads%2A>來增加最小的數字 ofthreads 方法。</span><span class="sxs-lookup"><span data-stu-id="6b202-406">You can use the <xref:System.Threading.ThreadPool.SetMinThreads%2A> method to increase the minimum number ofthreads.</span></span> <span data-ttu-id="6b202-407">不過，不必要地增加這些值，可能會造成效能問題。</span><span class="sxs-lookup"><span data-stu-id="6b202-407">However, unnecessarily increasing these values can cause performance problems.</span></span> <span data-ttu-id="6b202-408">如果太多工作同時啟動，則所有工作可能都會變慢。</span><span class="sxs-lookup"><span data-stu-id="6b202-408">If too many tasks start at the same time, all of them might appear to be slow.</span></span> <span data-ttu-id="6b202-409">在大部分情況下，執行緒集區會執行更好使用它自己的演算法來配置執行緒。</span><span class="sxs-lookup"><span data-stu-id="6b202-409">In most cases, the thread pool will perform better with its own algorithm for allocating threads.</span></span> <span data-ttu-id="6b202-410">減少至低於的處理器數目也會降低效能的最小值。</span><span class="sxs-lookup"><span data-stu-id="6b202-410">Reducing the minimum to less than the number of processors can also hurt performance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6b202-411">下列範例為 4，設定工作者執行緒的最小數目，並保留非同步 I/O 完成執行緒的最小數目的原始值。</span><span class="sxs-lookup"><span data-stu-id="6b202-411">The following example sets the minimum number of worker threads to four, and preserves the original value for the minimum number of asynchronous I/O completion threads.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="6b202-412">提供控制執行緒的能力。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-412">for the ability to control threads.</span>
          </span>
          <span data-ttu-id="6b202-413">權限的值： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-413">Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)" />
      </Docs>
    </Member>
    <Member MemberName="UnsafeQueueNativeOverlapped">
      <MemberSignature Language="C#" Value="public static bool UnsafeQueueNativeOverlapped (System.Threading.NativeOverlapped* overlapped);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool UnsafeQueueNativeOverlapped(valuetype System.Threading.NativeOverlapped* overlapped) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool UnsafeQueueNativeOverlapped(System::Threading::NativeOverlapped* overlapped);" />
      <MemberSignature Language="F#" Value="static member UnsafeQueueNativeOverlapped : nativeptr&lt;System.Threading.NativeOverlapped&gt; -&gt; bool" Usage="System.Threading.ThreadPool.UnsafeQueueNativeOverlapped overlapped" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="overlapped" Type="System.Threading.NativeOverlapped*" />
      </Parameters>
      <Docs>
        <param name="overlapped">
          <span data-ttu-id="6b202-414">要排入佇列的 <see cref="T:System.Threading.NativeOverlapped" /> 結構。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-414">The <see cref="T:System.Threading.NativeOverlapped" /> structure to queue.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6b202-415">將重疊的 I/O 作業排入佇列，以等候執行。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-415">Queues an overlapped I/O operation for execution.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6b202-416">如果這項作業已成功排入 I/O 完成連接埠的佇列，則為 <see langword="true" />；否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-416">
              <see langword="true" /> if the operation was successfully queued to an I/O completion port; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b202-417">如需有關使用原生 Win32 資訊重疊的 I/O，請參閱 <<c0> <xref:System.Threading.Overlapped> 類別<xref:System.Threading.NativeOverlapped>結構，而`OVERLAPPED`Win32 平台 SDK 中的結構。</span><span class="sxs-lookup"><span data-stu-id="6b202-417">For information about using native Win32 overlapped I/O, see the <xref:System.Threading.Overlapped> class, the <xref:System.Threading.NativeOverlapped> structure, and the `OVERLAPPED` structure in the Win32 Platform SDK.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="6b202-418">使用<xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A>方法可能不小心開啟安全性漏洞。</span><span class="sxs-lookup"><span data-stu-id="6b202-418">Using the <xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A> method could inadvertently open up a security hole.</span></span> <span data-ttu-id="6b202-419">程式碼存取安全性會根據堆疊中的所有呼叫端的權限的權限檢查。</span><span class="sxs-lookup"><span data-stu-id="6b202-419">Code access security bases its permission checks on the permissions of all the callers on the stack.</span></span> <span data-ttu-id="6b202-420">當工作排入佇列的執行緒集區執行緒使用<xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A>，執行緒集區執行緒的堆疊並沒有實際的呼叫端的內容。</span><span class="sxs-lookup"><span data-stu-id="6b202-420">When work is queued on a thread pool thread using <xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A>, the stack of the thread pool thread does not have the context of the actual callers.</span></span> <span data-ttu-id="6b202-421">惡意程式碼可能可以利用此選項可避免權限檢查。</span><span class="sxs-lookup"><span data-stu-id="6b202-421">Malicious code might be able exploit this to avoid permission checks.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="6b202-422">需要完全信任立即呼叫者。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-422">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="6b202-423">這個成員無法供部分信任或安全性透明程式碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-423">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="UnsafeQueueUserWorkItem">
      <MemberSignature Language="C#" Value="public static bool UnsafeQueueUserWorkItem (System.Threading.WaitCallback callBack, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool UnsafeQueueUserWorkItem(class System.Threading.WaitCallback callBack, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeQueueUserWorkItem (callBack As WaitCallback, state As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool UnsafeQueueUserWorkItem(System::Threading::WaitCallback ^ callBack, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="static member UnsafeQueueUserWorkItem : System.Threading.WaitCallback * obj -&gt; bool" Usage="System.Threading.ThreadPool.UnsafeQueueUserWorkItem (callBack, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callBack" Type="System.Threading.WaitCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callBack">
          <span data-ttu-id="6b202-424">
            <see cref="T:System.Threading.WaitCallback" />，代表當執行緒集區中的執行緒選取工作項目時，要叫用的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-424">A <see cref="T:System.Threading.WaitCallback" /> that represents the delegate to invoke when a thread in the thread pool picks up the work item.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="6b202-425">接受執行緒集區的服務時，傳遞給委派的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-425">The object that is passed to the delegate when serviced from the thread pool.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6b202-426">將指定的委派排入執行緒集區的佇列，但不會將呼叫堆疊傳播至背景工作執行緒。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-426">Queues the specified delegate to the thread pool, but does not propagate the calling stack to the worker thread.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6b202-427">如果方法成功，則為 <see langword="true" />；如果無法將工作項目排入佇列，則會擲回 <see cref="T:System.OutOfMemoryException" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-427">
              <see langword="true" /> if the method succeeds; <see cref="T:System.OutOfMemoryException" /> is thrown if the work item could not be queued.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b202-428">不同於<xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>方法，<xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A>並不會傳播至背景工作執行緒的呼叫堆疊。</span><span class="sxs-lookup"><span data-stu-id="6b202-428">Unlike the <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> method, <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A> does not propagate the calling stack to the worker thread.</span></span> <span data-ttu-id="6b202-429">這可讓程式碼會遺失呼叫堆疊，因此提高其安全性權限。</span><span class="sxs-lookup"><span data-stu-id="6b202-429">This allows code to lose the calling stack and thereby to elevate its security privileges.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="6b202-430">使用<xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A>不慎無法開啟安全性漏洞。</span><span class="sxs-lookup"><span data-stu-id="6b202-430">Using <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A> could inadvertently open up a security hole.</span></span> <span data-ttu-id="6b202-431">程式碼存取安全性會根據堆疊中的所有呼叫端的權限的權限檢查。</span><span class="sxs-lookup"><span data-stu-id="6b202-431">Code access security bases its permission checks on the permissions of all the callers on the stack.</span></span> <span data-ttu-id="6b202-432">當工作排入佇列的執行緒集區執行緒使用<xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A>，執行緒集區執行緒的堆疊不會有實際的呼叫端的內容。</span><span class="sxs-lookup"><span data-stu-id="6b202-432">When work is queued on a thread pool thread using <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A>, the stack of the thread pool thread will not have the context of the actual callers.</span></span> <span data-ttu-id="6b202-433">惡意程式碼可能可以利用此選項可避免權限檢查。</span><span class="sxs-lookup"><span data-stu-id="6b202-433">Malicious code might be able exploit this to avoid permission checks.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="6b202-434">呼叫端沒有必要的權限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-434">The caller does not have the required permission.</span>
          </span>
        </exception>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="6b202-435">發生了記憶體不足的狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-435">An out-of-memory condition was encountered.</span>
          </span>
        </exception>
        <exception cref="T:System.OutOfMemoryException">
          <span data-ttu-id="6b202-436">無法將此工作項目排入佇列中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-436">The work item could not be queued.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6b202-437">
            <paramref name="callBack" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-437">
              <paramref name="callBack" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="6b202-438">需要完全信任立即呼叫者。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-438">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="6b202-439">這個成員無法供部分信任或安全性透明程式碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-439">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="UnsafeRegisterWaitForSingleObject">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6b202-440">註冊要等候 <see cref="T:System.Threading.WaitHandle" /> 的委派，但不會將呼叫堆疊傳播至背景工作執行緒。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-440">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, but does not propagate the calling stack to the worker thread.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UnsafeRegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, int millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, int32 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeRegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As Integer, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ UnsafeRegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, int millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="F#" Value="static member UnsafeRegisterWaitForSingleObject : System.Threading.WaitHandle * System.Threading.WaitOrTimerCallback * obj * int * bool -&gt; System.Threading.RegisteredWaitHandle" Usage="System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject (waitObject, callBack, state, millisecondsTimeOutInterval, executeOnlyOnce)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.Int32" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="6b202-441">要註冊的 <see cref="T:System.Threading.WaitHandle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-441">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="6b202-442">使用 <see cref="T:System.Threading.WaitHandle" />，而不要使用 <see cref="T:System.Threading.Mutex" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-442">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="6b202-443">通知 <c>waitObject</c> 參數時要呼叫的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-443">The delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="6b202-444">傳遞至委派的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-444">The object that is passed to the delegate.</span>
          </span>
        </param>
        <param name="millisecondsTimeOutInterval">
          <span data-ttu-id="6b202-445">逾時以毫秒為單位。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-445">The time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="6b202-446">如果 <c>millisecondsTimeOutInterval</c> 參數為 0 (零)，函式會測試物件的狀態並立即傳回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-446">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="6b202-447">如果 <c>millisecondsTimeOutInterval</c> 為 -1，則絕對不會耗用函式的逾時間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-447">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="6b202-448">
            <see langword="true" /> 表示在呼叫委派之後，執行緒將不再等候 <c>waitObject</c> 參數；<see langword="false" /> 表示每當等候作業完成即重設計時器，直到移除註冊等候作業為止。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-448">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6b202-449">使用 32 位元帶正負號的整數表示逾時值 (以毫秒為單位)，藉此註冊要等候 <see cref="T:System.Threading.WaitHandle" /> 的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-449">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, using a 32-bit signed integer for the time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="6b202-450">這個方法不會將呼叫堆疊傳播至背景工作執行緒。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-450">This method does not propagate the calling stack to the worker thread.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6b202-451">可用來取消已註冊之等候作業的 <see cref="T:System.Threading.RegisteredWaitHandle" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-451">The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b202-452">不同於<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法，<xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>並不會傳播至背景工作執行緒的呼叫堆疊。</span><span class="sxs-lookup"><span data-stu-id="6b202-452">Unlike the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method, <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> does not propagate the calling stack to the worker thread.</span></span> <span data-ttu-id="6b202-453">這可讓程式碼會遺失呼叫堆疊，因此提高其安全性權限。</span><span class="sxs-lookup"><span data-stu-id="6b202-453">This allows code to lose the calling stack and thereby to elevate its security privileges.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="6b202-454">使用<xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>不慎無法開啟安全性漏洞。</span><span class="sxs-lookup"><span data-stu-id="6b202-454">Using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> could inadvertently open up a security hole.</span></span> <span data-ttu-id="6b202-455">程式碼存取安全性會根據堆疊中的所有呼叫端的權限的權限檢查。</span><span class="sxs-lookup"><span data-stu-id="6b202-455">Code access security bases its permission checks on the permissions of all the callers on the stack.</span></span> <span data-ttu-id="6b202-456">當工作排入佇列的執行緒集區執行緒使用<xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>，執行緒集區執行緒的堆疊不會有實際的呼叫端的內容。</span><span class="sxs-lookup"><span data-stu-id="6b202-456">When work is queued on a thread pool thread using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, the stack of the thread pool thread will not have the context of the actual callers.</span></span> <span data-ttu-id="6b202-457">惡意程式碼可能可以利用此選項可避免權限檢查。</span><span class="sxs-lookup"><span data-stu-id="6b202-457">Malicious code might be able exploit this to avoid permission checks.</span></span>  
  
 <span data-ttu-id="6b202-458">使用<xref:System.Threading.Mutex>如`waitObject`不提供互斥回呼，因為基礎的 Win32 API 會使用預設`WT_EXECUTEDEFAULT`旗標，因此每個回呼分派另一個執行緒集區執行緒上。</span><span class="sxs-lookup"><span data-stu-id="6b202-458">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span>  
  
 <span data-ttu-id="6b202-459">完畢時使用<xref:System.Threading.RegisteredWaitHandle>這個方法傳回時，請呼叫其<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法，以釋放等候控制代碼的參考。</span><span class="sxs-lookup"><span data-stu-id="6b202-459">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="6b202-460">我們建議一律呼叫<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法，即使您指定`true`如`executeOnlyOnce`。</span><span class="sxs-lookup"><span data-stu-id="6b202-460">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="6b202-461">記憶體回收會更有效率地如果您呼叫<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法，而非根據 已註冊之等候控制代碼的完成項。</span><span class="sxs-lookup"><span data-stu-id="6b202-461">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="6b202-462">
            <paramref name="millisecondsTimeOutInterval" /> 參數小於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-462">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="6b202-463">呼叫端沒有必要的權限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-463">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="6b202-464">需要完全信任立即呼叫者。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-464">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="6b202-465">這個成員無法供部分信任或安全性透明程式碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-465">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="UnsafeRegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, long millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, int64 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeRegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As Long, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ UnsafeRegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, long millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="F#" Value="static member UnsafeRegisterWaitForSingleObject : System.Threading.WaitHandle * System.Threading.WaitOrTimerCallback * obj * int64 * bool -&gt; System.Threading.RegisteredWaitHandle" Usage="System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject (waitObject, callBack, state, millisecondsTimeOutInterval, executeOnlyOnce)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.Int64" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="6b202-466">要註冊的 <see cref="T:System.Threading.WaitHandle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-466">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="6b202-467">使用 <see cref="T:System.Threading.WaitHandle" />，而不要使用 <see cref="T:System.Threading.Mutex" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-467">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="6b202-468">通知 <c>waitObject</c> 參數時要呼叫的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-468">The delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="6b202-469">傳遞至委派的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-469">The object that is passed to the delegate.</span>
          </span>
        </param>
        <param name="millisecondsTimeOutInterval">
          <span data-ttu-id="6b202-470">逾時以毫秒為單位。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-470">The time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="6b202-471">如果 <c>millisecondsTimeOutInterval</c> 參數為 0 (零)，函式會測試物件的狀態並立即傳回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-471">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="6b202-472">如果 <c>millisecondsTimeOutInterval</c> 為 -1，則絕對不會耗用函式的逾時間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-472">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="6b202-473">
            <see langword="true" /> 表示在呼叫委派之後，執行緒將不再等候 <c>waitObject</c> 參數；<see langword="false" /> 表示每當等候作業完成即重設計時器，直到移除註冊等候作業為止。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-473">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6b202-474">指定 64 位元帶正負號的整數表示逾時值 (以毫秒為單位)，藉此註冊要等候 <see cref="T:System.Threading.WaitHandle" /> 的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-474">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 64-bit signed integer for the time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="6b202-475">這個方法不會將呼叫堆疊傳播至背景工作執行緒。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-475">This method does not propagate the calling stack to the worker thread.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6b202-476">可用來取消已註冊之等候作業的 <see cref="T:System.Threading.RegisteredWaitHandle" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-476">The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b202-477">不同於<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法，<xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>並不會傳播至背景工作執行緒的呼叫堆疊。</span><span class="sxs-lookup"><span data-stu-id="6b202-477">Unlike the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method, <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> does not propagate the calling stack to the worker thread.</span></span> <span data-ttu-id="6b202-478">這可讓程式碼會遺失呼叫堆疊，因此提高其安全性權限。</span><span class="sxs-lookup"><span data-stu-id="6b202-478">This allows code to lose the calling stack and thereby to elevate its security privileges.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="6b202-479">使用<xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>不慎無法開啟安全性漏洞。</span><span class="sxs-lookup"><span data-stu-id="6b202-479">Using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> could inadvertently open up a security hole.</span></span> <span data-ttu-id="6b202-480">程式碼存取安全性會根據堆疊中的所有呼叫端的權限的權限檢查。</span><span class="sxs-lookup"><span data-stu-id="6b202-480">Code access security bases its permission checks on the permissions of all the callers on the stack.</span></span> <span data-ttu-id="6b202-481">當工作排入佇列的執行緒集區執行緒使用<xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>，執行緒集區執行緒的堆疊不會有實際的呼叫端的內容。</span><span class="sxs-lookup"><span data-stu-id="6b202-481">When work is queued on a thread pool thread using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, the stack of the thread pool thread will not have the context of the actual callers.</span></span> <span data-ttu-id="6b202-482">惡意程式碼可能可以利用此選項可避免權限檢查。</span><span class="sxs-lookup"><span data-stu-id="6b202-482">Malicious code might be able exploit this to avoid permission checks.</span></span>  
  
 <span data-ttu-id="6b202-483">使用<xref:System.Threading.Mutex>如`waitObject`不提供互斥回呼，因為基礎的 Win32 API 會使用預設`WT_EXECUTEDEFAULT`旗標，因此每個回呼分派另一個執行緒集區執行緒上。</span><span class="sxs-lookup"><span data-stu-id="6b202-483">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span>  
  
 <span data-ttu-id="6b202-484">完畢時使用<xref:System.Threading.RegisteredWaitHandle>這個方法傳回時，請呼叫其<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法，以釋放等候控制代碼的參考。</span><span class="sxs-lookup"><span data-stu-id="6b202-484">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="6b202-485">我們建議一律呼叫<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法，即使您指定`true`如`executeOnlyOnce`。</span><span class="sxs-lookup"><span data-stu-id="6b202-485">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="6b202-486">記憶體回收會更有效率地如果您呼叫<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法，而非根據 已註冊之等候控制代碼的完成項。</span><span class="sxs-lookup"><span data-stu-id="6b202-486">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="6b202-487">
            <paramref name="millisecondsTimeOutInterval" /> 參數小於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-487">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="6b202-488">呼叫端沒有必要的權限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-488">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="6b202-489">需要完全信任立即呼叫者。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-489">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="6b202-490">這個成員無法供部分信任或安全性透明程式碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-490">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="UnsafeRegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, TimeSpan timeout, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, valuetype System.TimeSpan timeout, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeRegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, timeout As TimeSpan, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ UnsafeRegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, TimeSpan timeout, bool executeOnlyOnce);" />
      <MemberSignature Language="F#" Value="static member UnsafeRegisterWaitForSingleObject : System.Threading.WaitHandle * System.Threading.WaitOrTimerCallback * obj * TimeSpan * bool -&gt; System.Threading.RegisteredWaitHandle" Usage="System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject (waitObject, callBack, state, timeout, executeOnlyOnce)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="6b202-491">要註冊的 <see cref="T:System.Threading.WaitHandle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-491">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="6b202-492">使用 <see cref="T:System.Threading.WaitHandle" />，而不要使用 <see cref="T:System.Threading.Mutex" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-492">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="6b202-493">通知 <c>waitObject</c> 參數時要呼叫的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-493">The delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="6b202-494">傳遞至委派的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-494">The object that is passed to the delegate.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="6b202-495">以 <see cref="T:System.TimeSpan" /> 表示的逾時值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-495">The time-out represented by a <see cref="T:System.TimeSpan" />.</span>
          </span>
          <span data-ttu-id="6b202-496">如果 <c>timeout</c> 為 0 (零)，則函式會測試物件的狀態並立即傳回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-496">If <c>timeout</c> is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="6b202-497">如果 <c>timeout</c> 為 -1，則絕對不會耗用函式的逾時間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-497">If <c>timeout</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="6b202-498">
            <see langword="true" /> 表示在呼叫委派之後，執行緒將不再等候 <c>waitObject</c> 參數；<see langword="false" /> 表示每當等候作業完成即重設計時器，直到移除註冊等候作業為止。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-498">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6b202-499">指定 <see cref="T:System.TimeSpan" /> 值表示逾時值，藉此註冊要等候 <see cref="T:System.Threading.WaitHandle" /> 的委派。這個方法不會將呼叫堆疊傳播至背景工作執行緒。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-499">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a <see cref="T:System.TimeSpan" /> value for the time-out. This method does not propagate the calling stack to the worker thread.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6b202-500">可用來取消已註冊之等候作業的 <see cref="T:System.Threading.RegisteredWaitHandle" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-500">The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b202-501">不同於<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法，<xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>並不會傳播至背景工作執行緒的呼叫堆疊。</span><span class="sxs-lookup"><span data-stu-id="6b202-501">Unlike the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method, <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> does not propagate the calling stack to the worker thread.</span></span> <span data-ttu-id="6b202-502">這可讓程式碼會遺失呼叫堆疊，因此提高其安全性權限。</span><span class="sxs-lookup"><span data-stu-id="6b202-502">This allows code to lose the calling stack and thereby to elevate its security privileges.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="6b202-503">使用<xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>不慎無法開啟安全性漏洞。</span><span class="sxs-lookup"><span data-stu-id="6b202-503">Using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> could inadvertently open up a security hole.</span></span> <span data-ttu-id="6b202-504">程式碼存取安全性會根據堆疊中的所有呼叫端的權限的權限檢查。</span><span class="sxs-lookup"><span data-stu-id="6b202-504">Code access security bases its permission checks on the permissions of all the callers on the stack.</span></span> <span data-ttu-id="6b202-505">當工作排入佇列的執行緒集區執行緒使用<xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>，執行緒集區執行緒的堆疊不會有實際的呼叫端的內容。</span><span class="sxs-lookup"><span data-stu-id="6b202-505">When work is queued on a thread pool thread using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, the stack of the thread pool thread will not have the context of the actual callers.</span></span> <span data-ttu-id="6b202-506">惡意程式碼可能可以利用此選項可避免權限檢查。</span><span class="sxs-lookup"><span data-stu-id="6b202-506">Malicious code might be able exploit this to avoid permission checks.</span></span>  
  
 <span data-ttu-id="6b202-507">使用<xref:System.Threading.Mutex>如`waitObject`不提供互斥回呼，因為基礎的 Win32 API 會使用預設`WT_EXECUTEDEFAULT`旗標，因此每個回呼分派另一個執行緒集區執行緒上。</span><span class="sxs-lookup"><span data-stu-id="6b202-507">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span>  
  
 <span data-ttu-id="6b202-508">完畢時使用<xref:System.Threading.RegisteredWaitHandle>這個方法傳回時，請呼叫其<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法，以釋放等候控制代碼的參考。</span><span class="sxs-lookup"><span data-stu-id="6b202-508">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="6b202-509">我們建議一律呼叫<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法，即使您指定`true`如`executeOnlyOnce`。</span><span class="sxs-lookup"><span data-stu-id="6b202-509">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="6b202-510">記憶體回收會更有效率地如果您呼叫<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法，而非根據 已註冊之等候控制代碼的完成項。</span><span class="sxs-lookup"><span data-stu-id="6b202-510">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="6b202-511">
            <paramref name="timeout" /> 參數小於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-511">The <paramref name="timeout" /> parameter is less than -1.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="6b202-512">
            <paramref name="timeout" /> 參數大於 <see cref="F:System.Int32.MaxValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-512">The <paramref name="timeout" /> parameter is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="6b202-513">呼叫端沒有必要的權限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-513">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="6b202-514">需要完全信任立即呼叫者。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-514">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="6b202-515">這個成員無法供部分信任或安全性透明程式碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-515">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="UnsafeRegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, uint millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, unsigned int32 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeRegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As UInteger, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ UnsafeRegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, System::UInt32 millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="F#" Value="static member UnsafeRegisterWaitForSingleObject : System.Threading.WaitHandle * System.Threading.WaitOrTimerCallback * obj * uint32 * bool -&gt; System.Threading.RegisteredWaitHandle" Usage="System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject (waitObject, callBack, state, millisecondsTimeOutInterval, executeOnlyOnce)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.UInt32" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="6b202-516">要註冊的 <see cref="T:System.Threading.WaitHandle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-516">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="6b202-517">使用 <see cref="T:System.Threading.WaitHandle" />，而不要使用 <see cref="T:System.Threading.Mutex" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-517">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="6b202-518">通知 <c>waitObject</c> 參數時要呼叫的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-518">The delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="6b202-519">傳遞至委派的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-519">The object that is passed to the delegate.</span>
          </span>
        </param>
        <param name="millisecondsTimeOutInterval">
          <span data-ttu-id="6b202-520">逾時以毫秒為單位。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-520">The time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="6b202-521">如果 <c>millisecondsTimeOutInterval</c> 參數為 0 (零)，函式會測試物件的狀態並立即傳回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-521">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="6b202-522">如果 <c>millisecondsTimeOutInterval</c> 為 -1，則絕對不會耗用函式的逾時間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-522">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="6b202-523">
            <see langword="true" /> 表示在呼叫委派之後，執行緒將不再等候 <c>waitObject</c> 參數；<see langword="false" /> 表示每當等候作業完成即重設計時器，直到移除註冊等候作業為止。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-523">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6b202-524">指定 32 位元帶正負號的整數表示逾時值 (以毫秒為單位)，藉此註冊要等候 <see cref="T:System.Threading.WaitHandle" /> 的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-524">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 32-bit unsigned integer for the time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="6b202-525">這個方法不會將呼叫堆疊傳播至背景工作執行緒。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-525">This method does not propagate the calling stack to the worker thread.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6b202-526">可用來取消已註冊之等候作業的 <see cref="T:System.Threading.RegisteredWaitHandle" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-526">The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b202-527">不同於<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法，<xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>並不會傳播至背景工作執行緒的呼叫堆疊。</span><span class="sxs-lookup"><span data-stu-id="6b202-527">Unlike the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method, <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> does not propagate the calling stack to the worker thread.</span></span> <span data-ttu-id="6b202-528">這可讓程式碼會遺失呼叫堆疊，因此提高其安全性權限。</span><span class="sxs-lookup"><span data-stu-id="6b202-528">This allows code to lose the calling stack and thereby to elevate its security privileges.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="6b202-529">使用<xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>不慎無法開啟安全性漏洞。</span><span class="sxs-lookup"><span data-stu-id="6b202-529">Using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> could inadvertently open up a security hole.</span></span> <span data-ttu-id="6b202-530">程式碼存取安全性會根據堆疊中的所有呼叫端的權限的權限檢查。</span><span class="sxs-lookup"><span data-stu-id="6b202-530">Code access security bases its permission checks on the permissions of all the callers on the stack.</span></span> <span data-ttu-id="6b202-531">當工作排入佇列的執行緒集區執行緒使用<xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>，執行緒集區執行緒的堆疊不會有實際的呼叫端的內容。</span><span class="sxs-lookup"><span data-stu-id="6b202-531">When work is queued on a thread pool thread using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, the stack of the thread pool thread will not have the context of the actual callers.</span></span> <span data-ttu-id="6b202-532">惡意程式碼可能可以利用此選項可避免權限檢查。</span><span class="sxs-lookup"><span data-stu-id="6b202-532">Malicious code might be able exploit this to avoid permission checks.</span></span>  
  
 <span data-ttu-id="6b202-533">使用<xref:System.Threading.Mutex>如`waitObject`不提供互斥回呼，因為基礎的 Win32 API 會使用預設`WT_EXECUTEDEFAULT`旗標，因此每個回呼分派另一個執行緒集區執行緒上。</span><span class="sxs-lookup"><span data-stu-id="6b202-533">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span>  
  
 <span data-ttu-id="6b202-534">完畢時使用<xref:System.Threading.RegisteredWaitHandle>這個方法傳回時，請呼叫其<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法，以釋放等候控制代碼的參考。</span><span class="sxs-lookup"><span data-stu-id="6b202-534">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="6b202-535">我們建議一律呼叫<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法，即使您指定`true`如`executeOnlyOnce`。</span><span class="sxs-lookup"><span data-stu-id="6b202-535">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="6b202-536">記憶體回收會更有效率地如果您呼叫<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法，而非根據 已註冊之等候控制代碼的完成項。</span><span class="sxs-lookup"><span data-stu-id="6b202-536">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="6b202-537">呼叫端沒有必要的權限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-537">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="6b202-538">需要完全信任立即呼叫者。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-538">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="6b202-539">這個成員無法供部分信任或安全性透明程式碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b202-539">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
  </Members>
</Type>