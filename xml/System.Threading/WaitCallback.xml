<Type Name="WaitCallback" FullName="System.Threading.WaitCallback">
  <TypeSignature Language="C#" Value="public delegate void WaitCallback(object state);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed WaitCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.WaitCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub WaitCallback(state As Object)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void WaitCallback(System::Object ^ state);" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.ThreadPool</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="state" Type="System.Object" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="state"><span data-ttu-id="f3363-101">物件，它包含回呼方法所使用的資訊。</span><span class="sxs-lookup"><span data-stu-id="f3363-101">An object containing information to be used by the callback method.</span></span></param>
    <summary><span data-ttu-id="f3363-102">表示執行緒集區執行緒執行的回呼方法。</span><span class="sxs-lookup"><span data-stu-id="f3363-102">Represents a callback method to be executed by a thread pool thread.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f3363-103"><xref:System.Threading.WaitCallback> 代表您想要在上執行的回呼方法<xref:System.Threading.ThreadPool>執行緒。</span><span class="sxs-lookup"><span data-stu-id="f3363-103"><xref:System.Threading.WaitCallback> represents a callback method that you want to execute on a <xref:System.Threading.ThreadPool> thread.</span></span> <span data-ttu-id="f3363-104">藉由傳遞至回呼方法建立委派<xref:System.Threading.WaitCallback>建構函式。</span><span class="sxs-lookup"><span data-stu-id="f3363-104">Create the delegate by passing your callback method to the <xref:System.Threading.WaitCallback> constructor.</span></span> <span data-ttu-id="f3363-105">您的方法必須有簽章如下所示。</span><span class="sxs-lookup"><span data-stu-id="f3363-105">Your method must have the signature shown here.</span></span>  
  
 <span data-ttu-id="f3363-106">藉由傳遞佇列工作，來執行<xref:System.Threading.WaitCallback>委派給<xref:System.Threading.ThreadPool.QueueUserWorkItem%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="f3363-106">Queue your task for execution by passing the <xref:System.Threading.WaitCallback> delegate to <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="f3363-107">使用執行緒集區執行緒時執行回呼方法。</span><span class="sxs-lookup"><span data-stu-id="f3363-107">Your callback method executes when a thread pool thread becomes available.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f3363-108">Visual Basic 使用者可以省略<xref:System.Threading.WaitCallback>建構函式，並只是使用`AddressOf`運算子時傳遞至回呼方法<xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>。</span><span class="sxs-lookup"><span data-stu-id="f3363-108">Visual Basic users can omit the <xref:System.Threading.WaitCallback> constructor, and simply use the `AddressOf` operator when passing the callback method to <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>.</span></span> <span data-ttu-id="f3363-109">Visual Basic 會自動呼叫正確的委派建構函式。</span><span class="sxs-lookup"><span data-stu-id="f3363-109">Visual Basic automatically calls the correct delegate constructor.</span></span>  
  
 <span data-ttu-id="f3363-110">如果您想要將資訊傳遞至回呼方法，建立包含必要資訊的物件，並將它傳遞給<xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>時您排入佇列工作，來執行。</span><span class="sxs-lookup"><span data-stu-id="f3363-110">If you want to pass information to your callback method, create an object that contains the necessary information and pass it to <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> when you queue your task for execution.</span></span> <span data-ttu-id="f3363-111">執行回呼方法時，每次`state`參數包含此物件。</span><span class="sxs-lookup"><span data-stu-id="f3363-111">Each time your callback method executes, the `state` parameter contains this object.</span></span>  
  
 <span data-ttu-id="f3363-112">如需使用回呼來同步處理執行緒集區執行緒的詳細資訊，請參閱[Managed 執行緒集區](~/docs/standard/threading/the-managed-thread-pool.md)。</span><span class="sxs-lookup"><span data-stu-id="f3363-112">For more information about using callbacks to synchronize thread pool threads, see [The Managed Thread Pool](~/docs/standard/threading/the-managed-thread-pool.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f3363-113">本章節包含兩個範例。</span><span class="sxs-lookup"><span data-stu-id="f3363-113">This section contains two examples.</span></span> <span data-ttu-id="f3363-114">第一個範例示範如何您可以在此佇列的執行緒集區執行簡單的工作。</span><span class="sxs-lookup"><span data-stu-id="f3363-114">The first example demonstrates how you can queue a simple task for execution by the thread pool.</span></span>  
  
 <span data-ttu-id="f3363-115">第二個範例示範如何工作排入佇列，並將資訊傳遞給它。</span><span class="sxs-lookup"><span data-stu-id="f3363-115">The second example demonstrates how you can queue a task and pass information to it.</span></span>  
  
 <span data-ttu-id="f3363-116">**範例 1**</span><span class="sxs-lookup"><span data-stu-id="f3363-116">**Example 1**</span></span>  
  
 <span data-ttu-id="f3363-117">這個範例示範如何使用<xref:System.Threading.WaitCallback>委派至執行緒集區執行工作排入佇列。</span><span class="sxs-lookup"><span data-stu-id="f3363-117">This example shows how to use the <xref:System.Threading.WaitCallback> delegate to queue a task for execution by the thread pool.</span></span> <span data-ttu-id="f3363-118">此程式碼範例會使用<xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType>方法多載來工作排入佇列，這由<xref:System.Threading.WaitCallback>包裝`ThreadProc`方法，才能執行執行緒時。</span><span class="sxs-lookup"><span data-stu-id="f3363-118">The code example uses the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> method overload to queue a task, which is represented by a <xref:System.Threading.WaitCallback> that wraps the `ThreadProc` method, to execute when a thread becomes available.</span></span> <span data-ttu-id="f3363-119">沒有工作資訊提供給這個多載。</span><span class="sxs-lookup"><span data-stu-id="f3363-119">No task information is supplied with this overload.</span></span> <span data-ttu-id="f3363-120">因此，若要使用的資訊`ThreadProc`方法僅限於方法所屬的物件。</span><span class="sxs-lookup"><span data-stu-id="f3363-120">Therefore, the information that is available to the `ThreadProc` method is limited to the object the method belongs to.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/VB/source.vb#1)]  
  
 <span data-ttu-id="f3363-121">**範例 2**</span><span class="sxs-lookup"><span data-stu-id="f3363-121">**Example 2**</span></span>  
  
 <span data-ttu-id="f3363-122">這個範例示範如何建立包含工作資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="f3363-122">This example shows how to create an object that contains task information.</span></span> <span data-ttu-id="f3363-123">它也會示範如何將該物件傳遞至為佇列中等待執行的工作中，執行緒集區。</span><span class="sxs-lookup"><span data-stu-id="f3363-123">It also demonstrates how to pass that object to a task that is queued for execution by the thread pool.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem1/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool QueueUserWorkItem1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem1/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool QueueUserWorkItem1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem1/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.ThreadPool" />
  </Docs>
</Type>