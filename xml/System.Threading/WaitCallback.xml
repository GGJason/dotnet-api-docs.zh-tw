<Type Name="WaitCallback" FullName="System.Threading.WaitCallback">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a38353245326738dcba09700a654648f37402fa4" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30527242" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void WaitCallback(object state);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed WaitCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.WaitCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub WaitCallback(state As Object)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void WaitCallback(System::Object ^ state);" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.ThreadPool</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="state" Type="System.Object" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="state">物件，它包含回呼方法所使用的資訊。</param>
    <summary>表示執行緒集區執行緒執行的回呼方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.WaitCallback> 代表您想要在上執行的回呼方法<xref:System.Threading.ThreadPool>執行緒。 藉由傳遞至回呼方法建立委派<xref:System.Threading.WaitCallback>建構函式。 您的方法必須有簽章如下所示。  
  
 藉由傳遞佇列工作，來執行<xref:System.Threading.WaitCallback>委派給<xref:System.Threading.ThreadPool.QueueUserWorkItem%2A?displayProperty=nameWithType>。 使用執行緒集區執行緒時執行回呼方法。  
  
> [!NOTE]
>  Visual Basic 使用者可以省略<xref:System.Threading.WaitCallback>建構函式，並只是使用`AddressOf`運算子時傳遞至回呼方法<xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>。 Visual Basic 會自動呼叫正確的委派建構函式。  
  
 如果您想要將資訊傳遞至回呼方法，建立包含必要資訊的物件，並將它傳遞給<xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>時您排入佇列工作，來執行。 執行回呼方法時，每次`state`參數包含此物件。  
  
 如需使用回呼來同步處理執行緒集區執行緒的詳細資訊，請參閱[Managed 執行緒集區](~/docs/standard/threading/the-managed-thread-pool.md)。  
  
   
  
## Examples  
 本章節包含兩個範例。 第一個範例示範如何您可以在此佇列的執行緒集區執行簡單的工作。  
  
 第二個範例示範如何工作排入佇列，並將資訊傳遞給它。  
  
 **範例 1**  
  
 這個範例示範如何使用<xref:System.Threading.WaitCallback>委派至執行緒集區執行工作排入佇列。 此程式碼範例會使用<xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType>方法多載來工作排入佇列，這由<xref:System.Threading.WaitCallback>包裝`ThreadProc`方法，才能執行執行緒時。 沒有工作資訊提供給這個多載。 因此，若要使用的資訊`ThreadProc`方法僅限於方法所屬的物件。  
  
 [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/VB/source.vb#1)]  
  
 **範例 2**  
  
 這個範例示範如何建立包含工作資訊的物件。 它也會示範如何將該物件傳遞至為佇列中等待執行的工作中，執行緒集區。  
  
 [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem1/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool QueueUserWorkItem1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem1/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool QueueUserWorkItem1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem1/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.ThreadPool" />
  </Docs>
</Type>