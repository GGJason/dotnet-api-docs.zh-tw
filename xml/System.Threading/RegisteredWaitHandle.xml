<Type Name="RegisteredWaitHandle" FullName="System.Threading.RegisteredWaitHandle">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8451b225bf30ccbcecb984cba17331f678e91744" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37754598" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class RegisteredWaitHandle : MarshalByRefObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit RegisteredWaitHandle extends System.MarshalByRefObject" />
  <TypeSignature Language="DocId" Value="T:System.Threading.RegisteredWaitHandle" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class RegisteredWaitHandle&#xA;Inherits MarshalByRefObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class RegisteredWaitHandle sealed : MarshalByRefObject" />
  <TypeSignature Language="F#" Value="type RegisteredWaitHandle = class&#xA;    inherit MarshalByRefObject" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.ThreadPool</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="e20c0-101">代表呼叫 <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" /> 時已經登錄的控制代碼。</span>
      <span class="sxs-lookup">
        <span data-stu-id="e20c0-101">Represents a handle that has been registered when calling <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />.</span>
      </span>
      <span data-ttu-id="e20c0-102">此類別無法被繼承。</span>
      <span class="sxs-lookup">
        <span data-stu-id="e20c0-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e20c0-103">下列範例示範如何使用<xref:System.Threading.RegisteredWaitHandle>判斷為什麼要呼叫的回呼方法，以及如何取消註冊的工作，如果回呼就會發生等候控制代碼發出訊號。</span><span class="sxs-lookup"><span data-stu-id="e20c0-103">The following example shows how to use a <xref:System.Threading.RegisteredWaitHandle> to determine why a callback method is called, and how to unregister a task if the callback occurred because the wait handle was signaled.</span></span>  
  
 <span data-ttu-id="e20c0-104">此範例也示範如何使用<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法來指定的等候控制代碼會收到信號時，執行指定的回呼方法。</span><span class="sxs-lookup"><span data-stu-id="e20c0-104">The example also shows how to use the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method to execute a specified callback method when a specified wait handle is signaled.</span></span> <span data-ttu-id="e20c0-105">在此範例中，是回呼方法`WaitProc`，並等候控制代碼是<xref:System.Threading.AutoResetEvent>。</span><span class="sxs-lookup"><span data-stu-id="e20c0-105">In this example, the callback method is `WaitProc`, and the wait handle is an <xref:System.Threading.AutoResetEvent>.</span></span>  
  
 <span data-ttu-id="e20c0-106">此範例會定義`TaskInfo`類別來保存執行時傳遞至回呼的資訊。</span><span class="sxs-lookup"><span data-stu-id="e20c0-106">The example defines a `TaskInfo` class to hold the information that is passed to the callback when it executes.</span></span> <span data-ttu-id="e20c0-107">此範例會建立`TaskInfo`物件，並將其指派一些字串資料。</span><span class="sxs-lookup"><span data-stu-id="e20c0-107">The example creates a `TaskInfo` object and assigns it some string data.</span></span> <span data-ttu-id="e20c0-108"><xref:System.Threading.RegisteredWaitHandle>傳回的<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法指派給`Handle`欄位`TaskInfo`物件，使回呼方法可以存取<xref:System.Threading.RegisteredWaitHandle>。</span><span class="sxs-lookup"><span data-stu-id="e20c0-108">The <xref:System.Threading.RegisteredWaitHandle> that is returned by the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method is assigned to the `Handle` field of the `TaskInfo` object so that the callback method has access to the <xref:System.Threading.RegisteredWaitHandle>.</span></span>  
  
 <span data-ttu-id="e20c0-109">除了指定`TaskInfo`做為要傳遞至回呼方法的呼叫物件<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法會指定<xref:System.Threading.AutoResetEvent>等候工作，<xref:System.Threading.WaitOrTimerCallback>委派，表示`WaitProc`回呼方法一秒的逾時間隔，以及多個回呼。</span><span class="sxs-lookup"><span data-stu-id="e20c0-109">In addition to specifying `TaskInfo` as the object to pass to the callback method, the call to the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method specifies the <xref:System.Threading.AutoResetEvent> that the task will wait for, a <xref:System.Threading.WaitOrTimerCallback> delegate that represents the `WaitProc` callback method, a one second time-out interval, and multiple callbacks.</span></span>  
  
 <span data-ttu-id="e20c0-110">當主執行緒發出信號<xref:System.Threading.AutoResetEvent>藉由呼叫其<xref:System.Threading.EventWaitHandle.Set%2A>方法，<xref:System.Threading.WaitOrTimerCallback>叫用委派。</span><span class="sxs-lookup"><span data-stu-id="e20c0-110">When the main thread signals the <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, the <xref:System.Threading.WaitOrTimerCallback> delegate is invoked.</span></span> <span data-ttu-id="e20c0-111">`WaitProc`方法會測試<xref:System.Threading.RegisteredWaitHandle>來判斷是否發生逾時。</span><span class="sxs-lookup"><span data-stu-id="e20c0-111">The `WaitProc` method tests <xref:System.Threading.RegisteredWaitHandle> to determine whether a time-out occurred.</span></span> <span data-ttu-id="e20c0-112">如果等候控制代碼發出訊號，因為叫用回呼`WaitProc`方法會移除註冊<xref:System.Threading.RegisteredWaitHandle>，停止其他回呼。</span><span class="sxs-lookup"><span data-stu-id="e20c0-112">If the callback was invoked because the wait handle was signaled, the `WaitProc` method unregisters the <xref:System.Threading.RegisteredWaitHandle>, stopping additional callbacks.</span></span> <span data-ttu-id="e20c0-113">在逾時，工作會繼續等候。</span><span class="sxs-lookup"><span data-stu-id="e20c0-113">In the case of a time-out, the task continues to wait.</span></span> <span data-ttu-id="e20c0-114">`WaitProc`方法結束列印至主控台的訊息。</span><span class="sxs-lookup"><span data-stu-id="e20c0-114">The `WaitProc` method ends by printing a message to the console.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="e20c0-115">此型別具備執行緒安全。</span>
      <span class="sxs-lookup">
        <span data-stu-id="e20c0-115">This type is thread safe.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~RegisteredWaitHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.RegisteredWaitHandle.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!RegisteredWaitHandle ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="registeredWaitHandle.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unregister">
      <MemberSignature Language="C#" Value="public bool Unregister (System.Threading.WaitHandle waitObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Unregister(class System.Threading.WaitHandle waitObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function Unregister (waitObject As WaitHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Unregister(System::Threading::WaitHandle ^ waitObject);" />
      <MemberSignature Language="F#" Value="member this.Unregister : System.Threading.WaitHandle -&gt; bool" Usage="registeredWaitHandle.Unregister waitObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="e20c0-116">要通知的 <see cref="T:System.Threading.WaitHandle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e20c0-116">The <see cref="T:System.Threading.WaitHandle" /> to be signaled.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e20c0-117">將 <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" /> 方法所發出之已登錄等候作業取消。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e20c0-117">Cancels a registered wait operation issued by the <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e20c0-118">如果函式成功，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e20c0-118">
              <see langword="true" /> if the function succeeds; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e20c0-119">如果`waitObject`未指定，只有當收到訊號<xref:System.Threading.RegisteredWaitHandle>已成功取消註冊。</span><span class="sxs-lookup"><span data-stu-id="e20c0-119">If `waitObject` is specified, it is signaled only if the <xref:System.Threading.RegisteredWaitHandle> is successfully unregistered.</span></span> <span data-ttu-id="e20c0-120">如果正在進行中的回呼方法時<xref:System.Threading.RegisteredWaitHandle.Unregister%2A>執行，`waitObject`回呼方法完成之前未收到信號。</span><span class="sxs-lookup"><span data-stu-id="e20c0-120">If a callback method is in progress when <xref:System.Threading.RegisteredWaitHandle.Unregister%2A> executes, `waitObject` is not signaled until the callback method completes.</span></span> <span data-ttu-id="e20c0-121">特別是，如果回呼方法會執行<xref:System.Threading.RegisteredWaitHandle.Unregister%2A>，`waitObject`該回呼方法完成之前未收到信號。</span><span class="sxs-lookup"><span data-stu-id="e20c0-121">In particular, if a callback method executes <xref:System.Threading.RegisteredWaitHandle.Unregister%2A>, `waitObject` is not signaled until that callback method completes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e20c0-122">下列範例示範如何使用<xref:System.Threading.RegisteredWaitHandle.Unregister%2A>方法來取消註冊的工作，如果回呼就會發生等候控制代碼發出訊號。</span><span class="sxs-lookup"><span data-stu-id="e20c0-122">The following example shows how to use the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A> method to unregister a task if a callback occurred because the wait handle was signaled.</span></span>  
  
 <span data-ttu-id="e20c0-123">此範例也示範如何使用<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法來指定的等候控制代碼會收到信號時，執行指定的回呼方法。</span><span class="sxs-lookup"><span data-stu-id="e20c0-123">The example also shows how to use the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method to execute a specified callback method when a specified wait handle is signaled.</span></span> <span data-ttu-id="e20c0-124">在此範例中，是回呼方法`WaitProc`，並等候控制代碼是<xref:System.Threading.AutoResetEvent>。</span><span class="sxs-lookup"><span data-stu-id="e20c0-124">In this example, the callback method is `WaitProc`, and the wait handle is an <xref:System.Threading.AutoResetEvent>.</span></span>  
  
 <span data-ttu-id="e20c0-125">此範例會定義`TaskInfo`類別來保存執行時傳遞至回呼的資訊。</span><span class="sxs-lookup"><span data-stu-id="e20c0-125">The example defines a `TaskInfo` class to hold the information that is passed to the callback when it executes.</span></span> <span data-ttu-id="e20c0-126">此範例會建立`TaskInfo`物件，並將其指派一些字串資料。</span><span class="sxs-lookup"><span data-stu-id="e20c0-126">The example creates a `TaskInfo` object and assigns it some string data.</span></span> <span data-ttu-id="e20c0-127"><xref:System.Threading.RegisteredWaitHandle>傳回的<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法指派給`Handle`欄位`TaskInfo`物件，使回呼方法可以存取<xref:System.Threading.RegisteredWaitHandle>。</span><span class="sxs-lookup"><span data-stu-id="e20c0-127">The <xref:System.Threading.RegisteredWaitHandle> that is returned by the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method is assigned to the `Handle` field of the `TaskInfo` object so that the callback method has access to the <xref:System.Threading.RegisteredWaitHandle>.</span></span>  
  
 <span data-ttu-id="e20c0-128">除了指定`TaskInfo`做為要傳遞至回呼方法的呼叫物件<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法會指定<xref:System.Threading.AutoResetEvent>等候工作，<xref:System.Threading.WaitOrTimerCallback>委派，表示`WaitProc`回呼方法一秒的逾時間隔，以及多個回呼。</span><span class="sxs-lookup"><span data-stu-id="e20c0-128">In addition to specifying `TaskInfo` as the object to pass to the callback method, the call to the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method specifies the <xref:System.Threading.AutoResetEvent> that the task will wait for, a <xref:System.Threading.WaitOrTimerCallback> delegate that represents the `WaitProc` callback method, a one second time-out interval, and multiple callbacks.</span></span>  
  
 <span data-ttu-id="e20c0-129">當主執行緒發出信號<xref:System.Threading.AutoResetEvent>藉由呼叫其<xref:System.Threading.EventWaitHandle.Set%2A>方法，<xref:System.Threading.WaitOrTimerCallback>叫用委派。</span><span class="sxs-lookup"><span data-stu-id="e20c0-129">When the main thread signals the <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, the <xref:System.Threading.WaitOrTimerCallback> delegate is invoked.</span></span> <span data-ttu-id="e20c0-130">`WaitProc`方法會測試<xref:System.Threading.RegisteredWaitHandle>來判斷是否發生逾時。</span><span class="sxs-lookup"><span data-stu-id="e20c0-130">The `WaitProc` method tests <xref:System.Threading.RegisteredWaitHandle> to determine whether a time-out occurred.</span></span> <span data-ttu-id="e20c0-131">如果等候控制代碼發出訊號，因為叫用回呼`WaitProc`方法會移除註冊<xref:System.Threading.RegisteredWaitHandle>，停止其他回呼。</span><span class="sxs-lookup"><span data-stu-id="e20c0-131">If the callback was invoked because the wait handle was signaled, the `WaitProc` method unregisters the <xref:System.Threading.RegisteredWaitHandle>, stopping additional callbacks.</span></span> <span data-ttu-id="e20c0-132">在逾時，工作會繼續等候。</span><span class="sxs-lookup"><span data-stu-id="e20c0-132">In the case of a time-out, the task continues to wait.</span></span> <span data-ttu-id="e20c0-133">`WaitProc`方法結束列印至主控台的訊息。</span><span class="sxs-lookup"><span data-stu-id="e20c0-133">The `WaitProc` method ends by printing a message to the console.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>