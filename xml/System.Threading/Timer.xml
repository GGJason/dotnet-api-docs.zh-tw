<Type Name="Timer" FullName="System.Threading.Timer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="49a9b90c29fb506f13fbc9ad9b14c101b5c74ccf" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="65014221" /></Metadata><TypeSignature Language="C#" Value="public sealed class Timer : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Timer extends System.MarshalByRefObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Timer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Timer&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer sealed : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="F#" Value="type Timer = class&#xA;    inherit MarshalByRefObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Timer</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;dotnet-uwp-10.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供一套機制，可於指定間隔在執行緒集區執行緒上執行方法。 這個類別無法被繼承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Threading.TimerCallback>來指定您想要的方法委派<xref:System.Threading.Timer>來執行。 簽章<xref:System.Threading.TimerCallback>委派：  
  
```csharp  
void TimerCallback(Object state)  
```  
  
```cpp  
void TimerCallback(Object state)  
```  
  
```vb  
Sub TimerCallback(state As Object)  
```  
  
 當計時器建構，而且無法變更，會指定計時器委派。 此方法不會建立計時器; 在執行緒上執行它會執行上<xref:System.Threading.ThreadPool>系統所提供的執行緒。  
  
> [!TIP]
> .NET 包含四個類別，名為`Timer`，每個的提供不同的功能：  
>
> - <xref:System.Timers.Timer?displayProperty=nameWithType>這會引發事件，並在其中執行程式碼或定期的更多的事件接收。 此類別被為了做為以伺服器為基礎，或在多執行緒環境; 中的服務元件它沒有使用者介面，並在執行階段看不到。
> - <xref:System.Threading.Timer?displayProperty=nameWithType>它就會在固定間隔在執行緒集區執行緒上執行的單一回呼方法。 計時器會具現化，而且無法加以變更，被定義回呼方法。 例如<xref:System.Timers.Timer?displayProperty=nameWithType>類別，這個類別是做為伺服器或服務的元件，在多執行緒環境中用於; 它沒有使用者介面，並在執行階段看不到。
> - <xref:System.Windows.Forms.Timer?displayProperty=nameWithType> (僅限.NET framework)，Windows Forms 元件引發事件，並在一或多個事件接收器，定期執行程式碼。 元件沒有使用者介面，而且是用於單一執行緒的環境;它會在 UI 執行緒上執行。
> - <xref:System.Web.UI.Timer?displayProperty=nameWithType> (僅限.NET framework)，以固定間隔執行非同步或同步網頁回傳的 ASP.NET 元件。
  
 當您建立計時器時，您可以指定的方法第一次執行之前要等待的時間量 （到期時間），以及後續的執行作業 （句點） 之間要等候的時間量。 <xref:System.Threading.Timer>類別具有相同的解析度，以系統時鐘。 這表示，如果長度小於系統時鐘的解析度<xref:System.Threading.TimerCallback>委派將在大約 15 毫秒在 Windows 7 和 Windows 8 的系統系統時鐘的解析度所定義的時間間隔執行。 您可以變更到期時間和期間或停用計時器，使用<xref:System.Threading.Timer.Change%2A>方法。  
  
> [!NOTE]
>  只要您使用<xref:System.Threading.Timer>，您必須保持它的參考。 如同任何受管理的物件，<xref:System.Threading.Timer>時不有任何參考受限於記憶體回收。 事實上，<xref:System.Threading.Timer>時仍作用中不會防止它所收集。  
  
 若不再需要計時器，使用<xref:System.Threading.Timer.Dispose%2A>計時器所持有的方法來釋放資源。 請注意回呼可能會發生之後<xref:System.Threading.Timer.Dispose>方法多載呼叫，因為計時器佇列中由執行緒集區執行緒執行的回呼。 您可以使用<xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29>等候，直到所有的回呼已完成的方法多載。  
  
 計時器所執行的回呼方法應該是可重新進入，因為已呼叫方法<xref:System.Threading.ThreadPool>執行緒。 如果計時器間隔小於執行回呼中，所需的時間，或如果所有的執行緒集區正在使用中，回呼會排入佇列多次，則可以在兩個執行緒集區執行緒上同時執行的回呼。  
  
> [!NOTE]
>  <xref:System.Threading.Timer?displayProperty=nameWithType> 是簡單、 輕量的計時器，會使用回呼方法，並由執行緒集區。 不建議用於 Windows Form，因為其回呼不會發生在使用者介面執行緒上。 <xref:System.Windows.Forms.Timer?displayProperty=nameWithType> 是較好的選擇，以搭配 Windows Form。 如需伺服器為基礎的計時器功能，您可以考慮使用<xref:System.Timers.Timer?displayProperty=nameWithType>，這會引發事件，並提供額外的功能。  
  
   
  
## Examples  
 下列範例會定義`StatusChecker`類別，其中包含`CheckStatus`其簽章是相同的方法為<xref:System.Threading.TimerCallback>委派。 `state`引數`CheckStatus`方法是<xref:System.Threading.AutoResetEvent>物件，用來同步處理應用程式執行緒和執行緒集區執行緒執行回呼委派。 `StatusChecker`類別也包含兩個狀態變數：  
  
 `invokeCount`  
 表示叫用回呼方法的次數。  
  
 `maxCount`  
 決定應叫用回呼方法最大次數。  
  
 應用程式執行緒會建立計時器，它會等待一秒，然後執行`CheckStatus`回呼方法每 250 毫秒。 然後，應用程式執行緒會封鎖直到<xref:System.Threading.AutoResetEvent>物件收到訊號。 當`CheckStatus`回呼方法會執行`maxCount`次，它會呼叫`AutoResetEvent.Set`方法，以設定狀態的<xref:System.Threading.AutoResetEvent>物件已收到訊號。 第一次發生這種情況，應用程式執行緒呼叫<xref:System.Threading.Timer.Change%28System.Int32%2CSystem.Int32%29>方法以便在回呼方法現在會執行每個半秒。 同樣地封鎖直到<xref:System.Threading.AutoResetEvent>物件收到訊號。 當發生這種情況時，計時器會終結藉由呼叫其<xref:System.Threading.Timer.Dispose%2A>方法，以及應用程式會終止。  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>此型別具備執行緒安全。</threadsafe>
    <altmember cref="T:System.Threading.TimerCallback" />
    <related type="Article" href="~/docs/standard/threading/timers.md">計時器</related>
    <related type="Article" href="~/docs/standard/threading/the-managed-thread-pool.md">Managed 執行緒集區</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see langword="Timer" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback -&gt; System.Threading.Timer" Usage="new System.Threading.Timer callback" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="callback">A<see cref="T:System.Threading.TimerCallback" />委派，表示要執行的方法。</param>
        <summary>初始化的新執行個體<see cref="T:System.Threading.Timer" />類別以無限週期和無限到期時，使用新建立<see cref="T:System.Threading.Timer" />物件做為狀態物件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫這個建構函式，當您想要使用<xref:System.Threading.Timer>物件本身做為狀態物件。 建立計時器之後, 使用<xref:System.Threading.Timer.Change%2A>方法來設定到期時間與間隔。  
  
 這個建構函式會指定無限到期時間之前的第一個回呼與回呼，以防止第一個回呼之前發生無限間隔<xref:System.Threading.Timer>物件指派給狀態物件。  
  
 為指定的方法`callback`應該是可重新進入，，因為它呼叫<xref:System.Threading.ThreadPool>執行緒。 如果計時器的間隔少於一個執行方法，所需的時間，或如果所有的執行緒集區正在使用中，此方法會排入佇列多次，則可以在兩個執行緒集區執行緒上同時執行的方法。  
  
   
  
## Examples  
 下列程式碼範例會建立新的計時器，並使用計時器本身做為狀態物件。 <xref:System.Threading.Timer.Change%2A>方法用來啟動計時器。 計時器回撥時，狀態物件用來關閉計時器。  
  
 [!code-csharp[TimerSelfCtor#1](~/samples/snippets/csharp/VS_Snippets_Misc/timerSelfCtor/CS/source.cs#1)]
 [!code-vb[TimerSelfCtor#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/timerSelfCtor/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, int dueTime, int period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, int32 dueTime, int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As Integer, period As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, int dueTime, int period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * int * int -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.Int32" />
        <Parameter Name="period" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="callback">A<see cref="T:System.Threading.TimerCallback" />委派，表示要執行的方法。</param>
        <param name="state">物件，包含回呼方法中，所要使用的資訊或<see langword="null" />。</param>
        <param name="dueTime">前所延遲的時間量<paramref name="callback" />會顯示叫用，以毫秒為單位。 指定<see cref="F:System.Threading.Timeout.Infinite" />以防止計時器啟動。 指定零 (0) 以立即啟動計時器。</param>
        <param name="period">引動過程之間的時間間隔<paramref name="callback" />，以毫秒為單位。 指定<see cref="F:System.Threading.Timeout.Infinite" />停用定期的信號方式。</param>
        <summary>初始化的新執行個體<see langword="Timer" />類別，使用 32 位元帶正負號的整數來指定時間間隔。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所指定的委派`callback`參數會叫用一次之後`dueTime`過後，而且之後每次`period`時間間隔經過。  
  
 如果`dueTime`為零 (0)，`callback`會立即叫用。 如果`dueTime`已<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，`callback`不會叫用; 計時器已停用，但可以藉由呼叫重新啟用<xref:System.Threading.Timer.Change%2A>方法。  
  
 因為<xref:System.Threading.Timer>類別具有相同的解析度，以系統時鐘，也就是在 Windows 7 和 Windows 8 的系統上大約 15 毫秒，`callback`委派執行，如果系統時鐘的解析度所定義的間隔`period`小於系統時鐘的解析度。 如果`period`為零 (0) 或<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>並`dueTime`不是<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，`callback`會叫用週期性的計時器行為一次; 已停用，但可以重新啟用使用<xref:System.Threading.Timer.Change%2A>方法。  
  
 為指定的方法`callback`應該是可重新進入，，因為它呼叫<xref:System.Threading.ThreadPool>執行緒。 如果計時器的間隔少於一個執行方法，所需的時間，或如果所有的執行緒集區正在使用中，此方法會排入佇列多次，則可以在兩個執行緒集區執行緒上同時執行的方法。  
  
   
  
## Examples  
 下列程式碼範例示範如何建立`TimerCallback`委派，並初始化的新執行個體`Timer`類別。  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dueTime" />或是<paramref name="period" />參數是負值且不等於<see cref="F:System.Threading.Timeout.Infinite" />。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="callback" /> 參數為 <see langword="null" />。</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">計時器</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, long dueTime, long period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, int64 dueTime, int64 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As Long, period As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, long dueTime, long period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * int64 * int64 -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="dueTime" Type="System.Int64" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="period" Type="System.Int64" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="callback">A<see cref="T:System.Threading.TimerCallback" />委派，表示要執行的方法。</param>
        <param name="state">物件，包含回呼方法中，所要使用的資訊或<see langword="null" />。</param>
        <param name="dueTime">前所延遲的時間量<paramref name="callback" />會顯示叫用，以毫秒為單位。 指定<see cref="F:System.Threading.Timeout.Infinite" />以防止計時器啟動。 指定零 (0) 以立即啟動計時器。</param>
        <param name="period">引動過程之間的時間間隔<paramref name="callback" />，以毫秒為單位。 指定<see cref="F:System.Threading.Timeout.Infinite" />停用定期的信號方式。</param>
        <summary>初始化的新執行個體<see langword="Timer" />類別，使用 64 位元帶正負號的整數來測量時間間隔。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所指定的委派`callback`參數會叫用一次之後`dueTime`過後，而且之後每次`period`時間間隔經過。  
  
 如果`dueTime`為零 (0)，`callback`會立即叫用。 如果`dueTime`已<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，`callback`不會叫用; 計時器已停用，但可以藉由呼叫重新啟用<xref:System.Threading.Timer.Change%2A>方法。  
  
 因為<xref:System.Threading.Timer>類別具有相同的解析度，以系統時鐘，也就是在 Windows 7 和 Windows 8 的系統上大約 15 毫秒，`callback`委派執行，如果系統時鐘的解析度所定義的間隔`period`小於系統時鐘的解析度。 如果`period`為零 (0) 或<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>並`dueTime`不是<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，`callback`會叫用週期性的計時器行為一次; 已停用，但可以重新啟用使用<xref:System.Threading.Timer.Change%2A>方法。  
  
 為指定的方法`callback`應該是可重新進入，，因為它呼叫<xref:System.Threading.ThreadPool>執行緒。 如果計時器的間隔少於一個執行方法，所需的時間，或如果所有的執行緒集區正在使用中，此方法會排入佇列多次，則可以在兩個執行緒集區執行緒上同時執行的方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dueTime" />或是<paramref name="period" />參數是負值且不等於<see cref="F:System.Threading.Timeout.Infinite" />。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="dueTime" />或<paramref name="period" />參數大於 4294967294。</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">計時器</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, valuetype System.TimeSpan dueTime, valuetype System.TimeSpan period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As TimeSpan, period As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * TimeSpan * TimeSpan -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.TimeSpan" />
        <Parameter Name="period" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="callback">代表要執行之方法的委派。</param>
        <param name="state">物件，包含回呼方法中，所要使用的資訊或<see langword="null" />。</param>
        <param name="dueTime"><paramref name="callback" /> 參數叫用其方法前所延遲的時間量。 指定負 1 (-1) 毫秒以防止啟動計時器。 指定零 (0) 以立即啟動計時器。</param>
        <param name="period">所參考方法的引動過程之間的時間間隔<paramref name="callback" />。 指定負 1 (-1) 毫秒以停用定期的信號方式。</param>
        <summary>初始化的新執行個體<see langword="Timer" />類別，使用<see cref="T:System.TimeSpan" />來測量時間間隔的值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所指定的委派`callback`參數會叫用一次之後`dueTime`過後，而且之後每次`period`時間間隔經過。  
  
 如果`dueTime`為零 (0)，`callback`會立即叫用。 如果`dueTime`為負一 (-1) 毫秒，`callback`不會叫用; 計時器已停用，但可以藉由呼叫重新啟用<xref:System.Threading.Timer.Change%2A>方法。  
  
 因為<xref:System.Threading.Timer>類別具有相同的解析度，以系統時鐘，也就是在 Windows 7 和 Windows 8 的系統上大約 15 毫秒，`callback`委派執行，如果系統時鐘的解析度所定義的間隔`period`小於系統時鐘的解析度。 如果`period`為零 (0) 或負一 (-1) 毫秒並`dueTime`是正數，`callback`叫用週期性的計時器行為一次; 已停用，但可以重新啟用使用<xref:System.Threading.Timer.Change%2A>方法。  
  
 為指定的方法`callback`應該是可重新進入，，因為它呼叫<xref:System.Threading.ThreadPool>執行緒。 如果計時器的間隔少於一個執行方法，所需的時間，或如果所有的執行緒集區正在使用中，此方法會排入佇列多次，則可以在兩個執行緒集區執行緒上同時執行的方法。  
  
   
  
## Examples  
 下列程式碼範例示範如何建立`TimerCallback`委派，並初始化的新執行個體`Timer`類別。  
  
 [!code-cpp[System.Threading.Timer2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.Timer2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer2/CS/source2.cs#1)]
 [!code-vb[System.Threading.Timer2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">值的毫秒數<paramref name="dueTime" />或是<paramref name="period" />是負數且不等於<see cref="F:System.Threading.Timeout.Infinite" />，或大於<see cref="F:System.Int32.MaxValue" />。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="callback" /> 參數為 <see langword="null" />。</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">計時器</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, uint dueTime, uint period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, unsigned int32 dueTime, unsigned int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As UInteger, period As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, System::UInt32 dueTime, System::UInt32 period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * uint32 * uint32 -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="dueTime" Type="System.UInt32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="period" Type="System.UInt32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="callback">代表要執行之方法的委派。</param>
        <param name="state">物件，包含回呼方法中，所要使用的資訊或<see langword="null" />。</param>
        <param name="dueTime">前所延遲的時間量<paramref name="callback" />會顯示叫用，以毫秒為單位。 指定<see cref="F:System.Threading.Timeout.Infinite" />以防止計時器啟動。 指定零 (0) 以立即啟動計時器。</param>
        <param name="period">引動過程之間的時間間隔<paramref name="callback" />，以毫秒為單位。 指定<see cref="F:System.Threading.Timeout.Infinite" />停用定期的信號方式。</param>
        <summary>初始化的新執行個體<see langword="Timer" />類別，使用 32 位元不帶正負號的整數來測量時間間隔。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所指定的委派`callback`參數會叫用一次之後`dueTime`過後，而且之後每次`period`時間間隔經過。  
  
 如果`dueTime`為零 (0)，`callback`會立即叫用。 如果`dueTime`已<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，`callback`不會叫用; 計時器已停用，但可以藉由呼叫重新啟用<xref:System.Threading.Timer.Change%2A>方法。  
  
 因為<xref:System.Threading.Timer>類別具有相同的解析度，以系統時鐘，也就是在 Windows 7 和 Windows 8 的系統上大約 15 毫秒，`callback`委派執行，如果系統時鐘的解析度所定義的間隔`period`小於系統時鐘的解析度。 如果`period`為零 (0) 或<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>並`dueTime`不是<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，`callback`會叫用週期性的計時器行為一次; 已停用，但可以重新啟用使用<xref:System.Threading.Timer.Change%2A>方法。  
  
 為指定的方法`callback`應該是可重新進入，，因為它呼叫<xref:System.Threading.ThreadPool>執行緒。 如果計時器的間隔少於一個執行方法，所需的時間，或如果所有的執行緒集區正在使用中，此方法會排入佇列多次，則可以在兩個執行緒集區執行緒上同時執行的方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dueTime" />或是<paramref name="period" />參數是負值且不等於<see cref="F:System.Threading.Timeout.Infinite" />。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="callback" /> 參數為 <see langword="null" />。</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">計時器</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Change">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>變更開始的時間和計時器的方法引動過程之間的時間間隔。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (int dueTime, int period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(int32 dueTime, int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As Integer, period As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(int dueTime, int period);" />
      <MemberSignature Language="F#" Value="member this.Change : int * int -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.Int32" />
        <Parameter Name="period" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dueTime">延遲之前叫用回呼方法時指定的時間量<see cref="T:System.Threading.Timer" />建構，以毫秒為單位。 指定<see cref="F:System.Threading.Timeout.Infinite" />以防止計時器重新啟動。 指定零 (0) 以立即重新啟動計時器。</param>
        <param name="period">時指定的回呼方法的引動過程之間的時間間隔<see cref="T:System.Threading.Timer" />建構，以毫秒為單位。 指定<see cref="F:System.Threading.Timeout.Infinite" />停用定期的信號方式。</param>
        <summary>變更開始的時間和計時器的方法引動過程之間的時間間隔，使用 32 位元帶正負號的整數來測量時間間隔。</summary>
        <returns><see langword="true" /> 如果已成功更新計時器;否則， <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 回呼方法會叫用一次之後`dueTime`過後，而且之後每個時間所指定的時間間隔`period`耗盡。  
  
 如果`dueTime`是零 (0)，會立即叫用回呼方法。 如果`dueTime`已<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，永遠不會叫用回呼方法，計時器已停用，但可以藉由呼叫重新啟用<xref:System.Threading.Timer.Change%2A>並指定為正值`dueTime`。  
  
 如果`period`為零 (0) 或<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，並`dueTime`不是<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>、 回呼方法叫用一次; 已停用計時器定期行為，但可以重新啟用呼叫<xref:System.Threading.Timer.Change%2A>並指定為正值`period`.  
  
 <xref:System.Threading.Timer.Change%2A>方法可以從呼叫<xref:System.Threading.TimerCallback>委派。  
  
   
  
## Examples  
 下列程式碼範例示範如何啟動`Timer`和固定數目的引動過程之後, 變更其週期。  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Threading.Timer" />已經過處置。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dueTime" />或是<paramref name="period" />參數是負值且不等於<see cref="F:System.Threading.Timeout.Infinite" />。</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">計時器</related>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (long dueTime, long period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(int64 dueTime, int64 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As Long, period As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(long dueTime, long period);" />
      <MemberSignature Language="F#" Value="member this.Change : int64 * int64 -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.Int64" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="period" Type="System.Int64" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dueTime">延遲之前叫用回呼方法時指定的時間量<see cref="T:System.Threading.Timer" />建構，以毫秒為單位。 指定<see cref="F:System.Threading.Timeout.Infinite" />以防止計時器重新啟動。 指定零 (0) 以立即重新啟動計時器。</param>
        <param name="period">時指定的回呼方法的引動過程之間的時間間隔<see cref="T:System.Threading.Timer" />建構，以毫秒為單位。 指定<see cref="F:System.Threading.Timeout.Infinite" />停用定期的信號方式。</param>
        <summary>變更開始的時間和計時器的方法引動過程之間的時間間隔，使用 64 位元帶正負號的整數來測量時間間隔。</summary>
        <returns><see langword="true" /> 如果已成功更新計時器;否則， <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 回呼方法會叫用一次之後`dueTime`過後，而且之後每個時間所指定的時間間隔`period`耗盡。  
  
 如果`dueTime`是零 (0)，會立即叫用回呼方法。 如果`dueTime`已<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，永遠不會叫用回呼方法，計時器已停用，但可以藉由呼叫重新啟用<xref:System.Threading.Timer.Change%2A>並指定為正值`dueTime`。  
  
 如果`period`為零 (0) 或<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，並`dueTime`不是<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>、 回呼方法叫用一次; 已停用計時器定期行為，但可以重新啟用呼叫<xref:System.Threading.Timer.Change%2A>並指定為正值`period`.  
  
 <xref:System.Threading.Timer.Change%2A>方法可以從呼叫<xref:System.Threading.TimerCallback>委派。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Threading.Timer" />已經過處置。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dueTime" />或<paramref name="period" />參數值小於-1。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="dueTime" />或<paramref name="period" />參數大於 4294967294。</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">計時器</related>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(valuetype System.TimeSpan dueTime, valuetype System.TimeSpan period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As TimeSpan, period As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="F#" Value="member this.Change : TimeSpan * TimeSpan -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.TimeSpan" />
        <Parameter Name="period" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="dueTime">A<see cref="T:System.TimeSpan" />表示叫用回呼方法前所延遲的時間量時指定<see cref="T:System.Threading.Timer" />建構。 指定負 1 (-1) 毫秒以防止重新啟動計時器。 指定零 (0) 以立即重新啟動計時器。</param>
        <param name="period">時指定的回呼方法的引動過程之間的時間間隔<see cref="T:System.Threading.Timer" />建構。 指定負 1 (-1) 毫秒以停用定期的信號方式。</param>
        <summary>變更開始時間和計時器，使用的方法引動過程之間的間隔<see cref="T:System.TimeSpan" />來測量時間間隔的值。</summary>
        <returns><see langword="true" /> 如果已成功更新計時器;否則， <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 回呼方法會叫用一次之後`dueTime`過後，而且之後每個時間所指定的時間間隔`period`耗盡。  
  
 如果`dueTime`是零 (0)，會立即叫用回呼方法。 如果`dueTime`為負一 (-1) 毫秒，絕不會叫用回呼方法，停用計時器，不過也可以藉由呼叫重新啟用<xref:System.Threading.Timer.Change%2A>並指定為正值`dueTime`。  
  
 如果`period`為零 (0) 或負一 (-1) 毫秒，並`dueTime`是正數，一次叫用回呼方法; 週期性的計時器行為已停用，但可以藉由呼叫重新啟用<xref:System.Threading.Timer.Change%2A>和指定的值大於為零`period`。  
  
 <xref:System.Threading.Timer.Change%2A>方法可以從呼叫<xref:System.Threading.TimerCallback>委派。  
  
   
  
## Examples  
 下列程式碼範例示範如何啟動`Timer`和固定數目的引動過程之後, 變更其週期。  
  
 [!code-cpp[System.Threading.Timer2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.Timer2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer2/CS/source2.cs#1)]
 [!code-vb[System.Threading.Timer2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Threading.Timer" />已經過處置。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dueTime" />或<paramref name="period" />參數，以毫秒為單位，值小於-1。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="dueTime" />或<paramref name="period" />參數，以毫秒為單位，大於 4294967294。</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">計時器</related>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (uint dueTime, uint period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(unsigned int32 dueTime, unsigned int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As UInteger, period As UInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(System::UInt32 dueTime, System::UInt32 period);" />
      <MemberSignature Language="F#" Value="member this.Change : uint32 * uint32 -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.UInt32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="period" Type="System.UInt32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dueTime">延遲之前叫用回呼方法時指定的時間量<see cref="T:System.Threading.Timer" />建構，以毫秒為單位。 指定<see cref="F:System.Threading.Timeout.Infinite" />以防止計時器重新啟動。 指定零 (0) 以立即重新啟動計時器。</param>
        <param name="period">時指定的回呼方法的引動過程之間的時間間隔<see cref="T:System.Threading.Timer" />建構，以毫秒為單位。 指定<see cref="F:System.Threading.Timeout.Infinite" />停用定期的信號方式。</param>
        <summary>變更開始的時間和計時器的方法引動過程之間的時間間隔，使用 32 位元不帶正負號的整數來測量時間間隔。</summary>
        <returns><see langword="true" /> 如果已成功更新計時器;否則， <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 回呼方法會叫用一次之後`dueTime`過後，而且之後每個時間所指定的時間間隔`period`耗盡。  
  
 如果`dueTime`是零 (0)，會立即叫用回呼方法。 如果`dueTime`已<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，永遠不會叫用回呼方法，計時器已停用，但可以藉由呼叫重新啟用<xref:System.Threading.Timer.Change%2A>並指定為正值`dueTime`。  
  
 如果`period`為零 (0) 或<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，並`dueTime`不是<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>、 回呼方法叫用一次; 已停用計時器定期行為，但可以重新啟用呼叫<xref:System.Threading.Timer.Change%2A>並指定為正值`period`.  
  
 <xref:System.Threading.Timer.Change%2A>方法可以從呼叫<xref:System.Threading.TimerCallback>委派。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Threading.Timer" />已經過處置。</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">計時器</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>目前的執行個體所使用的資源全部釋出<see cref="T:System.Threading.Timer" />。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="timer.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>目前的執行個體所使用的資源全部釋出<see cref="T:System.Threading.Timer" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫`Dispose`可讓所使用的資源<xref:System.Threading.Timer>重新配置用於其他用途。 如需詳細資訊`Dispose`，請參閱 <<c2> [ 清除 Unmanaged 資源總](~/docs/standard/garbage-collection/unmanaged.md)。  
  
> [!NOTE]
>  之後就可能發生的回呼<xref:System.Threading.Timer.Dispose>方法多載呼叫，因為計時器佇列中由執行緒集區執行緒執行的回呼。 您可以使用<xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29>等候，直到所有的回呼已完成的方法多載。  
  
   
  
## Examples  
 下列程式碼範例示範如何釋放所持有的資源`Timer`。  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/timers.md">計時器</related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public bool Dispose (System.Threading.WaitHandle notifyObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Dispose(class System.Threading.WaitHandle notifyObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Dispose(System.Threading.WaitHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dispose (notifyObject As WaitHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Dispose(System::Threading::WaitHandle ^ notifyObject);" />
      <MemberSignature Language="F#" Value="member this.Dispose : System.Threading.WaitHandle -&gt; bool" Usage="timer.Dispose notifyObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="notifyObject" Type="System.Threading.WaitHandle" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="notifyObject"><see cref="T:System.Threading.WaitHandle" />時，應通知<see langword="Timer" />已經過處置。</param>
        <summary>目前的執行個體所使用的資源全部釋出<see cref="T:System.Threading.Timer" />和計時器已被處置時發出訊號。</summary>
        <returns><see langword="true" /> 如果函式成功，則否則， <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫`Dispose`可讓所使用的資源<xref:System.Threading.Timer>重新配置用於其他用途。 如需詳細資訊`Dispose`，請參閱 <<c2> [ 清除 Unmanaged 資源總](~/docs/standard/garbage-collection/unmanaged.md)。  
  
 這個方法完成時，它會通知<xref:System.Threading.WaitHandle>所指定`notifyObject`參數。使用此多載<xref:System.Threading.Timer.Dispose%2A>方法，如果您想要能夠封鎖，直到確定計時器已被處置為止。 所有目前排入佇列的回呼完成之前，不會處置計時器。  
  
> [!NOTE]
>  如果使用回呼<xref:System.Threading.Timer.Change%2A>方法來設定`dueTime`參數設為零，可能發生競爭情形時<xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29>方法多載會呼叫：如果計時器佇列之前的新回呼<xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29>方法多載可讓您偵測有沒有回呼排入佇列，<xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29>會繼續封鎖，而新的回撥會排入佇列，且計時器已處置的否則為<xref:System.ObjectDisposedException>時擲回新的回撥呼叫<xref:System.Threading.Timer.Change%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="notifyObject" /> 參數為 <see langword="null" />。</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">計時器</related>
      </Docs>
    </Member>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask DisposeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask DisposeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function DisposeAsync () As ValueTask" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::ValueTask DisposeAsync();" />
      <MemberSignature Language="F#" Value="abstract member DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask&#xA;override this.DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask" Usage="timer.DisposeAsync " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IAsyncDisposable.DisposeAsync</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Timer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Timer ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="timer.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在記憶體回收開始前，允許物件嘗試釋放資源，並執行其他清除作業。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>