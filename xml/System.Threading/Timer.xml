<Type Name="Timer" FullName="System.Threading.Timer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1eef97181838354ff4be8e0d34d51c4d79667eea" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36406781" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Timer : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Timer extends System.MarshalByRefObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Timer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Timer&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer sealed : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="F#" Value="type Timer = class&#xA;    inherit MarshalByRefObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Timer</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供一套機制，可於指定間隔在執行緒集區執行緒上執行方法。 這個類別無法被繼承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Threading.TimerCallback>來指定您想要的方法委派<xref:System.Threading.Timer>來執行。 簽章<xref:System.Threading.TimerCallback>委派：  
  
```csharp  
void TimerCallback(Object state)  
```  
  
```cpp  
void TimerCallback(Object state)  
```  
  
```vb  
Sub TimerCallback(state As Object)  
```  
  
 當計時器建構，而且無法變更，會指定計時器委派。 此方法不會建立計時器; 在執行緒上執行它會執行上<xref:System.Threading.ThreadPool>系統所提供的執行緒。  
  
> [!TIP]
> .NET 包含四個類別，名為`Timer`，每個的其中提供不同的功能：  
>
> - <xref:System.Timers.Timer?displayProperty=nameWithType>其引發事件，並在其中執行程式碼或更多的事件接收器的固定間隔。 類別僅供做為伺服器為基礎或在多執行緒環境; 中的服務元件它沒有使用者介面，並在執行階段看不到。
> - <xref:System.Threading.Timer?displayProperty=nameWithType>它會在執行緒集區執行緒上定期執行的單一回呼方法。 計時器會具現化，且無法變更時，會定義回呼方法。 像<xref:System.Timers.Timer?displayProperty=nameWithType>類別，這個類別僅供做為伺服器或服務的元件，多執行緒環境中使用，不過它沒有使用者介面，並在執行階段看不到。
> - <xref:System.Windows.Forms.Timer?displayProperty=nameWithType> (只有.NET framework)，就會引發事件，並在一或多個事件接收器上定期執行程式碼的 Windows Form 元件。 元件沒有使用者介面和適用於在單一執行緒環境中。它會在 UI 執行緒上執行。
> - <xref:System.Web.UI.Timer?displayProperty=nameWithType> (只有.NET framework)，以固定間隔執行非同步或同步網頁回傳的 ASP.NET 元件。
  
 當您建立計時器時，您可以指定為第一個執行方法之前要等待的時間量 （到期時間），及後續執行 （期間） 之間等待的時間量。 <xref:System.Threading.Timer>類別具有的系統時鐘為相同的解析度。 這表示，如果長度小於系統時鐘的解析度<xref:System.Threading.TimerCallback>委派會在約 15 毫秒在 Windows 7 和 Windows 8 的系統系統時鐘的解析度所定義的間隔執行。 您可以變更到期時間和句號或停用計時器，使用<xref:System.Threading.Timer.Change%2A>方法。  
  
> [!NOTE]
>  只要您使用<xref:System.Threading.Timer>，您必須保留給它的參考。 如同任何受管理的物件，<xref:System.Threading.Timer>沒有參考時受限於記憶體回收。 事實上，<xref:System.Threading.Timer>時仍作用中不會阻止它要收集。  
  
 當不再需要計時器時，請使用<xref:System.Threading.Timer.Dispose%2A>計時器所持有的方法來釋放資源。 請注意回呼之後就會發生<xref:System.Threading.Timer.Dispose>方法多載呼叫，因為計時器佇列執行緒集區執行緒所執行的回呼。 您可以使用<xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29>方法多載，要等候直到所有的回呼已完成。  
  
 計時器所執行的回呼方法應該是可重新進入，因為它會呼叫上<xref:System.Threading.ThreadPool>執行緒。 計時器間隔是否小於執行回呼所需的時間，或如果所有的執行緒集區正在使用中，回呼會排入佇列多次，則可以在兩個執行緒集區執行緒上同時執行的回呼。  
  
> [!NOTE]
>  <xref:System.Threading.Timer?displayProperty=nameWithType> 是簡單的輕量型計時器，使用回呼方法，由執行緒集區。 不建議搭配 Windows Form，因為其回呼不會發生在使用者介面執行緒上。 <xref:System.Windows.Forms.Timer?displayProperty=nameWithType> 為搭配 Windows Form 使用的較佳選擇。 如需伺服器為基礎的計時器功能，您可以考慮使用<xref:System.Timers.Timer?displayProperty=nameWithType>，其引發事件，並具有額外的功能。  
  
   
  
## Examples  
 下列範例會定義`StatusChecker`類別，其中包含`CheckStatus`其簽章是相同的方法為<xref:System.Threading.TimerCallback>委派。 `state`引數的`CheckStatus`方法<xref:System.Threading.AutoResetEvent>物件，用來同步處理應用程式執行緒和執行緒集區執行緒執行的回呼委派。 `StatusChecker`類別也包含兩個狀態變數：  
  
 `invokeCount`  
 表示已叫用回呼方法的次數。  
  
 `maxCount`  
 決定應叫用回呼方法最大次數。  
  
 應用程式執行緒建立計時器，它會等待一秒，然後執行`CheckStatus`回呼方法每隔 250 毫秒。 然後，應用程式執行緒會封鎖直到<xref:System.Threading.AutoResetEvent>物件收到訊號。 當`CheckStatus`回呼方法執行`maxCount`次，它會呼叫`AutoResetEvent.Set`方法，以設定的狀態<xref:System.Threading.AutoResetEvent>為收到信號的物件。 第一次發生這種情況，應用程式執行緒呼叫<xref:System.Threading.Timer.Change%28System.Int32%2CSystem.Int32%29>方法的回呼方法現在會執行每個半秒。 同樣地封鎖直到<xref:System.Threading.AutoResetEvent>物件收到訊號。 當發生這種情況時，計時器會終結藉由呼叫其<xref:System.Threading.Timer.Dispose%2A>方法，以及應用程式終止。  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>此型別具備執行緒安全。</threadsafe>
    <altmember cref="T:System.Threading.TimerCallback" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see langword="Timer" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback -&gt; System.Threading.Timer" Usage="new System.Threading.Timer callback" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
      </Parameters>
      <Docs>
        <param name="callback">
          <see cref="T:System.Threading.TimerCallback" /> 委派，表示要執行的方法。</param>
        <summary>以無限週期和無限到期時間初始化 <see cref="T:System.Threading.Timer" /> 類別的新執行個體，利用新建立 <see cref="T:System.Threading.Timer" /> 物件做為狀態物件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫這個建構函式，當您想要使用<xref:System.Threading.Timer>物件本身做為狀態物件。 在建立計時器之後, 使用<xref:System.Threading.Timer.Change%2A>方法，以設定的間隔和到期時間。  
  
 這個建構函式會指定無限的到期時間之前的第一個回呼和回呼，以防止第一個回呼之前發生無限間隔<xref:System.Threading.Timer>物件指派給狀態物件。  
  
 為指定的方法`callback`應該可重新進入，因為它呼叫<xref:System.Threading.ThreadPool>執行緒。 計時器間隔是否小於一個要執行之方法所需的時間，或如果所有的執行緒集區正在使用中，此方法會排入佇列多次，則可以在兩個執行緒集區執行緒上同時執行的方法。  
  
   
  
## Examples  
 下列程式碼範例會建立新的計時器，並使用計時器本身與狀態的物件。 <xref:System.Threading.Timer.Change%2A>方法用來啟動計時器。 當計時器回呼發生時，狀態物件用來關閉計時器。  
  
 [!code-csharp[TimerSelfCtor#1](~/samples/snippets/csharp/VS_Snippets_Misc/timerSelfCtor/CS/source.cs#1)]
 [!code-vb[TimerSelfCtor#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/timerSelfCtor/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, int dueTime, int period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, int32 dueTime, int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As Integer, period As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, int dueTime, int period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * int * int -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.Int32" />
        <Parameter Name="period" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="callback">
          <see cref="T:System.Threading.TimerCallback" /> 委派，表示要執行的方法。</param>
        <param name="state">包含回呼方法所使用資訊的物件，或 <see langword="null" />。</param>
        <param name="dueTime">叫用 <c>callback</c> 前所延遲的時間量 (以毫秒為單位)。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 以防止計時器啟動。 指定零 (0) 以立即啟動計時器。</param>
        <param name="period">
          <c>callback</c> 引動過程的間隔時間 (以毫秒為單位)。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 以停用週期的信號功能。</param>
        <summary>初始化 <see langword="Timer" /> 類別的新執行個體，使用 32 位元帶正負號的整數來指定時間間隔。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所指定的委派`callback`一次之後叫用參數`dueTime`結束，之後每次`period`段間隔。  
  
 如果`dueTime`為零 (0)，`callback`會立即叫用。 如果`dueTime`是<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，`callback`不會叫用; 計時器已停用，但可以藉由呼叫重新啟用<xref:System.Threading.Timer.Change%2A>方法。  
  
 因為<xref:System.Threading.Timer>類別具有的系統時鐘，這是大約 15 毫秒在 Windows 7 和 Windows 8 的系統上，以相同的解析度`callback`委派會執行的間隔由系統時鐘的解析度，如果`period`小於系統時鐘的解析度。 如果`period`為零 (0) 或<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>和`dueTime`不<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，`callback`叫用一次; 週期性的計時器行為已停用，但是可加以重新啟用使用<xref:System.Threading.Timer.Change%2A>方法。  
  
 為指定的方法`callback`應該可重新進入，因為它呼叫<xref:System.Threading.ThreadPool>執行緒。 計時器間隔是否小於一個要執行之方法所需的時間，或如果所有的執行緒集區正在使用中，此方法會排入佇列多次，則可以在兩個執行緒集區執行緒上同時執行的方法。  
  
   
  
## Examples  
 下列程式碼範例示範如何建立`TimerCallback`委派和初始化的新執行個體`Timer`類別。  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="dueTime" /> 或 <paramref name="period" /> 參數是負的，且不等於 <see cref="F:System.Threading.Timeout.Infinite" />。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callback" /> 參數為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, long dueTime, long period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, int64 dueTime, int64 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As Long, period As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, long dueTime, long period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * int64 * int64 -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.Int64" />
        <Parameter Name="period" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="callback">
          <see cref="T:System.Threading.TimerCallback" /> 委派，表示要執行的方法。</param>
        <param name="state">包含回呼方法所使用資訊的物件，或 <see langword="null" />。</param>
        <param name="dueTime">叫用 <c>callback</c> 前所延遲的時間量 (以毫秒為單位)。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 以防止計時器啟動。 指定零 (0) 以立即啟動計時器。</param>
        <param name="period">
          <c>callback</c> 引動過程的間隔時間 (以毫秒為單位)。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 以停用週期的信號功能。</param>
        <summary>初始化 <see langword="Timer" /> 類別的新執行個體，使用 64 位元帶正負號的整數來測量時間間隔。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所指定的委派`callback`一次之後叫用參數`dueTime`結束，之後每次`period`段間隔。  
  
 如果`dueTime`為零 (0)，`callback`會立即叫用。 如果`dueTime`是<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，`callback`不會叫用; 計時器已停用，但可以藉由呼叫重新啟用<xref:System.Threading.Timer.Change%2A>方法。  
  
 因為<xref:System.Threading.Timer>類別具有的系統時鐘，這是大約 15 毫秒在 Windows 7 和 Windows 8 的系統上，以相同的解析度`callback`委派會執行的間隔由系統時鐘的解析度，如果`period`小於系統時鐘的解析度。 如果`period`為零 (0) 或<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>和`dueTime`不<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，`callback`叫用一次; 週期性的計時器行為已停用，但是可加以重新啟用使用<xref:System.Threading.Timer.Change%2A>方法。  
  
 為指定的方法`callback`應該可重新進入，因為它呼叫<xref:System.Threading.ThreadPool>執行緒。 計時器間隔是否小於一個要執行之方法所需的時間，或如果所有的執行緒集區正在使用中，此方法會排入佇列多次，則可以在兩個執行緒集區執行緒上同時執行的方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="dueTime" /> 或 <paramref name="period" /> 參數是負的，且不等於 <see cref="F:System.Threading.Timeout.Infinite" />。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="dueTime" /> 或 <paramref name="period" /> 參數大於 4294967294。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, valuetype System.TimeSpan dueTime, valuetype System.TimeSpan period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As TimeSpan, period As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * TimeSpan * TimeSpan -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.TimeSpan" />
        <Parameter Name="period" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="callback">代表要執行之方法的委派。</param>
        <param name="state">包含回呼方法所使用資訊的物件，或 <see langword="null" />。</param>
        <param name="dueTime">
          <c>callback</c> 參數叫用其方法前所延遲的時間量。 指定負 1 (-1) 毫秒以防止啟動計時器。 指定零 (0) 以立即啟動計時器。</param>
        <param name="period">為 <c>callback</c> 所參考方法於兩次引動過程之間的時間間隔。 指定負 1 (-1) 毫秒以停用定期的信號方式。</param>
        <summary>初始化 <see langword="Timer" /> 類別的新執行個體，使用 <see cref="T:System.TimeSpan" /> 值來測量時間間隔。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所指定的委派`callback`一次之後叫用參數`dueTime`結束，之後每次`period`段間隔。  
  
 如果`dueTime`為零 (0)，`callback`會立即叫用。 如果`dueTime`為負一 (-1) 毫秒，`callback`不會叫用; 計時器已停用，但可以藉由呼叫重新啟用<xref:System.Threading.Timer.Change%2A>方法。  
  
 因為<xref:System.Threading.Timer>類別具有的系統時鐘，這是大約 15 毫秒在 Windows 7 和 Windows 8 的系統上，以相同的解析度`callback`委派會執行的間隔由系統時鐘的解析度，如果`period`小於系統時鐘的解析度。 如果`period`是零 (0) 或負一 (-1) 毫秒和`dueTime`是正數，`callback`叫用一次; 週期性的計時器行為已停用，但是可加以重新啟用使用<xref:System.Threading.Timer.Change%2A>方法。  
  
 為指定的方法`callback`應該可重新進入，因為它呼叫<xref:System.Threading.ThreadPool>執行緒。 計時器間隔是否小於一個要執行之方法所需的時間，或如果所有的執行緒集區正在使用中，此方法會排入佇列多次，則可以在兩個執行緒集區執行緒上同時執行的方法。  
  
   
  
## Examples  
 下列程式碼範例示範如何建立`TimerCallback`委派和初始化的新執行個體`Timer`類別。  
  
 [!code-cpp[System.Threading.Timer2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.Timer2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer2/CS/source2.cs#1)]
 [!code-vb[System.Threading.Timer2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="dueTime" /> 或 <paramref name="period" /> 值的毫秒數為負，不等於 <see cref="F:System.Threading.Timeout.Infinite" />，或大於 <see cref="F:System.Int32.MaxValue" />。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callback" /> 參數為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, uint dueTime, uint period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, unsigned int32 dueTime, unsigned int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As UInteger, period As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, System::UInt32 dueTime, System::UInt32 period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * uint32 * uint32 -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.UInt32" />
        <Parameter Name="period" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="callback">代表要執行之方法的委派。</param>
        <param name="state">包含回呼方法所使用資訊的物件，或 <see langword="null" />。</param>
        <param name="dueTime">叫用 <c>callback</c> 前所延遲的時間量 (以毫秒為單位)。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 以防止計時器啟動。 指定零 (0) 以立即啟動計時器。</param>
        <param name="period">
          <c>callback</c> 引動過程的間隔時間 (以毫秒為單位)。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 以停用週期的信號功能。</param>
        <summary>初始化 <see langword="Timer" /> 類別的新執行個體，使用 32 位元不帶正負號的整數 (Unsigned Integer) 來測量時間間隔。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所指定的委派`callback`一次之後叫用參數`dueTime`結束，之後每次`period`段間隔。  
  
 如果`dueTime`為零 (0)，`callback`會立即叫用。 如果`dueTime`是<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，`callback`不會叫用; 計時器已停用，但可以藉由呼叫重新啟用<xref:System.Threading.Timer.Change%2A>方法。  
  
 因為<xref:System.Threading.Timer>類別具有的系統時鐘，這是大約 15 毫秒在 Windows 7 和 Windows 8 的系統上，以相同的解析度`callback`委派會執行的間隔由系統時鐘的解析度，如果`period`小於系統時鐘的解析度。 如果`period`為零 (0) 或<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>和`dueTime`不<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，`callback`叫用一次; 週期性的計時器行為已停用，但是可加以重新啟用使用<xref:System.Threading.Timer.Change%2A>方法。  
  
 為指定的方法`callback`應該可重新進入，因為它呼叫<xref:System.Threading.ThreadPool>執行緒。 計時器間隔是否小於一個要執行之方法所需的時間，或如果所有的執行緒集區正在使用中，此方法會排入佇列多次，則可以在兩個執行緒集區執行緒上同時執行的方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="dueTime" /> 或 <paramref name="period" /> 參數是負的，且不等於 <see cref="F:System.Threading.Timeout.Infinite" />。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callback" /> 參數為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Change">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>變更開始的時間和計時器的方法引動過程之間的時間間隔。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (int dueTime, int period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(int32 dueTime, int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As Integer, period As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(int dueTime, int period);" />
      <MemberSignature Language="F#" Value="member this.Change : int * int -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.Int32" />
        <Parameter Name="period" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dueTime">延遲的時間長度 (以毫秒為單位)，一旦超過這個時間就叫用先前建構 <see cref="T:System.Threading.Timer" /> 時指定的回呼方法。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 以防止計時器重新啟動。 指定零 (0) 以立即重新啟動計時器。</param>
        <param name="period">建構 <see cref="T:System.Threading.Timer" /> 時指定的回呼方法的引動過程間隔時間 (以毫秒為單位)。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 以停用週期的信號功能。</param>
        <summary>變更開始的時間和計時器的方法引動過程之間的時間間隔，使用 32 位元帶正負號的整數來測量時間間隔。</summary>
        <returns>如果已成功更新計時器，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一次之後叫用回呼方法`dueTime`超過，以及此後每個時間所指定的時間間隔`period`捨棄。  
  
 如果`dueTime`是零 (0)，立即叫用回呼方法。 如果`dueTime`是<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，絕不會叫用回呼方法，則為已停用計時器，但可以重新啟用呼叫<xref:System.Threading.Timer.Change%2A>並指定為正值`dueTime`。  
  
 如果`period`為零 (0) 或<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，和`dueTime`不<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>、 回呼方法叫用一次; 已停用定期的計時器行為，但可以重新啟用呼叫<xref:System.Threading.Timer.Change%2A>並指定為正值`period`.  
  
 <xref:System.Threading.Timer.Change%2A>方法可以從呼叫<xref:System.Threading.TimerCallback>委派。  
  
   
  
## Examples  
 下列程式碼範例示範如何啟動`Timer`和固定數目的引動過程之後, 變更其週期。  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Threading.Timer" /> 已經處置。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="dueTime" /> 或 <paramref name="period" /> 參數是負的，且不等於 <see cref="F:System.Threading.Timeout.Infinite" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (long dueTime, long period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(int64 dueTime, int64 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As Long, period As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(long dueTime, long period);" />
      <MemberSignature Language="F#" Value="member this.Change : int64 * int64 -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.Int64" />
        <Parameter Name="period" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="dueTime">延遲的時間長度 (以毫秒為單位)，一旦超過這個時間就叫用先前建構 <see cref="T:System.Threading.Timer" /> 時指定的回呼方法。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 以防止計時器重新啟動。 指定零 (0) 以立即重新啟動計時器。</param>
        <param name="period">建構 <see cref="T:System.Threading.Timer" /> 時指定的回呼方法的引動過程間隔時間 (以毫秒為單位)。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 以停用週期的信號功能。</param>
        <summary>變更開始的時間和計時器的方法引動過程之間的時間間隔，使用 64 位元帶正負號的整數來測量時間間隔。</summary>
        <returns>如果已成功更新計時器，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一次之後叫用回呼方法`dueTime`超過，以及此後每個時間所指定的時間間隔`period`捨棄。  
  
 如果`dueTime`是零 (0)，立即叫用回呼方法。 如果`dueTime`是<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，絕不會叫用回呼方法，則為已停用計時器，但可以重新啟用呼叫<xref:System.Threading.Timer.Change%2A>並指定為正值`dueTime`。  
  
 如果`period`為零 (0) 或<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，和`dueTime`不<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>、 回呼方法叫用一次; 已停用定期的計時器行為，但可以重新啟用呼叫<xref:System.Threading.Timer.Change%2A>並指定為正值`period`.  
  
 <xref:System.Threading.Timer.Change%2A>方法可以從呼叫<xref:System.Threading.TimerCallback>委派。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Threading.Timer" /> 已經處置。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="dueTime" /> 或 <paramref name="period" /> 參數值小於 -1。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="dueTime" /> 或 <paramref name="period" /> 參數大於 4294967294。</exception>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(valuetype System.TimeSpan dueTime, valuetype System.TimeSpan period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As TimeSpan, period As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="F#" Value="member this.Change : TimeSpan * TimeSpan -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.TimeSpan" />
        <Parameter Name="period" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="dueTime">
          <see cref="T:System.TimeSpan" />，表示延遲的時間長度，一旦超過這個時間就叫用先前建構 <see cref="T:System.Threading.Timer" /> 時指定的回呼方法。 指定負 1 (-1) 毫秒以防止重新啟動計時器。 指定零 (0) 以立即重新啟動計時器。</param>
        <param name="period">建構 <see cref="T:System.Threading.Timer" /> 時指定的回呼方法的引動過程間隔時間。 指定負 1 (-1) 毫秒以停用定期的信號方式。</param>
        <summary>變更開始的時間和計時器的方法引動過程之間的時間間隔，使用 <see cref="T:System.TimeSpan" /> 值來測量時間間隔。</summary>
        <returns>如果已成功更新計時器，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一次之後叫用回呼方法`dueTime`超過，以及此後每個時間所指定的時間間隔`period`捨棄。  
  
 如果`dueTime`是零 (0)，立即叫用回呼方法。 如果`dueTime`是負一 (-1) 毫秒，絕不會叫用回呼方法，則為已停用計時器，但可以重新啟用呼叫<xref:System.Threading.Timer.Change%2A>並指定為正值`dueTime`。  
  
 如果`period`是零 (0) 或負一 (-1) 毫秒，和`dueTime`是正數，一次叫用回呼方法，則為週期性的計時器行為會停用，但是可以藉由呼叫重新啟用<xref:System.Threading.Timer.Change%2A>和指定的值大於零`period`。  
  
 <xref:System.Threading.Timer.Change%2A>方法可以從呼叫<xref:System.Threading.TimerCallback>委派。  
  
   
  
## Examples  
 下列程式碼範例示範如何啟動`Timer`和固定數目的引動過程之後, 變更其週期。  
  
 [!code-cpp[System.Threading.Timer2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.Timer2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer2/CS/source2.cs#1)]
 [!code-vb[System.Threading.Timer2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Threading.Timer" /> 已經處置。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="dueTime" /> 或 <paramref name="period" /> 參數值小於 -1 (以毫秒為單位)。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="dueTime" /> 或 <paramref name="period" /> 參數值大於 4294967294 (以毫秒為單位)。</exception>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (uint dueTime, uint period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(unsigned int32 dueTime, unsigned int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As UInteger, period As UInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(System::UInt32 dueTime, System::UInt32 period);" />
      <MemberSignature Language="F#" Value="member this.Change : uint32 * uint32 -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.UInt32" />
        <Parameter Name="period" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="dueTime">延遲的時間長度 (以毫秒為單位)，一旦超過這個時間就叫用先前建構 <see cref="T:System.Threading.Timer" /> 時指定的回呼方法。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 以防止計時器重新啟動。 指定零 (0) 以立即重新啟動計時器。</param>
        <param name="period">建構 <see cref="T:System.Threading.Timer" /> 時指定的回呼方法的引動過程間隔時間 (以毫秒為單位)。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 以停用週期的信號功能。</param>
        <summary>變更開始的時間和計時器的方法引動過程之間的時間間隔，使用 32 位元不帶正負號的整數來測量時間間隔。</summary>
        <returns>如果已成功更新計時器，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一次之後叫用回呼方法`dueTime`超過，以及此後每個時間所指定的時間間隔`period`捨棄。  
  
 如果`dueTime`是零 (0)，立即叫用回呼方法。 如果`dueTime`是<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，絕不會叫用回呼方法，則為已停用計時器，但可以重新啟用呼叫<xref:System.Threading.Timer.Change%2A>並指定為正值`dueTime`。  
  
 如果`period`為零 (0) 或<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，和`dueTime`不<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>、 回呼方法叫用一次; 已停用定期的計時器行為，但可以重新啟用呼叫<xref:System.Threading.Timer.Change%2A>並指定為正值`period`.  
  
 <xref:System.Threading.Timer.Change%2A>方法可以從呼叫<xref:System.Threading.TimerCallback>委派。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Threading.Timer" /> 已經處置。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將 <see cref="T:System.Threading.Timer" /> 目前的執行個體所使用的資源全部釋出。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="timer.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將 <see cref="T:System.Threading.Timer" /> 目前的執行個體所使用的資源全部釋出。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫`Dispose`允許所使用的資源<xref:System.Threading.Timer>都重新配置用於其他用途。 如需有關`Dispose`，請參閱[清除 Unmanaged 資源上](~/docs/standard/garbage-collection/unmanaged.md)。  
  
> [!NOTE]
>  之後，就會發生回呼<xref:System.Threading.Timer.Dispose>方法多載呼叫，因為計時器佇列執行緒集區執行緒所執行的回呼。 您可以使用<xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29>方法多載，要等候直到所有的回呼已完成。  
  
   
  
## Examples  
 下列程式碼範例示範如何釋放所持有的資源`Timer`。  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public bool Dispose (System.Threading.WaitHandle notifyObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Dispose(class System.Threading.WaitHandle notifyObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Dispose(System.Threading.WaitHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dispose (notifyObject As WaitHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Dispose(System::Threading::WaitHandle ^ notifyObject);" />
      <MemberSignature Language="F#" Value="member this.Dispose : System.Threading.WaitHandle -&gt; bool" Usage="timer.Dispose notifyObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="notifyObject" Type="System.Threading.WaitHandle" />
      </Parameters>
      <Docs>
        <param name="notifyObject">當 <see langword="Timer" /> 已被處置時，應通知的 <see cref="T:System.Threading.WaitHandle" />。</param>
        <summary>將 <see cref="T:System.Threading.Timer" /> 目前的執行個體所使用的資源全部釋出，並當計時器已被處置時發出通知。</summary>
        <returns>如果函式成功，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫`Dispose`允許所使用的資源<xref:System.Threading.Timer>都重新配置用於其他用途。 如需有關`Dispose`，請參閱[清除 Unmanaged 資源上](~/docs/standard/garbage-collection/unmanaged.md)。  
  
 這個方法完成時，它會通知<xref:System.Threading.WaitHandle>所指定`notifyObject`參數。使用此多載的<xref:System.Threading.Timer.Dispose%2A>方法，如果您想要能夠封鎖，直到確定計時器已被處置。 完成所有目前排入佇列的回呼之前，不會處置計時器。  
  
> [!NOTE]
>  如果使用回呼<xref:System.Threading.Timer.Change%2A>方法，以設定`dueTime`參數為零，可能發生競爭情形時<xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29>方法多載會呼叫： 如果計時器佇列之前的新回呼<xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29>方法多載那里偵測到佇列沒有回呼，<xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29>會繼續封鎖; 否則計時器會處置時新的回撥會被排入佇列，而<xref:System.ObjectDisposedException>新回呼呼叫時，會擲回<xref:System.Threading.Timer.Change%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="notifyObject" /> 參數為 <see langword="null" />。</exception>
      </Docs>
    </Member>
  </Members>
</Type>