<Type Name="Timer" FullName="System.Threading.Timer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1eef97181838354ff4be8e0d34d51c4d79667eea" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36406781" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Timer : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Timer extends System.MarshalByRefObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Timer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Timer&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer sealed : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="F#" Value="type Timer = class&#xA;    inherit MarshalByRefObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Timer</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="993e8-101">提供一套機制，可於指定間隔在執行緒集區執行緒上執行方法。</span>
      <span class="sxs-lookup">
        <span data-stu-id="993e8-101">Provides a mechanism for executing a method on a thread pool thread at specified intervals.</span>
      </span>
      <span data-ttu-id="993e8-102">這個類別無法被繼承。</span>
      <span class="sxs-lookup">
        <span data-stu-id="993e8-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="993e8-103">使用<xref:System.Threading.TimerCallback>來指定您想要的方法委派<xref:System.Threading.Timer>來執行。</span><span class="sxs-lookup"><span data-stu-id="993e8-103">Use a <xref:System.Threading.TimerCallback> delegate to specify the method you want the <xref:System.Threading.Timer> to execute.</span></span> <span data-ttu-id="993e8-104">簽章<xref:System.Threading.TimerCallback>委派：</span><span class="sxs-lookup"><span data-stu-id="993e8-104">The signature of the <xref:System.Threading.TimerCallback> delegate is:</span></span>  
  
```csharp  
void TimerCallback(Object state)  
```  
  
```cpp  
void TimerCallback(Object state)  
```  
  
```vb  
Sub TimerCallback(state As Object)  
```  
  
 <span data-ttu-id="993e8-105">當計時器建構，而且無法變更，會指定計時器委派。</span><span class="sxs-lookup"><span data-stu-id="993e8-105">The timer delegate is specified when the timer is constructed, and cannot be changed.</span></span> <span data-ttu-id="993e8-106">此方法不會建立計時器; 在執行緒上執行它會執行上<xref:System.Threading.ThreadPool>系統所提供的執行緒。</span><span class="sxs-lookup"><span data-stu-id="993e8-106">The method does not execute on the thread that created the timer; it executes on a <xref:System.Threading.ThreadPool> thread supplied by the system.</span></span>  
  
> [!TIP]
> <span data-ttu-id="993e8-107">.NET 包含四個類別，名為`Timer`，每個的其中提供不同的功能：</span><span class="sxs-lookup"><span data-stu-id="993e8-107">.NET includes four classes named `Timer`, each of which offers different functionality:</span></span>  
>
> - <span data-ttu-id="993e8-108"><xref:System.Timers.Timer?displayProperty=nameWithType>其引發事件，並在其中執行程式碼或更多的事件接收器的固定間隔。</span><span class="sxs-lookup"><span data-stu-id="993e8-108"><xref:System.Timers.Timer?displayProperty=nameWithType>, which fires an event and executes the code in one or more event sinks at regular intervals.</span></span> <span data-ttu-id="993e8-109">類別僅供做為伺服器為基礎或在多執行緒環境; 中的服務元件它沒有使用者介面，並在執行階段看不到。</span><span class="sxs-lookup"><span data-stu-id="993e8-109">The class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.</span></span>
> - <span data-ttu-id="993e8-110"><xref:System.Threading.Timer?displayProperty=nameWithType>它會在執行緒集區執行緒上定期執行的單一回呼方法。</span><span class="sxs-lookup"><span data-stu-id="993e8-110"><xref:System.Threading.Timer?displayProperty=nameWithType>, which executes a single callback method on a thread pool thread at regular intervals.</span></span> <span data-ttu-id="993e8-111">計時器會具現化，且無法變更時，會定義回呼方法。</span><span class="sxs-lookup"><span data-stu-id="993e8-111">The callback method is defined when the timer is instantiated and cannot be changed.</span></span> <span data-ttu-id="993e8-112">像<xref:System.Timers.Timer?displayProperty=nameWithType>類別，這個類別僅供做為伺服器或服務的元件，多執行緒環境中使用，不過它沒有使用者介面，並在執行階段看不到。</span><span class="sxs-lookup"><span data-stu-id="993e8-112">Like the <xref:System.Timers.Timer?displayProperty=nameWithType> class, this class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.</span></span>
> - <span data-ttu-id="993e8-113"><xref:System.Windows.Forms.Timer?displayProperty=nameWithType> (只有.NET framework)，就會引發事件，並在一或多個事件接收器上定期執行程式碼的 Windows Form 元件。</span><span class="sxs-lookup"><span data-stu-id="993e8-113"><xref:System.Windows.Forms.Timer?displayProperty=nameWithType> (.NET Framework only), a Windows Forms component that fires an event and executes the code in one or more event sinks at regular intervals.</span></span> <span data-ttu-id="993e8-114">元件沒有使用者介面和適用於在單一執行緒環境中。它會在 UI 執行緒上執行。</span><span class="sxs-lookup"><span data-stu-id="993e8-114">The component has no user interface and is designed for use in a single-threaded environment; it executes on the UI thread.</span></span>
> - <span data-ttu-id="993e8-115"><xref:System.Web.UI.Timer?displayProperty=nameWithType> (只有.NET framework)，以固定間隔執行非同步或同步網頁回傳的 ASP.NET 元件。</span><span class="sxs-lookup"><span data-stu-id="993e8-115"><xref:System.Web.UI.Timer?displayProperty=nameWithType> (.NET Framework only), an ASP.NET component that performs asynchronous or synchronous web page postbacks at a regular interval.</span></span>
  
 <span data-ttu-id="993e8-116">當您建立計時器時，您可以指定為第一個執行方法之前要等待的時間量 （到期時間），及後續執行 （期間） 之間等待的時間量。</span><span class="sxs-lookup"><span data-stu-id="993e8-116">When you create a timer, you can specify an amount of time to wait before the first execution of the method (due time), and an amount of time to wait between subsequent executions (period).</span></span> <span data-ttu-id="993e8-117"><xref:System.Threading.Timer>類別具有的系統時鐘為相同的解析度。</span><span class="sxs-lookup"><span data-stu-id="993e8-117">The <xref:System.Threading.Timer> class has the same resolution as the system clock.</span></span> <span data-ttu-id="993e8-118">這表示，如果長度小於系統時鐘的解析度<xref:System.Threading.TimerCallback>委派會在約 15 毫秒在 Windows 7 和 Windows 8 的系統系統時鐘的解析度所定義的間隔執行。</span><span class="sxs-lookup"><span data-stu-id="993e8-118">This means that if the period is less than the resolution of the system clock, the <xref:System.Threading.TimerCallback> delegate will execute at intervals defined by the resolution of the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems.</span></span> <span data-ttu-id="993e8-119">您可以變更到期時間和句號或停用計時器，使用<xref:System.Threading.Timer.Change%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="993e8-119">You can change the due time and period, or disable the timer, by using the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="993e8-120">只要您使用<xref:System.Threading.Timer>，您必須保留給它的參考。</span><span class="sxs-lookup"><span data-stu-id="993e8-120">As long as you are using a <xref:System.Threading.Timer>, you must keep a reference to it.</span></span> <span data-ttu-id="993e8-121">如同任何受管理的物件，<xref:System.Threading.Timer>沒有參考時受限於記憶體回收。</span><span class="sxs-lookup"><span data-stu-id="993e8-121">As with any managed object, a <xref:System.Threading.Timer> is subject to garbage collection when there are no references to it.</span></span> <span data-ttu-id="993e8-122">事實上，<xref:System.Threading.Timer>時仍作用中不會阻止它要收集。</span><span class="sxs-lookup"><span data-stu-id="993e8-122">The fact that a <xref:System.Threading.Timer> is still active does not prevent it from being collected.</span></span>  
  
 <span data-ttu-id="993e8-123">當不再需要計時器時，請使用<xref:System.Threading.Timer.Dispose%2A>計時器所持有的方法來釋放資源。</span><span class="sxs-lookup"><span data-stu-id="993e8-123">When a timer is no longer needed, use the <xref:System.Threading.Timer.Dispose%2A> method to free the resources held by the timer.</span></span> <span data-ttu-id="993e8-124">請注意回呼之後就會發生<xref:System.Threading.Timer.Dispose>方法多載呼叫，因為計時器佇列執行緒集區執行緒所執行的回呼。</span><span class="sxs-lookup"><span data-stu-id="993e8-124">Note that callbacks can occur after the <xref:System.Threading.Timer.Dispose> method overload has been called, because the timer queues callbacks for execution by thread pool threads.</span></span> <span data-ttu-id="993e8-125">您可以使用<xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29>方法多載，要等候直到所有的回呼已完成。</span><span class="sxs-lookup"><span data-stu-id="993e8-125">You can use the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload to wait until all callbacks have completed.</span></span>  
  
 <span data-ttu-id="993e8-126">計時器所執行的回呼方法應該是可重新進入，因為它會呼叫上<xref:System.Threading.ThreadPool>執行緒。</span><span class="sxs-lookup"><span data-stu-id="993e8-126">The callback method executed by the timer should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads.</span></span> <span data-ttu-id="993e8-127">計時器間隔是否小於執行回呼所需的時間，或如果所有的執行緒集區正在使用中，回呼會排入佇列多次，則可以在兩個執行緒集區執行緒上同時執行的回呼。</span><span class="sxs-lookup"><span data-stu-id="993e8-127">The callback can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the callback, or if all thread pool threads are in use and the callback is queued multiple times.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="993e8-128"><xref:System.Threading.Timer?displayProperty=nameWithType> 是簡單的輕量型計時器，使用回呼方法，由執行緒集區。</span><span class="sxs-lookup"><span data-stu-id="993e8-128"><xref:System.Threading.Timer?displayProperty=nameWithType> is a simple, lightweight timer that uses callback methods and is served by thread pool threads.</span></span> <span data-ttu-id="993e8-129">不建議搭配 Windows Form，因為其回呼不會發生在使用者介面執行緒上。</span><span class="sxs-lookup"><span data-stu-id="993e8-129">It is not recommended for use with Windows Forms, because its callbacks do not occur on the user interface thread.</span></span> <span data-ttu-id="993e8-130"><xref:System.Windows.Forms.Timer?displayProperty=nameWithType> 為搭配 Windows Form 使用的較佳選擇。</span><span class="sxs-lookup"><span data-stu-id="993e8-130"><xref:System.Windows.Forms.Timer?displayProperty=nameWithType> is a better choice for use with Windows Forms.</span></span> <span data-ttu-id="993e8-131">如需伺服器為基礎的計時器功能，您可以考慮使用<xref:System.Timers.Timer?displayProperty=nameWithType>，其引發事件，並具有額外的功能。</span><span class="sxs-lookup"><span data-stu-id="993e8-131">For server-based timer functionality, you might consider using <xref:System.Timers.Timer?displayProperty=nameWithType>, which raises events and has additional features.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="993e8-132">下列範例會定義`StatusChecker`類別，其中包含`CheckStatus`其簽章是相同的方法為<xref:System.Threading.TimerCallback>委派。</span><span class="sxs-lookup"><span data-stu-id="993e8-132">The following example defines a `StatusChecker` class  that includes a `CheckStatus` method whose signature is the same as the <xref:System.Threading.TimerCallback> delegate.</span></span> <span data-ttu-id="993e8-133">`state`引數的`CheckStatus`方法<xref:System.Threading.AutoResetEvent>物件，用來同步處理應用程式執行緒和執行緒集區執行緒執行的回呼委派。</span><span class="sxs-lookup"><span data-stu-id="993e8-133">The  `state` argument of the `CheckStatus` method is an <xref:System.Threading.AutoResetEvent> object that is used to synchronize the application thread and the thread pool thread that executes the callback delegate.</span></span> <span data-ttu-id="993e8-134">`StatusChecker`類別也包含兩個狀態變數：</span><span class="sxs-lookup"><span data-stu-id="993e8-134">The `StatusChecker` class also includes two state variables:</span></span>  
  
 `invokeCount`  
 <span data-ttu-id="993e8-135">表示已叫用回呼方法的次數。</span><span class="sxs-lookup"><span data-stu-id="993e8-135">Indicates the number of times the callback method has been invoked.</span></span>  
  
 `maxCount`  
 <span data-ttu-id="993e8-136">決定應叫用回呼方法最大次數。</span><span class="sxs-lookup"><span data-stu-id="993e8-136">Determines the maximum number of times the callback method should be invoked.</span></span>  
  
 <span data-ttu-id="993e8-137">應用程式執行緒建立計時器，它會等待一秒，然後執行`CheckStatus`回呼方法每隔 250 毫秒。</span><span class="sxs-lookup"><span data-stu-id="993e8-137">The application thread creates the timer, which waits one second and then executes  the `CheckStatus` callback method every 250 milliseconds.</span></span> <span data-ttu-id="993e8-138">然後，應用程式執行緒會封鎖直到<xref:System.Threading.AutoResetEvent>物件收到訊號。</span><span class="sxs-lookup"><span data-stu-id="993e8-138">The application thread then blocks until the <xref:System.Threading.AutoResetEvent> object is signaled.</span></span> <span data-ttu-id="993e8-139">當`CheckStatus`回呼方法執行`maxCount`次，它會呼叫`AutoResetEvent.Set`方法，以設定的狀態<xref:System.Threading.AutoResetEvent>為收到信號的物件。</span><span class="sxs-lookup"><span data-stu-id="993e8-139">When the `CheckStatus` callback method executes `maxCount` times, it calls the `AutoResetEvent.Set` method to set the state of the <xref:System.Threading.AutoResetEvent> object to signaled.</span></span> <span data-ttu-id="993e8-140">第一次發生這種情況，應用程式執行緒呼叫<xref:System.Threading.Timer.Change%28System.Int32%2CSystem.Int32%29>方法的回呼方法現在會執行每個半秒。</span><span class="sxs-lookup"><span data-stu-id="993e8-140">The first time this happens, the application thread calls the <xref:System.Threading.Timer.Change%28System.Int32%2CSystem.Int32%29> method so that the callback method now executes every half second.</span></span> <span data-ttu-id="993e8-141">同樣地封鎖直到<xref:System.Threading.AutoResetEvent>物件收到訊號。</span><span class="sxs-lookup"><span data-stu-id="993e8-141">It once again blocks until the <xref:System.Threading.AutoResetEvent> object is signaled.</span></span> <span data-ttu-id="993e8-142">當發生這種情況時，計時器會終結藉由呼叫其<xref:System.Threading.Timer.Dispose%2A>方法，以及應用程式終止。</span><span class="sxs-lookup"><span data-stu-id="993e8-142">When this happens, the timer is destroyed by calling its <xref:System.Threading.Timer.Dispose%2A> method, and the application terminates.</span></span>  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="993e8-143">此型別具備執行緒安全。</span>
      <span class="sxs-lookup">
        <span data-stu-id="993e8-143">This type is thread safe.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Threading.TimerCallback" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="993e8-144">初始化 <see langword="Timer" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-144">Initializes a new instance of the <see langword="Timer" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback -&gt; System.Threading.Timer" Usage="new System.Threading.Timer callback" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="993e8-145">
            <see cref="T:System.Threading.TimerCallback" /> 委派，表示要執行的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-145">A <see cref="T:System.Threading.TimerCallback" /> delegate representing a method to be executed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="993e8-146">以無限週期和無限到期時間初始化 <see cref="T:System.Threading.Timer" /> 類別的新執行個體，利用新建立 <see cref="T:System.Threading.Timer" /> 物件做為狀態物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-146">Initializes a new instance of the <see cref="T:System.Threading.Timer" /> class with an infinite period and an infinite due time, using the newly created <see cref="T:System.Threading.Timer" /> object as the state object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="993e8-147">呼叫這個建構函式，當您想要使用<xref:System.Threading.Timer>物件本身做為狀態物件。</span><span class="sxs-lookup"><span data-stu-id="993e8-147">Call this constructor when you want to use the <xref:System.Threading.Timer> object itself as the state object.</span></span> <span data-ttu-id="993e8-148">在建立計時器之後, 使用<xref:System.Threading.Timer.Change%2A>方法，以設定的間隔和到期時間。</span><span class="sxs-lookup"><span data-stu-id="993e8-148">After creating the timer, use the <xref:System.Threading.Timer.Change%2A> method to set the interval and due time.</span></span>  
  
 <span data-ttu-id="993e8-149">這個建構函式會指定無限的到期時間之前的第一個回呼和回呼，以防止第一個回呼之前發生無限間隔<xref:System.Threading.Timer>物件指派給狀態物件。</span><span class="sxs-lookup"><span data-stu-id="993e8-149">This constructor specifies an infinite due time before the first callback and an infinite interval between callbacks, in order to prevent the first callback from occurring before the <xref:System.Threading.Timer> object is assigned to the state object.</span></span>  
  
 <span data-ttu-id="993e8-150">為指定的方法`callback`應該可重新進入，因為它呼叫<xref:System.Threading.ThreadPool>執行緒。</span><span class="sxs-lookup"><span data-stu-id="993e8-150">The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads.</span></span> <span data-ttu-id="993e8-151">計時器間隔是否小於一個要執行之方法所需的時間，或如果所有的執行緒集區正在使用中，此方法會排入佇列多次，則可以在兩個執行緒集區執行緒上同時執行的方法。</span><span class="sxs-lookup"><span data-stu-id="993e8-151">The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="993e8-152">下列程式碼範例會建立新的計時器，並使用計時器本身與狀態的物件。</span><span class="sxs-lookup"><span data-stu-id="993e8-152">The following code example creates a new timer, using the timer itself as the state object.</span></span> <span data-ttu-id="993e8-153"><xref:System.Threading.Timer.Change%2A>方法用來啟動計時器。</span><span class="sxs-lookup"><span data-stu-id="993e8-153">The <xref:System.Threading.Timer.Change%2A> method is used to start the timer.</span></span> <span data-ttu-id="993e8-154">當計時器回呼發生時，狀態物件用來關閉計時器。</span><span class="sxs-lookup"><span data-stu-id="993e8-154">When the timer callback occurs, the state object is used to turn the timer off.</span></span>  
  
 [!code-csharp[TimerSelfCtor#1](~/samples/snippets/csharp/VS_Snippets_Misc/timerSelfCtor/CS/source.cs#1)]
 [!code-vb[TimerSelfCtor#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/timerSelfCtor/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, int dueTime, int period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, int32 dueTime, int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As Integer, period As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, int dueTime, int period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * int * int -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.Int32" />
        <Parameter Name="period" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="993e8-155">
            <see cref="T:System.Threading.TimerCallback" /> 委派，表示要執行的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-155">A <see cref="T:System.Threading.TimerCallback" /> delegate representing a method to be executed.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="993e8-156">包含回呼方法所使用資訊的物件，或 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-156">An object containing information to be used by the callback method, or <see langword="null" />.</span>
          </span>
        </param>
        <param name="dueTime">
          <span data-ttu-id="993e8-157">叫用 <c>callback</c> 前所延遲的時間量 (以毫秒為單位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-157">The amount of time to delay before <c>callback</c> is invoked, in milliseconds.</span>
          </span>
          <span data-ttu-id="993e8-158">指定 <see cref="F:System.Threading.Timeout.Infinite" /> 以防止計時器啟動。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-158">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from starting.</span>
          </span>
          <span data-ttu-id="993e8-159">指定零 (0) 以立即啟動計時器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-159">Specify zero (0) to start the timer immediately.</span>
          </span>
        </param>
        <param name="period">
          <span data-ttu-id="993e8-160">
            <c>callback</c> 引動過程的間隔時間 (以毫秒為單位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-160">The time interval between invocations of <c>callback</c>, in milliseconds.</span>
          </span>
          <span data-ttu-id="993e8-161">指定 <see cref="F:System.Threading.Timeout.Infinite" /> 以停用週期的信號功能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-161">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="993e8-162">初始化 <see langword="Timer" /> 類別的新執行個體，使用 32 位元帶正負號的整數來指定時間間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-162">Initializes a new instance of the <see langword="Timer" /> class, using a 32-bit signed integer to specify the time interval.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="993e8-163">所指定的委派`callback`一次之後叫用參數`dueTime`結束，之後每次`period`段間隔。</span><span class="sxs-lookup"><span data-stu-id="993e8-163">The delegate specified by the `callback` parameter is invoked once after `dueTime` elapses, and thereafter each time the `period` time interval elapses.</span></span>  
  
 <span data-ttu-id="993e8-164">如果`dueTime`為零 (0)，`callback`會立即叫用。</span><span class="sxs-lookup"><span data-stu-id="993e8-164">If `dueTime` is zero (0), `callback` is invoked immediately.</span></span> <span data-ttu-id="993e8-165">如果`dueTime`是<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，`callback`不會叫用; 計時器已停用，但可以藉由呼叫重新啟用<xref:System.Threading.Timer.Change%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="993e8-165">If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` is not invoked; the timer is disabled, but can be re-enabled by calling the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="993e8-166">因為<xref:System.Threading.Timer>類別具有的系統時鐘，這是大約 15 毫秒在 Windows 7 和 Windows 8 的系統上，以相同的解析度`callback`委派會執行的間隔由系統時鐘的解析度，如果`period`小於系統時鐘的解析度。</span><span class="sxs-lookup"><span data-stu-id="993e8-166">Because the <xref:System.Threading.Timer> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the `callback` delegate executes at intervals defined by the resolution of the system clock if `period` is less than the resolution of the system clock.</span></span> <span data-ttu-id="993e8-167">如果`period`為零 (0) 或<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>和`dueTime`不<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，`callback`叫用一次; 週期性的計時器行為已停用，但是可加以重新啟用使用<xref:System.Threading.Timer.Change%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="993e8-167">If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="993e8-168">為指定的方法`callback`應該可重新進入，因為它呼叫<xref:System.Threading.ThreadPool>執行緒。</span><span class="sxs-lookup"><span data-stu-id="993e8-168">The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads.</span></span> <span data-ttu-id="993e8-169">計時器間隔是否小於一個要執行之方法所需的時間，或如果所有的執行緒集區正在使用中，此方法會排入佇列多次，則可以在兩個執行緒集區執行緒上同時執行的方法。</span><span class="sxs-lookup"><span data-stu-id="993e8-169">The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="993e8-170">下列程式碼範例示範如何建立`TimerCallback`委派和初始化的新執行個體`Timer`類別。</span><span class="sxs-lookup"><span data-stu-id="993e8-170">The following code example shows how to create a `TimerCallback` delegate and initialize a new instance of the `Timer` class.</span></span>  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="993e8-171">
            <paramref name="dueTime" /> 或 <paramref name="period" /> 參數是負的，且不等於 <see cref="F:System.Threading.Timeout.Infinite" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-171">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="993e8-172">
            <paramref name="callback" /> 參數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-172">The <paramref name="callback" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, long dueTime, long period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, int64 dueTime, int64 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As Long, period As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, long dueTime, long period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * int64 * int64 -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.Int64" />
        <Parameter Name="period" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="993e8-173">
            <see cref="T:System.Threading.TimerCallback" /> 委派，表示要執行的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-173">A <see cref="T:System.Threading.TimerCallback" /> delegate representing a method to be executed.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="993e8-174">包含回呼方法所使用資訊的物件，或 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-174">An object containing information to be used by the callback method, or <see langword="null" />.</span>
          </span>
        </param>
        <param name="dueTime">
          <span data-ttu-id="993e8-175">叫用 <c>callback</c> 前所延遲的時間量 (以毫秒為單位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-175">The amount of time to delay before <c>callback</c> is invoked, in milliseconds.</span>
          </span>
          <span data-ttu-id="993e8-176">指定 <see cref="F:System.Threading.Timeout.Infinite" /> 以防止計時器啟動。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-176">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from starting.</span>
          </span>
          <span data-ttu-id="993e8-177">指定零 (0) 以立即啟動計時器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-177">Specify zero (0) to start the timer immediately.</span>
          </span>
        </param>
        <param name="period">
          <span data-ttu-id="993e8-178">
            <c>callback</c> 引動過程的間隔時間 (以毫秒為單位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-178">The time interval between invocations of <c>callback</c>, in milliseconds.</span>
          </span>
          <span data-ttu-id="993e8-179">指定 <see cref="F:System.Threading.Timeout.Infinite" /> 以停用週期的信號功能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-179">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="993e8-180">初始化 <see langword="Timer" /> 類別的新執行個體，使用 64 位元帶正負號的整數來測量時間間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-180">Initializes a new instance of the <see langword="Timer" /> class, using 64-bit signed integers to measure time intervals.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="993e8-181">所指定的委派`callback`一次之後叫用參數`dueTime`結束，之後每次`period`段間隔。</span><span class="sxs-lookup"><span data-stu-id="993e8-181">The delegate specified by the `callback` parameter is invoked once after `dueTime` elapses, and thereafter each time the `period` time interval elapses.</span></span>  
  
 <span data-ttu-id="993e8-182">如果`dueTime`為零 (0)，`callback`會立即叫用。</span><span class="sxs-lookup"><span data-stu-id="993e8-182">If `dueTime` is zero (0), `callback` is invoked immediately.</span></span> <span data-ttu-id="993e8-183">如果`dueTime`是<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，`callback`不會叫用; 計時器已停用，但可以藉由呼叫重新啟用<xref:System.Threading.Timer.Change%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="993e8-183">If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` is not invoked; the timer is disabled, but can be re-enabled by calling the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="993e8-184">因為<xref:System.Threading.Timer>類別具有的系統時鐘，這是大約 15 毫秒在 Windows 7 和 Windows 8 的系統上，以相同的解析度`callback`委派會執行的間隔由系統時鐘的解析度，如果`period`小於系統時鐘的解析度。</span><span class="sxs-lookup"><span data-stu-id="993e8-184">Because the <xref:System.Threading.Timer> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the `callback` delegate executes at intervals defined by the resolution of the system clock if `period` is less than the resolution of the system clock.</span></span> <span data-ttu-id="993e8-185">如果`period`為零 (0) 或<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>和`dueTime`不<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，`callback`叫用一次; 週期性的計時器行為已停用，但是可加以重新啟用使用<xref:System.Threading.Timer.Change%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="993e8-185">If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="993e8-186">為指定的方法`callback`應該可重新進入，因為它呼叫<xref:System.Threading.ThreadPool>執行緒。</span><span class="sxs-lookup"><span data-stu-id="993e8-186">The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads.</span></span> <span data-ttu-id="993e8-187">計時器間隔是否小於一個要執行之方法所需的時間，或如果所有的執行緒集區正在使用中，此方法會排入佇列多次，則可以在兩個執行緒集區執行緒上同時執行的方法。</span><span class="sxs-lookup"><span data-stu-id="993e8-187">The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="993e8-188">
            <paramref name="dueTime" /> 或 <paramref name="period" /> 參數是負的，且不等於 <see cref="F:System.Threading.Timeout.Infinite" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-188">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="993e8-189">
            <paramref name="dueTime" /> 或 <paramref name="period" /> 參數大於 4294967294。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-189">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is greater than 4294967294.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, valuetype System.TimeSpan dueTime, valuetype System.TimeSpan period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As TimeSpan, period As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * TimeSpan * TimeSpan -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.TimeSpan" />
        <Parameter Name="period" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="993e8-190">代表要執行之方法的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-190">A delegate representing a method to be executed.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="993e8-191">包含回呼方法所使用資訊的物件，或 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-191">An object containing information to be used by the callback method, or <see langword="null" />.</span>
          </span>
        </param>
        <param name="dueTime">
          <span data-ttu-id="993e8-192">
            <c>callback</c> 參數叫用其方法前所延遲的時間量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-192">The amount of time to delay before the <c>callback</c> parameter invokes its methods.</span>
          </span>
          <span data-ttu-id="993e8-193">指定負 1 (-1) 毫秒以防止啟動計時器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-193">Specify negative one (-1) milliseconds to prevent the timer from starting.</span>
          </span>
          <span data-ttu-id="993e8-194">指定零 (0) 以立即啟動計時器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-194">Specify zero (0) to start the timer immediately.</span>
          </span>
        </param>
        <param name="period">
          <span data-ttu-id="993e8-195">為 <c>callback</c> 所參考方法於兩次引動過程之間的時間間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-195">The time interval between invocations of the methods referenced by <c>callback</c>.</span>
          </span>
          <span data-ttu-id="993e8-196">指定負 1 (-1) 毫秒以停用定期的信號方式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-196">Specify negative one (-1) milliseconds to disable periodic signaling.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="993e8-197">初始化 <see langword="Timer" /> 類別的新執行個體，使用 <see cref="T:System.TimeSpan" /> 值來測量時間間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-197">Initializes a new instance of the <see langword="Timer" /> class, using <see cref="T:System.TimeSpan" /> values to measure time intervals.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="993e8-198">所指定的委派`callback`一次之後叫用參數`dueTime`結束，之後每次`period`段間隔。</span><span class="sxs-lookup"><span data-stu-id="993e8-198">The delegate specified by the `callback` parameter is invoked once after `dueTime` elapses, and thereafter each time the `period` time interval elapses.</span></span>  
  
 <span data-ttu-id="993e8-199">如果`dueTime`為零 (0)，`callback`會立即叫用。</span><span class="sxs-lookup"><span data-stu-id="993e8-199">If `dueTime` is zero (0), `callback` is invoked immediately.</span></span> <span data-ttu-id="993e8-200">如果`dueTime`為負一 (-1) 毫秒，`callback`不會叫用; 計時器已停用，但可以藉由呼叫重新啟用<xref:System.Threading.Timer.Change%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="993e8-200">If `dueTime` is negative one (-1) milliseconds, `callback` is not invoked; the timer is disabled, but can be re-enabled by calling the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="993e8-201">因為<xref:System.Threading.Timer>類別具有的系統時鐘，這是大約 15 毫秒在 Windows 7 和 Windows 8 的系統上，以相同的解析度`callback`委派會執行的間隔由系統時鐘的解析度，如果`period`小於系統時鐘的解析度。</span><span class="sxs-lookup"><span data-stu-id="993e8-201">Because the <xref:System.Threading.Timer> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the `callback` delegate executes at intervals defined by the resolution of the system clock if `period` is less than the resolution of the system clock.</span></span> <span data-ttu-id="993e8-202">如果`period`是零 (0) 或負一 (-1) 毫秒和`dueTime`是正數，`callback`叫用一次; 週期性的計時器行為已停用，但是可加以重新啟用使用<xref:System.Threading.Timer.Change%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="993e8-202">If `period` is zero (0) or negative one (-1) milliseconds and `dueTime` is positive, `callback` is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="993e8-203">為指定的方法`callback`應該可重新進入，因為它呼叫<xref:System.Threading.ThreadPool>執行緒。</span><span class="sxs-lookup"><span data-stu-id="993e8-203">The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads.</span></span> <span data-ttu-id="993e8-204">計時器間隔是否小於一個要執行之方法所需的時間，或如果所有的執行緒集區正在使用中，此方法會排入佇列多次，則可以在兩個執行緒集區執行緒上同時執行的方法。</span><span class="sxs-lookup"><span data-stu-id="993e8-204">The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="993e8-205">下列程式碼範例示範如何建立`TimerCallback`委派和初始化的新執行個體`Timer`類別。</span><span class="sxs-lookup"><span data-stu-id="993e8-205">The following code example shows how to create a `TimerCallback` delegate and initialize a new instance of the `Timer` class.</span></span>  
  
 [!code-cpp[System.Threading.Timer2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.Timer2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer2/CS/source2.cs#1)]
 [!code-vb[System.Threading.Timer2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="993e8-206">
            <paramref name="dueTime" /> 或 <paramref name="period" /> 值的毫秒數為負，不等於 <see cref="F:System.Threading.Timeout.Infinite" />，或大於 <see cref="F:System.Int32.MaxValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-206">The number of milliseconds in the value of <paramref name="dueTime" /> or <paramref name="period" /> is negative and not equal to <see cref="F:System.Threading.Timeout.Infinite" />, or is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="993e8-207">
            <paramref name="callback" /> 參數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-207">The <paramref name="callback" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, uint dueTime, uint period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, unsigned int32 dueTime, unsigned int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As UInteger, period As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, System::UInt32 dueTime, System::UInt32 period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * uint32 * uint32 -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.UInt32" />
        <Parameter Name="period" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="993e8-208">代表要執行之方法的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-208">A delegate representing a method to be executed.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="993e8-209">包含回呼方法所使用資訊的物件，或 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-209">An object containing information to be used by the callback method, or <see langword="null" />.</span>
          </span>
        </param>
        <param name="dueTime">
          <span data-ttu-id="993e8-210">叫用 <c>callback</c> 前所延遲的時間量 (以毫秒為單位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-210">The amount of time to delay before <c>callback</c> is invoked, in milliseconds.</span>
          </span>
          <span data-ttu-id="993e8-211">指定 <see cref="F:System.Threading.Timeout.Infinite" /> 以防止計時器啟動。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-211">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from starting.</span>
          </span>
          <span data-ttu-id="993e8-212">指定零 (0) 以立即啟動計時器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-212">Specify zero (0) to start the timer immediately.</span>
          </span>
        </param>
        <param name="period">
          <span data-ttu-id="993e8-213">
            <c>callback</c> 引動過程的間隔時間 (以毫秒為單位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-213">The time interval between invocations of <c>callback</c>, in milliseconds.</span>
          </span>
          <span data-ttu-id="993e8-214">指定 <see cref="F:System.Threading.Timeout.Infinite" /> 以停用週期的信號功能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-214">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="993e8-215">初始化 <see langword="Timer" /> 類別的新執行個體，使用 32 位元不帶正負號的整數 (Unsigned Integer) 來測量時間間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-215">Initializes a new instance of the <see langword="Timer" /> class, using 32-bit unsigned integers to measure time intervals.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="993e8-216">所指定的委派`callback`一次之後叫用參數`dueTime`結束，之後每次`period`段間隔。</span><span class="sxs-lookup"><span data-stu-id="993e8-216">The delegate specified by the `callback` parameter is invoked once after `dueTime` elapses, and thereafter each time the `period` time interval elapses.</span></span>  
  
 <span data-ttu-id="993e8-217">如果`dueTime`為零 (0)，`callback`會立即叫用。</span><span class="sxs-lookup"><span data-stu-id="993e8-217">If `dueTime` is zero (0), `callback` is invoked immediately.</span></span> <span data-ttu-id="993e8-218">如果`dueTime`是<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，`callback`不會叫用; 計時器已停用，但可以藉由呼叫重新啟用<xref:System.Threading.Timer.Change%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="993e8-218">If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` is not invoked; the timer is disabled, but can be re-enabled by calling the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="993e8-219">因為<xref:System.Threading.Timer>類別具有的系統時鐘，這是大約 15 毫秒在 Windows 7 和 Windows 8 的系統上，以相同的解析度`callback`委派會執行的間隔由系統時鐘的解析度，如果`period`小於系統時鐘的解析度。</span><span class="sxs-lookup"><span data-stu-id="993e8-219">Because the <xref:System.Threading.Timer> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the `callback` delegate executes at intervals defined by the resolution of the system clock if `period` is less than the resolution of the system clock.</span></span> <span data-ttu-id="993e8-220">如果`period`為零 (0) 或<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>和`dueTime`不<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，`callback`叫用一次; 週期性的計時器行為已停用，但是可加以重新啟用使用<xref:System.Threading.Timer.Change%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="993e8-220">If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="993e8-221">為指定的方法`callback`應該可重新進入，因為它呼叫<xref:System.Threading.ThreadPool>執行緒。</span><span class="sxs-lookup"><span data-stu-id="993e8-221">The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads.</span></span> <span data-ttu-id="993e8-222">計時器間隔是否小於一個要執行之方法所需的時間，或如果所有的執行緒集區正在使用中，此方法會排入佇列多次，則可以在兩個執行緒集區執行緒上同時執行的方法。</span><span class="sxs-lookup"><span data-stu-id="993e8-222">The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="993e8-223">
            <paramref name="dueTime" /> 或 <paramref name="period" /> 參數是負的，且不等於 <see cref="F:System.Threading.Timeout.Infinite" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-223">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="993e8-224">
            <paramref name="callback" /> 參數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-224">The <paramref name="callback" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Change">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="993e8-225">變更開始的時間和計時器的方法引動過程之間的時間間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-225">Changes the start time and the interval between method invocations for a timer.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (int dueTime, int period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(int32 dueTime, int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As Integer, period As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(int dueTime, int period);" />
      <MemberSignature Language="F#" Value="member this.Change : int * int -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.Int32" />
        <Parameter Name="period" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dueTime">
          <span data-ttu-id="993e8-226">延遲的時間長度 (以毫秒為單位)，一旦超過這個時間就叫用先前建構 <see cref="T:System.Threading.Timer" /> 時指定的回呼方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-226">The amount of time to delay before the invoking the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds.</span>
          </span>
          <span data-ttu-id="993e8-227">指定 <see cref="F:System.Threading.Timeout.Infinite" /> 以防止計時器重新啟動。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-227">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from restarting.</span>
          </span>
          <span data-ttu-id="993e8-228">指定零 (0) 以立即重新啟動計時器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-228">Specify zero (0) to restart the timer immediately.</span>
          </span>
        </param>
        <param name="period">
          <span data-ttu-id="993e8-229">建構 <see cref="T:System.Threading.Timer" /> 時指定的回呼方法的引動過程間隔時間 (以毫秒為單位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-229">The time interval between invocations of the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds.</span>
          </span>
          <span data-ttu-id="993e8-230">指定 <see cref="F:System.Threading.Timeout.Infinite" /> 以停用週期的信號功能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-230">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="993e8-231">變更開始的時間和計時器的方法引動過程之間的時間間隔，使用 32 位元帶正負號的整數來測量時間間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-231">Changes the start time and the interval between method invocations for a timer, using 32-bit signed integers to measure time intervals.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="993e8-232">如果已成功更新計時器，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-232">
              <see langword="true" /> if the timer was successfully updated; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="993e8-233">一次之後叫用回呼方法`dueTime`超過，以及此後每個時間所指定的時間間隔`period`捨棄。</span><span class="sxs-lookup"><span data-stu-id="993e8-233">The callback method is invoked once after `dueTime` elapses, and thereafter each time the time interval specified by `period` elapses.</span></span>  
  
 <span data-ttu-id="993e8-234">如果`dueTime`是零 (0)，立即叫用回呼方法。</span><span class="sxs-lookup"><span data-stu-id="993e8-234">If `dueTime` is zero (0), the callback method is invoked immediately.</span></span> <span data-ttu-id="993e8-235">如果`dueTime`是<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，絕不會叫用回呼方法，則為已停用計時器，但可以重新啟用呼叫<xref:System.Threading.Timer.Change%2A>並指定為正值`dueTime`。</span><span class="sxs-lookup"><span data-stu-id="993e8-235">If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `dueTime`.</span></span>  
  
 <span data-ttu-id="993e8-236">如果`period`為零 (0) 或<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，和`dueTime`不<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>、 回呼方法叫用一次; 已停用定期的計時器行為，但可以重新啟用呼叫<xref:System.Threading.Timer.Change%2A>並指定為正值`period`.</span><span class="sxs-lookup"><span data-stu-id="993e8-236">If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `period`.</span></span>  
  
 <span data-ttu-id="993e8-237"><xref:System.Threading.Timer.Change%2A>方法可以從呼叫<xref:System.Threading.TimerCallback>委派。</span><span class="sxs-lookup"><span data-stu-id="993e8-237">The <xref:System.Threading.Timer.Change%2A> method can be called from the <xref:System.Threading.TimerCallback> delegate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="993e8-238">下列程式碼範例示範如何啟動`Timer`和固定數目的引動過程之後, 變更其週期。</span><span class="sxs-lookup"><span data-stu-id="993e8-238">The following code example demonstrates how to start a `Timer` and, after a set number of invocations, change its period.</span></span>  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="993e8-239">
            <see cref="T:System.Threading.Timer" /> 已經處置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-239">The <see cref="T:System.Threading.Timer" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="993e8-240">
            <paramref name="dueTime" /> 或 <paramref name="period" /> 參數是負的，且不等於 <see cref="F:System.Threading.Timeout.Infinite" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-240">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (long dueTime, long period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(int64 dueTime, int64 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As Long, period As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(long dueTime, long period);" />
      <MemberSignature Language="F#" Value="member this.Change : int64 * int64 -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.Int64" />
        <Parameter Name="period" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="dueTime">
          <span data-ttu-id="993e8-241">延遲的時間長度 (以毫秒為單位)，一旦超過這個時間就叫用先前建構 <see cref="T:System.Threading.Timer" /> 時指定的回呼方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-241">The amount of time to delay before the invoking the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds.</span>
          </span>
          <span data-ttu-id="993e8-242">指定 <see cref="F:System.Threading.Timeout.Infinite" /> 以防止計時器重新啟動。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-242">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from restarting.</span>
          </span>
          <span data-ttu-id="993e8-243">指定零 (0) 以立即重新啟動計時器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-243">Specify zero (0) to restart the timer immediately.</span>
          </span>
        </param>
        <param name="period">
          <span data-ttu-id="993e8-244">建構 <see cref="T:System.Threading.Timer" /> 時指定的回呼方法的引動過程間隔時間 (以毫秒為單位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-244">The time interval between invocations of the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds.</span>
          </span>
          <span data-ttu-id="993e8-245">指定 <see cref="F:System.Threading.Timeout.Infinite" /> 以停用週期的信號功能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-245">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="993e8-246">變更開始的時間和計時器的方法引動過程之間的時間間隔，使用 64 位元帶正負號的整數來測量時間間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-246">Changes the start time and the interval between method invocations for a timer, using 64-bit signed integers to measure time intervals.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="993e8-247">如果已成功更新計時器，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-247">
              <see langword="true" /> if the timer was successfully updated; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="993e8-248">一次之後叫用回呼方法`dueTime`超過，以及此後每個時間所指定的時間間隔`period`捨棄。</span><span class="sxs-lookup"><span data-stu-id="993e8-248">The callback method is invoked once after `dueTime` elapses, and thereafter each time the time interval specified by `period` elapses.</span></span>  
  
 <span data-ttu-id="993e8-249">如果`dueTime`是零 (0)，立即叫用回呼方法。</span><span class="sxs-lookup"><span data-stu-id="993e8-249">If `dueTime` is zero (0), the callback method is invoked immediately.</span></span> <span data-ttu-id="993e8-250">如果`dueTime`是<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，絕不會叫用回呼方法，則為已停用計時器，但可以重新啟用呼叫<xref:System.Threading.Timer.Change%2A>並指定為正值`dueTime`。</span><span class="sxs-lookup"><span data-stu-id="993e8-250">If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `dueTime`.</span></span>  
  
 <span data-ttu-id="993e8-251">如果`period`為零 (0) 或<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，和`dueTime`不<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>、 回呼方法叫用一次; 已停用定期的計時器行為，但可以重新啟用呼叫<xref:System.Threading.Timer.Change%2A>並指定為正值`period`.</span><span class="sxs-lookup"><span data-stu-id="993e8-251">If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `period`.</span></span>  
  
 <span data-ttu-id="993e8-252"><xref:System.Threading.Timer.Change%2A>方法可以從呼叫<xref:System.Threading.TimerCallback>委派。</span><span class="sxs-lookup"><span data-stu-id="993e8-252">The <xref:System.Threading.Timer.Change%2A> method can be called from the <xref:System.Threading.TimerCallback> delegate.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="993e8-253">
            <see cref="T:System.Threading.Timer" /> 已經處置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-253">The <see cref="T:System.Threading.Timer" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="993e8-254">
            <paramref name="dueTime" /> 或 <paramref name="period" /> 參數值小於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-254">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is less than -1.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="993e8-255">
            <paramref name="dueTime" /> 或 <paramref name="period" /> 參數大於 4294967294。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-255">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is greater than 4294967294.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(valuetype System.TimeSpan dueTime, valuetype System.TimeSpan period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As TimeSpan, period As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="F#" Value="member this.Change : TimeSpan * TimeSpan -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.TimeSpan" />
        <Parameter Name="period" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="dueTime">
          <span data-ttu-id="993e8-256">
            <see cref="T:System.TimeSpan" />，表示延遲的時間長度，一旦超過這個時間就叫用先前建構 <see cref="T:System.Threading.Timer" /> 時指定的回呼方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-256">A <see cref="T:System.TimeSpan" /> representing the amount of time to delay before invoking the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed.</span>
          </span>
          <span data-ttu-id="993e8-257">指定負 1 (-1) 毫秒以防止重新啟動計時器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-257">Specify negative one (-1) milliseconds to prevent the timer from restarting.</span>
          </span>
          <span data-ttu-id="993e8-258">指定零 (0) 以立即重新啟動計時器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-258">Specify zero (0) to restart the timer immediately.</span>
          </span>
        </param>
        <param name="period">
          <span data-ttu-id="993e8-259">建構 <see cref="T:System.Threading.Timer" /> 時指定的回呼方法的引動過程間隔時間。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-259">The time interval between invocations of the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed.</span>
          </span>
          <span data-ttu-id="993e8-260">指定負 1 (-1) 毫秒以停用定期的信號方式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-260">Specify negative one (-1) milliseconds to disable periodic signaling.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="993e8-261">變更開始的時間和計時器的方法引動過程之間的時間間隔，使用 <see cref="T:System.TimeSpan" /> 值來測量時間間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-261">Changes the start time and the interval between method invocations for a timer, using <see cref="T:System.TimeSpan" /> values to measure time intervals.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="993e8-262">如果已成功更新計時器，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-262">
              <see langword="true" /> if the timer was successfully updated; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="993e8-263">一次之後叫用回呼方法`dueTime`超過，以及此後每個時間所指定的時間間隔`period`捨棄。</span><span class="sxs-lookup"><span data-stu-id="993e8-263">The callback method is invoked once after `dueTime` elapses, and thereafter each time the time interval specified by `period` elapses.</span></span>  
  
 <span data-ttu-id="993e8-264">如果`dueTime`是零 (0)，立即叫用回呼方法。</span><span class="sxs-lookup"><span data-stu-id="993e8-264">If `dueTime` is zero (0), the callback method is invoked immediately.</span></span> <span data-ttu-id="993e8-265">如果`dueTime`是負一 (-1) 毫秒，絕不會叫用回呼方法，則為已停用計時器，但可以重新啟用呼叫<xref:System.Threading.Timer.Change%2A>並指定為正值`dueTime`。</span><span class="sxs-lookup"><span data-stu-id="993e8-265">If `dueTime` is negative one (-1) milliseconds, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `dueTime`.</span></span>  
  
 <span data-ttu-id="993e8-266">如果`period`是零 (0) 或負一 (-1) 毫秒，和`dueTime`是正數，一次叫用回呼方法，則為週期性的計時器行為會停用，但是可以藉由呼叫重新啟用<xref:System.Threading.Timer.Change%2A>和指定的值大於零`period`。</span><span class="sxs-lookup"><span data-stu-id="993e8-266">If `period` is zero (0) or negative one (-1) milliseconds, and `dueTime` is positive, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a value greater than zero for `period`.</span></span>  
  
 <span data-ttu-id="993e8-267"><xref:System.Threading.Timer.Change%2A>方法可以從呼叫<xref:System.Threading.TimerCallback>委派。</span><span class="sxs-lookup"><span data-stu-id="993e8-267">The <xref:System.Threading.Timer.Change%2A> method can be called from the <xref:System.Threading.TimerCallback> delegate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="993e8-268">下列程式碼範例示範如何啟動`Timer`和固定數目的引動過程之後, 變更其週期。</span><span class="sxs-lookup"><span data-stu-id="993e8-268">The following code example demonstrates how to start a `Timer` and, after a set number of invocations, change its period.</span></span>  
  
 [!code-cpp[System.Threading.Timer2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.Timer2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer2/CS/source2.cs#1)]
 [!code-vb[System.Threading.Timer2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="993e8-269">
            <see cref="T:System.Threading.Timer" /> 已經處置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-269">The <see cref="T:System.Threading.Timer" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="993e8-270">
            <paramref name="dueTime" /> 或 <paramref name="period" /> 參數值小於 -1 (以毫秒為單位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-270">The <paramref name="dueTime" /> or <paramref name="period" /> parameter, in milliseconds, is less than -1.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="993e8-271">
            <paramref name="dueTime" /> 或 <paramref name="period" /> 參數值大於 4294967294 (以毫秒為單位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-271">The <paramref name="dueTime" /> or <paramref name="period" /> parameter, in milliseconds, is greater than 4294967294.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (uint dueTime, uint period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(unsigned int32 dueTime, unsigned int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As UInteger, period As UInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(System::UInt32 dueTime, System::UInt32 period);" />
      <MemberSignature Language="F#" Value="member this.Change : uint32 * uint32 -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.UInt32" />
        <Parameter Name="period" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="dueTime">
          <span data-ttu-id="993e8-272">延遲的時間長度 (以毫秒為單位)，一旦超過這個時間就叫用先前建構 <see cref="T:System.Threading.Timer" /> 時指定的回呼方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-272">The amount of time to delay before the invoking the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds.</span>
          </span>
          <span data-ttu-id="993e8-273">指定 <see cref="F:System.Threading.Timeout.Infinite" /> 以防止計時器重新啟動。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-273">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from restarting.</span>
          </span>
          <span data-ttu-id="993e8-274">指定零 (0) 以立即重新啟動計時器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-274">Specify zero (0) to restart the timer immediately.</span>
          </span>
        </param>
        <param name="period">
          <span data-ttu-id="993e8-275">建構 <see cref="T:System.Threading.Timer" /> 時指定的回呼方法的引動過程間隔時間 (以毫秒為單位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-275">The time interval between invocations of the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds.</span>
          </span>
          <span data-ttu-id="993e8-276">指定 <see cref="F:System.Threading.Timeout.Infinite" /> 以停用週期的信號功能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-276">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="993e8-277">變更開始的時間和計時器的方法引動過程之間的時間間隔，使用 32 位元不帶正負號的整數來測量時間間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-277">Changes the start time and the interval between method invocations for a timer, using 32-bit unsigned integers to measure time intervals.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="993e8-278">如果已成功更新計時器，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-278">
              <see langword="true" /> if the timer was successfully updated; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="993e8-279">一次之後叫用回呼方法`dueTime`超過，以及此後每個時間所指定的時間間隔`period`捨棄。</span><span class="sxs-lookup"><span data-stu-id="993e8-279">The callback method is invoked once after `dueTime` elapses, and thereafter each time the time interval specified by `period` elapses.</span></span>  
  
 <span data-ttu-id="993e8-280">如果`dueTime`是零 (0)，立即叫用回呼方法。</span><span class="sxs-lookup"><span data-stu-id="993e8-280">If `dueTime` is zero (0), the callback method is invoked immediately.</span></span> <span data-ttu-id="993e8-281">如果`dueTime`是<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，絕不會叫用回呼方法，則為已停用計時器，但可以重新啟用呼叫<xref:System.Threading.Timer.Change%2A>並指定為正值`dueTime`。</span><span class="sxs-lookup"><span data-stu-id="993e8-281">If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `dueTime`.</span></span>  
  
 <span data-ttu-id="993e8-282">如果`period`為零 (0) 或<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>，和`dueTime`不<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>、 回呼方法叫用一次; 已停用定期的計時器行為，但可以重新啟用呼叫<xref:System.Threading.Timer.Change%2A>並指定為正值`period`.</span><span class="sxs-lookup"><span data-stu-id="993e8-282">If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `period`.</span></span>  
  
 <span data-ttu-id="993e8-283"><xref:System.Threading.Timer.Change%2A>方法可以從呼叫<xref:System.Threading.TimerCallback>委派。</span><span class="sxs-lookup"><span data-stu-id="993e8-283">The <xref:System.Threading.Timer.Change%2A> method can be called from the <xref:System.Threading.TimerCallback> delegate.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="993e8-284">
            <see cref="T:System.Threading.Timer" /> 已經處置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-284">The <see cref="T:System.Threading.Timer" /> has already been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="993e8-285">將 <see cref="T:System.Threading.Timer" /> 目前的執行個體所使用的資源全部釋出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-285">Releases all resources used by the current instance of <see cref="T:System.Threading.Timer" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="timer.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="993e8-286">將 <see cref="T:System.Threading.Timer" /> 目前的執行個體所使用的資源全部釋出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-286">Releases all resources used by the current instance of <see cref="T:System.Threading.Timer" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="993e8-287">呼叫`Dispose`允許所使用的資源<xref:System.Threading.Timer>都重新配置用於其他用途。</span><span class="sxs-lookup"><span data-stu-id="993e8-287">Calling `Dispose` allows the resources used by the <xref:System.Threading.Timer> to be reallocated for other purposes.</span></span> <span data-ttu-id="993e8-288">如需有關`Dispose`，請參閱[清除 Unmanaged 資源上](~/docs/standard/garbage-collection/unmanaged.md)。</span><span class="sxs-lookup"><span data-stu-id="993e8-288">For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="993e8-289">之後，就會發生回呼<xref:System.Threading.Timer.Dispose>方法多載呼叫，因為計時器佇列執行緒集區執行緒所執行的回呼。</span><span class="sxs-lookup"><span data-stu-id="993e8-289">Callbacks can occur after the <xref:System.Threading.Timer.Dispose> method overload has been called, because the timer queues callbacks for execution by thread pool threads.</span></span> <span data-ttu-id="993e8-290">您可以使用<xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29>方法多載，要等候直到所有的回呼已完成。</span><span class="sxs-lookup"><span data-stu-id="993e8-290">You can use the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload to wait until all callbacks have completed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="993e8-291">下列程式碼範例示範如何釋放所持有的資源`Timer`。</span><span class="sxs-lookup"><span data-stu-id="993e8-291">The following code example shows how to free the resources held by a `Timer`.</span></span>  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public bool Dispose (System.Threading.WaitHandle notifyObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Dispose(class System.Threading.WaitHandle notifyObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Dispose(System.Threading.WaitHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dispose (notifyObject As WaitHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Dispose(System::Threading::WaitHandle ^ notifyObject);" />
      <MemberSignature Language="F#" Value="member this.Dispose : System.Threading.WaitHandle -&gt; bool" Usage="timer.Dispose notifyObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="notifyObject" Type="System.Threading.WaitHandle" />
      </Parameters>
      <Docs>
        <param name="notifyObject">
          <span data-ttu-id="993e8-292">當 <see langword="Timer" /> 已被處置時，應通知的 <see cref="T:System.Threading.WaitHandle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-292">The <see cref="T:System.Threading.WaitHandle" /> to be signaled when the <see langword="Timer" /> has been disposed of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="993e8-293">將 <see cref="T:System.Threading.Timer" /> 目前的執行個體所使用的資源全部釋出，並當計時器已被處置時發出通知。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-293">Releases all resources used by the current instance of <see cref="T:System.Threading.Timer" /> and signals when the timer has been disposed of.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="993e8-294">如果函式成功，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-294">
              <see langword="true" /> if the function succeeds; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="993e8-295">呼叫`Dispose`允許所使用的資源<xref:System.Threading.Timer>都重新配置用於其他用途。</span><span class="sxs-lookup"><span data-stu-id="993e8-295">Calling `Dispose` allows the resources used by the <xref:System.Threading.Timer> to be reallocated for other purposes.</span></span> <span data-ttu-id="993e8-296">如需有關`Dispose`，請參閱[清除 Unmanaged 資源上](~/docs/standard/garbage-collection/unmanaged.md)。</span><span class="sxs-lookup"><span data-stu-id="993e8-296">For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span>  
  
 <span data-ttu-id="993e8-297">這個方法完成時，它會通知<xref:System.Threading.WaitHandle>所指定`notifyObject`參數。使用此多載的<xref:System.Threading.Timer.Dispose%2A>方法，如果您想要能夠封鎖，直到確定計時器已被處置。</span><span class="sxs-lookup"><span data-stu-id="993e8-297">When this method completes, it signals the <xref:System.Threading.WaitHandle> specified by the `notifyObject` parameter.Use this overload of the <xref:System.Threading.Timer.Dispose%2A> method if you want to be able to block until you are certain that the timer has been disposed.</span></span> <span data-ttu-id="993e8-298">完成所有目前排入佇列的回呼之前，不會處置計時器。</span><span class="sxs-lookup"><span data-stu-id="993e8-298">The timer is not disposed until all currently queued callbacks have completed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="993e8-299">如果使用回呼<xref:System.Threading.Timer.Change%2A>方法，以設定`dueTime`參數為零，可能發生競爭情形時<xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29>方法多載會呼叫： 如果計時器佇列之前的新回呼<xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29>方法多載那里偵測到佇列沒有回呼，<xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29>會繼續封鎖; 否則計時器會處置時新的回撥會被排入佇列，而<xref:System.ObjectDisposedException>新回呼呼叫時，會擲回<xref:System.Threading.Timer.Change%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="993e8-299">If the callback uses the <xref:System.Threading.Timer.Change%2A> method to set the `dueTime` parameter to zero, a race condition can occur when the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload is called: If the timer queues a new callback before the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload detects that there are no callbacks queued, <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> continues to block; otherwise, the timer is disposed while the new callback is being queued, and an <xref:System.ObjectDisposedException> is thrown when the new callback calls the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="993e8-300">
            <paramref name="notifyObject" /> 參數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="993e8-300">The <paramref name="notifyObject" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>