<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="HostExecutionContext.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac586fd19cb38423cc3d28ee101130679b486f94e87.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">86fd19cb38423cc3d28ee101130679b486f94e87</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.HostExecutionContext">
          <source>Encapsulates and propagates the host execution context across threads.</source>
          <target state="translated">在執行緒之間封裝及散佈主應用程式執行內容。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.HostExecutionContext">
          <source>The <ph id="ph1">&lt;xref:System.Threading.HostExecutionContext&gt;</ph> is part of a larger <ph id="ph2">&lt;xref:System.Threading.ExecutionContext&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.HostExecutionContext&gt;</ph>是較大的一部分<ph id="ph2">&lt;xref:System.Threading.ExecutionContext&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.HostExecutionContext">
          <source>The host context migrates, or flows, with the execution context.</source>
          <target state="translated">主機內容移轉或流動，與執行內容。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="T:System.Threading.HostExecutionContext">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.HostExecutionContext" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Threading.HostExecutionContext" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:System.Threading.HostExecutionContext.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.HostExecutionContext" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Threading.HostExecutionContext" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.HostExecutionContext.#ctor">
          <source>The default constructor creates a host execution context whose <ph id="ph1">&lt;xref:System.Threading.HostExecutionContext.State%2A&gt;</ph> property value is <ph id="ph2">`null`</ph>.</source>
          <target state="translated">預設建構函式會建立主機執行內容的<ph id="ph1">&lt;xref:System.Threading.HostExecutionContext.State%2A&gt;</ph>屬性值是<ph id="ph2">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.Threading.HostExecutionContext.#ctor(System.Object)">
          <source>An object representing the host execution context state.</source>
          <target state="translated">表示主應用程式執行內容狀態的物件。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Threading.HostExecutionContext.#ctor(System.Object)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.HostExecutionContext" /&gt;</ph> class using the specified state.</source>
          <target state="translated">使用指定的狀態來初始化 <ph id="ph1">&lt;see cref="T:System.Threading.HostExecutionContext" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.HostExecutionContext.#ctor(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.HostExecutionContext&gt;</ph> is included with the <ph id="ph2">&lt;xref:System.Threading.ExecutionContext&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.HostExecutionContext&gt;</ph>隨附<ph id="ph2">&lt;xref:System.Threading.ExecutionContext&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.HostExecutionContext.#ctor(System.Object)">
          <source>The <ph id="ph1">`state`</ph> represents a safe handle containing the <ph id="ph2">`IUnknown`</ph> pointer for the host.</source>
          <target state="translated"><ph id="ph1">`state`</ph>代表一個安全控制代碼，其中包含<ph id="ph2">`IUnknown`</ph>主控件的指標。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Threading.HostExecutionContext.CreateCopy">
          <source>Creates a copy of the current host execution context.</source>
          <target state="translated">建立目前主應用程式執行內容的複本。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Threading.HostExecutionContext.CreateCopy">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.HostExecutionContext" /&gt;</ph> object representing the host context for the current thread.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.HostExecutionContext" /&gt;</ph> 物件，表示目前執行緒的主應用程式內容。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.HostExecutionContext.CreateCopy">
          <source>The copy can be used as the parameter to a <ph id="ph1">&lt;xref:System.Threading.HostExecutionContextManager.SetHostExecutionContext%2A?displayProperty=nameWithType&gt;</ph> method call.</source>
          <target state="translated">複製可以當做參數來<ph id="ph1">&lt;xref:System.Threading.HostExecutionContextManager.SetHostExecutionContext%2A?displayProperty=nameWithType&gt;</ph>方法呼叫。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="T:System.Threading.HostExecutionContext">
          <source>Releases resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.Threading.HostExecutionContext" /&gt;</ph> class.</source>
          <target state="translated">將 <ph id="ph1">&lt;see cref="T:System.Threading.HostExecutionContext" /&gt;</ph> 類別的目前執行個體所使用的資源釋出。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Threading.HostExecutionContext.Dispose">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.Threading.HostExecutionContext" /&gt;</ph> class.</source>
          <target state="translated">將 <ph id="ph1">&lt;see cref="T:System.Threading.HostExecutionContext" /&gt;</ph> 類別目前的執行個體所使用的資源全部釋出。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.HostExecutionContext.Dispose">
          <source>Call <ph id="ph1">`Dispose`</ph> when you are finished using the <ph id="ph2">&lt;xref:System.Threading.HostExecutionContext&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose`</ph> 使用完畢時，請呼叫 <ph id="ph2">&lt;xref:System.Threading.HostExecutionContext&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.HostExecutionContext.Dispose">
          <source>The <ph id="ph1">`Dispose`</ph> method leaves the <ph id="ph2">&lt;xref:System.Threading.HostExecutionContext&gt;</ph> in an unusable state.</source>
          <target state="translated"><ph id="ph1">`Dispose`</ph> 方法會將 <ph id="ph2">&lt;xref:System.Threading.HostExecutionContext&gt;</ph> 保留在無法使用的狀態。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.HostExecutionContext.Dispose">
          <source>After calling <ph id="ph1">`Dispose`</ph>, you must release all references to the <ph id="ph2">&lt;xref:System.Threading.HostExecutionContext&gt;</ph> so the garbage collector can reclaim the memory that the <ph id="ph3">&lt;xref:System.Threading.HostExecutionContext&gt;</ph> was occupying.</source>
          <target state="translated">在呼叫<ph id="ph1">`Dispose`</ph>，您必須釋放所有參考<ph id="ph2">&lt;xref:System.Threading.HostExecutionContext&gt;</ph>讓記憶體回收行程可以回收記憶體的<ph id="ph3">&lt;xref:System.Threading.HostExecutionContext&gt;</ph>所佔用。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.HostExecutionContext.Dispose">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>清除 Unmanaged 資源上<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>和<bpt id="p2">[</bpt>實作 Dispose 方法<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.HostExecutionContext.Dispose">
          <source>Always call <ph id="ph1">`Dispose`</ph> before you release your last reference to the <ph id="ph2">&lt;xref:System.Threading.HostExecutionContext&gt;</ph>.</source>
          <target state="translated">在您釋放最後一個 <ph id="ph1">`Dispose`</ph> 參考之前，請務必呼叫 <ph id="ph2">&lt;xref:System.Threading.HostExecutionContext&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.HostExecutionContext.Dispose">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id="ph1">&lt;xref:System.Threading.HostExecutionContext&gt;</ph> object's <ph id="ph2">`Finalize`</ph> method.</source>
          <target state="translated">否則工作窗格所使用的資源不會釋放，直到記憶體回收行程呼叫 <ph id="ph1">&lt;xref:System.Threading.HostExecutionContext&gt;</ph> 物件的 <ph id="ph2">`Finalize`</ph> 方法。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Threading.HostExecutionContext.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> 表示釋放 Managed 和 Unmanaged 資源，<ph id="ph2">&lt;see langword="false" /&gt;</ph> 則表示只釋放 Unmanaged 資源。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Threading.HostExecutionContext.Dispose(System.Boolean)">
          <source>When overridden in a derived class, releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, and optionally releases the managed resources.</source>
          <target state="translated">當在衍生類別中覆寫時，釋放 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> 所使用的 Unmanaged 資源，並選擇性釋放 Managed 資源。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.HostExecutionContext.Dispose(System.Boolean)">
          <source>This method is called by the <ph id="ph1">&lt;xref:System.Threading.HostExecutionContext.Dispose&gt;</ph> method overload and the finalizer.</source>
          <target state="translated">這個方法會呼叫<ph id="ph1">&lt;xref:System.Threading.HostExecutionContext.Dispose&gt;</ph>方法多載和完成項。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.HostExecutionContext.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Threading.HostExecutionContext.Dispose&gt;</ph> invokes this protected method with the <ph id="ph2">`disposing`</ph> parameter set to <ph id="ph3">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.HostExecutionContext.Dispose&gt;</ph> 叫用這個受保護的方法與<ph id="ph2">`disposing`</ph>參數設定為<ph id="ph3">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.HostExecutionContext.Dispose(System.Boolean)">
          <source>The finalizer invokes this method with <ph id="ph1">`disposing`</ph> set to <ph id="ph2">`false`</ph>.</source>
          <target state="translated">完成項會叫用此方法時<ph id="ph1">`disposing`</ph>設<ph id="ph2">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.HostExecutionContext.Dispose(System.Boolean)">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this <ph id="ph3">&lt;xref:System.Threading.HostExecutionContext&gt;</ph> references.</source>
          <target state="translated"><ph id="ph1">`disposing`</ph> 參數為 <ph id="ph2">`true`</ph> 時，這個方法會釋放 <ph id="ph3">&lt;xref:System.Threading.HostExecutionContext&gt;</ph> 參考的任何 Managed 物件所掌握的資源。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.HostExecutionContext.Dispose(System.Boolean)">
          <source>This method invokes the <ph id="ph1">`Dispose`</ph> method of each referenced object.</source>
          <target state="translated">這個方法會叫用每個參考物件的 <ph id="ph1">`Dispose`</ph> 方法。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.HostExecutionContext.Dispose(System.Boolean)">
          <source>This method can be called multiple times by other objects.</source>
          <target state="translated">這個方法可以被其他物件呼叫多次。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.HostExecutionContext.Dispose(System.Boolean)">
          <source>When overriding this method, be careful not to reference objects that have been previously disposed in an earlier call.</source>
          <target state="translated">在覆寫這個方法，小心不要參考先前處置的早期呼叫中的物件。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="P:System.Threading.HostExecutionContext.State">
          <source>Gets or sets the state of the host execution context.</source>
          <target state="translated">取得或設定主應用程式執行內容的狀態。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.HostExecutionContext.State">
          <source>An object representing the host execution context state.</source>
          <target state="translated">表示主應用程式執行內容狀態的物件。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.HostExecutionContext.State">
          <source>The <ph id="ph1">&lt;xref:System.Threading.HostExecutionContext.State%2A&gt;</ph> property value represents a safe handle containing the <ph id="ph2">`IUnknown`</ph> pointer for the host.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.HostExecutionContext.State%2A&gt;</ph>屬性值都代表一個安全控制代碼，其中包含<ph id="ph2">`IUnknown`</ph>主控件的指標。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>