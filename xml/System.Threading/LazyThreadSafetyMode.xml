<Type Name="LazyThreadSafetyMode" FullName="System.Threading.LazyThreadSafetyMode">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bffe15f7432e9c6a32d5ebae79cbf8cad97790ab" />
    <Meta Name="ms.sourcegitcommit" Value="d0bb31ec8354fa58c62c2a646057eec11d3e2150" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="08/17/2018" />
    <Meta Name="ms.locfileid" Value="36605915" />
  </Metadata>
  <TypeSignature Language="C#" Value="public enum LazyThreadSafetyMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed LazyThreadSafetyMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Threading.LazyThreadSafetyMode" />
  <TypeSignature Language="VB.NET" Value="Public Enum LazyThreadSafetyMode" />
  <TypeSignature Language="C++ CLI" Value="public enum class LazyThreadSafetyMode" />
  <TypeSignature Language="F#" Value="type LazyThreadSafetyMode = " />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>
      <span data-ttu-id="26d5a-101">指定 <see cref="T:System.Lazy`1" /> 執行個體如何同步處理多個執行緒進行的存取。</span>
      <span class="sxs-lookup">
        <span data-stu-id="26d5a-101">Specifies how a <see cref="T:System.Lazy`1" /> instance synchronizes access among multiple threads.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26d5a-102">若要指定使用這個列舉型別`mode`參數的<xref:System.Lazy%601>建構函式。</span><span class="sxs-lookup"><span data-stu-id="26d5a-102">Use this enumeration to specify the `mode` parameter of <xref:System.Lazy%601> constructors.</span></span> <span data-ttu-id="26d5a-103">執行緒同步處理所有建構函式的影響可以描述根據這個列舉型別，是否還`mode`參數。</span><span class="sxs-lookup"><span data-stu-id="26d5a-103">The effects of all constructors on thread synchronization can be described in terms of this enumeration, whether or not they have `mode` parameters.</span></span>  
  
 <span data-ttu-id="26d5a-104">A<xref:System.Lazy%601>執行個體已初始化使用者指定的初始設定方法或預設建構函式`T`。</span><span class="sxs-lookup"><span data-stu-id="26d5a-104">A <xref:System.Lazy%601> instance is initialized either by a user-specified initialization method or by the default constructor for `T`.</span></span> <span data-ttu-id="26d5a-105">初始設定方法由`valueFactory`參數的<xref:System.Lazy%601>建構函式。</span><span class="sxs-lookup"><span data-stu-id="26d5a-105">The initialization method is specified by the `valueFactory` parameter of a <xref:System.Lazy%601> constructor.</span></span> <span data-ttu-id="26d5a-106">此方法傳回的執行個體`T`，這是延遲具現化的執行個體的型別<xref:System.Lazy%601>。</span><span class="sxs-lookup"><span data-stu-id="26d5a-106">The method returns an instance of `T`, which is the type that is lazily instantiated by the instance of <xref:System.Lazy%601>.</span></span> <span data-ttu-id="26d5a-107">如果建構函式沒有`valueFactory`參數，預設建構函式`T`用來初始化<xref:System.Lazy%601>執行個體。</span><span class="sxs-lookup"><span data-stu-id="26d5a-107">If a constructor does not have a `valueFactory` parameter, the default constructor for `T` is used to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="26d5a-108">在任一情況下，初始化就會發生第一次呼叫<xref:System.Lazy%601.Value%2A?displayProperty=nameWithType>屬性。</span><span class="sxs-lookup"><span data-stu-id="26d5a-108">In either case, initialization occurs the first time you call the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="26d5a-109">除了指定的執行緒安全<xref:System.Lazy%601>執行個體，這個列舉型別會影響例外狀況快取。</span><span class="sxs-lookup"><span data-stu-id="26d5a-109">In addition to specifying the thread safety of a <xref:System.Lazy%601> instance, this enumeration affects exception caching.</span></span> <span data-ttu-id="26d5a-110">例外狀況的快取<xref:System.Lazy%601>執行個體，您有機會只有一個初始化執行個體。</span><span class="sxs-lookup"><span data-stu-id="26d5a-110">When exceptions are cached for a <xref:System.Lazy%601> instance, you get only one chance to initialize the instance.</span></span> <span data-ttu-id="26d5a-111">如果發生例外狀況的第一次呼叫<xref:System.Lazy%601.Value%2A?displayProperty=nameWithType>屬性，例外狀況快取，並重新擲回的所有後續呼叫<xref:System.Lazy%601.Value%2A?displayProperty=nameWithType>屬性。</span><span class="sxs-lookup"><span data-stu-id="26d5a-111">If an exception is thrown the first time you call the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property, that exception is cached and rethrown on all subsequent calls to the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="26d5a-112">快取例外狀況的優點是即使在發生錯誤時，任何兩個執行緒一律取得相同的結果。</span><span class="sxs-lookup"><span data-stu-id="26d5a-112">The advantage of caching exceptions is that any two threads always get the same result, even when errors occur.</span></span>  
  
 <span data-ttu-id="26d5a-113">當您指定 PublicationOnly 模式時，會永遠不會快取例外狀況。</span><span class="sxs-lookup"><span data-stu-id="26d5a-113">When you specify the PublicationOnly mode, exceptions are never cached.</span></span> <span data-ttu-id="26d5a-114">當您指定 None 或 ExecutionAndPublication，快取取決於您指定 初始設定方法，或允許的預設建構函式`T`使用。</span><span class="sxs-lookup"><span data-stu-id="26d5a-114">When you specify None or ExecutionAndPublication, caching depends on whether you specify an initialization method or allow the default constructor for `T` to be used.</span></span> <span data-ttu-id="26d5a-115">指定初始設定方法，可啟用這兩種模式的例外狀況快取。</span><span class="sxs-lookup"><span data-stu-id="26d5a-115">Specifying an initialization method enables exception caching for these two modes.</span></span> <span data-ttu-id="26d5a-116">初始設定方法可以非常簡單。</span><span class="sxs-lookup"><span data-stu-id="26d5a-116">The initialization method can be very simple.</span></span> <span data-ttu-id="26d5a-117">例如，它可能會呼叫 `T` 的預設建構函式：C# 為 `new Lazy<Contents>(() => new Contents(), mode)`，或 Visual Basic 為 `New Lazy(Of Contents)(Function() New Contents())`。</span><span class="sxs-lookup"><span data-stu-id="26d5a-117">For example, it might call the default constructor for `T`: `new Lazy<Contents>(() => new Contents(), mode)` in C#, or `New Lazy(Of Contents)(Function() New Contents())` in Visual Basic.</span></span> <span data-ttu-id="26d5a-118">如果您使用未指定初始設定方法的預設建構函式所擲回的例外狀況的建構函式`T`不會快取。</span><span class="sxs-lookup"><span data-stu-id="26d5a-118">If you use a constructor that does not specify an initialization method, exceptions that are thrown by the default constructor for `T` are not cached.</span></span> <span data-ttu-id="26d5a-119">下表摘要說明快取行為的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="26d5a-119">The following table summarizes exception caching behavior.</span></span>  
  
|<span data-ttu-id="26d5a-120">模式</span><span class="sxs-lookup"><span data-stu-id="26d5a-120">Mode</span></span>|<span data-ttu-id="26d5a-121">使用初始設定方法</span><span class="sxs-lookup"><span data-stu-id="26d5a-121">Using initialization method</span></span>|<span data-ttu-id="26d5a-122">使用預設建構函式 `T`</span><span class="sxs-lookup"><span data-stu-id="26d5a-122">Using default constructor for `T`</span></span>|  
|----------|---------------------------------|---------------------------------------|  
|<span data-ttu-id="26d5a-123">無</span><span class="sxs-lookup"><span data-stu-id="26d5a-123">None</span></span>|<span data-ttu-id="26d5a-124">快取</span><span class="sxs-lookup"><span data-stu-id="26d5a-124">Cached</span></span>|<span data-ttu-id="26d5a-125">不會快取</span><span class="sxs-lookup"><span data-stu-id="26d5a-125">Not cached</span></span>|  
|<span data-ttu-id="26d5a-126">PublicationOnly</span><span class="sxs-lookup"><span data-stu-id="26d5a-126">PublicationOnly</span></span>|<span data-ttu-id="26d5a-127">不會快取</span><span class="sxs-lookup"><span data-stu-id="26d5a-127">Not cached</span></span>|<span data-ttu-id="26d5a-128">不會快取</span><span class="sxs-lookup"><span data-stu-id="26d5a-128">Not cached</span></span>|  
|<span data-ttu-id="26d5a-129">ExecutionAndPublication</span><span class="sxs-lookup"><span data-stu-id="26d5a-129">ExecutionAndPublication</span></span>|<span data-ttu-id="26d5a-130">快取</span><span class="sxs-lookup"><span data-stu-id="26d5a-130">Cached</span></span>|<span data-ttu-id="26d5a-131">不會快取</span><span class="sxs-lookup"><span data-stu-id="26d5a-131">Not cached</span></span>|  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ExecutionAndPublication">
      <MemberSignature Language="C#" Value="ExecutionAndPublication" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode ExecutionAndPublication = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication" />
      <MemberSignature Language="VB.NET" Value="ExecutionAndPublication" />
      <MemberSignature Language="C++ CLI" Value="ExecutionAndPublication" />
      <MemberSignature Language="F#" Value="ExecutionAndPublication = 2" Usage="System.Threading.LazyThreadSafetyMode.ExecutionAndPublication" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="26d5a-132">使用鎖定來確保只有單一執行緒能夠以安全執行緒方式初始化 <see cref="T:System.Lazy`1" /> 執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26d5a-132">Locks are used to ensure that only a single thread can initialize a <see cref="T:System.Lazy`1" /> instance in a thread-safe manner.</span>
          </span>
          <span data-ttu-id="26d5a-133">如果初始設定方法 (如果沒有初始設定方法，則為預設建構函式) 在內部使用鎖定，可能會發生死結。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26d5a-133">If the initialization method (or the default constructor, if there is no initialization method) uses locks internally, deadlocks can occur.</span>
          </span>
          <span data-ttu-id="26d5a-134">如果您使用的 <see cref="T:System.Lazy`1" /> 建構函式指定初始設定方法 (<paramref name="valueFactory" /> 參數)，而且當您初次呼叫 <see cref="P:System.Lazy`1.Value" /> 屬性時，該初始設定方法擲回例外狀況 (或無法處理例外狀況)，則會快取此例外狀況，並在後續呼叫 <see cref="P:System.Lazy`1.Value" /> 屬性時再次擲回此例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26d5a-134">If you use a <see cref="T:System.Lazy`1" /> constructor that specifies an initialization method (<paramref name="valueFactory" /> parameter), and if that initialization method throws an exception (or fails to handle an exception) the first time you call the <see cref="P:System.Lazy`1.Value" /> property, then the exception is cached and thrown again on subsequent calls to the <see cref="P:System.Lazy`1.Value" /> property.</span>
          </span>
          <span data-ttu-id="26d5a-135">如果您使用未指定初始設定方法的 <see cref="T:System.Lazy`1" /> 建構函式，則不會快取 <paramref name="T" /> 的預設建構函式擲回的例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26d5a-135">If you use a <see cref="T:System.Lazy`1" /> constructor that does not specify an initialization method, exceptions that are thrown by the default constructor for <paramref name="T" /> are not cached.</span>
          </span>
          <span data-ttu-id="26d5a-136">在此情況下，後續呼叫 <see cref="P:System.Lazy`1.Value" /> 屬性可能會成功初始化 <see cref="T:System.Lazy`1" /> 執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26d5a-136">In that case, a subsequent call to the <see cref="P:System.Lazy`1.Value" /> property might successfully initialize the <see cref="T:System.Lazy`1" /> instance.</span>
          </span>
          <span data-ttu-id="26d5a-137">如果初始設定方法以遞迴方式存取 <see cref="T:System.Lazy`1" /> 執行個體的 <see cref="P:System.Lazy`1.Value" /> 屬性，則會擲回 <see cref="T:System.InvalidOperationException" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26d5a-137">If the initialization method recursively accesses the <see cref="P:System.Lazy`1.Value" /> property of the <see cref="T:System.Lazy`1" /> instance, an <see cref="T:System.InvalidOperationException" /> is thrown.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="None" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode None = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.None" />
      <MemberSignature Language="VB.NET" Value="None" />
      <MemberSignature Language="C++ CLI" Value="None" />
      <MemberSignature Language="F#" Value="None = 0" Usage="System.Threading.LazyThreadSafetyMode.None" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="26d5a-138">
            <see cref="T:System.Lazy`1" /> 執行個體不是安全執行緒；如果從多個執行緒存取此執行個體，其行為未定義。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26d5a-138">The <see cref="T:System.Lazy`1" /> instance is not thread safe; if the instance is accessed from multiple threads, its behavior is undefined.</span>
          </span>
          <span data-ttu-id="26d5a-139">只有在高度重視效能且絕對不會從多個執行緒初始化 <see cref="T:System.Lazy`1" /> 執行個體時，才能使用此模式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26d5a-139">Use this mode only when high performance is crucial and the <see cref="T:System.Lazy`1" /> instance is guaranteed never to be initialized from more than one thread.</span>
          </span>
          <span data-ttu-id="26d5a-140">如果您使用的 <see cref="T:System.Lazy`1" /> 建構函式指定初始設定方法 (<paramref name="valueFactory" /> 參數)，而且當您初次呼叫 <see cref="P:System.Lazy`1.Value" /> 屬性時，該初始設定方法擲回例外狀況 (或無法處理例外狀況)，則會快取此例外狀況，並在後續呼叫 <see cref="P:System.Lazy`1.Value" /> 屬性時再次擲回此例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26d5a-140">If you use a <see cref="T:System.Lazy`1" /> constructor that specifies an initialization method (<paramref name="valueFactory" /> parameter), and if that initialization method throws an exception (or fails to handle an exception) the first time you call the <see cref="P:System.Lazy`1.Value" /> property, then the exception is cached and thrown again on subsequent calls to the <see cref="P:System.Lazy`1.Value" /> property.</span>
          </span>
          <span data-ttu-id="26d5a-141">如果您使用未指定初始設定方法的 <see cref="T:System.Lazy`1" /> 建構函式，則不會快取 <paramref name="T" /> 的預設建構函式擲回的例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26d5a-141">If you use a <see cref="T:System.Lazy`1" /> constructor that does not specify an initialization method, exceptions that are thrown by the default constructor for <paramref name="T" /> are not cached.</span>
          </span>
          <span data-ttu-id="26d5a-142">在此情況下，後續呼叫 <see cref="P:System.Lazy`1.Value" /> 屬性可能會成功初始化 <see cref="T:System.Lazy`1" /> 執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26d5a-142">In that case, a subsequent call to the <see cref="P:System.Lazy`1.Value" /> property might successfully initialize the <see cref="T:System.Lazy`1" /> instance.</span>
          </span>
          <span data-ttu-id="26d5a-143">如果初始設定方法以遞迴方式存取 <see cref="T:System.Lazy`1" /> 執行個體的 <see cref="P:System.Lazy`1.Value" /> 屬性，則會擲回 <see cref="T:System.InvalidOperationException" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26d5a-143">If the initialization method recursively accesses the <see cref="P:System.Lazy`1.Value" /> property of the <see cref="T:System.Lazy`1" /> instance, an <see cref="T:System.InvalidOperationException" /> is thrown.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="PublicationOnly">
      <MemberSignature Language="C#" Value="PublicationOnly" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode PublicationOnly = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.PublicationOnly" />
      <MemberSignature Language="VB.NET" Value="PublicationOnly" />
      <MemberSignature Language="C++ CLI" Value="PublicationOnly" />
      <MemberSignature Language="F#" Value="PublicationOnly = 1" Usage="System.Threading.LazyThreadSafetyMode.PublicationOnly" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="26d5a-144">當多個執行緒同時嘗試初始化 <see cref="T:System.Lazy`1" /> 執行個體時，所有執行緒可以執行初始設定方法 (如果沒有初始設定方法，則為預設建構函式)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26d5a-144">When multiple threads try to initialize a <see cref="T:System.Lazy`1" /> instance simultaneously, all threads are allowed to run the initialization method (or the default constructor, if there is no initialization method).</span>
          </span>
          <span data-ttu-id="26d5a-145">第一個完成初始設定的執行緒會設定 <see cref="T:System.Lazy`1" /> 執行個體的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26d5a-145">The first thread to complete initialization sets the value of the <see cref="T:System.Lazy`1" /> instance.</span>
          </span>
          <span data-ttu-id="26d5a-146">該值會傳回給任何其他同時執行初始設定方法的執行緒 (除非初始設定方法在這些執行緒上擲回例外狀況)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26d5a-146">That value is returned to any other threads that were simultaneously running the initialization method, unless the initialization method throws exceptions on those threads.</span>
          </span>
          <span data-ttu-id="26d5a-147">由競爭執行緒所建立的任何 <paramref name="T" /> 執行個體都會遭到捨棄。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26d5a-147">Any instances of <paramref name="T" /> that were created by the competing threads are discarded.</span>
          </span>
          <span data-ttu-id="26d5a-148">如果初始設定方法在任何執行緒上擲回例外狀況，該例外狀況會傳播至該執行緒上的 <see cref="P:System.Lazy`1.Value" /> 屬性之外。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26d5a-148">If the initialization method throws an exception on any thread, the exception is propagated out of the <see cref="P:System.Lazy`1.Value" /> property on that thread.</span>
          </span>
          <span data-ttu-id="26d5a-149">不會快取例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26d5a-149">The exception is not cached.</span>
          </span>
          <span data-ttu-id="26d5a-150">
            <see cref="P:System.Lazy`1.IsValueCreated" /> 屬性的值會保持為 <see langword="false" />，且後續無論是由擲回例外狀況所在的執行緒或是其他執行緒呼叫 <see cref="P:System.Lazy`1.Value" /> 屬性，都會再次執行初始設定方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26d5a-150">The value of the <see cref="P:System.Lazy`1.IsValueCreated" /> property remains <see langword="false" />, and subsequent calls to the <see cref="P:System.Lazy`1.Value" /> property, either by the thread where the exception was thrown or by other threads, cause the initialization method to run again.</span>
          </span>
          <span data-ttu-id="26d5a-151">如果初始設定方法以遞迴方式存取 <see cref="T:System.Lazy`1" /> 執行個體的 <see cref="P:System.Lazy`1.Value" /> 屬性，則不會擲回例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26d5a-151">If the initialization method recursively accesses the <see cref="P:System.Lazy`1.Value" /> property of the <see cref="T:System.Lazy`1" /> instance, no exception is thrown.</span>
          </span>
        </summary>
      </Docs>
    </Member>
  </Members>
</Type>