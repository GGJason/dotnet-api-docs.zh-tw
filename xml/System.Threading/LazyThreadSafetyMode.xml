<Type Name="LazyThreadSafetyMode" FullName="System.Threading.LazyThreadSafetyMode">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bffe15f7432e9c6a32d5ebae79cbf8cad97790ab" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="36605915" />
  </Metadata>
  <TypeSignature Language="C#" Value="public enum LazyThreadSafetyMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed LazyThreadSafetyMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Threading.LazyThreadSafetyMode" />
  <TypeSignature Language="VB.NET" Value="Public Enum LazyThreadSafetyMode" />
  <TypeSignature Language="C++ CLI" Value="public enum class LazyThreadSafetyMode" />
  <TypeSignature Language="F#" Value="type LazyThreadSafetyMode = " />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>指定 <see cref="T:System.Lazy`1" /> 執行個體如何同步處理多個執行緒進行的存取。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要指定使用這個列舉型別`mode`參數的<xref:System.Lazy%601>建構函式。 執行緒同步處理所有建構函式的影響可以描述根據這個列舉型別，是否還`mode`參數。  
  
 A<xref:System.Lazy%601>執行個體已初始化使用者指定的初始設定方法或預設建構函式`T`。 初始設定方法由`valueFactory`參數的<xref:System.Lazy%601>建構函式。 此方法傳回的執行個體`T`，這是延遲具現化的執行個體的型別<xref:System.Lazy%601>。 如果建構函式沒有`valueFactory`參數，預設建構函式`T`用來初始化<xref:System.Lazy%601>執行個體。 在任一情況下，初始化就會發生第一次呼叫<xref:System.Lazy%601.Value%2A?displayProperty=nameWithType>屬性。  
  
 除了指定的執行緒安全<xref:System.Lazy%601>執行個體，這個列舉型別會影響例外狀況快取。 例外狀況的快取<xref:System.Lazy%601>執行個體，您有機會只有一個初始化執行個體。 如果發生例外狀況的第一次呼叫<xref:System.Lazy%601.Value%2A?displayProperty=nameWithType>屬性，例外狀況快取，並重新擲回的所有後續呼叫<xref:System.Lazy%601.Value%2A?displayProperty=nameWithType>屬性。 快取例外狀況的優點是即使在發生錯誤時，任何兩個執行緒一律取得相同的結果。  
  
 當您指定 PublicationOnly 模式時，會永遠不會快取例外狀況。 當您指定 None 或 ExecutionAndPublication，快取取決於您指定 初始設定方法，或允許的預設建構函式`T`使用。 指定初始設定方法，可啟用這兩種模式的例外狀況快取。 初始設定方法可以非常簡單。 例如，它可能會呼叫 `T` 的預設建構函式：C# 為 `new Lazy<Contents>(() => new Contents(), mode)`，或 Visual Basic 為 `New Lazy(Of Contents)(Function() New Contents())`。 如果您使用未指定初始設定方法的預設建構函式所擲回的例外狀況的建構函式`T`不會快取。 下表摘要說明快取行為的例外狀況。  
  
|模式|使用初始設定方法|使用預設建構函式 `T`|  
|----------|---------------------------------|---------------------------------------|  
|無|快取|不會快取|  
|PublicationOnly|不會快取|不會快取|  
|ExecutionAndPublication|快取|不會快取|  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ExecutionAndPublication">
      <MemberSignature Language="C#" Value="ExecutionAndPublication" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode ExecutionAndPublication = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication" />
      <MemberSignature Language="VB.NET" Value="ExecutionAndPublication" />
      <MemberSignature Language="C++ CLI" Value="ExecutionAndPublication" />
      <MemberSignature Language="F#" Value="ExecutionAndPublication = 2" Usage="System.Threading.LazyThreadSafetyMode.ExecutionAndPublication" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>使用鎖定來確保只有單一執行緒能夠以安全執行緒方式初始化 <see cref="T:System.Lazy`1" /> 執行個體。 如果初始設定方法 (如果沒有初始設定方法，則為預設建構函式) 在內部使用鎖定，可能會發生死結。 如果您使用的 <see cref="T:System.Lazy`1" /> 建構函式指定初始設定方法 (<paramref name="valueFactory" /> 參數)，而且當您初次呼叫 <see cref="P:System.Lazy`1.Value" /> 屬性時，該初始設定方法擲回例外狀況 (或無法處理例外狀況)，則會快取此例外狀況，並在後續呼叫 <see cref="P:System.Lazy`1.Value" /> 屬性時再次擲回此例外狀況。 如果您使用未指定初始設定方法的 <see cref="T:System.Lazy`1" /> 建構函式，則不會快取 <paramref name="T" /> 的預設建構函式擲回的例外狀況。 在此情況下，後續呼叫 <see cref="P:System.Lazy`1.Value" /> 屬性可能會成功初始化 <see cref="T:System.Lazy`1" /> 執行個體。 如果初始設定方法以遞迴方式存取 <see cref="T:System.Lazy`1" /> 執行個體的 <see cref="P:System.Lazy`1.Value" /> 屬性，則會擲回 <see cref="T:System.InvalidOperationException" />。</summary>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="None" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode None = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.None" />
      <MemberSignature Language="VB.NET" Value="None" />
      <MemberSignature Language="C++ CLI" Value="None" />
      <MemberSignature Language="F#" Value="None = 0" Usage="System.Threading.LazyThreadSafetyMode.None" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>
          <see cref="T:System.Lazy`1" /> 執行個體不是安全執行緒；如果從多個執行緒存取此執行個體，其行為未定義。 只有在高度重視效能且絕對不會從多個執行緒初始化 <see cref="T:System.Lazy`1" /> 執行個體時，才能使用此模式。 如果您使用的 <see cref="T:System.Lazy`1" /> 建構函式指定初始設定方法 (<paramref name="valueFactory" /> 參數)，而且當您初次呼叫 <see cref="P:System.Lazy`1.Value" /> 屬性時，該初始設定方法擲回例外狀況 (或無法處理例外狀況)，則會快取此例外狀況，並在後續呼叫 <see cref="P:System.Lazy`1.Value" /> 屬性時再次擲回此例外狀況。 如果您使用未指定初始設定方法的 <see cref="T:System.Lazy`1" /> 建構函式，則不會快取 <paramref name="T" /> 的預設建構函式擲回的例外狀況。 在此情況下，後續呼叫 <see cref="P:System.Lazy`1.Value" /> 屬性可能會成功初始化 <see cref="T:System.Lazy`1" /> 執行個體。 如果初始設定方法以遞迴方式存取 <see cref="T:System.Lazy`1" /> 執行個體的 <see cref="P:System.Lazy`1.Value" /> 屬性，則會擲回 <see cref="T:System.InvalidOperationException" />。</summary>
      </Docs>
    </Member>
    <Member MemberName="PublicationOnly">
      <MemberSignature Language="C#" Value="PublicationOnly" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode PublicationOnly = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.PublicationOnly" />
      <MemberSignature Language="VB.NET" Value="PublicationOnly" />
      <MemberSignature Language="C++ CLI" Value="PublicationOnly" />
      <MemberSignature Language="F#" Value="PublicationOnly = 1" Usage="System.Threading.LazyThreadSafetyMode.PublicationOnly" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>當多個執行緒同時嘗試初始化 <see cref="T:System.Lazy`1" /> 執行個體時，所有執行緒可以執行初始設定方法 (如果沒有初始設定方法，則為預設建構函式)。 第一個完成初始設定的執行緒會設定 <see cref="T:System.Lazy`1" /> 執行個體的值。 該值會傳回給任何其他同時執行初始設定方法的執行緒 (除非初始設定方法在這些執行緒上擲回例外狀況)。 由競爭執行緒所建立的任何 <paramref name="T" /> 執行個體都會遭到捨棄。 如果初始設定方法在任何執行緒上擲回例外狀況，該例外狀況會傳播至該執行緒上的 <see cref="P:System.Lazy`1.Value" /> 屬性之外。 不會快取例外狀況。 <see cref="P:System.Lazy`1.IsValueCreated" /> 屬性的值會保持為 <see langword="false" />，且後續無論是由擲回例外狀況所在的執行緒或是其他執行緒呼叫 <see cref="P:System.Lazy`1.Value" /> 屬性，都會再次執行初始設定方法。 如果初始設定方法以遞迴方式存取 <see cref="T:System.Lazy`1" /> 執行個體的 <see cref="P:System.Lazy`1.Value" /> 屬性，則不會擲回例外狀況。</summary>
      </Docs>
    </Member>
  </Members>
</Type>