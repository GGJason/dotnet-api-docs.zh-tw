<Type Name="AutoResetEvent" FullName="System.Threading.AutoResetEvent">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="786d5f07007466fcd135c3c54003c9c7c7afcddb" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39961356" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class AutoResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AutoResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.AutoResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AutoResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class AutoResetEvent sealed : System::Threading::EventWaitHandle" />
  <TypeSignature Language="F#" Value="type AutoResetEvent = class&#xA;    inherit EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-1.1">System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="ce3ab-101">向等候的執行緒通知發生事件。</span>
      <span class="sxs-lookup">
        <span data-stu-id="ce3ab-101">Notifies a waiting thread that an event has occurred.</span>
      </span>
      <span data-ttu-id="ce3ab-102">這個類別無法被繼承。</span>
      <span class="sxs-lookup">
        <span data-stu-id="ce3ab-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ce3ab-103">`AutoResetEvent` 可讓執行緒藉由發出訊號，與彼此進行通訊。</span><span class="sxs-lookup"><span data-stu-id="ce3ab-103">`AutoResetEvent` allows threads to communicate with each other by signaling.</span></span> <span data-ttu-id="ce3ab-104">一般而言，當執行緒需要獨佔存取資源時使用這個類別。</span><span class="sxs-lookup"><span data-stu-id="ce3ab-104">Typically, you use this class when threads need exclusive access to a resource.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ce3ab-105">此類型會實作<xref:System.IDisposable>介面。</span><span class="sxs-lookup"><span data-stu-id="ce3ab-105">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="ce3ab-106">當您完成使用型別時，您應該處置它直接或間接。</span><span class="sxs-lookup"><span data-stu-id="ce3ab-106">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="ce3ab-107">若要直接處置型別，呼叫其<xref:System.IDisposable.Dispose%2A>方法中的`try` / `catch`區塊。</span><span class="sxs-lookup"><span data-stu-id="ce3ab-107">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="ce3ab-108">若要處置它間接，使用的語言建構這類`using`（在 C# 中) 或`Using`（在 Visual Basic)。</span><span class="sxs-lookup"><span data-stu-id="ce3ab-108">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="ce3ab-109">如需詳細資訊，請參閱 「 使用物件，實作 IDisposable 」 一節<xref:System.IDisposable>介面 > 主題。</span><span class="sxs-lookup"><span data-stu-id="ce3ab-109">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="ce3ab-110">執行緒藉由呼叫等候信號<xref:System.Threading.WaitHandle.WaitOne%2A>上`AutoResetEvent`。</span><span class="sxs-lookup"><span data-stu-id="ce3ab-110">A thread waits for a signal by calling <xref:System.Threading.WaitHandle.WaitOne%2A> on the `AutoResetEvent`.</span></span> <span data-ttu-id="ce3ab-111">如果`AutoResetEvent`處於 「 未收到信號的狀態，則執行緒會封鎖，等候執行緒目前控制的資源，以表示該資源可透過呼叫<xref:System.Threading.EventWaitHandle.Set%2A>。</span><span class="sxs-lookup"><span data-stu-id="ce3ab-111">If the `AutoResetEvent` is in the non-signaled state, the thread blocks, waiting for the thread that currently controls the resource to signal that the resource is available by calling <xref:System.Threading.EventWaitHandle.Set%2A>.</span></span>  
  
 <span data-ttu-id="ce3ab-112">呼叫`Set`訊號`AutoResetEvent`釋放等候中的執行緒。</span><span class="sxs-lookup"><span data-stu-id="ce3ab-112">Calling `Set` signals `AutoResetEvent` to release a waiting thread.</span></span> <span data-ttu-id="ce3ab-113">`AutoResetEvent` 單一等候執行緒被釋放，並會自動傳回為未收到信號的狀態之前，會保持收到信號。</span><span class="sxs-lookup"><span data-stu-id="ce3ab-113">`AutoResetEvent` remains signaled until a single waiting thread is released, and then automatically returns to the non-signaled state.</span></span> <span data-ttu-id="ce3ab-114">如果沒有執行緒在等候時，狀態會維持收到訊號的狀態無限期。</span><span class="sxs-lookup"><span data-stu-id="ce3ab-114">If no threads are waiting, the state remains signaled indefinitely.</span></span>  
  
 <span data-ttu-id="ce3ab-115">如果執行緒呼叫<xref:System.Threading.WaitHandle.WaitOne%2A>雖然<xref:System.Threading.AutoResetEvent>是在已收到訊號的狀態中，執行緒不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="ce3ab-115">If a thread calls <xref:System.Threading.WaitHandle.WaitOne%2A> while the <xref:System.Threading.AutoResetEvent> is in the signaled state, the thread does not block.</span></span> <span data-ttu-id="ce3ab-116"><xref:System.Threading.AutoResetEvent>立即釋放執行緒，並傳回為未收到信號的狀態。</span><span class="sxs-lookup"><span data-stu-id="ce3ab-116">The <xref:System.Threading.AutoResetEvent> releases the thread immediately and returns to the non-signaled state.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ce3ab-117">不保證，每次呼叫<xref:System.Threading.EventWaitHandle.Set%2A>方法會釋放執行緒。</span><span class="sxs-lookup"><span data-stu-id="ce3ab-117">There is no guarantee that every call to the <xref:System.Threading.EventWaitHandle.Set%2A> method will release a thread.</span></span> <span data-ttu-id="ce3ab-118">如果兩個呼叫太接近，以便之前已釋放執行緒，就會發生在第二個呼叫，會釋放只有一個執行緒。</span><span class="sxs-lookup"><span data-stu-id="ce3ab-118">If two calls are too close together, so that the second call occurs before a thread has been released, only one thread is released.</span></span> <span data-ttu-id="ce3ab-119">這是因為如果第二次呼叫未發生。</span><span class="sxs-lookup"><span data-stu-id="ce3ab-119">It is as if the second call did not happen.</span></span> <span data-ttu-id="ce3ab-120">此外，如果<xref:System.Threading.EventWaitHandle.Set%2A>沒有等待的執行緒時，會呼叫和<xref:System.Threading.AutoResetEvent>已收到訊號，呼叫沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="ce3ab-120">Also, if <xref:System.Threading.EventWaitHandle.Set%2A> is called when there are no threads waiting and the <xref:System.Threading.AutoResetEvent> is already signaled, the call has no effect.</span></span>  
  
 <span data-ttu-id="ce3ab-121">您可以控制的初始狀態`AutoResetEvent`藉由傳遞建構函式的布林值：`true`如果收到訊號的初始狀態和`false`否則。</span><span class="sxs-lookup"><span data-stu-id="ce3ab-121">You can control the initial state of an `AutoResetEvent` by passing a Boolean value to the constructor: `true` if the initial state is signaled and `false` otherwise.</span></span>  
  
 <span data-ttu-id="ce3ab-122">`AutoResetEvent` 也可與`static`<xref:System.Threading.WaitHandle.WaitAll%2A>和<xref:System.Threading.WaitHandle.WaitAny%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ce3ab-122">`AutoResetEvent` can also be used with the `static`<xref:System.Threading.WaitHandle.WaitAll%2A> and <xref:System.Threading.WaitHandle.WaitAny%2A> methods.</span></span>  
  
 <span data-ttu-id="ce3ab-123">如需執行緒的同步處理機制的詳細資訊，請參閱[AutoResetEvent](~/docs/standard/threading/autoresetevent.md)概念文件。</span><span class="sxs-lookup"><span data-stu-id="ce3ab-123">For more information about thread synchronization mechanisms, see [AutoResetEvent](~/docs/standard/threading/autoresetevent.md) in the conceptual documentation.</span></span>  
  
 <span data-ttu-id="ce3ab-124">從.NET Framework 2.0 版中，<xref:System.Threading.AutoResetEvent>衍生自新<xref:System.Threading.EventWaitHandle>類別。</span><span class="sxs-lookup"><span data-stu-id="ce3ab-124">Beginning with the .NET Framework version 2.0, <xref:System.Threading.AutoResetEvent> derives from the new <xref:System.Threading.EventWaitHandle> class.</span></span> <span data-ttu-id="ce3ab-125"><xref:System.Threading.AutoResetEvent>相當於<xref:System.Threading.EventWaitHandle>以建立<xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="ce3ab-125">An <xref:System.Threading.AutoResetEvent> is functionally equivalent to an <xref:System.Threading.EventWaitHandle> created with <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ce3ab-126">不同於<xref:System.Threading.AutoResetEvent>類別，<xref:System.Threading.EventWaitHandle>類別提供存取具名的系統同步處理事件。</span><span class="sxs-lookup"><span data-stu-id="ce3ab-126">Unlike the <xref:System.Threading.AutoResetEvent> class, the <xref:System.Threading.EventWaitHandle> class provides access to named system synchronization events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ce3ab-127">下列範例示範如何使用<xref:System.Threading.AutoResetEvent>呼叫一次釋放一個執行緒<xref:System.Threading.EventWaitHandle.Set%2A>方法 （在基底類別中） 每次使用者按下**Enter**索引鍵。</span><span class="sxs-lookup"><span data-stu-id="ce3ab-127">The following example shows how to use <xref:System.Threading.AutoResetEvent> to release one thread at a time, by calling the <xref:System.Threading.EventWaitHandle.Set%2A> method (on the base class) each time the user presses the **Enter** key.</span></span> <span data-ttu-id="ce3ab-128">此範例會啟動三個執行緒，等候<xref:System.Threading.AutoResetEvent>收到信號的狀態中建立。</span><span class="sxs-lookup"><span data-stu-id="ce3ab-128">The example starts three threads, which wait on an <xref:System.Threading.AutoResetEvent> that was created in the signaled state.</span></span> <span data-ttu-id="ce3ab-129">第一次釋放執行緒後立即執行，因為<xref:System.Threading.AutoResetEvent>已經處於收到信號的狀態。</span><span class="sxs-lookup"><span data-stu-id="ce3ab-129">The first thread is released immediately, because the <xref:System.Threading.AutoResetEvent> is already in the signaled state.</span></span> <span data-ttu-id="ce3ab-130">這會重設<xref:System.Threading.AutoResetEvent>未收到信號的狀態，以便後續的執行緒封鎖。</span><span class="sxs-lookup"><span data-stu-id="ce3ab-130">This resets the <xref:System.Threading.AutoResetEvent> to the non-signaled state, so that subsequent threads block.</span></span> <span data-ttu-id="ce3ab-131">已封鎖的執行緒不會釋放直到使用者放開它們一一次按下**Enter**索引鍵。</span><span class="sxs-lookup"><span data-stu-id="ce3ab-131">The blocked threads are not released until the user releases them one at a time by pressing the **Enter** key.</span></span>  
  
 <span data-ttu-id="ce3ab-132">執行緒會從第一個釋放之後<xref:System.Threading.AutoResetEvent>，在等候另一個<xref:System.Threading.AutoResetEvent>中未收到信號的狀態建立。</span><span class="sxs-lookup"><span data-stu-id="ce3ab-132">After the threads are released from the first <xref:System.Threading.AutoResetEvent>, they wait on another <xref:System.Threading.AutoResetEvent> that was created in the non-signaled state.</span></span> <span data-ttu-id="ce3ab-133">所有的三個執行緒封鎖，因此<xref:System.Threading.EventWaitHandle.Set%2A>方法必須發行所有的這些呼叫三次。</span><span class="sxs-lookup"><span data-stu-id="ce3ab-133">All three threads block, so the <xref:System.Threading.EventWaitHandle.Set%2A> method must be called three times to release them all.</span></span>  
  
 [!code-cpp[System.Threading.AutoResetEvent#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/simplerisbetter.cpp#3)]
 [!code-csharp[System.Threading.AutoResetEvent#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/simplerisbetter.cs#3)]
 [!code-vb[System.Threading.AutoResetEvent#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/simplerisbetter.vb#3)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="ce3ab-134">這個類別是安全執行緒。</span>
      <span class="sxs-lookup">
        <span data-stu-id="ce3ab-134">This class is thread safe.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AutoResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AutoResetEvent(bool initialState);" />
      <MemberSignature Language="F#" Value="new System.Threading.AutoResetEvent : bool -&gt; System.Threading.AutoResetEvent" Usage="new System.Threading.AutoResetEvent initialState" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState">
          <span data-ttu-id="ce3ab-135">
            <see langword="true" /> 表示初始狀態設定為已收到信號，<see langword="false" /> 表示初始狀態設定為未收到信號。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce3ab-135">
              <see langword="true" /> to set the initial state to signaled; <see langword="false" /> to set the initial state to non-signaled.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ce3ab-136">使用布林值 (Boolean) 來初始化 <see cref="T:System.Threading.AutoResetEvent" /> 類別的新執行個體，指出初始狀態是否設定為信號狀態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce3ab-136">Initializes a new instance of the <see cref="T:System.Threading.AutoResetEvent" /> class with a Boolean value indicating whether to set the initial state to signaled.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="ce3ab-137">下列範例會使用<xref:System.Threading.AutoResetEvent>來同步處理兩個執行緒的活動。</span><span class="sxs-lookup"><span data-stu-id="ce3ab-137">The following example uses an <xref:System.Threading.AutoResetEvent> to synchronize the activities of two threads.</span></span> <span data-ttu-id="ce3ab-138">第一個執行緒，也就是應用程式執行緒，執行`Main`。</span><span class="sxs-lookup"><span data-stu-id="ce3ab-138">The first thread, which is the application thread, executes `Main`.</span></span> <span data-ttu-id="ce3ab-139">它會將值寫入受保護的資源，亦即`static`(`Shared` Visual Basic 中) 名為欄位`number`。</span><span class="sxs-lookup"><span data-stu-id="ce3ab-139">It writes values to the protected resource, which is a `static` (`Shared` in Visual Basic) field named `number`.</span></span> <span data-ttu-id="ce3ab-140">第二個執行緒執行靜態`ThreadProc`方法，它會讀取寫入的值`Main`。</span><span class="sxs-lookup"><span data-stu-id="ce3ab-140">The second thread executes the static `ThreadProc` method, which reads the values written by `Main`.</span></span>  
  
 <span data-ttu-id="ce3ab-141">`ThreadProc`方法會等候<xref:System.Threading.AutoResetEvent>。</span><span class="sxs-lookup"><span data-stu-id="ce3ab-141">The `ThreadProc` method waits for the <xref:System.Threading.AutoResetEvent>.</span></span> <span data-ttu-id="ce3ab-142">當`Main`呼叫<xref:System.Threading.EventWaitHandle.Set%2A>方法<xref:System.Threading.AutoResetEvent>，則`ThreadProc`方法會讀取一個值。</span><span class="sxs-lookup"><span data-stu-id="ce3ab-142">When `Main` calls the <xref:System.Threading.EventWaitHandle.Set%2A> method on the <xref:System.Threading.AutoResetEvent>, the `ThreadProc` method reads one value.</span></span> <span data-ttu-id="ce3ab-143"><xref:System.Threading.AutoResetEvent>立即重設，所以`ThreadProc`方法會等候一次。</span><span class="sxs-lookup"><span data-stu-id="ce3ab-143">The <xref:System.Threading.AutoResetEvent> immediately resets, so the `ThreadProc` method waits again.</span></span>  
  
 <span data-ttu-id="ce3ab-144">程式邏輯會保證`ThreadProc`方法將永遠不會讀取相同的值兩次。</span><span class="sxs-lookup"><span data-stu-id="ce3ab-144">The program logic guarantees that the `ThreadProc` method will never read the same value two times.</span></span> <span data-ttu-id="ce3ab-145">它不保證`ThreadProc`方法會讀取寫入的每個值`Main`。</span><span class="sxs-lookup"><span data-stu-id="ce3ab-145">It does not guarantee that the `ThreadProc` method will read every value written by `Main`.</span></span> <span data-ttu-id="ce3ab-146">這項保證會需要第二個<xref:System.Threading.AutoResetEvent>鎖定。</span><span class="sxs-lookup"><span data-stu-id="ce3ab-146">That guarantee would require a second <xref:System.Threading.AutoResetEvent> lock.</span></span>  
  
 <span data-ttu-id="ce3ab-147">每個寫入作業之後，`Main`藉由呼叫會產生<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>方法，以讓第二個執行緒有機會執行。</span><span class="sxs-lookup"><span data-stu-id="ce3ab-147">After each write operation, `Main` yields by calling the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method, to give the second thread a chance to execute.</span></span> <span data-ttu-id="ce3ab-148">否則，在單一處理器電腦上`Main`可以用來撰寫兩個讀取作業的許多任何之間的值。</span><span class="sxs-lookup"><span data-stu-id="ce3ab-148">Otherwise, on a single-processor computer `Main` would write many values between any two read operations.</span></span>  
  
 [!code-cpp[System.Threading.AutoResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.AutoResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/class1.cs#1)]
 [!code-vb[System.Threading.AutoResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public bool Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Function Reset () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; bool" Usage="autoResetEvent.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public bool Set ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Set() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.Set" />
      <MemberSignature Language="VB.NET" Value="Public Function Set () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Set();" />
      <MemberSignature Language="F#" Value="member this.Set : unit -&gt; bool" Usage="autoResetEvent.Set " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>