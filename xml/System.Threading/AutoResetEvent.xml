<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="AutoResetEvent.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac59087366b105fd0db08981653c09c4fc5801df013.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9087366b105fd0db08981653c09c4fc5801df013</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.AutoResetEvent">
          <source>Notifies a waiting thread that an event has occurred.</source>
          <target state="translated">向等候的執行緒通知發生事件。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Threading.AutoResetEvent">
          <source>This class cannot be inherited.</source>
          <target state="translated">這個類別無法被繼承。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source><ph id="ph1">`AutoResetEvent`</ph> allows threads to communicate with each other by signaling.</source>
          <target state="translated"><ph id="ph1">`AutoResetEvent`</ph> 可讓執行緒信號與對方進行通訊。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>Typically, you use this class when threads need exclusive access to a resource.</source>
          <target state="translated">一般而言，當執行緒需要獨佔存取資源時使用這個類別。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>This type implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
          <target state="translated">此類型會實作<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>介面。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>When you have finished using the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">當您完成使用類型時，您應該會處置它直接或間接。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>To dispose of the type directly, call its <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`catch`</ph> block.</source>
          <target state="translated">若要直接處置的類型，呼叫其<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>方法中的<ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`catch`</ph>區塊。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">若要為其配置間接，使用語言建構例如<ph id="ph1">`using`</ph>（C# 中） 或<ph id="ph2">`Using`</ph>（在 Visual Basic)。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>For more information, see the "Using an Object that Implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface topic.</source>
          <target state="translated">如需詳細資訊，請參閱中的 「 使用物件的實作 IDisposable 」 一節<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>介面 &gt; 主題。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>A thread waits for a signal by calling <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> on the <ph id="ph2">`AutoResetEvent`</ph>.</source>
          <target state="translated">執行緒藉由呼叫等候信號<ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph>上<ph id="ph2">`AutoResetEvent`</ph>。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>If the <ph id="ph1">`AutoResetEvent`</ph> is in the non-signaled state, the thread blocks, waiting for the thread that currently controls the resource to signal that the resource is available by calling <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph>.</source>
          <target state="translated">如果<ph id="ph1">`AutoResetEvent`</ph>處於未收到訊號，則執行緒會封鎖，等候執行緒目前控制訊號藉由呼叫有可用資源的資源<ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>Calling <ph id="ph1">`Set`</ph> signals <ph id="ph2">`AutoResetEvent`</ph> to release a waiting thread.</source>
          <target state="translated">呼叫<ph id="ph1">`Set`</ph>訊號<ph id="ph2">`AutoResetEvent`</ph>釋放等候執行緒。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source><ph id="ph1">`AutoResetEvent`</ph> remains signaled until a single waiting thread is released, and then automatically returns to the non-signaled state.</source>
          <target state="translated"><ph id="ph1">`AutoResetEvent`</ph> 單一等候中執行緒已發行，並會自動傳回為未收到信號狀態之前，會維持為收到信號。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>If no threads are waiting, the state remains signaled indefinitely.</source>
          <target state="translated">如果沒有任何執行緒正在等待，一直維持信號狀態。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>If a thread calls <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> while the <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> is in the signaled state, the thread does not block.</source>
          <target state="translated">如果呼叫執行緒<ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph>時<ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>是在收到信號的狀態，執行緒不會封鎖。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>The <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> releases the thread immediately and returns to the non-signaled state.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>立即釋放執行緒，並傳回未收到訊號的狀態。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>There is no guarantee that every call to the <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> method will release a thread.</source>
          <target state="translated">不保證，每次呼叫<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph>方法會釋放執行緒。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>If two calls are too close together, so that the second call occurs before a thread has been released, only one thread is released.</source>
          <target state="translated">如果兩個呼叫太接近，使第二次呼叫發生於之前已釋放執行緒，只有一個執行緒在釋出。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>It is as if the second call did not happen.</source>
          <target state="translated">就如同第二個呼叫並未發生。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>Also, if <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> is called when there are no threads waiting and the <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> is already signaled, the call has no effect.</source>
          <target state="translated">此外，如果<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph>沒有等候的執行緒時，會呼叫和<ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>已經發出信號，呼叫沒有任何作用。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>You can control the initial state of an <ph id="ph1">`AutoResetEvent`</ph> by passing a Boolean value to the constructor: <ph id="ph2">`true`</ph> if the initial state is signaled and <ph id="ph3">`false`</ph> otherwise.</source>
          <target state="translated">您可以控制的初始狀態<ph id="ph1">`AutoResetEvent`</ph>藉由傳遞建構函式的布林值：<ph id="ph2">`true`</ph>如果收到信號的初始狀態和<ph id="ph3">`false`</ph>否則。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source><ph id="ph1">`AutoResetEvent`</ph> can also be used with the <ph id="ph2">`static`</ph><ph id="ph3">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> methods.</source>
          <target state="translated"><ph id="ph1">`AutoResetEvent`</ph> 也可與<ph id="ph2">`static`</ph><ph id="ph3">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph>和<ph id="ph4">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>For more information about thread synchronization mechanisms, see <bpt id="p1">[</bpt>AutoResetEvent<ept id="p1">](~/docs/standard/threading/autoresetevent.md)</ept> in the conceptual documentation.</source>
          <target state="translated">如需執行緒的同步處理機制的詳細資訊，請參閱<bpt id="p1">[</bpt>AutoResetEvent<ept id="p1">](~/docs/standard/threading/autoresetevent.md)</ept>概念文件。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>Beginning with the .NET Framework version 2.0, <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> derives from the new <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> class.</source>
          <target state="translated">.NET Framework 2.0 版中，從<ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>衍生自新<ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>類別。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>An <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> is functionally equivalent to an <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> created with <ph id="ph3">&lt;xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>其作用相當於<ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>以建立<ph id="ph3">&lt;xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>Unlike the <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> class, the <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> class provides access to named system synchronization events.</source>
          <target state="translated">不同於<ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>類別<ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>類別會提供存取具名的系統同步處理事件。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>The following example shows how to use <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> to release one thread at a time, by calling the <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> method (on the base class) each time the user presses the <bpt id="p1">**</bpt>Enter<ept id="p1">**</ept> key.</source>
          <target state="translated">下列範例示範如何使用<ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>一次釋放單一執行緒，藉由呼叫<ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph>方法 （在基底類別中） 每次使用者按下<bpt id="p1">**</bpt>Enter<ept id="p1">**</ept>索引鍵。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>The example starts three threads, which wait on an <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> that was created in the signaled state.</source>
          <target state="translated">此範例會啟動三個執行緒，等候<ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>收到信號狀態中建立。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>The first thread is released immediately, because the <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> is already in the signaled state.</source>
          <target state="translated">因為立即釋放第一個執行緒<ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>已在收到信號狀態。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>This resets the <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> to the non-signaled state, so that subsequent threads block.</source>
          <target state="translated">這會重設<ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>未收到訊號的狀態，如此後續的執行緒封鎖。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>The blocked threads are not released until the user releases them one at a time by pressing the <bpt id="p1">**</bpt>Enter<ept id="p1">**</ept> key.</source>
          <target state="translated">已封鎖的執行緒不會釋放直到使用者放開它們一次按下<bpt id="p1">**</bpt>Enter<ept id="p1">**</ept>索引鍵。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>After the threads are released from the first <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>, they wait on another <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> that was created in the non-signaled state.</source>
          <target state="translated">執行緒會從第一個發行之後<ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>，它們在另一台等候<ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>未收到訊號的狀態中建立。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>All three threads block, so the <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> method must be called three times to release them all.</source>
          <target state="translated">封鎖所有的三個執行緒，所以<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph>方法必須全部釋放呼叫三次。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>This class is thread safe.</source>
          <target state="translated">這個類別是安全執行緒。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to set the initial state to signaled; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to set the initial state to non-signaled.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> 表示初始狀態設定為已收到信號，<ph id="ph2">&lt;see langword="false" /&gt;</ph> 表示初始狀態設定為未收到信號。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.AutoResetEvent" /&gt;</ph> class with a Boolean value indicating whether to set the initial state to signaled.</source>
          <target state="translated">使用布林值 (Boolean) 來初始化 <ph id="ph1">&lt;see cref="T:System.Threading.AutoResetEvent" /&gt;</ph> 類別的新執行個體，指出初始狀態是否設定為信號狀態。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>The following example uses an <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> to synchronize the activities of two threads.</source>
          <target state="translated">下列範例會使用<ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>來同步處理兩個執行緒的活動。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>The first thread, which is the application thread, executes <ph id="ph1">`Main`</ph>.</source>
          <target state="translated">第一個執行緒，也就是應用程式執行緒執行<ph id="ph1">`Main`</ph>。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>It writes values to the protected resource, which is a <ph id="ph1">`static`</ph> (<ph id="ph2">`Shared`</ph> in Visual Basic) field named <ph id="ph3">`number`</ph>.</source>
          <target state="translated">將值寫入至受保護資源，也就是<ph id="ph1">`static`</ph>(<ph id="ph2">`Shared`</ph>在 Visual Basic 中) 名為欄位<ph id="ph3">`number`</ph>。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>The second thread executes the static <ph id="ph1">`ThreadProc`</ph> method, which reads the values written by <ph id="ph2">`Main`</ph>.</source>
          <target state="translated">第二個執行緒執行靜態<ph id="ph1">`ThreadProc`</ph>方法，這個方法會讀取寫入的值<ph id="ph2">`Main`</ph>。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>The <ph id="ph1">`ThreadProc`</ph> method waits for the <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`ThreadProc`</ph>方法會等候<ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>When <ph id="ph1">`Main`</ph> calls the <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> method on the <ph id="ph3">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>, the <ph id="ph4">`ThreadProc`</ph> method reads one value.</source>
          <target state="translated">當<ph id="ph1">`Main`</ph>呼叫<ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph>方法<ph id="ph3">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>、<ph id="ph4">`ThreadProc`</ph>方法會讀取一個值。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> immediately resets, so the <ph id="ph2">`ThreadProc`</ph> method waits again.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>立即重設，所以<ph id="ph2">`ThreadProc`</ph>方法會等候一次。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>The program logic guarantees that the <ph id="ph1">`ThreadProc`</ph> method will never read the same value two times.</source>
          <target state="translated">程式邏輯可確保<ph id="ph1">`ThreadProc`</ph>方法將永遠不會讀取相同的值兩次。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>It does not guarantee that the <ph id="ph1">`ThreadProc`</ph> method will read every value written by <ph id="ph2">`Main`</ph>.</source>
          <target state="translated">它不保證<ph id="ph1">`ThreadProc`</ph>方法會讀取寫入每個值<ph id="ph2">`Main`</ph>。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>That guarantee would require a second <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> lock.</source>
          <target state="translated">保證會需要第二個<ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>鎖定。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>After each write operation, <ph id="ph1">`Main`</ph> yields by calling the <ph id="ph2">&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType&gt;</ph> method, to give the second thread a chance to execute.</source>
          <target state="translated">每個寫入作業之後，<ph id="ph1">`Main`</ph>藉由呼叫會產生<ph id="ph2">&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType&gt;</ph>方法，讓第二個執行緒來執行。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>Otherwise, on a single-processor computer <ph id="ph1">`Main`</ph> would write many values between any two read operations.</source>
          <target state="translated">否則，在單一處理器電腦上<ph id="ph1">`Main`</ph>要用來撰寫兩個讀取作業的許多任何之間的值。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>