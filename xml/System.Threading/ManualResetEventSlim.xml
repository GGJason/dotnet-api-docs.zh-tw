<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ManualResetEventSlim.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac57525a47946f2ca16934b6f03acc5ce6bd78e6e66.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7525a47946f2ca16934b6f03acc5ce6bd78e6e66</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.ManualResetEventSlim">
          <source>Provides a slimmed down version of <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEvent" /&gt;</ph>.</source>
          <target state="translated">提供 <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEvent" /&gt;</ph> 的精簡版本。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEventSlim">
          <source>You can use this class for better performance than <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> when wait times are expected to be very short, and when the event does not cross a process boundary.</source>
          <target state="translated">您可以使用這個類別，以提升的效能比<ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph>預期的等候時間很短，而且事件不會跨處理序界限時。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEventSlim">
          <source><ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> uses busy spinning for a short time while it waits for the event to become signaled.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> 在等候事件變成收到訊號時會短暫使用忙碌微調。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEventSlim">
          <source>When wait times are short, spinning can be much less expensive than waiting by using wait handles.</source>
          <target state="translated">若等候時間很短，旋轉功能的成本會遠低於使用等候控制代碼來等候。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEventSlim">
          <source>However, if the event does not become signaled within a certain period of time, <ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> resorts to a regular event handle wait.</source>
          <target state="translated">不過，如果事件未在一定時間內變成收到訊號，<ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> 就會訴諸於一般的事件控制代碼等候。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEventSlim">
          <source>The following example shows how to use a <ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph>.</source>
          <target state="translated">下列範例示範如何使用<ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEventSlim">
          <source>For more information about the use of <ph id="ph1">`SpinCount`</ph> and other best practices concerning the use of this type, see <bpt id="p1">[</bpt>ManualResetEvent and ManualResetEventSlim<ept id="p1">](~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md)</ept>.</source>
          <target state="translated">如需有關使用<ph id="ph1">`SpinCount`</ph>和 「 其他最佳作法有關使用這個型別，請參閱<bpt id="p1">[</bpt>ManualResetEvent 和 ManualResetEventSlim<ept id="p1">](~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md)</ept>。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEventSlim">
          <source>All public and protected members of <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> are thread-safe and may be used concurrently from multiple threads, with the exception of Dispose, which must only be used when all other operations on the <ph id="ph2">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> have completed, and Reset, which should only be used when no other threads are accessing the event.</source>
          <target state="translated">所有公用和受保護成員<ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph>是安全執行緒，而且可用來同時從多個執行緒，除了 Dispose，才必須是會使用上的所有其他作業<ph id="ph2">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph>已完成，並且重設，這應該只用於當沒有其他執行緒同時存取此事件。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="T:System.Threading.ManualResetEventSlim">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> class with an initial state of nonsignaled.</source>
          <target state="translated">使用未收到訊號的初始狀態來初始化 <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.#ctor(System.Boolean)">
          <source>true to set the initial state signaled; false to set the initial state to nonsignaled.</source>
          <target state="translated">true 表示會將初始狀態設定為已收到訊號，false 表示會將初始狀態設定為未收到訊號。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.#ctor(System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> class with a Boolean value indicating whether to set the intial state to signaled.</source>
          <target state="translated">使用表示是否要將初始狀態設定為已收到訊號的布林值，初始化 <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.#ctor(System.Boolean,System.Int32)">
          <source>true to set the initial state to signaled; false to set the initial state to nonsignaled.</source>
          <target state="translated">true 表示會將初始狀態設定為已收到訊號，false 表示會將初始狀態設定為未收到訊號。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.#ctor(System.Boolean,System.Int32)">
          <source>The number of spin waits that will occur before falling back to a kernel-based wait operation.</source>
          <target state="translated">在回到以核心為基礎的等候作業之前進行微調等候的次數。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.#ctor(System.Boolean,System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> class with a Boolean value indicating whether to set the intial state to signaled and a specified spin count.</source>
          <target state="translated">使用表示是否要將初始狀態設定為已收到訊號的布林值以及指定的微調計數，初始化 <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.#ctor(System.Boolean,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="spinCount" /&gt;</ph> is less than 0 or greater than the maximum allowed value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="spinCount" /&gt;</ph> 小於 0 或大於允許的最大值。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="T:System.Threading.ManualResetEventSlim">
          <source>Releases resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> class.</source>
          <target state="translated">將 <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> 類別的目前執行個體所使用的資源釋出。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Dispose">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> class.</source>
          <target state="translated">將 <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> 類別目前的執行個體所使用的資源全部釋出。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ManualResetEventSlim.Dispose">
          <source>Call <ph id="ph1">`Dispose`</ph> when you are finished using the <ph id="ph2">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose`</ph> 使用完畢時，請呼叫 <ph id="ph2">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ManualResetEventSlim.Dispose">
          <source>The <ph id="ph1">`Dispose`</ph> method leaves the <ph id="ph2">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> in an unusable state.</source>
          <target state="translated"><ph id="ph1">`Dispose`</ph> 方法會將 <ph id="ph2">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> 保留在無法使用的狀態。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ManualResetEventSlim.Dispose">
          <source>After calling <ph id="ph1">`Dispose`</ph>, you must release all references to the <ph id="ph2">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> so the garbage collector can reclaim the memory that the <ph id="ph3">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> was occupying.</source>
          <target state="translated">在呼叫<ph id="ph1">`Dispose`</ph>，您必須釋放所有參考<ph id="ph2">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph>讓記憶體回收行程可以回收記憶體的<ph id="ph3">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph>所佔用。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ManualResetEventSlim.Dispose">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>清除 Unmanaged 資源上<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>和<bpt id="p2">[</bpt>實作 Dispose 方法<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ManualResetEventSlim.Dispose">
          <source>Always call <ph id="ph1">`Dispose`</ph> before you release your last reference to the <ph id="ph2">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph>.</source>
          <target state="translated">在您釋放最後一個 <ph id="ph1">`Dispose`</ph> 參考之前，請務必呼叫 <ph id="ph2">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ManualResetEventSlim.Dispose">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> object's <ph id="ph2">`Finalize`</ph> method.</source>
          <target state="translated">否則工作窗格所使用的資源不會釋放，直到記憶體回收行程呼叫 <ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> 物件的 <ph id="ph2">`Finalize`</ph> 方法。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Dispose(System.Boolean)">
          <source>true to release both managed and unmanaged resources; false to release only unmanaged resources.</source>
          <target state="translated">true 表示釋放 Managed 與 Unmanaged 資源，false 表示只釋放 Unmanaged 資源。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph>, and optionally releases the managed resources.</source>
          <target state="translated">釋放 <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> 所使用的 Unmanaged 資源，並選擇性釋放 Managed 資源。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ManualResetEventSlim.Dispose(System.Boolean)">
          <source>Unlike most of the members of <ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.ManualResetEventSlim.Dispose%2A&gt;</ph> is not thread-safe and may not be used concurrently with other members of this instance.</source>
          <target state="translated">不同於大部分的成員<ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph>，<ph id="ph2">&lt;xref:System.Threading.ManualResetEventSlim.Dispose%2A&gt;</ph>不具備執行緒安全，而且不能與這個執行個體的其他成員同時使用。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="P:System.Threading.ManualResetEventSlim.IsSet">
          <source>Gets whether the event is set.</source>
          <target state="translated">取得值，表示事件是否已設定。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ManualResetEventSlim.IsSet">
          <source>true if the event has is set; otherwise, false.</source>
          <target state="translated">如果已設定事件則為 true，否則為 false。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Reset">
          <source>Sets the state of the event to nonsignaled, which causes threads to block.</source>
          <target state="translated">將事件的狀態設定為未收到信號，會造成執行緒封鎖。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ManualResetEventSlim.Reset">
          <source><ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim.Reset%2A&gt;</ph> can be called concurrently with all members except <ph id="ph2">&lt;xref:System.Threading.ManualResetEventSlim.WaitHandle%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim.Reset%2A&gt;</ph> 可以與所有成員，除非同時呼叫<ph id="ph2">&lt;xref:System.Threading.ManualResetEventSlim.WaitHandle%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Reset">
          <source>The object has already been disposed.</source>
          <target state="translated">物件已經處置。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Set">
          <source>Sets the state of the event to signaled, which allows one or more threads waiting on the event to proceed.</source>
          <target state="translated">將事件的狀態設定為已收到訊號，讓正在等候該事件的一或多個執行緒繼續執行。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="P:System.Threading.ManualResetEventSlim.SpinCount">
          <source>Gets the number of spin waits that will occur before falling back to a kernel-based wait operation.</source>
          <target state="translated">取得在回到以核心為基礎的等候作業之前進行微調等候的次數。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ManualResetEventSlim.SpinCount">
          <source>Returns the number of spin waits that will occur before falling back to a kernel-based wait operation.</source>
          <target state="translated">傳回在回到以核心為基礎的等候作業之前進行微調等候的次數。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="T:System.Threading.ManualResetEventSlim">
          <source>Blocks the current thread until the current <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> is set.</source>
          <target state="translated">封鎖目前的執行緒，直到設定了目前的 <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> 為止。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait">
          <source>Blocks the current thread until the current <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> is set.</source>
          <target state="translated">封鎖目前的執行緒，直到設定了目前的 <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> 為止。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ManualResetEventSlim.Wait">
          <source>The caller of this method blocks indefinitely until the current instance is set.</source>
          <target state="translated">這個方法會封鎖，直到目前的執行個體已設定的呼叫端。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ManualResetEventSlim.Wait">
          <source>The caller will return immediately if the event is currently in a set state.</source>
          <target state="translated">呼叫端會立即傳回事件是否目前在設定狀態。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait">
          <source>The maximum number of waiters has been exceeded.</source>
          <target state="translated">已經超過等候者最大數目。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait">
          <source>The object has already been disposed.</source>
          <target state="translated">物件已經處置。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Int32)">
          <source>The number of milliseconds to wait, or <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>(-1) to wait indefinitely.</source>
          <target state="translated">要等候的毫秒數；若要無限期等候，則為 <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>(-1)。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Int32)">
          <source>Blocks the current thread until the current <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> is set, using a 32-bit signed integer to measure the time interval.</source>
          <target state="translated">封鎖目前的執行緒，直到設定了目前的 <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> 為止 (使用 32 位元帶正負號的整數以測量時間間隔)。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Int32)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> was set; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">若設定了 <ph id="ph2">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> 則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否則為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> is a negative number other than -1, which represents an infinite time-out.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> 為 -1 以外的負數，表示無限逾時。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Int32)">
          <source>The maximum number of waiters has been exceeded.</source>
          <target state="translated">已經超過等候者最大數目。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Int32)">
          <source>The object has already been disposed.</source>
          <target state="translated">物件已經處置。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> to observe.</source>
          <target state="translated">要觀察的 <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Threading.CancellationToken)">
          <source>Blocks the current thread until the current <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> receives a signal, while observing a <ph id="ph2">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</source>
          <target state="translated">封鎖目前的執行緒，直到目前的 <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> 收到訊號為止，同時觀察 <ph id="ph2">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Threading.CancellationToken)">
          <source>The caller of this method blocks indefinitely until the current instance is set.</source>
          <target state="translated">這個方法會封鎖，直到目前的執行個體已設定的呼叫端。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Threading.CancellationToken)">
          <source>The caller will return immediately if the event is currently in a set state.</source>
          <target state="translated">呼叫端會立即傳回事件是否目前在設定狀態。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Threading.CancellationToken)">
          <source>The maximum number of waiters has been exceeded.</source>
          <target state="translated">已經超過等候者最大數目。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> was canceled.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> 已取消。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Threading.CancellationToken)">
          <source>The object has already been disposed or the <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> has been disposed.</source>
          <target state="translated">已處置物件，或者已處置建立 <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> 的 <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan)">
          <source>A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents the number of milliseconds to wait, or a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents -1 milliseconds to wait indefinitely.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>，代表等候毫秒數；或是 <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph>，代表無限期等候的 -1 毫秒。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan)">
          <source>Blocks the current thread until the current <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> is set, using a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> to measure the time interval.</source>
          <target state="translated">封鎖目前的執行緒，直到設定了目前的 <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> 為止，並使用 <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> 以量測時間間隔。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> was set; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">若設定了 <ph id="ph2">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> 則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否則為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is a negative number other than -1 milliseconds, which represents an infinite time-out.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> 為 -1 毫秒以外的負數，表示無限逾時。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan)">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan)">
          <source>The number of milliseconds in <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> 的毫秒數大於 <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan)">
          <source>The maximum number of waiters has been exceeded.</source>
          <target state="translated">已經超過等候者最大數目。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan)">
          <source>The object has already been disposed.</source>
          <target state="translated">物件已經處置。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>The number of milliseconds to wait, or <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>(-1) to wait indefinitely.</source>
          <target state="translated">要等候的毫秒數；若要無限期等候，則為 <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>(-1)。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> to observe.</source>
          <target state="translated">要觀察的 <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>Blocks the current thread until the current <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> is set, using a 32-bit signed integer to measure the time interval, while observing a <ph id="ph2">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</source>
          <target state="translated">封鎖目前的執行緒，直到設定了目前的 <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> 為止，並使用 32 位元帶正負號的整數以量測時間間隔，同時觀察 <ph id="ph2">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> was set; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">若設定了 <ph id="ph2">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> 則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否則為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> was canceled.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> 已取消。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> is a negative number other than -1, which represents an infinite time-out.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> 為 -1 以外的負數，表示無限逾時。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>The maximum number of waiters has been exceeded.</source>
          <target state="translated">已經超過等候者最大數目。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>The object has already been disposed or the <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> has been disposed.</source>
          <target state="translated">已處置物件，或者已處置建立 <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> 的 <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents the number of milliseconds to wait, or a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents -1 milliseconds to wait indefinitely.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>，代表等候毫秒數；或是 <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph>，代表無限期等候的 -1 毫秒。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> to observe.</source>
          <target state="translated">要觀察的 <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>Blocks the current thread until the current <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> is set, using a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> to measure the time interval, while observing a <ph id="ph3">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</source>
          <target state="translated">封鎖目前的執行緒，直到設定了目前的 <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> 為止，並使用 <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> 以量測時間間隔，同時觀察 <ph id="ph3">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> was set; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">若設定了 <ph id="ph2">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> 則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否則為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> was canceled.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> 已取消。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is a negative number other than -1 milliseconds, which represents an infinite time-out.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> 為 -1 毫秒以外的負數，表示無限逾時。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>The number of milliseconds in <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> 的毫秒數大於 <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>The maximum number of waiters has been exceeded.</source>
          <target state="translated">已經超過等候者最大數目。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>The object has already been disposed or the <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> has been disposed.</source>
          <target state="translated">已處置物件，或者已處置建立 <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> 的 <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="P:System.Threading.ManualResetEventSlim.WaitHandle">
          <source>Gets the underlying <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> object for this <ph id="ph2">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph>.</source>
          <target state="translated">取得這個 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> 的基礎 <ph id="ph2">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> 物件。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ManualResetEventSlim.WaitHandle">
          <source>The underlying <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> event object fore this <ph id="ph2">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph>.</source>
          <target state="translated">這個 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> 的基礎 <ph id="ph2">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> 事件物件。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ManualResetEventSlim.WaitHandle">
          <source>Accessing this property forces initialization of an underlying event object if one hasn't already been created.</source>
          <target state="translated">存取這個屬性會強制初始化基礎事件物件，如果其中一個尚未已經建立。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ManualResetEventSlim.WaitHandle">
          <source>To simply wait on this <ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph>, the public Wait methods should be preferred.</source>
          <target state="translated">這只是等候<ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph>，公用等候方法應該是慣用。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ManualResetEventSlim.WaitHandle">
          <source>It is recommended to dispose the <ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> instance after accessing this property, in order to prevent a resource leak.</source>
          <target state="translated">建議您處置<ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph>在存取這個屬性，以避免資源流失之後的執行個體。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>