<Type Name="TimerCallback" FullName="System.Threading.TimerCallback">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5e4d03d528b630de54edaff412cd0eba763cc6f2" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37754487" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void TimerCallback(object state);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed TimerCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.TimerCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub TimerCallback(state As Object)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void TimerCallback(System::Object ^ state);" />
  <TypeSignature Language="F#" Value="type TimerCallback = delegate of obj -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Timer</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="state" Type="System.Object" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="state">物件，含有關於這個委派所叫用方法的應用程式特定資訊；或 <see langword="null" />。</param>
    <summary>表示處理來自 <see cref="T:System.Threading.Timer" /> 的呼叫的方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用`TimerCallback`來指定方法所呼叫的委派<xref:System.Threading.Timer>。 這個方法不會建立計時器; 的執行緒中執行它會執行另一個執行緒集區的執行緒所提供的系統。 `TimerCallback`委派叫用方法一次之後經過的開始時間，, 並繼續它之前的計時器間隔中一次叫用<xref:System.Threading.Timer.Dispose%2A>呼叫方法時，或直到<xref:System.Threading.Timer.Change%2A?displayProperty=nameWithType>方法呼叫的間隔值<xref:System.Threading.Timeout.Infinite>。  
  
> [!NOTE]
>  之後就可能發生的回呼<xref:System.Threading.Timer.Dispose>方法多載呼叫，因為計時器佇列中由執行緒集區執行緒執行的回呼。 您可以使用<xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29>等候，直到所有的回呼已完成的方法多載。  
  
 當計時器建構，而且無法變更，會指定計時器委派。 開始時間`Timer`傳入`dueTime`參數`Timer`建構函式，並在期限傳入`period`參數。 如需示範如何建立及使用的範例`TimerCallback`委派，請參閱<xref:System.Threading.Timer?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下列程式碼範例示範如何建立與所用的委派`Timer`類別。  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.Timer" />
    <altmember cref="T:System.Threading.ThreadPool" />
  </Docs>
</Type>