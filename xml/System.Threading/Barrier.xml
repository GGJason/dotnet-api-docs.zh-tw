<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Barrier.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac548531a8658006e7834fae9bbf6c23d5474a09270.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">48531a8658006e7834fae9bbf6c23d5474a09270</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.Barrier">
          <source>Enables multiple tasks to cooperatively work on an algorithm in parallel through multiple phases.</source>
          <target state="translated">允許多項工作在多個階段中以平行方式來合作處理某個演算法。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Barrier">
          <source>A group of tasks cooperate by moving through a series of phases, where each in the group signals it has arrived at the <ph id="ph1">&lt;xref:System.Threading.Barrier&gt;</ph> in a given phase and implicitly waits for all others to arrive.</source>
          <target state="translated">一組工作合作移動一系列的階段，每個群組中表示已抵達<ph id="ph1">&lt;xref:System.Threading.Barrier&gt;</ph>在給定的階段，並隱含地等待其他所有項目抵達。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Barrier">
          <source>The same <ph id="ph1">&lt;xref:System.Threading.Barrier&gt;</ph> can be used for multiple phases.</source>
          <target state="translated">相同<ph id="ph1">&lt;xref:System.Threading.Barrier&gt;</ph>可以用於多個階段。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Barrier">
          <source>The following example shows how to use a barrier:</source>
          <target state="translated">下列範例會示範如何使用屏障：</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Barrier">
          <source>All public and protected members of <ph id="ph1">&lt;see cref="T:System.Threading.Barrier" /&gt;</ph> are thread-safe and may be used concurrently from multiple threads, with the exception of Dispose, which must only be used when all other operations on the <ph id="ph2">&lt;see cref="T:System.Threading.Barrier" /&gt;</ph> have completed.</source>
          <target state="translated">所有的 public 和 protected 成員的<ph id="ph1">&lt;see cref="T:System.Threading.Barrier" /&gt;</ph>是安全執行緒，而且可用來同時從多個執行緒，除了 Dispose，才必須是會使用上的所有其他作業<ph id="ph2">&lt;see cref="T:System.Threading.Barrier" /&gt;</ph>已完成。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="T:System.Threading.Barrier">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.Barrier" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Threading.Barrier" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.#ctor(System.Int32)">
          <source>The number of participating threads.</source>
          <target state="translated">參與執行緒的數目。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.#ctor(System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.Barrier" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Threading.Barrier" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.#ctor(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="participantCount" /&gt;</ph> is less than 0 or greater than 32,767.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="participantCount" /&gt;</ph> 小於 0 或大於 32,767。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.#ctor(System.Int32,System.Action{System.Threading.Barrier})">
          <source>The number of participating threads.</source>
          <target state="translated">參與執行緒的數目。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.#ctor(System.Int32,System.Action{System.Threading.Barrier})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Action`1" /&gt;</ph> to be executed after each phase.</source>
          <target state="translated">要在每個階段之後執行的 <ph id="ph1">&lt;see cref="T:System.Action`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.#ctor(System.Int32,System.Action{System.Threading.Barrier})">
          <source>null (Nothing in Visual Basic) may be passed to indicate no action is taken.</source>
          <target state="translated">可以傳遞 null (在 Visual Basic 中為 Nothing) 表示不執行任何動作。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.#ctor(System.Int32,System.Action{System.Threading.Barrier})">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.Barrier" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Threading.Barrier" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Barrier.#ctor(System.Int32,System.Action{System.Threading.Barrier})">
          <source>The <ph id="ph1">`postPhaseAction`</ph> delegate will be executed after all participants have arrived at the barrier in one phase.</source>
          <target state="translated"><ph id="ph1">`postPhaseAction`</ph>之後所有參與者都到達屏障在其中一個階段中，將執行委派。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Barrier.#ctor(System.Int32,System.Action{System.Threading.Barrier})">
          <source>The participants will not be released to the next phase until the postPhaseAction delegate has completed execution.</source>
          <target state="translated">下一個階段 postPhaseAction 委派完成執行之前，不會釋放參與者。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.#ctor(System.Int32,System.Action{System.Threading.Barrier})">
          <source><ph id="ph1">&lt;paramref name="participantCount" /&gt;</ph> is less than 0 or greater than 32,767.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="participantCount" /&gt;</ph> 小於 0 或大於 32,767。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.AddParticipant">
          <source>Notifies the <ph id="ph1">&lt;see cref="T:System.Threading.Barrier" /&gt;</ph> that there will be an additional participant.</source>
          <target state="translated">通知 <ph id="ph1">&lt;see cref="T:System.Threading.Barrier" /&gt;</ph>，表示還會有一個其他參與者。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.AddParticipant">
          <source>The phase number of the barrier in which the new participants will first participate.</source>
          <target state="translated">新參與者將第一次參與其中的屏障階段編號。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Barrier.AddParticipant">
          <source>If the barrier is currently executing a post phase action, this call is blocked until the post phase action completes and the barrier has moved on to the next phase.</source>
          <target state="translated">如果屏障正在執行後階段動作，此呼叫會封鎖後階段動作完成，然後再屏障已移動到下一個階段。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.AddParticipant">
          <source>The current instance has already been disposed.</source>
          <target state="translated">目前的執行個體已經過處置。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.AddParticipant">
          <source>Adding a participant would cause the barrier's participant count to exceed 32,767.</source>
          <target state="translated">加入參與者會造成屏障的參與者計數超過 32,767。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.AddParticipant">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.AddParticipant">
          <source>The method was invoked from within a post-phase action.</source>
          <target state="translated">此方法是從 post-phase 動作中叫用。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.AddParticipants(System.Int32)">
          <source>The number of additional participants to add to the barrier.</source>
          <target state="translated">要加入至屏障的其他參與者數目。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.AddParticipants(System.Int32)">
          <source>Notifies the <ph id="ph1">&lt;see cref="T:System.Threading.Barrier" /&gt;</ph> that there will be additional participants.</source>
          <target state="translated">通知 <ph id="ph1">&lt;see cref="T:System.Threading.Barrier" /&gt;</ph>，表示還會有多個其他參與者。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.AddParticipants(System.Int32)">
          <source>The phase number of the barrier in which the new participants will first participate.</source>
          <target state="translated">新參與者將第一次參與其中的屏障階段編號。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Barrier.AddParticipants(System.Int32)">
          <source>If the barrier is currently executing a post phase action, this call is blocked until the post phase action completes and the barrier has moved on to the next phase.</source>
          <target state="translated">如果屏障正在執行後階段動作，此呼叫會封鎖後階段動作完成，然後再屏障已移動到下一個階段。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.AddParticipants(System.Int32)">
          <source>The current instance has already been disposed.</source>
          <target state="translated">目前的執行個體已經過處置。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.AddParticipants(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="participantCount" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="participantCount" /&gt;</ph> 小於 0。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.AddParticipants(System.Int32)">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.AddParticipants(System.Int32)">
          <source>Adding <ph id="ph1">&lt;paramref name="participantCount" /&gt;</ph> participants would cause the barrier's participant count to exceed 32,767.</source>
          <target state="translated">加入 <ph id="ph1">&lt;paramref name="participantCount" /&gt;</ph> 參與者會造成屏障的參與者計數超過 32,767。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.AddParticipants(System.Int32)">
          <source>The method was invoked from within a post-phase action.</source>
          <target state="translated">此方法是從 post-phase 動作中叫用。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="P:System.Threading.Barrier.CurrentPhaseNumber">
          <source>Gets the number of the barrier's current phase.</source>
          <target state="translated">取得屏障目前階段的編號。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Barrier.CurrentPhaseNumber">
          <source>Returns the number of the barrier's current phase.</source>
          <target state="translated">傳回屏障目前階段的編號。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="T:System.Threading.Barrier">
          <source>Releases resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.Threading.Barrier" /&gt;</ph> class.</source>
          <target state="translated">將 <ph id="ph1">&lt;see cref="T:System.Threading.Barrier" /&gt;</ph> 類別的目前執行個體所使用的資源釋出。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.Dispose">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.Threading.Barrier" /&gt;</ph> class.</source>
          <target state="translated">將 <ph id="ph1">&lt;see cref="T:System.Threading.Barrier" /&gt;</ph> 類別目前的執行個體所使用的資源全部釋出。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Barrier.Dispose">
          <source>Call <ph id="ph1">`Dispose`</ph> when you are finished using the <ph id="ph2">&lt;xref:System.Threading.Barrier&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose`</ph> 使用完畢時，請呼叫 <ph id="ph2">&lt;xref:System.Threading.Barrier&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Barrier.Dispose">
          <source>The <ph id="ph1">`Dispose`</ph> method leaves the <ph id="ph2">&lt;xref:System.Threading.Barrier&gt;</ph> in an unusable state.</source>
          <target state="translated"><ph id="ph1">`Dispose`</ph> 方法會將 <ph id="ph2">&lt;xref:System.Threading.Barrier&gt;</ph> 保留在無法使用的狀態。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Barrier.Dispose">
          <source>After calling <ph id="ph1">`Dispose`</ph>, you must release all references to the <ph id="ph2">&lt;xref:System.Threading.Barrier&gt;</ph> so the garbage collector can reclaim the memory that the <ph id="ph3">&lt;xref:System.Threading.Barrier&gt;</ph> was occupying.</source>
          <target state="translated">在呼叫<ph id="ph1">`Dispose`</ph>，您必須釋放所有參考<ph id="ph2">&lt;xref:System.Threading.Barrier&gt;</ph>讓記憶體回收行程可以回收記憶體的<ph id="ph3">&lt;xref:System.Threading.Barrier&gt;</ph>所佔用。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Barrier.Dispose">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>清除 Unmanaged 資源上<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>和<bpt id="p2">[</bpt>實作 Dispose 方法<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Barrier.Dispose">
          <source>Always call <ph id="ph1">`Dispose`</ph> before you release your last reference to the <ph id="ph2">&lt;xref:System.Threading.Barrier&gt;</ph>.</source>
          <target state="translated">在您釋放最後一個 <ph id="ph1">`Dispose`</ph> 參考之前，請務必呼叫 <ph id="ph2">&lt;xref:System.Threading.Barrier&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Barrier.Dispose">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id="ph1">&lt;xref:System.Threading.Barrier&gt;</ph> object's <ph id="ph2">`Finalize`</ph> method.</source>
          <target state="translated">否則工作窗格所使用的資源不會釋放，直到記憶體回收行程呼叫 <ph id="ph1">&lt;xref:System.Threading.Barrier&gt;</ph> 物件的 <ph id="ph2">`Finalize`</ph> 方法。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.Dispose">
          <source>The method was invoked from within a post-phase action.</source>
          <target state="translated">此方法是從 post-phase 動作中叫用。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.Dispose(System.Boolean)">
          <source>true to release both managed and unmanaged resources; false to release only unmanaged resources.</source>
          <target state="translated">true 表示釋放 Managed 與 Unmanaged 資源，false 表示只釋放 Unmanaged 資源。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Threading.Barrier" /&gt;</ph>, and optionally releases the managed resources.</source>
          <target state="translated">釋放 <ph id="ph1">&lt;see cref="T:System.Threading.Barrier" /&gt;</ph> 所使用的 Unmanaged 資源，並選擇性釋放 Managed 資源。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Barrier.Dispose(System.Boolean)">
          <source>Unlike most of the members of <ph id="ph1">&lt;xref:System.Threading.Barrier&gt;</ph>, Dispose is not thread-safe and may not be used concurrently with other members of this instance.</source>
          <target state="translated">不同於大部分的成員<ph id="ph1">&lt;xref:System.Threading.Barrier&gt;</ph>，Dispose 不是執行緒安全，而且不能與這個執行個體的其他成員同時使用。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="P:System.Threading.Barrier.ParticipantCount">
          <source>Gets the total number of participants in the barrier.</source>
          <target state="translated">取得在屏障中的參與者總數。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Barrier.ParticipantCount">
          <source>Returns the total number of participants in the barrier.</source>
          <target state="translated">傳回在屏障中的參與者總數。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="P:System.Threading.Barrier.ParticipantsRemaining">
          <source>Gets the number of participants in the barrier that haven’t yet signaled in the current phase.</source>
          <target state="translated">取得在目前階段中尚未發出訊號的屏障中參與者數目。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Barrier.ParticipantsRemaining">
          <source>Returns the number of participants in the barrier that haven’t yet signaled in the current phase.</source>
          <target state="translated">傳回在目前階段中尚未發出訊號的屏障中參與者數目。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Barrier.ParticipantsRemaining">
          <source>This could be 0 during a post-phase action delegate execution or if the ParticipantCount is 0.</source>
          <target state="translated">這可能是 0，在後續階段動作委派執行期間，或如果 ParticipantCount 為 0。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.RemoveParticipant">
          <source>Notifies the <ph id="ph1">&lt;see cref="T:System.Threading.Barrier" /&gt;</ph> that there will be one less participant.</source>
          <target state="translated">通知 <ph id="ph1">&lt;see cref="T:System.Threading.Barrier" /&gt;</ph>，表示會減少一個參與者。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.RemoveParticipant">
          <source>The current instance has already been disposed.</source>
          <target state="translated">目前的執行個體已經過處置。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.RemoveParticipant">
          <source>The barrier already has 0 participants.</source>
          <target state="translated">屏障已經有 0 個參與者。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.RemoveParticipant">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.RemoveParticipant">
          <source>The method was invoked from within a post-phase action.</source>
          <target state="translated">此方法是從 post-phase 動作中叫用。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.RemoveParticipants(System.Int32)">
          <source>The number of additional participants to remove from the barrier.</source>
          <target state="translated">要從屏障中移除的其他參與者數目。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.RemoveParticipants(System.Int32)">
          <source>Notifies the <ph id="ph1">&lt;see cref="T:System.Threading.Barrier" /&gt;</ph> that there will be fewer participants.</source>
          <target state="translated">通知 <ph id="ph1">&lt;see cref="T:System.Threading.Barrier" /&gt;</ph>，表示會減少一些參與者。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Barrier.RemoveParticipants(System.Int32)">
          <source>If <ph id="ph1">`participantCount`</ph> participants are already waiting on the barrier, this removal fulfills the barrier, the post phase action is executed and all of the participants are woken as if this participant being removed had successfully reached the barrier.</source>
          <target state="translated">如果<ph id="ph1">`participantCount`</ph>參與者已經等候屏障、 這項移除作業，可滿足屏障、 執行後階段動作和所有參與者都事項如同正在移除這個參與者必須成功到達屏障。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.RemoveParticipants(System.Int32)">
          <source>The current instance has already been disposed.</source>
          <target state="translated">目前的執行個體已經過處置。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.RemoveParticipants(System.Int32)">
          <source>The total participant count is less than the specified <ph id="ph1">&lt;paramref name="participantCount" /&gt;</ph></source>
          <target state="translated">參與者總數小於指定的 <ph id="ph1">&lt;paramref name="participantCount" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.RemoveParticipants(System.Int32)">
          <source>The barrier already has 0 participants.</source>
          <target state="translated">屏障已經有 0 個參與者。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.RemoveParticipants(System.Int32)">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.RemoveParticipants(System.Int32)">
          <source>The method was invoked from within a post-phase action.</source>
          <target state="translated">此方法是從 post-phase 動作中叫用。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.RemoveParticipants(System.Int32)">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.RemoveParticipants(System.Int32)">
          <source>current participant count is less than the specified participantCount</source>
          <target state="translated">目前的參與者計數少於指定的 participantCount</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="T:System.Threading.Barrier">
          <source>Signals that a participant has reached the barrier and waits for all other participants to reach the barrier as well.</source>
          <target state="translated">發出訊號，表示參與者已到達屏障，並且在等候所有其他參與者到達屏障。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait">
          <source>Signals that a participant has reached the barrier and waits for all other participants to reach the barrier as well.</source>
          <target state="translated">發出訊號，表示參與者已到達屏障，並且在等候所有其他參與者到達屏障。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait">
          <source>The current instance has already been disposed.</source>
          <target state="translated">目前的執行個體已經過處置。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait">
          <source>The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.</source>
          <target state="translated">此方法是從 post-phase 動作中叫用，屏障目前有 0 個參與者，或者使用該屏障的執行緒數量多於註冊為參與者的數量。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait">
          <source>If an exception is thrown from the post phase action of a Barrier after all participating threads have called SignalAndWait, the exception will be wrapped in a BarrierPostPhaseException and be thrown on all participating threads.</source>
          <target state="translated">所有參與執行緒皆已呼叫 SignalAndWait 後，如果從 Barrier 的階段後動作擲回例外，會將例外狀況包裝在 BarrierPostPhaseException 中，並擲回所有參與執行緒。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.Int32)">
          <source>The number of milliseconds to wait, or <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>(-1) to wait indefinitely.</source>
          <target state="translated">要等候的毫秒數；若要無限期等候，則為 <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>(-1)。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.Int32)">
          <source>Signals that a participant has reached the barrier and waits for all other participants to reach the barrier as well, using a 32-bit signed integer to measure the timeout.</source>
          <target state="translated">發出訊號，表示參與者已到達屏障，並且在等候所有其他參與者到達屏障 (使用 32 位元帶正負號的整數以測量逾時)。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.Int32)">
          <source>if all participants reached the barrier within the specified time; otherwise false.</source>
          <target state="translated">如果所有參與者已在指定時間內達到屏障則為 true，否則為 false。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.Int32)">
          <source>The current instance has already been disposed.</source>
          <target state="translated">目前的執行個體已經過處置。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> is a negative number other than -1, which represents an infinite time-out.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> 為 -1 以外的負數，表示無限逾時。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.Int32)">
          <source>The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.</source>
          <target state="translated">此方法是從 post-phase 動作中叫用，屏障目前有 0 個參與者，或者使用該屏障的執行緒數量多於註冊為參與者的數量。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.Int32)">
          <source>If an exception is thrown from the post phase action of a Barrier after all participating threads have called SignalAndWait, the exception will be wrapped in a BarrierPostPhaseException and be thrown on all participating threads.</source>
          <target state="translated">所有參與執行緒皆已呼叫 SignalAndWait 後，如果從 Barrier 的階段後動作擲回例外，會將例外狀況包裝在 BarrierPostPhaseException 中，並擲回所有參與執行緒。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> to observe.</source>
          <target state="translated">要觀察的 <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.Threading.CancellationToken)">
          <source>Signals that a participant has reached the barrier and waits for all other participants to reach the barrier, while observing a cancellation token.</source>
          <target state="translated">發出訊號，表示參與者已到達屏障，並且在等候所有其他參與者到達，同時觀察取消語彙基元。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> has been canceled.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> 已取消。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.Threading.CancellationToken)">
          <source>The current instance has already been disposed.</source>
          <target state="translated">目前的執行個體已經過處置。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.Threading.CancellationToken)">
          <source>The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.</source>
          <target state="translated">此方法是從 post-phase 動作中叫用，屏障目前有 0 個參與者，或者使用該屏障的執行緒數量多於註冊為參與者的數量。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.TimeSpan)">
          <source>A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents the number of milliseconds to wait, or a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents -1 milliseconds to wait indefinitely.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>，代表等候毫秒數；或是 <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph>，代表無限期等候的 -1 毫秒。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.TimeSpan)">
          <source>Signals that a participant has reached the barrier and waits for all other participants to reach the barrier as well, using a <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> object to measure the time interval.</source>
          <target state="translated">發出訊號，表示參與者已到達屏障，並且在等候所有其他參與者到達屏障 (使用 <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> 物件以測量時間間隔)。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.TimeSpan)">
          <source>true if all other participants reached the barrier; otherwise, false.</source>
          <target state="translated">如果所有其他參與者已達到屏障則為 true，否則為 false。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.TimeSpan)">
          <source>The current instance has already been disposed.</source>
          <target state="translated">目前的執行個體已經過處置。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is a negative number other than -1 milliseconds, which represents an infinite time-out, or it is greater than 32,767.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> 是除了 -1 毫秒以外的負數，表示無限逾時，或是大於 32,767 的逾時。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.TimeSpan)">
          <source>The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.</source>
          <target state="translated">此方法是從 post-phase 動作中叫用，屏障目前有 0 個參與者，或者使用該屏障的執行緒數量多於註冊為參與者的數量。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.Int32,System.Threading.CancellationToken)">
          <source>The number of milliseconds to wait, or <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>(-1) to wait indefinitely.</source>
          <target state="translated">要等候的毫秒數；若要無限期等候，則為 <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>(-1)。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.Int32,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> to observe.</source>
          <target state="translated">要觀察的 <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.Int32,System.Threading.CancellationToken)">
          <source>Signals that a participant has reached the barrier and waits for all other participants to reach the barrier as well, using a 32-bit signed integer to measure the timeout, while observing a cancellation token.</source>
          <target state="translated">發出訊號，表示參與者已到達屏障，並且在等候所有其他參與者到達 (使用 32 位元帶正負號的整數以測量逾時)，同時觀察取消語彙基元。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.Int32,System.Threading.CancellationToken)">
          <source>if all participants reached the barrier within the specified time; otherwise false</source>
          <target state="translated">如果所有參與者已在指定時間內達到屏障則為 true，否則為 false。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Barrier.SignalAndWait(System.Int32,System.Threading.CancellationToken)">
          <source>If the <ph id="ph1">`cancellationToken`</ph> was canceled before the signal took effect, then an <ph id="ph2">&lt;xref:System.OperationCanceledException&gt;</ph> is thrown and the <ph id="ph3">&lt;xref:System.Threading.Barrier.ParticipantsRemaining%2A&gt;</ph> value is not decreased.</source>
          <target state="translated">如果<ph id="ph1">`cancellationToken`</ph>訊號花費效果前, 已取消則<ph id="ph2">&lt;xref:System.OperationCanceledException&gt;</ph>就會擲回和<ph id="ph3">&lt;xref:System.Threading.Barrier.ParticipantsRemaining%2A&gt;</ph>值不會減少。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Barrier.SignalAndWait(System.Int32,System.Threading.CancellationToken)">
          <source>If the <ph id="ph1">`cancellationToken`</ph> is not canceled or is canceled after the signal takes effect then <ph id="ph2">&lt;xref:System.Threading.Barrier.ParticipantsRemaining%2A&gt;</ph> is decreased and no <ph id="ph3">&lt;xref:System.OperationCanceledException&gt;</ph> is thrown.</source>
          <target state="translated">如果<ph id="ph1">`cancellationToken`</ph>未取消或已取消訊號生效後再<ph id="ph2">&lt;xref:System.Threading.Barrier.ParticipantsRemaining%2A&gt;</ph>就會減少，而且沒有<ph id="ph3">&lt;xref:System.OperationCanceledException&gt;</ph>就會擲回。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> has been canceled.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> 已取消。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.Int32,System.Threading.CancellationToken)">
          <source>The current instance has already been disposed.</source>
          <target state="translated">目前的執行個體已經過處置。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> is a negative number other than -1, which represents an infinite time-out.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> 為 -1 以外的負數，表示無限逾時。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.Int32,System.Threading.CancellationToken)">
          <source>The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.</source>
          <target state="translated">此方法是從 post-phase 動作中叫用，屏障目前有 0 個參與者，或者使用該屏障的執行緒數量多於註冊為參與者的數量。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents the number of milliseconds to wait, or a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents -1 milliseconds to wait indefinitely.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>，代表等候毫秒數；或是 <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph>，代表無限期等候的 -1 毫秒。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> to observe.</source>
          <target state="translated">要觀察的 <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>Signals that a participant has reached the barrier and waits for all other participants to reach the barrier as well, using a <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> object to measure the time interval, while observing a cancellation token.</source>
          <target state="translated">發出訊號，表示參與者已到達屏障，並且在等候所有其他參與者到達 (使用 <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> 物件以測量時間間隔)，同時觀察取消語彙基元。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>true if all other participants reached the barrier; otherwise, false.</source>
          <target state="translated">如果所有其他參與者已達到屏障則為 true，否則為 false。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.TimeSpan,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> has been canceled.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> 已取消。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>The current instance has already been disposed.</source>
          <target state="translated">目前的執行個體已經過處置。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.TimeSpan,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is a negative number other than -1 milliseconds, which represents an infinite time-out.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> 為 -1 毫秒以外的負數，表示無限逾時。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.</source>
          <target state="translated">此方法是從 post-phase 動作中叫用，屏障目前有 0 個參與者，或者使用該屏障的執行緒數量多於註冊為參與者的數量。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>