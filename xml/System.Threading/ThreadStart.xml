<Type Name="ThreadStart" FullName="System.Threading.ThreadStart">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="17a59b7c976aace5daa84c3d6d9014e03bed3de8" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36605593" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void ThreadStart();" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ThreadStart extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ThreadStart" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub ThreadStart()" />
  <TypeSignature Language="C++ CLI" Value="public delegate void ThreadStart();" />
  <TypeSignature Language="F#" Value="type ThreadStart = delegate of unit -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters />
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <summary>代表在 <see cref="T:System.Threading.Thread" /> 上執行的方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 建立 managed 的執行緒時，有的執行緒執行的方法由<xref:System.Threading.ThreadStart>委派或<xref:System.Threading.ParameterizedThreadStart>委派傳遞給<xref:System.Threading.Thread.%23ctor%2A>建構函式。 執行緒不會開始執行之前<xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType>方法呼叫。 所表示之方法的第一行中開始執行<xref:System.Threading.ThreadStart>或<xref:System.Threading.ParameterizedThreadStart>委派。  
  
> [!NOTE]
>  Visual Basic 和 C# 使用者可以省略<xref:System.Threading.ThreadStart>或<xref:System.Threading.ParameterizedThreadStart>委派建構函式建立執行緒時。 在 Visual Basic 使用`AddressOf`運算子傳遞自己的方法時<xref:System.Threading.Thread.%23ctor%2A>建構函式，例如`Dim t As New Thread(AddressOf ThreadProc)`。 在 C# 中，只需要指定執行緒的程序的名稱。 編譯器會選擇正確的委派建構函式。  
  
 [C++]  
  
> [!NOTE]
>  在.NET framework 2.0 版建立<xref:System.Threading.ThreadStart>委派 for c + + 中的靜態方法必須只有一個參數： 回呼方法，類別名稱所限定的位址。 在舊版中兩個參數是必要時建立靜態方法的委派： 零 (null) 和方法位址。 所有版本的執行個體方法，都需要兩個參數： 執行個體變數和方法位址。  
  
   
  
## Examples  
 下列程式碼範例顯示建立和使用的語法<xref:System.Threading.ThreadStart>委派執行個體方法與使用靜態方法。  
  
 另一個簡單的範例，示範如何建立<xref:System.Threading.ThreadStart>委派，請參閱<xref:System.Threading.Thread.Start?displayProperty=nameWithType>方法多載。 如需執行緒建立的詳細資訊，請參閱[建立執行緒和開始時間傳遞資料](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md)。  
  
 [!code-cpp[System.Threading.ThreadStart2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadStart2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadStart2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadStart2/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadStart2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadStart2/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.ParameterizedThreadStart" />
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="Overload:System.Threading.Thread.Start" />
    <altmember cref="T:System.AppDomain" />
  </Docs>
</Type>