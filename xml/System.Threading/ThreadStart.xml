<Type Name="ThreadStart" FullName="System.Threading.ThreadStart">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b1ca673d0079e2d61ed596ffc41116b10e31787b" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37608886" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void ThreadStart();" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ThreadStart extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ThreadStart" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub ThreadStart()" />
  <TypeSignature Language="C++ CLI" Value="public delegate void ThreadStart();" />
  <TypeSignature Language="F#" Value="type ThreadStart = delegate of unit -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters />
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <summary>
      <span data-ttu-id="2b05f-101">表示在 <see cref="T:System.Threading.Thread" /> 上執行的方法。</span>
      <span class="sxs-lookup">
        <span data-stu-id="2b05f-101">Represents the method that executes on a <see cref="T:System.Threading.Thread" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b05f-102">建立 managed 的執行緒時，有的執行緒執行的方法由<xref:System.Threading.ThreadStart>委派或<xref:System.Threading.ParameterizedThreadStart>傳遞至委派<xref:System.Threading.Thread.%23ctor%2A>建構函式。</span><span class="sxs-lookup"><span data-stu-id="2b05f-102">When a managed thread is created, the method that executes on the thread is represented by a <xref:System.Threading.ThreadStart> delegate or a <xref:System.Threading.ParameterizedThreadStart> delegate that is passed to the <xref:System.Threading.Thread.%23ctor%2A> constructor.</span></span> <span data-ttu-id="2b05f-103">執行緒不會開始執行到<xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType>呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="2b05f-103">The thread does not begin executing until the <xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType> method is called.</span></span> <span data-ttu-id="2b05f-104">執行開始所表示之方法的第一行<xref:System.Threading.ThreadStart>或<xref:System.Threading.ParameterizedThreadStart>委派。</span><span class="sxs-lookup"><span data-stu-id="2b05f-104">Execution begins at the first line of the method represented by the <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2b05f-105">Visual Basic 和 C# 的使用者可以省略<xref:System.Threading.ThreadStart>或<xref:System.Threading.ParameterizedThreadStart>委派建構函式建立執行緒時。</span><span class="sxs-lookup"><span data-stu-id="2b05f-105">Visual Basic and C# users can omit the <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate constructor when creating a thread.</span></span> <span data-ttu-id="2b05f-106">在 Visual Basic 中使用`AddressOf`運算子傳遞自己的方法時<xref:System.Threading.Thread.%23ctor%2A>建構函式，例如`Dim t As New Thread(AddressOf ThreadProc)`。</span><span class="sxs-lookup"><span data-stu-id="2b05f-106">In Visual Basic, use the `AddressOf` operator when passing your method to the <xref:System.Threading.Thread.%23ctor%2A> constructor; for example, `Dim t As New Thread(AddressOf ThreadProc)`.</span></span> <span data-ttu-id="2b05f-107">在 C# 中，只需指定執行緒的程序的名稱。</span><span class="sxs-lookup"><span data-stu-id="2b05f-107">In C#, simply specify the name of the thread procedure.</span></span> <span data-ttu-id="2b05f-108">編譯器會選取正確的委派建構函式。</span><span class="sxs-lookup"><span data-stu-id="2b05f-108">The compiler selects the correct delegate constructor.</span></span>  
  
 <span data-ttu-id="2b05f-109">[C++]</span><span class="sxs-lookup"><span data-stu-id="2b05f-109">[C++]</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2b05f-110">在 2.0 版中的.NET Framework 中，建立<xref:System.Threading.ThreadStart>委派的 c + + 中的靜態方法只需要一個參數： 回呼方法中，類別名稱所限定的位址。</span><span class="sxs-lookup"><span data-stu-id="2b05f-110">In version 2.0 of the .NET Framework, creating a <xref:System.Threading.ThreadStart> delegate for a static method in C++ requires only one parameter: the address of the callback method, qualified by the class name.</span></span> <span data-ttu-id="2b05f-111">在舊版兩個參數都必須建立靜態方法的委派時： 零 (null) 和方法的位址。</span><span class="sxs-lookup"><span data-stu-id="2b05f-111">In earlier versions two parameters were required when creating a delegate for a static method: zero (null) and the method address.</span></span> <span data-ttu-id="2b05f-112">所有版本的執行個體方法，都需要兩個參數： 執行個體變數和方法的位址。</span><span class="sxs-lookup"><span data-stu-id="2b05f-112">For an instance method, all versions require two parameters: the instance variable and the method address.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2b05f-113">下列程式碼範例顯示建立和使用的語法<xref:System.Threading.ThreadStart>委派執行個體方法和靜態方法。</span><span class="sxs-lookup"><span data-stu-id="2b05f-113">The following code example shows the syntax for creating and using a <xref:System.Threading.ThreadStart> delegate with an instance method and with a static method.</span></span>  
  
 <span data-ttu-id="2b05f-114">另一個簡單的範例，示範如何建立<xref:System.Threading.ThreadStart>委派，請參閱<xref:System.Threading.Thread.Start?displayProperty=nameWithType>方法多載。</span><span class="sxs-lookup"><span data-stu-id="2b05f-114">For another simple example that demonstrates how to create a <xref:System.Threading.ThreadStart> delegate, see the <xref:System.Threading.Thread.Start?displayProperty=nameWithType> method overload.</span></span> <span data-ttu-id="2b05f-115">如需有關建立執行緒的詳細資訊，請參閱[建立的執行緒和開始時間傳遞資料](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md)。</span><span class="sxs-lookup"><span data-stu-id="2b05f-115">For more information about thread creation, see [Creating Threads and Passing Data at Start Time](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md).</span></span>  
  
 [!code-cpp[System.Threading.ThreadStart2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadStart2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadStart2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadStart2/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadStart2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadStart2/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.ParameterizedThreadStart" />
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="Overload:System.Threading.Thread.Start" />
    <altmember cref="T:System.AppDomain" />
  </Docs>
</Type>