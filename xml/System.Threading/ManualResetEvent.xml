<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ManualResetEvent.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac56bd57be7d0b7a3e06e014afa452e4dadda84883c.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6bd57be7d0b7a3e06e014afa452e4dadda84883c</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.ManualResetEvent">
          <source>Notifies one or more waiting threads that an event has occurred.</source>
          <target state="translated">告知一個以上的等候中執行緒已發生事件。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Threading.ManualResetEvent">
          <source>This class cannot be inherited.</source>
          <target state="translated">這個類別無法被繼承。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>In the .NET Framework version 2.0, <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> derives from the new <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> class.</source>
          <target state="translated">在.NET Framework 2.0 版中，<ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph>衍生自新<ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>類別。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>A <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> is functionally equivalent to an <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> created with <ph id="ph3">&lt;xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph>其作用相當於<ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>以建立<ph id="ph3">&lt;xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>Unlike the <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> class, the <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> class provides access to named system synchronization events.</source>
          <target state="translated">不同於<ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph>類別<ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>類別會提供存取具名的系統同步處理事件。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source><ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> allows threads to communicate with each other by signaling.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> 可讓執行緒信號與對方進行通訊。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>Typically, this communication concerns a task which one thread must complete before other threads can proceed.</source>
          <target state="translated">通常，此通訊是有關的工作的執行緒必須完成其他執行緒才能繼續。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>When a thread begins an activity that must complete before other threads proceed, it calls <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Reset%2A&gt;</ph> to put <ph id="ph2">`ManualResetEvent`</ph> in the non-signaled state.</source>
          <target state="translated">執行緒開始其他之前必須完成的活動時執行緒繼續執行，它會呼叫<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Reset%2A&gt;</ph>放置<ph id="ph2">`ManualResetEvent`</ph>未收到訊號的狀態。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>This thread can be thought of as controlling the <ph id="ph1">`ManualResetEvent`</ph>.</source>
          <target state="translated">這個執行緒可以想成控制<ph id="ph1">`ManualResetEvent`</ph>。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>Threads that call <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> on the <ph id="ph2">`ManualResetEvent`</ph> will block, awaiting the signal.</source>
          <target state="translated">執行緒呼叫<ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph>上<ph id="ph2">`ManualResetEvent`</ph>會封鎖，等待訊號。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>When the controlling thread completes the activity, it calls <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> to signal that the waiting threads can proceed.</source>
          <target state="translated">當控制執行緒完成的活動時，它會呼叫<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph>發出信號的等候中執行緒才能繼續。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>All waiting threads are released.</source>
          <target state="translated">會釋放所有等候中執行緒。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>Once it has been signaled, <ph id="ph1">`ManualResetEvent`</ph> remains signaled until it is manually reset.</source>
          <target state="translated">一旦收到信號，<ph id="ph1">`ManualResetEvent`</ph>會保留已收到信號，直到手動重設為止。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>That is, calls to <ph id="ph1">`WaitOne`</ph> return immediately.</source>
          <target state="translated">也就是說，呼叫<ph id="ph1">`WaitOne`</ph>立即傳回。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>You can control the initial state of a <ph id="ph1">`ManualResetEvent`</ph> by passing a Boolean value to the constructor, <ph id="ph2">`true`</ph> if the initial state is signaled and <ph id="ph3">`false`</ph> otherwise.</source>
          <target state="translated">您可以控制的初始狀態<ph id="ph1">`ManualResetEvent`</ph>將布林值傳遞至建構函式，<ph id="ph2">`true`</ph>如果收到信號的初始狀態和<ph id="ph3">`false`</ph>否則。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source><ph id="ph1">`ManualResetEvent`</ph> can also be used with the <ph id="ph2">`static`</ph><ph id="ph3">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> methods.</source>
          <target state="translated"><ph id="ph1">`ManualResetEvent`</ph> 也可與<ph id="ph2">`static`</ph><ph id="ph3">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph>和<ph id="ph4">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>For more information about thread synchronization mechanisms, see <bpt id="p1">[</bpt>ManualResetEvent and ManualResetEventSlim<ept id="p1">](~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md)</ept> in the conceptual documentation.</source>
          <target state="translated">如需執行緒的同步處理機制的詳細資訊，請參閱<bpt id="p1">[</bpt>ManualResetEvent 和 ManualResetEventSlim<ept id="p1">](~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md)</ept>概念文件。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>The following example demonstrates how <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> works.</source>
          <target state="translated">下列範例會示範如何<ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph>的運作方式。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>The example starts with a <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> in the unsignaled state (that is, <ph id="ph2">`false`</ph> is passed to the constructor).</source>
          <target state="translated">此範例會啟動具有<ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph>信號的狀態 (也就是<ph id="ph2">`false`</ph>傳遞至建構函式)。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>The example creates three threads, each of which blocks on the <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> by calling its <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> method.</source>
          <target state="translated">此範例會建立三個執行緒，每個哪些區塊在<ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph>藉由呼叫其<ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>When the user presses the <bpt id="p1">**</bpt>Enter<ept id="p1">**</ept> key, the example calls the <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> method, which releases all three threads.</source>
          <target state="translated">當使用者按<bpt id="p1">**</bpt>Enter<ept id="p1">**</ept>索引鍵，範例會呼叫<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph>方法，這個方法會釋放所有的三個執行緒。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>Contrast this with the behavior of the <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> class, which releases threads one at a time, resetting automatically after each release.</source>
          <target state="translated">這和行為的<ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>類別，這會釋放執行緒一一次之後每個版本, 的自動重設。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>Pressing the <bpt id="p1">**</bpt>Enter<ept id="p1">**</ept> key again demonstrates that the <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> remains in the signaled state until its <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Reset%2A&gt;</ph> method is called: The example starts two more threads.</source>
          <target state="translated">按下<bpt id="p1">**</bpt>Enter<ept id="p1">**</ept>金鑰再次示範<ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph>會保留在收到信號的狀態，直到其<ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Reset%2A&gt;</ph>方法呼叫： 此範例會啟動兩個的多個執行緒。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>These threads do not block when they call the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> method, but instead run to completion.</source>
          <target state="translated">這些執行緒不會封鎖它們呼叫時<ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph>方法，但改為執行到完成為止。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>Pressing the <bpt id="p1">**</bpt>Enter<ept id="p1">**</ept> key again causes the example to call the <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Reset%2A&gt;</ph> method and to start one more thread, which blocks when it calls <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph>.</source>
          <target state="translated">按下<bpt id="p1">**</bpt>Enter<ept id="p1">**</ept>金鑰一次會造成呼叫範例<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Reset%2A&gt;</ph>方法，並啟動一個更多的執行緒，它會封鎖呼叫時，如果<ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>Pressing the <bpt id="p1">**</bpt>Enter<ept id="p1">**</ept> key one final time calls <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> to release the last thread, and the program ends.</source>
          <target state="translated">按下<bpt id="p1">**</bpt>Enter<ept id="p1">**</ept>其中一個索引鍵為最後一次呼叫<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph>釋放最後一個執行緒，並在程式結束。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>This class is thread safe.</source>
          <target state="translated">這個類別是安全執行緒。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to set the initial state signaled; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to set the initial state to nonsignaled.</source>
          <target state="translated">如果初始狀態設定為信號狀態，為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；初始狀態設定為非信號狀態則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEvent" /&gt;</ph> class with a Boolean value indicating whether to set the initial state to signaled.</source>
          <target state="translated">使用布林值 (Boolean) 來初始化 <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEvent" /&gt;</ph> 類別的新執行個體，指出初始狀態是否設定為信號狀態。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)">
          <source>If the initial state of a <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> is signaled (that is, if it is created by passing <ph id="ph2">`true`</ph> for <ph id="ph3">`initialState`</ph>), threads that wait on the <ph id="ph4">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> do not block.</source>
          <target state="translated">如果初始狀態<ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph>收到信號 (亦即，如果它由傳遞<ph id="ph2">`true`</ph>如<ph id="ph3">`initialState`</ph>)，等候的執行緒<ph id="ph4">&lt;xref:System.Threading.ManualResetEvent&gt;</ph>不會封鎖。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)">
          <source>If the initial state is nonsignaled, threads block until the <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> method is called.</source>
          <target state="translated">如果未收到訊號的初始狀態，執行緒會封鎖直到<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph>方法呼叫。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>