<Type Name="ManualResetEvent" FullName="System.Threading.ManualResetEvent">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9f583caf50ddbb4a7bdf1f90196e252a650505bb" /><Meta Name="ms.sourcegitcommit" Value="8b9e4a20f5d8811cfd7b034cb499f2c78ad1b2c1" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="02/06/2019" /><Meta Name="ms.locfileid" Value="55760666" /></Metadata><TypeSignature Language="C#" Value="public sealed class ManualResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManualResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ManualResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ManualResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManualResetEvent sealed : System::Threading::EventWaitHandle" />
  <TypeSignature Language="F#" Value="type ManualResetEvent = class&#xA;    inherit EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-1.1">System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="836fb-101">表示執行緒同步處理事件，收到訊號時，必須手動重設。</span><span class="sxs-lookup"><span data-stu-id="836fb-101">Represents a thread synchronization event that, when signaled, must be reset manually.</span></span> <span data-ttu-id="836fb-102">這個類別無法被繼承。</span><span class="sxs-lookup"><span data-stu-id="836fb-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

 <span data-ttu-id="836fb-103">您使用`ManualResetEvent`， <xref:System.Threading.AutoResetEvent>，和<xref:System.Threading.EventWaitHandle>執行緒的互動 （或執行緒發出訊號）。</span><span class="sxs-lookup"><span data-stu-id="836fb-103">You use `ManualResetEvent`, <xref:System.Threading.AutoResetEvent>, and <xref:System.Threading.EventWaitHandle> for thread interaction (or thread signaling).</span></span> <span data-ttu-id="836fb-104">如需詳細資訊，請參閱 <<c0> [ 執行緒的互動，或發出訊號](~/docs/standard/threading/overview-of-synchronization-primitives.md#thread-interaction-or-signaling)一節[同步處理原始物件概觀](~/docs/standard/threading/overview-of-synchronization-primitives.md)文章。</span><span class="sxs-lookup"><span data-stu-id="836fb-104">For more information, see the [Thread interaction, or signaling](~/docs/standard/threading/overview-of-synchronization-primitives.md#thread-interaction-or-signaling) section of the [Overview of synchronization primitives](~/docs/standard/threading/overview-of-synchronization-primitives.md) article.</span></span>  

 <span data-ttu-id="836fb-105">當執行緒開始的活動，必須先完成才能其他執行緒繼續執行，它會呼叫[ManualResetEvent.Reset](xref:System.Threading.EventWaitHandle.Reset%2A)把`ManualResetEvent`未收到信號的狀態。</span><span class="sxs-lookup"><span data-stu-id="836fb-105">When a thread begins an activity that must complete before other threads proceed, it calls [ManualResetEvent.Reset](xref:System.Threading.EventWaitHandle.Reset%2A) to put `ManualResetEvent` in the non-signaled state.</span></span> <span data-ttu-id="836fb-106">這個執行緒可以視為控制`ManualResetEvent`。</span><span class="sxs-lookup"><span data-stu-id="836fb-106">This thread can be thought of as controlling the `ManualResetEvent`.</span></span> <span data-ttu-id="836fb-107">執行緒呼叫[ManualResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne%2A)封鎖，等待訊號。</span><span class="sxs-lookup"><span data-stu-id="836fb-107">Threads that call [ManualResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne%2A) block, awaiting the signal.</span></span> <span data-ttu-id="836fb-108">當控制執行緒完成的活動時，它會呼叫[ManualResetEvent.Set](xref:System.Threading.EventWaitHandle.Set%2A)來表示可以繼續等候中執行緒。</span><span class="sxs-lookup"><span data-stu-id="836fb-108">When the controlling thread completes the activity, it calls [ManualResetEvent.Set](xref:System.Threading.EventWaitHandle.Set%2A) to signal that the waiting threads can proceed.</span></span> <span data-ttu-id="836fb-109">會釋放所有等候中執行緒。</span><span class="sxs-lookup"><span data-stu-id="836fb-109">All waiting threads are released.</span></span>  

 <span data-ttu-id="836fb-110">一旦收到信號時會`ManualResetEvent`會保持收到訊號的狀態，直到手動重設藉由呼叫<xref:System.Threading.EventWaitHandle.Reset>方法。</span><span class="sxs-lookup"><span data-stu-id="836fb-110">Once it has been signaled, `ManualResetEvent` remains signaled until it is manually reset by calling the <xref:System.Threading.EventWaitHandle.Reset> method.</span></span> <span data-ttu-id="836fb-111">也就是呼叫<xref:System.Threading.WaitHandle.WaitOne%2A>立即傳回。</span><span class="sxs-lookup"><span data-stu-id="836fb-111">That is, calls to <xref:System.Threading.WaitHandle.WaitOne%2A> return immediately.</span></span>  

 <span data-ttu-id="836fb-112">您可以控制的初始狀態`ManualResetEvent`藉由傳遞建構函式的布林值：`true`如果已收到訊號的初始狀態，和`false`否則。</span><span class="sxs-lookup"><span data-stu-id="836fb-112">You can control the initial state of a `ManualResetEvent` by passing a Boolean value to the constructor: `true` if the initial state is signaled, and `false` otherwise.</span></span>  
 
 <span data-ttu-id="836fb-113">`ManualResetEvent` 也可與`static`<xref:System.Threading.WaitHandle.WaitAll%2A>和<xref:System.Threading.WaitHandle.WaitAny%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="836fb-113">`ManualResetEvent` can also be used with the `static` <xref:System.Threading.WaitHandle.WaitAll%2A> and <xref:System.Threading.WaitHandle.WaitAny%2A> methods.</span></span>  
  
 <span data-ttu-id="836fb-114">從.NET Framework 2.0 版中，<xref:System.Threading.ManualResetEvent>衍生自<xref:System.Threading.EventWaitHandle>類別。</span><span class="sxs-lookup"><span data-stu-id="836fb-114">Beginning with the .NET Framework version 2.0, <xref:System.Threading.ManualResetEvent> derives from the <xref:System.Threading.EventWaitHandle> class.</span></span> <span data-ttu-id="836fb-115">A<xref:System.Threading.ManualResetEvent>相當於<xref:System.Threading.EventWaitHandle>以建立<xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="836fb-115">A <xref:System.Threading.ManualResetEvent> is functionally equivalent to an <xref:System.Threading.EventWaitHandle> created with <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
> <span data-ttu-id="836fb-116">不同於<xref:System.Threading.ManualResetEvent>類別，<xref:System.Threading.EventWaitHandle>類別提供存取具名的系統同步處理事件。</span><span class="sxs-lookup"><span data-stu-id="836fb-116">Unlike the <xref:System.Threading.ManualResetEvent> class, the <xref:System.Threading.EventWaitHandle> class provides access to named system synchronization events.</span></span>  

 <span data-ttu-id="836fb-117">從.NET Framework 4.0 版，開始<xref:System.Threading.ManualResetEventSlim?displayProperty=nameWithType>類別是輕量級替代方案<xref:System.Threading.ManualResetEvent>。</span><span class="sxs-lookup"><span data-stu-id="836fb-117">Beginning with the .NET Framework version 4.0, the <xref:System.Threading.ManualResetEventSlim?displayProperty=nameWithType> class is a lightweight alternative to <xref:System.Threading.ManualResetEvent>.</span></span>    
   
   
  
## Examples  
 <span data-ttu-id="836fb-118">下列範例示範如何<xref:System.Threading.ManualResetEvent>的運作方式。</span><span class="sxs-lookup"><span data-stu-id="836fb-118">The following example demonstrates how <xref:System.Threading.ManualResetEvent> works.</span></span> <span data-ttu-id="836fb-119">此範例開頭<xref:System.Threading.ManualResetEvent>中未發出訊號的狀態 (也就是`false`傳遞至建構函式)。</span><span class="sxs-lookup"><span data-stu-id="836fb-119">The example starts with a <xref:System.Threading.ManualResetEvent> in the unsignaled state (that is, `false` is passed to the constructor).</span></span> <span data-ttu-id="836fb-120">此範例會建立三個執行緒，每個哪些區塊<xref:System.Threading.ManualResetEvent>藉由呼叫其<xref:System.Threading.WaitHandle.WaitOne%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="836fb-120">The example creates three threads, each of which blocks on the <xref:System.Threading.ManualResetEvent> by calling its <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span> <span data-ttu-id="836fb-121">當使用者按下**Enter**鍵，此範例會呼叫<xref:System.Threading.EventWaitHandle.Set%2A>方法來釋放所有的三個執行緒。</span><span class="sxs-lookup"><span data-stu-id="836fb-121">When the user presses the **Enter** key, the example calls the <xref:System.Threading.EventWaitHandle.Set%2A> method, which releases all three threads.</span></span> <span data-ttu-id="836fb-122">與此相反的行為與<xref:System.Threading.AutoResetEvent>類別，這會釋放一個執行緒一次，每個版本發行後的自動重設。</span><span class="sxs-lookup"><span data-stu-id="836fb-122">Contrast this with the behavior of the <xref:System.Threading.AutoResetEvent> class, which releases threads one at a time, resetting automatically after each release.</span></span>  
  
 <span data-ttu-id="836fb-123">按下**Enter**金鑰再次示範<xref:System.Threading.ManualResetEvent>會保留在收到信號的狀態，直到其<xref:System.Threading.EventWaitHandle.Reset%2A>方法呼叫：此範例會啟動兩個的多個執行緒。</span><span class="sxs-lookup"><span data-stu-id="836fb-123">Pressing the **Enter** key again demonstrates that the <xref:System.Threading.ManualResetEvent> remains in the signaled state until its <xref:System.Threading.EventWaitHandle.Reset%2A> method is called: The example starts two more threads.</span></span> <span data-ttu-id="836fb-124">這些執行緒不會封鎖撥打電話時<xref:System.Threading.WaitHandle.WaitOne%2A>方法，但改為執行到完成為止。</span><span class="sxs-lookup"><span data-stu-id="836fb-124">These threads do not block when they call the <xref:System.Threading.WaitHandle.WaitOne%2A> method, but instead run to completion.</span></span>  
  
 <span data-ttu-id="836fb-125">按下**Enter**金鑰一次會造成呼叫範例<xref:System.Threading.EventWaitHandle.Reset%2A>方法，並啟動一個更多的執行緒，它會封鎖呼叫時<xref:System.Threading.WaitHandle.WaitOne%2A>。</span><span class="sxs-lookup"><span data-stu-id="836fb-125">Pressing the **Enter** key again causes the example to call the <xref:System.Threading.EventWaitHandle.Reset%2A> method and to start one more thread, which blocks when it calls <xref:System.Threading.WaitHandle.WaitOne%2A>.</span></span> <span data-ttu-id="836fb-126">按下**Enter**最後一次呼叫將其中一個金鑰<xref:System.Threading.EventWaitHandle.Set%2A>釋放最後一個執行緒，以及程式結束。</span><span class="sxs-lookup"><span data-stu-id="836fb-126">Pressing the **Enter** key one final time calls <xref:System.Threading.EventWaitHandle.Set%2A> to release the last thread, and the program ends.</span></span>  
  
 [!code-cpp[System.Threading.ManualResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ManualResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CS/source.cs#1)]
 [!code-vb[System.Threading.ManualResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="836fb-127">這個類別是安全執行緒。</span><span class="sxs-lookup"><span data-stu-id="836fb-127">This class is thread safe.</span></span></threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
    <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="836fb-128">Managed 執行緒處理</span><span class="sxs-lookup"><span data-stu-id="836fb-128">Managed Threading</span></span></related>
    <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md"><span data-ttu-id="836fb-129">同步處理原始物件概觀</span><span class="sxs-lookup"><span data-stu-id="836fb-129">Overview of synchronization primitives</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManualResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ManualResetEvent(bool initialState);" />
      <MemberSignature Language="F#" Value="new System.Threading.ManualResetEvent : bool -&gt; System.Threading.ManualResetEvent" Usage="new System.Threading.ManualResetEvent initialState" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState"><span data-ttu-id="836fb-130">如果初始狀態設定為信號狀態，為 <see langword="true" />；初始狀態設定為非信號狀態則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="836fb-130"><see langword="true" /> to set the initial state signaled; <see langword="false" /> to set the initial state to nonsignaled.</span></span></param>
        <summary><span data-ttu-id="836fb-131">使用布林值 (Boolean) 來初始化 <see cref="T:System.Threading.ManualResetEvent" /> 類別的新執行個體，指出初始狀態是否設定為信號狀態。</span><span class="sxs-lookup"><span data-stu-id="836fb-131">Initializes a new instance of the <see cref="T:System.Threading.ManualResetEvent" /> class with a Boolean value indicating whether to set the initial state to signaled.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="836fb-132">如果的初始狀態<xref:System.Threading.ManualResetEvent>收到信號 (亦即，如果它由傳遞`true`for `initialState`)，等候的執行緒<xref:System.Threading.ManualResetEvent>不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="836fb-132">If the initial state of a <xref:System.Threading.ManualResetEvent> is signaled (that is, if it is created by passing `true` for `initialState`), threads that wait on the <xref:System.Threading.ManualResetEvent> do not block.</span></span> <span data-ttu-id="836fb-133">如果未收到訊號的初始狀態，執行緒會封鎖直到<xref:System.Threading.EventWaitHandle.Set%2A>呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="836fb-133">If the initial state is nonsignaled, threads block until the <xref:System.Threading.EventWaitHandle.Set%2A> method is called.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="836fb-134">Managed 執行緒處理</span><span class="sxs-lookup"><span data-stu-id="836fb-134">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md"><span data-ttu-id="836fb-135">同步處理原始物件概觀</span><span class="sxs-lookup"><span data-stu-id="836fb-135">Overview of synchronization primitives</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public bool Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Function Reset () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; bool" Usage="manualResetEvent.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="836fb-136">將事件的狀態設定為未收到信號，會造成執行緒封鎖。</span><span class="sxs-lookup"><span data-stu-id="836fb-136">Sets the state of the event to nonsignaled, which causes threads to block.</span></span></summary>
        <returns><span data-ttu-id="836fb-137">如果作業成功，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="836fb-137"><see langword="true" /> if the operation succeeds; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public bool Set ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Set() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.Set" />
      <MemberSignature Language="VB.NET" Value="Public Function Set () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Set();" />
      <MemberSignature Language="F#" Value="member this.Set : unit -&gt; bool" Usage="manualResetEvent.Set " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="836fb-138">將事件的狀態設定為未收到信號，讓一個或多個等候執行緒繼續執行。</span><span class="sxs-lookup"><span data-stu-id="836fb-138">Sets the state of the event to signaled, which allows one or more waiting threads to proceed.</span></span></summary>
        <returns><span data-ttu-id="836fb-139">如果作業成功，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="836fb-139"><see langword="true" /> if the operation succeeds; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="836fb-140">呼叫 Set 方法會等候控制代碼保留在收到信號的狀態，直到<xref:System.Threading.ManualResetEvent.Reset>呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="836fb-140">Calling the Set method leaves the wait handle in a signaled state until the <xref:System.Threading.ManualResetEvent.Reset> method is called.</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
