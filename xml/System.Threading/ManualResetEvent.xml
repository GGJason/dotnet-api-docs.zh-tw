<Type Name="ManualResetEvent" FullName="System.Threading.ManualResetEvent">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6bd57be7d0b7a3e06e014afa452e4dadda84883c" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30527802" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ManualResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManualResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ManualResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ManualResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManualResetEvent sealed : System::Threading::EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>告知一個以上的等候中執行緒已發生事件。 這個類別無法被繼承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在.NET Framework 2.0 版中，<xref:System.Threading.ManualResetEvent>衍生自新<xref:System.Threading.EventWaitHandle>類別。 A<xref:System.Threading.ManualResetEvent>其作用相當於<xref:System.Threading.EventWaitHandle>以建立<xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType>。  
  
> [!NOTE]
>  不同於<xref:System.Threading.ManualResetEvent>類別<xref:System.Threading.EventWaitHandle>類別會提供存取具名的系統同步處理事件。  
  
 <xref:System.Threading.ManualResetEvent> 可讓執行緒信號與對方進行通訊。 通常，此通訊是有關的工作的執行緒必須完成其他執行緒才能繼續。  
  
 執行緒開始其他之前必須完成的活動時執行緒繼續執行，它會呼叫<xref:System.Threading.EventWaitHandle.Reset%2A>放置`ManualResetEvent`未收到訊號的狀態。 這個執行緒可以想成控制`ManualResetEvent`。 執行緒呼叫<xref:System.Threading.WaitHandle.WaitOne%2A>上`ManualResetEvent`會封鎖，等待訊號。 當控制執行緒完成的活動時，它會呼叫<xref:System.Threading.EventWaitHandle.Set%2A>發出信號的等候中執行緒才能繼續。 會釋放所有等候中執行緒。  
  
 一旦收到信號，`ManualResetEvent`會保留已收到信號，直到手動重設為止。 也就是說，呼叫`WaitOne`立即傳回。  
  
 您可以控制的初始狀態`ManualResetEvent`將布林值傳遞至建構函式，`true`如果收到信號的初始狀態和`false`否則。  
  
 `ManualResetEvent` 也可與`static`<xref:System.Threading.WaitHandle.WaitAll%2A>和<xref:System.Threading.WaitHandle.WaitAny%2A>方法。  
  
 如需執行緒的同步處理機制的詳細資訊，請參閱[ManualResetEvent 和 ManualResetEventSlim](~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md)概念文件。  
  
   
  
## Examples  
 下列範例會示範如何<xref:System.Threading.ManualResetEvent>的運作方式。 此範例會啟動具有<xref:System.Threading.ManualResetEvent>信號的狀態 (也就是`false`傳遞至建構函式)。 此範例會建立三個執行緒，每個哪些區塊在<xref:System.Threading.ManualResetEvent>藉由呼叫其<xref:System.Threading.WaitHandle.WaitOne%2A>方法。 當使用者按**Enter**索引鍵，範例會呼叫<xref:System.Threading.EventWaitHandle.Set%2A>方法，這個方法會釋放所有的三個執行緒。 這和行為的<xref:System.Threading.AutoResetEvent>類別，這會釋放執行緒一一次之後每個版本, 的自動重設。  
  
 按下**Enter**金鑰再次示範<xref:System.Threading.ManualResetEvent>會保留在收到信號的狀態，直到其<xref:System.Threading.EventWaitHandle.Reset%2A>方法呼叫： 此範例會啟動兩個的多個執行緒。 這些執行緒不會封鎖它們呼叫時<xref:System.Threading.WaitHandle.WaitOne%2A>方法，但改為執行到完成為止。  
  
 按下**Enter**金鑰一次會造成呼叫範例<xref:System.Threading.EventWaitHandle.Reset%2A>方法，並啟動一個更多的執行緒，它會封鎖呼叫時，如果<xref:System.Threading.WaitHandle.WaitOne%2A>。 按下**Enter**其中一個索引鍵為最後一次呼叫<xref:System.Threading.EventWaitHandle.Set%2A>釋放最後一個執行緒，並在程式結束。  
  
 [!code-cpp[System.Threading.ManualResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ManualResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CS/source.cs#1)]
 [!code-vb[System.Threading.ManualResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>這個類別是安全執行緒。</threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManualResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ManualResetEvent(bool initialState);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState">
          如果初始狀態設定為信號狀態，為 <see langword="true" />；初始狀態設定為非信號狀態則為 <see langword="false" />。</param>
        <summary>使用布林值 (Boolean) 來初始化 <see cref="T:System.Threading.ManualResetEvent" /> 類別的新執行個體，指出初始狀態是否設定為信號狀態。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果初始狀態<xref:System.Threading.ManualResetEvent>收到信號 (亦即，如果它由傳遞`true`如`initialState`)，等候的執行緒<xref:System.Threading.ManualResetEvent>不會封鎖。 如果未收到訊號的初始狀態，執行緒會封鎖直到<xref:System.Threading.EventWaitHandle.Set%2A>方法呼叫。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
      </Docs>
    </Member>
  </Members>
</Type>