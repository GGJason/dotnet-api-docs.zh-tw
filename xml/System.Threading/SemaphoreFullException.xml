<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="SemaphoreFullException.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5096d1c8bde9d947309b86d79d946baa395a19dd8.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">096d1c8bde9d947309b86d79d946baa395a19dd8</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.SemaphoreFullException">
          <source>The exception that is thrown when the <ph id="ph1">&lt;see cref="Overload:System.Threading.Semaphore.Release" /&gt;</ph> method is called on a semaphore whose count is already at the maximum.</source>
          <target state="translated">在已經達到最大計數的號誌上呼叫 <ph id="ph1">&lt;see cref="Overload:System.Threading.Semaphore.Release" /&gt;</ph> 方法時，所擲回的例外狀況。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreFullException">
          <source>The count on a semaphore is decremented each time a thread enters the semaphore, and incremented when a thread releases the semaphore.</source>
          <target state="translated">號誌計數會每次在執行緒進入號誌，及執行緒釋放號誌時遞增遞減。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreFullException">
          <source>When the count is zero, subsequent requests block until other threads release the semaphore.</source>
          <target state="translated">當計數為零時，後續的要求封鎖，直到其他的執行緒釋放號誌。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreFullException">
          <source>When all threads have released the semaphore, the count is at the maximum value specified when the semaphore was created.</source>
          <target state="translated">所有執行緒都釋放號誌，計數為最大值時指定已建立號誌。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreFullException">
          <source>If a programming error causes a thread to call the <ph id="ph1">&lt;xref:System.Threading.Semaphore.Release%2A?displayProperty=nameWithType&gt;</ph> method at this point, a <ph id="ph2">&lt;xref:System.Threading.SemaphoreFullException&gt;</ph> is thrown.</source>
          <target state="translated">如果是程式設計錯誤導致呼叫執行緒<ph id="ph1">&lt;xref:System.Threading.Semaphore.Release%2A?displayProperty=nameWithType&gt;</ph>方法在此時，<ph id="ph2">&lt;xref:System.Threading.SemaphoreFullException&gt;</ph>就會擲回。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreFullException">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Semaphore&gt;</ph> class does not enforce thread identity on calls to the <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">&lt;xref:System.Threading.Semaphore.Release%2A?displayProperty=nameWithType&gt;</ph> methods.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Semaphore&gt;</ph>類別不會強制執行呼叫的執行緒識別<ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType&gt;</ph>和<ph id="ph3">&lt;xref:System.Threading.Semaphore.Release%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreFullException">
          <source>It is not necessary for the same thread that called <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> to call <ph id="ph2">&lt;xref:System.Threading.Semaphore.Release%2A&gt;</ph>.</source>
          <target state="translated">您不需要針對同一個執行緒呼叫<ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph>呼叫<ph id="ph2">&lt;xref:System.Threading.Semaphore.Release%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreFullException">
          <source><ph id="ph1">&lt;xref:System.Threading.SemaphoreFullException&gt;</ph> does not necessarily indicate a problem with the code where the exception occurred.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.SemaphoreFullException&gt;</ph> 不一定表示有問題發生的例外狀況的程式碼。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreFullException">
          <source>Consider the following scenario: Thread A and thread B enter a semaphore that has a maximum count of two.</source>
          <target state="translated">請考慮下列狀況： 執行緒 A 和執行緒 B 輸入的最大計數為 2 號誌。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreFullException">
          <source>A programming error in thread B causes it to call <ph id="ph1">&lt;xref:System.Threading.Semaphore.Release%2A&gt;</ph> twice, so that the count on the semaphore is full.</source>
          <target state="translated">執行緒 B 中的程式設計錯誤導致呼叫<ph id="ph1">&lt;xref:System.Threading.Semaphore.Release%2A&gt;</ph>兩次，以便在號誌計數已滿。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreFullException">
          <source>As a result, when thread A eventually calls <ph id="ph1">&lt;xref:System.Threading.Semaphore.Release%2A&gt;</ph>, a <ph id="ph2">&lt;xref:System.Threading.SemaphoreFullException&gt;</ph> is thrown.</source>
          <target state="translated">如此一來，當執行緒 A 終於呼叫<ph id="ph1">&lt;xref:System.Threading.Semaphore.Release%2A&gt;</ph>、<ph id="ph2">&lt;xref:System.Threading.SemaphoreFullException&gt;</ph>就會擲回。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreFullException">
          <source>For a list of initial property values for an instance of the <ph id="ph1">&lt;xref:System.Threading.SemaphoreFullException&gt;</ph> class, see the <ph id="ph2">&lt;xref:System.Threading.SemaphoreFullException.%23ctor&gt;</ph> constructor.</source>
          <target state="translated">如需 <ph id="ph1">&lt;xref:System.Threading.SemaphoreFullException&gt;</ph> 類別之執行個體的初始屬性值清單，請參閱 <ph id="ph2">&lt;xref:System.Threading.SemaphoreFullException.%23ctor&gt;</ph> 建構函式。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreFullException">
          <source>The following code example shows how a programming error in one thread can lead to a <ph id="ph1">&lt;xref:System.Threading.SemaphoreFullException&gt;</ph> in another thread: Two threads enter a semaphore.</source>
          <target state="translated">下列程式碼範例示範如何在一個執行緒中的程式設計錯誤導致<ph id="ph1">&lt;xref:System.Threading.SemaphoreFullException&gt;</ph>另一個執行緒： 兩個執行緒進入號誌。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreFullException">
          <source>The second thread releases the semaphore twice, while the first thread is still executing its task.</source>
          <target state="translated">第二個執行緒兩次，釋放號誌，前者的執行緒仍在執行其工作時。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreFullException">
          <source>When the first thread finishes and releases the semaphore, the semaphore count is already full and an exception is thrown.</source>
          <target state="translated">當第一個執行緒完成並釋放號誌時，號誌計數已滿，並擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="T:System.Threading.SemaphoreFullException">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreFullException" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreFullException" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreFullException.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreFullException" /&gt;</ph> class with default values.</source>
          <target state="translated">使用預設值，初始化 <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreFullException" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreFullException.#ctor">
          <source>This constructor initializes the <ph id="ph1">&lt;xref:System.Exception.Message%2A&gt;</ph> property of the new instance to a system-supplied message that describes the error, such as "Adding the given count to the semaphore would cause it to exceed its maximum count."</source>
          <target state="translated">這個建構函式初始化<ph id="ph1">&lt;xref:System.Exception.Message%2A&gt;</ph>屬性的新執行個體的系統提供的訊息描述錯誤，例如"指定的計數加入號誌，會使它超過其最大計數。 」</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreFullException.#ctor">
          <source>This message takes into account the current system culture.</source>
          <target state="translated">此訊息會考量目前的系統文化特性。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreFullException.#ctor">
          <source>The following table shows the initial property values for an instance of the <ph id="ph1">&lt;xref:System.Threading.SemaphoreFullException&gt;</ph> class.</source>
          <target state="translated">下表顯示 <ph id="ph1">&lt;xref:System.Threading.SemaphoreFullException&gt;</ph> 類別執行個體的初始屬性值。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreFullException.#ctor">
          <source>Property</source>
          <target state="translated">屬性</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreFullException.#ctor">
          <source>Value</source>
          <target state="translated">值</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreFullException.#ctor">
          <source><ph id="ph1">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreFullException.#ctor">
          <source>The system-supplied error message string.</source>
          <target state="translated">系統提供的錯誤訊息字串。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreFullException.#ctor(System.String)">
          <source>The error message that explains the reason for the exception.</source>
          <target state="translated">解釋例外狀況原因的錯誤訊息。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreFullException.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreFullException" /&gt;</ph> class with a specified error message.</source>
          <target state="translated">使用指定的錯誤訊息，初始化 <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreFullException" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreFullException.#ctor(System.String)">
          <source>The content of <ph id="ph1">`message`</ph> is a text string intended to inform the user about the exception.</source>
          <target state="translated">內容<ph id="ph1">`message`</ph>的文字字串用意在於通知使用者有關例外狀況。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreFullException.#ctor(System.String)">
          <source>The caller of this constructor is required to ensure that this string has been localized for the current system culture.</source>
          <target state="translated">這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreFullException.#ctor(System.String)">
          <source>The following table shows the initial property values for an instance of the <ph id="ph1">&lt;xref:System.Threading.SemaphoreFullException&gt;</ph> class initialized with this constructor.</source>
          <target state="translated">下表顯示執行個體的初始屬性值<ph id="ph1">&lt;xref:System.Threading.SemaphoreFullException&gt;</ph>使用這個建構函式初始化的類別。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreFullException.#ctor(System.String)">
          <source>Property</source>
          <target state="translated">屬性</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreFullException.#ctor(System.String)">
          <source>Value</source>
          <target state="translated">值</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreFullException.#ctor(System.String)">
          <source><ph id="ph1">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreFullException.#ctor(System.String)">
          <source><ph id="ph1">`message`</ph>.</source>
          <target state="translated"><ph id="ph1">`message`</ph>。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreFullException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> object that holds the serialized object data about the exception being thrown.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> 物件，包含有關擲回之例外狀況的序列化物件資料。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreFullException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph> object that contains contextual information about the source or destination.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph> 物件，包含關於來源或目的端的內容資訊。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreFullException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreFullException" /&gt;</ph> class with serialized data.</source>
          <target state="translated">使用序列化資料，初始化 <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreFullException" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreFullException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This constructor is called during deserialization to reconstitute the exception object transmitted over a stream.</source>
          <target state="translated">進行還原序列化 (Deserialization) 期間會呼叫這個建構函式，以便重新構成經由資料流傳送的例外狀況物件。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreFullException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>For more information, see <bpt id="p1">[</bpt>XML and SOAP Serialization<ept id="p1">](~/docs/standard/serialization/xml-and-soap-serialization.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>XML 和 SOAP 序列化<ept id="p1">](~/docs/standard/serialization/xml-and-soap-serialization.md)</ept>。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreFullException.#ctor(System.String,System.Exception)">
          <source>The error message that explains the reason for the exception.</source>
          <target state="translated">解釋例外狀況原因的錯誤訊息。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreFullException.#ctor(System.String,System.Exception)">
          <source>The exception that is the cause of the current exception.</source>
          <target state="translated">做為目前例外狀況發生原因的例外狀況。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreFullException.#ctor(System.String,System.Exception)">
          <source>If the <bpt id="p1">&lt;c&gt;</bpt>innerException<ept id="p1">&lt;/c&gt;</ept> parameter is not <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the current exception is raised in a <ph id="ph2">&lt;see langword="catch" /&gt;</ph> block that handles the inner exception.</source>
          <target state="translated">如果 <bpt id="p1">&lt;c&gt;</bpt>innerException<ept id="p1">&lt;/c&gt;</ept> 參數不是 <ph id="ph1">&lt;see langword="null" /&gt;</ph>，則目前的例外狀況會在處理內部例外的 <ph id="ph2">&lt;see langword="catch" /&gt;</ph> 區塊中引發。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreFullException.#ctor(System.String,System.Exception)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreFullException" /&gt;</ph> class with a specified error message and a reference to the inner exception that is the cause of this exception.</source>
          <target state="translated">使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreFullException" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreFullException.#ctor(System.String,System.Exception)">
          <source>An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property.</source>
          <target state="translated">被擲回以做為前一個例外狀況直接結果的例外狀況，應該在 <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> 屬性中包含對前一個例外狀況的參考。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreFullException.#ctor(System.String,System.Exception)">
          <source>The <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property returns the same value that is passed into the constructor, or <ph id="ph2">`null`</ph> if the <ph id="ph3">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property does not supply the inner exception value to the constructor.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> 屬性會傳回與傳入建構函式中相同的值；如果 <ph id="ph2">`null`</ph> 屬性沒有提供內部例外值給建構函式，則傳回 <ph id="ph3">&lt;xref:System.Exception.InnerException%2A&gt;</ph>。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>