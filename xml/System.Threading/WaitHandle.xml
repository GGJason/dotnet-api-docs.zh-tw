<Type Name="WaitHandle" FullName="System.Threading.WaitHandle">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9c30c9bf2d271da2afe9d173213a99d04fceefda" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30531502" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class WaitHandle : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi abstract beforefieldinit WaitHandle extends System.MarshalByRefObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.WaitHandle" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class WaitHandle&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class WaitHandle abstract : MarshalByRefObject, IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="491cd-101">將等候共用資源獨佔存取權限的特定作業系統物件封裝起來。</span>
      <span class="sxs-lookup">
        <span data-stu-id="491cd-101">Encapsulates operating system–specific objects that wait for exclusive access to shared resources.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="491cd-102"><xref:System.Threading.WaitHandle>類別封裝 Win32 同步控制代碼，而且用來代表所有執行階段中允許多個等候作業的同步處理物件。</span><span class="sxs-lookup"><span data-stu-id="491cd-102">The <xref:System.Threading.WaitHandle> class encapsulates Win32 synchronization handles, and is used to represent all synchronization objects in the runtime that allow multiple wait operations.</span></span> <span data-ttu-id="491cd-103">如需與其他同步處理物件的等候控制代碼的比較，請參閱[同步處理原始物件概觀](~/docs/standard/threading/overview-of-synchronization-primitives.md)。</span><span class="sxs-lookup"><span data-stu-id="491cd-103">For a comparison of wait handles with other synchronization objects, see [Overview of Synchronization Primitives](~/docs/standard/threading/overview-of-synchronization-primitives.md).</span></span>  
  
 <span data-ttu-id="491cd-104"><xref:System.Threading.WaitHandle>本身的類別是抽象的。</span><span class="sxs-lookup"><span data-stu-id="491cd-104">The <xref:System.Threading.WaitHandle> class itself is abstract.</span></span> <span data-ttu-id="491cd-105">類別衍生自<xref:System.Threading.WaitHandle>定義信號的機制，以指示執行，或釋放存取共用資源，但是會使用繼承<xref:System.Threading.WaitHandle>方法來封鎖等候存取共用資源。</span><span class="sxs-lookup"><span data-stu-id="491cd-105">Classes derived from <xref:System.Threading.WaitHandle> define a signaling mechanism to indicate taking or releasing access to a shared resource, but they use the inherited <xref:System.Threading.WaitHandle> methods to block while waiting for access to shared resources.</span></span> <span data-ttu-id="491cd-106">類別衍生自<xref:System.Threading.WaitHandle>包括：</span><span class="sxs-lookup"><span data-stu-id="491cd-106">The classes derived from <xref:System.Threading.WaitHandle> include:</span></span>  
  
-   <span data-ttu-id="491cd-107"><xref:System.Threading.Mutex> 類別。</span><span class="sxs-lookup"><span data-stu-id="491cd-107">The <xref:System.Threading.Mutex> class.</span></span> <span data-ttu-id="491cd-108">請參閱[Mutex](~/docs/standard/threading/mutexes.md)。</span><span class="sxs-lookup"><span data-stu-id="491cd-108">See [Mutexes](~/docs/standard/threading/mutexes.md).</span></span>  
  
-   <span data-ttu-id="491cd-109"><xref:System.Threading.EventWaitHandle>類別和其衍生的類別，<xref:System.Threading.AutoResetEvent>和<xref:System.Threading.ManualResetEvent>。</span><span class="sxs-lookup"><span data-stu-id="491cd-109">The <xref:System.Threading.EventWaitHandle> class and its derived classes, <xref:System.Threading.AutoResetEvent> and <xref:System.Threading.ManualResetEvent>.</span></span> <span data-ttu-id="491cd-110">[EventWaitHandle、AutoResetEvent、CountdownEvent、ManualResetEvent](~/docs/standard/threading/eventwaithandle-autoresetevent-countdownevent-manualresetevent.md)。</span><span class="sxs-lookup"><span data-stu-id="491cd-110">See [EventWaitHandle, AutoResetEvent, CountdownEvent, ManualResetEvent](~/docs/standard/threading/eventwaithandle-autoresetevent-countdownevent-manualresetevent.md).</span></span>  
  
-   <span data-ttu-id="491cd-111"><xref:System.Threading.Semaphore> 類別。</span><span class="sxs-lookup"><span data-stu-id="491cd-111">The <xref:System.Threading.Semaphore> class.</span></span> <span data-ttu-id="491cd-112">請參閱[Semaphore 和 SemaphoreSlim](~/docs/standard/threading/semaphore-and-semaphoreslim.md)。</span><span class="sxs-lookup"><span data-stu-id="491cd-112">See [Semaphore and SemaphoreSlim](~/docs/standard/threading/semaphore-and-semaphoreslim.md).</span></span>  
  
 <span data-ttu-id="491cd-113">個別的等候控制代碼上封鎖的執行緒，可以將它所呼叫的執行個體方法<xref:System.Threading.WaitHandle.WaitOne%2A>，這會由衍生自的類別繼承<xref:System.Threading.WaitHandle>。</span><span class="sxs-lookup"><span data-stu-id="491cd-113">Threads can block on an individual wait handle by calling the instance method <xref:System.Threading.WaitHandle.WaitOne%2A>, which is inherited by classes derived from <xref:System.Threading.WaitHandle>.</span></span>  
  
 <span data-ttu-id="491cd-114">在衍生的類別<xref:System.Threading.WaitHandle>不同的執行緒相似性。</span><span class="sxs-lookup"><span data-stu-id="491cd-114">The derived classes of <xref:System.Threading.WaitHandle> differ in their thread affinity.</span></span> <span data-ttu-id="491cd-115">事件等候控制代碼 (<xref:System.Threading.EventWaitHandle>， <xref:System.Threading.AutoResetEvent>，和<xref:System.Threading.ManualResetEvent>) 和號誌沒有執行緒相似性; 任何執行緒可以發出信號的事件等候控制代碼或號誌。</span><span class="sxs-lookup"><span data-stu-id="491cd-115">Event wait handles (<xref:System.Threading.EventWaitHandle>, <xref:System.Threading.AutoResetEvent>, and <xref:System.Threading.ManualResetEvent>) and semaphores do not have thread affinity; any thread can signal an event wait handle or semaphore.</span></span> <span data-ttu-id="491cd-116">Mutex，相反地，沒有執行緒相似性。擁有 mutex 的執行緒必須釋放，和如果執行緒呼叫會擲回例外狀況<xref:System.Threading.Mutex.ReleaseMutex%2A>上未擁有 mutex 方法。</span><span class="sxs-lookup"><span data-stu-id="491cd-116">Mutexes, on the other hand, do have thread affinity; the thread that owns a mutex must release it, and an exception is thrown if a thread calls the <xref:System.Threading.Mutex.ReleaseMutex%2A> method on a mutex that it does not own.</span></span>  
  
 <span data-ttu-id="491cd-117">因為<xref:System.Threading.WaitHandle>類別衍生自<xref:System.MarshalByRefObject>，這些類別可以用來跨應用程式定義域界限同步處理執行緒活動。</span><span class="sxs-lookup"><span data-stu-id="491cd-117">Because the <xref:System.Threading.WaitHandle> class derives from <xref:System.MarshalByRefObject>, these classes can be used to synchronize the activities of threads across application domain boundaries.</span></span>  
  
 <span data-ttu-id="491cd-118">其衍生的類別，除了<xref:System.Threading.WaitHandle>類別的靜態方法，讓封鎖執行緒，直到其中數目或更多的同步處理物件收到信號...</span><span class="sxs-lookup"><span data-stu-id="491cd-118">In addition to its derived classes, the <xref:System.Threading.WaitHandle> class has a number of static methods that block a thread until one or more synchronization objects receive a signal..</span></span> <span data-ttu-id="491cd-119">它們包括：</span><span class="sxs-lookup"><span data-stu-id="491cd-119">These include:</span></span>  
  
-   <span data-ttu-id="491cd-120"><xref:System.Threading.WaitHandle.SignalAndWait%2A>可讓發出信號一個等候控制代碼，以及立即等候另一個執行緒。</span><span class="sxs-lookup"><span data-stu-id="491cd-120"><xref:System.Threading.WaitHandle.SignalAndWait%2A>, which allows a thread to signal one wait handle and immediately wait on another.</span></span>  
  
-   <span data-ttu-id="491cd-121"><xref:System.Threading.WaitHandle.WaitAll%2A>可讓執行緒等候直到在陣列中的所有等候控制代碼會都收到信號為止。</span><span class="sxs-lookup"><span data-stu-id="491cd-121"><xref:System.Threading.WaitHandle.WaitAll%2A>, which allows a thread to wait until all the wait handles in an array receive a signal.</span></span>  
  
-   <span data-ttu-id="491cd-122"><xref:System.Threading.WaitHandle.WaitAny%2A>可讓執行緒等候，直到其中一組指定的等候控制代碼已收到信號。</span><span class="sxs-lookup"><span data-stu-id="491cd-122"><xref:System.Threading.WaitHandle.WaitAny%2A>, which allows a thread to wait until any one of a specified set of wait handles has been signaled .</span></span>  
  
 <span data-ttu-id="491cd-123">這些方法多載提供逾時間隔放棄等候，並等候，讓其他執行緒使用的同步處理內容之前，請先結束同步處理內容的機會。</span><span class="sxs-lookup"><span data-stu-id="491cd-123">The overloads of these methods provide timeout intervals for abandoning the wait, and the opportunity to exit a synchronization context before entering the wait, allowing other threads to use the synchronization context.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="491cd-124">此類型會實作<xref:System.IDisposable>介面。</span><span class="sxs-lookup"><span data-stu-id="491cd-124">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="491cd-125">當您完成使用型別或衍生自它的類型時，您應該會處置它直接或間接。</span><span class="sxs-lookup"><span data-stu-id="491cd-125">When you have finished using the type or a type derived from it, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="491cd-126">若要直接處置的類型，呼叫其<xref:System.Threading.WaitHandle.Close%2A>方法中的`try` / `catch`區塊。</span><span class="sxs-lookup"><span data-stu-id="491cd-126">To dispose of the type directly, call its <xref:System.Threading.WaitHandle.Close%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="491cd-127">若要為其配置間接，使用語言建構例如`using`（C# 中） 或`Using`（在 Visual Basic)。</span><span class="sxs-lookup"><span data-stu-id="491cd-127">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="491cd-128">如需詳細資訊，請參閱中的 「 使用物件的實作 IDisposable 」 一節<xref:System.IDisposable>介面 > 主題。</span><span class="sxs-lookup"><span data-stu-id="491cd-128">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="491cd-129"><xref:System.Threading.WaitHandle> 實作<xref:System.IDisposable.Dispose%2A>模式。</span><span class="sxs-lookup"><span data-stu-id="491cd-129"><xref:System.Threading.WaitHandle> implements the <xref:System.IDisposable.Dispose%2A> pattern.</span></span> <span data-ttu-id="491cd-130">請參閱[處置模式](~/docs/standard/design-guidelines/dispose-pattern.md)。</span><span class="sxs-lookup"><span data-stu-id="491cd-130">See [Dispose Pattern](~/docs/standard/design-guidelines/dispose-pattern.md).</span></span> <span data-ttu-id="491cd-131">當您衍生自<xref:System.Threading.WaitHandle>，使用<xref:System.Threading.WaitHandle.SafeWaitHandle%2A>屬性來儲存您的原生控制代碼的作業系統控制代碼。</span><span class="sxs-lookup"><span data-stu-id="491cd-131">When you derive from <xref:System.Threading.WaitHandle>, use the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property to store your native handle operating system handle.</span></span> <span data-ttu-id="491cd-132">您不需要覆寫的受保護<xref:System.Threading.WaitHandle.Dispose%2A>方法除非您使用額外的 unmanaged 的資源。</span><span class="sxs-lookup"><span data-stu-id="491cd-132">You do not need to override the protected <xref:System.Threading.WaitHandle.Dispose%2A> method unless you use additional unmanaged resources.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="491cd-133">下列程式碼範例示範如何在兩個執行緒可以執行背景工作，同時主要執行緒等候工作完成使用靜態<xref:System.Threading.WaitHandle.WaitAny%2A>和<xref:System.Threading.WaitHandle.WaitAll%2A>方法<xref:System.Threading.WaitHandle>類別。</span><span class="sxs-lookup"><span data-stu-id="491cd-133">The following code example shows how two threads can do background tasks while the Main thread waits for the tasks to complete using the static <xref:System.Threading.WaitHandle.WaitAny%2A> and <xref:System.Threading.WaitHandle.WaitAll%2A> methods of the <xref:System.Threading.WaitHandle> class.</span></span>  
  
 [!code-cpp[WaitHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/WaitHandle/cpp/WaitHandle.cpp#1)]
 [!code-csharp[WaitHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/WaitHandle/CS/WaitHandle.cs#1)]
 [!code-vb[WaitHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/WaitHandle/VB/WaitHandle.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="491cd-134">此型別具備執行緒安全。</span>
      <span class="sxs-lookup">
        <span data-stu-id="491cd-134">This type is thread safe.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WaitHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WaitHandle();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="491cd-135">初始化 <see cref="T:System.Threading.WaitHandle" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-135">Initializes a new instance of the <see cref="T:System.Threading.WaitHandle" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public virtual void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="491cd-136">釋放目前 <see cref="T:System.Threading.WaitHandle" /> 所持有的全部資源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-136">Releases all resources held by the current <see cref="T:System.Threading.WaitHandle" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="491cd-137">這個方法是公用的實作<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>方法<xref:System.Threading.WaitHandle>類別和其衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="491cd-137">This method is the public implementation of the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> method for the <xref:System.Threading.WaitHandle> class and its derived classes.</span></span> <span data-ttu-id="491cd-138">它提供標準的實作會呼叫`Dispose(Boolean)`多載`true`引數，然後呼叫<xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="491cd-138">It provides a standard implementation that calls the `Dispose(Boolean)` overload with a `true` argument and then calls the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="491cd-139">呼叫此方法以釋放的執行個體所持有的所有資源`WaitHandle`或衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="491cd-139">Call this method to release all resources held by an instance of `WaitHandle` or a derived class.</span></span>  
  
 <span data-ttu-id="491cd-140">一旦呼叫此方法時，目前的執行個體的參考會導致未定義的行為。</span><span class="sxs-lookup"><span data-stu-id="491cd-140">Once this method is called, references to the current instance cause undefined behavior.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="491cd-141">請務必呼叫<xref:System.Threading.WaitHandle.Close%2A>或<xref:System.Threading.WaitHandle.Dispose>您釋放最後一個參考之前<xref:System.Threading.WaitHandle>。</span><span class="sxs-lookup"><span data-stu-id="491cd-141">Always call <xref:System.Threading.WaitHandle.Close%2A> or <xref:System.Threading.WaitHandle.Dispose> before you release your last reference to the <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="491cd-142">否則，將不會釋放它正在使用的資源。</span><span class="sxs-lookup"><span data-stu-id="491cd-142">Otherwise, the resources it is using will not be freed.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="491cd-143">您應該覆寫<see langword="Dispose(Boolean)" />方法，以釋放資源配置在衍生類別。</span>
            <span class="sxs-lookup">
              <span data-stu-id="491cd-143">You should override the <see langword="Dispose(Boolean)" /> method to release resources allocated in derived classes.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="491cd-144">將 <see cref="T:System.Threading.WaitHandle" /> 類別的目前執行個體所使用的資源全部釋放。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-144">Releases all resources used by the current instance of the <see cref="T:System.Threading.WaitHandle" /> class</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="491cd-145">將 <see cref="T:System.Threading.WaitHandle" /> 類別目前的執行個體所使用的資源全部釋出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-145">Releases all resources used by the current instance of the <see cref="T:System.Threading.WaitHandle" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="491cd-146">這個方法相當於<xref:System.Threading.WaitHandle.Close%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="491cd-146">This method is equivalent to the <xref:System.Threading.WaitHandle.Close%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="491cd-147">請務必呼叫<xref:System.Threading.WaitHandle.Close%2A>或<xref:System.Threading.WaitHandle.Dispose>您釋放最後一個參考之前<xref:System.Threading.WaitHandle>。</span><span class="sxs-lookup"><span data-stu-id="491cd-147">Always call <xref:System.Threading.WaitHandle.Close%2A> or <xref:System.Threading.WaitHandle.Dispose> before you release your last reference to the <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="491cd-148">否則，將不會釋放它正在使用的資源。</span><span class="sxs-lookup"><span data-stu-id="491cd-148">Otherwise, the resources it is using will not be freed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool explicitDisposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool explicitDisposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (explicitDisposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool explicitDisposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="explicitDisposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="explicitDisposing">
          <span data-ttu-id="491cd-149">
            <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-149">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="491cd-150">當在衍生類別中覆寫時，釋放 <see cref="T:System.Threading.WaitHandle" /> 所使用的 Unmanaged 資源，並選擇性釋放 Managed 資源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-150">When overridden in a derived class, releases the unmanaged resources used by the <see cref="T:System.Threading.WaitHandle" />, and optionally releases the managed resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="491cd-151">這個方法會呼叫<xref:System.Threading.WaitHandle.Close%2A>和<xref:System.Threading.WaitHandle.Dispose>方法`explicitDisposing`參數設定為`true`。</span><span class="sxs-lookup"><span data-stu-id="491cd-151">This method is called by the <xref:System.Threading.WaitHandle.Close%2A> and the <xref:System.Threading.WaitHandle.Dispose> methods with the `explicitDisposing` parameter set to `true`.</span></span>  <span data-ttu-id="491cd-152">當`explicitDisposing`參數是`true`，這個方法的任何 managed 物件所持有的資源全部釋出這個<xref:System.Threading.WaitHandle>物件參考。</span><span class="sxs-lookup"><span data-stu-id="491cd-152">When the `explicitDisposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Threading.WaitHandle> object references.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="491cd-153">您應該覆寫<see cref="M:System.Threading.WaitHandle.Dispose(System.Boolean)" />方法，以釋放資源配置在衍生類別。</span>
            <span class="sxs-lookup">
              <span data-stu-id="491cd-153">You should override the <see cref="M:System.Threading.WaitHandle.Dispose(System.Boolean)" /> method to release resources allocated in derived classes.</span>
            </span>
            <span data-ttu-id="491cd-154">
              <see cref="M:System.Threading.WaitHandle.Close" />或<see cref="M:System.Threading.WaitHandle.Dispose" />方法可以由其他物件呼叫多次。</span>
            <span class="sxs-lookup">
              <span data-stu-id="491cd-154">The <see cref="M:System.Threading.WaitHandle.Close" /> or <see cref="M:System.Threading.WaitHandle.Dispose" /> method can be called multiple times by other objects.</span>
            </span>
            <span data-ttu-id="491cd-155">在覆寫這個方法，小心不要參考先前處置之前呼叫中的物件<see langword="Dispose" />或<see langword="Close" />。</span>
            <span class="sxs-lookup">
              <span data-stu-id="491cd-155">When overriding this method, be careful not to reference objects that have been previously disposed in an earlier call to <see langword="Dispose" /> or <see langword="Close" />.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public virtual IntPtr Handle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.WaitHandle.Handle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property IntPtr Handle { IntPtr get(); void set(IntPtr value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use the SafeWaitHandle property instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="491cd-156">取得或設定原生 (Native) 的作業系統控制代碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-156">Gets or sets the native operating system handle.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="491cd-157">
            <see langword="IntPtr" />，代表原生作業系統控制代碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-157">An <see langword="IntPtr" /> representing the native operating system handle.</span>
          </span>
          <span data-ttu-id="491cd-158">預設為 <see cref="F:System.Threading.WaitHandle.InvalidHandle" /> 欄位的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-158">The default is the value of the <see cref="F:System.Threading.WaitHandle.InvalidHandle" /> field.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="491cd-159">指派新值給<xref:System.Threading.WaitHandle.Handle%2A>屬性不會關閉先前的控制代碼。</span><span class="sxs-lookup"><span data-stu-id="491cd-159">Assigning a new value to the <xref:System.Threading.WaitHandle.Handle%2A> property does not close the previous handle.</span></span> <span data-ttu-id="491cd-160">這會導致遺漏的控制代碼。</span><span class="sxs-lookup"><span data-stu-id="491cd-160">This can result in a leaked handle.</span></span>  
  
 <span data-ttu-id="491cd-161">請勿使用這個屬性在.NET Framework 2.0 版或更新;使用<xref:System.Threading.WaitHandle.SafeWaitHandle%2A>屬性改為。</span><span class="sxs-lookup"><span data-stu-id="491cd-161">Do not use this property in the .NET Framework version 2.0 or later; use the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property instead.</span></span> <span data-ttu-id="491cd-162">此屬性設定為有效的控制代碼也集<xref:System.Threading.WaitHandle.SafeWaitHandle%2A>屬性，但是將它設定為<xref:System.Threading.WaitHandle.InvalidHandle>可能會導致遺漏的控制代碼。</span><span class="sxs-lookup"><span data-stu-id="491cd-162">Setting this property to a valid handle also sets the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property, but setting it to <xref:System.Threading.WaitHandle.InvalidHandle> can result in a leaked handle.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="491cd-163">需要完全信任立即呼叫端若要設定屬性值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-163">Requires full trust for the immediate caller to set the property value.</span>
          </span>
          <span data-ttu-id="491cd-164">無法由部分信任或安全性透明程式碼中設定這個成員。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-164">This member cannot be set by partially trusted or transparent code.</span>
          </span>
        </permission>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">
          <span data-ttu-id="491cd-165">在衍生的型別必須具有<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />設定屬性值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-165">Derived types must have <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> to set the property value.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="InvalidHandle">
      <MemberSignature Language="C#" Value="protected static readonly IntPtr InvalidHandle;" />
      <MemberSignature Language="ILAsm" Value=".field family static initonly native int InvalidHandle" />
      <MemberSignature Language="DocId" Value="F:System.Threading.WaitHandle.InvalidHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Shared ReadOnly InvalidHandle As IntPtr " />
      <MemberSignature Language="C++ CLI" Value="protected: static initonly IntPtr InvalidHandle;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="491cd-166">代表無效的原生作業系統控制代碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-166">Represents an invalid native operating system handle.</span>
          </span>
          <span data-ttu-id="491cd-167">此欄位為唯讀。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-167">This field is read-only.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="491cd-168">在內部用來初始化<xref:System.Threading.WaitHandle.Handle%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="491cd-168">Used internally to initialize the <xref:System.Threading.WaitHandle.Handle%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="491cd-169">您可以使用此值來判斷是否<see cref="P:System.Threading.WaitHandle.Handle" />屬性包含有效的原生作業系統控制代碼。</span>
            <span class="sxs-lookup">
              <span data-stu-id="491cd-169">You can use this value to determine whether the <see cref="P:System.Threading.WaitHandle.Handle" /> property contains a valid native operating system handle.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="SafeWaitHandle">
      <MemberSignature Language="C#" Value="public Microsoft.Win32.SafeHandles.SafeWaitHandle SafeWaitHandle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Win32.SafeHandles.SafeWaitHandle SafeWaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.WaitHandle.SafeWaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public Property SafeWaitHandle As SafeWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Win32::SafeHandles::SafeWaitHandle ^ SafeWaitHandle { Microsoft::Win32::SafeHandles::SafeWaitHandle ^ get(); void set(Microsoft::Win32::SafeHandles::SafeWaitHandle ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.SafeHandles.SafeWaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="491cd-170">取得或設定原生 (Native) 的作業系統控制代碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-170">Gets or sets the native operating system handle.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="491cd-171">
            <see cref="T:Microsoft.Win32.SafeHandles.SafeWaitHandle" />，代表原生作業系統控制代碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-171">A <see cref="T:Microsoft.Win32.SafeHandles.SafeWaitHandle" /> representing the native operating system handle.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="491cd-172">當您指派新值以<xref:System.Threading.WaitHandle.SafeWaitHandle%2A>屬性，先前的控制代碼將會關閉時先前<xref:Microsoft.Win32.SafeHandles.SafeWaitHandle>收集物件。</span><span class="sxs-lookup"><span data-stu-id="491cd-172">When you assign a new value to the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property, the previous handle will be closed when the previous <xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> object is collected.</span></span> <span data-ttu-id="491cd-173">不要以手動方式關閉此控制代碼，因為這會導致<xref:System.ObjectDisposedException>時<xref:Microsoft.Win32.SafeHandles.SafeWaitHandle>嘗試關閉此控制代碼。</span><span class="sxs-lookup"><span data-stu-id="491cd-173">Do not manually close the handle, because this results in an <xref:System.ObjectDisposedException> when the <xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> attempts to close the handle.</span></span>  
  
 <span data-ttu-id="491cd-174"><xref:System.Threading.WaitHandle> 實作<xref:System.IDisposable.Dispose%2A>模式。</span><span class="sxs-lookup"><span data-stu-id="491cd-174"><xref:System.Threading.WaitHandle> implements the <xref:System.IDisposable.Dispose%2A> pattern.</span></span> <span data-ttu-id="491cd-175">請參閱[處置模式](~/docs/standard/design-guidelines/dispose-pattern.md)。</span><span class="sxs-lookup"><span data-stu-id="491cd-175">See [Dispose Pattern](~/docs/standard/design-guidelines/dispose-pattern.md).</span></span> <span data-ttu-id="491cd-176">當您衍生自<xref:System.Threading.WaitHandle>，使用<xref:System.Threading.WaitHandle.SafeWaitHandle%2A>屬性來儲存您的原生控制代碼的作業系統控制代碼。</span><span class="sxs-lookup"><span data-stu-id="491cd-176">When you derive from <xref:System.Threading.WaitHandle>, use the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property to store your native handle operating system handle.</span></span> <span data-ttu-id="491cd-177">您不需要覆寫的受保護<xref:System.Threading.WaitHandle.Dispose%2A>方法除非您使用額外的 unmanaged 的資源。</span><span class="sxs-lookup"><span data-stu-id="491cd-177">You do not need to override the protected <xref:System.Threading.WaitHandle.Dispose%2A> method unless you use additional unmanaged resources.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="491cd-178">需要完全信任立即呼叫者。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-178">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="491cd-179">這個成員無法供部分信任或安全性透明程式碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-179">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">
          <span data-ttu-id="491cd-180">在衍生的型別必須具有<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />呼叫這個成員。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-180">Derived types must have <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> to call this member.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="SignalAndWait">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="491cd-181">發出一個 <see cref="T:System.Threading.WaitHandle" /> 信號並等候另一個。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-181">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public static bool SignalAndWait (System.Threading.WaitHandle toSignal, System.Threading.WaitHandle toWaitOn);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SignalAndWait(class System.Threading.WaitHandle toSignal, class System.Threading.WaitHandle toWaitOn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SignalAndWait (toSignal As WaitHandle, toWaitOn As WaitHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SignalAndWait(System::Threading::WaitHandle ^ toSignal, System::Threading::WaitHandle ^ toWaitOn);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toSignal" Type="System.Threading.WaitHandle" />
        <Parameter Name="toWaitOn" Type="System.Threading.WaitHandle" />
      </Parameters>
      <Docs>
        <param name="toSignal">
          <span data-ttu-id="491cd-182">要發出的 <see cref="T:System.Threading.WaitHandle" /> 信號。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-182">The <see cref="T:System.Threading.WaitHandle" /> to signal.</span>
          </span>
        </param>
        <param name="toWaitOn">
          <span data-ttu-id="491cd-183">要等候的 <see cref="T:System.Threading.WaitHandle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-183">The <see cref="T:System.Threading.WaitHandle" /> to wait on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="491cd-184">發出一個 <see cref="T:System.Threading.WaitHandle" /> 信號並等候另一個。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-184">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="491cd-185">如果順利完成信號發出和等候，則為 <see langword="true" />；如果未完成等候，則不會傳回這個方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-185">
              <see langword="true" /> if both the signal and the wait complete successfully; if the wait does not complete, the method does not return.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="491cd-186">這項作業不保證是不可部分完成。</span><span class="sxs-lookup"><span data-stu-id="491cd-186">This operation is not guaranteed to be atomic.</span></span> <span data-ttu-id="491cd-187">在目前的執行緒訊號後`toSignal`之前等候`toWaitOn`，另一個處理器執行的執行緒可能會發出信號`toWaitOn`或等候它。</span><span class="sxs-lookup"><span data-stu-id="491cd-187">After the current thread signals `toSignal` but before it waits on `toWaitOn`, a thread that is running on another processor might signal `toWaitOn` or wait on it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="491cd-188">下列程式碼範例使用<xref:System.Threading.WaitHandle.SignalAndWait%28System.Threading.WaitHandle%2CSystem.Threading.WaitHandle%29>方法多載來允許主執行緒發出信號封鎖的執行緒，以及執行緒完成工作，然後等候。</span><span class="sxs-lookup"><span data-stu-id="491cd-188">The following code example uses the <xref:System.Threading.WaitHandle.SignalAndWait%28System.Threading.WaitHandle%2CSystem.Threading.WaitHandle%29> method overload to allow the main thread to signal a blocked thread and then wait until the thread finishes a task.</span></span>  
  
 <span data-ttu-id="491cd-189">此範例會啟動五個執行緒，讓他們封鎖<xref:System.Threading.EventWaitHandle>以建立<xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType>旗標，以及發行一個執行緒時間使用者按下 ENTER 鍵。</span><span class="sxs-lookup"><span data-stu-id="491cd-189">The example starts five threads, allows them to block on an <xref:System.Threading.EventWaitHandle> created with the <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType> flag, and then releases one thread each time the user presses the ENTER key.</span></span> <span data-ttu-id="491cd-190">此範例會排入佇列，另一個的五個執行緒，並釋放所有使用<xref:System.Threading.EventWaitHandle>以建立<xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType>旗標。</span><span class="sxs-lookup"><span data-stu-id="491cd-190">The example then queues another five threads and releases them all using an <xref:System.Threading.EventWaitHandle> created with the <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType> flag.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/CS/source.cs#1)]
 [!code-vb[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="491cd-191">
            <paramref name="toSignal" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-191">
              <paramref name="toSignal" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="491cd-192">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-192">-or-</span>
          </span>
          <span data-ttu-id="491cd-193">
            <paramref name="toWaitOn" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-193">
              <paramref name="toWaitOn" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="491cd-194">在擁有 <see cref="T:System.STAThreadAttribute" /> 的執行緒上呼叫此方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-194">The method was called on a thread that has <see cref="T:System.STAThreadAttribute" />.</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="491cd-195">在 Windows 98 或 Windows Millennium Edition 上不支援這個方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-195">This method is not supported on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="491cd-196">
            <paramref name="toSignal" /> 為號誌，且已經有完整計數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-196">
              <paramref name="toSignal" /> is a semaphore, and it already has a full count.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="491cd-197">由於執行緒結束時未釋放 Mutex，已完成等候。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-197">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="491cd-198">在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-198">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public static bool SignalAndWait (System.Threading.WaitHandle toSignal, System.Threading.WaitHandle toWaitOn, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SignalAndWait(class System.Threading.WaitHandle toSignal, class System.Threading.WaitHandle toWaitOn, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SignalAndWait (toSignal As WaitHandle, toWaitOn As WaitHandle, millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SignalAndWait(System::Threading::WaitHandle ^ toSignal, System::Threading::WaitHandle ^ toWaitOn, int millisecondsTimeout, bool exitContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toSignal" Type="System.Threading.WaitHandle" />
        <Parameter Name="toWaitOn" Type="System.Threading.WaitHandle" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="toSignal">
          <span data-ttu-id="491cd-199">要發出的 <see cref="T:System.Threading.WaitHandle" /> 信號。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-199">The <see cref="T:System.Threading.WaitHandle" /> to signal.</span>
          </span>
        </param>
        <param name="toWaitOn">
          <span data-ttu-id="491cd-200">要等候的 <see cref="T:System.Threading.WaitHandle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-200">The <see cref="T:System.Threading.WaitHandle" /> to wait on.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="491cd-201">整數，表示要等候的間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-201">An integer that represents the interval to wait.</span>
          </span>
          <span data-ttu-id="491cd-202">如果值為 <see cref="F:System.Threading.Timeout.Infinite" /> (亦即 -1)，則會永遠等候。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-202">If the value is <see cref="F:System.Threading.Timeout.Infinite" />, that is, -1, the wait is infinite.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="491cd-203">
            <see langword="true" /> 表示在等候 (如果在同步內容中) 前結束內容的同步處理網域，並於之後重新取得，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-203">
              <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="491cd-204">發出一個 <see cref="T:System.Threading.WaitHandle" /> 信號並等候另一個，將逾時間隔指定為 32 位元帶正負號的整數，並指定是否要先離開內容的同步處理網域，再進入等候狀態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-204">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another, specifying a time-out interval as a 32-bit signed integer and specifying whether to exit the synchronization domain for the context before entering the wait.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="491cd-205">如果順利完成信號發出和等候，則為 <see langword="true" />；如果完成信號發出但等候逾時，則為 <see langword="false" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-205">
              <see langword="true" /> if both the signal and the wait completed successfully, or <see langword="false" /> if the signal completed but the wait timed out.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="491cd-206">這項作業不保證是不可部分完成。</span><span class="sxs-lookup"><span data-stu-id="491cd-206">This operation is not guaranteed to be atomic.</span></span> <span data-ttu-id="491cd-207">在目前的執行緒訊號後`toSignal`之前等候`toWaitOn`，另一個處理器執行的執行緒可能會發出信號`toWaitOn`或等候它。</span><span class="sxs-lookup"><span data-stu-id="491cd-207">After the current thread signals `toSignal` but before it waits on `toWaitOn`, a thread that is running on another processor might signal `toWaitOn` or wait on it.</span></span>  
  
 <span data-ttu-id="491cd-208">如果`millisecondsTimeout`為零，此方法不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="491cd-208">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="491cd-209">它會測試的狀態`toWaitOn`並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="491cd-209">It tests the state of the `toWaitOn` and returns immediately.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="491cd-210">結束內容的資訊</span><span class="sxs-lookup"><span data-stu-id="491cd-210">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="491cd-211">`exitContext`參數沒有任何作用，除非<xref:System.Threading.WaitHandle.SignalAndWait%2A>方法從非預設的 managed 內容內呼叫。</span><span class="sxs-lookup"><span data-stu-id="491cd-211">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="491cd-212">如果執行緒位呼叫內部的衍生自類別的執行個體此情形<xref:System.ContextBoundObject>。</span><span class="sxs-lookup"><span data-stu-id="491cd-212">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="491cd-213">即使您目前正在執行的方法不是衍生自的類別上<xref:System.ContextBoundObject>、 like <xref:System.String>，您可以在非預設的內容中如果<xref:System.ContextBoundObject>您目前的應用程式定義域中的堆疊上。</span><span class="sxs-lookup"><span data-stu-id="491cd-213">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="491cd-214">當您的程式碼在非預設的內容中執行時，指定`true`如`exitContext`造成執行緒結束的非預設的 managed 的內容 (也就是轉換至預設內容) 執行之前<xref:System.Threading.WaitHandle.SignalAndWait%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="491cd-214">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method.</span></span> <span data-ttu-id="491cd-215">執行緒的呼叫之後傳回原始的非預設內容<xref:System.Threading.WaitHandle.SignalAndWait%2A>方法完成。</span><span class="sxs-lookup"><span data-stu-id="491cd-215">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method completes.</span></span>  
  
 <span data-ttu-id="491cd-216">這有助於進行此內容繫結類別具有<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>。</span><span class="sxs-lookup"><span data-stu-id="491cd-216">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="491cd-217">在此情況下，類別的成員的所有呼叫都會自動同步都處理，且同步處理網域為類別的程式碼的整個本文。</span><span class="sxs-lookup"><span data-stu-id="491cd-217">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="491cd-218">如果成員的呼叫堆疊中的程式碼會呼叫<xref:System.Threading.WaitHandle.SignalAndWait%2A>方法，並指定`true`如`exitContext`，執行緒結束的同步處理網域，讓呼叫物件的任何成員，以繼續進行遭到封鎖的執行緒。</span><span class="sxs-lookup"><span data-stu-id="491cd-218">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="491cd-219">當<xref:System.Threading.WaitHandle.SignalAndWait%2A>方法傳回時，進行呼叫的執行緒必須等待重新輸入同步處理網域。</span><span class="sxs-lookup"><span data-stu-id="491cd-219">When the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="491cd-220">
            <paramref name="toSignal" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-220">
              <paramref name="toSignal" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="491cd-221">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-221">-or-</span>
          </span>
          <span data-ttu-id="491cd-222">
            <paramref name="toWaitOn" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-222">
              <paramref name="toWaitOn" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="491cd-223">在擁有 <see cref="T:System.STAThreadAttribute" /> 的執行緒上呼叫此方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-223">The method is called on a thread that has <see cref="T:System.STAThreadAttribute" />.</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="491cd-224">在 Windows 98 或 Windows Millennium Edition 上不支援這個方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-224">This method is not supported on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="491cd-225">無法對 <see cref="T:System.Threading.WaitHandle" /> 發出信號，因為它可能會超過最大計數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-225">The <see cref="T:System.Threading.WaitHandle" /> cannot be signaled because it would exceed its maximum count.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="491cd-226">
            <paramref name="millisecondsTimeout" /> 為 -1 以外的負數，表示無限逾時。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-226">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="491cd-227">由於執行緒結束時未釋放 Mutex，已完成等候。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-227">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="491cd-228">在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-228">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public static bool SignalAndWait (System.Threading.WaitHandle toSignal, System.Threading.WaitHandle toWaitOn, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SignalAndWait(class System.Threading.WaitHandle toSignal, class System.Threading.WaitHandle toWaitOn, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SignalAndWait (toSignal As WaitHandle, toWaitOn As WaitHandle, timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SignalAndWait(System::Threading::WaitHandle ^ toSignal, System::Threading::WaitHandle ^ toWaitOn, TimeSpan timeout, bool exitContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toSignal" Type="System.Threading.WaitHandle" />
        <Parameter Name="toWaitOn" Type="System.Threading.WaitHandle" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="toSignal">
          <span data-ttu-id="491cd-229">要發出的 <see cref="T:System.Threading.WaitHandle" /> 信號。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-229">The <see cref="T:System.Threading.WaitHandle" /> to signal.</span>
          </span>
        </param>
        <param name="toWaitOn">
          <span data-ttu-id="491cd-230">要等候的 <see cref="T:System.Threading.WaitHandle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-230">The <see cref="T:System.Threading.WaitHandle" /> to wait on.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="491cd-231">
            <see cref="T:System.TimeSpan" />，代表要等候的間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-231">A <see cref="T:System.TimeSpan" /> that represents the interval to wait.</span>
          </span>
          <span data-ttu-id="491cd-232">如果此值為 -1，則會無限期等候。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-232">If the value is -1, the wait is infinite.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="491cd-233">
            <see langword="true" /> 表示在等候 (如果在同步內容中) 前結束內容的同步處理網域，並於之後重新取得，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-233">
              <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="491cd-234">發出一個 <see cref="T:System.Threading.WaitHandle" /> 信號並等候另一個，將逾時間隔指定為 <see cref="T:System.TimeSpan" />，並指定是否要先離開內容的同步處理網域，再進入等候狀態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-234">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another, specifying the time-out interval as a <see cref="T:System.TimeSpan" /> and specifying whether to exit the synchronization domain for the context before entering the wait.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="491cd-235">如果順利完成信號發出和等候，則為 <see langword="true" />；如果完成信號發出但等候逾時，則為 <see langword="false" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-235">
              <see langword="true" /> if both the signal and the wait completed successfully, or <see langword="false" /> if the signal completed but the wait timed out.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="491cd-236">這項作業不保證是不可部分完成。</span><span class="sxs-lookup"><span data-stu-id="491cd-236">This operation is not guaranteed to be atomic.</span></span> <span data-ttu-id="491cd-237">在目前的執行緒訊號後`toSignal`之前等候`toWaitOn`，另一個處理器執行的執行緒可能會發出信號`toWaitOn`或等候它。</span><span class="sxs-lookup"><span data-stu-id="491cd-237">After the current thread signals `toSignal` but before it waits on `toWaitOn`, a thread that is running on another processor might signal `toWaitOn` or wait on it.</span></span>  
  
 <span data-ttu-id="491cd-238">最大值`timeout`是<xref:System.Int32.MaxValue?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="491cd-238">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="491cd-239">如果`timeout`為零，此方法不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="491cd-239">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="491cd-240">它會測試的狀態`toWaitOn`並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="491cd-240">It tests the state of the `toWaitOn` and returns immediately.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="491cd-241">結束內容的資訊</span><span class="sxs-lookup"><span data-stu-id="491cd-241">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="491cd-242">`exitContext`參數沒有任何作用，除非<xref:System.Threading.WaitHandle.SignalAndWait%2A>方法從非預設的 managed 內容內呼叫。</span><span class="sxs-lookup"><span data-stu-id="491cd-242">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="491cd-243">如果執行緒位呼叫內部的衍生自類別的執行個體此情形<xref:System.ContextBoundObject>。</span><span class="sxs-lookup"><span data-stu-id="491cd-243">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="491cd-244">即使您目前正在執行的方法不是衍生自的類別上<xref:System.ContextBoundObject>、 like <xref:System.String>，您可以在非預設的內容中如果<xref:System.ContextBoundObject>您目前的應用程式定義域中的堆疊上。</span><span class="sxs-lookup"><span data-stu-id="491cd-244">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="491cd-245">當您的程式碼在非預設的內容中執行時，指定`true`如`exitContext`造成執行緒結束的非預設的 managed 的內容 (也就是轉換至預設內容) 執行之前<xref:System.Threading.WaitHandle.SignalAndWait%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="491cd-245">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method.</span></span> <span data-ttu-id="491cd-246">執行緒的呼叫之後傳回原始的非預設內容<xref:System.Threading.WaitHandle.SignalAndWait%2A>方法完成。</span><span class="sxs-lookup"><span data-stu-id="491cd-246">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method completes.</span></span>  
  
 <span data-ttu-id="491cd-247">這有助於進行此內容繫結類別具有<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>。</span><span class="sxs-lookup"><span data-stu-id="491cd-247">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="491cd-248">在此情況下，類別的成員的所有呼叫都會自動同步都處理，且同步處理網域為類別的程式碼的整個本文。</span><span class="sxs-lookup"><span data-stu-id="491cd-248">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="491cd-249">如果成員的呼叫堆疊中的程式碼會呼叫<xref:System.Threading.WaitHandle.SignalAndWait%2A>方法，並指定`true`如`exitContext`，執行緒結束的同步處理網域，讓呼叫物件的任何成員，以繼續進行遭到封鎖的執行緒。</span><span class="sxs-lookup"><span data-stu-id="491cd-249">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="491cd-250">當<xref:System.Threading.WaitHandle.SignalAndWait%2A>方法傳回時，進行呼叫的執行緒必須等待重新輸入同步處理網域。</span><span class="sxs-lookup"><span data-stu-id="491cd-250">When the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="491cd-251">
            <paramref name="toSignal" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-251">
              <paramref name="toSignal" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="491cd-252">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-252">-or-</span>
          </span>
          <span data-ttu-id="491cd-253">
            <paramref name="toWaitOn" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-253">
              <paramref name="toWaitOn" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="491cd-254">在擁有 <see cref="T:System.STAThreadAttribute" /> 的執行緒上呼叫此方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-254">The method was called on a thread that has <see cref="T:System.STAThreadAttribute" />.</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="491cd-255">在 Windows 98 或 Windows Millennium Edition 上不支援這個方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-255">This method is not supported on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="491cd-256">
            <paramref name="toSignal" /> 為號誌，且已經有完整計數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-256">
              <paramref name="toSignal" /> is a semaphore, and it already has a full count.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="491cd-257">
            <paramref name="timeout" /> 判定為 -1 以外的負毫秒數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-257">
              <paramref name="timeout" /> evaluates to a negative number of milliseconds other than -1.</span>
          </span>
          <span data-ttu-id="491cd-258">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-258">-or-</span>
          </span>
          <span data-ttu-id="491cd-259">
            <paramref name="timeout" /> 大於 <see cref="F:System.Int32.MaxValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-259">
              <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="491cd-260">由於執行緒結束時未釋放 Mutex，已完成等候。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-260">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="491cd-261">在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-261">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitAll">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="491cd-262">等候指定陣列中的所有項目都收到信號。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-262">Waits for all the elements in the specified array to receive a signal.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle()) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="491cd-263">
            <see langword="WaitHandle" /> 陣列，包含目前執行個體將等候的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-263">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
          <span data-ttu-id="491cd-264">這個陣列不能包含相同物件的多個參考。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-264">This array cannot contain multiple references to the same object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="491cd-265">等候指定陣列中的所有項目都收到信號。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-265">Waits for all the elements in the specified array to receive a signal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="491cd-266">當 <paramref name="waitHandles" /> 中的所有項目都收到信號時，則為 <see langword="true" />；否則絕不會傳回這個方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-266">
              <see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise the method never returns.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="491cd-267"><xref:System.Threading.AbandonedMutexException> 是.NET Framework 2.0 版的新功能。</span><span class="sxs-lookup"><span data-stu-id="491cd-267"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="491cd-268">在舊版中，<xref:System.Threading.WaitHandle.WaitAll%2A>方法會傳回`true`放棄 mutex 時。</span><span class="sxs-lookup"><span data-stu-id="491cd-268">In previous versions, the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="491cd-269">已放棄的 mutex 通常表示發生嚴重的編碼錯誤。</span><span class="sxs-lookup"><span data-stu-id="491cd-269">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="491cd-270">如果是全系統 mutex，則可能表示應用程式已被突然終止 （例如，透過使用 Windows 工作管理員 」）。</span><span class="sxs-lookup"><span data-stu-id="491cd-270">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="491cd-271">包含適用於偵錯資訊的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="491cd-271">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="491cd-272"><xref:System.Threading.WaitHandle.WaitAll%2A>方法會傳回所有控制代碼會收到信號。</span><span class="sxs-lookup"><span data-stu-id="491cd-272">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when all the handles are signaled.</span></span> <span data-ttu-id="491cd-273">在某些實作中，若傳遞了 64 個以上的控制代碼，<xref:System.NotSupportedException>就會擲回。</span><span class="sxs-lookup"><span data-stu-id="491cd-273">On some implementations, if more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="491cd-274">如果陣列包含重複的項目，呼叫會失敗並<xref:System.DuplicateWaitObjectException>。</span><span class="sxs-lookup"><span data-stu-id="491cd-274">If the array contains duplicates, the call fails with a <xref:System.DuplicateWaitObjectException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="491cd-275"><xref:System.Threading.WaitHandle.WaitAll%2A>必須執行緒上不支援方法<xref:System.STAThreadAttribute>。</span><span class="sxs-lookup"><span data-stu-id="491cd-275">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads that have <xref:System.STAThreadAttribute>.</span></span>  
  
 <span data-ttu-id="491cd-276">呼叫這個方法多載就相當於呼叫<xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29>方法多載，並指定-1 (或<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>) 的`millisecondsTimeout`和`true`如`exitContext`。</span><span class="sxs-lookup"><span data-stu-id="491cd-276">Calling this method overload is equivalent to calling the <xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> method overload and specifying -1 (or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>) for `millisecondsTimeout` and `true` for `exitContext`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="491cd-277">下列程式碼範例示範如何使用執行緒集區，以非同步方式建立和寫入檔案群組。</span><span class="sxs-lookup"><span data-stu-id="491cd-277">The following code example shows how to use the thread pool to asynchronously create and write to a group of files.</span></span> <span data-ttu-id="491cd-278">在完成時，做為工作項目和信號每一個寫入作業會排入佇列。</span><span class="sxs-lookup"><span data-stu-id="491cd-278">Each write operation is queued as a work item and signals when it is finished.</span></span> <span data-ttu-id="491cd-279">主執行緒等候發出信號的所有項目，然後結束。</span><span class="sxs-lookup"><span data-stu-id="491cd-279">The main thread waits for all the items to signal and then exits.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAll1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll1/CPP/source1.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAll1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll1/CS/source1.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAll1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll1/VB/source1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="491cd-280">
            <paramref name="waitHandles" /> 參數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-280">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="491cd-281">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-281">-or-</span>
          </span>
          <span data-ttu-id="491cd-282">
            <paramref name="waitHandles" /> 陣列中的一或多個物件為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-282">One or more of the objects in the <paramref name="waitHandles" /> array are <see langword="null" />.</span>
          </span>
          <span data-ttu-id="491cd-283">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-283">-or-</span>
          </span>
          <span data-ttu-id="491cd-284">
            <paramref name="waitHandles" /> 是沒有任何項目的陣列，且 .NET Framework 版本為 2.0 或更新版本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-284">
              <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 2.0 or later.</span>
          </span>
        </exception>
        <exception cref="T:System.DuplicateWaitObjectException">
          <block subset="none" type="note">
            <para>
              <span data-ttu-id="491cd-285">在[適用於 Windows 市集應用程式的 .NET](http://go.microsoft.com/fwlink/?LinkID=247912) 或是[可攜式類別庫](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)中，改為攔截基底類別例外狀況 <see cref="T:System.ArgumentException" />。</span>
              <span class="sxs-lookup">
                <span data-stu-id="491cd-285">In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.ArgumentException" />, instead.</span>
              </span>
            </para>
          </block>
          <span data-ttu-id="491cd-286">
            <paramref name="waitHandles" /> 陣列包含重複的項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-286">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="491cd-287">
            <paramref name="waitHandles" /> 中的物件數目超過系統允許的數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-287">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
          <span data-ttu-id="491cd-288">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-288">-or-</span>
          </span>
          <span data-ttu-id="491cd-289">
            <see cref="T:System.STAThreadAttribute" /> 屬性會套用至目前執行緒的執行緒程序，且 <paramref name="waitHandles" /> 包含多個項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-289">The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span>
          </span>
        </exception>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="491cd-290">
            <paramref name="waitHandles" /> 是沒有任何項目的陣列，且 .NET Framework 版本為 1.0 或 1.1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-290">
              <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 1.0 or 1.1.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="491cd-291">由於執行緒結束時未釋放 Mutex，已結束等候。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-291">The wait terminated because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="491cd-292">在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-292">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="491cd-293">
            <paramref name="waitHandles" /> 陣列在另一個應用程式定義域中包含 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-293">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle(), millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="491cd-294">
            <see langword="WaitHandle" /> 陣列，包含目前執行個體將等候的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-294">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
          <span data-ttu-id="491cd-295">這個陣列無法包含相同物件 (複本) 的多個參考。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-295">This array cannot contain multiple references to the same object (duplicates).</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="491cd-296">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-296">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="491cd-297">等候指定陣列中的所有項目都收到信號，使用 <see cref="T:System.Int32" /> 值來指定時間間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-297">Waits for all the elements in the specified array to receive a signal, using an <see cref="T:System.Int32" /> value to specify the time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="491cd-298">當 <paramref name="waitHandles" /> 中的所有項目都收到信號時，則為 <see langword="true" />；否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-298">
              <see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="491cd-299">如果`millisecondsTimeout`為零，此方法不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="491cd-299">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="491cd-300">它會測試等候控制代碼的狀態，並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="491cd-300">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="491cd-301"><xref:System.Threading.WaitHandle.WaitAll%2A>方法傳回時則等候會終止，這表示所有控制代碼會收到信號或逾時發生時。</span><span class="sxs-lookup"><span data-stu-id="491cd-301">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when the wait terminates, which means either when all the handles are signaled or when time-out occurs.</span></span> <span data-ttu-id="491cd-302">在某些實作中，若傳遞了 64 個以上的控制代碼，<xref:System.NotSupportedException>就會擲回。</span><span class="sxs-lookup"><span data-stu-id="491cd-302">On some implementations, if more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="491cd-303">如果陣列中有重複的項目，呼叫會失敗並<xref:System.DuplicateWaitObjectException>。</span><span class="sxs-lookup"><span data-stu-id="491cd-303">If there are duplicates in the array, the call fails with a <xref:System.DuplicateWaitObjectException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="491cd-304"><xref:System.Threading.WaitHandle.WaitAll%2A>必須執行緒上不支援方法<xref:System.STAThreadAttribute>。</span><span class="sxs-lookup"><span data-stu-id="491cd-304">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads that have <xref:System.STAThreadAttribute>.</span></span>  
  
 <span data-ttu-id="491cd-305">呼叫這個方法多載會呼叫相同<xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29>多載，並指定`false`如`exitContext`。</span><span class="sxs-lookup"><span data-stu-id="491cd-305">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="491cd-306">
            <paramref name="waitHandles" /> 參數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-306">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="491cd-307">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-307">-or-</span>
          </span>
          <span data-ttu-id="491cd-308">
            <paramref name="waitHandles" /> 陣列中的一或多個物件為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-308">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="491cd-309">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-309">-or-</span>
          </span>
          <span data-ttu-id="491cd-310">
            <paramref name="waitHandles" /> 是不含任何項目的陣列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-310">
              <paramref name="waitHandles" /> is an array with no elements.</span>
          </span>
        </exception>
        <exception cref="T:System.DuplicateWaitObjectException">
          <block subset="none" type="note">
            <para>
              <span data-ttu-id="491cd-311">在[適用於 Windows 市集應用程式的 .NET](http://go.microsoft.com/fwlink/?LinkID=247912) 或是[可攜式類別庫](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)中，改為攔截基底類別例外狀況 <see cref="T:System.ArgumentException" />。</span>
              <span class="sxs-lookup">
                <span data-stu-id="491cd-311">In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.ArgumentException" />, instead.</span>
              </span>
            </para>
          </block>
          <span data-ttu-id="491cd-312">
            <paramref name="waitHandles" /> 陣列包含重複的項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-312">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="491cd-313">
            <paramref name="waitHandles" /> 中的物件數目超過系統允許的數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-313">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
          <span data-ttu-id="491cd-314">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-314">-or-</span>
          </span>
          <span data-ttu-id="491cd-315">
            <see cref="T:System.STAThreadAttribute" /> 屬性會套用至目前執行緒的執行緒程序，且 <paramref name="waitHandles" /> 包含多個項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-315">The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="491cd-316">
            <paramref name="millisecondsTimeout" /> 為 -1 以外的負數，表示無限逾時。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-316">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="491cd-317">由於執行緒結束時未釋放 Mutex，已完成等候。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-317">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="491cd-318">在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-318">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="491cd-319">
            <paramref name="waitHandles" /> 陣列在另一個應用程式定義域中包含 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-319">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle(), timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="491cd-320">
            <see langword="WaitHandle" /> 陣列，包含目前執行個體將等候的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-320">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
          <span data-ttu-id="491cd-321">這個陣列不能包含相同物件的多個參考。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-321">This array cannot contain multiple references to the same object.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="491cd-322">
            <see cref="T:System.TimeSpan" />，代表要等候的毫秒數；或是 <see cref="T:System.TimeSpan" />，代表永遠等候的 -1 毫秒。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-322">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds, to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="491cd-323">等候指定陣列中的所有項目都收到信號，使用 <see cref="T:System.TimeSpan" /> 值來指定時間間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-323">Waits for all the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> value to specify the time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="491cd-324">當 <paramref name="waitHandles" /> 中的所有項目都收到信號時，則為 <see langword="true" />；否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-324">
              <see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="491cd-325">如果`timeout`為零，此方法不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="491cd-325">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="491cd-326">它會測試等候控制代碼的狀態，並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="491cd-326">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="491cd-327"><xref:System.Threading.WaitHandle.WaitAll%2A>方法傳回時則等候會終止，這表示可能是所有控制代碼會收到信號，或發生逾時。</span><span class="sxs-lookup"><span data-stu-id="491cd-327">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when the wait terminates, which means either all the handles are signaled or a time-out occurs.</span></span> <span data-ttu-id="491cd-328">在某些實作中，若傳遞了 64 個以上的控制代碼，<xref:System.NotSupportedException>就會擲回。</span><span class="sxs-lookup"><span data-stu-id="491cd-328">On some implementations, if more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="491cd-329">如果陣列包含重複的項目，則呼叫會失敗。</span><span class="sxs-lookup"><span data-stu-id="491cd-329">If the array contains duplicates, the call will fail.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="491cd-330"><xref:System.Threading.WaitHandle.WaitAll%2A>必須執行緒上不支援方法<xref:System.STAThreadAttribute>。</span><span class="sxs-lookup"><span data-stu-id="491cd-330">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads that have <xref:System.STAThreadAttribute>.</span></span>  
  
 <span data-ttu-id="491cd-331">最大值`timeout`是<xref:System.Int32.MaxValue?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="491cd-331">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="491cd-332">呼叫這個方法多載會呼叫相同<xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.TimeSpan%2CSystem.Boolean%29>多載，並指定`false`如`exitContext`。</span><span class="sxs-lookup"><span data-stu-id="491cd-332">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.TimeSpan%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="491cd-333">
            <paramref name="waitHandles" /> 參數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-333">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="491cd-334">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-334">-or-</span>
          </span>
          <span data-ttu-id="491cd-335">
            <paramref name="waitHandles" /> 陣列中的一或多個物件為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-335">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="491cd-336">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-336">-or-</span>
          </span>
          <span data-ttu-id="491cd-337">
            <paramref name="waitHandles" /> 是不含任何項目的陣列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-337">
              <paramref name="waitHandles" /> is an array with no elements.</span>
          </span>
        </exception>
        <exception cref="T:System.DuplicateWaitObjectException">
          <block subset="none" type="note">
            <para>
              <span data-ttu-id="491cd-338">在[適用於 Windows 市集應用程式的 .NET](http://go.microsoft.com/fwlink/?LinkID=247912) 或是[可攜式類別庫](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)中，改為攔截基底類別例外狀況 <see cref="T:System.ArgumentException" />。</span>
              <span class="sxs-lookup">
                <span data-stu-id="491cd-338">In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.ArgumentException" />, instead.</span>
              </span>
            </para>
          </block>
          <span data-ttu-id="491cd-339">
            <paramref name="waitHandles" /> 陣列包含重複的項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-339">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="491cd-340">
            <paramref name="waitHandles" /> 中的物件數目超過系統允許的數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-340">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
          <span data-ttu-id="491cd-341">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-341">-or-</span>
          </span>
          <span data-ttu-id="491cd-342">
            <see cref="T:System.STAThreadAttribute" /> 屬性會套用至目前執行緒的執行緒程序，且 <paramref name="waitHandles" /> 包含多個項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-342">The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="491cd-343">
            <paramref name="timeout" /> 為 -1 毫秒以外的負數，表示無限逾時。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-343">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span>
          </span>
          <span data-ttu-id="491cd-344">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-344">-or-</span>
          </span>
          <span data-ttu-id="491cd-345">
            <paramref name="timeout" /> 大於 <see cref="F:System.Int32.MaxValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-345">
              <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="491cd-346">由於執行緒結束時未釋放 Mutex，已結束等候。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-346">The wait terminated because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="491cd-347">在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-347">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="491cd-348">
            <paramref name="waitHandles" /> 陣列在另一個應用程式定義域中包含 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-348">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle(), millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, int millisecondsTimeout, bool exitContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="491cd-349">
            <see langword="WaitHandle" /> 陣列，包含目前執行個體將等候的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-349">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
          <span data-ttu-id="491cd-350">這個陣列無法包含相同物件 (複本) 的多個參考。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-350">This array cannot contain multiple references to the same object (duplicates).</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="491cd-351">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-351">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="491cd-352">
            <see langword="true" /> 表示在等候 (如果在同步內容中) 前結束內容的同步處理網域，並於之後重新取得，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-352">
              <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="491cd-353">等候指定陣列中的所有項目都收到信號，使用 <see cref="T:System.Int32" /> 值來指定時間間隔，並指定是否要先離開同步處理網域，再開始等候。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-353">Waits for all the elements in the specified array to receive a signal, using an <see cref="T:System.Int32" /> value to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="491cd-354">當 <paramref name="waitHandles" /> 中的所有項目都收到信號時，則為 <see langword="true" />；否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-354">
              <see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="491cd-355">如果`millisecondsTimeout`為零，此方法不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="491cd-355">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="491cd-356">它會測試等候控制代碼的狀態，並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="491cd-356">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="491cd-357"><xref:System.Threading.AbandonedMutexException> 是.NET Framework 2.0 版的新功能。</span><span class="sxs-lookup"><span data-stu-id="491cd-357"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="491cd-358">在舊版中，<xref:System.Threading.WaitHandle.WaitAll%2A>方法會傳回`true`放棄 mutex 時。</span><span class="sxs-lookup"><span data-stu-id="491cd-358">In previous versions, the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="491cd-359">已放棄的 mutex 通常表示發生嚴重的編碼錯誤。</span><span class="sxs-lookup"><span data-stu-id="491cd-359">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="491cd-360">如果是全系統 mutex，則可能表示應用程式已被突然終止 （例如，透過使用 Windows 工作管理員 」）。</span><span class="sxs-lookup"><span data-stu-id="491cd-360">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="491cd-361">包含適用於偵錯資訊的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="491cd-361">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="491cd-362"><xref:System.Threading.WaitHandle.WaitAll%2A>方法傳回時則等候會終止，這表示所有控制代碼會收到信號或逾時發生時。</span><span class="sxs-lookup"><span data-stu-id="491cd-362">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when the wait terminates, which means either when all the handles are signaled or when time-out occurs.</span></span> <span data-ttu-id="491cd-363">在某些實作中，若傳遞了 64 個以上的控制代碼，<xref:System.NotSupportedException>就會擲回。</span><span class="sxs-lookup"><span data-stu-id="491cd-363">On some implementations, if more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="491cd-364">如果陣列中有重複的項目，呼叫會失敗並<xref:System.DuplicateWaitObjectException>。</span><span class="sxs-lookup"><span data-stu-id="491cd-364">If there are duplicates in the array, the call fails with a <xref:System.DuplicateWaitObjectException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="491cd-365"><xref:System.Threading.WaitHandle.WaitAll%2A>必須執行緒上不支援方法<xref:System.STAThreadAttribute>。</span><span class="sxs-lookup"><span data-stu-id="491cd-365">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads that have <xref:System.STAThreadAttribute>.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="491cd-366">結束內容的資訊</span><span class="sxs-lookup"><span data-stu-id="491cd-366">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="491cd-367">`exitContext`參數沒有任何作用，除非<xref:System.Threading.WaitHandle.WaitAll%2A>方法從非預設的 managed 內容內呼叫。</span><span class="sxs-lookup"><span data-stu-id="491cd-367">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitAll%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="491cd-368">如果執行緒位呼叫內部的衍生自類別的執行個體此情形<xref:System.ContextBoundObject>。</span><span class="sxs-lookup"><span data-stu-id="491cd-368">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="491cd-369">即使您目前正在執行的方法不衍生自的類別上<xref:System.ContextBoundObject>、 like <xref:System.String>，您可以在非預設的內容中如果<xref:System.ContextBoundObject>您目前的應用程式定義域中的堆疊上。</span><span class="sxs-lookup"><span data-stu-id="491cd-369">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="491cd-370">當您的程式碼在非預設的內容中執行時，指定`true`如`exitContext`造成執行緒結束的非預設的 managed 的內容 (也就是轉換至預設內容) 執行之前<xref:System.Threading.WaitHandle.WaitAll%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="491cd-370">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitAll%2A> method.</span></span> <span data-ttu-id="491cd-371">執行緒的呼叫之後傳回原始的非預設內容<xref:System.Threading.WaitHandle.WaitAll%2A>方法完成。</span><span class="sxs-lookup"><span data-stu-id="491cd-371">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitAll%2A> method completes.</span></span>  
  
 <span data-ttu-id="491cd-372">這有助於進行此內容繫結類別具有<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>屬性。</span><span class="sxs-lookup"><span data-stu-id="491cd-372">This can be useful when the context-bound class has the <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> attribute.</span></span> <span data-ttu-id="491cd-373">在此情況下，類別的成員的所有呼叫都會自動同步都處理，且同步處理網域為類別的程式碼的整個本文。</span><span class="sxs-lookup"><span data-stu-id="491cd-373">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="491cd-374">如果成員的呼叫堆疊中的程式碼會呼叫<xref:System.Threading.WaitHandle.WaitAll%2A>方法，並指定`true`如`exitContext`，執行緒結束的同步處理網域，讓呼叫物件的任何成員，以繼續進行遭到封鎖的執行緒。</span><span class="sxs-lookup"><span data-stu-id="491cd-374">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitAll%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="491cd-375">當<xref:System.Threading.WaitHandle.WaitAll%2A>方法傳回時，進行呼叫的執行緒必須等待重新輸入同步處理網域。</span><span class="sxs-lookup"><span data-stu-id="491cd-375">When the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="491cd-376">下列程式碼範例示範如何使用執行緒集區，以非同步方式建立和寫入檔案群組。</span><span class="sxs-lookup"><span data-stu-id="491cd-376">The following code example shows how to use the thread pool to asynchronously create and write to a group of files.</span></span> <span data-ttu-id="491cd-377">在完成時，做為工作項目和信號每一個寫入作業會排入佇列。</span><span class="sxs-lookup"><span data-stu-id="491cd-377">Each write operation is queued as a work item and signals when it is finished.</span></span> <span data-ttu-id="491cd-378">主執行緒等候發出信號的所有項目，然後結束。</span><span class="sxs-lookup"><span data-stu-id="491cd-378">The main thread waits for all the items to signal and then exits.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAll2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAll2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll2/CS/source2.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAll2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="491cd-379">
            <paramref name="waitHandles" /> 參數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-379">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="491cd-380">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-380">-or-</span>
          </span>
          <span data-ttu-id="491cd-381">
            <paramref name="waitHandles" /> 陣列中的一或多個物件為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-381">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="491cd-382">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-382">-or-</span>
          </span>
          <span data-ttu-id="491cd-383">
            <paramref name="waitHandles" /> 是沒有任何項目的陣列，且 .NET Framework 版本為 2.0 或更新版本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-383">
              <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 2.0 or later.</span>
          </span>
        </exception>
        <exception cref="T:System.DuplicateWaitObjectException">
          <span data-ttu-id="491cd-384">
            <paramref name="waitHandles" /> 陣列包含重複的項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-384">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="491cd-385">
            <paramref name="waitHandles" /> 中的物件數目超過系統允許的數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-385">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
          <span data-ttu-id="491cd-386">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-386">-or-</span>
          </span>
          <span data-ttu-id="491cd-387">
            <see cref="T:System.STAThreadAttribute" /> 屬性會套用至目前執行緒的執行緒程序，且 <paramref name="waitHandles" /> 包含多個項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-387">The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span>
          </span>
        </exception>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="491cd-388">
            <paramref name="waitHandles" /> 是沒有任何項目的陣列，且 .NET Framework 版本為 1.0 或 1.1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-388">
              <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 1.0 or 1.1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="491cd-389">
            <paramref name="millisecondsTimeout" /> 為 -1 以外的負數，表示無限逾時。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-389">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="491cd-390">由於執行緒結束時未釋放 Mutex，已完成等候。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-390">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="491cd-391">在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-391">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="491cd-392">
            <paramref name="waitHandles" /> 陣列在另一個應用程式定義域中包含 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-392">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle(), timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, TimeSpan timeout, bool exitContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="491cd-393">
            <see langword="WaitHandle" /> 陣列，包含目前執行個體將等候的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-393">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
          <span data-ttu-id="491cd-394">這個陣列不能包含相同物件的多個參考。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-394">This array cannot contain multiple references to the same object.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="491cd-395">
            <see cref="T:System.TimeSpan" />，代表要等候的毫秒數；或是 <see cref="T:System.TimeSpan" />，代表永遠等候的 -1 毫秒。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-395">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds, to wait indefinitely.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="491cd-396">
            <see langword="true" /> 表示在等候 (如果在同步內容中) 前結束內容的同步處理網域，並於之後重新取得，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-396">
              <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="491cd-397">等候指定陣列中的所有項目都收到信號，使用 <see cref="T:System.TimeSpan" /> 值來指定時間間隔，並指定是否要先離開同步處理網域，再開始等候。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-397">Waits for all the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> value to specify the time interval, and specifying whether to exit the synchronization domain before the wait.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="491cd-398">當 <paramref name="waitHandles" /> 中的所有元素都收到訊號時，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-398">
              <see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="491cd-399">如果`timeout`為零，此方法不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="491cd-399">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="491cd-400">它會測試等候控制代碼的狀態，並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="491cd-400">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="491cd-401"><xref:System.Threading.AbandonedMutexException> 是.NET Framework 2.0 版的新功能。</span><span class="sxs-lookup"><span data-stu-id="491cd-401"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="491cd-402">在舊版中，<xref:System.Threading.WaitHandle.WaitAll%2A>方法會傳回`true`放棄 mutex 時。</span><span class="sxs-lookup"><span data-stu-id="491cd-402">In previous versions, the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="491cd-403">已放棄的 mutex 通常表示發生嚴重的編碼錯誤。</span><span class="sxs-lookup"><span data-stu-id="491cd-403">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="491cd-404">如果是全系統 mutex，則可能表示應用程式已被突然終止 （例如，透過使用 Windows 工作管理員 」）。</span><span class="sxs-lookup"><span data-stu-id="491cd-404">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="491cd-405">包含適用於偵錯資訊的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="491cd-405">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="491cd-406"><xref:System.Threading.WaitHandle.WaitAll%2A>方法傳回時則等候會終止，這表示可能是所有控制代碼會收到信號，或發生逾時。</span><span class="sxs-lookup"><span data-stu-id="491cd-406">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when the wait terminates, which means either all the handles are signaled or a time-out occurs.</span></span> <span data-ttu-id="491cd-407">在某些實作中，若傳遞了 64 個以上的控制代碼，<xref:System.NotSupportedException>就會擲回。</span><span class="sxs-lookup"><span data-stu-id="491cd-407">On some implementations, if more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="491cd-408">如果陣列包含重複的項目，則呼叫會失敗。</span><span class="sxs-lookup"><span data-stu-id="491cd-408">If the array contains duplicates, the call will fail.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="491cd-409"><xref:System.Threading.WaitHandle.WaitAll%2A>必須執行緒上不支援方法<xref:System.STAThreadAttribute>。</span><span class="sxs-lookup"><span data-stu-id="491cd-409">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads that have <xref:System.STAThreadAttribute>.</span></span>  
  
 <span data-ttu-id="491cd-410">最大值`timeout`是<xref:System.Int32.MaxValue?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="491cd-410">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="491cd-411">結束內容的資訊</span><span class="sxs-lookup"><span data-stu-id="491cd-411">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="491cd-412">`exitContext`參數沒有任何作用，除非<xref:System.Threading.WaitHandle.WaitAll%2A>方法從非預設的 managed 內容內呼叫。</span><span class="sxs-lookup"><span data-stu-id="491cd-412">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitAll%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="491cd-413">如果執行緒位呼叫內部的衍生自類別的執行個體此情形<xref:System.ContextBoundObject>。</span><span class="sxs-lookup"><span data-stu-id="491cd-413">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="491cd-414">即使您目前正在執行的方法不衍生自的類別上<xref:System.ContextBoundObject>、 like <xref:System.String>，您可以在非預設的內容中如果<xref:System.ContextBoundObject>您目前的應用程式定義域中的堆疊上。</span><span class="sxs-lookup"><span data-stu-id="491cd-414">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="491cd-415">當您的程式碼在非預設的內容中執行時，指定`true`如`exitContext`造成執行緒結束的非預設的 managed 的內容 (也就是轉換至預設內容) 執行之前<xref:System.Threading.WaitHandle.WaitAll%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="491cd-415">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitAll%2A> method.</span></span> <span data-ttu-id="491cd-416">它會傳回原始的非預設內容呼叫之後<xref:System.Threading.WaitHandle.WaitAll%2A>方法完成。</span><span class="sxs-lookup"><span data-stu-id="491cd-416">It returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitAll%2A> method completes.</span></span>  
  
 <span data-ttu-id="491cd-417">這有助於進行此內容繫結類別具有<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>。</span><span class="sxs-lookup"><span data-stu-id="491cd-417">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="491cd-418">在此情況下，類別的成員的所有呼叫都會自動同步都處理，且同步處理網域為類別的程式碼的整個本文。</span><span class="sxs-lookup"><span data-stu-id="491cd-418">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="491cd-419">如果成員的呼叫堆疊中的程式碼會呼叫<xref:System.Threading.WaitHandle.WaitAll%2A>方法，並指定`true`如`exitContext`，執行緒結束的同步處理網域，讓呼叫物件的任何成員，以繼續進行遭到封鎖的執行緒。</span><span class="sxs-lookup"><span data-stu-id="491cd-419">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitAll%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="491cd-420">當<xref:System.Threading.WaitHandle.WaitAll%2A>方法傳回時，進行呼叫的執行緒必須等待重新輸入同步處理網域。</span><span class="sxs-lookup"><span data-stu-id="491cd-420">When the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="491cd-421">下列程式碼範例示範如何使用執行緒集區，以非同步方式建立和寫入檔案群組。</span><span class="sxs-lookup"><span data-stu-id="491cd-421">The following code example shows how to use the thread pool to asynchronously create and write to a group of files.</span></span> <span data-ttu-id="491cd-422">在完成時，做為工作項目和信號每一個寫入作業會排入佇列。</span><span class="sxs-lookup"><span data-stu-id="491cd-422">Each write operation is queued as a work item and signals when it is finished.</span></span> <span data-ttu-id="491cd-423">主執行緒等候發出信號的所有項目，然後結束。</span><span class="sxs-lookup"><span data-stu-id="491cd-423">The main thread waits for all the items to signal and then exits.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAll3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll3/CPP/source3.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAll3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll3/CS/source3.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAll3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll3/VB/source3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="491cd-424">
            <paramref name="waitHandles" /> 參數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-424">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="491cd-425">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-425">-or-</span>
          </span>
          <span data-ttu-id="491cd-426">
            <paramref name="waitHandles" /> 陣列中的一或多個物件為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-426">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="491cd-427">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-427">-or-</span>
          </span>
          <span data-ttu-id="491cd-428">
            <paramref name="waitHandles" /> 是沒有任何項目的陣列，且 .NET Framework 版本為 2.0 或更新版本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-428">
              <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 2.0 or later.</span>
          </span>
        </exception>
        <exception cref="T:System.DuplicateWaitObjectException">
          <span data-ttu-id="491cd-429">
            <paramref name="waitHandles" /> 陣列包含重複的項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-429">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="491cd-430">
            <paramref name="waitHandles" /> 中的物件數目超過系統允許的數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-430">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
          <span data-ttu-id="491cd-431">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-431">-or-</span>
          </span>
          <span data-ttu-id="491cd-432">
            <see cref="T:System.STAThreadAttribute" /> 屬性會套用至目前執行緒的執行緒程序，且 <paramref name="waitHandles" /> 包含多個項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-432">The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span>
          </span>
        </exception>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="491cd-433">
            <paramref name="waitHandles" /> 是沒有任何項目的陣列，且 .NET Framework 版本為 1.0 或 1.1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-433">
              <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 1.0 or 1.1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="491cd-434">
            <paramref name="timeout" /> 為 -1 毫秒以外的負數，表示無限逾時。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-434">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span>
          </span>
          <span data-ttu-id="491cd-435">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-435">-or-</span>
          </span>
          <span data-ttu-id="491cd-436">
            <paramref name="timeout" /> 大於 <see cref="F:System.Int32.MaxValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-436">
              <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="491cd-437">由於執行緒結束時未釋放 Mutex，已結束等候。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-437">The wait terminated because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="491cd-438">在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-438">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="491cd-439">
            <paramref name="waitHandles" /> 陣列在另一個應用程式定義域中包含 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-439">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitAny">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="491cd-440">等候指定陣列中有任何項目收到信號。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-440">Waits for any of the elements in the specified array to receive a signal.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="491cd-441">
            <see langword="WaitHandle" /> 陣列，包含目前執行個體將等候的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-441">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="491cd-442">等候指定陣列中有任何項目收到信號。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-442">Waits for any of the elements in the specified array to receive a signal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="491cd-443">滿足等候條件之物件的陣列索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-443">The array index of the object that satisfied the wait.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="491cd-444"><xref:System.Threading.AbandonedMutexException> 是.NET Framework 2.0 版的新功能。</span><span class="sxs-lookup"><span data-stu-id="491cd-444"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="491cd-445">在舊版中，<xref:System.Threading.WaitHandle.WaitAny%2A>方法會傳回`true`如果因為放棄 mutex，等候完成。</span><span class="sxs-lookup"><span data-stu-id="491cd-445">In previous versions, the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns `true` if the wait completes because a mutex is abandoned.</span></span> <span data-ttu-id="491cd-446">已放棄的 mutex 通常表示發生嚴重的編碼錯誤。</span><span class="sxs-lookup"><span data-stu-id="491cd-446">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="491cd-447">如果是全系統 mutex，則可能表示應用程式已被突然終止 （例如，透過使用 Windows 工作管理員 」）。</span><span class="sxs-lookup"><span data-stu-id="491cd-447">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="491cd-448">包含適用於偵錯資訊的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="491cd-448">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="491cd-449"><xref:System.Threading.WaitHandle.WaitAny%2A>方法會擲回<xref:System.Threading.AbandonedMutexException>只等候完成的時間因為已放棄的 mutex。</span><span class="sxs-lookup"><span data-stu-id="491cd-449">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="491cd-450">如果`waitHandles`包含已發行的 mutex，較低的索引數目，已放棄的 mutex，比<xref:System.Threading.WaitHandle.WaitAny%2A>方法正常完成，並不會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="491cd-450">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="491cd-451">在.NET Framework 2.0 版中，如果在執行緒結束或中止但未明確地釋放之前的版本中<xref:System.Threading.Mutex>，而且`Mutex`中位於索引 0 （零）`WaitAny`上另一個執行緒，所傳回的索引陣列`WaitAny`是128 而不是 0。</span><span class="sxs-lookup"><span data-stu-id="491cd-451">In versions of the .NET Framework earlier than version 2.0, if a thread exits or aborts without explicitly releasing a <xref:System.Threading.Mutex>, and that `Mutex` is at index 0 (zero) in a `WaitAny` array on another thread, the index returned by `WaitAny` is 128 instead of 0.</span></span>  
  
 <span data-ttu-id="491cd-452">這個方法會傳回任何控制代碼會收到信號時。</span><span class="sxs-lookup"><span data-stu-id="491cd-452">This method returns when any handle is signaled.</span></span> <span data-ttu-id="491cd-453">如果多個物件會變成通話期間發出訊號，則傳回的值會是具有最小的信號的所有物件的索引值的信號物件的陣列索引。</span><span class="sxs-lookup"><span data-stu-id="491cd-453">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span> <span data-ttu-id="491cd-454">在某些實作中，如果多個傳遞 64 的控制代碼，<xref:System.NotSupportedException>就會擲回。</span><span class="sxs-lookup"><span data-stu-id="491cd-454">On some implementations, if more that 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span>  
  
 <span data-ttu-id="491cd-455">呼叫這個方法多載就相當於呼叫<xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29>方法多載，並指定-1 (或<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>) 的`millisecondsTimeout`和`true`如`exitContext`。</span><span class="sxs-lookup"><span data-stu-id="491cd-455">Calling this method overload is equivalent to calling the <xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> method overload and specifying -1 (or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>) for `millisecondsTimeout` and `true` for `exitContext`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="491cd-456">下列程式碼範例示範呼叫<xref:System.Threading.WaitHandle.WaitAny%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="491cd-456">The following code example demonstrates calling the <xref:System.Threading.WaitHandle.WaitAny%2A> method.</span></span>  
  
 [!code-cpp[WaitHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/WaitHandle/cpp/WaitHandle.cpp#1)]
 [!code-csharp[WaitHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/WaitHandle/CS/WaitHandle.cs#1)]
 [!code-vb[WaitHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/WaitHandle/VB/WaitHandle.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="491cd-457">
            <paramref name="waitHandles" /> 參數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-457">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="491cd-458">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-458">-or-</span>
          </span>
          <span data-ttu-id="491cd-459">
            <paramref name="waitHandles" /> 陣列中的一或多個物件為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-459">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="491cd-460">
            <paramref name="waitHandles" /> 中的物件數目超過系統允許的數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-460">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
        </exception>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="491cd-461">
            <paramref name="waitHandles" /> 是不具有項目的陣列，且 .NET Framework 版本為 1.0 或 1.1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-461">
              <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 1.0 or 1.1.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="491cd-462">由於執行緒結束時未釋放 Mutex，已完成等候。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-462">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="491cd-463">在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-463">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="491cd-464">
            <paramref name="waitHandles" /> 是不具有元素的陣列，且 .NET Framework 版本為 2.0 (含) 以後版本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-464">
              <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 2.0 or later.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="491cd-465">
            <paramref name="waitHandles" /> 陣列在另一個應用程式定義域中包含 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-465">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle(), millisecondsTimeout As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="491cd-466">
            <see langword="WaitHandle" /> 陣列，包含目前執行個體將等候的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-466">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="491cd-467">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-467">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="491cd-468">等候指定之陣列中有任何項目收到信號，使用 32 位元帶正負號的整數以指定時間間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-468">Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed integer to specify the time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="491cd-469">滿足等候條件之物件的陣列索引；如果沒有物件滿足等候條件，而且已經過相當於 <paramref name="millisecondsTimeout" /> 的時間間隔，則為 <see cref="F:System.Threading.WaitHandle.WaitTimeout" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-469">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="millisecondsTimeout" /> has passed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="491cd-470">如果`millisecondsTimeout`為零，此方法不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="491cd-470">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="491cd-471">它會測試等候控制代碼的狀態，並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="491cd-471">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="491cd-472"><xref:System.Threading.WaitHandle.WaitAny%2A>方法會擲回<xref:System.Threading.AbandonedMutexException>只等候完成的時間因為已放棄的 mutex。</span><span class="sxs-lookup"><span data-stu-id="491cd-472">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="491cd-473">如果`waitHandles`包含已發行的 mutex，較低的索引數目，已放棄的 mutex，比<xref:System.Threading.WaitHandle.WaitAny%2A>方法正常完成，並不會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="491cd-473">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
 <span data-ttu-id="491cd-474">這個方法傳回時則等候會終止，任何控制代碼信號或發生逾時。</span><span class="sxs-lookup"><span data-stu-id="491cd-474">This method returns when the wait terminates, either when any of the handles are signaled or when a timeout occurs.</span></span> <span data-ttu-id="491cd-475">如果多個物件會變成通話期間發出訊號，則傳回的值會是具有最小的信號的所有物件的索引值的信號物件的陣列索引。</span><span class="sxs-lookup"><span data-stu-id="491cd-475">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span> <span data-ttu-id="491cd-476">在某些實作中，如果多個傳遞 64 的控制代碼，<xref:System.NotSupportedException>就會擲回。</span><span class="sxs-lookup"><span data-stu-id="491cd-476">On some implementations, if more that 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span>  
  
 <span data-ttu-id="491cd-477">呼叫這個方法多載會呼叫相同<xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29>多載，並指定`false`如`exitContext`。</span><span class="sxs-lookup"><span data-stu-id="491cd-477">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="491cd-478">
            <paramref name="waitHandles" /> 參數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-478">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="491cd-479">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-479">-or-</span>
          </span>
          <span data-ttu-id="491cd-480">
            <paramref name="waitHandles" /> 陣列中的一或多個物件為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-480">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="491cd-481">
            <paramref name="waitHandles" /> 中的物件數目超過系統允許的數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-481">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="491cd-482">
            <paramref name="millisecondsTimeout" /> 為 -1 以外的負數，表示無限逾時。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-482">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="491cd-483">由於執行緒結束時未釋放 Mutex，已完成等候。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-483">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="491cd-484">在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-484">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="491cd-485">
            <paramref name="waitHandles" /> 是不含任何項目的陣列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-485">
              <paramref name="waitHandles" /> is an array with no elements.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="491cd-486">
            <paramref name="waitHandles" /> 陣列在另一個應用程式定義域中包含 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-486">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle(), timeout As TimeSpan) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="491cd-487">
            <see langword="WaitHandle" /> 陣列，包含目前執行個體將等候的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-487">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="491cd-488">
            <see cref="T:System.TimeSpan" />，代表等候毫秒數；或是 <see cref="T:System.TimeSpan" />，代表無限期等候的 -1 毫秒。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-488">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="491cd-489">等候指定陣列中的所有項目都收到信號，使用 <see cref="T:System.TimeSpan" /> 來指定時間間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-489">Waits for any of the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="491cd-490">滿足等候條件之物件的陣列索引；如果沒有物件滿足等候條件，而且已經過相當於 <paramref name="timeout" /> 的時間間隔，則為 <see cref="F:System.Threading.WaitHandle.WaitTimeout" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-490">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="timeout" /> has passed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="491cd-491">如果`timeout`為零，此方法不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="491cd-491">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="491cd-492">它會測試等候控制代碼的狀態，並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="491cd-492">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="491cd-493"><xref:System.Threading.WaitHandle.WaitAny%2A>方法會擲回<xref:System.Threading.AbandonedMutexException>只等候完成的時間因為已放棄的 mutex。</span><span class="sxs-lookup"><span data-stu-id="491cd-493">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="491cd-494">如果`waitHandles`包含已發行的 mutex，較低的索引數目，已放棄的 mutex，比<xref:System.Threading.WaitHandle.WaitAny%2A>方法正常完成，並不會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="491cd-494">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
 <span data-ttu-id="491cd-495">這個方法傳回時則等候會終止，任何控制代碼信號或逾時的情況。</span><span class="sxs-lookup"><span data-stu-id="491cd-495">This method returns when the wait terminates, either when any of the handles are signaled or when a time-out occurs.</span></span> <span data-ttu-id="491cd-496">如果多個物件會變成通話期間發出訊號，則傳回的值會是具有最小的信號的所有物件的索引值的信號物件的陣列索引。</span><span class="sxs-lookup"><span data-stu-id="491cd-496">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span> <span data-ttu-id="491cd-497">在某些實作中，如果多個傳遞 64 的控制代碼，<xref:System.NotSupportedException>就會擲回。</span><span class="sxs-lookup"><span data-stu-id="491cd-497">On some implementations, if more that 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span>  
  
 <span data-ttu-id="491cd-498">最大值`timeout`是<xref:System.Int32.MaxValue?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="491cd-498">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="491cd-499">呼叫這個方法多載會呼叫相同<xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.TimeSpan%2CSystem.Boolean%29>多載，並指定`false`如`exitContext`。</span><span class="sxs-lookup"><span data-stu-id="491cd-499">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.TimeSpan%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="491cd-500">
            <paramref name="waitHandles" /> 參數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-500">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="491cd-501">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-501">-or-</span>
          </span>
          <span data-ttu-id="491cd-502">
            <paramref name="waitHandles" /> 陣列中的一或多個物件為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-502">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="491cd-503">
            <paramref name="waitHandles" /> 中的物件數目超過系統允許的數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-503">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="491cd-504">
            <paramref name="timeout" /> 為 -1 毫秒以外的負數，表示無限逾時。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-504">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span>
          </span>
          <span data-ttu-id="491cd-505">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-505">-or-</span>
          </span>
          <span data-ttu-id="491cd-506">
            <paramref name="timeout" /> 大於 <see cref="F:System.Int32.MaxValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-506">
              <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="491cd-507">由於執行緒結束時未釋放 Mutex，已完成等候。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-507">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="491cd-508">在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-508">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="491cd-509">
            <paramref name="waitHandles" /> 是不含任何項目的陣列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-509">
              <paramref name="waitHandles" /> is an array with no elements.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="491cd-510">
            <paramref name="waitHandles" /> 陣列在另一個應用程式定義域中包含 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-510">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle(), millisecondsTimeout As Integer, exitContext As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, int millisecondsTimeout, bool exitContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="491cd-511">
            <see langword="WaitHandle" /> 陣列，包含目前執行個體將等候的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-511">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="491cd-512">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-512">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="491cd-513">
            <see langword="true" /> 表示在等候 (如果在同步內容中) 前結束內容的同步處理網域，並於之後重新取得，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-513">
              <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="491cd-514">等候指定陣列中有任何項目收到信號；使用 32 位元帶正負號的整數 (Signed Integer) 來指定時間間隔，並指定是否在等候之前先離開同步處理領域。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-514">Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed integer to specify the time interval, and specifying whether to exit the synchronization domain before the wait.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="491cd-515">滿足等候條件之物件的陣列索引；如果沒有物件滿足等候條件，而且已經過相當於 <paramref name="millisecondsTimeout" /> 的時間間隔，則為 <see cref="F:System.Threading.WaitHandle.WaitTimeout" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-515">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="millisecondsTimeout" /> has passed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="491cd-516">如果`millisecondsTimeout`為零，此方法不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="491cd-516">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="491cd-517">它會測試等候控制代碼的狀態，並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="491cd-517">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="491cd-518"><xref:System.Threading.AbandonedMutexException> 是.NET Framework 2.0 版的新功能。</span><span class="sxs-lookup"><span data-stu-id="491cd-518"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="491cd-519">在舊版中，<xref:System.Threading.WaitHandle.WaitAny%2A>方法會傳回`true`如果因為放棄 mutex，等候完成。</span><span class="sxs-lookup"><span data-stu-id="491cd-519">In previous versions, the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns `true` if the wait completes because a mutex is abandoned.</span></span> <span data-ttu-id="491cd-520">已放棄的 mutex 通常表示發生嚴重的編碼錯誤。</span><span class="sxs-lookup"><span data-stu-id="491cd-520">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="491cd-521">如果是全系統 mutex，則可能表示應用程式已被突然終止 （例如，透過使用 Windows 工作管理員 」）。</span><span class="sxs-lookup"><span data-stu-id="491cd-521">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="491cd-522">包含適用於偵錯資訊的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="491cd-522">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="491cd-523"><xref:System.Threading.WaitHandle.WaitAny%2A>方法會擲回<xref:System.Threading.AbandonedMutexException>只等候完成的時間因為已放棄的 mutex。</span><span class="sxs-lookup"><span data-stu-id="491cd-523">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="491cd-524">如果`waitHandles`包含已發行的 mutex，較低的索引數目，已放棄的 mutex，比<xref:System.Threading.WaitHandle.WaitAny%2A>方法正常完成，並不會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="491cd-524">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="491cd-525">在.NET Framework 2.0 版中，如果在執行緒結束或中止但未明確地釋放之前的版本中<xref:System.Threading.Mutex>，而且`Mutex`中位於索引 0 （零）`WaitAny`上另一個執行緒，所傳回的索引陣列`WaitAny`是128 而不是 0。</span><span class="sxs-lookup"><span data-stu-id="491cd-525">In versions of the .NET Framework earlier than version 2.0, if a thread exits or aborts without explicitly releasing a <xref:System.Threading.Mutex>, and that `Mutex` is at index 0 (zero) in a `WaitAny` array on another thread, the index returned by `WaitAny` is 128 instead of 0.</span></span>  
  
 <span data-ttu-id="491cd-526">這個方法傳回時則等候會終止，任何控制代碼信號或發生逾時。</span><span class="sxs-lookup"><span data-stu-id="491cd-526">This method returns when the wait terminates, either when any of the handles are signaled or when a timeout occurs.</span></span> <span data-ttu-id="491cd-527">如果多個物件會變成通話期間發出訊號，則傳回的值會是具有最小的信號的所有物件的索引值的信號物件的陣列索引。</span><span class="sxs-lookup"><span data-stu-id="491cd-527">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span> <span data-ttu-id="491cd-528">在某些實作中，如果多個傳遞 64 的控制代碼，<xref:System.NotSupportedException>就會擲回。</span><span class="sxs-lookup"><span data-stu-id="491cd-528">On some implementations, if more that 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="491cd-529">結束內容的資訊</span><span class="sxs-lookup"><span data-stu-id="491cd-529">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="491cd-530">`exitContext`參數沒有任何作用，除非<xref:System.Threading.WaitHandle.WaitAny%2A>方法從非預設的 managed 內容內呼叫。</span><span class="sxs-lookup"><span data-stu-id="491cd-530">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitAny%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="491cd-531">如果執行緒位呼叫內部的衍生自類別的執行個體此情形<xref:System.ContextBoundObject>。</span><span class="sxs-lookup"><span data-stu-id="491cd-531">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="491cd-532">即使您目前正在執行的方法不是衍生自的類別上<xref:System.ContextBoundObject>、 like <xref:System.String>，您可以在非預設的內容中如果<xref:System.ContextBoundObject>您目前的應用程式定義域中的堆疊上。</span><span class="sxs-lookup"><span data-stu-id="491cd-532">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="491cd-533">當您的程式碼在非預設的內容中執行時，指定`true`如`exitContext`造成執行緒結束的非預設的 managed 的內容 (也就是轉換至預設內容) 執行之前<xref:System.Threading.WaitHandle.WaitAny%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="491cd-533">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitAny%2A> method.</span></span> <span data-ttu-id="491cd-534">執行緒的呼叫之後傳回原始的非預設內容<xref:System.Threading.WaitHandle.WaitAny%2A>方法完成。</span><span class="sxs-lookup"><span data-stu-id="491cd-534">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes.</span></span>  
  
 <span data-ttu-id="491cd-535">這有助於進行此內容繫結類別具有<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>。</span><span class="sxs-lookup"><span data-stu-id="491cd-535">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="491cd-536">在此情況下，類別的成員的所有呼叫都會自動同步都處理，且同步處理網域為類別的程式碼的整個本文。</span><span class="sxs-lookup"><span data-stu-id="491cd-536">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="491cd-537">如果成員的呼叫堆疊中的程式碼會呼叫<xref:System.Threading.WaitHandle.WaitAny%2A>方法，並指定`true`如`exitContext`，執行緒結束的同步處理網域，讓呼叫物件的任何成員，以繼續進行遭到封鎖的執行緒。</span><span class="sxs-lookup"><span data-stu-id="491cd-537">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitAny%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="491cd-538">當<xref:System.Threading.WaitHandle.WaitAny%2A>方法傳回時，進行呼叫的執行緒必須等待重新輸入同步處理網域。</span><span class="sxs-lookup"><span data-stu-id="491cd-538">When the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="491cd-539">下列程式碼範例示範如何使用執行緒集區同時搜尋多個磁碟上的檔案。</span><span class="sxs-lookup"><span data-stu-id="491cd-539">The following code example demonstrates how to use the thread pool to simultaneously search for a file on multiple disks.</span></span> <span data-ttu-id="491cd-540">空間考量因素，如搜尋才每個磁碟的根目錄。</span><span class="sxs-lookup"><span data-stu-id="491cd-540">For space considerations, only the root directory of each disk is searched.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/CS/source2.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="491cd-541">
            <paramref name="waitHandles" /> 參數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-541">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="491cd-542">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-542">-or-</span>
          </span>
          <span data-ttu-id="491cd-543">
            <paramref name="waitHandles" /> 陣列中的一或多個物件為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-543">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="491cd-544">
            <paramref name="waitHandles" /> 中的物件數目超過系統允許的數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-544">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
        </exception>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="491cd-545">
            <paramref name="waitHandles" /> 是不具有項目的陣列，且 .NET Framework 版本為 1.0 或 1.1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-545">
              <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 1.0 or 1.1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="491cd-546">
            <paramref name="millisecondsTimeout" /> 為 -1 以外的負數，表示無限逾時。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-546">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="491cd-547">由於執行緒結束時未釋放 Mutex，已完成等候。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-547">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="491cd-548">在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-548">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="491cd-549">
            <paramref name="waitHandles" /> 是不具有元素的陣列，且 .NET Framework 版本為 2.0 (含) 以後版本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-549">
              <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 2.0 or later.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="491cd-550">
            <paramref name="waitHandles" /> 陣列在另一個應用程式定義域中包含 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-550">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle(), timeout As TimeSpan, exitContext As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, TimeSpan timeout, bool exitContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="491cd-551">
            <see langword="WaitHandle" /> 陣列，包含目前執行個體將等候的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-551">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="491cd-552">
            <see cref="T:System.TimeSpan" />，代表等候毫秒數；或是 <see cref="T:System.TimeSpan" />，代表無限期等候的 -1 毫秒。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-552">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="491cd-553">
            <see langword="true" /> 表示在等候 (如果在同步內容中) 前結束內容的同步處理網域，並於之後重新取得，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-553">
              <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="491cd-554">等候指定陣列中的所有項目都收到信號，使用 <see cref="T:System.TimeSpan" /> 來指定時間間隔，並指定是否要先離開同步處理網域，再開始等候。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-554">Waits for any of the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="491cd-555">滿足等候條件之物件的陣列索引；如果沒有物件滿足等候條件，而且已經過相當於 <paramref name="timeout" /> 的時間間隔，則為 <see cref="F:System.Threading.WaitHandle.WaitTimeout" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-555">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="timeout" /> has passed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="491cd-556">如果`timeout`為零，此方法不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="491cd-556">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="491cd-557">它會測試等候控制代碼的狀態，並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="491cd-557">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="491cd-558"><xref:System.Threading.AbandonedMutexException> 是.NET Framework 2.0 版的新功能。</span><span class="sxs-lookup"><span data-stu-id="491cd-558"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="491cd-559">在舊版中，<xref:System.Threading.WaitHandle.WaitAny%2A>方法會傳回`true`如果因為放棄 mutex，等候完成。</span><span class="sxs-lookup"><span data-stu-id="491cd-559">In previous versions, the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns `true` if the wait completes because a mutex is abandoned.</span></span> <span data-ttu-id="491cd-560">已放棄的 mutex 通常表示發生嚴重的編碼錯誤。</span><span class="sxs-lookup"><span data-stu-id="491cd-560">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="491cd-561">如果是全系統 mutex，則可能表示應用程式已被突然終止 （例如，透過使用 Windows 工作管理員 」）。</span><span class="sxs-lookup"><span data-stu-id="491cd-561">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="491cd-562">包含適用於偵錯資訊的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="491cd-562">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="491cd-563"><xref:System.Threading.WaitHandle.WaitAny%2A>方法會擲回<xref:System.Threading.AbandonedMutexException>只等候完成的時間因為已放棄的 mutex。</span><span class="sxs-lookup"><span data-stu-id="491cd-563">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="491cd-564">如果`waitHandles`包含已發行的 mutex，較低的索引數目，已放棄的 mutex，比<xref:System.Threading.WaitHandle.WaitAny%2A>方法正常完成，並不會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="491cd-564">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="491cd-565">在.NET Framework 2.0 版中，如果在執行緒結束或中止但未明確地釋放之前的版本中<xref:System.Threading.Mutex>，而且`Mutex`中位於索引 0 （零）`WaitAny`上另一個執行緒，所傳回的索引陣列`WaitAny`是128 而不是 0。</span><span class="sxs-lookup"><span data-stu-id="491cd-565">In versions of the .NET Framework earlier than version 2.0, if a thread exits or aborts without explicitly releasing a <xref:System.Threading.Mutex>, and that `Mutex` is at index 0 (zero) in a `WaitAny` array on another thread, the index returned by `WaitAny` is 128 instead of 0.</span></span>  
  
 <span data-ttu-id="491cd-566">這個方法傳回時則等候會終止，任何控制代碼信號或逾時的情況。</span><span class="sxs-lookup"><span data-stu-id="491cd-566">This method returns when the wait terminates, either when any of the handles are signaled or when a time-out occurs.</span></span> <span data-ttu-id="491cd-567">如果多個物件會變成通話期間發出訊號，則傳回的值會是具有最小的信號的所有物件的索引值的信號物件的陣列索引。</span><span class="sxs-lookup"><span data-stu-id="491cd-567">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span> <span data-ttu-id="491cd-568">在某些實作中，如果多個傳遞 64 的控制代碼，<xref:System.NotSupportedException>就會擲回。</span><span class="sxs-lookup"><span data-stu-id="491cd-568">On some implementations, if more that 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span>  
  
 <span data-ttu-id="491cd-569">最大值`timeout`是<xref:System.Int32.MaxValue?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="491cd-569">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="491cd-570">結束內容的資訊</span><span class="sxs-lookup"><span data-stu-id="491cd-570">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="491cd-571">`exitContext`參數沒有任何作用，除非<xref:System.Threading.WaitHandle.WaitAny%2A>方法從非預設的 managed 內容內呼叫。</span><span class="sxs-lookup"><span data-stu-id="491cd-571">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitAny%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="491cd-572">如果執行緒位呼叫內部的衍生自類別的執行個體此情形<xref:System.ContextBoundObject>。</span><span class="sxs-lookup"><span data-stu-id="491cd-572">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="491cd-573">即使您目前正在執行的方法不是衍生自的類別上<xref:System.ContextBoundObject>、 like <xref:System.String>，您可以在非預設的內容中如果<xref:System.ContextBoundObject>您目前的應用程式定義域中的堆疊上。</span><span class="sxs-lookup"><span data-stu-id="491cd-573">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="491cd-574">當您的程式碼在非預設的內容中執行時，指定`true`如`exitContext`造成執行緒結束的非預設的 managed 的內容 (也就是轉換至預設內容) 執行之前<xref:System.Threading.WaitHandle.WaitAny%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="491cd-574">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitAny%2A> method.</span></span> <span data-ttu-id="491cd-575">執行緒的呼叫之後傳回原始的非預設內容<xref:System.Threading.WaitHandle.WaitAny%2A>方法完成。</span><span class="sxs-lookup"><span data-stu-id="491cd-575">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes.</span></span>  
  
 <span data-ttu-id="491cd-576">這有助於進行此內容繫結類別具有<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>。</span><span class="sxs-lookup"><span data-stu-id="491cd-576">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="491cd-577">在此情況下，類別的成員的所有呼叫都會自動同步都處理，且同步處理網域為類別的程式碼的整個本文。</span><span class="sxs-lookup"><span data-stu-id="491cd-577">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="491cd-578">如果成員的呼叫堆疊中的程式碼會呼叫<xref:System.Threading.WaitHandle.WaitAny%2A>方法，並指定`true`如`exitContext`，執行緒結束的同步處理網域，讓呼叫物件的任何成員，以繼續進行遭到封鎖的執行緒。</span><span class="sxs-lookup"><span data-stu-id="491cd-578">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitAny%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="491cd-579">當<xref:System.Threading.WaitHandle.WaitAny%2A>方法傳回時，進行呼叫的執行緒必須等待重新輸入同步處理網域。</span><span class="sxs-lookup"><span data-stu-id="491cd-579">When the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="491cd-580">下列程式碼範例示範如何使用執行緒集區同時搜尋多個磁碟上的檔案。</span><span class="sxs-lookup"><span data-stu-id="491cd-580">The following code example demonstrates how to use the thread pool to simultaneously search for a file on multiple disks.</span></span> <span data-ttu-id="491cd-581">空間考量因素，如搜尋才每個磁碟的根目錄。</span><span class="sxs-lookup"><span data-stu-id="491cd-581">For space considerations, only the root directory of each disk is searched.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAny3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny3/CPP/source3.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAny3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny3/CS/source3.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAny3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny3/VB/source3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="491cd-582">
            <paramref name="waitHandles" /> 參數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-582">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="491cd-583">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-583">-or-</span>
          </span>
          <span data-ttu-id="491cd-584">
            <paramref name="waitHandles" /> 陣列中的一或多個物件為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-584">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="491cd-585">
            <paramref name="waitHandles" /> 中的物件數目超過系統允許的數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-585">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
        </exception>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="491cd-586">
            <paramref name="waitHandles" /> 是不具有項目的陣列，且 .NET Framework 版本為 1.0 或 1.1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-586">
              <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 1.0 or 1.1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="491cd-587">
            <paramref name="timeout" /> 為 -1 毫秒以外的負數，表示無限逾時。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-587">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span>
          </span>
          <span data-ttu-id="491cd-588">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-588">-or-</span>
          </span>
          <span data-ttu-id="491cd-589">
            <paramref name="timeout" /> 大於 <see cref="F:System.Int32.MaxValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-589">
              <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="491cd-590">由於執行緒結束時未釋放 Mutex，已完成等候。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-590">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="491cd-591">在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-591">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="491cd-592">
            <paramref name="waitHandles" /> 是不具有元素的陣列，且 .NET Framework 版本為 2.0 (含) 以後版本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-592">
              <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 2.0 or later.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="491cd-593">
            <paramref name="waitHandles" /> 陣列在另一個應用程式定義域中包含 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-593">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitOne">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="491cd-594">封鎖目前的執行緒，直到目前的 <see cref="T:System.Threading.WaitHandle" /> 收到訊號為止。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-594">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="491cd-595">封鎖目前的執行緒，直到目前的 <see cref="T:System.Threading.WaitHandle" /> 收到訊號為止。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-595">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="491cd-596">如果目前的執行個體有收到信號，則為 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-596">
              <see langword="true" /> if the current instance receives a signal.</span>
          </span>
          <span data-ttu-id="491cd-597">如果目前的執行個體一直沒有收到訊號，<see cref="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)" /> 就一定不會傳回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-597">If the current instance is never signaled, <see cref="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)" /> never returns.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="491cd-598"><xref:System.Threading.AbandonedMutexException> 是.NET Framework 2.0 版的新功能。</span><span class="sxs-lookup"><span data-stu-id="491cd-598"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="491cd-599">在舊版中，<xref:System.Threading.WaitHandle.WaitOne%2A>方法會傳回`true`放棄 mutex 時。</span><span class="sxs-lookup"><span data-stu-id="491cd-599">In previous versions, the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="491cd-600">已放棄的 mutex 通常表示發生嚴重的編碼錯誤。</span><span class="sxs-lookup"><span data-stu-id="491cd-600">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="491cd-601">如果是全系統 mutex，則可能表示應用程式已被突然終止 （例如，透過使用 Windows 工作管理員 」）。</span><span class="sxs-lookup"><span data-stu-id="491cd-601">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="491cd-602">包含適用於偵錯資訊的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="491cd-602">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="491cd-603">這個方法會封鎖，直到目前的執行個體收到訊號的呼叫端。</span><span class="sxs-lookup"><span data-stu-id="491cd-603">The caller of this method blocks indefinitely until the current instance receives a signal.</span></span> <span data-ttu-id="491cd-604">使用這個方法來封鎖直到<xref:System.Threading.WaitHandle>從另一個執行緒收到訊號，例如便會產生非同步作業完成時。</span><span class="sxs-lookup"><span data-stu-id="491cd-604">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="491cd-605">如需詳細資訊，請參閱<xref:System.IAsyncResult>介面。</span><span class="sxs-lookup"><span data-stu-id="491cd-605">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="491cd-606">呼叫這個方法多載就相當於呼叫<xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29>方法多載，並指定-1 或<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>第一個參數和`false`第二個參數。</span><span class="sxs-lookup"><span data-stu-id="491cd-606">Calling this method overload is equivalent to calling the <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29> method overload and specifying -1 or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> for the first parameter and `false` for the second parameter.</span></span>  
  
 <span data-ttu-id="491cd-607">覆寫這個方法以自訂在衍生類別的行為。</span><span class="sxs-lookup"><span data-stu-id="491cd-607">Override this method to customize the behavior of derived classes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="491cd-608">下列程式碼範例示範如何使用等候控制代碼，以防止處理程序同時等候背景執行緒完成執行。</span><span class="sxs-lookup"><span data-stu-id="491cd-608">The following code example shows how to use a wait handle to keep a process from terminating while it waits for a background thread to finish executing.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitOne1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne1/CPP/source1.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitOne1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne1/CS/source1.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitOne1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne1/VB/source1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="491cd-609">目前的執行個體已經過處置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-609">The current instance has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="491cd-610">由於執行緒結束時未釋放 Mutex，已完成等候。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-610">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="491cd-611">在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-611">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="491cd-612">目前的執行個體是另一個應用程式定義域中 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-612">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne(int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="491cd-613">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-613">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="491cd-614">封鎖目前執行緒，直到目前的 <see cref="T:System.Threading.WaitHandle" /> 收到信號為止，使用 32 位元帶正負號的整數來指定時間間隔 (以毫秒為單位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-614">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal, using a 32-bit signed integer to specify the time interval in milliseconds.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="491cd-615">如果目前的執行個體收到信號，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-615">
              <see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="491cd-616">如果`millisecondsTimeout`為零，此方法不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="491cd-616">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="491cd-617">它會測試的狀態，等候控制代碼，並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="491cd-617">It tests the state of the wait handle and returns immediately.</span></span>  
  
 <span data-ttu-id="491cd-618">這個方法會封鎖，直到目前的執行個體收到信號或逾時的呼叫端就會發生。</span><span class="sxs-lookup"><span data-stu-id="491cd-618">The caller of this method blocks until the current instance receives a signal or a time-out occurs.</span></span> <span data-ttu-id="491cd-619">使用這個方法來封鎖直到<xref:System.Threading.WaitHandle>從另一個執行緒收到訊號，例如便會產生非同步作業完成時。</span><span class="sxs-lookup"><span data-stu-id="491cd-619">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="491cd-620">如需詳細資訊，請參閱<xref:System.IAsyncResult>介面。</span><span class="sxs-lookup"><span data-stu-id="491cd-620">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="491cd-621">覆寫這個方法以自訂在衍生類別的行為。</span><span class="sxs-lookup"><span data-stu-id="491cd-621">Override this method to customize the behavior of derived classes.</span></span>  
  
 <span data-ttu-id="491cd-622">呼叫這個方法多載會呼叫相同<xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29>多載，並指定`false`如`exitContext`。</span><span class="sxs-lookup"><span data-stu-id="491cd-622">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="491cd-623">下列程式碼範例示範如何使用等候控制代碼，以防止處理程序同時等候背景執行緒完成執行。</span><span class="sxs-lookup"><span data-stu-id="491cd-623">The following code example shows how to use a wait handle to keep a process from terminating while it waits for a background thread to finish executing.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitOne2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitOne2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne2/CS/source2.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitOne2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="491cd-624">目前的執行個體已經過處置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-624">The current instance has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="491cd-625">
            <paramref name="millisecondsTimeout" /> 為 -1 以外的負數，表示無限逾時。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-625">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="491cd-626">由於執行緒結束時未釋放 Mutex，已完成等候。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-626">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="491cd-627">在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-627">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="491cd-628">目前的執行個體是另一個應用程式定義域中 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-628">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne(TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="491cd-629">
            <see cref="T:System.TimeSpan" />，代表等候毫秒數；或是 <see cref="T:System.TimeSpan" />，代表無限期等候的 -1 毫秒。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-629">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="491cd-630">封鎖目前執行緒，直到目前執行個體收到信號為止，使用 <see cref="T:System.TimeSpan" /> 來指定時間間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-630">Blocks the current thread until the current instance receives a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="491cd-631">如果目前的執行個體收到信號，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-631">
              <see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="491cd-632">如果`timeout`為零，此方法不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="491cd-632">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="491cd-633">它會測試的狀態，等候控制代碼，並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="491cd-633">It tests the state of the wait handle and returns immediately.</span></span>  
  
 <span data-ttu-id="491cd-634">這個方法會封鎖，直到目前的執行個體收到信號或逾時的呼叫端就會發生。</span><span class="sxs-lookup"><span data-stu-id="491cd-634">The caller of this method blocks until the current instance receives a signal or a time-out occurs.</span></span> <span data-ttu-id="491cd-635">使用這個方法來封鎖直到<xref:System.Threading.WaitHandle>從另一個執行緒收到訊號，例如便會產生非同步作業完成時。</span><span class="sxs-lookup"><span data-stu-id="491cd-635">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="491cd-636">如需詳細資訊，請參閱<xref:System.IAsyncResult>介面。</span><span class="sxs-lookup"><span data-stu-id="491cd-636">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="491cd-637">覆寫這個方法以自訂在衍生類別的行為。</span><span class="sxs-lookup"><span data-stu-id="491cd-637">Override this method to customize the behavior of derived classes.</span></span>  
  
 <span data-ttu-id="491cd-638">最大值`timeout`是<xref:System.Int32.MaxValue?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="491cd-638">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="491cd-639">呼叫這個方法多載會呼叫相同<xref:System.Threading.WaitHandle.WaitOne%28System.TimeSpan%2CSystem.Boolean%29>多載，並指定`false`如`exitContext`。</span><span class="sxs-lookup"><span data-stu-id="491cd-639">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitOne%28System.TimeSpan%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="491cd-640">目前的執行個體已經過處置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-640">The current instance has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="491cd-641">
            <paramref name="timeout" /> 為 -1 毫秒以外的負數，表示無限逾時。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-641">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span>
          </span>
          <span data-ttu-id="491cd-642">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-642">-or-</span>
          </span>
          <span data-ttu-id="491cd-643">
            <paramref name="timeout" /> 大於 <see cref="F:System.Int32.MaxValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-643">
              <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="491cd-644">由於執行緒結束時未釋放 Mutex，已完成等候。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-644">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="491cd-645">在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-645">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="491cd-646">目前的執行個體是另一個應用程式定義域中 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-646">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne (int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne(int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne (millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne(int millisecondsTimeout, bool exitContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="491cd-647">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-647">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="491cd-648">
            <see langword="true" /> 表示在等候 (如果在同步內容中) 前結束內容的同步處理網域，並於之後重新取得，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-648">
              <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="491cd-649">封鎖目前執行緒，直到目前的 <see cref="T:System.Threading.WaitHandle" /> 收到信號為止，使用 32 位元帶正負號的整數來指定時間間隔，並指定是否要先離開同步處理網域，再開始等候。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-649">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal, using a 32-bit signed integer to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="491cd-650">如果目前的執行個體收到信號，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-650">
              <see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="491cd-651">如果`millisecondsTimeout`為零，此方法不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="491cd-651">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="491cd-652">它會測試的狀態，等候控制代碼，並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="491cd-652">It tests the state of the wait handle and returns immediately.</span></span>  
  
 <span data-ttu-id="491cd-653"><xref:System.Threading.AbandonedMutexException> 是.NET Framework 2.0 版的新功能。</span><span class="sxs-lookup"><span data-stu-id="491cd-653"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="491cd-654">在舊版中，<xref:System.Threading.WaitHandle.WaitOne%2A>方法會傳回`true`放棄 mutex 時。</span><span class="sxs-lookup"><span data-stu-id="491cd-654">In previous versions, the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="491cd-655">已放棄的 mutex 通常表示發生嚴重的編碼錯誤。</span><span class="sxs-lookup"><span data-stu-id="491cd-655">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="491cd-656">如果是全系統 mutex，則可能表示應用程式已被突然終止 （例如，透過使用 Windows 工作管理員 」）。</span><span class="sxs-lookup"><span data-stu-id="491cd-656">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="491cd-657">包含適用於偵錯資訊的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="491cd-657">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="491cd-658">這個方法會封鎖，直到目前的執行個體收到信號或逾時的呼叫端就會發生。</span><span class="sxs-lookup"><span data-stu-id="491cd-658">The caller of this method blocks until the current instance receives a signal or a time-out occurs.</span></span> <span data-ttu-id="491cd-659">使用這個方法來封鎖直到<xref:System.Threading.WaitHandle>從另一個執行緒收到訊號，例如便會產生非同步作業完成時。</span><span class="sxs-lookup"><span data-stu-id="491cd-659">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="491cd-660">如需詳細資訊，請參閱<xref:System.IAsyncResult>介面。</span><span class="sxs-lookup"><span data-stu-id="491cd-660">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="491cd-661">覆寫這個方法以自訂在衍生類別的行為。</span><span class="sxs-lookup"><span data-stu-id="491cd-661">Override this method to customize the behavior of derived classes.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="491cd-662">結束內容的資訊</span><span class="sxs-lookup"><span data-stu-id="491cd-662">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="491cd-663">`exitContext`參數沒有任何作用，除非<xref:System.Threading.WaitHandle.WaitOne%2A>方法從非預設的 managed 內容內呼叫。</span><span class="sxs-lookup"><span data-stu-id="491cd-663">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitOne%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="491cd-664">如果執行緒位呼叫內部的衍生自類別的執行個體此情形<xref:System.ContextBoundObject>。</span><span class="sxs-lookup"><span data-stu-id="491cd-664">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="491cd-665">即使您目前正在執行的方法不是衍生自的類別上<xref:System.ContextBoundObject>、 like <xref:System.String>，您可以在非預設的內容中如果<xref:System.ContextBoundObject>您目前的應用程式定義域中的堆疊上。</span><span class="sxs-lookup"><span data-stu-id="491cd-665">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="491cd-666">當您的程式碼在非預設的內容中執行時，指定`true`如`exitContext`造成執行緒結束的非預設的 managed 的內容 (也就是轉換至預設內容) 執行之前<xref:System.Threading.WaitHandle.WaitOne%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="491cd-666">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span> <span data-ttu-id="491cd-667">執行緒的呼叫之後傳回原始的非預設內容<xref:System.Threading.WaitHandle.WaitOne%2A>方法完成。</span><span class="sxs-lookup"><span data-stu-id="491cd-667">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitOne%2A> method completes.</span></span>  
  
 <span data-ttu-id="491cd-668">這有助於進行此內容繫結類別具有<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>。</span><span class="sxs-lookup"><span data-stu-id="491cd-668">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="491cd-669">在此情況下，類別的成員的所有呼叫都會自動同步都處理，且同步處理網域為類別的程式碼的整個本文。</span><span class="sxs-lookup"><span data-stu-id="491cd-669">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="491cd-670">如果成員的呼叫堆疊中的程式碼會呼叫<xref:System.Threading.WaitHandle.WaitOne%2A>方法，並指定`true`如`exitContext`，執行緒結束的同步處理網域，讓呼叫物件的任何成員，以繼續進行遭到封鎖的執行緒。</span><span class="sxs-lookup"><span data-stu-id="491cd-670">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitOne%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="491cd-671">當<xref:System.Threading.WaitHandle.WaitOne%2A>方法傳回時，進行呼叫的執行緒必須等待重新輸入同步處理網域。</span><span class="sxs-lookup"><span data-stu-id="491cd-671">When the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="491cd-672">下列範例會示範如何<xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29>時它同步處理網域中呼叫方法多載的行為。</span><span class="sxs-lookup"><span data-stu-id="491cd-672">The following example shows how the <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29> method overload behaves when it is called within a synchronization domain.</span></span> <span data-ttu-id="491cd-673">首先，執行緒會等待與`exitContext`設`false`，直到等候的逾時到期。</span><span class="sxs-lookup"><span data-stu-id="491cd-673">First, a thread waits with `exitContext` set to `false` and blocks until the wait timeout expires.</span></span> <span data-ttu-id="491cd-674">第二個執行緒執行之後的第一個執行緒終止，並等候與`exitContext`設`true`。</span><span class="sxs-lookup"><span data-stu-id="491cd-674">A second thread executes after the first thread terminates and waits with `exitContext` set to `true`.</span></span> <span data-ttu-id="491cd-675">表示這個第二個執行緒的等候控制代碼呼叫不會遭到封鎖，並等候逾時前完成的執行緒。</span><span class="sxs-lookup"><span data-stu-id="491cd-675">The call to signal the wait handle for this second thread is not blocked, and the thread completes before the wait timeout.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitOne4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.threading.waithandle.waitone4/cpp/source.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitOne4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.waithandle.waitone4/cs/source.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitOne4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.waithandle.waitone4/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="491cd-676">目前的執行個體已經過處置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-676">The current instance has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="491cd-677">
            <paramref name="millisecondsTimeout" /> 為 -1 以外的負數，表示無限逾時。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-677">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="491cd-678">由於執行緒結束時未釋放 Mutex，已完成等候。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-678">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="491cd-679">在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-679">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="491cd-680">目前的執行個體是另一個應用程式定義域中 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-680">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne (TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne(valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne (timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne(TimeSpan timeout, bool exitContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="491cd-681">
            <see cref="T:System.TimeSpan" />，代表等候毫秒數；或是 <see cref="T:System.TimeSpan" />，代表無限期等候的 -1 毫秒。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-681">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="491cd-682">
            <see langword="true" /> 表示在等候 (如果在同步內容中) 前結束內容的同步處理網域，並於之後重新取得，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-682">
              <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="491cd-683">封鎖目前執行緒，直到目前執行個體收到信號為止，使用 <see cref="T:System.TimeSpan" /> 來指定時間間隔，並指定是否要先離開同步處理網域，再開始等候。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-683">Blocks the current thread until the current instance receives a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="491cd-684">如果目前的執行個體收到信號，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-684">
              <see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="491cd-685">如果`timeout`為零，此方法不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="491cd-685">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="491cd-686">它會測試的狀態，等候控制代碼，並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="491cd-686">It tests the state of the wait handle and returns immediately.</span></span>  
  
 <span data-ttu-id="491cd-687"><xref:System.Threading.AbandonedMutexException> 是.NET Framework 2.0 版的新功能。</span><span class="sxs-lookup"><span data-stu-id="491cd-687"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="491cd-688">在舊版中，<xref:System.Threading.WaitHandle.WaitOne%2A>方法會傳回`true`放棄 mutex 時。</span><span class="sxs-lookup"><span data-stu-id="491cd-688">In previous versions, the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="491cd-689">已放棄的 mutex 通常表示發生嚴重的編碼錯誤。</span><span class="sxs-lookup"><span data-stu-id="491cd-689">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="491cd-690">如果是全系統 mutex，則可能表示應用程式已被突然終止 （例如，透過使用 Windows 工作管理員 」）。</span><span class="sxs-lookup"><span data-stu-id="491cd-690">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="491cd-691">包含適用於偵錯資訊的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="491cd-691">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="491cd-692">這個方法會封鎖，直到目前的執行個體收到信號或逾時的呼叫端就會發生。</span><span class="sxs-lookup"><span data-stu-id="491cd-692">The caller of this method blocks until the current instance receives a signal or a time-out occurs.</span></span> <span data-ttu-id="491cd-693">使用這個方法來封鎖直到<xref:System.Threading.WaitHandle>從另一個執行緒收到訊號，例如便會產生非同步作業完成時。</span><span class="sxs-lookup"><span data-stu-id="491cd-693">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="491cd-694">如需詳細資訊，請參閱<xref:System.IAsyncResult>介面。</span><span class="sxs-lookup"><span data-stu-id="491cd-694">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="491cd-695">覆寫這個方法以自訂在衍生類別的行為。</span><span class="sxs-lookup"><span data-stu-id="491cd-695">Override this method to customize the behavior of derived classes.</span></span>  
  
 <span data-ttu-id="491cd-696">最大值`timeout`是<xref:System.Int32.MaxValue?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="491cd-696">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="491cd-697">結束內容的資訊</span><span class="sxs-lookup"><span data-stu-id="491cd-697">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="491cd-698">`exitContext`參數沒有任何作用，除非<xref:System.Threading.WaitHandle.WaitOne%2A>方法從非預設的 managed 內容內呼叫。</span><span class="sxs-lookup"><span data-stu-id="491cd-698">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitOne%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="491cd-699">如果執行緒位呼叫內部的衍生自類別的執行個體此情形<xref:System.ContextBoundObject>。</span><span class="sxs-lookup"><span data-stu-id="491cd-699">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="491cd-700">即使您目前正在執行的方法不是衍生自的類別上<xref:System.ContextBoundObject>、 like <xref:System.String>，您可以在非預設的內容中如果<xref:System.ContextBoundObject>您目前的應用程式定義域中的堆疊上。</span><span class="sxs-lookup"><span data-stu-id="491cd-700">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="491cd-701">當您的程式碼在非預設的內容中執行時，指定`true`如`exitContext`造成執行緒結束的非預設的 managed 的內容 (也就是轉換至預設內容) 執行之前<xref:System.Threading.WaitHandle.WaitOne%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="491cd-701">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span> <span data-ttu-id="491cd-702">執行緒的呼叫之後傳回原始的非預設內容<xref:System.Threading.WaitHandle.WaitOne%2A>方法完成。</span><span class="sxs-lookup"><span data-stu-id="491cd-702">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitOne%2A> method completes.</span></span>  
  
 <span data-ttu-id="491cd-703">這有助於進行此內容繫結類別具有<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>。</span><span class="sxs-lookup"><span data-stu-id="491cd-703">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="491cd-704">在此情況下，類別的成員的所有呼叫都會自動同步都處理，且同步處理網域為類別的程式碼的整個本文。</span><span class="sxs-lookup"><span data-stu-id="491cd-704">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="491cd-705">如果成員的呼叫堆疊中的程式碼會呼叫<xref:System.Threading.WaitHandle.WaitOne%2A>方法，並指定`true`如`exitContext`，執行緒結束的同步處理網域，讓呼叫物件的任何成員，以繼續進行遭到封鎖的執行緒。</span><span class="sxs-lookup"><span data-stu-id="491cd-705">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitOne%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="491cd-706">當<xref:System.Threading.WaitHandle.WaitOne%2A>方法傳回時，進行呼叫的執行緒必須等待重新輸入同步處理網域。</span><span class="sxs-lookup"><span data-stu-id="491cd-706">When the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="491cd-707">下列程式碼範例示範如何使用等候控制代碼，以防止處理程序同時等候背景執行緒完成執行。</span><span class="sxs-lookup"><span data-stu-id="491cd-707">The following code example shows how to use a wait handle to keep a process from terminating while it waits for a background thread to finish executing.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitOne3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne3/CPP/source3.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitOne3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne3/CS/source3.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitOne3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne3/VB/source3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="491cd-708">目前的執行個體已經過處置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-708">The current instance has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="491cd-709">
            <paramref name="timeout" /> 為 -1 毫秒以外的負數，表示無限逾時。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-709">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span>
          </span>
          <span data-ttu-id="491cd-710">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-710">-or-</span>
          </span>
          <span data-ttu-id="491cd-711">
            <paramref name="timeout" /> 大於 <see cref="F:System.Int32.MaxValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-711">
              <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="491cd-712">由於執行緒結束時未釋放 Mutex，已完成等候。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-712">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="491cd-713">在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-713">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="491cd-714">目前的執行個體是另一個應用程式定義域中 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-714">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitTimeout">
      <MemberSignature Language="C#" Value="public const int WaitTimeout = 258;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 WaitTimeout = (258)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.WaitHandle.WaitTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Const WaitTimeout As Integer  = 258" />
      <MemberSignature Language="C++ CLI" Value="public: int WaitTimeout = 258;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>258</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="491cd-715">表示 <see cref="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)" /> 作業在發出任何等候控制代碼信號之前便已逾時。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-715">Indicates that a <see cref="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)" /> operation timed out before any of the wait handles were signaled.</span>
          </span>
          <span data-ttu-id="491cd-716">這個欄位是常數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="491cd-716">This field is constant.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="491cd-717">這個欄位是其中一個可能的傳回值的`WaitAny`。</span><span class="sxs-lookup"><span data-stu-id="491cd-717">This field is one of the possible return values of `WaitAny`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="491cd-718">下列程式碼範例示範如何使用執行緒集區同時搜尋多個磁碟上的檔案。</span><span class="sxs-lookup"><span data-stu-id="491cd-718">The following code example demonstrates how to use the thread pool to simultaneously search for a file on multiple disks.</span></span> <span data-ttu-id="491cd-719">空間考量因素，如搜尋才每個磁碟的根目錄。</span><span class="sxs-lookup"><span data-stu-id="491cd-719">For space considerations, only the root directory of each disk is searched.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/CS/source2.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>