<Type Name="WaitHandle" FullName="System.Threading.WaitHandle">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a13a27594fa1d97d7387994076cdc3b3a30d735d" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37609270" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class WaitHandle : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi abstract beforefieldinit WaitHandle extends System.MarshalByRefObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.WaitHandle" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class WaitHandle&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class WaitHandle abstract : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="F#" Value="type WaitHandle = class&#xA;    inherit MarshalByRefObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="8a87b-101">Encapsulates operating system–specific objects that wait for exclusive access to shared resources.</span>
      <span class="sxs-lookup">
        <span data-stu-id="8a87b-101">Encapsulates operating system–specific objects that wait for exclusive access to shared resources.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a87b-102"><xref:System.Threading.WaitHandle>類別會封裝 Win32 同步控制代碼，以及用來代表所有在執行階段允許多個等候作業的同步處理物件。</span><span class="sxs-lookup"><span data-stu-id="8a87b-102">The <xref:System.Threading.WaitHandle> class encapsulates Win32 synchronization handles, and is used to represent all synchronization objects in the runtime that allow multiple wait operations.</span></span> <span data-ttu-id="8a87b-103">如需與其他同步處理物件的等候控制代碼的比較，請參閱 <<c0> [ 同步處理原始物件概觀](~/docs/standard/threading/overview-of-synchronization-primitives.md)。</span><span class="sxs-lookup"><span data-stu-id="8a87b-103">For a comparison of wait handles with other synchronization objects, see [Overview of Synchronization Primitives](~/docs/standard/threading/overview-of-synchronization-primitives.md).</span></span>  
  
 <span data-ttu-id="8a87b-104"><xref:System.Threading.WaitHandle>本身的類別是抽象的。</span><span class="sxs-lookup"><span data-stu-id="8a87b-104">The <xref:System.Threading.WaitHandle> class itself is abstract.</span></span> <span data-ttu-id="8a87b-105">類別衍生自<xref:System.Threading.WaitHandle>定義訊號的機制，以指示耗時或釋放存取共用資源，但是會使用繼承<xref:System.Threading.WaitHandle>方法來封鎖而等待存取共用資源。</span><span class="sxs-lookup"><span data-stu-id="8a87b-105">Classes derived from <xref:System.Threading.WaitHandle> define a signaling mechanism to indicate taking or releasing access to a shared resource, but they use the inherited <xref:System.Threading.WaitHandle> methods to block while waiting for access to shared resources.</span></span> <span data-ttu-id="8a87b-106">類別衍生自<xref:System.Threading.WaitHandle>包括：</span><span class="sxs-lookup"><span data-stu-id="8a87b-106">The classes derived from <xref:System.Threading.WaitHandle> include:</span></span>  
  
-   <span data-ttu-id="8a87b-107"><xref:System.Threading.Mutex> 類別。</span><span class="sxs-lookup"><span data-stu-id="8a87b-107">The <xref:System.Threading.Mutex> class.</span></span> <span data-ttu-id="8a87b-108">請參閱[Mutex](~/docs/standard/threading/mutexes.md)。</span><span class="sxs-lookup"><span data-stu-id="8a87b-108">See [Mutexes](~/docs/standard/threading/mutexes.md).</span></span>  
  
-   <span data-ttu-id="8a87b-109"><xref:System.Threading.EventWaitHandle>類別和其衍生的類別，<xref:System.Threading.AutoResetEvent>和<xref:System.Threading.ManualResetEvent>。</span><span class="sxs-lookup"><span data-stu-id="8a87b-109">The <xref:System.Threading.EventWaitHandle> class and its derived classes, <xref:System.Threading.AutoResetEvent> and <xref:System.Threading.ManualResetEvent>.</span></span> <span data-ttu-id="8a87b-110">[EventWaitHandle、AutoResetEvent、CountdownEvent、ManualResetEvent](~/docs/standard/threading/eventwaithandle-autoresetevent-countdownevent-manualresetevent.md)。</span><span class="sxs-lookup"><span data-stu-id="8a87b-110">See [EventWaitHandle, AutoResetEvent, CountdownEvent, ManualResetEvent](~/docs/standard/threading/eventwaithandle-autoresetevent-countdownevent-manualresetevent.md).</span></span>  
  
-   <span data-ttu-id="8a87b-111"><xref:System.Threading.Semaphore> 類別。</span><span class="sxs-lookup"><span data-stu-id="8a87b-111">The <xref:System.Threading.Semaphore> class.</span></span> <span data-ttu-id="8a87b-112">請參閱[Semaphore 和 SemaphoreSlim](~/docs/standard/threading/semaphore-and-semaphoreslim.md)。</span><span class="sxs-lookup"><span data-stu-id="8a87b-112">See [Semaphore and SemaphoreSlim](~/docs/standard/threading/semaphore-and-semaphoreslim.md).</span></span>  
  
 <span data-ttu-id="8a87b-113">個別的等候控制代碼上封鎖執行緒，可以將它所呼叫的執行個體方法<xref:System.Threading.WaitHandle.WaitOne%2A>，其中會由衍生自的類別繼承<xref:System.Threading.WaitHandle>。</span><span class="sxs-lookup"><span data-stu-id="8a87b-113">Threads can block on an individual wait handle by calling the instance method <xref:System.Threading.WaitHandle.WaitOne%2A>, which is inherited by classes derived from <xref:System.Threading.WaitHandle>.</span></span>  
  
 <span data-ttu-id="8a87b-114">在衍生的類別<xref:System.Threading.WaitHandle>的差異在於其執行緒親和性。</span><span class="sxs-lookup"><span data-stu-id="8a87b-114">The derived classes of <xref:System.Threading.WaitHandle> differ in their thread affinity.</span></span> <span data-ttu-id="8a87b-115">事件等候控制代碼 (<xref:System.Threading.EventWaitHandle>， <xref:System.Threading.AutoResetEvent>，和<xref:System.Threading.ManualResetEvent>)，號誌沒有執行緒相似性; 任何執行緒可以發出信號的事件等候控制代碼或號誌。</span><span class="sxs-lookup"><span data-stu-id="8a87b-115">Event wait handles (<xref:System.Threading.EventWaitHandle>, <xref:System.Threading.AutoResetEvent>, and <xref:System.Threading.ManualResetEvent>) and semaphores do not have thread affinity; any thread can signal an event wait handle or semaphore.</span></span> <span data-ttu-id="8a87b-116">Mutex，相反地，沒有執行緒相似性;擁有 mutex 的執行緒必須釋放它，並會擲回例外狀況，如果執行緒呼叫<xref:System.Threading.Mutex.ReleaseMutex%2A>上未擁有 mutex 的方法。</span><span class="sxs-lookup"><span data-stu-id="8a87b-116">Mutexes, on the other hand, do have thread affinity; the thread that owns a mutex must release it, and an exception is thrown if a thread calls the <xref:System.Threading.Mutex.ReleaseMutex%2A> method on a mutex that it does not own.</span></span>  
  
 <span data-ttu-id="8a87b-117">因為<xref:System.Threading.WaitHandle>類別衍生自<xref:System.MarshalByRefObject>，這些類別可以用來跨應用程式定義域界限同步處理執行緒的活動。</span><span class="sxs-lookup"><span data-stu-id="8a87b-117">Because the <xref:System.Threading.WaitHandle> class derives from <xref:System.MarshalByRefObject>, these classes can be used to synchronize the activities of threads across application domain boundaries.</span></span>  
  
 <span data-ttu-id="8a87b-118">除了其衍生的類別，<xref:System.Threading.WaitHandle>類別具有一些靜態方法，封鎖執行緒，直到其中一個或多個同步物件收到信號...</span><span class="sxs-lookup"><span data-stu-id="8a87b-118">In addition to its derived classes, the <xref:System.Threading.WaitHandle> class has a number of static methods that block a thread until one or more synchronization objects receive a signal..</span></span> <span data-ttu-id="8a87b-119">它們包括：</span><span class="sxs-lookup"><span data-stu-id="8a87b-119">These include:</span></span>  
  
-   <span data-ttu-id="8a87b-120"><xref:System.Threading.WaitHandle.SignalAndWait%2A>這可讓發出信號一個等候控制代碼，以及立即等候另一個執行緒。</span><span class="sxs-lookup"><span data-stu-id="8a87b-120"><xref:System.Threading.WaitHandle.SignalAndWait%2A>, which allows a thread to signal one wait handle and immediately wait on another.</span></span>  
  
-   <span data-ttu-id="8a87b-121"><xref:System.Threading.WaitHandle.WaitAll%2A>這可讓執行緒等候，直到在陣列中的所有等候控制代碼會都收到信號。</span><span class="sxs-lookup"><span data-stu-id="8a87b-121"><xref:System.Threading.WaitHandle.WaitAll%2A>, which allows a thread to wait until all the wait handles in an array receive a signal.</span></span>  
  
-   <span data-ttu-id="8a87b-122"><xref:System.Threading.WaitHandle.WaitAny%2A>這可讓執行緒等候，直到收到訊號的一組指定的等候控制代碼的任何一個。</span><span class="sxs-lookup"><span data-stu-id="8a87b-122"><xref:System.Threading.WaitHandle.WaitAny%2A>, which allows a thread to wait until any one of a specified set of wait handles has been signaled .</span></span>  
  
 <span data-ttu-id="8a87b-123">這些方法的多載提供放棄等候，並有機會先離開同步處理內容，再進入等候，讓其他執行緒使用的同步處理內容的逾時間隔。</span><span class="sxs-lookup"><span data-stu-id="8a87b-123">The overloads of these methods provide timeout intervals for abandoning the wait, and the opportunity to exit a synchronization context before entering the wait, allowing other threads to use the synchronization context.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8a87b-124">此類型會實作<xref:System.IDisposable>介面。</span><span class="sxs-lookup"><span data-stu-id="8a87b-124">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="8a87b-125">當您完成使用的類型或從中衍生的類型時，您應該處置它直接或間接。</span><span class="sxs-lookup"><span data-stu-id="8a87b-125">When you have finished using the type or a type derived from it, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="8a87b-126">若要直接處置型別，呼叫其<xref:System.Threading.WaitHandle.Close%2A>方法中的`try` / `catch`區塊。</span><span class="sxs-lookup"><span data-stu-id="8a87b-126">To dispose of the type directly, call its <xref:System.Threading.WaitHandle.Close%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="8a87b-127">若要處置它間接，使用的語言建構這類`using`（在 C# 中) 或`Using`（在 Visual Basic)。</span><span class="sxs-lookup"><span data-stu-id="8a87b-127">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="8a87b-128">如需詳細資訊，請參閱 「 使用物件，實作 IDisposable 」 一節<xref:System.IDisposable>介面 > 主題。</span><span class="sxs-lookup"><span data-stu-id="8a87b-128">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="8a87b-129"><xref:System.Threading.WaitHandle> 實作<xref:System.IDisposable.Dispose%2A>模式。</span><span class="sxs-lookup"><span data-stu-id="8a87b-129"><xref:System.Threading.WaitHandle> implements the <xref:System.IDisposable.Dispose%2A> pattern.</span></span> <span data-ttu-id="8a87b-130">請參閱[處置模式](~/docs/standard/design-guidelines/dispose-pattern.md)。</span><span class="sxs-lookup"><span data-stu-id="8a87b-130">See [Dispose Pattern](~/docs/standard/design-guidelines/dispose-pattern.md).</span></span> <span data-ttu-id="8a87b-131">當您衍生自<xref:System.Threading.WaitHandle>，使用<xref:System.Threading.WaitHandle.SafeWaitHandle%2A>屬性來儲存您的原生控制代碼的作業系統控制代碼。</span><span class="sxs-lookup"><span data-stu-id="8a87b-131">When you derive from <xref:System.Threading.WaitHandle>, use the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property to store your native handle operating system handle.</span></span> <span data-ttu-id="8a87b-132">您不需要覆寫保護<xref:System.Threading.WaitHandle.Dispose%2A>方法除非您使用其他的 unmanaged 的資源。</span><span class="sxs-lookup"><span data-stu-id="8a87b-132">You do not need to override the protected <xref:System.Threading.WaitHandle.Dispose%2A> method unless you use additional unmanaged resources.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8a87b-133">下列程式碼範例示範如何在兩個執行緒可以執行背景工作，並在主要執行緒等候工作完成使用靜態<xref:System.Threading.WaitHandle.WaitAny%2A>並<xref:System.Threading.WaitHandle.WaitAll%2A>方法<xref:System.Threading.WaitHandle>類別。</span><span class="sxs-lookup"><span data-stu-id="8a87b-133">The following code example shows how two threads can do background tasks while the Main thread waits for the tasks to complete using the static <xref:System.Threading.WaitHandle.WaitAny%2A> and <xref:System.Threading.WaitHandle.WaitAll%2A> methods of the <xref:System.Threading.WaitHandle> class.</span></span>  
  
 [!code-cpp[WaitHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/WaitHandle/cpp/WaitHandle.cpp#1)]
 [!code-csharp[WaitHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/WaitHandle/CS/WaitHandle.cs#1)]
 [!code-vb[WaitHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/WaitHandle/VB/WaitHandle.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="8a87b-134">此型別具備執行緒安全。</span>
      <span class="sxs-lookup">
        <span data-stu-id="8a87b-134">This type is thread safe.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WaitHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WaitHandle();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8a87b-135">Initializes a new instance of the <see cref="T:System.Threading.WaitHandle" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-135">Initializes a new instance of the <see cref="T:System.Threading.WaitHandle" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public virtual void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Close();" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit&#xA;override this.Close : unit -&gt; unit" Usage="waitHandle.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8a87b-136">Releases all resources held by the current <see cref="T:System.Threading.WaitHandle" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-136">Releases all resources held by the current <see cref="T:System.Threading.WaitHandle" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a87b-137">這個方法是公用的實作<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>方法<xref:System.Threading.WaitHandle>類別和其衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="8a87b-137">This method is the public implementation of the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> method for the <xref:System.Threading.WaitHandle> class and its derived classes.</span></span> <span data-ttu-id="8a87b-138">它提供標準的實作會呼叫`Dispose(Boolean)`多載`true`引數，然後呼叫<xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="8a87b-138">It provides a standard implementation that calls the `Dispose(Boolean)` overload with a `true` argument and then calls the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="8a87b-139">呼叫這個方法來釋放的執行個體所持有的所有資源`WaitHandle`或衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="8a87b-139">Call this method to release all resources held by an instance of `WaitHandle` or a derived class.</span></span>  
  
 <span data-ttu-id="8a87b-140">一旦呼叫這個方法時，目前的執行個體的參考會導致未定義的行為。</span><span class="sxs-lookup"><span data-stu-id="8a87b-140">Once this method is called, references to the current instance cause undefined behavior.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8a87b-141">請務必呼叫<xref:System.Threading.WaitHandle.Close%2A>或是<xref:System.Threading.WaitHandle.Dispose>您釋放最後一個參考之前<xref:System.Threading.WaitHandle>。</span><span class="sxs-lookup"><span data-stu-id="8a87b-141">Always call <xref:System.Threading.WaitHandle.Close%2A> or <xref:System.Threading.WaitHandle.Dispose> before you release your last reference to the <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="8a87b-142">否則，將不會釋放它所使用的資源。</span><span class="sxs-lookup"><span data-stu-id="8a87b-142">Otherwise, the resources it is using will not be freed.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="8a87b-143">
            <para>您應該覆寫<see langword="Dispose(Boolean)" />方法來釋放資源配置中衍生的類別。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-143">
              <para>You should override the <see langword="Dispose(Boolean)" /> method to release resources allocated in derived classes.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8a87b-144">Releases all resources used by the current instance of the <see cref="T:System.Threading.WaitHandle" /> class</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-144">Releases all resources used by the current instance of the <see cref="T:System.Threading.WaitHandle" /> class</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="waitHandle.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8a87b-145">Releases all resources used by the current instance of the <see cref="T:System.Threading.WaitHandle" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-145">Releases all resources used by the current instance of the <see cref="T:System.Threading.WaitHandle" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a87b-146">這個方法相當於<xref:System.Threading.WaitHandle.Close%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="8a87b-146">This method is equivalent to the <xref:System.Threading.WaitHandle.Close%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8a87b-147">請務必呼叫<xref:System.Threading.WaitHandle.Close%2A>或是<xref:System.Threading.WaitHandle.Dispose>您釋放最後一個參考之前<xref:System.Threading.WaitHandle>。</span><span class="sxs-lookup"><span data-stu-id="8a87b-147">Always call <xref:System.Threading.WaitHandle.Close%2A> or <xref:System.Threading.WaitHandle.Dispose> before you release your last reference to the <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="8a87b-148">否則，將不會釋放它所使用的資源。</span><span class="sxs-lookup"><span data-stu-id="8a87b-148">Otherwise, the resources it is using will not be freed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool explicitDisposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool explicitDisposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (explicitDisposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool explicitDisposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="waitHandle.Dispose explicitDisposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="explicitDisposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="explicitDisposing">
          <span data-ttu-id="8a87b-149">
            <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-149">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8a87b-150">When overridden in a derived class, releases the unmanaged resources used by the <see cref="T:System.Threading.WaitHandle" />, and optionally releases the managed resources.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-150">When overridden in a derived class, releases the unmanaged resources used by the <see cref="T:System.Threading.WaitHandle" />, and optionally releases the managed resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a87b-151">這個方法會呼叫<xref:System.Threading.WaitHandle.Close%2A>而<xref:System.Threading.WaitHandle.Dispose>方法`explicitDisposing`參數設定為`true`。</span><span class="sxs-lookup"><span data-stu-id="8a87b-151">This method is called by the <xref:System.Threading.WaitHandle.Close%2A> and the <xref:System.Threading.WaitHandle.Dispose> methods with the `explicitDisposing` parameter set to `true`.</span></span>  <span data-ttu-id="8a87b-152">當`explicitDisposing`參數是`true`，這個方法由任何 managed 物件持有的資源全部釋出這個<xref:System.Threading.WaitHandle>物件參考。</span><span class="sxs-lookup"><span data-stu-id="8a87b-152">When the `explicitDisposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Threading.WaitHandle> object references.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="8a87b-153">
            <para>您應該覆寫<see cref="M:System.Threading.WaitHandle.Dispose(System.Boolean)" />方法來釋放資源配置中衍生的類別。<see cref="M:System.Threading.WaitHandle.Close" />或<see cref="M:System.Threading.WaitHandle.Dispose" />方法可以由其他物件呼叫多次。當覆寫此方法時，小心不要參考先前處置呼叫中的物件<see langword="Dispose" />或<see langword="Close" />。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-153">
              <para>You should override the <see cref="M:System.Threading.WaitHandle.Dispose(System.Boolean)" /> method to release resources allocated in derived classes.  The <see cref="M:System.Threading.WaitHandle.Close" /> or <see cref="M:System.Threading.WaitHandle.Dispose" /> method can be called multiple times by other objects. When overriding this method, be careful not to reference objects that have been previously disposed in an earlier call to <see langword="Dispose" /> or <see langword="Close" />.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~WaitHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!WaitHandle ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="waitHandle.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public virtual IntPtr Handle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.WaitHandle.Handle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property IntPtr Handle { IntPtr get(); void set(IntPtr value); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint with get, set" Usage="System.Threading.WaitHandle.Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use the SafeWaitHandle property instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8a87b-154">Gets or sets the native operating system handle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-154">Gets or sets the native operating system handle.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8a87b-155">
            <see langword="IntPtr" />，代表原生作業系統控制代碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-155">An <see langword="IntPtr" /> representing the native operating system handle.</span>
          </span>
          <span data-ttu-id="8a87b-156">預設為 <see cref="F:System.Threading.WaitHandle.InvalidHandle" /> 欄位的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-156">The default is the value of the <see cref="F:System.Threading.WaitHandle.InvalidHandle" /> field.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a87b-157">指派新值給<xref:System.Threading.WaitHandle.Handle%2A>屬性不會關閉先前的控制代碼。</span><span class="sxs-lookup"><span data-stu-id="8a87b-157">Assigning a new value to the <xref:System.Threading.WaitHandle.Handle%2A> property does not close the previous handle.</span></span> <span data-ttu-id="8a87b-158">這會導致遺漏的控制代碼。</span><span class="sxs-lookup"><span data-stu-id="8a87b-158">This can result in a leaked handle.</span></span>  
  
 <span data-ttu-id="8a87b-159">請勿使用這個屬性在.NET Framework 2.0 版或更新版本;使用<xref:System.Threading.WaitHandle.SafeWaitHandle%2A>屬性改為。</span><span class="sxs-lookup"><span data-stu-id="8a87b-159">Do not use this property in the .NET Framework version 2.0 or later; use the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property instead.</span></span> <span data-ttu-id="8a87b-160">此屬性設定為有效的控制代碼也設定<xref:System.Threading.WaitHandle.SafeWaitHandle%2A>屬性，但將它設定為<xref:System.Threading.WaitHandle.InvalidHandle>可能會導致遺漏的控制代碼。</span><span class="sxs-lookup"><span data-stu-id="8a87b-160">Setting this property to a valid handle also sets the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property, but setting it to <xref:System.Threading.WaitHandle.InvalidHandle> can result in a leaked handle.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="8a87b-161">需要完全信任立即呼叫者，來設定屬性值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-161">Requires full trust for the immediate caller to set the property value.</span>
          </span>
          <span data-ttu-id="8a87b-162">這個成員無法由部分信任或不透明的程式碼設定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-162">This member cannot be set by partially trusted or transparent code.</span>
          </span>
        </permission>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">
          <span data-ttu-id="8a87b-163">在衍生的型別必須具有<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />來設定屬性值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-163">Derived types must have <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> to set the property value.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="InvalidHandle">
      <MemberSignature Language="C#" Value="protected static readonly IntPtr InvalidHandle;" />
      <MemberSignature Language="ILAsm" Value=".field family static initonly native int InvalidHandle" />
      <MemberSignature Language="DocId" Value="F:System.Threading.WaitHandle.InvalidHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Shared ReadOnly InvalidHandle As IntPtr " />
      <MemberSignature Language="C++ CLI" Value="protected: static initonly IntPtr InvalidHandle;" />
      <MemberSignature Language="F#" Value=" staticval mutable InvalidHandle : nativeint" Usage="System.Threading.WaitHandle.InvalidHandle" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8a87b-164">Represents an invalid native operating system handle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-164">Represents an invalid native operating system handle.</span>
          </span>
          <span data-ttu-id="8a87b-165">This field is read-only.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-165">This field is read-only.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a87b-166">在內部用來初始化<xref:System.Threading.WaitHandle.Handle%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="8a87b-166">Used internally to initialize the <xref:System.Threading.WaitHandle.Handle%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="8a87b-167">
            <para>您可以使用此值來判斷是否<see cref="P:System.Threading.WaitHandle.Handle" />屬性包含有效的原生作業系統控制代碼。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-167">
              <para>You can use this value to determine whether the <see cref="P:System.Threading.WaitHandle.Handle" /> property contains a valid native operating system handle.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="SafeWaitHandle">
      <MemberSignature Language="C#" Value="public Microsoft.Win32.SafeHandles.SafeWaitHandle SafeWaitHandle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Win32.SafeHandles.SafeWaitHandle SafeWaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.WaitHandle.SafeWaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public Property SafeWaitHandle As SafeWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Win32::SafeHandles::SafeWaitHandle ^ SafeWaitHandle { Microsoft::Win32::SafeHandles::SafeWaitHandle ^ get(); void set(Microsoft::Win32::SafeHandles::SafeWaitHandle ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SafeWaitHandle : Microsoft.Win32.SafeHandles.SafeWaitHandle with get, set" Usage="System.Threading.WaitHandle.SafeWaitHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.SafeHandles.SafeWaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8a87b-168">Gets or sets the native operating system handle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-168">Gets or sets the native operating system handle.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8a87b-169">
            <see cref="T:Microsoft.Win32.SafeHandles.SafeWaitHandle" />，代表原生作業系統控制代碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-169">A <see cref="T:Microsoft.Win32.SafeHandles.SafeWaitHandle" /> representing the native operating system handle.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a87b-170">當您指派新的值，以<xref:System.Threading.WaitHandle.SafeWaitHandle%2A>屬性，先前的控制代碼會在關閉前一個<xref:Microsoft.Win32.SafeHandles.SafeWaitHandle>物件回收。</span><span class="sxs-lookup"><span data-stu-id="8a87b-170">When you assign a new value to the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property, the previous handle will be closed when the previous <xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> object is collected.</span></span> <span data-ttu-id="8a87b-171">請勿以手動方式關閉此控制代碼，因為這會導致<xref:System.ObjectDisposedException>當<xref:Microsoft.Win32.SafeHandles.SafeWaitHandle>嘗試關閉此控制代碼。</span><span class="sxs-lookup"><span data-stu-id="8a87b-171">Do not manually close the handle, because this results in an <xref:System.ObjectDisposedException> when the <xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> attempts to close the handle.</span></span>  
  
 <span data-ttu-id="8a87b-172"><xref:System.Threading.WaitHandle> 實作<xref:System.IDisposable.Dispose%2A>模式。</span><span class="sxs-lookup"><span data-stu-id="8a87b-172"><xref:System.Threading.WaitHandle> implements the <xref:System.IDisposable.Dispose%2A> pattern.</span></span> <span data-ttu-id="8a87b-173">請參閱[處置模式](~/docs/standard/design-guidelines/dispose-pattern.md)。</span><span class="sxs-lookup"><span data-stu-id="8a87b-173">See [Dispose Pattern](~/docs/standard/design-guidelines/dispose-pattern.md).</span></span> <span data-ttu-id="8a87b-174">當您衍生自<xref:System.Threading.WaitHandle>，使用<xref:System.Threading.WaitHandle.SafeWaitHandle%2A>屬性來儲存您的原生控制代碼的作業系統控制代碼。</span><span class="sxs-lookup"><span data-stu-id="8a87b-174">When you derive from <xref:System.Threading.WaitHandle>, use the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property to store your native handle operating system handle.</span></span> <span data-ttu-id="8a87b-175">您不需要覆寫保護<xref:System.Threading.WaitHandle.Dispose%2A>方法除非您使用其他的 unmanaged 的資源。</span><span class="sxs-lookup"><span data-stu-id="8a87b-175">You do not need to override the protected <xref:System.Threading.WaitHandle.Dispose%2A> method unless you use additional unmanaged resources.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="8a87b-176">需要完全信任立即呼叫端。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-176">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="8a87b-177">此成員不能由部分信任或不透明的程式碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-177">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">
          <span data-ttu-id="8a87b-178">在衍生的型別必須具有<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />呼叫這個成員。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-178">Derived types must have <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> to call this member.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="SignalAndWait">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8a87b-179">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-179">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public static bool SignalAndWait (System.Threading.WaitHandle toSignal, System.Threading.WaitHandle toWaitOn);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SignalAndWait(class System.Threading.WaitHandle toSignal, class System.Threading.WaitHandle toWaitOn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SignalAndWait (toSignal As WaitHandle, toWaitOn As WaitHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SignalAndWait(System::Threading::WaitHandle ^ toSignal, System::Threading::WaitHandle ^ toWaitOn);" />
      <MemberSignature Language="F#" Value="static member SignalAndWait : System.Threading.WaitHandle * System.Threading.WaitHandle -&gt; bool" Usage="System.Threading.WaitHandle.SignalAndWait (toSignal, toWaitOn)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toSignal" Type="System.Threading.WaitHandle" />
        <Parameter Name="toWaitOn" Type="System.Threading.WaitHandle" />
      </Parameters>
      <Docs>
        <param name="toSignal">
          <span data-ttu-id="8a87b-180">The <see cref="T:System.Threading.WaitHandle" /> to signal.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-180">The <see cref="T:System.Threading.WaitHandle" /> to signal.</span>
          </span>
        </param>
        <param name="toWaitOn">
          <span data-ttu-id="8a87b-181">The <see cref="T:System.Threading.WaitHandle" /> to wait on.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-181">The <see cref="T:System.Threading.WaitHandle" /> to wait on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8a87b-182">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-182">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8a87b-183">
            <see langword="true" /> if both the signal and the wait complete successfully; if the wait does not complete, the method does not return.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-183">
              <see langword="true" /> if both the signal and the wait complete successfully; if the wait does not complete, the method does not return.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a87b-184">這項作業不保證是不可部分完成。</span><span class="sxs-lookup"><span data-stu-id="8a87b-184">This operation is not guaranteed to be atomic.</span></span> <span data-ttu-id="8a87b-185">在目前的執行緒訊號後`toSignal`之前等候`toWaitOn`，另一個處理器執行的執行緒可能會發出信號`toWaitOn`或等候它。</span><span class="sxs-lookup"><span data-stu-id="8a87b-185">After the current thread signals `toSignal` but before it waits on `toWaitOn`, a thread that is running on another processor might signal `toWaitOn` or wait on it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8a87b-186">下列程式碼範例使用<xref:System.Threading.WaitHandle.SignalAndWait%28System.Threading.WaitHandle%2CSystem.Threading.WaitHandle%29>方法多載來允許主執行緒發出信號已封鎖的執行緒，以及執行緒完成工作，然後等候。</span><span class="sxs-lookup"><span data-stu-id="8a87b-186">The following code example uses the <xref:System.Threading.WaitHandle.SignalAndWait%28System.Threading.WaitHandle%2CSystem.Threading.WaitHandle%29> method overload to allow the main thread to signal a blocked thread and then wait until the thread finishes a task.</span></span>  
  
 <span data-ttu-id="8a87b-187">範例啟動五個執行緒，讓他們封鎖<xref:System.Threading.EventWaitHandle>以建立<xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType>旗標與再發行每一個執行緒時間使用者按下 ENTER 鍵。</span><span class="sxs-lookup"><span data-stu-id="8a87b-187">The example starts five threads, allows them to block on an <xref:System.Threading.EventWaitHandle> created with the <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType> flag, and then releases one thread each time the user presses the ENTER key.</span></span> <span data-ttu-id="8a87b-188">此範例會排入佇列的另一個的五個執行緒，並釋放所有使用<xref:System.Threading.EventWaitHandle>以建立<xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType>旗標。</span><span class="sxs-lookup"><span data-stu-id="8a87b-188">The example then queues another five threads and releases them all using an <xref:System.Threading.EventWaitHandle> created with the <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType> flag.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/CS/source.cs#1)]
 [!code-vb[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8a87b-189">
            <paramref name="toSignal" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-189">
              <paramref name="toSignal" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8a87b-190">-or-  <paramref name="toWaitOn" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-190">-or-  <paramref name="toWaitOn" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="8a87b-191">The method was called on a thread that has <see cref="T:System.STAThreadAttribute" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-191">The method was called on a thread that has <see cref="T:System.STAThreadAttribute" />.</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="8a87b-192">This method is not supported on Windows 98 or Windows Millennium Edition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-192">This method is not supported on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8a87b-193">
            <paramref name="toSignal" /> is a semaphore, and it already has a full count.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-193">
              <paramref name="toSignal" /> is a semaphore, and it already has a full count.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="8a87b-194">The wait completed because a thread exited without releasing a mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-194">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="8a87b-195">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-195">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public static bool SignalAndWait (System.Threading.WaitHandle toSignal, System.Threading.WaitHandle toWaitOn, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SignalAndWait(class System.Threading.WaitHandle toSignal, class System.Threading.WaitHandle toWaitOn, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SignalAndWait (toSignal As WaitHandle, toWaitOn As WaitHandle, millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SignalAndWait(System::Threading::WaitHandle ^ toSignal, System::Threading::WaitHandle ^ toWaitOn, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member SignalAndWait : System.Threading.WaitHandle * System.Threading.WaitHandle * int * bool -&gt; bool" Usage="System.Threading.WaitHandle.SignalAndWait (toSignal, toWaitOn, millisecondsTimeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toSignal" Type="System.Threading.WaitHandle" />
        <Parameter Name="toWaitOn" Type="System.Threading.WaitHandle" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="toSignal">
          <span data-ttu-id="8a87b-196">The <see cref="T:System.Threading.WaitHandle" /> to signal.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-196">The <see cref="T:System.Threading.WaitHandle" /> to signal.</span>
          </span>
        </param>
        <param name="toWaitOn">
          <span data-ttu-id="8a87b-197">The <see cref="T:System.Threading.WaitHandle" /> to wait on.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-197">The <see cref="T:System.Threading.WaitHandle" /> to wait on.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="8a87b-198">An integer that represents the interval to wait.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-198">An integer that represents the interval to wait.</span>
          </span>
          <span data-ttu-id="8a87b-199">If the value is <see cref="F:System.Threading.Timeout.Infinite" />, that is, -1, the wait is infinite.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-199">If the value is <see cref="F:System.Threading.Timeout.Infinite" />, that is, -1, the wait is infinite.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="8a87b-200">
            <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-200">
              <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8a87b-201">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another, specifying a time-out interval as a 32-bit signed integer and specifying whether to exit the synchronization domain for the context before entering the wait.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-201">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another, specifying a time-out interval as a 32-bit signed integer and specifying whether to exit the synchronization domain for the context before entering the wait.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8a87b-202">
            <see langword="true" /> if both the signal and the wait completed successfully, or <see langword="false" /> if the signal completed but the wait timed out.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-202">
              <see langword="true" /> if both the signal and the wait completed successfully, or <see langword="false" /> if the signal completed but the wait timed out.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a87b-203">這項作業不保證是不可部分完成。</span><span class="sxs-lookup"><span data-stu-id="8a87b-203">This operation is not guaranteed to be atomic.</span></span> <span data-ttu-id="8a87b-204">在目前的執行緒訊號後`toSignal`之前等候`toWaitOn`，另一個處理器執行的執行緒可能會發出信號`toWaitOn`或等候它。</span><span class="sxs-lookup"><span data-stu-id="8a87b-204">After the current thread signals `toSignal` but before it waits on `toWaitOn`, a thread that is running on another processor might signal `toWaitOn` or wait on it.</span></span>  
  
 <span data-ttu-id="8a87b-205">如果`millisecondsTimeout`為零，此方法不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="8a87b-205">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="8a87b-206">它會測試的狀態`toWaitOn`並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="8a87b-206">It tests the state of the `toWaitOn` and returns immediately.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="8a87b-207">在結束內容的資訊</span><span class="sxs-lookup"><span data-stu-id="8a87b-207">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="8a87b-208">`exitContext`參數沒有任何作用，除非<xref:System.Threading.WaitHandle.SignalAndWait%2A>從非預設受管理的內容中呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="8a87b-208">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="8a87b-209">如果您的執行緒是衍生自類別的執行個體的呼叫在此情形<xref:System.ContextBoundObject>。</span><span class="sxs-lookup"><span data-stu-id="8a87b-209">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="8a87b-210">即使您目前正在執行的方法不是衍生自的類別上<xref:System.ContextBoundObject>，例如<xref:System.String>，您可以在非預設內容中如果<xref:System.ContextBoundObject>您目前的應用程式定義域中的堆疊上。</span><span class="sxs-lookup"><span data-stu-id="8a87b-210">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="8a87b-211">時的非預設內容中執行您的程式碼，在指定`true`的`exitContext`造成執行緒結束的非預設的 managed 的內容 (也就是轉換成預設內容) 執行之前<xref:System.Threading.WaitHandle.SignalAndWait%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="8a87b-211">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method.</span></span> <span data-ttu-id="8a87b-212">執行緒在呼叫之後返回原始的非預設內容<xref:System.Threading.WaitHandle.SignalAndWait%2A>方法完成。</span><span class="sxs-lookup"><span data-stu-id="8a87b-212">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method completes.</span></span>  
  
 <span data-ttu-id="8a87b-213">這有助於進行內容繫結類別具有<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>。</span><span class="sxs-lookup"><span data-stu-id="8a87b-213">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="8a87b-214">在此情況下，所有呼叫類別的成員會自動同步都處理，並同步處理領域是類別程式碼的整個主體。</span><span class="sxs-lookup"><span data-stu-id="8a87b-214">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="8a87b-215">如果成員的呼叫堆疊中的程式碼會呼叫<xref:System.Threading.WaitHandle.SignalAndWait%2A>方法，並指定`true`如`exitContext`，執行緒結束同步處理網域，讓執行緒上呼叫物件的任何成員，以繼續進行封鎖。</span><span class="sxs-lookup"><span data-stu-id="8a87b-215">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="8a87b-216">當<xref:System.Threading.WaitHandle.SignalAndWait%2A>方法傳回時，進行呼叫的執行緒必須等待重新輸入一次同步處理領域。</span><span class="sxs-lookup"><span data-stu-id="8a87b-216">When the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8a87b-217">
            <paramref name="toSignal" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-217">
              <paramref name="toSignal" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8a87b-218">-or-  <paramref name="toWaitOn" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-218">-or-  <paramref name="toWaitOn" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="8a87b-219">The method is called on a thread that has <see cref="T:System.STAThreadAttribute" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-219">The method is called on a thread that has <see cref="T:System.STAThreadAttribute" />.</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="8a87b-220">This method is not supported on Windows 98 or Windows Millennium Edition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-220">This method is not supported on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8a87b-221">The <see cref="T:System.Threading.WaitHandle" /> cannot be signaled because it would exceed its maximum count.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-221">The <see cref="T:System.Threading.WaitHandle" /> cannot be signaled because it would exceed its maximum count.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="8a87b-222">
            <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-222">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="8a87b-223">The wait completed because a thread exited without releasing a mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-223">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="8a87b-224">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-224">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public static bool SignalAndWait (System.Threading.WaitHandle toSignal, System.Threading.WaitHandle toWaitOn, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SignalAndWait(class System.Threading.WaitHandle toSignal, class System.Threading.WaitHandle toWaitOn, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SignalAndWait (toSignal As WaitHandle, toWaitOn As WaitHandle, timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SignalAndWait(System::Threading::WaitHandle ^ toSignal, System::Threading::WaitHandle ^ toWaitOn, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member SignalAndWait : System.Threading.WaitHandle * System.Threading.WaitHandle * TimeSpan * bool -&gt; bool" Usage="System.Threading.WaitHandle.SignalAndWait (toSignal, toWaitOn, timeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toSignal" Type="System.Threading.WaitHandle" />
        <Parameter Name="toWaitOn" Type="System.Threading.WaitHandle" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="toSignal">
          <span data-ttu-id="8a87b-225">The <see cref="T:System.Threading.WaitHandle" /> to signal.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-225">The <see cref="T:System.Threading.WaitHandle" /> to signal.</span>
          </span>
        </param>
        <param name="toWaitOn">
          <span data-ttu-id="8a87b-226">The <see cref="T:System.Threading.WaitHandle" /> to wait on.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-226">The <see cref="T:System.Threading.WaitHandle" /> to wait on.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="8a87b-227">A <see cref="T:System.TimeSpan" /> that represents the interval to wait.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-227">A <see cref="T:System.TimeSpan" /> that represents the interval to wait.</span>
          </span>
          <span data-ttu-id="8a87b-228">If the value is -1, the wait is infinite.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-228">If the value is -1, the wait is infinite.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="8a87b-229">
            <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-229">
              <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8a87b-230">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another, specifying the time-out interval as a <see cref="T:System.TimeSpan" /> and specifying whether to exit the synchronization domain for the context before entering the wait.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-230">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another, specifying the time-out interval as a <see cref="T:System.TimeSpan" /> and specifying whether to exit the synchronization domain for the context before entering the wait.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8a87b-231">
            <see langword="true" /> if both the signal and the wait completed successfully, or <see langword="false" /> if the signal completed but the wait timed out.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-231">
              <see langword="true" /> if both the signal and the wait completed successfully, or <see langword="false" /> if the signal completed but the wait timed out.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a87b-232">這項作業不保證是不可部分完成。</span><span class="sxs-lookup"><span data-stu-id="8a87b-232">This operation is not guaranteed to be atomic.</span></span> <span data-ttu-id="8a87b-233">在目前的執行緒訊號後`toSignal`之前等候`toWaitOn`，另一個處理器執行的執行緒可能會發出信號`toWaitOn`或等候它。</span><span class="sxs-lookup"><span data-stu-id="8a87b-233">After the current thread signals `toSignal` but before it waits on `toWaitOn`, a thread that is running on another processor might signal `toWaitOn` or wait on it.</span></span>  
  
 <span data-ttu-id="8a87b-234">最大值`timeout`是<xref:System.Int32.MaxValue?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="8a87b-234">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="8a87b-235">如果`timeout`為零，此方法不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="8a87b-235">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="8a87b-236">它會測試的狀態`toWaitOn`並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="8a87b-236">It tests the state of the `toWaitOn` and returns immediately.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="8a87b-237">在結束內容的資訊</span><span class="sxs-lookup"><span data-stu-id="8a87b-237">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="8a87b-238">`exitContext`參數沒有任何作用，除非<xref:System.Threading.WaitHandle.SignalAndWait%2A>從非預設受管理的內容中呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="8a87b-238">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="8a87b-239">如果您的執行緒是衍生自類別的執行個體的呼叫在此情形<xref:System.ContextBoundObject>。</span><span class="sxs-lookup"><span data-stu-id="8a87b-239">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="8a87b-240">即使您目前正在執行的方法不是衍生自的類別上<xref:System.ContextBoundObject>，例如<xref:System.String>，您可以在非預設內容中如果<xref:System.ContextBoundObject>您目前的應用程式定義域中的堆疊上。</span><span class="sxs-lookup"><span data-stu-id="8a87b-240">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="8a87b-241">時的非預設內容中執行您的程式碼，在指定`true`的`exitContext`造成執行緒結束的非預設的 managed 的內容 (也就是轉換成預設內容) 執行之前<xref:System.Threading.WaitHandle.SignalAndWait%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="8a87b-241">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method.</span></span> <span data-ttu-id="8a87b-242">執行緒在呼叫之後返回原始的非預設內容<xref:System.Threading.WaitHandle.SignalAndWait%2A>方法完成。</span><span class="sxs-lookup"><span data-stu-id="8a87b-242">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method completes.</span></span>  
  
 <span data-ttu-id="8a87b-243">這有助於進行內容繫結類別具有<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>。</span><span class="sxs-lookup"><span data-stu-id="8a87b-243">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="8a87b-244">在此情況下，所有呼叫類別的成員會自動同步都處理，並同步處理領域是類別程式碼的整個主體。</span><span class="sxs-lookup"><span data-stu-id="8a87b-244">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="8a87b-245">如果成員的呼叫堆疊中的程式碼會呼叫<xref:System.Threading.WaitHandle.SignalAndWait%2A>方法，並指定`true`如`exitContext`，執行緒結束同步處理網域，讓執行緒上呼叫物件的任何成員，以繼續進行封鎖。</span><span class="sxs-lookup"><span data-stu-id="8a87b-245">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="8a87b-246">當<xref:System.Threading.WaitHandle.SignalAndWait%2A>方法傳回時，進行呼叫的執行緒必須等待重新輸入一次同步處理領域。</span><span class="sxs-lookup"><span data-stu-id="8a87b-246">When the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8a87b-247">
            <paramref name="toSignal" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-247">
              <paramref name="toSignal" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8a87b-248">-or-  <paramref name="toWaitOn" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-248">-or-  <paramref name="toWaitOn" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="8a87b-249">The method was called on a thread that has <see cref="T:System.STAThreadAttribute" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-249">The method was called on a thread that has <see cref="T:System.STAThreadAttribute" />.</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="8a87b-250">This method is not supported on Windows 98 or Windows Millennium Edition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-250">This method is not supported on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8a87b-251">
            <paramref name="toSignal" /> is a semaphore, and it already has a full count.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-251">
              <paramref name="toSignal" /> is a semaphore, and it already has a full count.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="8a87b-252">
            <paramref name="timeout" /> evaluates to a negative number of milliseconds other than -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-252">
              <paramref name="timeout" /> evaluates to a negative number of milliseconds other than -1.</span>
          </span>
          <span data-ttu-id="8a87b-253">-or-  <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-253">-or-  <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="8a87b-254">The wait completed because a thread exited without releasing a mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-254">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="8a87b-255">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-255">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitAll">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8a87b-256">Waits for all the elements in the specified array to receive a signal.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-256">Waits for all the elements in the specified array to receive a signal.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle()) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.WaitHandle[] -&gt; bool" Usage="System.Threading.WaitHandle.WaitAll waitHandles" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="8a87b-257">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-257">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
          <span data-ttu-id="8a87b-258">This array cannot contain multiple references to the same object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-258">This array cannot contain multiple references to the same object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8a87b-259">Waits for all the elements in the specified array to receive a signal.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-259">Waits for all the elements in the specified array to receive a signal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8a87b-260">
            <see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise the method never returns.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-260">
              <see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise the method never returns.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a87b-261"><xref:System.Threading.AbandonedMutexException> 是.NET Framework 2.0 版中的新功能。</span><span class="sxs-lookup"><span data-stu-id="8a87b-261"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="8a87b-262">在舊版中，<xref:System.Threading.WaitHandle.WaitAll%2A>方法會傳回`true`時放棄的 mutex。</span><span class="sxs-lookup"><span data-stu-id="8a87b-262">In previous versions, the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="8a87b-263">已放棄的 mutex 通常表示嚴重的程式碼錯誤。</span><span class="sxs-lookup"><span data-stu-id="8a87b-263">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="8a87b-264">如果是全系統 mutex，則可能表示，應用程式已意外終止 （例如，透過使用 Windows 工作管理員）。</span><span class="sxs-lookup"><span data-stu-id="8a87b-264">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="8a87b-265">例外狀況包含資訊適用於偵錯。</span><span class="sxs-lookup"><span data-stu-id="8a87b-265">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="8a87b-266"><xref:System.Threading.WaitHandle.WaitAll%2A>方法會傳回所有控制代碼會收到信號。</span><span class="sxs-lookup"><span data-stu-id="8a87b-266">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when all the handles are signaled.</span></span> <span data-ttu-id="8a87b-267">在某些實作中，若傳遞了 64 個以上的控制代碼，<xref:System.NotSupportedException>就會擲回。</span><span class="sxs-lookup"><span data-stu-id="8a87b-267">On some implementations, if more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="8a87b-268">如果陣列包含重複的項目，則呼叫會失敗並<xref:System.DuplicateWaitObjectException>。</span><span class="sxs-lookup"><span data-stu-id="8a87b-268">If the array contains duplicates, the call fails with a <xref:System.DuplicateWaitObjectException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8a87b-269"><xref:System.Threading.WaitHandle.WaitAll%2A>擁有的執行緒上不支援方法<xref:System.STAThreadAttribute>。</span><span class="sxs-lookup"><span data-stu-id="8a87b-269">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads that have <xref:System.STAThreadAttribute>.</span></span>  
  
 <span data-ttu-id="8a87b-270">呼叫這個方法多載就相當於呼叫<xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29>方法多載，並指定-1 (或<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>) 的`millisecondsTimeout`並`true`如`exitContext`。</span><span class="sxs-lookup"><span data-stu-id="8a87b-270">Calling this method overload is equivalent to calling the <xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> method overload and specifying -1 (or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>) for `millisecondsTimeout` and `true` for `exitContext`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8a87b-271">下列程式碼範例示範如何使用執行緒集區，以非同步方式建立和寫入檔案群組。</span><span class="sxs-lookup"><span data-stu-id="8a87b-271">The following code example shows how to use the thread pool to asynchronously create and write to a group of files.</span></span> <span data-ttu-id="8a87b-272">完成後，工作項目以及訊號每一個寫入作業已排入佇列。</span><span class="sxs-lookup"><span data-stu-id="8a87b-272">Each write operation is queued as a work item and signals when it is finished.</span></span> <span data-ttu-id="8a87b-273">主執行緒等候發出信號的所有項目，然後結束。</span><span class="sxs-lookup"><span data-stu-id="8a87b-273">The main thread waits for all the items to signal and then exits.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAll1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll1/CPP/source1.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAll1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll1/CS/source1.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAll1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll1/VB/source1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8a87b-274">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-274">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8a87b-275">-or-  One or more of the objects in the <paramref name="waitHandles" /> array are <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-275">-or-  One or more of the objects in the <paramref name="waitHandles" /> array are <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8a87b-276">-or-  <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 2.0 or later.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-276">-or-  <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 2.0 or later.</span>
          </span>
        </exception>
        <exception cref="T:System.DuplicateWaitObjectException">
          <span data-ttu-id="8a87b-277">
            <block subset="none" type="note">
              <para> In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.ArgumentException" />, instead.  </para>
            </block>  The <paramref name="waitHandles" /> array contains elements that are duplicates.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-277">
              <block subset="none" type="note">
                <para> In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.ArgumentException" />, instead.  </para>
              </block>  The <paramref name="waitHandles" /> array contains elements that are duplicates.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="8a87b-278">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-278">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
          <span data-ttu-id="8a87b-279">-or-  The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-279">-or-  The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span>
          </span>
        </exception>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="8a87b-280">
            <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 1.0 or 1.1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-280">
              <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 1.0 or 1.1.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="8a87b-281">The wait terminated because a thread exited without releasing a mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-281">The wait terminated because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="8a87b-282">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-282">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8a87b-283">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-283">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle(), millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.WaitHandle[] * int -&gt; bool" Usage="System.Threading.WaitHandle.WaitAll (waitHandles, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="8a87b-284">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-284">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
          <span data-ttu-id="8a87b-285">This array cannot contain multiple references to the same object (duplicates).</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-285">This array cannot contain multiple references to the same object (duplicates).</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="8a87b-286">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-286">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8a87b-287">Waits for all the elements in the specified array to receive a signal, using an <see cref="T:System.Int32" /> value to specify the time interval.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-287">Waits for all the elements in the specified array to receive a signal, using an <see cref="T:System.Int32" /> value to specify the time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8a87b-288">
            <see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-288">
              <see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a87b-289">如果`millisecondsTimeout`為零，此方法不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="8a87b-289">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="8a87b-290">它會測試等候控制代碼的狀態，並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="8a87b-290">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="8a87b-291"><xref:System.Threading.WaitHandle.WaitAll%2A>方法會傳回在等候終止時，這表示所有控制代碼會收到信號或逾時發生時。</span><span class="sxs-lookup"><span data-stu-id="8a87b-291">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when the wait terminates, which means either when all the handles are signaled or when time-out occurs.</span></span> <span data-ttu-id="8a87b-292">在某些實作中，若傳遞了 64 個以上的控制代碼，<xref:System.NotSupportedException>就會擲回。</span><span class="sxs-lookup"><span data-stu-id="8a87b-292">On some implementations, if more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="8a87b-293">如果陣列中有重複的項目，則呼叫會失敗並<xref:System.DuplicateWaitObjectException>。</span><span class="sxs-lookup"><span data-stu-id="8a87b-293">If there are duplicates in the array, the call fails with a <xref:System.DuplicateWaitObjectException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8a87b-294"><xref:System.Threading.WaitHandle.WaitAll%2A>擁有的執行緒上不支援方法<xref:System.STAThreadAttribute>。</span><span class="sxs-lookup"><span data-stu-id="8a87b-294">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads that have <xref:System.STAThreadAttribute>.</span></span>  
  
 <span data-ttu-id="8a87b-295">呼叫這個方法多載等同於呼叫<xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29>多載，並指定`false`如`exitContext`。</span><span class="sxs-lookup"><span data-stu-id="8a87b-295">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8a87b-296">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-296">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8a87b-297">-or-  One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-297">-or-  One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8a87b-298">-or-  <paramref name="waitHandles" /> is an array with no elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-298">-or-  <paramref name="waitHandles" /> is an array with no elements.</span>
          </span>
        </exception>
        <exception cref="T:System.DuplicateWaitObjectException">
          <span data-ttu-id="8a87b-299">
            <block subset="none" type="note">
              <para> In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.ArgumentException" />, instead.  </para>
            </block>  The <paramref name="waitHandles" /> array contains elements that are duplicates.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-299">
              <block subset="none" type="note">
                <para> In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.ArgumentException" />, instead.  </para>
              </block>  The <paramref name="waitHandles" /> array contains elements that are duplicates.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="8a87b-300">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-300">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
          <span data-ttu-id="8a87b-301">-or-  The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-301">-or-  The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="8a87b-302">
            <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-302">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="8a87b-303">The wait completed because a thread exited without releasing a mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-303">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="8a87b-304">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-304">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8a87b-305">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-305">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle(), timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.WaitHandle[] * TimeSpan -&gt; bool" Usage="System.Threading.WaitHandle.WaitAll (waitHandles, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="8a87b-306">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-306">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
          <span data-ttu-id="8a87b-307">This array cannot contain multiple references to the same object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-307">This array cannot contain multiple references to the same object.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="8a87b-308">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds, to wait indefinitely.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-308">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds, to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8a87b-309">Waits for all the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> value to specify the time interval.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-309">Waits for all the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> value to specify the time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8a87b-310">
            <see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-310">
              <see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a87b-311">如果`timeout`為零，此方法不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="8a87b-311">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="8a87b-312">它會測試等候控制代碼的狀態，並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="8a87b-312">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="8a87b-313"><xref:System.Threading.WaitHandle.WaitAll%2A>方法傳回時則等候會終止，這表示可能是所有控制代碼會收到信號，或發生逾時。</span><span class="sxs-lookup"><span data-stu-id="8a87b-313">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when the wait terminates, which means either all the handles are signaled or a time-out occurs.</span></span> <span data-ttu-id="8a87b-314">在某些實作中，若傳遞了 64 個以上的控制代碼，<xref:System.NotSupportedException>就會擲回。</span><span class="sxs-lookup"><span data-stu-id="8a87b-314">On some implementations, if more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="8a87b-315">如果陣列包含重複的項目，則呼叫會失敗。</span><span class="sxs-lookup"><span data-stu-id="8a87b-315">If the array contains duplicates, the call will fail.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8a87b-316"><xref:System.Threading.WaitHandle.WaitAll%2A>擁有的執行緒上不支援方法<xref:System.STAThreadAttribute>。</span><span class="sxs-lookup"><span data-stu-id="8a87b-316">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads that have <xref:System.STAThreadAttribute>.</span></span>  
  
 <span data-ttu-id="8a87b-317">最大值`timeout`是<xref:System.Int32.MaxValue?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="8a87b-317">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="8a87b-318">呼叫這個方法多載等同於呼叫<xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.TimeSpan%2CSystem.Boolean%29>多載，並指定`false`如`exitContext`。</span><span class="sxs-lookup"><span data-stu-id="8a87b-318">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.TimeSpan%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8a87b-319">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-319">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8a87b-320">-or-  One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-320">-or-  One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8a87b-321">-or-  <paramref name="waitHandles" /> is an array with no elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-321">-or-  <paramref name="waitHandles" /> is an array with no elements.</span>
          </span>
        </exception>
        <exception cref="T:System.DuplicateWaitObjectException">
          <span data-ttu-id="8a87b-322">
            <block subset="none" type="note">
              <para> In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.ArgumentException" />, instead.  </para>
            </block>  The <paramref name="waitHandles" /> array contains elements that are duplicates.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-322">
              <block subset="none" type="note">
                <para> In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.ArgumentException" />, instead.  </para>
              </block>  The <paramref name="waitHandles" /> array contains elements that are duplicates.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="8a87b-323">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-323">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
          <span data-ttu-id="8a87b-324">-or-  The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-324">-or-  The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="8a87b-325">
            <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.  -or-  <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-325">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.  -or-  <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="8a87b-326">The wait terminated because a thread exited without releasing a mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-326">The wait terminated because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="8a87b-327">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-327">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8a87b-328">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-328">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle(), millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.WaitHandle[] * int * bool -&gt; bool" Usage="System.Threading.WaitHandle.WaitAll (waitHandles, millisecondsTimeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="8a87b-329">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-329">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
          <span data-ttu-id="8a87b-330">This array cannot contain multiple references to the same object (duplicates).</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-330">This array cannot contain multiple references to the same object (duplicates).</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="8a87b-331">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-331">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="8a87b-332">
            <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-332">
              <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8a87b-333">Waits for all the elements in the specified array to receive a signal, using an <see cref="T:System.Int32" /> value to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-333">Waits for all the elements in the specified array to receive a signal, using an <see cref="T:System.Int32" /> value to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8a87b-334">
            <see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-334">
              <see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a87b-335">如果`millisecondsTimeout`為零，此方法不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="8a87b-335">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="8a87b-336">它會測試等候控制代碼的狀態，並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="8a87b-336">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="8a87b-337"><xref:System.Threading.AbandonedMutexException> 是.NET Framework 2.0 版中的新功能。</span><span class="sxs-lookup"><span data-stu-id="8a87b-337"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="8a87b-338">在舊版中，<xref:System.Threading.WaitHandle.WaitAll%2A>方法會傳回`true`時放棄的 mutex。</span><span class="sxs-lookup"><span data-stu-id="8a87b-338">In previous versions, the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="8a87b-339">已放棄的 mutex 通常表示嚴重的程式碼錯誤。</span><span class="sxs-lookup"><span data-stu-id="8a87b-339">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="8a87b-340">如果是全系統 mutex，則可能表示，應用程式已意外終止 （例如，透過使用 Windows 工作管理員）。</span><span class="sxs-lookup"><span data-stu-id="8a87b-340">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="8a87b-341">例外狀況包含資訊適用於偵錯。</span><span class="sxs-lookup"><span data-stu-id="8a87b-341">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="8a87b-342"><xref:System.Threading.WaitHandle.WaitAll%2A>方法會傳回在等候終止時，這表示所有控制代碼會收到信號或逾時發生時。</span><span class="sxs-lookup"><span data-stu-id="8a87b-342">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when the wait terminates, which means either when all the handles are signaled or when time-out occurs.</span></span> <span data-ttu-id="8a87b-343">在某些實作中，若傳遞了 64 個以上的控制代碼，<xref:System.NotSupportedException>就會擲回。</span><span class="sxs-lookup"><span data-stu-id="8a87b-343">On some implementations, if more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="8a87b-344">如果陣列中有重複的項目，則呼叫會失敗並<xref:System.DuplicateWaitObjectException>。</span><span class="sxs-lookup"><span data-stu-id="8a87b-344">If there are duplicates in the array, the call fails with a <xref:System.DuplicateWaitObjectException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8a87b-345"><xref:System.Threading.WaitHandle.WaitAll%2A>擁有的執行緒上不支援方法<xref:System.STAThreadAttribute>。</span><span class="sxs-lookup"><span data-stu-id="8a87b-345">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads that have <xref:System.STAThreadAttribute>.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="8a87b-346">在結束內容的資訊</span><span class="sxs-lookup"><span data-stu-id="8a87b-346">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="8a87b-347">`exitContext`參數沒有任何作用，除非<xref:System.Threading.WaitHandle.WaitAll%2A>從非預設受管理的內容中呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="8a87b-347">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitAll%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="8a87b-348">如果您的執行緒是衍生自類別的執行個體的呼叫在此情形<xref:System.ContextBoundObject>。</span><span class="sxs-lookup"><span data-stu-id="8a87b-348">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="8a87b-349">即使您目前正在執行的方法不衍生自的類別上<xref:System.ContextBoundObject>，例如<xref:System.String>，您可以在非預設內容中如果<xref:System.ContextBoundObject>您目前的應用程式定義域中的堆疊上。</span><span class="sxs-lookup"><span data-stu-id="8a87b-349">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="8a87b-350">時的非預設內容中執行您的程式碼，在指定`true`的`exitContext`造成執行緒結束的非預設的 managed 的內容 (也就是轉換成預設內容) 執行之前<xref:System.Threading.WaitHandle.WaitAll%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="8a87b-350">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitAll%2A> method.</span></span> <span data-ttu-id="8a87b-351">執行緒在呼叫之後返回原始的非預設內容<xref:System.Threading.WaitHandle.WaitAll%2A>方法完成。</span><span class="sxs-lookup"><span data-stu-id="8a87b-351">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitAll%2A> method completes.</span></span>  
  
 <span data-ttu-id="8a87b-352">這有助於進行內容繫結類別具有<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>屬性。</span><span class="sxs-lookup"><span data-stu-id="8a87b-352">This can be useful when the context-bound class has the <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> attribute.</span></span> <span data-ttu-id="8a87b-353">在此情況下，所有呼叫類別的成員會自動同步都處理，並同步處理領域是類別程式碼的整個主體。</span><span class="sxs-lookup"><span data-stu-id="8a87b-353">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="8a87b-354">如果成員的呼叫堆疊中的程式碼會呼叫<xref:System.Threading.WaitHandle.WaitAll%2A>方法，並指定`true`如`exitContext`，執行緒結束同步處理網域，讓執行緒上呼叫物件的任何成員，以繼續進行封鎖。</span><span class="sxs-lookup"><span data-stu-id="8a87b-354">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitAll%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="8a87b-355">當<xref:System.Threading.WaitHandle.WaitAll%2A>方法傳回時，進行呼叫的執行緒必須等待重新輸入一次同步處理領域。</span><span class="sxs-lookup"><span data-stu-id="8a87b-355">When the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8a87b-356">下列程式碼範例示範如何使用執行緒集區，以非同步方式建立和寫入檔案群組。</span><span class="sxs-lookup"><span data-stu-id="8a87b-356">The following code example shows how to use the thread pool to asynchronously create and write to a group of files.</span></span> <span data-ttu-id="8a87b-357">完成後，工作項目以及訊號每一個寫入作業已排入佇列。</span><span class="sxs-lookup"><span data-stu-id="8a87b-357">Each write operation is queued as a work item and signals when it is finished.</span></span> <span data-ttu-id="8a87b-358">主執行緒等候發出信號的所有項目，然後結束。</span><span class="sxs-lookup"><span data-stu-id="8a87b-358">The main thread waits for all the items to signal and then exits.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAll2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAll2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll2/CS/source2.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAll2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8a87b-359">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-359">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8a87b-360">-or-  One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-360">-or-  One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8a87b-361">-or-  <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 2.0 or later.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-361">-or-  <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 2.0 or later.</span>
          </span>
        </exception>
        <exception cref="T:System.DuplicateWaitObjectException">
          <span data-ttu-id="8a87b-362">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-362">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="8a87b-363">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-363">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
          <span data-ttu-id="8a87b-364">-or-  The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-364">-or-  The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span>
          </span>
        </exception>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="8a87b-365">
            <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 1.0 or 1.1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-365">
              <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 1.0 or 1.1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="8a87b-366">
            <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-366">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="8a87b-367">The wait completed because a thread exited without releasing a mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-367">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="8a87b-368">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-368">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8a87b-369">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-369">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle(), timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.WaitHandle[] * TimeSpan * bool -&gt; bool" Usage="System.Threading.WaitHandle.WaitAll (waitHandles, timeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="8a87b-370">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-370">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
          <span data-ttu-id="8a87b-371">This array cannot contain multiple references to the same object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-371">This array cannot contain multiple references to the same object.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="8a87b-372">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds, to wait indefinitely.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-372">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds, to wait indefinitely.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="8a87b-373">
            <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-373">
              <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8a87b-374">Waits for all the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> value to specify the time interval, and specifying whether to exit the synchronization domain before the wait.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-374">Waits for all the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> value to specify the time interval, and specifying whether to exit the synchronization domain before the wait.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8a87b-375">
            <see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-375">
              <see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a87b-376">如果`timeout`為零，此方法不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="8a87b-376">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="8a87b-377">它會測試等候控制代碼的狀態，並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="8a87b-377">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="8a87b-378"><xref:System.Threading.AbandonedMutexException> 是.NET Framework 2.0 版中的新功能。</span><span class="sxs-lookup"><span data-stu-id="8a87b-378"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="8a87b-379">在舊版中，<xref:System.Threading.WaitHandle.WaitAll%2A>方法會傳回`true`時放棄的 mutex。</span><span class="sxs-lookup"><span data-stu-id="8a87b-379">In previous versions, the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="8a87b-380">已放棄的 mutex 通常表示嚴重的程式碼錯誤。</span><span class="sxs-lookup"><span data-stu-id="8a87b-380">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="8a87b-381">如果是全系統 mutex，則可能表示，應用程式已意外終止 （例如，透過使用 Windows 工作管理員）。</span><span class="sxs-lookup"><span data-stu-id="8a87b-381">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="8a87b-382">例外狀況包含資訊適用於偵錯。</span><span class="sxs-lookup"><span data-stu-id="8a87b-382">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="8a87b-383"><xref:System.Threading.WaitHandle.WaitAll%2A>方法傳回時則等候會終止，這表示可能是所有控制代碼會收到信號，或發生逾時。</span><span class="sxs-lookup"><span data-stu-id="8a87b-383">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when the wait terminates, which means either all the handles are signaled or a time-out occurs.</span></span> <span data-ttu-id="8a87b-384">在某些實作中，若傳遞了 64 個以上的控制代碼，<xref:System.NotSupportedException>就會擲回。</span><span class="sxs-lookup"><span data-stu-id="8a87b-384">On some implementations, if more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="8a87b-385">如果陣列包含重複的項目，則呼叫會失敗。</span><span class="sxs-lookup"><span data-stu-id="8a87b-385">If the array contains duplicates, the call will fail.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8a87b-386"><xref:System.Threading.WaitHandle.WaitAll%2A>擁有的執行緒上不支援方法<xref:System.STAThreadAttribute>。</span><span class="sxs-lookup"><span data-stu-id="8a87b-386">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads that have <xref:System.STAThreadAttribute>.</span></span>  
  
 <span data-ttu-id="8a87b-387">最大值`timeout`是<xref:System.Int32.MaxValue?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="8a87b-387">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="8a87b-388">在結束內容的資訊</span><span class="sxs-lookup"><span data-stu-id="8a87b-388">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="8a87b-389">`exitContext`參數沒有任何作用，除非<xref:System.Threading.WaitHandle.WaitAll%2A>從非預設受管理的內容中呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="8a87b-389">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitAll%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="8a87b-390">如果您的執行緒是衍生自類別的執行個體的呼叫在此情形<xref:System.ContextBoundObject>。</span><span class="sxs-lookup"><span data-stu-id="8a87b-390">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="8a87b-391">即使您目前正在執行的方法不衍生自的類別上<xref:System.ContextBoundObject>，例如<xref:System.String>，您可以在非預設內容中如果<xref:System.ContextBoundObject>您目前的應用程式定義域中的堆疊上。</span><span class="sxs-lookup"><span data-stu-id="8a87b-391">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="8a87b-392">時的非預設內容中執行您的程式碼，在指定`true`的`exitContext`造成執行緒結束的非預設的 managed 的內容 (也就是轉換成預設內容) 執行之前<xref:System.Threading.WaitHandle.WaitAll%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="8a87b-392">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitAll%2A> method.</span></span> <span data-ttu-id="8a87b-393">它會傳回呼叫之後為原始的非預設內容<xref:System.Threading.WaitHandle.WaitAll%2A>方法完成。</span><span class="sxs-lookup"><span data-stu-id="8a87b-393">It returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitAll%2A> method completes.</span></span>  
  
 <span data-ttu-id="8a87b-394">這有助於進行內容繫結類別具有<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>。</span><span class="sxs-lookup"><span data-stu-id="8a87b-394">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="8a87b-395">在此情況下，所有呼叫類別的成員會自動同步都處理，並同步處理領域是類別程式碼的整個主體。</span><span class="sxs-lookup"><span data-stu-id="8a87b-395">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="8a87b-396">如果成員的呼叫堆疊中的程式碼會呼叫<xref:System.Threading.WaitHandle.WaitAll%2A>方法，並指定`true`如`exitContext`，執行緒結束同步處理網域，讓執行緒上呼叫物件的任何成員，以繼續進行封鎖。</span><span class="sxs-lookup"><span data-stu-id="8a87b-396">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitAll%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="8a87b-397">當<xref:System.Threading.WaitHandle.WaitAll%2A>方法傳回時，進行呼叫的執行緒必須等待重新輸入一次同步處理領域。</span><span class="sxs-lookup"><span data-stu-id="8a87b-397">When the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8a87b-398">下列程式碼範例示範如何使用執行緒集區，以非同步方式建立和寫入檔案群組。</span><span class="sxs-lookup"><span data-stu-id="8a87b-398">The following code example shows how to use the thread pool to asynchronously create and write to a group of files.</span></span> <span data-ttu-id="8a87b-399">完成後，工作項目以及訊號每一個寫入作業已排入佇列。</span><span class="sxs-lookup"><span data-stu-id="8a87b-399">Each write operation is queued as a work item and signals when it is finished.</span></span> <span data-ttu-id="8a87b-400">主執行緒等候發出信號的所有項目，然後結束。</span><span class="sxs-lookup"><span data-stu-id="8a87b-400">The main thread waits for all the items to signal and then exits.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAll3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll3/CPP/source3.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAll3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll3/CS/source3.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAll3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll3/VB/source3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8a87b-401">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-401">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8a87b-402">-or-  One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-402">-or-  One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8a87b-403">-or-  <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 2.0 or later.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-403">-or-  <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 2.0 or later.</span>
          </span>
        </exception>
        <exception cref="T:System.DuplicateWaitObjectException">
          <span data-ttu-id="8a87b-404">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-404">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="8a87b-405">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-405">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
          <span data-ttu-id="8a87b-406">-or-  The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-406">-or-  The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span>
          </span>
        </exception>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="8a87b-407">
            <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 1.0 or 1.1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-407">
              <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 1.0 or 1.1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="8a87b-408">
            <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.  -or-  <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-408">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.  -or-  <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="8a87b-409">The wait terminated because a thread exited without releasing a mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-409">The wait terminated because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="8a87b-410">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-410">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8a87b-411">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-411">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitAny">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8a87b-412">Waits for any of the elements in the specified array to receive a signal.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-412">Waits for any of the elements in the specified array to receive a signal.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.WaitHandle[] -&gt; int" Usage="System.Threading.WaitHandle.WaitAny waitHandles" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="8a87b-413">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-413">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8a87b-414">Waits for any of the elements in the specified array to receive a signal.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-414">Waits for any of the elements in the specified array to receive a signal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8a87b-415">The array index of the object that satisfied the wait.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-415">The array index of the object that satisfied the wait.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a87b-416"><xref:System.Threading.AbandonedMutexException> 是.NET Framework 2.0 版中的新功能。</span><span class="sxs-lookup"><span data-stu-id="8a87b-416"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="8a87b-417">在舊版中，<xref:System.Threading.WaitHandle.WaitAny%2A>方法會傳回`true`如果等候完成，因為已放棄 mutex。</span><span class="sxs-lookup"><span data-stu-id="8a87b-417">In previous versions, the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns `true` if the wait completes because a mutex is abandoned.</span></span> <span data-ttu-id="8a87b-418">已放棄的 mutex 通常表示嚴重的程式碼錯誤。</span><span class="sxs-lookup"><span data-stu-id="8a87b-418">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="8a87b-419">如果是全系統 mutex，則可能表示，應用程式已意外終止 （例如，透過使用 Windows 工作管理員）。</span><span class="sxs-lookup"><span data-stu-id="8a87b-419">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="8a87b-420">例外狀況包含資訊適用於偵錯。</span><span class="sxs-lookup"><span data-stu-id="8a87b-420">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="8a87b-421"><xref:System.Threading.WaitHandle.WaitAny%2A>方法會擲回<xref:System.Threading.AbandonedMutexException>只等待完成時因為遭到放棄的 mutex。</span><span class="sxs-lookup"><span data-stu-id="8a87b-421">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="8a87b-422">如果`waitHandles`包含具有較低的索引編號，已放棄的 mutex，比釋放的 mutex<xref:System.Threading.WaitHandle.WaitAny%2A>方法正常完成，並不會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="8a87b-422">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8a87b-423">在版本早於 2.0 版中，如果執行緒結束或中止而不需要明確地釋放的.NET framework <xref:System.Threading.Mutex>，且`Mutex`位於索引 0 （零），在`WaitAny`陣列在另一個執行緒，所傳回的索引上`WaitAny`是128 而不是 0。</span><span class="sxs-lookup"><span data-stu-id="8a87b-423">In versions of the .NET Framework earlier than version 2.0, if a thread exits or aborts without explicitly releasing a <xref:System.Threading.Mutex>, and that `Mutex` is at index 0 (zero) in a `WaitAny` array on another thread, the index returned by `WaitAny` is 128 instead of 0.</span></span>  
  
 <span data-ttu-id="8a87b-424">這個方法會傳回任何控制代碼會收到信號。</span><span class="sxs-lookup"><span data-stu-id="8a87b-424">This method returns when any handle is signaled.</span></span> <span data-ttu-id="8a87b-425">如果在呼叫期間，多個物件會變成收到訊號，則傳回的值會是物件的已收到訊號具有已收到訊號的所有物件的最小的索引值的陣列索引。</span><span class="sxs-lookup"><span data-stu-id="8a87b-425">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span> <span data-ttu-id="8a87b-426">在某些實作中，如果有多個傳遞 64 的控制代碼，<xref:System.NotSupportedException>就會擲回。</span><span class="sxs-lookup"><span data-stu-id="8a87b-426">On some implementations, if more that 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span>  
  
 <span data-ttu-id="8a87b-427">呼叫這個方法多載就相當於呼叫<xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29>方法多載，並指定-1 (或<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>) 的`millisecondsTimeout`並`true`如`exitContext`。</span><span class="sxs-lookup"><span data-stu-id="8a87b-427">Calling this method overload is equivalent to calling the <xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> method overload and specifying -1 (or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>) for `millisecondsTimeout` and `true` for `exitContext`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8a87b-428">下列程式碼範例示範如何呼叫<xref:System.Threading.WaitHandle.WaitAny%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="8a87b-428">The following code example demonstrates calling the <xref:System.Threading.WaitHandle.WaitAny%2A> method.</span></span>  
  
 [!code-cpp[WaitHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/WaitHandle/cpp/WaitHandle.cpp#1)]
 [!code-csharp[WaitHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/WaitHandle/CS/WaitHandle.cs#1)]
 [!code-vb[WaitHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/WaitHandle/VB/WaitHandle.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8a87b-429">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-429">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8a87b-430">-or-  One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-430">-or-  One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="8a87b-431">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-431">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
        </exception>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="8a87b-432">
            <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 1.0 or 1.1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-432">
              <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 1.0 or 1.1.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="8a87b-433">The wait completed because a thread exited without releasing a mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-433">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="8a87b-434">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-434">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8a87b-435">
            <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 2.0 or later.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-435">
              <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 2.0 or later.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8a87b-436">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-436">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle(), millisecondsTimeout As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.WaitHandle[] * int -&gt; int" Usage="System.Threading.WaitHandle.WaitAny (waitHandles, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="8a87b-437">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-437">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="8a87b-438">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-438">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8a87b-439">Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed integer to specify the time interval.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-439">Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed integer to specify the time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8a87b-440">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="millisecondsTimeout" /> has passed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-440">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="millisecondsTimeout" /> has passed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a87b-441">如果`millisecondsTimeout`為零，此方法不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="8a87b-441">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="8a87b-442">它會測試等候控制代碼的狀態，並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="8a87b-442">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="8a87b-443"><xref:System.Threading.WaitHandle.WaitAny%2A>方法會擲回<xref:System.Threading.AbandonedMutexException>只等待完成時因為遭到放棄的 mutex。</span><span class="sxs-lookup"><span data-stu-id="8a87b-443">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="8a87b-444">如果`waitHandles`包含具有較低的索引編號，已放棄的 mutex，比釋放的 mutex<xref:System.Threading.WaitHandle.WaitAny%2A>方法正常完成，並不會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="8a87b-444">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
 <span data-ttu-id="8a87b-445">這個方法傳回時則等候會終止，任何控制代碼會收到信號或發生逾時。</span><span class="sxs-lookup"><span data-stu-id="8a87b-445">This method returns when the wait terminates, either when any of the handles are signaled or when a timeout occurs.</span></span> <span data-ttu-id="8a87b-446">如果在呼叫期間，多個物件會變成收到訊號，則傳回的值會是物件的已收到訊號具有已收到訊號的所有物件的最小的索引值的陣列索引。</span><span class="sxs-lookup"><span data-stu-id="8a87b-446">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span> <span data-ttu-id="8a87b-447">在某些實作中，如果有多個傳遞 64 的控制代碼，<xref:System.NotSupportedException>就會擲回。</span><span class="sxs-lookup"><span data-stu-id="8a87b-447">On some implementations, if more that 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span>  
  
 <span data-ttu-id="8a87b-448">呼叫這個方法多載等同於呼叫<xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29>多載，並指定`false`如`exitContext`。</span><span class="sxs-lookup"><span data-stu-id="8a87b-448">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8a87b-449">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-449">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8a87b-450">-or-  One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-450">-or-  One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="8a87b-451">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-451">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="8a87b-452">
            <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-452">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="8a87b-453">The wait completed because a thread exited without releasing a mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-453">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="8a87b-454">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-454">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8a87b-455">
            <paramref name="waitHandles" /> is an array with no elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-455">
              <paramref name="waitHandles" /> is an array with no elements.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8a87b-456">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-456">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle(), timeout As TimeSpan) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.WaitHandle[] * TimeSpan -&gt; int" Usage="System.Threading.WaitHandle.WaitAny (waitHandles, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="8a87b-457">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-457">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="8a87b-458">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-458">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8a87b-459">Waits for any of the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-459">Waits for any of the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8a87b-460">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="timeout" /> has passed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-460">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="timeout" /> has passed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a87b-461">如果`timeout`為零，此方法不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="8a87b-461">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="8a87b-462">它會測試等候控制代碼的狀態，並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="8a87b-462">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="8a87b-463"><xref:System.Threading.WaitHandle.WaitAny%2A>方法會擲回<xref:System.Threading.AbandonedMutexException>只等待完成時因為遭到放棄的 mutex。</span><span class="sxs-lookup"><span data-stu-id="8a87b-463">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="8a87b-464">如果`waitHandles`包含具有較低的索引編號，已放棄的 mutex，比釋放的 mutex<xref:System.Threading.WaitHandle.WaitAny%2A>方法正常完成，並不會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="8a87b-464">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
 <span data-ttu-id="8a87b-465">這個方法傳回時則等候會終止，任何控制代碼會收到信號或逾時發生時。</span><span class="sxs-lookup"><span data-stu-id="8a87b-465">This method returns when the wait terminates, either when any of the handles are signaled or when a time-out occurs.</span></span> <span data-ttu-id="8a87b-466">如果在呼叫期間，多個物件會變成收到訊號，則傳回的值會是物件的已收到訊號具有已收到訊號的所有物件的最小的索引值的陣列索引。</span><span class="sxs-lookup"><span data-stu-id="8a87b-466">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span> <span data-ttu-id="8a87b-467">在某些實作中，如果有多個傳遞 64 的控制代碼，<xref:System.NotSupportedException>就會擲回。</span><span class="sxs-lookup"><span data-stu-id="8a87b-467">On some implementations, if more that 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span>  
  
 <span data-ttu-id="8a87b-468">最大值`timeout`是<xref:System.Int32.MaxValue?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="8a87b-468">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="8a87b-469">呼叫這個方法多載等同於呼叫<xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.TimeSpan%2CSystem.Boolean%29>多載，並指定`false`如`exitContext`。</span><span class="sxs-lookup"><span data-stu-id="8a87b-469">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.TimeSpan%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8a87b-470">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-470">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8a87b-471">-or-  One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-471">-or-  One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="8a87b-472">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-472">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="8a87b-473">
            <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.  -or-  <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-473">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.  -or-  <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="8a87b-474">The wait completed because a thread exited without releasing a mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-474">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="8a87b-475">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-475">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8a87b-476">
            <paramref name="waitHandles" /> is an array with no elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-476">
              <paramref name="waitHandles" /> is an array with no elements.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8a87b-477">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-477">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle(), millisecondsTimeout As Integer, exitContext As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.WaitHandle[] * int * bool -&gt; int" Usage="System.Threading.WaitHandle.WaitAny (waitHandles, millisecondsTimeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="8a87b-478">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-478">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="8a87b-479">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-479">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="8a87b-480">
            <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-480">
              <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8a87b-481">Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed integer to specify the time interval, and specifying whether to exit the synchronization domain before the wait.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-481">Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed integer to specify the time interval, and specifying whether to exit the synchronization domain before the wait.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8a87b-482">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="millisecondsTimeout" /> has passed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-482">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="millisecondsTimeout" /> has passed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a87b-483">如果`millisecondsTimeout`為零，此方法不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="8a87b-483">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="8a87b-484">它會測試等候控制代碼的狀態，並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="8a87b-484">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="8a87b-485"><xref:System.Threading.AbandonedMutexException> 是.NET Framework 2.0 版中的新功能。</span><span class="sxs-lookup"><span data-stu-id="8a87b-485"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="8a87b-486">在舊版中，<xref:System.Threading.WaitHandle.WaitAny%2A>方法會傳回`true`如果等候完成，因為已放棄 mutex。</span><span class="sxs-lookup"><span data-stu-id="8a87b-486">In previous versions, the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns `true` if the wait completes because a mutex is abandoned.</span></span> <span data-ttu-id="8a87b-487">已放棄的 mutex 通常表示嚴重的程式碼錯誤。</span><span class="sxs-lookup"><span data-stu-id="8a87b-487">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="8a87b-488">如果是全系統 mutex，則可能表示，應用程式已意外終止 （例如，透過使用 Windows 工作管理員）。</span><span class="sxs-lookup"><span data-stu-id="8a87b-488">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="8a87b-489">例外狀況包含資訊適用於偵錯。</span><span class="sxs-lookup"><span data-stu-id="8a87b-489">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="8a87b-490"><xref:System.Threading.WaitHandle.WaitAny%2A>方法會擲回<xref:System.Threading.AbandonedMutexException>只等待完成時因為遭到放棄的 mutex。</span><span class="sxs-lookup"><span data-stu-id="8a87b-490">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="8a87b-491">如果`waitHandles`包含具有較低的索引編號，已放棄的 mutex，比釋放的 mutex<xref:System.Threading.WaitHandle.WaitAny%2A>方法正常完成，並不會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="8a87b-491">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8a87b-492">在版本早於 2.0 版中，如果執行緒結束或中止而不需要明確地釋放的.NET framework <xref:System.Threading.Mutex>，且`Mutex`位於索引 0 （零），在`WaitAny`陣列在另一個執行緒，所傳回的索引上`WaitAny`是128 而不是 0。</span><span class="sxs-lookup"><span data-stu-id="8a87b-492">In versions of the .NET Framework earlier than version 2.0, if a thread exits or aborts without explicitly releasing a <xref:System.Threading.Mutex>, and that `Mutex` is at index 0 (zero) in a `WaitAny` array on another thread, the index returned by `WaitAny` is 128 instead of 0.</span></span>  
  
 <span data-ttu-id="8a87b-493">這個方法傳回時則等候會終止，任何控制代碼會收到信號或發生逾時。</span><span class="sxs-lookup"><span data-stu-id="8a87b-493">This method returns when the wait terminates, either when any of the handles are signaled or when a timeout occurs.</span></span> <span data-ttu-id="8a87b-494">如果在呼叫期間，多個物件會變成收到訊號，則傳回的值會是物件的已收到訊號具有已收到訊號的所有物件的最小的索引值的陣列索引。</span><span class="sxs-lookup"><span data-stu-id="8a87b-494">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span> <span data-ttu-id="8a87b-495">在某些實作中，如果有多個傳遞 64 的控制代碼，<xref:System.NotSupportedException>就會擲回。</span><span class="sxs-lookup"><span data-stu-id="8a87b-495">On some implementations, if more that 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="8a87b-496">在結束內容的資訊</span><span class="sxs-lookup"><span data-stu-id="8a87b-496">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="8a87b-497">`exitContext`參數沒有任何作用，除非<xref:System.Threading.WaitHandle.WaitAny%2A>從非預設受管理的內容中呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="8a87b-497">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitAny%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="8a87b-498">如果您的執行緒是衍生自類別的執行個體的呼叫在此情形<xref:System.ContextBoundObject>。</span><span class="sxs-lookup"><span data-stu-id="8a87b-498">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="8a87b-499">即使您目前正在執行的方法不是衍生自的類別上<xref:System.ContextBoundObject>，例如<xref:System.String>，您可以在非預設內容中如果<xref:System.ContextBoundObject>您目前的應用程式定義域中的堆疊上。</span><span class="sxs-lookup"><span data-stu-id="8a87b-499">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="8a87b-500">時的非預設內容中執行您的程式碼，在指定`true`的`exitContext`造成執行緒結束的非預設的 managed 的內容 (也就是轉換成預設內容) 執行之前<xref:System.Threading.WaitHandle.WaitAny%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="8a87b-500">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitAny%2A> method.</span></span> <span data-ttu-id="8a87b-501">執行緒在呼叫之後返回原始的非預設內容<xref:System.Threading.WaitHandle.WaitAny%2A>方法完成。</span><span class="sxs-lookup"><span data-stu-id="8a87b-501">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes.</span></span>  
  
 <span data-ttu-id="8a87b-502">這有助於進行內容繫結類別具有<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>。</span><span class="sxs-lookup"><span data-stu-id="8a87b-502">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="8a87b-503">在此情況下，所有呼叫類別的成員會自動同步都處理，並同步處理領域是類別程式碼的整個主體。</span><span class="sxs-lookup"><span data-stu-id="8a87b-503">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="8a87b-504">如果成員的呼叫堆疊中的程式碼會呼叫<xref:System.Threading.WaitHandle.WaitAny%2A>方法，並指定`true`如`exitContext`，執行緒結束同步處理網域，讓執行緒上呼叫物件的任何成員，以繼續進行封鎖。</span><span class="sxs-lookup"><span data-stu-id="8a87b-504">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitAny%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="8a87b-505">當<xref:System.Threading.WaitHandle.WaitAny%2A>方法傳回時，進行呼叫的執行緒必須等待重新輸入一次同步處理領域。</span><span class="sxs-lookup"><span data-stu-id="8a87b-505">When the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8a87b-506">下列程式碼範例示範如何使用執行緒集區同時搜尋多個磁碟上的檔案。</span><span class="sxs-lookup"><span data-stu-id="8a87b-506">The following code example demonstrates how to use the thread pool to simultaneously search for a file on multiple disks.</span></span> <span data-ttu-id="8a87b-507">如需空間考量，會搜尋只有每個磁碟的根目錄。</span><span class="sxs-lookup"><span data-stu-id="8a87b-507">For space considerations, only the root directory of each disk is searched.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/CS/source2.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8a87b-508">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-508">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8a87b-509">-or-  One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-509">-or-  One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="8a87b-510">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-510">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
        </exception>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="8a87b-511">
            <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 1.0 or 1.1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-511">
              <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 1.0 or 1.1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="8a87b-512">
            <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-512">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="8a87b-513">The wait completed because a thread exited without releasing a mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-513">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="8a87b-514">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-514">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8a87b-515">
            <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 2.0 or later.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-515">
              <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 2.0 or later.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8a87b-516">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-516">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle(), timeout As TimeSpan, exitContext As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.WaitHandle[] * TimeSpan * bool -&gt; int" Usage="System.Threading.WaitHandle.WaitAny (waitHandles, timeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="8a87b-517">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-517">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="8a87b-518">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-518">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="8a87b-519">
            <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-519">
              <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8a87b-520">Waits for any of the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-520">Waits for any of the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8a87b-521">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="timeout" /> has passed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-521">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="timeout" /> has passed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a87b-522">如果`timeout`為零，此方法不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="8a87b-522">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="8a87b-523">它會測試等候控制代碼的狀態，並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="8a87b-523">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="8a87b-524"><xref:System.Threading.AbandonedMutexException> 是.NET Framework 2.0 版中的新功能。</span><span class="sxs-lookup"><span data-stu-id="8a87b-524"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="8a87b-525">在舊版中，<xref:System.Threading.WaitHandle.WaitAny%2A>方法會傳回`true`如果等候完成，因為已放棄 mutex。</span><span class="sxs-lookup"><span data-stu-id="8a87b-525">In previous versions, the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns `true` if the wait completes because a mutex is abandoned.</span></span> <span data-ttu-id="8a87b-526">已放棄的 mutex 通常表示嚴重的程式碼錯誤。</span><span class="sxs-lookup"><span data-stu-id="8a87b-526">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="8a87b-527">如果是全系統 mutex，則可能表示，應用程式已意外終止 （例如，透過使用 Windows 工作管理員）。</span><span class="sxs-lookup"><span data-stu-id="8a87b-527">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="8a87b-528">例外狀況包含資訊適用於偵錯。</span><span class="sxs-lookup"><span data-stu-id="8a87b-528">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="8a87b-529"><xref:System.Threading.WaitHandle.WaitAny%2A>方法會擲回<xref:System.Threading.AbandonedMutexException>只等待完成時因為遭到放棄的 mutex。</span><span class="sxs-lookup"><span data-stu-id="8a87b-529">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="8a87b-530">如果`waitHandles`包含具有較低的索引編號，已放棄的 mutex，比釋放的 mutex<xref:System.Threading.WaitHandle.WaitAny%2A>方法正常完成，並不會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="8a87b-530">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8a87b-531">在版本早於 2.0 版中，如果執行緒結束或中止而不需要明確地釋放的.NET framework <xref:System.Threading.Mutex>，且`Mutex`位於索引 0 （零），在`WaitAny`陣列在另一個執行緒，所傳回的索引上`WaitAny`是128 而不是 0。</span><span class="sxs-lookup"><span data-stu-id="8a87b-531">In versions of the .NET Framework earlier than version 2.0, if a thread exits or aborts without explicitly releasing a <xref:System.Threading.Mutex>, and that `Mutex` is at index 0 (zero) in a `WaitAny` array on another thread, the index returned by `WaitAny` is 128 instead of 0.</span></span>  
  
 <span data-ttu-id="8a87b-532">這個方法傳回時則等候會終止，任何控制代碼會收到信號或逾時發生時。</span><span class="sxs-lookup"><span data-stu-id="8a87b-532">This method returns when the wait terminates, either when any of the handles are signaled or when a time-out occurs.</span></span> <span data-ttu-id="8a87b-533">如果在呼叫期間，多個物件會變成收到訊號，則傳回的值會是物件的已收到訊號具有已收到訊號的所有物件的最小的索引值的陣列索引。</span><span class="sxs-lookup"><span data-stu-id="8a87b-533">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span> <span data-ttu-id="8a87b-534">在某些實作中，如果有多個傳遞 64 的控制代碼，<xref:System.NotSupportedException>就會擲回。</span><span class="sxs-lookup"><span data-stu-id="8a87b-534">On some implementations, if more that 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span>  
  
 <span data-ttu-id="8a87b-535">最大值`timeout`是<xref:System.Int32.MaxValue?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="8a87b-535">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="8a87b-536">在結束內容的資訊</span><span class="sxs-lookup"><span data-stu-id="8a87b-536">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="8a87b-537">`exitContext`參數沒有任何作用，除非<xref:System.Threading.WaitHandle.WaitAny%2A>從非預設受管理的內容中呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="8a87b-537">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitAny%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="8a87b-538">如果您的執行緒是衍生自類別的執行個體的呼叫在此情形<xref:System.ContextBoundObject>。</span><span class="sxs-lookup"><span data-stu-id="8a87b-538">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="8a87b-539">即使您目前正在執行的方法不是衍生自的類別上<xref:System.ContextBoundObject>，例如<xref:System.String>，您可以在非預設內容中如果<xref:System.ContextBoundObject>您目前的應用程式定義域中的堆疊上。</span><span class="sxs-lookup"><span data-stu-id="8a87b-539">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="8a87b-540">時的非預設內容中執行您的程式碼，在指定`true`的`exitContext`造成執行緒結束的非預設的 managed 的內容 (也就是轉換成預設內容) 執行之前<xref:System.Threading.WaitHandle.WaitAny%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="8a87b-540">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitAny%2A> method.</span></span> <span data-ttu-id="8a87b-541">執行緒在呼叫之後返回原始的非預設內容<xref:System.Threading.WaitHandle.WaitAny%2A>方法完成。</span><span class="sxs-lookup"><span data-stu-id="8a87b-541">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes.</span></span>  
  
 <span data-ttu-id="8a87b-542">這有助於進行內容繫結類別具有<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>。</span><span class="sxs-lookup"><span data-stu-id="8a87b-542">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="8a87b-543">在此情況下，所有呼叫類別的成員會自動同步都處理，並同步處理領域是類別程式碼的整個主體。</span><span class="sxs-lookup"><span data-stu-id="8a87b-543">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="8a87b-544">如果成員的呼叫堆疊中的程式碼會呼叫<xref:System.Threading.WaitHandle.WaitAny%2A>方法，並指定`true`如`exitContext`，執行緒結束同步處理網域，讓執行緒上呼叫物件的任何成員，以繼續進行封鎖。</span><span class="sxs-lookup"><span data-stu-id="8a87b-544">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitAny%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="8a87b-545">當<xref:System.Threading.WaitHandle.WaitAny%2A>方法傳回時，進行呼叫的執行緒必須等待重新輸入一次同步處理領域。</span><span class="sxs-lookup"><span data-stu-id="8a87b-545">When the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8a87b-546">下列程式碼範例示範如何使用執行緒集區同時搜尋多個磁碟上的檔案。</span><span class="sxs-lookup"><span data-stu-id="8a87b-546">The following code example demonstrates how to use the thread pool to simultaneously search for a file on multiple disks.</span></span> <span data-ttu-id="8a87b-547">如需空間考量，會搜尋只有每個磁碟的根目錄。</span><span class="sxs-lookup"><span data-stu-id="8a87b-547">For space considerations, only the root directory of each disk is searched.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAny3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny3/CPP/source3.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAny3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny3/CS/source3.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAny3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny3/VB/source3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8a87b-548">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-548">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8a87b-549">-or-  One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-549">-or-  One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="8a87b-550">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-550">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
        </exception>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="8a87b-551">
            <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 1.0 or 1.1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-551">
              <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 1.0 or 1.1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="8a87b-552">
            <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.  -or-  <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-552">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.  -or-  <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="8a87b-553">The wait completed because a thread exited without releasing a mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-553">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="8a87b-554">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-554">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8a87b-555">
            <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 2.0 or later.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-555">
              <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 2.0 or later.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8a87b-556">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-556">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitOne">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8a87b-557">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-557">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne();" />
      <MemberSignature Language="F#" Value="abstract member WaitOne : unit -&gt; bool&#xA;override this.WaitOne : unit -&gt; bool" Usage="waitHandle.WaitOne " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8a87b-558">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-558">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8a87b-559">
            <see langword="true" /> if the current instance receives a signal.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-559">
              <see langword="true" /> if the current instance receives a signal.</span>
          </span>
          <span data-ttu-id="8a87b-560">If the current instance is never signaled, <see cref="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)" /> never returns.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-560">If the current instance is never signaled, <see cref="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)" /> never returns.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a87b-561"><xref:System.Threading.AbandonedMutexException> 是.NET Framework 2.0 版中的新功能。</span><span class="sxs-lookup"><span data-stu-id="8a87b-561"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="8a87b-562">在舊版中，<xref:System.Threading.WaitHandle.WaitOne%2A>方法會傳回`true`時放棄的 mutex。</span><span class="sxs-lookup"><span data-stu-id="8a87b-562">In previous versions, the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="8a87b-563">已放棄的 mutex 通常表示嚴重的程式碼錯誤。</span><span class="sxs-lookup"><span data-stu-id="8a87b-563">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="8a87b-564">如果是全系統 mutex，則可能表示，應用程式已意外終止 （例如，透過使用 Windows 工作管理員）。</span><span class="sxs-lookup"><span data-stu-id="8a87b-564">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="8a87b-565">例外狀況包含資訊適用於偵錯。</span><span class="sxs-lookup"><span data-stu-id="8a87b-565">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="8a87b-566">這個方法會封鎖目前的執行個體之前，無限期的呼叫端會收到信號。</span><span class="sxs-lookup"><span data-stu-id="8a87b-566">The caller of this method blocks indefinitely until the current instance receives a signal.</span></span> <span data-ttu-id="8a87b-567">使用這個方法來封鎖直到<xref:System.Threading.WaitHandle>從另一個執行緒收到訊號，例如便會產生非同步作業完成時。</span><span class="sxs-lookup"><span data-stu-id="8a87b-567">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="8a87b-568">如需詳細資訊，請參閱<xref:System.IAsyncResult>介面。</span><span class="sxs-lookup"><span data-stu-id="8a87b-568">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="8a87b-569">呼叫這個方法多載就相當於呼叫<xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29>方法多載，並指定-1 或是<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>第一個參數和`false`第二個參數。</span><span class="sxs-lookup"><span data-stu-id="8a87b-569">Calling this method overload is equivalent to calling the <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29> method overload and specifying -1 or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> for the first parameter and `false` for the second parameter.</span></span>  
  
 <span data-ttu-id="8a87b-570">覆寫這個方法以自訂在衍生類別的行為。</span><span class="sxs-lookup"><span data-stu-id="8a87b-570">Override this method to customize the behavior of derived classes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8a87b-571">下列程式碼範例示範如何使用等候控制代碼，以防止處理程序結束時等候背景執行緒完成執行。</span><span class="sxs-lookup"><span data-stu-id="8a87b-571">The following code example shows how to use a wait handle to keep a process from terminating while it waits for a background thread to finish executing.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitOne1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne1/CPP/source1.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitOne1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne1/CS/source1.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitOne1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne1/VB/source1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="8a87b-572">The current instance has already been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-572">The current instance has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="8a87b-573">The wait completed because a thread exited without releasing a mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-573">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="8a87b-574">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-574">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8a87b-575">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-575">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="abstract member WaitOne : int -&gt; bool&#xA;override this.WaitOne : int -&gt; bool" Usage="waitHandle.WaitOne millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="8a87b-576">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-576">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8a87b-577">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal, using a 32-bit signed integer to specify the time interval in milliseconds.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-577">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal, using a 32-bit signed integer to specify the time interval in milliseconds.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8a87b-578">
            <see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-578">
              <see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a87b-579">如果`millisecondsTimeout`為零，此方法不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="8a87b-579">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="8a87b-580">它會測試等候控制代碼的狀態，並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="8a87b-580">It tests the state of the wait handle and returns immediately.</span></span>  
  
 <span data-ttu-id="8a87b-581">這個方法會封鎖，直到目前的執行個體收到信號或逾時的呼叫端就會發生。</span><span class="sxs-lookup"><span data-stu-id="8a87b-581">The caller of this method blocks until the current instance receives a signal or a time-out occurs.</span></span> <span data-ttu-id="8a87b-582">使用這個方法來封鎖直到<xref:System.Threading.WaitHandle>從另一個執行緒收到訊號，例如便會產生非同步作業完成時。</span><span class="sxs-lookup"><span data-stu-id="8a87b-582">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="8a87b-583">如需詳細資訊，請參閱<xref:System.IAsyncResult>介面。</span><span class="sxs-lookup"><span data-stu-id="8a87b-583">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="8a87b-584">覆寫這個方法以自訂在衍生類別的行為。</span><span class="sxs-lookup"><span data-stu-id="8a87b-584">Override this method to customize the behavior of derived classes.</span></span>  
  
 <span data-ttu-id="8a87b-585">呼叫這個方法多載等同於呼叫<xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29>多載，並指定`false`如`exitContext`。</span><span class="sxs-lookup"><span data-stu-id="8a87b-585">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8a87b-586">下列程式碼範例示範如何使用等候控制代碼，以防止處理程序結束時等候背景執行緒完成執行。</span><span class="sxs-lookup"><span data-stu-id="8a87b-586">The following code example shows how to use a wait handle to keep a process from terminating while it waits for a background thread to finish executing.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitOne2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitOne2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne2/CS/source2.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitOne2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="8a87b-587">The current instance has already been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-587">The current instance has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="8a87b-588">
            <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-588">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="8a87b-589">The wait completed because a thread exited without releasing a mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-589">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="8a87b-590">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-590">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8a87b-591">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-591">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member WaitOne : TimeSpan -&gt; bool&#xA;override this.WaitOne : TimeSpan -&gt; bool" Usage="waitHandle.WaitOne timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="8a87b-592">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-592">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8a87b-593">Blocks the current thread until the current instance receives a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-593">Blocks the current thread until the current instance receives a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8a87b-594">
            <see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-594">
              <see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a87b-595">如果`timeout`為零，此方法不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="8a87b-595">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="8a87b-596">它會測試等候控制代碼的狀態，並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="8a87b-596">It tests the state of the wait handle and returns immediately.</span></span>  
  
 <span data-ttu-id="8a87b-597">這個方法會封鎖，直到目前的執行個體收到信號或逾時的呼叫端就會發生。</span><span class="sxs-lookup"><span data-stu-id="8a87b-597">The caller of this method blocks until the current instance receives a signal or a time-out occurs.</span></span> <span data-ttu-id="8a87b-598">使用這個方法來封鎖直到<xref:System.Threading.WaitHandle>從另一個執行緒收到訊號，例如便會產生非同步作業完成時。</span><span class="sxs-lookup"><span data-stu-id="8a87b-598">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="8a87b-599">如需詳細資訊，請參閱<xref:System.IAsyncResult>介面。</span><span class="sxs-lookup"><span data-stu-id="8a87b-599">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="8a87b-600">覆寫這個方法以自訂在衍生類別的行為。</span><span class="sxs-lookup"><span data-stu-id="8a87b-600">Override this method to customize the behavior of derived classes.</span></span>  
  
 <span data-ttu-id="8a87b-601">最大值`timeout`是<xref:System.Int32.MaxValue?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="8a87b-601">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="8a87b-602">呼叫這個方法多載等同於呼叫<xref:System.Threading.WaitHandle.WaitOne%28System.TimeSpan%2CSystem.Boolean%29>多載，並指定`false`如`exitContext`。</span><span class="sxs-lookup"><span data-stu-id="8a87b-602">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitOne%28System.TimeSpan%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="8a87b-603">The current instance has already been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-603">The current instance has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="8a87b-604">
            <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.  -or-  <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-604">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.  -or-  <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="8a87b-605">The wait completed because a thread exited without releasing a mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-605">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="8a87b-606">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-606">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8a87b-607">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-607">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne (int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne(int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne (millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne(int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="abstract member WaitOne : int * bool -&gt; bool&#xA;override this.WaitOne : int * bool -&gt; bool" Usage="waitHandle.WaitOne (millisecondsTimeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="8a87b-608">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-608">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="8a87b-609">
            <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-609">
              <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8a87b-610">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal, using a 32-bit signed integer to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-610">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal, using a 32-bit signed integer to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8a87b-611">
            <see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-611">
              <see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a87b-612">如果`millisecondsTimeout`為零，此方法不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="8a87b-612">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="8a87b-613">它會測試等候控制代碼的狀態，並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="8a87b-613">It tests the state of the wait handle and returns immediately.</span></span>  
  
 <span data-ttu-id="8a87b-614"><xref:System.Threading.AbandonedMutexException> 是.NET Framework 2.0 版中的新功能。</span><span class="sxs-lookup"><span data-stu-id="8a87b-614"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="8a87b-615">在舊版中，<xref:System.Threading.WaitHandle.WaitOne%2A>方法會傳回`true`時放棄的 mutex。</span><span class="sxs-lookup"><span data-stu-id="8a87b-615">In previous versions, the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="8a87b-616">已放棄的 mutex 通常表示嚴重的程式碼錯誤。</span><span class="sxs-lookup"><span data-stu-id="8a87b-616">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="8a87b-617">如果是全系統 mutex，則可能表示，應用程式已意外終止 （例如，透過使用 Windows 工作管理員）。</span><span class="sxs-lookup"><span data-stu-id="8a87b-617">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="8a87b-618">例外狀況包含資訊適用於偵錯。</span><span class="sxs-lookup"><span data-stu-id="8a87b-618">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="8a87b-619">這個方法會封鎖，直到目前的執行個體收到信號或逾時的呼叫端就會發生。</span><span class="sxs-lookup"><span data-stu-id="8a87b-619">The caller of this method blocks until the current instance receives a signal or a time-out occurs.</span></span> <span data-ttu-id="8a87b-620">使用這個方法來封鎖直到<xref:System.Threading.WaitHandle>從另一個執行緒收到訊號，例如便會產生非同步作業完成時。</span><span class="sxs-lookup"><span data-stu-id="8a87b-620">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="8a87b-621">如需詳細資訊，請參閱<xref:System.IAsyncResult>介面。</span><span class="sxs-lookup"><span data-stu-id="8a87b-621">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="8a87b-622">覆寫這個方法以自訂在衍生類別的行為。</span><span class="sxs-lookup"><span data-stu-id="8a87b-622">Override this method to customize the behavior of derived classes.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="8a87b-623">在結束內容的資訊</span><span class="sxs-lookup"><span data-stu-id="8a87b-623">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="8a87b-624">`exitContext`參數沒有任何作用，除非<xref:System.Threading.WaitHandle.WaitOne%2A>從非預設受管理的內容中呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="8a87b-624">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitOne%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="8a87b-625">如果您的執行緒是衍生自類別的執行個體的呼叫在此情形<xref:System.ContextBoundObject>。</span><span class="sxs-lookup"><span data-stu-id="8a87b-625">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="8a87b-626">即使您目前正在執行的方法不是衍生自的類別上<xref:System.ContextBoundObject>，例如<xref:System.String>，您可以在非預設內容中如果<xref:System.ContextBoundObject>您目前的應用程式定義域中的堆疊上。</span><span class="sxs-lookup"><span data-stu-id="8a87b-626">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="8a87b-627">時的非預設內容中執行您的程式碼，在指定`true`的`exitContext`造成執行緒結束的非預設的 managed 的內容 (也就是轉換成預設內容) 執行之前<xref:System.Threading.WaitHandle.WaitOne%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="8a87b-627">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span> <span data-ttu-id="8a87b-628">執行緒在呼叫之後返回原始的非預設內容<xref:System.Threading.WaitHandle.WaitOne%2A>方法完成。</span><span class="sxs-lookup"><span data-stu-id="8a87b-628">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitOne%2A> method completes.</span></span>  
  
 <span data-ttu-id="8a87b-629">這有助於進行內容繫結類別具有<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>。</span><span class="sxs-lookup"><span data-stu-id="8a87b-629">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="8a87b-630">在此情況下，所有呼叫類別的成員會自動同步都處理，並同步處理領域是類別程式碼的整個主體。</span><span class="sxs-lookup"><span data-stu-id="8a87b-630">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="8a87b-631">如果成員的呼叫堆疊中的程式碼會呼叫<xref:System.Threading.WaitHandle.WaitOne%2A>方法，並指定`true`如`exitContext`，執行緒結束同步處理網域，讓執行緒上呼叫物件的任何成員，以繼續進行封鎖。</span><span class="sxs-lookup"><span data-stu-id="8a87b-631">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitOne%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="8a87b-632">當<xref:System.Threading.WaitHandle.WaitOne%2A>方法傳回時，進行呼叫的執行緒必須等待重新輸入一次同步處理領域。</span><span class="sxs-lookup"><span data-stu-id="8a87b-632">When the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8a87b-633">下列範例顯示如何<xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29>方法多載時就稱為同步處理網域中的行為。</span><span class="sxs-lookup"><span data-stu-id="8a87b-633">The following example shows how the <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29> method overload behaves when it is called within a synchronization domain.</span></span> <span data-ttu-id="8a87b-634">首先，執行緒會等候與`exitContext`設定為`false`，直到等候的逾時到期。</span><span class="sxs-lookup"><span data-stu-id="8a87b-634">First, a thread waits with `exitContext` set to `false` and blocks until the wait timeout expires.</span></span> <span data-ttu-id="8a87b-635">第二個執行緒執行之後的第一個執行緒終止，並與等候`exitContext`設定為`true`。</span><span class="sxs-lookup"><span data-stu-id="8a87b-635">A second thread executes after the first thread terminates and waits with `exitContext` set to `true`.</span></span> <span data-ttu-id="8a87b-636">未封鎖的呼叫，以表示此第二個執行緒的等候控制代碼，並等候逾時之前完成的執行緒。</span><span class="sxs-lookup"><span data-stu-id="8a87b-636">The call to signal the wait handle for this second thread is not blocked, and the thread completes before the wait timeout.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitOne4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.threading.waithandle.waitone4/cpp/source.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitOne4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.waithandle.waitone4/cs/source.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitOne4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.waithandle.waitone4/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="8a87b-637">The current instance has already been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-637">The current instance has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="8a87b-638">
            <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-638">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="8a87b-639">The wait completed because a thread exited without releasing a mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-639">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="8a87b-640">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-640">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8a87b-641">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-641">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne (TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne(valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne (timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne(TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="abstract member WaitOne : TimeSpan * bool -&gt; bool&#xA;override this.WaitOne : TimeSpan * bool -&gt; bool" Usage="waitHandle.WaitOne (timeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="8a87b-642">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-642">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="8a87b-643">
            <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-643">
              <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8a87b-644">Blocks the current thread until the current instance receives a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-644">Blocks the current thread until the current instance receives a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8a87b-645">
            <see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-645">
              <see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a87b-646">如果`timeout`為零，此方法不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="8a87b-646">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="8a87b-647">它會測試等候控制代碼的狀態，並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="8a87b-647">It tests the state of the wait handle and returns immediately.</span></span>  
  
 <span data-ttu-id="8a87b-648"><xref:System.Threading.AbandonedMutexException> 是.NET Framework 2.0 版中的新功能。</span><span class="sxs-lookup"><span data-stu-id="8a87b-648"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="8a87b-649">在舊版中，<xref:System.Threading.WaitHandle.WaitOne%2A>方法會傳回`true`時放棄的 mutex。</span><span class="sxs-lookup"><span data-stu-id="8a87b-649">In previous versions, the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="8a87b-650">已放棄的 mutex 通常表示嚴重的程式碼錯誤。</span><span class="sxs-lookup"><span data-stu-id="8a87b-650">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="8a87b-651">如果是全系統 mutex，則可能表示，應用程式已意外終止 （例如，透過使用 Windows 工作管理員）。</span><span class="sxs-lookup"><span data-stu-id="8a87b-651">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="8a87b-652">例外狀況包含資訊適用於偵錯。</span><span class="sxs-lookup"><span data-stu-id="8a87b-652">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="8a87b-653">這個方法會封鎖，直到目前的執行個體收到信號或逾時的呼叫端就會發生。</span><span class="sxs-lookup"><span data-stu-id="8a87b-653">The caller of this method blocks until the current instance receives a signal or a time-out occurs.</span></span> <span data-ttu-id="8a87b-654">使用這個方法來封鎖直到<xref:System.Threading.WaitHandle>從另一個執行緒收到訊號，例如便會產生非同步作業完成時。</span><span class="sxs-lookup"><span data-stu-id="8a87b-654">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="8a87b-655">如需詳細資訊，請參閱<xref:System.IAsyncResult>介面。</span><span class="sxs-lookup"><span data-stu-id="8a87b-655">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="8a87b-656">覆寫這個方法以自訂在衍生類別的行為。</span><span class="sxs-lookup"><span data-stu-id="8a87b-656">Override this method to customize the behavior of derived classes.</span></span>  
  
 <span data-ttu-id="8a87b-657">最大值`timeout`是<xref:System.Int32.MaxValue?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="8a87b-657">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="8a87b-658">在結束內容的資訊</span><span class="sxs-lookup"><span data-stu-id="8a87b-658">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="8a87b-659">`exitContext`參數沒有任何作用，除非<xref:System.Threading.WaitHandle.WaitOne%2A>從非預設受管理的內容中呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="8a87b-659">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitOne%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="8a87b-660">如果您的執行緒是衍生自類別的執行個體的呼叫在此情形<xref:System.ContextBoundObject>。</span><span class="sxs-lookup"><span data-stu-id="8a87b-660">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="8a87b-661">即使您目前正在執行的方法不是衍生自的類別上<xref:System.ContextBoundObject>，例如<xref:System.String>，您可以在非預設內容中如果<xref:System.ContextBoundObject>您目前的應用程式定義域中的堆疊上。</span><span class="sxs-lookup"><span data-stu-id="8a87b-661">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="8a87b-662">時的非預設內容中執行您的程式碼，在指定`true`的`exitContext`造成執行緒結束的非預設的 managed 的內容 (也就是轉換成預設內容) 執行之前<xref:System.Threading.WaitHandle.WaitOne%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="8a87b-662">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span> <span data-ttu-id="8a87b-663">執行緒在呼叫之後返回原始的非預設內容<xref:System.Threading.WaitHandle.WaitOne%2A>方法完成。</span><span class="sxs-lookup"><span data-stu-id="8a87b-663">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitOne%2A> method completes.</span></span>  
  
 <span data-ttu-id="8a87b-664">這有助於進行內容繫結類別具有<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>。</span><span class="sxs-lookup"><span data-stu-id="8a87b-664">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="8a87b-665">在此情況下，所有呼叫類別的成員會自動同步都處理，並同步處理領域是類別程式碼的整個主體。</span><span class="sxs-lookup"><span data-stu-id="8a87b-665">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="8a87b-666">如果成員的呼叫堆疊中的程式碼會呼叫<xref:System.Threading.WaitHandle.WaitOne%2A>方法，並指定`true`如`exitContext`，執行緒結束同步處理網域，讓執行緒上呼叫物件的任何成員，以繼續進行封鎖。</span><span class="sxs-lookup"><span data-stu-id="8a87b-666">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitOne%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="8a87b-667">當<xref:System.Threading.WaitHandle.WaitOne%2A>方法傳回時，進行呼叫的執行緒必須等待重新輸入一次同步處理領域。</span><span class="sxs-lookup"><span data-stu-id="8a87b-667">When the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8a87b-668">下列程式碼範例示範如何使用等候控制代碼，以防止處理程序結束時等候背景執行緒完成執行。</span><span class="sxs-lookup"><span data-stu-id="8a87b-668">The following code example shows how to use a wait handle to keep a process from terminating while it waits for a background thread to finish executing.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitOne3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne3/CPP/source3.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitOne3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne3/CS/source3.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitOne3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne3/VB/source3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="8a87b-669">The current instance has already been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-669">The current instance has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="8a87b-670">
            <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.  -or-  <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-670">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.  -or-  <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="8a87b-671">The wait completed because a thread exited without releasing a mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-671">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="8a87b-672">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-672">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8a87b-673">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-673">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitTimeout">
      <MemberSignature Language="C#" Value="public const int WaitTimeout = 258;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 WaitTimeout = (258)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.WaitHandle.WaitTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Const WaitTimeout As Integer  = 258" />
      <MemberSignature Language="C++ CLI" Value="public: int WaitTimeout = 258;" />
      <MemberSignature Language="F#" Value="val mutable WaitTimeout : int" Usage="System.Threading.WaitHandle.WaitTimeout" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>258</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="8a87b-674">Indicates that a <see cref="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)" /> operation timed out before any of the wait handles were signaled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-674">Indicates that a <see cref="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)" /> operation timed out before any of the wait handles were signaled.</span>
          </span>
          <span data-ttu-id="8a87b-675">This field is constant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a87b-675">This field is constant.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a87b-676">此欄位是其中一個可能的傳回值的`WaitAny`。</span><span class="sxs-lookup"><span data-stu-id="8a87b-676">This field is one of the possible return values of `WaitAny`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8a87b-677">下列程式碼範例示範如何使用執行緒集區同時搜尋多個磁碟上的檔案。</span><span class="sxs-lookup"><span data-stu-id="8a87b-677">The following code example demonstrates how to use the thread pool to simultaneously search for a file on multiple disks.</span></span> <span data-ttu-id="8a87b-678">如需空間考量，會搜尋只有每個磁碟的根目錄。</span><span class="sxs-lookup"><span data-stu-id="8a87b-678">For space considerations, only the root directory of each disk is searched.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/CS/source2.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>