<Type Name="WaitHandle" FullName="System.Threading.WaitHandle">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="12fe7b4aeb7e4229c3b0b19f8900c53c137c3e29" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39873554" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class WaitHandle : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi abstract beforefieldinit WaitHandle extends System.MarshalByRefObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.WaitHandle" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class WaitHandle&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class WaitHandle abstract : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="F#" Value="type WaitHandle = class&#xA;    inherit MarshalByRefObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="72de3-101">將等候共用資源獨佔存取權限的特定作業系統物件封裝起來。</span>
      <span class="sxs-lookup">
        <span data-stu-id="72de3-101">Encapsulates operating system–specific objects that wait for exclusive access to shared resources.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72de3-102"><xref:System.Threading.WaitHandle>類別會封裝 Win32 同步控制代碼，以及用來代表所有在執行階段允許多個等候作業的同步處理物件。</span><span class="sxs-lookup"><span data-stu-id="72de3-102">The <xref:System.Threading.WaitHandle> class encapsulates Win32 synchronization handles, and is used to represent all synchronization objects in the runtime that allow multiple wait operations.</span></span> <span data-ttu-id="72de3-103">如需與其他同步處理物件的等候控制代碼的比較，請參閱 <<c0> [ 同步處理原始物件概觀](~/docs/standard/threading/overview-of-synchronization-primitives.md)。</span><span class="sxs-lookup"><span data-stu-id="72de3-103">For a comparison of wait handles with other synchronization objects, see [Overview of Synchronization Primitives](~/docs/standard/threading/overview-of-synchronization-primitives.md).</span></span>  
  
 <span data-ttu-id="72de3-104"><xref:System.Threading.WaitHandle>本身的類別是抽象的。</span><span class="sxs-lookup"><span data-stu-id="72de3-104">The <xref:System.Threading.WaitHandle> class itself is abstract.</span></span> <span data-ttu-id="72de3-105">類別衍生自<xref:System.Threading.WaitHandle>定義訊號的機制，以指示耗時或釋放存取共用資源，但是會使用繼承<xref:System.Threading.WaitHandle>方法來封鎖而等待存取共用資源。</span><span class="sxs-lookup"><span data-stu-id="72de3-105">Classes derived from <xref:System.Threading.WaitHandle> define a signaling mechanism to indicate taking or releasing access to a shared resource, but they use the inherited <xref:System.Threading.WaitHandle> methods to block while waiting for access to shared resources.</span></span> <span data-ttu-id="72de3-106">類別衍生自<xref:System.Threading.WaitHandle>包括：</span><span class="sxs-lookup"><span data-stu-id="72de3-106">The classes derived from <xref:System.Threading.WaitHandle> include:</span></span>  
  
-   <span data-ttu-id="72de3-107"><xref:System.Threading.Mutex> 類別。</span><span class="sxs-lookup"><span data-stu-id="72de3-107">The <xref:System.Threading.Mutex> class.</span></span> <span data-ttu-id="72de3-108">請參閱[Mutex](~/docs/standard/threading/mutexes.md)。</span><span class="sxs-lookup"><span data-stu-id="72de3-108">See [Mutexes](~/docs/standard/threading/mutexes.md).</span></span>  
  
-   <span data-ttu-id="72de3-109"><xref:System.Threading.EventWaitHandle>類別和其衍生的類別，<xref:System.Threading.AutoResetEvent>和<xref:System.Threading.ManualResetEvent>。</span><span class="sxs-lookup"><span data-stu-id="72de3-109">The <xref:System.Threading.EventWaitHandle> class and its derived classes, <xref:System.Threading.AutoResetEvent> and <xref:System.Threading.ManualResetEvent>.</span></span> <span data-ttu-id="72de3-110">[EventWaitHandle、AutoResetEvent、CountdownEvent、ManualResetEvent](~/docs/standard/threading/eventwaithandle-autoresetevent-countdownevent-manualresetevent.md)。</span><span class="sxs-lookup"><span data-stu-id="72de3-110">See [EventWaitHandle, AutoResetEvent, CountdownEvent, ManualResetEvent](~/docs/standard/threading/eventwaithandle-autoresetevent-countdownevent-manualresetevent.md).</span></span>  
  
-   <span data-ttu-id="72de3-111"><xref:System.Threading.Semaphore> 類別。</span><span class="sxs-lookup"><span data-stu-id="72de3-111">The <xref:System.Threading.Semaphore> class.</span></span> <span data-ttu-id="72de3-112">請參閱[Semaphore 和 SemaphoreSlim](~/docs/standard/threading/semaphore-and-semaphoreslim.md)。</span><span class="sxs-lookup"><span data-stu-id="72de3-112">See [Semaphore and SemaphoreSlim](~/docs/standard/threading/semaphore-and-semaphoreslim.md).</span></span>  
  
 <span data-ttu-id="72de3-113">個別的等候控制代碼上封鎖執行緒，可以將它所呼叫的執行個體方法<xref:System.Threading.WaitHandle.WaitOne%2A>，其中會由衍生自的類別繼承<xref:System.Threading.WaitHandle>。</span><span class="sxs-lookup"><span data-stu-id="72de3-113">Threads can block on an individual wait handle by calling the instance method <xref:System.Threading.WaitHandle.WaitOne%2A>, which is inherited by classes derived from <xref:System.Threading.WaitHandle>.</span></span>  
  
 <span data-ttu-id="72de3-114">在衍生的類別<xref:System.Threading.WaitHandle>的差異在於其執行緒親和性。</span><span class="sxs-lookup"><span data-stu-id="72de3-114">The derived classes of <xref:System.Threading.WaitHandle> differ in their thread affinity.</span></span> <span data-ttu-id="72de3-115">事件等候控制代碼 (<xref:System.Threading.EventWaitHandle>， <xref:System.Threading.AutoResetEvent>，和<xref:System.Threading.ManualResetEvent>)，號誌沒有執行緒相似性; 任何執行緒可以發出信號的事件等候控制代碼或號誌。</span><span class="sxs-lookup"><span data-stu-id="72de3-115">Event wait handles (<xref:System.Threading.EventWaitHandle>, <xref:System.Threading.AutoResetEvent>, and <xref:System.Threading.ManualResetEvent>) and semaphores do not have thread affinity; any thread can signal an event wait handle or semaphore.</span></span> <span data-ttu-id="72de3-116">Mutex，相反地，沒有執行緒相似性;擁有 mutex 的執行緒必須釋放它，並會擲回例外狀況，如果執行緒呼叫<xref:System.Threading.Mutex.ReleaseMutex%2A>上未擁有 mutex 的方法。</span><span class="sxs-lookup"><span data-stu-id="72de3-116">Mutexes, on the other hand, do have thread affinity; the thread that owns a mutex must release it, and an exception is thrown if a thread calls the <xref:System.Threading.Mutex.ReleaseMutex%2A> method on a mutex that it does not own.</span></span>  
  
 <span data-ttu-id="72de3-117">因為<xref:System.Threading.WaitHandle>類別衍生自<xref:System.MarshalByRefObject>，這些類別可以用來跨應用程式定義域界限同步處理執行緒的活動。</span><span class="sxs-lookup"><span data-stu-id="72de3-117">Because the <xref:System.Threading.WaitHandle> class derives from <xref:System.MarshalByRefObject>, these classes can be used to synchronize the activities of threads across application domain boundaries.</span></span>  
  
 <span data-ttu-id="72de3-118">除了其衍生的類別，<xref:System.Threading.WaitHandle>類別具有一些靜態方法，封鎖執行緒，直到其中一個或多個同步物件收到信號...</span><span class="sxs-lookup"><span data-stu-id="72de3-118">In addition to its derived classes, the <xref:System.Threading.WaitHandle> class has a number of static methods that block a thread until one or more synchronization objects receive a signal..</span></span> <span data-ttu-id="72de3-119">它們包括：</span><span class="sxs-lookup"><span data-stu-id="72de3-119">These include:</span></span>  
  
-   <span data-ttu-id="72de3-120"><xref:System.Threading.WaitHandle.SignalAndWait%2A>這可讓發出信號一個等候控制代碼，以及立即等候另一個執行緒。</span><span class="sxs-lookup"><span data-stu-id="72de3-120"><xref:System.Threading.WaitHandle.SignalAndWait%2A>, which allows a thread to signal one wait handle and immediately wait on another.</span></span>  
  
-   <span data-ttu-id="72de3-121"><xref:System.Threading.WaitHandle.WaitAll%2A>這可讓執行緒等候，直到在陣列中的所有等候控制代碼會都收到信號。</span><span class="sxs-lookup"><span data-stu-id="72de3-121"><xref:System.Threading.WaitHandle.WaitAll%2A>, which allows a thread to wait until all the wait handles in an array receive a signal.</span></span>  
  
-   <span data-ttu-id="72de3-122"><xref:System.Threading.WaitHandle.WaitAny%2A>這可讓執行緒等候，直到收到訊號的一組指定的等候控制代碼的任何一個。</span><span class="sxs-lookup"><span data-stu-id="72de3-122"><xref:System.Threading.WaitHandle.WaitAny%2A>, which allows a thread to wait until any one of a specified set of wait handles has been signaled .</span></span>  
  
 <span data-ttu-id="72de3-123">這些方法的多載提供放棄等候，並有機會先離開同步處理內容，再進入等候，讓其他執行緒使用的同步處理內容的逾時間隔。</span><span class="sxs-lookup"><span data-stu-id="72de3-123">The overloads of these methods provide timeout intervals for abandoning the wait, and the opportunity to exit a synchronization context before entering the wait, allowing other threads to use the synchronization context.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="72de3-124">此類型會實作<xref:System.IDisposable>介面。</span><span class="sxs-lookup"><span data-stu-id="72de3-124">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="72de3-125">當您完成使用的類型或從中衍生的類型時，您應該處置它直接或間接。</span><span class="sxs-lookup"><span data-stu-id="72de3-125">When you have finished using the type or a type derived from it, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="72de3-126">若要直接處置型別，呼叫其<xref:System.Threading.WaitHandle.Close%2A>方法中的`try` / `catch`區塊。</span><span class="sxs-lookup"><span data-stu-id="72de3-126">To dispose of the type directly, call its <xref:System.Threading.WaitHandle.Close%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="72de3-127">若要處置它間接，使用的語言建構這類`using`（在 C# 中) 或`Using`（在 Visual Basic)。</span><span class="sxs-lookup"><span data-stu-id="72de3-127">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="72de3-128">如需詳細資訊，請參閱 「 使用物件，實作 IDisposable 」 一節<xref:System.IDisposable>介面 > 主題。</span><span class="sxs-lookup"><span data-stu-id="72de3-128">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="72de3-129"><xref:System.Threading.WaitHandle> 實作<xref:System.IDisposable.Dispose%2A>模式。</span><span class="sxs-lookup"><span data-stu-id="72de3-129"><xref:System.Threading.WaitHandle> implements the <xref:System.IDisposable.Dispose%2A> pattern.</span></span> <span data-ttu-id="72de3-130">請參閱[處置模式](~/docs/standard/design-guidelines/dispose-pattern.md)。</span><span class="sxs-lookup"><span data-stu-id="72de3-130">See [Dispose Pattern](~/docs/standard/design-guidelines/dispose-pattern.md).</span></span> <span data-ttu-id="72de3-131">當您衍生自<xref:System.Threading.WaitHandle>，使用<xref:System.Threading.WaitHandle.SafeWaitHandle%2A>屬性來儲存您的原生控制代碼的作業系統控制代碼。</span><span class="sxs-lookup"><span data-stu-id="72de3-131">When you derive from <xref:System.Threading.WaitHandle>, use the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property to store your native handle operating system handle.</span></span> <span data-ttu-id="72de3-132">您不需要覆寫保護<xref:System.Threading.WaitHandle.Dispose%2A>方法除非您使用其他的 unmanaged 的資源。</span><span class="sxs-lookup"><span data-stu-id="72de3-132">You do not need to override the protected <xref:System.Threading.WaitHandle.Dispose%2A> method unless you use additional unmanaged resources.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="72de3-133">下列程式碼範例示範如何在兩個執行緒可以執行背景工作，並在主要執行緒等候工作完成使用靜態<xref:System.Threading.WaitHandle.WaitAny%2A>並<xref:System.Threading.WaitHandle.WaitAll%2A>方法<xref:System.Threading.WaitHandle>類別。</span><span class="sxs-lookup"><span data-stu-id="72de3-133">The following code example shows how two threads can do background tasks while the Main thread waits for the tasks to complete using the static <xref:System.Threading.WaitHandle.WaitAny%2A> and <xref:System.Threading.WaitHandle.WaitAll%2A> methods of the <xref:System.Threading.WaitHandle> class.</span></span>  
  
 [!code-cpp[WaitHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/WaitHandle/cpp/WaitHandle.cpp#1)]
 [!code-csharp[WaitHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/WaitHandle/CS/WaitHandle.cs#1)]
 [!code-vb[WaitHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/WaitHandle/VB/WaitHandle.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="72de3-134">此型別具備執行緒安全。</span>
      <span class="sxs-lookup">
        <span data-stu-id="72de3-134">This type is thread safe.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WaitHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WaitHandle();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="72de3-135">初始化 <see cref="T:System.Threading.WaitHandle" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-135">Initializes a new instance of the <see cref="T:System.Threading.WaitHandle" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public virtual void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Close();" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit&#xA;override this.Close : unit -&gt; unit" Usage="waitHandle.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="72de3-136">釋放目前 <see cref="T:System.Threading.WaitHandle" /> 所持有的全部資源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-136">Releases all resources held by the current <see cref="T:System.Threading.WaitHandle" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72de3-137">這個方法是公用的實作<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>方法<xref:System.Threading.WaitHandle>類別和其衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="72de3-137">This method is the public implementation of the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> method for the <xref:System.Threading.WaitHandle> class and its derived classes.</span></span> <span data-ttu-id="72de3-138">它提供標準的實作會呼叫`Dispose(Boolean)`多載`true`引數，然後呼叫<xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="72de3-138">It provides a standard implementation that calls the `Dispose(Boolean)` overload with a `true` argument and then calls the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="72de3-139">呼叫這個方法來釋放的執行個體所持有的所有資源`WaitHandle`或衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="72de3-139">Call this method to release all resources held by an instance of `WaitHandle` or a derived class.</span></span>  
  
 <span data-ttu-id="72de3-140">一旦呼叫這個方法時，目前的執行個體的參考會導致未定義的行為。</span><span class="sxs-lookup"><span data-stu-id="72de3-140">Once this method is called, references to the current instance cause undefined behavior.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="72de3-141">請務必呼叫<xref:System.Threading.WaitHandle.Close%2A>或是<xref:System.Threading.WaitHandle.Dispose>您釋放最後一個參考之前<xref:System.Threading.WaitHandle>。</span><span class="sxs-lookup"><span data-stu-id="72de3-141">Always call <xref:System.Threading.WaitHandle.Close%2A> or <xref:System.Threading.WaitHandle.Dispose> before you release your last reference to the <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="72de3-142">否則，將不會釋放它所使用的資源。</span><span class="sxs-lookup"><span data-stu-id="72de3-142">Otherwise, the resources it is using will not be freed.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="72de3-143">
            <para>您應該覆寫<see langword="Dispose(Boolean)" />方法來釋放資源配置中衍生的類別。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-143">
              <para>You should override the <see langword="Dispose(Boolean)" /> method to release resources allocated in derived classes.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="72de3-144">將 <see cref="T:System.Threading.WaitHandle" /> 類別的目前執行個體所使用的資源全部釋放。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-144">Releases all resources used by the current instance of the <see cref="T:System.Threading.WaitHandle" /> class</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="waitHandle.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="72de3-145">將 <see cref="T:System.Threading.WaitHandle" /> 類別目前的執行個體所使用的資源全部釋出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-145">Releases all resources used by the current instance of the <see cref="T:System.Threading.WaitHandle" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72de3-146">這個方法相當於<xref:System.Threading.WaitHandle.Close%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="72de3-146">This method is equivalent to the <xref:System.Threading.WaitHandle.Close%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="72de3-147">請務必呼叫<xref:System.Threading.WaitHandle.Close%2A>或是<xref:System.Threading.WaitHandle.Dispose>您釋放最後一個參考之前<xref:System.Threading.WaitHandle>。</span><span class="sxs-lookup"><span data-stu-id="72de3-147">Always call <xref:System.Threading.WaitHandle.Close%2A> or <xref:System.Threading.WaitHandle.Dispose> before you release your last reference to the <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="72de3-148">否則，將不會釋放它所使用的資源。</span><span class="sxs-lookup"><span data-stu-id="72de3-148">Otherwise, the resources it is using will not be freed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool explicitDisposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool explicitDisposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (explicitDisposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool explicitDisposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="waitHandle.Dispose explicitDisposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="explicitDisposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="explicitDisposing">
          <span data-ttu-id="72de3-149">
            <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-149">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72de3-150">當在衍生類別中覆寫時，釋放 <see cref="T:System.Threading.WaitHandle" /> 所使用的 Unmanaged 資源，並選擇性釋放 Managed 資源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-150">When overridden in a derived class, releases the unmanaged resources used by the <see cref="T:System.Threading.WaitHandle" />, and optionally releases the managed resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72de3-151">這個方法會呼叫<xref:System.Threading.WaitHandle.Close%2A>而<xref:System.Threading.WaitHandle.Dispose>方法`explicitDisposing`參數設定為`true`。</span><span class="sxs-lookup"><span data-stu-id="72de3-151">This method is called by the <xref:System.Threading.WaitHandle.Close%2A> and the <xref:System.Threading.WaitHandle.Dispose> methods with the `explicitDisposing` parameter set to `true`.</span></span>  <span data-ttu-id="72de3-152">當`explicitDisposing`參數是`true`，這個方法由任何 managed 物件持有的資源全部釋出這個<xref:System.Threading.WaitHandle>物件參考。</span><span class="sxs-lookup"><span data-stu-id="72de3-152">When the `explicitDisposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Threading.WaitHandle> object references.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="72de3-153">
            <para>您應該覆寫<see cref="M:System.Threading.WaitHandle.Dispose(System.Boolean)" />方法來釋放資源配置中衍生的類別。<see cref="M:System.Threading.WaitHandle.Close" />或<see cref="M:System.Threading.WaitHandle.Dispose" />方法可以由其他物件呼叫多次。當覆寫此方法時，小心不要參考先前處置呼叫中的物件<see langword="Dispose" />或<see langword="Close" />。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-153">
              <para>You should override the <see cref="M:System.Threading.WaitHandle.Dispose(System.Boolean)" /> method to release resources allocated in derived classes.  The <see cref="M:System.Threading.WaitHandle.Close" /> or <see cref="M:System.Threading.WaitHandle.Dispose" /> method can be called multiple times by other objects. When overriding this method, be careful not to reference objects that have been previously disposed in an earlier call to <see langword="Dispose" /> or <see langword="Close" />.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~WaitHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!WaitHandle ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="waitHandle.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public virtual IntPtr Handle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.WaitHandle.Handle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property IntPtr Handle { IntPtr get(); void set(IntPtr value); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint with get, set" Usage="System.Threading.WaitHandle.Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use the SafeWaitHandle property instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="72de3-154">取得或設定原生 (Native) 的作業系統控制代碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-154">Gets or sets the native operating system handle.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="72de3-155">
            <see langword="IntPtr" />，代表原生作業系統控制代碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-155">An <see langword="IntPtr" /> representing the native operating system handle.</span>
          </span>
          <span data-ttu-id="72de3-156">預設為 <see cref="F:System.Threading.WaitHandle.InvalidHandle" /> 欄位的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-156">The default is the value of the <see cref="F:System.Threading.WaitHandle.InvalidHandle" /> field.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72de3-157">指派新值給<xref:System.Threading.WaitHandle.Handle%2A>屬性不會關閉先前的控制代碼。</span><span class="sxs-lookup"><span data-stu-id="72de3-157">Assigning a new value to the <xref:System.Threading.WaitHandle.Handle%2A> property does not close the previous handle.</span></span> <span data-ttu-id="72de3-158">這會導致遺漏的控制代碼。</span><span class="sxs-lookup"><span data-stu-id="72de3-158">This can result in a leaked handle.</span></span>  
  
 <span data-ttu-id="72de3-159">請勿使用這個屬性在.NET Framework 2.0 版或更新版本;使用<xref:System.Threading.WaitHandle.SafeWaitHandle%2A>屬性改為。</span><span class="sxs-lookup"><span data-stu-id="72de3-159">Do not use this property in the .NET Framework version 2.0 or later; use the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property instead.</span></span> <span data-ttu-id="72de3-160">此屬性設定為有效的控制代碼也設定<xref:System.Threading.WaitHandle.SafeWaitHandle%2A>屬性，但將它設定為<xref:System.Threading.WaitHandle.InvalidHandle>可能會導致遺漏的控制代碼。</span><span class="sxs-lookup"><span data-stu-id="72de3-160">Setting this property to a valid handle also sets the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property, but setting it to <xref:System.Threading.WaitHandle.InvalidHandle> can result in a leaked handle.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="72de3-161">需要完全信任立即呼叫者，來設定屬性值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-161">Requires full trust for the immediate caller to set the property value.</span>
          </span>
          <span data-ttu-id="72de3-162">這個成員無法由部分信任或不透明的程式碼設定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-162">This member cannot be set by partially trusted or transparent code.</span>
          </span>
        </permission>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">
          <span data-ttu-id="72de3-163">在衍生的型別必須具有<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />來設定屬性值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-163">Derived types must have <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> to set the property value.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="InvalidHandle">
      <MemberSignature Language="C#" Value="protected static readonly IntPtr InvalidHandle;" />
      <MemberSignature Language="ILAsm" Value=".field family static initonly native int InvalidHandle" />
      <MemberSignature Language="DocId" Value="F:System.Threading.WaitHandle.InvalidHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Shared ReadOnly InvalidHandle As IntPtr " />
      <MemberSignature Language="C++ CLI" Value="protected: static initonly IntPtr InvalidHandle;" />
      <MemberSignature Language="F#" Value=" staticval mutable InvalidHandle : nativeint" Usage="System.Threading.WaitHandle.InvalidHandle" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="72de3-164">代表無效的原生作業系統控制代碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-164">Represents an invalid native operating system handle.</span>
          </span>
          <span data-ttu-id="72de3-165">此欄位為唯讀。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-165">This field is read-only.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72de3-166">在內部用來初始化<xref:System.Threading.WaitHandle.Handle%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="72de3-166">Used internally to initialize the <xref:System.Threading.WaitHandle.Handle%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="72de3-167">
            <para>您可以使用此值來判斷是否<see cref="P:System.Threading.WaitHandle.Handle" />屬性包含有效的原生作業系統控制代碼。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-167">
              <para>You can use this value to determine whether the <see cref="P:System.Threading.WaitHandle.Handle" /> property contains a valid native operating system handle.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="SafeWaitHandle">
      <MemberSignature Language="C#" Value="public Microsoft.Win32.SafeHandles.SafeWaitHandle SafeWaitHandle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Win32.SafeHandles.SafeWaitHandle SafeWaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.WaitHandle.SafeWaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public Property SafeWaitHandle As SafeWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Win32::SafeHandles::SafeWaitHandle ^ SafeWaitHandle { Microsoft::Win32::SafeHandles::SafeWaitHandle ^ get(); void set(Microsoft::Win32::SafeHandles::SafeWaitHandle ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SafeWaitHandle : Microsoft.Win32.SafeHandles.SafeWaitHandle with get, set" Usage="System.Threading.WaitHandle.SafeWaitHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>set: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.SafeHandles.SafeWaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="72de3-168">取得或設定原生 (Native) 的作業系統控制代碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-168">Gets or sets the native operating system handle.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="72de3-169">
            <see cref="T:Microsoft.Win32.SafeHandles.SafeWaitHandle" />，代表原生作業系統控制代碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-169">A <see cref="T:Microsoft.Win32.SafeHandles.SafeWaitHandle" /> representing the native operating system handle.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72de3-170">當您指派新的值，以<xref:System.Threading.WaitHandle.SafeWaitHandle%2A>屬性，先前的控制代碼會在關閉前一個<xref:Microsoft.Win32.SafeHandles.SafeWaitHandle>物件回收。</span><span class="sxs-lookup"><span data-stu-id="72de3-170">When you assign a new value to the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property, the previous handle will be closed when the previous <xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> object is collected.</span></span> <span data-ttu-id="72de3-171">請勿以手動方式關閉此控制代碼，因為這會導致<xref:System.ObjectDisposedException>當<xref:Microsoft.Win32.SafeHandles.SafeWaitHandle>嘗試關閉此控制代碼。</span><span class="sxs-lookup"><span data-stu-id="72de3-171">Do not manually close the handle, because this results in an <xref:System.ObjectDisposedException> when the <xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> attempts to close the handle.</span></span>  
  
 <span data-ttu-id="72de3-172"><xref:System.Threading.WaitHandle> 實作<xref:System.IDisposable.Dispose%2A>模式。</span><span class="sxs-lookup"><span data-stu-id="72de3-172"><xref:System.Threading.WaitHandle> implements the <xref:System.IDisposable.Dispose%2A> pattern.</span></span> <span data-ttu-id="72de3-173">請參閱[處置模式](~/docs/standard/design-guidelines/dispose-pattern.md)。</span><span class="sxs-lookup"><span data-stu-id="72de3-173">See [Dispose Pattern](~/docs/standard/design-guidelines/dispose-pattern.md).</span></span> <span data-ttu-id="72de3-174">當您衍生自<xref:System.Threading.WaitHandle>，使用<xref:System.Threading.WaitHandle.SafeWaitHandle%2A>屬性來儲存您的原生控制代碼的作業系統控制代碼。</span><span class="sxs-lookup"><span data-stu-id="72de3-174">When you derive from <xref:System.Threading.WaitHandle>, use the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property to store your native handle operating system handle.</span></span> <span data-ttu-id="72de3-175">您不需要覆寫保護<xref:System.Threading.WaitHandle.Dispose%2A>方法除非您使用其他的 unmanaged 的資源。</span><span class="sxs-lookup"><span data-stu-id="72de3-175">You do not need to override the protected <xref:System.Threading.WaitHandle.Dispose%2A> method unless you use additional unmanaged resources.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="72de3-176">需要完全信任立即呼叫端。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-176">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="72de3-177">此成員不能由部分信任或不透明的程式碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-177">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">
          <span data-ttu-id="72de3-178">在衍生的型別必須具有<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />呼叫這個成員。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-178">Derived types must have <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> to call this member.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="SignalAndWait">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="72de3-179">發出一個 <see cref="T:System.Threading.WaitHandle" /> 信號並等候另一個。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-179">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public static bool SignalAndWait (System.Threading.WaitHandle toSignal, System.Threading.WaitHandle toWaitOn);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SignalAndWait(class System.Threading.WaitHandle toSignal, class System.Threading.WaitHandle toWaitOn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SignalAndWait (toSignal As WaitHandle, toWaitOn As WaitHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SignalAndWait(System::Threading::WaitHandle ^ toSignal, System::Threading::WaitHandle ^ toWaitOn);" />
      <MemberSignature Language="F#" Value="static member SignalAndWait : System.Threading.WaitHandle * System.Threading.WaitHandle -&gt; bool" Usage="System.Threading.WaitHandle.SignalAndWait (toSignal, toWaitOn)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toSignal" Type="System.Threading.WaitHandle" />
        <Parameter Name="toWaitOn" Type="System.Threading.WaitHandle" />
      </Parameters>
      <Docs>
        <param name="toSignal">
          <span data-ttu-id="72de3-180">要發出的 <see cref="T:System.Threading.WaitHandle" /> 信號。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-180">The <see cref="T:System.Threading.WaitHandle" /> to signal.</span>
          </span>
        </param>
        <param name="toWaitOn">
          <span data-ttu-id="72de3-181">要等候的 <see cref="T:System.Threading.WaitHandle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-181">The <see cref="T:System.Threading.WaitHandle" /> to wait on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72de3-182">發出一個 <see cref="T:System.Threading.WaitHandle" /> 信號並等候另一個。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-182">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="72de3-183">如果順利完成信號發出和等候，則為 <see langword="true" />；如果未完成等候，則不會傳回這個方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-183">
              <see langword="true" /> if both the signal and the wait complete successfully; if the wait does not complete, the method does not return.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72de3-184">這項作業不保證是不可部分完成。</span><span class="sxs-lookup"><span data-stu-id="72de3-184">This operation is not guaranteed to be atomic.</span></span> <span data-ttu-id="72de3-185">在目前的執行緒訊號後`toSignal`之前等候`toWaitOn`，另一個處理器執行的執行緒可能會發出信號`toWaitOn`或等候它。</span><span class="sxs-lookup"><span data-stu-id="72de3-185">After the current thread signals `toSignal` but before it waits on `toWaitOn`, a thread that is running on another processor might signal `toWaitOn` or wait on it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="72de3-186">下列程式碼範例使用<xref:System.Threading.WaitHandle.SignalAndWait%28System.Threading.WaitHandle%2CSystem.Threading.WaitHandle%29>方法多載來允許主執行緒發出信號已封鎖的執行緒，以及執行緒完成工作，然後等候。</span><span class="sxs-lookup"><span data-stu-id="72de3-186">The following code example uses the <xref:System.Threading.WaitHandle.SignalAndWait%28System.Threading.WaitHandle%2CSystem.Threading.WaitHandle%29> method overload to allow the main thread to signal a blocked thread and then wait until the thread finishes a task.</span></span>  
  
 <span data-ttu-id="72de3-187">範例啟動五個執行緒，讓他們封鎖<xref:System.Threading.EventWaitHandle>以建立<xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType>旗標與再發行每一個執行緒時間使用者按下 ENTER 鍵。</span><span class="sxs-lookup"><span data-stu-id="72de3-187">The example starts five threads, allows them to block on an <xref:System.Threading.EventWaitHandle> created with the <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType> flag, and then releases one thread each time the user presses the ENTER key.</span></span> <span data-ttu-id="72de3-188">此範例會排入佇列的另一個的五個執行緒，並釋放所有使用<xref:System.Threading.EventWaitHandle>以建立<xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType>旗標。</span><span class="sxs-lookup"><span data-stu-id="72de3-188">The example then queues another five threads and releases them all using an <xref:System.Threading.EventWaitHandle> created with the <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType> flag.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/CS/source.cs#1)]
 [!code-vb[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="72de3-189">
            <paramref name="toSignal" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-189">
              <paramref name="toSignal" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="72de3-190">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-190">-or-</span>
          </span>
          <span data-ttu-id="72de3-191">
            <paramref name="toWaitOn" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-191">
              <paramref name="toWaitOn" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="72de3-192">在擁有 <see cref="T:System.STAThreadAttribute" /> 的執行緒上呼叫此方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-192">The method was called on a thread that has <see cref="T:System.STAThreadAttribute" />.</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="72de3-193">在 Windows 98 或 Windows Millennium Edition 上不支援這個方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-193">This method is not supported on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="72de3-194">
            <paramref name="toSignal" /> 為號誌，且已經有完整計數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-194">
              <paramref name="toSignal" /> is a semaphore, and it already has a full count.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="72de3-195">由於執行緒結束時未釋放 Mutex，已完成等候。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-195">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="72de3-196">在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-196">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public static bool SignalAndWait (System.Threading.WaitHandle toSignal, System.Threading.WaitHandle toWaitOn, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SignalAndWait(class System.Threading.WaitHandle toSignal, class System.Threading.WaitHandle toWaitOn, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SignalAndWait (toSignal As WaitHandle, toWaitOn As WaitHandle, millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SignalAndWait(System::Threading::WaitHandle ^ toSignal, System::Threading::WaitHandle ^ toWaitOn, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member SignalAndWait : System.Threading.WaitHandle * System.Threading.WaitHandle * int * bool -&gt; bool" Usage="System.Threading.WaitHandle.SignalAndWait (toSignal, toWaitOn, millisecondsTimeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toSignal" Type="System.Threading.WaitHandle" />
        <Parameter Name="toWaitOn" Type="System.Threading.WaitHandle" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="toSignal">
          <span data-ttu-id="72de3-197">要發出的 <see cref="T:System.Threading.WaitHandle" /> 信號。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-197">The <see cref="T:System.Threading.WaitHandle" /> to signal.</span>
          </span>
        </param>
        <param name="toWaitOn">
          <span data-ttu-id="72de3-198">要等候的 <see cref="T:System.Threading.WaitHandle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-198">The <see cref="T:System.Threading.WaitHandle" /> to wait on.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="72de3-199">整數，表示要等候的間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-199">An integer that represents the interval to wait.</span>
          </span>
          <span data-ttu-id="72de3-200">如果值為 <see cref="F:System.Threading.Timeout.Infinite" /> (亦即 -1)，則會永遠等候。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-200">If the value is <see cref="F:System.Threading.Timeout.Infinite" />, that is, -1, the wait is infinite.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="72de3-201">
            <see langword="true" /> 表示在等候 (如果在同步內容中) 前結束內容的同步處理網域，並於之後重新取得，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-201">
              <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72de3-202">發出一個 <see cref="T:System.Threading.WaitHandle" /> 信號並等候另一個，將逾時間隔指定為 32 位元帶正負號的整數，並指定是否要先離開內容的同步處理網域，再進入等候狀態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-202">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another, specifying a time-out interval as a 32-bit signed integer and specifying whether to exit the synchronization domain for the context before entering the wait.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="72de3-203">如果順利完成信號發出和等候，則為 <see langword="true" />；如果完成信號發出但等候逾時，則為 <see langword="false" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-203">
              <see langword="true" /> if both the signal and the wait completed successfully, or <see langword="false" /> if the signal completed but the wait timed out.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72de3-204">這項作業不保證是不可部分完成。</span><span class="sxs-lookup"><span data-stu-id="72de3-204">This operation is not guaranteed to be atomic.</span></span> <span data-ttu-id="72de3-205">在目前的執行緒訊號後`toSignal`之前等候`toWaitOn`，另一個處理器執行的執行緒可能會發出信號`toWaitOn`或等候它。</span><span class="sxs-lookup"><span data-stu-id="72de3-205">After the current thread signals `toSignal` but before it waits on `toWaitOn`, a thread that is running on another processor might signal `toWaitOn` or wait on it.</span></span>  
  
 <span data-ttu-id="72de3-206">如果`millisecondsTimeout`為零，此方法不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="72de3-206">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="72de3-207">它會測試的狀態`toWaitOn`並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="72de3-207">It tests the state of the `toWaitOn` and returns immediately.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="72de3-208">在結束內容的資訊</span><span class="sxs-lookup"><span data-stu-id="72de3-208">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="72de3-209">`exitContext`參數沒有任何作用，除非<xref:System.Threading.WaitHandle.SignalAndWait%2A>從非預設受管理的內容中呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="72de3-209">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="72de3-210">如果您的執行緒是衍生自類別的執行個體的呼叫在此情形<xref:System.ContextBoundObject>。</span><span class="sxs-lookup"><span data-stu-id="72de3-210">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="72de3-211">即使您目前正在執行的方法不是衍生自的類別上<xref:System.ContextBoundObject>，例如<xref:System.String>，您可以在非預設內容中如果<xref:System.ContextBoundObject>您目前的應用程式定義域中的堆疊上。</span><span class="sxs-lookup"><span data-stu-id="72de3-211">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="72de3-212">時的非預設內容中執行您的程式碼，在指定`true`的`exitContext`造成執行緒結束的非預設的 managed 的內容 (也就是轉換成預設內容) 執行之前<xref:System.Threading.WaitHandle.SignalAndWait%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="72de3-212">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method.</span></span> <span data-ttu-id="72de3-213">執行緒在呼叫之後返回原始的非預設內容<xref:System.Threading.WaitHandle.SignalAndWait%2A>方法完成。</span><span class="sxs-lookup"><span data-stu-id="72de3-213">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method completes.</span></span>  
  
 <span data-ttu-id="72de3-214">這有助於進行內容繫結類別具有<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>。</span><span class="sxs-lookup"><span data-stu-id="72de3-214">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="72de3-215">在此情況下，所有呼叫類別的成員會自動同步都處理，並同步處理領域是類別程式碼的整個主體。</span><span class="sxs-lookup"><span data-stu-id="72de3-215">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="72de3-216">如果成員的呼叫堆疊中的程式碼會呼叫<xref:System.Threading.WaitHandle.SignalAndWait%2A>方法，並指定`true`如`exitContext`，執行緒結束同步處理網域，讓執行緒上呼叫物件的任何成員，以繼續進行封鎖。</span><span class="sxs-lookup"><span data-stu-id="72de3-216">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="72de3-217">當<xref:System.Threading.WaitHandle.SignalAndWait%2A>方法傳回時，進行呼叫的執行緒必須等待重新輸入一次同步處理領域。</span><span class="sxs-lookup"><span data-stu-id="72de3-217">When the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="72de3-218">
            <paramref name="toSignal" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-218">
              <paramref name="toSignal" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="72de3-219">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-219">-or-</span>
          </span>
          <span data-ttu-id="72de3-220">
            <paramref name="toWaitOn" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-220">
              <paramref name="toWaitOn" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="72de3-221">在擁有 <see cref="T:System.STAThreadAttribute" /> 的執行緒上呼叫此方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-221">The method is called on a thread that has <see cref="T:System.STAThreadAttribute" />.</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="72de3-222">在 Windows 98 或 Windows Millennium Edition 上不支援這個方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-222">This method is not supported on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="72de3-223">無法對 <see cref="T:System.Threading.WaitHandle" /> 發出信號，因為它可能會超過最大計數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-223">The <see cref="T:System.Threading.WaitHandle" /> cannot be signaled because it would exceed its maximum count.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="72de3-224">
            <paramref name="millisecondsTimeout" /> 為 -1 以外的負數，表示無限逾時。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-224">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="72de3-225">由於執行緒結束時未釋放 Mutex，已完成等候。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-225">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="72de3-226">在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-226">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public static bool SignalAndWait (System.Threading.WaitHandle toSignal, System.Threading.WaitHandle toWaitOn, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SignalAndWait(class System.Threading.WaitHandle toSignal, class System.Threading.WaitHandle toWaitOn, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SignalAndWait (toSignal As WaitHandle, toWaitOn As WaitHandle, timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SignalAndWait(System::Threading::WaitHandle ^ toSignal, System::Threading::WaitHandle ^ toWaitOn, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member SignalAndWait : System.Threading.WaitHandle * System.Threading.WaitHandle * TimeSpan * bool -&gt; bool" Usage="System.Threading.WaitHandle.SignalAndWait (toSignal, toWaitOn, timeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toSignal" Type="System.Threading.WaitHandle" />
        <Parameter Name="toWaitOn" Type="System.Threading.WaitHandle" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="toSignal">
          <span data-ttu-id="72de3-227">要發出的 <see cref="T:System.Threading.WaitHandle" /> 信號。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-227">The <see cref="T:System.Threading.WaitHandle" /> to signal.</span>
          </span>
        </param>
        <param name="toWaitOn">
          <span data-ttu-id="72de3-228">要等候的 <see cref="T:System.Threading.WaitHandle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-228">The <see cref="T:System.Threading.WaitHandle" /> to wait on.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="72de3-229">
            <see cref="T:System.TimeSpan" />，代表要等候的間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-229">A <see cref="T:System.TimeSpan" /> that represents the interval to wait.</span>
          </span>
          <span data-ttu-id="72de3-230">如果此值為 -1，則會無限期等候。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-230">If the value is -1, the wait is infinite.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="72de3-231">
            <see langword="true" /> 表示在等候 (如果在同步內容中) 前結束內容的同步處理網域，並於之後重新取得，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-231">
              <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72de3-232">發出一個 <see cref="T:System.Threading.WaitHandle" /> 信號並等候另一個，將逾時間隔指定為 <see cref="T:System.TimeSpan" />，並指定是否要先離開內容的同步處理網域，再進入等候狀態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-232">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another, specifying the time-out interval as a <see cref="T:System.TimeSpan" /> and specifying whether to exit the synchronization domain for the context before entering the wait.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="72de3-233">如果順利完成信號發出和等候，則為 <see langword="true" />；如果完成信號發出但等候逾時，則為 <see langword="false" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-233">
              <see langword="true" /> if both the signal and the wait completed successfully, or <see langword="false" /> if the signal completed but the wait timed out.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72de3-234">這項作業不保證是不可部分完成。</span><span class="sxs-lookup"><span data-stu-id="72de3-234">This operation is not guaranteed to be atomic.</span></span> <span data-ttu-id="72de3-235">在目前的執行緒訊號後`toSignal`之前等候`toWaitOn`，另一個處理器執行的執行緒可能會發出信號`toWaitOn`或等候它。</span><span class="sxs-lookup"><span data-stu-id="72de3-235">After the current thread signals `toSignal` but before it waits on `toWaitOn`, a thread that is running on another processor might signal `toWaitOn` or wait on it.</span></span>  
  
 <span data-ttu-id="72de3-236">最大值`timeout`是<xref:System.Int32.MaxValue?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="72de3-236">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="72de3-237">如果`timeout`為零，此方法不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="72de3-237">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="72de3-238">它會測試的狀態`toWaitOn`並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="72de3-238">It tests the state of the `toWaitOn` and returns immediately.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="72de3-239">在結束內容的資訊</span><span class="sxs-lookup"><span data-stu-id="72de3-239">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="72de3-240">`exitContext`參數沒有任何作用，除非<xref:System.Threading.WaitHandle.SignalAndWait%2A>從非預設受管理的內容中呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="72de3-240">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="72de3-241">如果您的執行緒是衍生自類別的執行個體的呼叫在此情形<xref:System.ContextBoundObject>。</span><span class="sxs-lookup"><span data-stu-id="72de3-241">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="72de3-242">即使您目前正在執行的方法不是衍生自的類別上<xref:System.ContextBoundObject>，例如<xref:System.String>，您可以在非預設內容中如果<xref:System.ContextBoundObject>您目前的應用程式定義域中的堆疊上。</span><span class="sxs-lookup"><span data-stu-id="72de3-242">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="72de3-243">時的非預設內容中執行您的程式碼，在指定`true`的`exitContext`造成執行緒結束的非預設的 managed 的內容 (也就是轉換成預設內容) 執行之前<xref:System.Threading.WaitHandle.SignalAndWait%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="72de3-243">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method.</span></span> <span data-ttu-id="72de3-244">執行緒在呼叫之後返回原始的非預設內容<xref:System.Threading.WaitHandle.SignalAndWait%2A>方法完成。</span><span class="sxs-lookup"><span data-stu-id="72de3-244">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method completes.</span></span>  
  
 <span data-ttu-id="72de3-245">這有助於進行內容繫結類別具有<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>。</span><span class="sxs-lookup"><span data-stu-id="72de3-245">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="72de3-246">在此情況下，所有呼叫類別的成員會自動同步都處理，並同步處理領域是類別程式碼的整個主體。</span><span class="sxs-lookup"><span data-stu-id="72de3-246">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="72de3-247">如果成員的呼叫堆疊中的程式碼會呼叫<xref:System.Threading.WaitHandle.SignalAndWait%2A>方法，並指定`true`如`exitContext`，執行緒結束同步處理網域，讓執行緒上呼叫物件的任何成員，以繼續進行封鎖。</span><span class="sxs-lookup"><span data-stu-id="72de3-247">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="72de3-248">當<xref:System.Threading.WaitHandle.SignalAndWait%2A>方法傳回時，進行呼叫的執行緒必須等待重新輸入一次同步處理領域。</span><span class="sxs-lookup"><span data-stu-id="72de3-248">When the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="72de3-249">
            <paramref name="toSignal" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-249">
              <paramref name="toSignal" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="72de3-250">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-250">-or-</span>
          </span>
          <span data-ttu-id="72de3-251">
            <paramref name="toWaitOn" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-251">
              <paramref name="toWaitOn" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="72de3-252">在擁有 <see cref="T:System.STAThreadAttribute" /> 的執行緒上呼叫此方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-252">The method was called on a thread that has <see cref="T:System.STAThreadAttribute" />.</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="72de3-253">在 Windows 98 或 Windows Millennium Edition 上不支援這個方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-253">This method is not supported on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="72de3-254">
            <paramref name="toSignal" /> 為號誌，且已經有完整計數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-254">
              <paramref name="toSignal" /> is a semaphore, and it already has a full count.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="72de3-255">
            <paramref name="timeout" /> 判定為 -1 以外的負毫秒數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-255">
              <paramref name="timeout" /> evaluates to a negative number of milliseconds other than -1.</span>
          </span>
          <span data-ttu-id="72de3-256">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-256">-or-</span>
          </span>
          <span data-ttu-id="72de3-257">
            <paramref name="timeout" /> 大於 <see cref="F:System.Int32.MaxValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-257">
              <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="72de3-258">由於執行緒結束時未釋放 Mutex，已完成等候。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-258">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="72de3-259">在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-259">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitAll">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="72de3-260">等候指定陣列中的所有項目都收到信號。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-260">Waits for all the elements in the specified array to receive a signal.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle()) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.WaitHandle[] -&gt; bool" Usage="System.Threading.WaitHandle.WaitAll waitHandles" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="72de3-261">
            <see langword="WaitHandle" /> 陣列，包含目前執行個體將等候的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-261">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
          <span data-ttu-id="72de3-262">這個陣列不能包含相同物件的多個參考。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-262">This array cannot contain multiple references to the same object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72de3-263">等候指定陣列中的所有項目都收到信號。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-263">Waits for all the elements in the specified array to receive a signal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="72de3-264">當 <paramref name="waitHandles" /> 中的所有項目都收到信號時，則為 <see langword="true" />；否則絕不會傳回這個方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-264">
              <see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise the method never returns.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72de3-265"><xref:System.Threading.AbandonedMutexException> 是.NET Framework 2.0 版中的新功能。</span><span class="sxs-lookup"><span data-stu-id="72de3-265"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="72de3-266">在舊版中，<xref:System.Threading.WaitHandle.WaitAll%2A>方法會傳回`true`時放棄的 mutex。</span><span class="sxs-lookup"><span data-stu-id="72de3-266">In previous versions, the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="72de3-267">已放棄的 mutex 通常表示嚴重的程式碼錯誤。</span><span class="sxs-lookup"><span data-stu-id="72de3-267">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="72de3-268">如果是全系統 mutex，則可能表示，應用程式已意外終止 （例如，透過使用 Windows 工作管理員）。</span><span class="sxs-lookup"><span data-stu-id="72de3-268">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="72de3-269">例外狀況包含資訊適用於偵錯。</span><span class="sxs-lookup"><span data-stu-id="72de3-269">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="72de3-270"><xref:System.Threading.WaitHandle.WaitAll%2A>方法會傳回所有控制代碼會收到信號。</span><span class="sxs-lookup"><span data-stu-id="72de3-270">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when all the handles are signaled.</span></span> <span data-ttu-id="72de3-271">在某些實作中，若傳遞了 64 個以上的控制代碼，<xref:System.NotSupportedException>就會擲回。</span><span class="sxs-lookup"><span data-stu-id="72de3-271">On some implementations, if more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="72de3-272">如果陣列包含重複的項目，則呼叫會失敗並<xref:System.DuplicateWaitObjectException>。</span><span class="sxs-lookup"><span data-stu-id="72de3-272">If the array contains duplicates, the call fails with a <xref:System.DuplicateWaitObjectException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="72de3-273"><xref:System.Threading.WaitHandle.WaitAll%2A>擁有的執行緒上不支援方法<xref:System.STAThreadAttribute>。</span><span class="sxs-lookup"><span data-stu-id="72de3-273">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads that have <xref:System.STAThreadAttribute>.</span></span>  
  
 <span data-ttu-id="72de3-274">呼叫這個方法多載就相當於呼叫<xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29>方法多載，並指定-1 (或<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>) 的`millisecondsTimeout`並`true`如`exitContext`。</span><span class="sxs-lookup"><span data-stu-id="72de3-274">Calling this method overload is equivalent to calling the <xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> method overload and specifying -1 (or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>) for `millisecondsTimeout` and `true` for `exitContext`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="72de3-275">下列程式碼範例示範如何使用執行緒集區，以非同步方式建立和寫入檔案群組。</span><span class="sxs-lookup"><span data-stu-id="72de3-275">The following code example shows how to use the thread pool to asynchronously create and write to a group of files.</span></span> <span data-ttu-id="72de3-276">完成後，工作項目以及訊號每一個寫入作業已排入佇列。</span><span class="sxs-lookup"><span data-stu-id="72de3-276">Each write operation is queued as a work item and signals when it is finished.</span></span> <span data-ttu-id="72de3-277">主執行緒等候發出信號的所有項目，然後結束。</span><span class="sxs-lookup"><span data-stu-id="72de3-277">The main thread waits for all the items to signal and then exits.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAll1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll1/CPP/source1.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAll1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll1/CS/source1.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAll1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll1/VB/source1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="72de3-278">
            <paramref name="waitHandles" /> 參數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-278">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="72de3-279">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-279">-or-</span>
          </span>
          <span data-ttu-id="72de3-280">
            <paramref name="waitHandles" /> 陣列中的一或多個物件為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-280">One or more of the objects in the <paramref name="waitHandles" /> array are <see langword="null" />.</span>
          </span>
          <span data-ttu-id="72de3-281">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-281">-or-</span>
          </span>
          <span data-ttu-id="72de3-282">
            <paramref name="waitHandles" /> 是沒有任何項目的陣列，且 .NET Framework 版本為 2.0 或更新版本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-282">
              <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 2.0 or later.</span>
          </span>
        </exception>
        <exception cref="T:System.DuplicateWaitObjectException">
          <span data-ttu-id="72de3-283">
            <block subset="none" type="note">
              <para> 在[適用於 Microsoft Store 應用程式的 .NET](http://go.microsoft.com/fwlink/?LinkID=247912)中，或[可攜式類別庫](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)中，改為捕捉基底類別例外狀況 <see cref="T:System.ArgumentException" />。</para>
            </block>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-283">
              <block subset="none" type="note">
                <para> In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.ArgumentException" />, instead.  </para>
              </block>
            </span>
          </span>
          <span data-ttu-id="72de3-284">
            <paramref name="waitHandles" /> 陣列包含重複的項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-284">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="72de3-285">
            <paramref name="waitHandles" /> 中的物件數目超過系統允許的數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-285">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
          <span data-ttu-id="72de3-286">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-286">-or-</span>
          </span>
          <span data-ttu-id="72de3-287">
            <see cref="T:System.STAThreadAttribute" /> 屬性會套用至目前執行緒的執行緒程序，且 <paramref name="waitHandles" /> 包含多個項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-287">The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span>
          </span>
        </exception>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="72de3-288">
            <paramref name="waitHandles" /> 是沒有任何項目的陣列，且 .NET Framework 版本為 1.0 或 1.1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-288">
              <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 1.0 or 1.1.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="72de3-289">由於執行緒結束時未釋放 Mutex，已結束等候。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-289">The wait terminated because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="72de3-290">在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-290">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="72de3-291">
            <paramref name="waitHandles" /> 陣列在另一個應用程式定義域中包含 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-291">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle(), millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.WaitHandle[] * int -&gt; bool" Usage="System.Threading.WaitHandle.WaitAll (waitHandles, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="72de3-292">
            <see langword="WaitHandle" /> 陣列，包含目前執行個體將等候的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-292">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
          <span data-ttu-id="72de3-293">這個陣列無法包含相同物件 (複本) 的多個參考。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-293">This array cannot contain multiple references to the same object (duplicates).</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="72de3-294">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-294">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72de3-295">等候指定陣列中的所有項目都收到信號，使用 <see cref="T:System.Int32" /> 值來指定時間間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-295">Waits for all the elements in the specified array to receive a signal, using an <see cref="T:System.Int32" /> value to specify the time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="72de3-296">當 <paramref name="waitHandles" /> 中的所有項目都收到信號時，則為 <see langword="true" />；否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-296">
              <see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72de3-297">如果`millisecondsTimeout`為零，此方法不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="72de3-297">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="72de3-298">它會測試等候控制代碼的狀態，並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="72de3-298">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="72de3-299"><xref:System.Threading.WaitHandle.WaitAll%2A>方法會傳回在等候終止時，這表示所有控制代碼會收到信號或逾時發生時。</span><span class="sxs-lookup"><span data-stu-id="72de3-299">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when the wait terminates, which means either when all the handles are signaled or when time-out occurs.</span></span> <span data-ttu-id="72de3-300">在某些實作中，若傳遞了 64 個以上的控制代碼，<xref:System.NotSupportedException>就會擲回。</span><span class="sxs-lookup"><span data-stu-id="72de3-300">On some implementations, if more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="72de3-301">如果陣列中有重複的項目，則呼叫會失敗並<xref:System.DuplicateWaitObjectException>。</span><span class="sxs-lookup"><span data-stu-id="72de3-301">If there are duplicates in the array, the call fails with a <xref:System.DuplicateWaitObjectException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="72de3-302"><xref:System.Threading.WaitHandle.WaitAll%2A>擁有的執行緒上不支援方法<xref:System.STAThreadAttribute>。</span><span class="sxs-lookup"><span data-stu-id="72de3-302">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads that have <xref:System.STAThreadAttribute>.</span></span>  
  
 <span data-ttu-id="72de3-303">呼叫這個方法多載等同於呼叫<xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29>多載，並指定`false`如`exitContext`。</span><span class="sxs-lookup"><span data-stu-id="72de3-303">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="72de3-304">
            <paramref name="waitHandles" /> 參數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-304">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="72de3-305">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-305">-or-</span>
          </span>
          <span data-ttu-id="72de3-306">
            <paramref name="waitHandles" /> 陣列中的一或多個物件為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-306">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="72de3-307">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-307">-or-</span>
          </span>
          <span data-ttu-id="72de3-308">
            <paramref name="waitHandles" /> 是不含任何項目的陣列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-308">
              <paramref name="waitHandles" /> is an array with no elements.</span>
          </span>
        </exception>
        <exception cref="T:System.DuplicateWaitObjectException">
          <span data-ttu-id="72de3-309">
            <block subset="none" type="note">
              <para> 在[適用於 Microsoft Store 應用程式的 .NET](http://go.microsoft.com/fwlink/?LinkID=247912)中，或[可攜式類別庫](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)中，改為捕捉基底類別例外狀況 <see cref="T:System.ArgumentException" />。</para>
            </block>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-309">
              <block subset="none" type="note">
                <para> In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.ArgumentException" />, instead.  </para>
              </block>
            </span>
          </span>
          <span data-ttu-id="72de3-310">
            <paramref name="waitHandles" /> 陣列包含重複的項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-310">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="72de3-311">
            <paramref name="waitHandles" /> 中的物件數目超過系統允許的數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-311">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
          <span data-ttu-id="72de3-312">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-312">-or-</span>
          </span>
          <span data-ttu-id="72de3-313">
            <see cref="T:System.STAThreadAttribute" /> 屬性會套用至目前執行緒的執行緒程序，且 <paramref name="waitHandles" /> 包含多個項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-313">The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="72de3-314">
            <paramref name="millisecondsTimeout" /> 為 -1 以外的負數，表示無限逾時。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-314">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="72de3-315">由於執行緒結束時未釋放 Mutex，已完成等候。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-315">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="72de3-316">在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-316">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="72de3-317">
            <paramref name="waitHandles" /> 陣列在另一個應用程式定義域中包含 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-317">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle(), timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.WaitHandle[] * TimeSpan -&gt; bool" Usage="System.Threading.WaitHandle.WaitAll (waitHandles, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="72de3-318">
            <see langword="WaitHandle" /> 陣列，包含目前執行個體將等候的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-318">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
          <span data-ttu-id="72de3-319">這個陣列不能包含相同物件的多個參考。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-319">This array cannot contain multiple references to the same object.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="72de3-320">
            <see cref="T:System.TimeSpan" />，代表要等候的毫秒數；或是 <see cref="T:System.TimeSpan" />，代表永遠等候的 -1 毫秒。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-320">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds, to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72de3-321">等候指定陣列中的所有項目都收到信號，使用 <see cref="T:System.TimeSpan" /> 值來指定時間間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-321">Waits for all the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> value to specify the time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="72de3-322">當 <paramref name="waitHandles" /> 中的所有項目都收到信號時，則為 <see langword="true" />；否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-322">
              <see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72de3-323">如果`timeout`為零，此方法不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="72de3-323">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="72de3-324">它會測試等候控制代碼的狀態，並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="72de3-324">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="72de3-325"><xref:System.Threading.WaitHandle.WaitAll%2A>方法傳回時則等候會終止，這表示可能是所有控制代碼會收到信號，或發生逾時。</span><span class="sxs-lookup"><span data-stu-id="72de3-325">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when the wait terminates, which means either all the handles are signaled or a time-out occurs.</span></span> <span data-ttu-id="72de3-326">在某些實作中，若傳遞了 64 個以上的控制代碼，<xref:System.NotSupportedException>就會擲回。</span><span class="sxs-lookup"><span data-stu-id="72de3-326">On some implementations, if more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="72de3-327">如果陣列包含重複的項目，則呼叫會失敗。</span><span class="sxs-lookup"><span data-stu-id="72de3-327">If the array contains duplicates, the call will fail.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="72de3-328"><xref:System.Threading.WaitHandle.WaitAll%2A>擁有的執行緒上不支援方法<xref:System.STAThreadAttribute>。</span><span class="sxs-lookup"><span data-stu-id="72de3-328">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads that have <xref:System.STAThreadAttribute>.</span></span>  
  
 <span data-ttu-id="72de3-329">最大值`timeout`是<xref:System.Int32.MaxValue?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="72de3-329">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="72de3-330">呼叫這個方法多載等同於呼叫<xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.TimeSpan%2CSystem.Boolean%29>多載，並指定`false`如`exitContext`。</span><span class="sxs-lookup"><span data-stu-id="72de3-330">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.TimeSpan%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="72de3-331">
            <paramref name="waitHandles" /> 參數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-331">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="72de3-332">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-332">-or-</span>
          </span>
          <span data-ttu-id="72de3-333">
            <paramref name="waitHandles" /> 陣列中的一或多個物件為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-333">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="72de3-334">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-334">-or-</span>
          </span>
          <span data-ttu-id="72de3-335">
            <paramref name="waitHandles" /> 是不含任何項目的陣列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-335">
              <paramref name="waitHandles" /> is an array with no elements.</span>
          </span>
        </exception>
        <exception cref="T:System.DuplicateWaitObjectException">
          <span data-ttu-id="72de3-336">
            <block subset="none" type="note">
              <para> 在[適用於 Microsoft Store 應用程式的 .NET](http://go.microsoft.com/fwlink/?LinkID=247912)中，或[可攜式類別庫](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)中，改為捕捉基底類別例外狀況 <see cref="T:System.ArgumentException" />。</para>
            </block>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-336">
              <block subset="none" type="note">
                <para> In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.ArgumentException" />, instead.  </para>
              </block>
            </span>
          </span>
          <span data-ttu-id="72de3-337">
            <paramref name="waitHandles" /> 陣列包含重複的項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-337">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="72de3-338">
            <paramref name="waitHandles" /> 中的物件數目超過系統允許的數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-338">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
          <span data-ttu-id="72de3-339">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-339">-or-</span>
          </span>
          <span data-ttu-id="72de3-340">
            <see cref="T:System.STAThreadAttribute" /> 屬性會套用至目前執行緒的執行緒程序，且 <paramref name="waitHandles" /> 包含多個項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-340">The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="72de3-341">
            <paramref name="timeout" /> 為 -1 毫秒以外的負數，表示無限逾時。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-341">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span>
          </span>
          <span data-ttu-id="72de3-342">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-342">-or-</span>
          </span>
          <span data-ttu-id="72de3-343">
            <paramref name="timeout" /> 大於 <see cref="F:System.Int32.MaxValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-343">
              <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="72de3-344">由於執行緒結束時未釋放 Mutex，已結束等候。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-344">The wait terminated because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="72de3-345">在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-345">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="72de3-346">
            <paramref name="waitHandles" /> 陣列在另一個應用程式定義域中包含 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-346">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle(), millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.WaitHandle[] * int * bool -&gt; bool" Usage="System.Threading.WaitHandle.WaitAll (waitHandles, millisecondsTimeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="72de3-347">
            <see langword="WaitHandle" /> 陣列，包含目前執行個體將等候的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-347">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
          <span data-ttu-id="72de3-348">這個陣列無法包含相同物件 (複本) 的多個參考。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-348">This array cannot contain multiple references to the same object (duplicates).</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="72de3-349">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-349">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="72de3-350">
            <see langword="true" /> 表示在等候 (如果在同步內容中) 前結束內容的同步處理網域，並於之後重新取得，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-350">
              <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72de3-351">等候指定陣列中的所有項目都收到信號，使用 <see cref="T:System.Int32" /> 值來指定時間間隔，並指定是否要先離開同步處理網域，再開始等候。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-351">Waits for all the elements in the specified array to receive a signal, using an <see cref="T:System.Int32" /> value to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="72de3-352">當 <paramref name="waitHandles" /> 中的所有項目都收到信號時，則為 <see langword="true" />；否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-352">
              <see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72de3-353">如果`millisecondsTimeout`為零，此方法不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="72de3-353">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="72de3-354">它會測試等候控制代碼的狀態，並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="72de3-354">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="72de3-355"><xref:System.Threading.AbandonedMutexException> 是.NET Framework 2.0 版中的新功能。</span><span class="sxs-lookup"><span data-stu-id="72de3-355"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="72de3-356">在舊版中，<xref:System.Threading.WaitHandle.WaitAll%2A>方法會傳回`true`時放棄的 mutex。</span><span class="sxs-lookup"><span data-stu-id="72de3-356">In previous versions, the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="72de3-357">已放棄的 mutex 通常表示嚴重的程式碼錯誤。</span><span class="sxs-lookup"><span data-stu-id="72de3-357">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="72de3-358">如果是全系統 mutex，則可能表示，應用程式已意外終止 （例如，透過使用 Windows 工作管理員）。</span><span class="sxs-lookup"><span data-stu-id="72de3-358">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="72de3-359">例外狀況包含資訊適用於偵錯。</span><span class="sxs-lookup"><span data-stu-id="72de3-359">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="72de3-360"><xref:System.Threading.WaitHandle.WaitAll%2A>方法會傳回在等候終止時，這表示所有控制代碼會收到信號或逾時發生時。</span><span class="sxs-lookup"><span data-stu-id="72de3-360">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when the wait terminates, which means either when all the handles are signaled or when time-out occurs.</span></span> <span data-ttu-id="72de3-361">在某些實作中，若傳遞了 64 個以上的控制代碼，<xref:System.NotSupportedException>就會擲回。</span><span class="sxs-lookup"><span data-stu-id="72de3-361">On some implementations, if more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="72de3-362">如果陣列中有重複的項目，則呼叫會失敗並<xref:System.DuplicateWaitObjectException>。</span><span class="sxs-lookup"><span data-stu-id="72de3-362">If there are duplicates in the array, the call fails with a <xref:System.DuplicateWaitObjectException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="72de3-363"><xref:System.Threading.WaitHandle.WaitAll%2A>擁有的執行緒上不支援方法<xref:System.STAThreadAttribute>。</span><span class="sxs-lookup"><span data-stu-id="72de3-363">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads that have <xref:System.STAThreadAttribute>.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="72de3-364">在結束內容的資訊</span><span class="sxs-lookup"><span data-stu-id="72de3-364">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="72de3-365">`exitContext`參數沒有任何作用，除非<xref:System.Threading.WaitHandle.WaitAll%2A>從非預設受管理的內容中呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="72de3-365">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitAll%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="72de3-366">如果您的執行緒是衍生自類別的執行個體的呼叫在此情形<xref:System.ContextBoundObject>。</span><span class="sxs-lookup"><span data-stu-id="72de3-366">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="72de3-367">即使您目前正在執行的方法不衍生自的類別上<xref:System.ContextBoundObject>，例如<xref:System.String>，您可以在非預設內容中如果<xref:System.ContextBoundObject>您目前的應用程式定義域中的堆疊上。</span><span class="sxs-lookup"><span data-stu-id="72de3-367">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="72de3-368">時的非預設內容中執行您的程式碼，在指定`true`的`exitContext`造成執行緒結束的非預設的 managed 的內容 (也就是轉換成預設內容) 執行之前<xref:System.Threading.WaitHandle.WaitAll%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="72de3-368">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitAll%2A> method.</span></span> <span data-ttu-id="72de3-369">執行緒在呼叫之後返回原始的非預設內容<xref:System.Threading.WaitHandle.WaitAll%2A>方法完成。</span><span class="sxs-lookup"><span data-stu-id="72de3-369">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitAll%2A> method completes.</span></span>  
  
 <span data-ttu-id="72de3-370">這有助於進行內容繫結類別具有<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>屬性。</span><span class="sxs-lookup"><span data-stu-id="72de3-370">This can be useful when the context-bound class has the <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> attribute.</span></span> <span data-ttu-id="72de3-371">在此情況下，所有呼叫類別的成員會自動同步都處理，並同步處理領域是類別程式碼的整個主體。</span><span class="sxs-lookup"><span data-stu-id="72de3-371">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="72de3-372">如果成員的呼叫堆疊中的程式碼會呼叫<xref:System.Threading.WaitHandle.WaitAll%2A>方法，並指定`true`如`exitContext`，執行緒結束同步處理網域，讓執行緒上呼叫物件的任何成員，以繼續進行封鎖。</span><span class="sxs-lookup"><span data-stu-id="72de3-372">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitAll%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="72de3-373">當<xref:System.Threading.WaitHandle.WaitAll%2A>方法傳回時，進行呼叫的執行緒必須等待重新輸入一次同步處理領域。</span><span class="sxs-lookup"><span data-stu-id="72de3-373">When the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="72de3-374">下列程式碼範例示範如何使用執行緒集區，以非同步方式建立和寫入檔案群組。</span><span class="sxs-lookup"><span data-stu-id="72de3-374">The following code example shows how to use the thread pool to asynchronously create and write to a group of files.</span></span> <span data-ttu-id="72de3-375">完成後，工作項目以及訊號每一個寫入作業已排入佇列。</span><span class="sxs-lookup"><span data-stu-id="72de3-375">Each write operation is queued as a work item and signals when it is finished.</span></span> <span data-ttu-id="72de3-376">主執行緒等候發出信號的所有項目，然後結束。</span><span class="sxs-lookup"><span data-stu-id="72de3-376">The main thread waits for all the items to signal and then exits.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAll2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAll2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll2/CS/source2.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAll2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="72de3-377">
            <paramref name="waitHandles" /> 參數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-377">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="72de3-378">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-378">-or-</span>
          </span>
          <span data-ttu-id="72de3-379">
            <paramref name="waitHandles" /> 陣列中的一或多個物件為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-379">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="72de3-380">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-380">-or-</span>
          </span>
          <span data-ttu-id="72de3-381">
            <paramref name="waitHandles" /> 是沒有任何項目的陣列，且 .NET Framework 版本為 2.0 或更新版本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-381">
              <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 2.0 or later.</span>
          </span>
        </exception>
        <exception cref="T:System.DuplicateWaitObjectException">
          <span data-ttu-id="72de3-382">
            <paramref name="waitHandles" /> 陣列包含重複的項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-382">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="72de3-383">
            <paramref name="waitHandles" /> 中的物件數目超過系統允許的數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-383">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
          <span data-ttu-id="72de3-384">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-384">-or-</span>
          </span>
          <span data-ttu-id="72de3-385">
            <see cref="T:System.STAThreadAttribute" /> 屬性會套用至目前執行緒的執行緒程序，且 <paramref name="waitHandles" /> 包含多個項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-385">The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span>
          </span>
        </exception>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="72de3-386">
            <paramref name="waitHandles" /> 是沒有任何項目的陣列，且 .NET Framework 版本為 1.0 或 1.1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-386">
              <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 1.0 or 1.1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="72de3-387">
            <paramref name="millisecondsTimeout" /> 為 -1 以外的負數，表示無限逾時。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-387">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="72de3-388">由於執行緒結束時未釋放 Mutex，已完成等候。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-388">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="72de3-389">在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-389">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="72de3-390">
            <paramref name="waitHandles" /> 陣列在另一個應用程式定義域中包含 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-390">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle(), timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.WaitHandle[] * TimeSpan * bool -&gt; bool" Usage="System.Threading.WaitHandle.WaitAll (waitHandles, timeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="72de3-391">
            <see langword="WaitHandle" /> 陣列，包含目前執行個體將等候的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-391">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
          <span data-ttu-id="72de3-392">這個陣列不能包含相同物件的多個參考。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-392">This array cannot contain multiple references to the same object.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="72de3-393">
            <see cref="T:System.TimeSpan" />，代表要等候的毫秒數；或是 <see cref="T:System.TimeSpan" />，代表永遠等候的 -1 毫秒。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-393">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds, to wait indefinitely.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="72de3-394">
            <see langword="true" /> 表示在等候 (如果在同步內容中) 前結束內容的同步處理網域，並於之後重新取得，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-394">
              <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72de3-395">等候指定陣列中的所有項目都收到信號，使用 <see cref="T:System.TimeSpan" /> 值來指定時間間隔，並指定是否要先離開同步處理網域，再開始等候。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-395">Waits for all the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> value to specify the time interval, and specifying whether to exit the synchronization domain before the wait.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="72de3-396">當 <paramref name="waitHandles" /> 中的所有元素都收到訊號時，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-396">
              <see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72de3-397">如果`timeout`為零，此方法不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="72de3-397">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="72de3-398">它會測試等候控制代碼的狀態，並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="72de3-398">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="72de3-399"><xref:System.Threading.AbandonedMutexException> 是.NET Framework 2.0 版中的新功能。</span><span class="sxs-lookup"><span data-stu-id="72de3-399"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="72de3-400">在舊版中，<xref:System.Threading.WaitHandle.WaitAll%2A>方法會傳回`true`時放棄的 mutex。</span><span class="sxs-lookup"><span data-stu-id="72de3-400">In previous versions, the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="72de3-401">已放棄的 mutex 通常表示嚴重的程式碼錯誤。</span><span class="sxs-lookup"><span data-stu-id="72de3-401">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="72de3-402">如果是全系統 mutex，則可能表示，應用程式已意外終止 （例如，透過使用 Windows 工作管理員）。</span><span class="sxs-lookup"><span data-stu-id="72de3-402">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="72de3-403">例外狀況包含資訊適用於偵錯。</span><span class="sxs-lookup"><span data-stu-id="72de3-403">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="72de3-404"><xref:System.Threading.WaitHandle.WaitAll%2A>方法傳回時則等候會終止，這表示可能是所有控制代碼會收到信號，或發生逾時。</span><span class="sxs-lookup"><span data-stu-id="72de3-404">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when the wait terminates, which means either all the handles are signaled or a time-out occurs.</span></span> <span data-ttu-id="72de3-405">在某些實作中，若傳遞了 64 個以上的控制代碼，<xref:System.NotSupportedException>就會擲回。</span><span class="sxs-lookup"><span data-stu-id="72de3-405">On some implementations, if more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="72de3-406">如果陣列包含重複的項目，則呼叫會失敗。</span><span class="sxs-lookup"><span data-stu-id="72de3-406">If the array contains duplicates, the call will fail.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="72de3-407"><xref:System.Threading.WaitHandle.WaitAll%2A>擁有的執行緒上不支援方法<xref:System.STAThreadAttribute>。</span><span class="sxs-lookup"><span data-stu-id="72de3-407">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads that have <xref:System.STAThreadAttribute>.</span></span>  
  
 <span data-ttu-id="72de3-408">最大值`timeout`是<xref:System.Int32.MaxValue?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="72de3-408">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="72de3-409">在結束內容的資訊</span><span class="sxs-lookup"><span data-stu-id="72de3-409">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="72de3-410">`exitContext`參數沒有任何作用，除非<xref:System.Threading.WaitHandle.WaitAll%2A>從非預設受管理的內容中呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="72de3-410">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitAll%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="72de3-411">如果您的執行緒是衍生自類別的執行個體的呼叫在此情形<xref:System.ContextBoundObject>。</span><span class="sxs-lookup"><span data-stu-id="72de3-411">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="72de3-412">即使您目前正在執行的方法不衍生自的類別上<xref:System.ContextBoundObject>，例如<xref:System.String>，您可以在非預設內容中如果<xref:System.ContextBoundObject>您目前的應用程式定義域中的堆疊上。</span><span class="sxs-lookup"><span data-stu-id="72de3-412">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="72de3-413">時的非預設內容中執行您的程式碼，在指定`true`的`exitContext`造成執行緒結束的非預設的 managed 的內容 (也就是轉換成預設內容) 執行之前<xref:System.Threading.WaitHandle.WaitAll%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="72de3-413">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitAll%2A> method.</span></span> <span data-ttu-id="72de3-414">它會傳回呼叫之後為原始的非預設內容<xref:System.Threading.WaitHandle.WaitAll%2A>方法完成。</span><span class="sxs-lookup"><span data-stu-id="72de3-414">It returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitAll%2A> method completes.</span></span>  
  
 <span data-ttu-id="72de3-415">這有助於進行內容繫結類別具有<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>。</span><span class="sxs-lookup"><span data-stu-id="72de3-415">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="72de3-416">在此情況下，所有呼叫類別的成員會自動同步都處理，並同步處理領域是類別程式碼的整個主體。</span><span class="sxs-lookup"><span data-stu-id="72de3-416">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="72de3-417">如果成員的呼叫堆疊中的程式碼會呼叫<xref:System.Threading.WaitHandle.WaitAll%2A>方法，並指定`true`如`exitContext`，執行緒結束同步處理網域，讓執行緒上呼叫物件的任何成員，以繼續進行封鎖。</span><span class="sxs-lookup"><span data-stu-id="72de3-417">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitAll%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="72de3-418">當<xref:System.Threading.WaitHandle.WaitAll%2A>方法傳回時，進行呼叫的執行緒必須等待重新輸入一次同步處理領域。</span><span class="sxs-lookup"><span data-stu-id="72de3-418">When the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="72de3-419">下列程式碼範例示範如何使用執行緒集區，以非同步方式建立和寫入檔案群組。</span><span class="sxs-lookup"><span data-stu-id="72de3-419">The following code example shows how to use the thread pool to asynchronously create and write to a group of files.</span></span> <span data-ttu-id="72de3-420">完成後，工作項目以及訊號每一個寫入作業已排入佇列。</span><span class="sxs-lookup"><span data-stu-id="72de3-420">Each write operation is queued as a work item and signals when it is finished.</span></span> <span data-ttu-id="72de3-421">主執行緒等候發出信號的所有項目，然後結束。</span><span class="sxs-lookup"><span data-stu-id="72de3-421">The main thread waits for all the items to signal and then exits.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAll3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll3/CPP/source3.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAll3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll3/CS/source3.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAll3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll3/VB/source3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="72de3-422">
            <paramref name="waitHandles" /> 參數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-422">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="72de3-423">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-423">-or-</span>
          </span>
          <span data-ttu-id="72de3-424">
            <paramref name="waitHandles" /> 陣列中的一或多個物件為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-424">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="72de3-425">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-425">-or-</span>
          </span>
          <span data-ttu-id="72de3-426">
            <paramref name="waitHandles" /> 是沒有任何項目的陣列，且 .NET Framework 版本為 2.0 或更新版本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-426">
              <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 2.0 or later.</span>
          </span>
        </exception>
        <exception cref="T:System.DuplicateWaitObjectException">
          <span data-ttu-id="72de3-427">
            <paramref name="waitHandles" /> 陣列包含重複的項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-427">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="72de3-428">
            <paramref name="waitHandles" /> 中的物件數目超過系統允許的數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-428">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
          <span data-ttu-id="72de3-429">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-429">-or-</span>
          </span>
          <span data-ttu-id="72de3-430">
            <see cref="T:System.STAThreadAttribute" /> 屬性會套用至目前執行緒的執行緒程序，且 <paramref name="waitHandles" /> 包含多個項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-430">The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span>
          </span>
        </exception>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="72de3-431">
            <paramref name="waitHandles" /> 是沒有任何項目的陣列，且 .NET Framework 版本為 1.0 或 1.1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-431">
              <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 1.0 or 1.1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="72de3-432">
            <paramref name="timeout" /> 為 -1 毫秒以外的負數，表示無限逾時。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-432">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span>
          </span>
          <span data-ttu-id="72de3-433">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-433">-or-</span>
          </span>
          <span data-ttu-id="72de3-434">
            <paramref name="timeout" /> 大於 <see cref="F:System.Int32.MaxValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-434">
              <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="72de3-435">由於執行緒結束時未釋放 Mutex，已結束等候。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-435">The wait terminated because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="72de3-436">在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-436">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="72de3-437">
            <paramref name="waitHandles" /> 陣列在另一個應用程式定義域中包含 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-437">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitAny">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="72de3-438">等候指定陣列中有任何項目收到信號。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-438">Waits for any of the elements in the specified array to receive a signal.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.WaitHandle[] -&gt; int" Usage="System.Threading.WaitHandle.WaitAny waitHandles" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="72de3-439">
            <see langword="WaitHandle" /> 陣列，包含目前執行個體將等候的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-439">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72de3-440">等候指定陣列中有任何項目收到信號。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-440">Waits for any of the elements in the specified array to receive a signal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="72de3-441">滿足等候條件之物件的陣列索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-441">The array index of the object that satisfied the wait.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72de3-442"><xref:System.Threading.AbandonedMutexException> 是.NET Framework 2.0 版中的新功能。</span><span class="sxs-lookup"><span data-stu-id="72de3-442"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="72de3-443">在舊版中，<xref:System.Threading.WaitHandle.WaitAny%2A>方法會傳回`true`如果等候完成，因為已放棄 mutex。</span><span class="sxs-lookup"><span data-stu-id="72de3-443">In previous versions, the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns `true` if the wait completes because a mutex is abandoned.</span></span> <span data-ttu-id="72de3-444">已放棄的 mutex 通常表示嚴重的程式碼錯誤。</span><span class="sxs-lookup"><span data-stu-id="72de3-444">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="72de3-445">如果是全系統 mutex，則可能表示，應用程式已意外終止 （例如，透過使用 Windows 工作管理員）。</span><span class="sxs-lookup"><span data-stu-id="72de3-445">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="72de3-446">例外狀況包含資訊適用於偵錯。</span><span class="sxs-lookup"><span data-stu-id="72de3-446">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="72de3-447"><xref:System.Threading.WaitHandle.WaitAny%2A>方法會擲回<xref:System.Threading.AbandonedMutexException>只等待完成時因為遭到放棄的 mutex。</span><span class="sxs-lookup"><span data-stu-id="72de3-447">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="72de3-448">如果`waitHandles`包含具有較低的索引編號，已放棄的 mutex，比釋放的 mutex<xref:System.Threading.WaitHandle.WaitAny%2A>方法正常完成，並不會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="72de3-448">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="72de3-449">在版本早於 2.0 版中，如果執行緒結束或中止而不需要明確地釋放的.NET framework <xref:System.Threading.Mutex>，且`Mutex`位於索引 0 （零），在`WaitAny`陣列在另一個執行緒，所傳回的索引上`WaitAny`是128 而不是 0。</span><span class="sxs-lookup"><span data-stu-id="72de3-449">In versions of the .NET Framework earlier than version 2.0, if a thread exits or aborts without explicitly releasing a <xref:System.Threading.Mutex>, and that `Mutex` is at index 0 (zero) in a `WaitAny` array on another thread, the index returned by `WaitAny` is 128 instead of 0.</span></span>  
  
 <span data-ttu-id="72de3-450">這個方法會傳回任何控制代碼會收到信號。</span><span class="sxs-lookup"><span data-stu-id="72de3-450">This method returns when any handle is signaled.</span></span> <span data-ttu-id="72de3-451">如果在呼叫期間，多個物件會變成收到訊號，則傳回的值會是物件的已收到訊號具有已收到訊號的所有物件的最小的索引值的陣列索引。</span><span class="sxs-lookup"><span data-stu-id="72de3-451">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span> <span data-ttu-id="72de3-452">在某些實作中，如果有多個傳遞 64 的控制代碼，<xref:System.NotSupportedException>就會擲回。</span><span class="sxs-lookup"><span data-stu-id="72de3-452">On some implementations, if more that 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span>  
  
 <span data-ttu-id="72de3-453">呼叫這個方法多載就相當於呼叫<xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29>方法多載，並指定-1 (或<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>) 的`millisecondsTimeout`並`true`如`exitContext`。</span><span class="sxs-lookup"><span data-stu-id="72de3-453">Calling this method overload is equivalent to calling the <xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> method overload and specifying -1 (or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>) for `millisecondsTimeout` and `true` for `exitContext`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="72de3-454">下列程式碼範例示範如何呼叫<xref:System.Threading.WaitHandle.WaitAny%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="72de3-454">The following code example demonstrates calling the <xref:System.Threading.WaitHandle.WaitAny%2A> method.</span></span>  
  
 [!code-cpp[WaitHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/WaitHandle/cpp/WaitHandle.cpp#1)]
 [!code-csharp[WaitHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/WaitHandle/CS/WaitHandle.cs#1)]
 [!code-vb[WaitHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/WaitHandle/VB/WaitHandle.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="72de3-455">
            <paramref name="waitHandles" /> 參數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-455">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="72de3-456">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-456">-or-</span>
          </span>
          <span data-ttu-id="72de3-457">
            <paramref name="waitHandles" /> 陣列中的一或多個物件為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-457">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="72de3-458">
            <paramref name="waitHandles" /> 中的物件數目超過系統允許的數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-458">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
        </exception>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="72de3-459">
            <paramref name="waitHandles" /> 是不具有項目的陣列，且 .NET Framework 版本為 1.0 或 1.1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-459">
              <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 1.0 or 1.1.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="72de3-460">由於執行緒結束時未釋放 Mutex，已完成等候。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-460">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="72de3-461">在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-461">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="72de3-462">
            <paramref name="waitHandles" /> 是不具有元素的陣列，且 .NET Framework 版本為 2.0 (含) 以後版本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-462">
              <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 2.0 or later.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="72de3-463">
            <paramref name="waitHandles" /> 陣列在另一個應用程式定義域中包含 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-463">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle(), millisecondsTimeout As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.WaitHandle[] * int -&gt; int" Usage="System.Threading.WaitHandle.WaitAny (waitHandles, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="72de3-464">
            <see langword="WaitHandle" /> 陣列，包含目前執行個體將等候的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-464">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="72de3-465">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-465">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72de3-466">等候指定之陣列中有任何項目收到信號，使用 32 位元帶正負號的整數以指定時間間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-466">Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed integer to specify the time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="72de3-467">滿足等候條件之物件的陣列索引；如果沒有物件滿足等候條件，而且已經過相當於 <paramref name="millisecondsTimeout" /> 的時間間隔，則為 <see cref="F:System.Threading.WaitHandle.WaitTimeout" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-467">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="millisecondsTimeout" /> has passed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72de3-468">如果`millisecondsTimeout`為零，此方法不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="72de3-468">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="72de3-469">它會測試等候控制代碼的狀態，並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="72de3-469">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="72de3-470"><xref:System.Threading.WaitHandle.WaitAny%2A>方法會擲回<xref:System.Threading.AbandonedMutexException>只等待完成時因為遭到放棄的 mutex。</span><span class="sxs-lookup"><span data-stu-id="72de3-470">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="72de3-471">如果`waitHandles`包含具有較低的索引編號，已放棄的 mutex，比釋放的 mutex<xref:System.Threading.WaitHandle.WaitAny%2A>方法正常完成，並不會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="72de3-471">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
 <span data-ttu-id="72de3-472">這個方法傳回時則等候會終止，任何控制代碼會收到信號或發生逾時。</span><span class="sxs-lookup"><span data-stu-id="72de3-472">This method returns when the wait terminates, either when any of the handles are signaled or when a timeout occurs.</span></span> <span data-ttu-id="72de3-473">如果在呼叫期間，多個物件會變成收到訊號，則傳回的值會是物件的已收到訊號具有已收到訊號的所有物件的最小的索引值的陣列索引。</span><span class="sxs-lookup"><span data-stu-id="72de3-473">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span> <span data-ttu-id="72de3-474">在某些實作中，如果有多個傳遞 64 的控制代碼，<xref:System.NotSupportedException>就會擲回。</span><span class="sxs-lookup"><span data-stu-id="72de3-474">On some implementations, if more that 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span>  
  
 <span data-ttu-id="72de3-475">呼叫這個方法多載等同於呼叫<xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29>多載，並指定`false`如`exitContext`。</span><span class="sxs-lookup"><span data-stu-id="72de3-475">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="72de3-476">
            <paramref name="waitHandles" /> 參數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-476">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="72de3-477">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-477">-or-</span>
          </span>
          <span data-ttu-id="72de3-478">
            <paramref name="waitHandles" /> 陣列中的一或多個物件為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-478">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="72de3-479">
            <paramref name="waitHandles" /> 中的物件數目超過系統允許的數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-479">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="72de3-480">
            <paramref name="millisecondsTimeout" /> 為 -1 以外的負數，表示無限逾時。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-480">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="72de3-481">由於執行緒結束時未釋放 Mutex，已完成等候。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-481">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="72de3-482">在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-482">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="72de3-483">
            <paramref name="waitHandles" /> 是不含任何項目的陣列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-483">
              <paramref name="waitHandles" /> is an array with no elements.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="72de3-484">
            <paramref name="waitHandles" /> 陣列在另一個應用程式定義域中包含 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-484">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle(), timeout As TimeSpan) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.WaitHandle[] * TimeSpan -&gt; int" Usage="System.Threading.WaitHandle.WaitAny (waitHandles, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="72de3-485">
            <see langword="WaitHandle" /> 陣列，包含目前執行個體將等候的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-485">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="72de3-486">
            <see cref="T:System.TimeSpan" />，代表等候毫秒數；或是 <see cref="T:System.TimeSpan" />，代表無限期等候的 -1 毫秒。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-486">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72de3-487">等候指定陣列中的所有項目都收到信號，使用 <see cref="T:System.TimeSpan" /> 來指定時間間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-487">Waits for any of the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="72de3-488">滿足等候條件之物件的陣列索引；如果沒有物件滿足等候條件，而且已經過相當於 <paramref name="timeout" /> 的時間間隔，則為 <see cref="F:System.Threading.WaitHandle.WaitTimeout" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-488">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="timeout" /> has passed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72de3-489">如果`timeout`為零，此方法不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="72de3-489">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="72de3-490">它會測試等候控制代碼的狀態，並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="72de3-490">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="72de3-491"><xref:System.Threading.WaitHandle.WaitAny%2A>方法會擲回<xref:System.Threading.AbandonedMutexException>只等待完成時因為遭到放棄的 mutex。</span><span class="sxs-lookup"><span data-stu-id="72de3-491">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="72de3-492">如果`waitHandles`包含具有較低的索引編號，已放棄的 mutex，比釋放的 mutex<xref:System.Threading.WaitHandle.WaitAny%2A>方法正常完成，並不會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="72de3-492">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
 <span data-ttu-id="72de3-493">這個方法傳回時則等候會終止，任何控制代碼會收到信號或逾時發生時。</span><span class="sxs-lookup"><span data-stu-id="72de3-493">This method returns when the wait terminates, either when any of the handles are signaled or when a time-out occurs.</span></span> <span data-ttu-id="72de3-494">如果在呼叫期間，多個物件會變成收到訊號，則傳回的值會是物件的已收到訊號具有已收到訊號的所有物件的最小的索引值的陣列索引。</span><span class="sxs-lookup"><span data-stu-id="72de3-494">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span> <span data-ttu-id="72de3-495">在某些實作中，如果有多個傳遞 64 的控制代碼，<xref:System.NotSupportedException>就會擲回。</span><span class="sxs-lookup"><span data-stu-id="72de3-495">On some implementations, if more that 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span>  
  
 <span data-ttu-id="72de3-496">最大值`timeout`是<xref:System.Int32.MaxValue?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="72de3-496">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="72de3-497">呼叫這個方法多載等同於呼叫<xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.TimeSpan%2CSystem.Boolean%29>多載，並指定`false`如`exitContext`。</span><span class="sxs-lookup"><span data-stu-id="72de3-497">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.TimeSpan%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="72de3-498">
            <paramref name="waitHandles" /> 參數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-498">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="72de3-499">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-499">-or-</span>
          </span>
          <span data-ttu-id="72de3-500">
            <paramref name="waitHandles" /> 陣列中的一或多個物件為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-500">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="72de3-501">
            <paramref name="waitHandles" /> 中的物件數目超過系統允許的數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-501">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="72de3-502">
            <paramref name="timeout" /> 為 -1 毫秒以外的負數，表示無限逾時。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-502">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span>
          </span>
          <span data-ttu-id="72de3-503">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-503">-or-</span>
          </span>
          <span data-ttu-id="72de3-504">
            <paramref name="timeout" /> 大於 <see cref="F:System.Int32.MaxValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-504">
              <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="72de3-505">由於執行緒結束時未釋放 Mutex，已完成等候。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-505">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="72de3-506">在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-506">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="72de3-507">
            <paramref name="waitHandles" /> 是不含任何項目的陣列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-507">
              <paramref name="waitHandles" /> is an array with no elements.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="72de3-508">
            <paramref name="waitHandles" /> 陣列在另一個應用程式定義域中包含 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-508">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle(), millisecondsTimeout As Integer, exitContext As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.WaitHandle[] * int * bool -&gt; int" Usage="System.Threading.WaitHandle.WaitAny (waitHandles, millisecondsTimeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="72de3-509">
            <see langword="WaitHandle" /> 陣列，包含目前執行個體將等候的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-509">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="72de3-510">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-510">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="72de3-511">
            <see langword="true" /> 表示在等候 (如果在同步內容中) 前結束內容的同步處理網域，並於之後重新取得，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-511">
              <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72de3-512">等候指定陣列中有任何項目收到信號；使用 32 位元帶正負號的整數 (Signed Integer) 來指定時間間隔，並指定是否在等候之前先離開同步處理領域。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-512">Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed integer to specify the time interval, and specifying whether to exit the synchronization domain before the wait.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="72de3-513">滿足等候條件之物件的陣列索引；如果沒有物件滿足等候條件，而且已經過相當於 <paramref name="millisecondsTimeout" /> 的時間間隔，則為 <see cref="F:System.Threading.WaitHandle.WaitTimeout" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-513">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="millisecondsTimeout" /> has passed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72de3-514">如果`millisecondsTimeout`為零，此方法不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="72de3-514">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="72de3-515">它會測試等候控制代碼的狀態，並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="72de3-515">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="72de3-516"><xref:System.Threading.AbandonedMutexException> 是.NET Framework 2.0 版中的新功能。</span><span class="sxs-lookup"><span data-stu-id="72de3-516"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="72de3-517">在舊版中，<xref:System.Threading.WaitHandle.WaitAny%2A>方法會傳回`true`如果等候完成，因為已放棄 mutex。</span><span class="sxs-lookup"><span data-stu-id="72de3-517">In previous versions, the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns `true` if the wait completes because a mutex is abandoned.</span></span> <span data-ttu-id="72de3-518">已放棄的 mutex 通常表示嚴重的程式碼錯誤。</span><span class="sxs-lookup"><span data-stu-id="72de3-518">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="72de3-519">如果是全系統 mutex，則可能表示，應用程式已意外終止 （例如，透過使用 Windows 工作管理員）。</span><span class="sxs-lookup"><span data-stu-id="72de3-519">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="72de3-520">例外狀況包含資訊適用於偵錯。</span><span class="sxs-lookup"><span data-stu-id="72de3-520">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="72de3-521"><xref:System.Threading.WaitHandle.WaitAny%2A>方法會擲回<xref:System.Threading.AbandonedMutexException>只等待完成時因為遭到放棄的 mutex。</span><span class="sxs-lookup"><span data-stu-id="72de3-521">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="72de3-522">如果`waitHandles`包含具有較低的索引編號，已放棄的 mutex，比釋放的 mutex<xref:System.Threading.WaitHandle.WaitAny%2A>方法正常完成，並不會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="72de3-522">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="72de3-523">在版本早於 2.0 版中，如果執行緒結束或中止而不需要明確地釋放的.NET framework <xref:System.Threading.Mutex>，且`Mutex`位於索引 0 （零），在`WaitAny`陣列在另一個執行緒，所傳回的索引上`WaitAny`是128 而不是 0。</span><span class="sxs-lookup"><span data-stu-id="72de3-523">In versions of the .NET Framework earlier than version 2.0, if a thread exits or aborts without explicitly releasing a <xref:System.Threading.Mutex>, and that `Mutex` is at index 0 (zero) in a `WaitAny` array on another thread, the index returned by `WaitAny` is 128 instead of 0.</span></span>  
  
 <span data-ttu-id="72de3-524">這個方法傳回時則等候會終止，任何控制代碼會收到信號或發生逾時。</span><span class="sxs-lookup"><span data-stu-id="72de3-524">This method returns when the wait terminates, either when any of the handles are signaled or when a timeout occurs.</span></span> <span data-ttu-id="72de3-525">如果在呼叫期間，多個物件會變成收到訊號，則傳回的值會是物件的已收到訊號具有已收到訊號的所有物件的最小的索引值的陣列索引。</span><span class="sxs-lookup"><span data-stu-id="72de3-525">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span> <span data-ttu-id="72de3-526">在某些實作中，如果有多個傳遞 64 的控制代碼，<xref:System.NotSupportedException>就會擲回。</span><span class="sxs-lookup"><span data-stu-id="72de3-526">On some implementations, if more that 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="72de3-527">在結束內容的資訊</span><span class="sxs-lookup"><span data-stu-id="72de3-527">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="72de3-528">`exitContext`參數沒有任何作用，除非<xref:System.Threading.WaitHandle.WaitAny%2A>從非預設受管理的內容中呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="72de3-528">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitAny%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="72de3-529">如果您的執行緒是衍生自類別的執行個體的呼叫在此情形<xref:System.ContextBoundObject>。</span><span class="sxs-lookup"><span data-stu-id="72de3-529">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="72de3-530">即使您目前正在執行的方法不是衍生自的類別上<xref:System.ContextBoundObject>，例如<xref:System.String>，您可以在非預設內容中如果<xref:System.ContextBoundObject>您目前的應用程式定義域中的堆疊上。</span><span class="sxs-lookup"><span data-stu-id="72de3-530">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="72de3-531">時的非預設內容中執行您的程式碼，在指定`true`的`exitContext`造成執行緒結束的非預設的 managed 的內容 (也就是轉換成預設內容) 執行之前<xref:System.Threading.WaitHandle.WaitAny%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="72de3-531">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitAny%2A> method.</span></span> <span data-ttu-id="72de3-532">執行緒在呼叫之後返回原始的非預設內容<xref:System.Threading.WaitHandle.WaitAny%2A>方法完成。</span><span class="sxs-lookup"><span data-stu-id="72de3-532">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes.</span></span>  
  
 <span data-ttu-id="72de3-533">這有助於進行內容繫結類別具有<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>。</span><span class="sxs-lookup"><span data-stu-id="72de3-533">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="72de3-534">在此情況下，所有呼叫類別的成員會自動同步都處理，並同步處理領域是類別程式碼的整個主體。</span><span class="sxs-lookup"><span data-stu-id="72de3-534">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="72de3-535">如果成員的呼叫堆疊中的程式碼會呼叫<xref:System.Threading.WaitHandle.WaitAny%2A>方法，並指定`true`如`exitContext`，執行緒結束同步處理網域，讓執行緒上呼叫物件的任何成員，以繼續進行封鎖。</span><span class="sxs-lookup"><span data-stu-id="72de3-535">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitAny%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="72de3-536">當<xref:System.Threading.WaitHandle.WaitAny%2A>方法傳回時，進行呼叫的執行緒必須等待重新輸入一次同步處理領域。</span><span class="sxs-lookup"><span data-stu-id="72de3-536">When the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="72de3-537">下列程式碼範例示範如何使用執行緒集區同時搜尋多個磁碟上的檔案。</span><span class="sxs-lookup"><span data-stu-id="72de3-537">The following code example demonstrates how to use the thread pool to simultaneously search for a file on multiple disks.</span></span> <span data-ttu-id="72de3-538">如需空間考量，會搜尋只有每個磁碟的根目錄。</span><span class="sxs-lookup"><span data-stu-id="72de3-538">For space considerations, only the root directory of each disk is searched.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/CS/source2.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="72de3-539">
            <paramref name="waitHandles" /> 參數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-539">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="72de3-540">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-540">-or-</span>
          </span>
          <span data-ttu-id="72de3-541">
            <paramref name="waitHandles" /> 陣列中的一或多個物件為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-541">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="72de3-542">
            <paramref name="waitHandles" /> 中的物件數目超過系統允許的數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-542">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
        </exception>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="72de3-543">
            <paramref name="waitHandles" /> 是不具有項目的陣列，且 .NET Framework 版本為 1.0 或 1.1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-543">
              <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 1.0 or 1.1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="72de3-544">
            <paramref name="millisecondsTimeout" /> 為 -1 以外的負數，表示無限逾時。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-544">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="72de3-545">由於執行緒結束時未釋放 Mutex，已完成等候。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-545">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="72de3-546">在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-546">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="72de3-547">
            <paramref name="waitHandles" /> 是不具有元素的陣列，且 .NET Framework 版本為 2.0 (含) 以後版本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-547">
              <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 2.0 or later.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="72de3-548">
            <paramref name="waitHandles" /> 陣列在另一個應用程式定義域中包含 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-548">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle(), timeout As TimeSpan, exitContext As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.WaitHandle[] * TimeSpan * bool -&gt; int" Usage="System.Threading.WaitHandle.WaitAny (waitHandles, timeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="72de3-549">
            <see langword="WaitHandle" /> 陣列，包含目前執行個體將等候的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-549">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="72de3-550">
            <see cref="T:System.TimeSpan" />，代表等候毫秒數；或是 <see cref="T:System.TimeSpan" />，代表無限期等候的 -1 毫秒。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-550">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="72de3-551">
            <see langword="true" /> 表示在等候 (如果在同步內容中) 前結束內容的同步處理網域，並於之後重新取得，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-551">
              <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72de3-552">等候指定陣列中的所有項目都收到信號，使用 <see cref="T:System.TimeSpan" /> 來指定時間間隔，並指定是否要先離開同步處理網域，再開始等候。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-552">Waits for any of the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="72de3-553">滿足等候條件之物件的陣列索引；如果沒有物件滿足等候條件，而且已經過相當於 <paramref name="timeout" /> 的時間間隔，則為 <see cref="F:System.Threading.WaitHandle.WaitTimeout" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-553">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="timeout" /> has passed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72de3-554">如果`timeout`為零，此方法不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="72de3-554">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="72de3-555">它會測試等候控制代碼的狀態，並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="72de3-555">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="72de3-556"><xref:System.Threading.AbandonedMutexException> 是.NET Framework 2.0 版中的新功能。</span><span class="sxs-lookup"><span data-stu-id="72de3-556"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="72de3-557">在舊版中，<xref:System.Threading.WaitHandle.WaitAny%2A>方法會傳回`true`如果等候完成，因為已放棄 mutex。</span><span class="sxs-lookup"><span data-stu-id="72de3-557">In previous versions, the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns `true` if the wait completes because a mutex is abandoned.</span></span> <span data-ttu-id="72de3-558">已放棄的 mutex 通常表示嚴重的程式碼錯誤。</span><span class="sxs-lookup"><span data-stu-id="72de3-558">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="72de3-559">如果是全系統 mutex，則可能表示，應用程式已意外終止 （例如，透過使用 Windows 工作管理員）。</span><span class="sxs-lookup"><span data-stu-id="72de3-559">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="72de3-560">例外狀況包含資訊適用於偵錯。</span><span class="sxs-lookup"><span data-stu-id="72de3-560">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="72de3-561"><xref:System.Threading.WaitHandle.WaitAny%2A>方法會擲回<xref:System.Threading.AbandonedMutexException>只等待完成時因為遭到放棄的 mutex。</span><span class="sxs-lookup"><span data-stu-id="72de3-561">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="72de3-562">如果`waitHandles`包含具有較低的索引編號，已放棄的 mutex，比釋放的 mutex<xref:System.Threading.WaitHandle.WaitAny%2A>方法正常完成，並不會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="72de3-562">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="72de3-563">在版本早於 2.0 版中，如果執行緒結束或中止而不需要明確地釋放的.NET framework <xref:System.Threading.Mutex>，且`Mutex`位於索引 0 （零），在`WaitAny`陣列在另一個執行緒，所傳回的索引上`WaitAny`是128 而不是 0。</span><span class="sxs-lookup"><span data-stu-id="72de3-563">In versions of the .NET Framework earlier than version 2.0, if a thread exits or aborts without explicitly releasing a <xref:System.Threading.Mutex>, and that `Mutex` is at index 0 (zero) in a `WaitAny` array on another thread, the index returned by `WaitAny` is 128 instead of 0.</span></span>  
  
 <span data-ttu-id="72de3-564">這個方法傳回時則等候會終止，任何控制代碼會收到信號或逾時發生時。</span><span class="sxs-lookup"><span data-stu-id="72de3-564">This method returns when the wait terminates, either when any of the handles are signaled or when a time-out occurs.</span></span> <span data-ttu-id="72de3-565">如果在呼叫期間，多個物件會變成收到訊號，則傳回的值會是物件的已收到訊號具有已收到訊號的所有物件的最小的索引值的陣列索引。</span><span class="sxs-lookup"><span data-stu-id="72de3-565">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span> <span data-ttu-id="72de3-566">在某些實作中，如果有多個傳遞 64 的控制代碼，<xref:System.NotSupportedException>就會擲回。</span><span class="sxs-lookup"><span data-stu-id="72de3-566">On some implementations, if more that 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span>  
  
 <span data-ttu-id="72de3-567">最大值`timeout`是<xref:System.Int32.MaxValue?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="72de3-567">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="72de3-568">在結束內容的資訊</span><span class="sxs-lookup"><span data-stu-id="72de3-568">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="72de3-569">`exitContext`參數沒有任何作用，除非<xref:System.Threading.WaitHandle.WaitAny%2A>從非預設受管理的內容中呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="72de3-569">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitAny%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="72de3-570">如果您的執行緒是衍生自類別的執行個體的呼叫在此情形<xref:System.ContextBoundObject>。</span><span class="sxs-lookup"><span data-stu-id="72de3-570">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="72de3-571">即使您目前正在執行的方法不是衍生自的類別上<xref:System.ContextBoundObject>，例如<xref:System.String>，您可以在非預設內容中如果<xref:System.ContextBoundObject>您目前的應用程式定義域中的堆疊上。</span><span class="sxs-lookup"><span data-stu-id="72de3-571">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="72de3-572">時的非預設內容中執行您的程式碼，在指定`true`的`exitContext`造成執行緒結束的非預設的 managed 的內容 (也就是轉換成預設內容) 執行之前<xref:System.Threading.WaitHandle.WaitAny%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="72de3-572">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitAny%2A> method.</span></span> <span data-ttu-id="72de3-573">執行緒在呼叫之後返回原始的非預設內容<xref:System.Threading.WaitHandle.WaitAny%2A>方法完成。</span><span class="sxs-lookup"><span data-stu-id="72de3-573">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes.</span></span>  
  
 <span data-ttu-id="72de3-574">這有助於進行內容繫結類別具有<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>。</span><span class="sxs-lookup"><span data-stu-id="72de3-574">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="72de3-575">在此情況下，所有呼叫類別的成員會自動同步都處理，並同步處理領域是類別程式碼的整個主體。</span><span class="sxs-lookup"><span data-stu-id="72de3-575">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="72de3-576">如果成員的呼叫堆疊中的程式碼會呼叫<xref:System.Threading.WaitHandle.WaitAny%2A>方法，並指定`true`如`exitContext`，執行緒結束同步處理網域，讓執行緒上呼叫物件的任何成員，以繼續進行封鎖。</span><span class="sxs-lookup"><span data-stu-id="72de3-576">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitAny%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="72de3-577">當<xref:System.Threading.WaitHandle.WaitAny%2A>方法傳回時，進行呼叫的執行緒必須等待重新輸入一次同步處理領域。</span><span class="sxs-lookup"><span data-stu-id="72de3-577">When the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="72de3-578">下列程式碼範例示範如何使用執行緒集區同時搜尋多個磁碟上的檔案。</span><span class="sxs-lookup"><span data-stu-id="72de3-578">The following code example demonstrates how to use the thread pool to simultaneously search for a file on multiple disks.</span></span> <span data-ttu-id="72de3-579">如需空間考量，會搜尋只有每個磁碟的根目錄。</span><span class="sxs-lookup"><span data-stu-id="72de3-579">For space considerations, only the root directory of each disk is searched.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAny3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny3/CPP/source3.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAny3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny3/CS/source3.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAny3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny3/VB/source3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="72de3-580">
            <paramref name="waitHandles" /> 參數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-580">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="72de3-581">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-581">-or-</span>
          </span>
          <span data-ttu-id="72de3-582">
            <paramref name="waitHandles" /> 陣列中的一或多個物件為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-582">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="72de3-583">
            <paramref name="waitHandles" /> 中的物件數目超過系統允許的數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-583">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
        </exception>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="72de3-584">
            <paramref name="waitHandles" /> 是不具有項目的陣列，且 .NET Framework 版本為 1.0 或 1.1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-584">
              <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 1.0 or 1.1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="72de3-585">
            <paramref name="timeout" /> 為 -1 毫秒以外的負數，表示無限逾時。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-585">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span>
          </span>
          <span data-ttu-id="72de3-586">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-586">-or-</span>
          </span>
          <span data-ttu-id="72de3-587">
            <paramref name="timeout" /> 大於 <see cref="F:System.Int32.MaxValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-587">
              <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="72de3-588">由於執行緒結束時未釋放 Mutex，已完成等候。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-588">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="72de3-589">在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-589">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="72de3-590">
            <paramref name="waitHandles" /> 是不具有元素的陣列，且 .NET Framework 版本為 2.0 (含) 以後版本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-590">
              <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 2.0 or later.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="72de3-591">
            <paramref name="waitHandles" /> 陣列在另一個應用程式定義域中包含 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-591">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitOne">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="72de3-592">封鎖目前的執行緒，直到目前的 <see cref="T:System.Threading.WaitHandle" /> 收到訊號為止。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-592">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne();" />
      <MemberSignature Language="F#" Value="abstract member WaitOne : unit -&gt; bool&#xA;override this.WaitOne : unit -&gt; bool" Usage="waitHandle.WaitOne " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="72de3-593">封鎖目前的執行緒，直到目前的 <see cref="T:System.Threading.WaitHandle" /> 收到訊號為止。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-593">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="72de3-594">如果目前的執行個體有收到信號，則為 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-594">
              <see langword="true" /> if the current instance receives a signal.</span>
          </span>
          <span data-ttu-id="72de3-595">如果目前的執行個體一直沒有收到訊號，<see cref="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)" /> 就一定不會傳回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-595">If the current instance is never signaled, <see cref="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)" /> never returns.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72de3-596"><xref:System.Threading.AbandonedMutexException> 是.NET Framework 2.0 版中的新功能。</span><span class="sxs-lookup"><span data-stu-id="72de3-596"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="72de3-597">在舊版中，<xref:System.Threading.WaitHandle.WaitOne%2A>方法會傳回`true`時放棄的 mutex。</span><span class="sxs-lookup"><span data-stu-id="72de3-597">In previous versions, the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="72de3-598">已放棄的 mutex 通常表示嚴重的程式碼錯誤。</span><span class="sxs-lookup"><span data-stu-id="72de3-598">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="72de3-599">如果是全系統 mutex，則可能表示，應用程式已意外終止 （例如，透過使用 Windows 工作管理員）。</span><span class="sxs-lookup"><span data-stu-id="72de3-599">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="72de3-600">例外狀況包含資訊適用於偵錯。</span><span class="sxs-lookup"><span data-stu-id="72de3-600">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="72de3-601">這個方法會封鎖目前的執行個體之前，無限期的呼叫端會收到信號。</span><span class="sxs-lookup"><span data-stu-id="72de3-601">The caller of this method blocks indefinitely until the current instance receives a signal.</span></span> <span data-ttu-id="72de3-602">使用這個方法來封鎖直到<xref:System.Threading.WaitHandle>從另一個執行緒收到訊號，例如便會產生非同步作業完成時。</span><span class="sxs-lookup"><span data-stu-id="72de3-602">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="72de3-603">如需詳細資訊，請參閱<xref:System.IAsyncResult>介面。</span><span class="sxs-lookup"><span data-stu-id="72de3-603">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="72de3-604">呼叫這個方法多載就相當於呼叫<xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29>方法多載，並指定-1 或是<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>第一個參數和`false`第二個參數。</span><span class="sxs-lookup"><span data-stu-id="72de3-604">Calling this method overload is equivalent to calling the <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29> method overload and specifying -1 or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> for the first parameter and `false` for the second parameter.</span></span>  
  
 <span data-ttu-id="72de3-605">覆寫這個方法以自訂在衍生類別的行為。</span><span class="sxs-lookup"><span data-stu-id="72de3-605">Override this method to customize the behavior of derived classes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="72de3-606">下列程式碼範例示範如何使用等候控制代碼，以防止處理程序結束時等候背景執行緒完成執行。</span><span class="sxs-lookup"><span data-stu-id="72de3-606">The following code example shows how to use a wait handle to keep a process from terminating while it waits for a background thread to finish executing.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitOne1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne1/CPP/source1.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitOne1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne1/CS/source1.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitOne1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne1/VB/source1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="72de3-607">目前的執行個體已經過處置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-607">The current instance has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="72de3-608">由於執行緒結束時未釋放 Mutex，已完成等候。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-608">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="72de3-609">在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-609">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="72de3-610">目前的執行個體是另一個應用程式定義域中 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-610">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="abstract member WaitOne : int -&gt; bool&#xA;override this.WaitOne : int -&gt; bool" Usage="waitHandle.WaitOne millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="72de3-611">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-611">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72de3-612">封鎖目前執行緒，直到目前的 <see cref="T:System.Threading.WaitHandle" /> 收到信號為止，使用 32 位元帶正負號的整數來指定時間間隔 (以毫秒為單位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-612">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal, using a 32-bit signed integer to specify the time interval in milliseconds.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="72de3-613">如果目前的執行個體收到信號，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-613">
              <see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72de3-614">如果`millisecondsTimeout`為零，此方法不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="72de3-614">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="72de3-615">它會測試等候控制代碼的狀態，並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="72de3-615">It tests the state of the wait handle and returns immediately.</span></span>  
  
 <span data-ttu-id="72de3-616">這個方法會封鎖，直到目前的執行個體收到信號或逾時的呼叫端就會發生。</span><span class="sxs-lookup"><span data-stu-id="72de3-616">The caller of this method blocks until the current instance receives a signal or a time-out occurs.</span></span> <span data-ttu-id="72de3-617">使用這個方法來封鎖直到<xref:System.Threading.WaitHandle>從另一個執行緒收到訊號，例如便會產生非同步作業完成時。</span><span class="sxs-lookup"><span data-stu-id="72de3-617">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="72de3-618">如需詳細資訊，請參閱<xref:System.IAsyncResult>介面。</span><span class="sxs-lookup"><span data-stu-id="72de3-618">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="72de3-619">覆寫這個方法以自訂在衍生類別的行為。</span><span class="sxs-lookup"><span data-stu-id="72de3-619">Override this method to customize the behavior of derived classes.</span></span>  
  
 <span data-ttu-id="72de3-620">呼叫這個方法多載等同於呼叫<xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29>多載，並指定`false`如`exitContext`。</span><span class="sxs-lookup"><span data-stu-id="72de3-620">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="72de3-621">下列程式碼範例示範如何使用等候控制代碼，以防止處理程序結束時等候背景執行緒完成執行。</span><span class="sxs-lookup"><span data-stu-id="72de3-621">The following code example shows how to use a wait handle to keep a process from terminating while it waits for a background thread to finish executing.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitOne2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitOne2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne2/CS/source2.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitOne2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="72de3-622">目前的執行個體已經過處置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-622">The current instance has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="72de3-623">
            <paramref name="millisecondsTimeout" /> 為 -1 以外的負數，表示無限逾時。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-623">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="72de3-624">由於執行緒結束時未釋放 Mutex，已完成等候。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-624">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="72de3-625">在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-625">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="72de3-626">目前的執行個體是另一個應用程式定義域中 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-626">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member WaitOne : TimeSpan -&gt; bool&#xA;override this.WaitOne : TimeSpan -&gt; bool" Usage="waitHandle.WaitOne timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="72de3-627">
            <see cref="T:System.TimeSpan" />，代表等候毫秒數；或是 <see cref="T:System.TimeSpan" />，代表無限期等候的 -1 毫秒。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-627">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72de3-628">封鎖目前執行緒，直到目前執行個體收到信號為止，使用 <see cref="T:System.TimeSpan" /> 來指定時間間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-628">Blocks the current thread until the current instance receives a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="72de3-629">如果目前的執行個體收到信號，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-629">
              <see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72de3-630">如果`timeout`為零，此方法不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="72de3-630">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="72de3-631">它會測試等候控制代碼的狀態，並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="72de3-631">It tests the state of the wait handle and returns immediately.</span></span>  
  
 <span data-ttu-id="72de3-632">這個方法會封鎖，直到目前的執行個體收到信號或逾時的呼叫端就會發生。</span><span class="sxs-lookup"><span data-stu-id="72de3-632">The caller of this method blocks until the current instance receives a signal or a time-out occurs.</span></span> <span data-ttu-id="72de3-633">使用這個方法來封鎖直到<xref:System.Threading.WaitHandle>從另一個執行緒收到訊號，例如便會產生非同步作業完成時。</span><span class="sxs-lookup"><span data-stu-id="72de3-633">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="72de3-634">如需詳細資訊，請參閱<xref:System.IAsyncResult>介面。</span><span class="sxs-lookup"><span data-stu-id="72de3-634">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="72de3-635">覆寫這個方法以自訂在衍生類別的行為。</span><span class="sxs-lookup"><span data-stu-id="72de3-635">Override this method to customize the behavior of derived classes.</span></span>  
  
 <span data-ttu-id="72de3-636">最大值`timeout`是<xref:System.Int32.MaxValue?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="72de3-636">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="72de3-637">呼叫這個方法多載等同於呼叫<xref:System.Threading.WaitHandle.WaitOne%28System.TimeSpan%2CSystem.Boolean%29>多載，並指定`false`如`exitContext`。</span><span class="sxs-lookup"><span data-stu-id="72de3-637">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitOne%28System.TimeSpan%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="72de3-638">目前的執行個體已經過處置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-638">The current instance has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="72de3-639">
            <paramref name="timeout" /> 為 -1 毫秒以外的負數，表示無限逾時。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-639">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span>
          </span>
          <span data-ttu-id="72de3-640">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-640">-or-</span>
          </span>
          <span data-ttu-id="72de3-641">
            <paramref name="timeout" /> 大於 <see cref="F:System.Int32.MaxValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-641">
              <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="72de3-642">由於執行緒結束時未釋放 Mutex，已完成等候。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-642">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="72de3-643">在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-643">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="72de3-644">目前的執行個體是另一個應用程式定義域中 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-644">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne (int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne(int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne (millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne(int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="abstract member WaitOne : int * bool -&gt; bool&#xA;override this.WaitOne : int * bool -&gt; bool" Usage="waitHandle.WaitOne (millisecondsTimeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="72de3-645">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-645">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="72de3-646">
            <see langword="true" /> 表示在等候 (如果在同步內容中) 前結束內容的同步處理網域，並於之後重新取得，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-646">
              <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72de3-647">封鎖目前執行緒，直到目前的 <see cref="T:System.Threading.WaitHandle" /> 收到信號為止，使用 32 位元帶正負號的整數來指定時間間隔，並指定是否要先離開同步處理網域，再開始等候。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-647">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal, using a 32-bit signed integer to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="72de3-648">如果目前的執行個體收到信號，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-648">
              <see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72de3-649">如果`millisecondsTimeout`為零，此方法不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="72de3-649">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="72de3-650">它會測試等候控制代碼的狀態，並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="72de3-650">It tests the state of the wait handle and returns immediately.</span></span>  
  
 <span data-ttu-id="72de3-651"><xref:System.Threading.AbandonedMutexException> 是.NET Framework 2.0 版中的新功能。</span><span class="sxs-lookup"><span data-stu-id="72de3-651"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="72de3-652">在舊版中，<xref:System.Threading.WaitHandle.WaitOne%2A>方法會傳回`true`時放棄的 mutex。</span><span class="sxs-lookup"><span data-stu-id="72de3-652">In previous versions, the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="72de3-653">已放棄的 mutex 通常表示嚴重的程式碼錯誤。</span><span class="sxs-lookup"><span data-stu-id="72de3-653">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="72de3-654">如果是全系統 mutex，則可能表示，應用程式已意外終止 （例如，透過使用 Windows 工作管理員）。</span><span class="sxs-lookup"><span data-stu-id="72de3-654">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="72de3-655">例外狀況包含資訊適用於偵錯。</span><span class="sxs-lookup"><span data-stu-id="72de3-655">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="72de3-656">這個方法會封鎖，直到目前的執行個體收到信號或逾時的呼叫端就會發生。</span><span class="sxs-lookup"><span data-stu-id="72de3-656">The caller of this method blocks until the current instance receives a signal or a time-out occurs.</span></span> <span data-ttu-id="72de3-657">使用這個方法來封鎖直到<xref:System.Threading.WaitHandle>從另一個執行緒收到訊號，例如便會產生非同步作業完成時。</span><span class="sxs-lookup"><span data-stu-id="72de3-657">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="72de3-658">如需詳細資訊，請參閱<xref:System.IAsyncResult>介面。</span><span class="sxs-lookup"><span data-stu-id="72de3-658">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="72de3-659">覆寫這個方法以自訂在衍生類別的行為。</span><span class="sxs-lookup"><span data-stu-id="72de3-659">Override this method to customize the behavior of derived classes.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="72de3-660">在結束內容的資訊</span><span class="sxs-lookup"><span data-stu-id="72de3-660">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="72de3-661">`exitContext`參數沒有任何作用，除非<xref:System.Threading.WaitHandle.WaitOne%2A>從非預設受管理的內容中呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="72de3-661">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitOne%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="72de3-662">如果您的執行緒是衍生自類別的執行個體的呼叫在此情形<xref:System.ContextBoundObject>。</span><span class="sxs-lookup"><span data-stu-id="72de3-662">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="72de3-663">即使您目前正在執行的方法不是衍生自的類別上<xref:System.ContextBoundObject>，例如<xref:System.String>，您可以在非預設內容中如果<xref:System.ContextBoundObject>您目前的應用程式定義域中的堆疊上。</span><span class="sxs-lookup"><span data-stu-id="72de3-663">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="72de3-664">時的非預設內容中執行您的程式碼，在指定`true`的`exitContext`造成執行緒結束的非預設的 managed 的內容 (也就是轉換成預設內容) 執行之前<xref:System.Threading.WaitHandle.WaitOne%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="72de3-664">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span> <span data-ttu-id="72de3-665">執行緒在呼叫之後返回原始的非預設內容<xref:System.Threading.WaitHandle.WaitOne%2A>方法完成。</span><span class="sxs-lookup"><span data-stu-id="72de3-665">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitOne%2A> method completes.</span></span>  
  
 <span data-ttu-id="72de3-666">這有助於進行內容繫結類別具有<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>。</span><span class="sxs-lookup"><span data-stu-id="72de3-666">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="72de3-667">在此情況下，所有呼叫類別的成員會自動同步都處理，並同步處理領域是類別程式碼的整個主體。</span><span class="sxs-lookup"><span data-stu-id="72de3-667">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="72de3-668">如果成員的呼叫堆疊中的程式碼會呼叫<xref:System.Threading.WaitHandle.WaitOne%2A>方法，並指定`true`如`exitContext`，執行緒結束同步處理網域，讓執行緒上呼叫物件的任何成員，以繼續進行封鎖。</span><span class="sxs-lookup"><span data-stu-id="72de3-668">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitOne%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="72de3-669">當<xref:System.Threading.WaitHandle.WaitOne%2A>方法傳回時，進行呼叫的執行緒必須等待重新輸入一次同步處理領域。</span><span class="sxs-lookup"><span data-stu-id="72de3-669">When the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="72de3-670">下列範例顯示如何<xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29>方法多載時就稱為同步處理網域中的行為。</span><span class="sxs-lookup"><span data-stu-id="72de3-670">The following example shows how the <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29> method overload behaves when it is called within a synchronization domain.</span></span> <span data-ttu-id="72de3-671">首先，執行緒會等候與`exitContext`設定為`false`，直到等候的逾時到期。</span><span class="sxs-lookup"><span data-stu-id="72de3-671">First, a thread waits with `exitContext` set to `false` and blocks until the wait timeout expires.</span></span> <span data-ttu-id="72de3-672">第二個執行緒執行之後的第一個執行緒終止，並與等候`exitContext`設定為`true`。</span><span class="sxs-lookup"><span data-stu-id="72de3-672">A second thread executes after the first thread terminates and waits with `exitContext` set to `true`.</span></span> <span data-ttu-id="72de3-673">未封鎖的呼叫，以表示此第二個執行緒的等候控制代碼，並等候逾時之前完成的執行緒。</span><span class="sxs-lookup"><span data-stu-id="72de3-673">The call to signal the wait handle for this second thread is not blocked, and the thread completes before the wait timeout.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitOne4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.threading.waithandle.waitone4/cpp/source.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitOne4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.waithandle.waitone4/cs/source.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitOne4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.waithandle.waitone4/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="72de3-674">目前的執行個體已經過處置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-674">The current instance has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="72de3-675">
            <paramref name="millisecondsTimeout" /> 為 -1 以外的負數，表示無限逾時。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-675">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="72de3-676">由於執行緒結束時未釋放 Mutex，已完成等候。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-676">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="72de3-677">在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-677">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="72de3-678">目前的執行個體是另一個應用程式定義域中 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-678">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne (TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne(valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne (timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne(TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="abstract member WaitOne : TimeSpan * bool -&gt; bool&#xA;override this.WaitOne : TimeSpan * bool -&gt; bool" Usage="waitHandle.WaitOne (timeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="72de3-679">
            <see cref="T:System.TimeSpan" />，代表等候毫秒數；或是 <see cref="T:System.TimeSpan" />，代表無限期等候的 -1 毫秒。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-679">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="72de3-680">
            <see langword="true" /> 表示在等候 (如果在同步內容中) 前結束內容的同步處理網域，並於之後重新取得，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-680">
              <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72de3-681">封鎖目前執行緒，直到目前執行個體收到信號為止，使用 <see cref="T:System.TimeSpan" /> 來指定時間間隔，並指定是否要先離開同步處理網域，再開始等候。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-681">Blocks the current thread until the current instance receives a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="72de3-682">如果目前的執行個體收到信號，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-682">
              <see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72de3-683">如果`timeout`為零，此方法不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="72de3-683">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="72de3-684">它會測試等候控制代碼的狀態，並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="72de3-684">It tests the state of the wait handle and returns immediately.</span></span>  
  
 <span data-ttu-id="72de3-685"><xref:System.Threading.AbandonedMutexException> 是.NET Framework 2.0 版中的新功能。</span><span class="sxs-lookup"><span data-stu-id="72de3-685"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="72de3-686">在舊版中，<xref:System.Threading.WaitHandle.WaitOne%2A>方法會傳回`true`時放棄的 mutex。</span><span class="sxs-lookup"><span data-stu-id="72de3-686">In previous versions, the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="72de3-687">已放棄的 mutex 通常表示嚴重的程式碼錯誤。</span><span class="sxs-lookup"><span data-stu-id="72de3-687">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="72de3-688">如果是全系統 mutex，則可能表示，應用程式已意外終止 （例如，透過使用 Windows 工作管理員）。</span><span class="sxs-lookup"><span data-stu-id="72de3-688">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="72de3-689">例外狀況包含資訊適用於偵錯。</span><span class="sxs-lookup"><span data-stu-id="72de3-689">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="72de3-690">這個方法會封鎖，直到目前的執行個體收到信號或逾時的呼叫端就會發生。</span><span class="sxs-lookup"><span data-stu-id="72de3-690">The caller of this method blocks until the current instance receives a signal or a time-out occurs.</span></span> <span data-ttu-id="72de3-691">使用這個方法來封鎖直到<xref:System.Threading.WaitHandle>從另一個執行緒收到訊號，例如便會產生非同步作業完成時。</span><span class="sxs-lookup"><span data-stu-id="72de3-691">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="72de3-692">如需詳細資訊，請參閱<xref:System.IAsyncResult>介面。</span><span class="sxs-lookup"><span data-stu-id="72de3-692">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="72de3-693">覆寫這個方法以自訂在衍生類別的行為。</span><span class="sxs-lookup"><span data-stu-id="72de3-693">Override this method to customize the behavior of derived classes.</span></span>  
  
 <span data-ttu-id="72de3-694">最大值`timeout`是<xref:System.Int32.MaxValue?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="72de3-694">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="72de3-695">在結束內容的資訊</span><span class="sxs-lookup"><span data-stu-id="72de3-695">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="72de3-696">`exitContext`參數沒有任何作用，除非<xref:System.Threading.WaitHandle.WaitOne%2A>從非預設受管理的內容中呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="72de3-696">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitOne%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="72de3-697">如果您的執行緒是衍生自類別的執行個體的呼叫在此情形<xref:System.ContextBoundObject>。</span><span class="sxs-lookup"><span data-stu-id="72de3-697">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="72de3-698">即使您目前正在執行的方法不是衍生自的類別上<xref:System.ContextBoundObject>，例如<xref:System.String>，您可以在非預設內容中如果<xref:System.ContextBoundObject>您目前的應用程式定義域中的堆疊上。</span><span class="sxs-lookup"><span data-stu-id="72de3-698">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="72de3-699">時的非預設內容中執行您的程式碼，在指定`true`的`exitContext`造成執行緒結束的非預設的 managed 的內容 (也就是轉換成預設內容) 執行之前<xref:System.Threading.WaitHandle.WaitOne%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="72de3-699">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span> <span data-ttu-id="72de3-700">執行緒在呼叫之後返回原始的非預設內容<xref:System.Threading.WaitHandle.WaitOne%2A>方法完成。</span><span class="sxs-lookup"><span data-stu-id="72de3-700">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitOne%2A> method completes.</span></span>  
  
 <span data-ttu-id="72de3-701">這有助於進行內容繫結類別具有<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>。</span><span class="sxs-lookup"><span data-stu-id="72de3-701">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="72de3-702">在此情況下，所有呼叫類別的成員會自動同步都處理，並同步處理領域是類別程式碼的整個主體。</span><span class="sxs-lookup"><span data-stu-id="72de3-702">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="72de3-703">如果成員的呼叫堆疊中的程式碼會呼叫<xref:System.Threading.WaitHandle.WaitOne%2A>方法，並指定`true`如`exitContext`，執行緒結束同步處理網域，讓執行緒上呼叫物件的任何成員，以繼續進行封鎖。</span><span class="sxs-lookup"><span data-stu-id="72de3-703">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitOne%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="72de3-704">當<xref:System.Threading.WaitHandle.WaitOne%2A>方法傳回時，進行呼叫的執行緒必須等待重新輸入一次同步處理領域。</span><span class="sxs-lookup"><span data-stu-id="72de3-704">When the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="72de3-705">下列程式碼範例示範如何使用等候控制代碼，以防止處理程序結束時等候背景執行緒完成執行。</span><span class="sxs-lookup"><span data-stu-id="72de3-705">The following code example shows how to use a wait handle to keep a process from terminating while it waits for a background thread to finish executing.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitOne3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne3/CPP/source3.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitOne3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne3/CS/source3.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitOne3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne3/VB/source3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="72de3-706">目前的執行個體已經過處置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-706">The current instance has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="72de3-707">
            <paramref name="timeout" /> 為 -1 毫秒以外的負數，表示無限逾時。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-707">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span>
          </span>
          <span data-ttu-id="72de3-708">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-708">-or-</span>
          </span>
          <span data-ttu-id="72de3-709">
            <paramref name="timeout" /> 大於 <see cref="F:System.Int32.MaxValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-709">
              <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="72de3-710">由於執行緒結束時未釋放 Mutex，已完成等候。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-710">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="72de3-711">在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-711">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="72de3-712">目前的執行個體是另一個應用程式定義域中 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-712">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitTimeout">
      <MemberSignature Language="C#" Value="public const int WaitTimeout = 258;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 WaitTimeout = (258)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.WaitHandle.WaitTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Const WaitTimeout As Integer  = 258" />
      <MemberSignature Language="C++ CLI" Value="public: int WaitTimeout = 258;" />
      <MemberSignature Language="F#" Value="val mutable WaitTimeout : int" Usage="System.Threading.WaitHandle.WaitTimeout" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>258</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="72de3-713">表示 <see cref="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)" /> 作業在發出任何等候控制代碼信號之前便已逾時。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-713">Indicates that a <see cref="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)" /> operation timed out before any of the wait handles were signaled.</span>
          </span>
          <span data-ttu-id="72de3-714">這個欄位是常數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="72de3-714">This field is constant.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72de3-715">此欄位是其中一個可能的傳回值的`WaitAny`。</span><span class="sxs-lookup"><span data-stu-id="72de3-715">This field is one of the possible return values of `WaitAny`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="72de3-716">下列程式碼範例示範如何使用執行緒集區同時搜尋多個磁碟上的檔案。</span><span class="sxs-lookup"><span data-stu-id="72de3-716">The following code example demonstrates how to use the thread pool to simultaneously search for a file on multiple disks.</span></span> <span data-ttu-id="72de3-717">如需空間考量，會搜尋只有每個磁碟的根目錄。</span><span class="sxs-lookup"><span data-stu-id="72de3-717">For space considerations, only the root directory of each disk is searched.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/CS/source2.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>