<Type Name="WaitHandle" FullName="System.Threading.WaitHandle">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9c30c9bf2d271da2afe9d173213a99d04fceefda" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30531502" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class WaitHandle : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi abstract beforefieldinit WaitHandle extends System.MarshalByRefObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.WaitHandle" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class WaitHandle&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class WaitHandle abstract : MarshalByRefObject, IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>將等候共用資源獨佔存取權限的特定作業系統物件封裝起來。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.WaitHandle>類別封裝 Win32 同步控制代碼，而且用來代表所有執行階段中允許多個等候作業的同步處理物件。 如需與其他同步處理物件的等候控制代碼的比較，請參閱[同步處理原始物件概觀](~/docs/standard/threading/overview-of-synchronization-primitives.md)。  
  
 <xref:System.Threading.WaitHandle>本身的類別是抽象的。 類別衍生自<xref:System.Threading.WaitHandle>定義信號的機制，以指示執行，或釋放存取共用資源，但是會使用繼承<xref:System.Threading.WaitHandle>方法來封鎖等候存取共用資源。 類別衍生自<xref:System.Threading.WaitHandle>包括：  
  
-   <xref:System.Threading.Mutex> 類別。 請參閱[Mutex](~/docs/standard/threading/mutexes.md)。  
  
-   <xref:System.Threading.EventWaitHandle>類別和其衍生的類別，<xref:System.Threading.AutoResetEvent>和<xref:System.Threading.ManualResetEvent>。 [EventWaitHandle、AutoResetEvent、CountdownEvent、ManualResetEvent](~/docs/standard/threading/eventwaithandle-autoresetevent-countdownevent-manualresetevent.md)。  
  
-   <xref:System.Threading.Semaphore> 類別。 請參閱[Semaphore 和 SemaphoreSlim](~/docs/standard/threading/semaphore-and-semaphoreslim.md)。  
  
 個別的等候控制代碼上封鎖的執行緒，可以將它所呼叫的執行個體方法<xref:System.Threading.WaitHandle.WaitOne%2A>，這會由衍生自的類別繼承<xref:System.Threading.WaitHandle>。  
  
 在衍生的類別<xref:System.Threading.WaitHandle>不同的執行緒相似性。 事件等候控制代碼 (<xref:System.Threading.EventWaitHandle>， <xref:System.Threading.AutoResetEvent>，和<xref:System.Threading.ManualResetEvent>) 和號誌沒有執行緒相似性; 任何執行緒可以發出信號的事件等候控制代碼或號誌。 Mutex，相反地，沒有執行緒相似性。擁有 mutex 的執行緒必須釋放，和如果執行緒呼叫會擲回例外狀況<xref:System.Threading.Mutex.ReleaseMutex%2A>上未擁有 mutex 方法。  
  
 因為<xref:System.Threading.WaitHandle>類別衍生自<xref:System.MarshalByRefObject>，這些類別可以用來跨應用程式定義域界限同步處理執行緒活動。  
  
 其衍生的類別，除了<xref:System.Threading.WaitHandle>類別的靜態方法，讓封鎖執行緒，直到其中數目或更多的同步處理物件收到信號... 它們包括：  
  
-   <xref:System.Threading.WaitHandle.SignalAndWait%2A>可讓發出信號一個等候控制代碼，以及立即等候另一個執行緒。  
  
-   <xref:System.Threading.WaitHandle.WaitAll%2A>可讓執行緒等候直到在陣列中的所有等候控制代碼會都收到信號為止。  
  
-   <xref:System.Threading.WaitHandle.WaitAny%2A>可讓執行緒等候，直到其中一組指定的等候控制代碼已收到信號。  
  
 這些方法多載提供逾時間隔放棄等候，並等候，讓其他執行緒使用的同步處理內容之前，請先結束同步處理內容的機會。  
  
> [!IMPORTANT]
>  此類型會實作<xref:System.IDisposable>介面。 當您完成使用型別或衍生自它的類型時，您應該會處置它直接或間接。 若要直接處置的類型，呼叫其<xref:System.Threading.WaitHandle.Close%2A>方法中的`try` / `catch`區塊。 若要為其配置間接，使用語言建構例如`using`（C# 中） 或`Using`（在 Visual Basic)。 如需詳細資訊，請參閱中的 「 使用物件的實作 IDisposable 」 一節<xref:System.IDisposable>介面 > 主題。  
  
 <xref:System.Threading.WaitHandle> 實作<xref:System.IDisposable.Dispose%2A>模式。 請參閱[處置模式](~/docs/standard/design-guidelines/dispose-pattern.md)。 當您衍生自<xref:System.Threading.WaitHandle>，使用<xref:System.Threading.WaitHandle.SafeWaitHandle%2A>屬性來儲存您的原生控制代碼的作業系統控制代碼。 您不需要覆寫的受保護<xref:System.Threading.WaitHandle.Dispose%2A>方法除非您使用額外的 unmanaged 的資源。  
  
   
  
## Examples  
 下列程式碼範例示範如何在兩個執行緒可以執行背景工作，同時主要執行緒等候工作完成使用靜態<xref:System.Threading.WaitHandle.WaitAny%2A>和<xref:System.Threading.WaitHandle.WaitAll%2A>方法<xref:System.Threading.WaitHandle>類別。  
  
 [!code-cpp[WaitHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/WaitHandle/cpp/WaitHandle.cpp#1)]
 [!code-csharp[WaitHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/WaitHandle/CS/WaitHandle.cs#1)]
 [!code-vb[WaitHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/WaitHandle/VB/WaitHandle.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>此型別具備執行緒安全。</threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WaitHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WaitHandle();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Threading.WaitHandle" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public virtual void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>釋放目前 <see cref="T:System.Threading.WaitHandle" /> 所持有的全部資源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法是公用的實作<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>方法<xref:System.Threading.WaitHandle>類別和其衍生的類別。 它提供標準的實作會呼叫`Dispose(Boolean)`多載`true`引數，然後呼叫<xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType>方法。 呼叫此方法以釋放的執行個體所持有的所有資源`WaitHandle`或衍生的類別。  
  
 一旦呼叫此方法時，目前的執行個體的參考會導致未定義的行為。  
  
> [!NOTE]
>  請務必呼叫<xref:System.Threading.WaitHandle.Close%2A>或<xref:System.Threading.WaitHandle.Dispose>您釋放最後一個參考之前<xref:System.Threading.WaitHandle>。 否則，將不會釋放它正在使用的資源。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>您應該覆寫<see langword="Dispose(Boolean)" />方法，以釋放資源配置在衍生類別。</para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將 <see cref="T:System.Threading.WaitHandle" /> 類別的目前執行個體所使用的資源全部釋放。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將 <see cref="T:System.Threading.WaitHandle" /> 類別目前的執行個體所使用的資源全部釋出。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法相當於<xref:System.Threading.WaitHandle.Close%2A>方法。  
  
> [!NOTE]
>  請務必呼叫<xref:System.Threading.WaitHandle.Close%2A>或<xref:System.Threading.WaitHandle.Dispose>您釋放最後一個參考之前<xref:System.Threading.WaitHandle>。 否則，將不會釋放它正在使用的資源。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool explicitDisposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool explicitDisposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (explicitDisposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool explicitDisposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="explicitDisposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="explicitDisposing">
          <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
        <summary>當在衍生類別中覆寫時，釋放 <see cref="T:System.Threading.WaitHandle" /> 所使用的 Unmanaged 資源，並選擇性釋放 Managed 資源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會呼叫<xref:System.Threading.WaitHandle.Close%2A>和<xref:System.Threading.WaitHandle.Dispose>方法`explicitDisposing`參數設定為`true`。  當`explicitDisposing`參數是`true`，這個方法的任何 managed 物件所持有的資源全部釋出這個<xref:System.Threading.WaitHandle>物件參考。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>您應該覆寫<see cref="M:System.Threading.WaitHandle.Dispose(System.Boolean)" />方法，以釋放資源配置在衍生類別。  
  
 <see cref="M:System.Threading.WaitHandle.Close" />或<see cref="M:System.Threading.WaitHandle.Dispose" />方法可以由其他物件呼叫多次。 在覆寫這個方法，小心不要參考先前處置之前呼叫中的物件<see langword="Dispose" />或<see langword="Close" />。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public virtual IntPtr Handle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.WaitHandle.Handle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property IntPtr Handle { IntPtr get(); void set(IntPtr value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use the SafeWaitHandle property instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定原生 (Native) 的作業系統控制代碼。</summary>
        <value>
          <see langword="IntPtr" />，代表原生作業系統控制代碼。 預設為 <see cref="F:System.Threading.WaitHandle.InvalidHandle" /> 欄位的值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指派新值給<xref:System.Threading.WaitHandle.Handle%2A>屬性不會關閉先前的控制代碼。 這會導致遺漏的控制代碼。  
  
 請勿使用這個屬性在.NET Framework 2.0 版或更新;使用<xref:System.Threading.WaitHandle.SafeWaitHandle%2A>屬性改為。 此屬性設定為有效的控制代碼也集<xref:System.Threading.WaitHandle.SafeWaitHandle%2A>屬性，但是將它設定為<xref:System.Threading.WaitHandle.InvalidHandle>可能會導致遺漏的控制代碼。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">需要完全信任立即呼叫端若要設定屬性值。 無法由部分信任或安全性透明程式碼中設定這個成員。</permission>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">在衍生的型別必須具有<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />設定屬性值。</permission>
      </Docs>
    </Member>
    <Member MemberName="InvalidHandle">
      <MemberSignature Language="C#" Value="protected static readonly IntPtr InvalidHandle;" />
      <MemberSignature Language="ILAsm" Value=".field family static initonly native int InvalidHandle" />
      <MemberSignature Language="DocId" Value="F:System.Threading.WaitHandle.InvalidHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Shared ReadOnly InvalidHandle As IntPtr " />
      <MemberSignature Language="C++ CLI" Value="protected: static initonly IntPtr InvalidHandle;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>代表無效的原生作業系統控制代碼。 此欄位為唯讀。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在內部用來初始化<xref:System.Threading.WaitHandle.Handle%2A>屬性。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>您可以使用此值來判斷是否<see cref="P:System.Threading.WaitHandle.Handle" />屬性包含有效的原生作業系統控制代碼。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="SafeWaitHandle">
      <MemberSignature Language="C#" Value="public Microsoft.Win32.SafeHandles.SafeWaitHandle SafeWaitHandle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Win32.SafeHandles.SafeWaitHandle SafeWaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.WaitHandle.SafeWaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public Property SafeWaitHandle As SafeWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Win32::SafeHandles::SafeWaitHandle ^ SafeWaitHandle { Microsoft::Win32::SafeHandles::SafeWaitHandle ^ get(); void set(Microsoft::Win32::SafeHandles::SafeWaitHandle ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.SafeHandles.SafeWaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定原生 (Native) 的作業系統控制代碼。</summary>
        <value>
          <see cref="T:Microsoft.Win32.SafeHandles.SafeWaitHandle" />，代表原生作業系統控制代碼。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當您指派新值以<xref:System.Threading.WaitHandle.SafeWaitHandle%2A>屬性，先前的控制代碼將會關閉時先前<xref:Microsoft.Win32.SafeHandles.SafeWaitHandle>收集物件。 不要以手動方式關閉此控制代碼，因為這會導致<xref:System.ObjectDisposedException>時<xref:Microsoft.Win32.SafeHandles.SafeWaitHandle>嘗試關閉此控制代碼。  
  
 <xref:System.Threading.WaitHandle> 實作<xref:System.IDisposable.Dispose%2A>模式。 請參閱[處置模式](~/docs/standard/design-guidelines/dispose-pattern.md)。 當您衍生自<xref:System.Threading.WaitHandle>，使用<xref:System.Threading.WaitHandle.SafeWaitHandle%2A>屬性來儲存您的原生控制代碼的作業系統控制代碼。 您不需要覆寫的受保護<xref:System.Threading.WaitHandle.Dispose%2A>方法除非您使用額外的 unmanaged 的資源。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">需要完全信任立即呼叫者。 這個成員無法供部分信任或安全性透明程式碼。</permission>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">在衍生的型別必須具有<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />呼叫這個成員。</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="SignalAndWait">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>發出一個 <see cref="T:System.Threading.WaitHandle" /> 信號並等候另一個。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public static bool SignalAndWait (System.Threading.WaitHandle toSignal, System.Threading.WaitHandle toWaitOn);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SignalAndWait(class System.Threading.WaitHandle toSignal, class System.Threading.WaitHandle toWaitOn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SignalAndWait (toSignal As WaitHandle, toWaitOn As WaitHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SignalAndWait(System::Threading::WaitHandle ^ toSignal, System::Threading::WaitHandle ^ toWaitOn);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toSignal" Type="System.Threading.WaitHandle" />
        <Parameter Name="toWaitOn" Type="System.Threading.WaitHandle" />
      </Parameters>
      <Docs>
        <param name="toSignal">要發出的 <see cref="T:System.Threading.WaitHandle" /> 信號。</param>
        <param name="toWaitOn">要等候的 <see cref="T:System.Threading.WaitHandle" />。</param>
        <summary>發出一個 <see cref="T:System.Threading.WaitHandle" /> 信號並等候另一個。</summary>
        <returns>
          如果順利完成信號發出和等候，則為 <see langword="true" />；如果未完成等候，則不會傳回這個方法。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這項作業不保證是不可部分完成。 在目前的執行緒訊號後`toSignal`之前等候`toWaitOn`，另一個處理器執行的執行緒可能會發出信號`toWaitOn`或等候它。  
  
   
  
## Examples  
 下列程式碼範例使用<xref:System.Threading.WaitHandle.SignalAndWait%28System.Threading.WaitHandle%2CSystem.Threading.WaitHandle%29>方法多載來允許主執行緒發出信號封鎖的執行緒，以及執行緒完成工作，然後等候。  
  
 此範例會啟動五個執行緒，讓他們封鎖<xref:System.Threading.EventWaitHandle>以建立<xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType>旗標，以及發行一個執行緒時間使用者按下 ENTER 鍵。 此範例會排入佇列，另一個的五個執行緒，並釋放所有使用<xref:System.Threading.EventWaitHandle>以建立<xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType>旗標。  
  
 [!code-cpp[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/CS/source.cs#1)]
 [!code-vb[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="toSignal" /> 為 <see langword="null" />。  
  
 -或-  
  
 <paramref name="toWaitOn" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.NotSupportedException">在擁有 <see cref="T:System.STAThreadAttribute" /> 的執行緒上呼叫此方法。</exception>
        <exception cref="T:System.PlatformNotSupportedException">在 Windows 98 或 Windows Millennium Edition 上不支援這個方法。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="toSignal" /> 為號誌，且已經有完整計數。</exception>
        <exception cref="T:System.Threading.AbandonedMutexException">由於執行緒結束時未釋放 Mutex，已完成等候。 在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</exception>
      </Docs>
    </Member>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public static bool SignalAndWait (System.Threading.WaitHandle toSignal, System.Threading.WaitHandle toWaitOn, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SignalAndWait(class System.Threading.WaitHandle toSignal, class System.Threading.WaitHandle toWaitOn, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SignalAndWait (toSignal As WaitHandle, toWaitOn As WaitHandle, millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SignalAndWait(System::Threading::WaitHandle ^ toSignal, System::Threading::WaitHandle ^ toWaitOn, int millisecondsTimeout, bool exitContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toSignal" Type="System.Threading.WaitHandle" />
        <Parameter Name="toWaitOn" Type="System.Threading.WaitHandle" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="toSignal">要發出的 <see cref="T:System.Threading.WaitHandle" /> 信號。</param>
        <param name="toWaitOn">要等候的 <see cref="T:System.Threading.WaitHandle" />。</param>
        <param name="millisecondsTimeout">整數，表示要等候的間隔。 如果值為 <see cref="F:System.Threading.Timeout.Infinite" /> (亦即 -1)，則會永遠等候。</param>
        <param name="exitContext">
          <see langword="true" /> 表示在等候 (如果在同步內容中) 前結束內容的同步處理網域，並於之後重新取得，否則為 <see langword="false" />。</param>
        <summary>發出一個 <see cref="T:System.Threading.WaitHandle" /> 信號並等候另一個，將逾時間隔指定為 32 位元帶正負號的整數，並指定是否要先離開內容的同步處理網域，再進入等候狀態。</summary>
        <returns>
          如果順利完成信號發出和等候，則為 <see langword="true" />；如果完成信號發出但等候逾時，則為 <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這項作業不保證是不可部分完成。 在目前的執行緒訊號後`toSignal`之前等候`toWaitOn`，另一個處理器執行的執行緒可能會發出信號`toWaitOn`或等候它。  
  
 如果`millisecondsTimeout`為零，此方法不會封鎖。 它會測試的狀態`toWaitOn`並立即傳回。  
  
## <a name="notes-on-exiting-the-context"></a>結束內容的資訊  
 `exitContext`參數沒有任何作用，除非<xref:System.Threading.WaitHandle.SignalAndWait%2A>方法從非預設的 managed 內容內呼叫。 如果執行緒位呼叫內部的衍生自類別的執行個體此情形<xref:System.ContextBoundObject>。 即使您目前正在執行的方法不是衍生自的類別上<xref:System.ContextBoundObject>、 like <xref:System.String>，您可以在非預設的內容中如果<xref:System.ContextBoundObject>您目前的應用程式定義域中的堆疊上。  
  
 當您的程式碼在非預設的內容中執行時，指定`true`如`exitContext`造成執行緒結束的非預設的 managed 的內容 (也就是轉換至預設內容) 執行之前<xref:System.Threading.WaitHandle.SignalAndWait%2A>方法。 執行緒的呼叫之後傳回原始的非預設內容<xref:System.Threading.WaitHandle.SignalAndWait%2A>方法完成。  
  
 這有助於進行此內容繫結類別具有<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>。 在此情況下，類別的成員的所有呼叫都會自動同步都處理，且同步處理網域為類別的程式碼的整個本文。 如果成員的呼叫堆疊中的程式碼會呼叫<xref:System.Threading.WaitHandle.SignalAndWait%2A>方法，並指定`true`如`exitContext`，執行緒結束的同步處理網域，讓呼叫物件的任何成員，以繼續進行遭到封鎖的執行緒。 當<xref:System.Threading.WaitHandle.SignalAndWait%2A>方法傳回時，進行呼叫的執行緒必須等待重新輸入同步處理網域。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="toSignal" /> 為 <see langword="null" />。  
  
 -或-  
  
 <paramref name="toWaitOn" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.NotSupportedException">在擁有 <see cref="T:System.STAThreadAttribute" /> 的執行緒上呼叫此方法。</exception>
        <exception cref="T:System.PlatformNotSupportedException">在 Windows 98 或 Windows Millennium Edition 上不支援這個方法。</exception>
        <exception cref="T:System.InvalidOperationException">無法對 <see cref="T:System.Threading.WaitHandle" /> 發出信號，因為它可能會超過最大計數。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="millisecondsTimeout" /> 為 -1 以外的負數，表示無限逾時。</exception>
        <exception cref="T:System.Threading.AbandonedMutexException">由於執行緒結束時未釋放 Mutex，已完成等候。 在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</exception>
      </Docs>
    </Member>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public static bool SignalAndWait (System.Threading.WaitHandle toSignal, System.Threading.WaitHandle toWaitOn, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SignalAndWait(class System.Threading.WaitHandle toSignal, class System.Threading.WaitHandle toWaitOn, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SignalAndWait (toSignal As WaitHandle, toWaitOn As WaitHandle, timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SignalAndWait(System::Threading::WaitHandle ^ toSignal, System::Threading::WaitHandle ^ toWaitOn, TimeSpan timeout, bool exitContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toSignal" Type="System.Threading.WaitHandle" />
        <Parameter Name="toWaitOn" Type="System.Threading.WaitHandle" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="toSignal">要發出的 <see cref="T:System.Threading.WaitHandle" /> 信號。</param>
        <param name="toWaitOn">要等候的 <see cref="T:System.Threading.WaitHandle" />。</param>
        <param name="timeout">
          <see cref="T:System.TimeSpan" />，代表要等候的間隔。 如果此值為 -1，則會無限期等候。</param>
        <param name="exitContext">
          <see langword="true" /> 表示在等候 (如果在同步內容中) 前結束內容的同步處理網域，並於之後重新取得，否則為 <see langword="false" />。</param>
        <summary>發出一個 <see cref="T:System.Threading.WaitHandle" /> 信號並等候另一個，將逾時間隔指定為 <see cref="T:System.TimeSpan" />，並指定是否要先離開內容的同步處理網域，再進入等候狀態。</summary>
        <returns>
          如果順利完成信號發出和等候，則為 <see langword="true" />；如果完成信號發出但等候逾時，則為 <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這項作業不保證是不可部分完成。 在目前的執行緒訊號後`toSignal`之前等候`toWaitOn`，另一個處理器執行的執行緒可能會發出信號`toWaitOn`或等候它。  
  
 最大值`timeout`是<xref:System.Int32.MaxValue?displayProperty=nameWithType>。  
  
 如果`timeout`為零，此方法不會封鎖。 它會測試的狀態`toWaitOn`並立即傳回。  
  
## <a name="notes-on-exiting-the-context"></a>結束內容的資訊  
 `exitContext`參數沒有任何作用，除非<xref:System.Threading.WaitHandle.SignalAndWait%2A>方法從非預設的 managed 內容內呼叫。 如果執行緒位呼叫內部的衍生自類別的執行個體此情形<xref:System.ContextBoundObject>。 即使您目前正在執行的方法不是衍生自的類別上<xref:System.ContextBoundObject>、 like <xref:System.String>，您可以在非預設的內容中如果<xref:System.ContextBoundObject>您目前的應用程式定義域中的堆疊上。  
  
 當您的程式碼在非預設的內容中執行時，指定`true`如`exitContext`造成執行緒結束的非預設的 managed 的內容 (也就是轉換至預設內容) 執行之前<xref:System.Threading.WaitHandle.SignalAndWait%2A>方法。 執行緒的呼叫之後傳回原始的非預設內容<xref:System.Threading.WaitHandle.SignalAndWait%2A>方法完成。  
  
 這有助於進行此內容繫結類別具有<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>。 在此情況下，類別的成員的所有呼叫都會自動同步都處理，且同步處理網域為類別的程式碼的整個本文。 如果成員的呼叫堆疊中的程式碼會呼叫<xref:System.Threading.WaitHandle.SignalAndWait%2A>方法，並指定`true`如`exitContext`，執行緒結束的同步處理網域，讓呼叫物件的任何成員，以繼續進行遭到封鎖的執行緒。 當<xref:System.Threading.WaitHandle.SignalAndWait%2A>方法傳回時，進行呼叫的執行緒必須等待重新輸入同步處理網域。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="toSignal" /> 為 <see langword="null" />。  
  
 -或-  
  
 <paramref name="toWaitOn" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.NotSupportedException">在擁有 <see cref="T:System.STAThreadAttribute" /> 的執行緒上呼叫此方法。</exception>
        <exception cref="T:System.PlatformNotSupportedException">在 Windows 98 或 Windows Millennium Edition 上不支援這個方法。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="toSignal" /> 為號誌，且已經有完整計數。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> 判定為 -1 以外的負毫秒數目。  
  
 -或-  
  
 <paramref name="timeout" /> 大於 <see cref="F:System.Int32.MaxValue" />。</exception>
        <exception cref="T:System.Threading.AbandonedMutexException">由於執行緒結束時未釋放 Mutex，已完成等候。 在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitAll">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>等候指定陣列中的所有項目都收到信號。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle()) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <see langword="WaitHandle" /> 陣列，包含目前執行個體將等候的物件。 這個陣列不能包含相同物件的多個參考。</param>
        <summary>等候指定陣列中的所有項目都收到信號。</summary>
        <returns>
          當 <paramref name="waitHandles" /> 中的所有項目都收到信號時，則為 <see langword="true" />；否則絕不會傳回這個方法。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.AbandonedMutexException> 是.NET Framework 2.0 版的新功能。 在舊版中，<xref:System.Threading.WaitHandle.WaitAll%2A>方法會傳回`true`放棄 mutex 時。 已放棄的 mutex 通常表示發生嚴重的編碼錯誤。 如果是全系統 mutex，則可能表示應用程式已被突然終止 （例如，透過使用 Windows 工作管理員 」）。 包含適用於偵錯資訊的例外狀況。  
  
 <xref:System.Threading.WaitHandle.WaitAll%2A>方法會傳回所有控制代碼會收到信號。 在某些實作中，若傳遞了 64 個以上的控制代碼，<xref:System.NotSupportedException>就會擲回。 如果陣列包含重複的項目，呼叫會失敗並<xref:System.DuplicateWaitObjectException>。  
  
> [!NOTE]
>  <xref:System.Threading.WaitHandle.WaitAll%2A>必須執行緒上不支援方法<xref:System.STAThreadAttribute>。  
  
 呼叫這個方法多載就相當於呼叫<xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29>方法多載，並指定-1 (或<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>) 的`millisecondsTimeout`和`true`如`exitContext`。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用執行緒集區，以非同步方式建立和寫入檔案群組。 在完成時，做為工作項目和信號每一個寫入作業會排入佇列。 主執行緒等候發出信號的所有項目，然後結束。  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAll1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll1/CPP/source1.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAll1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll1/CS/source1.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAll1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll1/VB/source1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="waitHandles" /> 參數為 <see langword="null" />。 -或-  
  
 <paramref name="waitHandles" /> 陣列中的一或多個物件為 <see langword="null" />。  
  
 -或-  
  
 <paramref name="waitHandles" /> 是沒有任何項目的陣列，且 .NET Framework 版本為 2.0 或更新版本。</exception>
        <exception cref="T:System.DuplicateWaitObjectException">
          <block subset="none" type="note">
            <para>  
 在[適用於 Windows 市集應用程式的 .NET](http://go.microsoft.com/fwlink/?LinkID=247912) 或是[可攜式類別庫](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)中，改為攔截基底類別例外狀況 <see cref="T:System.ArgumentException" />。  
  
</para>
          </block>
          <paramref name="waitHandles" /> 陣列包含重複的項目。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="waitHandles" /> 中的物件數目超過系統允許的數目。  
  
 -或-  
  
 <see cref="T:System.STAThreadAttribute" /> 屬性會套用至目前執行緒的執行緒程序，且 <paramref name="waitHandles" /> 包含多個項目。</exception>
        <exception cref="T:System.ApplicationException">
          <paramref name="waitHandles" /> 是沒有任何項目的陣列，且 .NET Framework 版本為 1.0 或 1.1。</exception>
        <exception cref="T:System.Threading.AbandonedMutexException">由於執行緒結束時未釋放 Mutex，已結束等候。 在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="waitHandles" /> 陣列在另一個應用程式定義域中包含 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle(), millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <see langword="WaitHandle" /> 陣列，包含目前執行個體將等候的物件。 這個陣列無法包含相同物件 (複本) 的多個參考。</param>
        <param name="millisecondsTimeout">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
        <summary>等候指定陣列中的所有項目都收到信號，使用 <see cref="T:System.Int32" /> 值來指定時間間隔。</summary>
        <returns>
          當 <paramref name="waitHandles" /> 中的所有項目都收到信號時，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`millisecondsTimeout`為零，此方法不會封鎖。 它會測試等候控制代碼的狀態，並立即傳回。  
  
 <xref:System.Threading.WaitHandle.WaitAll%2A>方法傳回時則等候會終止，這表示所有控制代碼會收到信號或逾時發生時。 在某些實作中，若傳遞了 64 個以上的控制代碼，<xref:System.NotSupportedException>就會擲回。 如果陣列中有重複的項目，呼叫會失敗並<xref:System.DuplicateWaitObjectException>。  
  
> [!NOTE]
>  <xref:System.Threading.WaitHandle.WaitAll%2A>必須執行緒上不支援方法<xref:System.STAThreadAttribute>。  
  
 呼叫這個方法多載會呼叫相同<xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29>多載，並指定`false`如`exitContext`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="waitHandles" /> 參數為 <see langword="null" />。  
  
 -或-  
  
 <paramref name="waitHandles" /> 陣列中的一或多個物件為 <see langword="null" />。  
  
 -或-  
  
 <paramref name="waitHandles" /> 是不含任何項目的陣列。</exception>
        <exception cref="T:System.DuplicateWaitObjectException">
          <block subset="none" type="note">
            <para>  
 在[適用於 Windows 市集應用程式的 .NET](http://go.microsoft.com/fwlink/?LinkID=247912) 或是[可攜式類別庫](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)中，改為攔截基底類別例外狀況 <see cref="T:System.ArgumentException" />。  
  
</para>
          </block>
          <paramref name="waitHandles" /> 陣列包含重複的項目。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="waitHandles" /> 中的物件數目超過系統允許的數目。  
  
 -或-  
  
 <see cref="T:System.STAThreadAttribute" /> 屬性會套用至目前執行緒的執行緒程序，且 <paramref name="waitHandles" /> 包含多個項目。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="millisecondsTimeout" /> 為 -1 以外的負數，表示無限逾時。</exception>
        <exception cref="T:System.Threading.AbandonedMutexException">由於執行緒結束時未釋放 Mutex，已完成等候。 在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="waitHandles" /> 陣列在另一個應用程式定義域中包含 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle(), timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <see langword="WaitHandle" /> 陣列，包含目前執行個體將等候的物件。 這個陣列不能包含相同物件的多個參考。</param>
        <param name="timeout">
          <see cref="T:System.TimeSpan" />，代表要等候的毫秒數；或是 <see cref="T:System.TimeSpan" />，代表永遠等候的 -1 毫秒。</param>
        <summary>等候指定陣列中的所有項目都收到信號，使用 <see cref="T:System.TimeSpan" /> 值來指定時間間隔。</summary>
        <returns>
          當 <paramref name="waitHandles" /> 中的所有項目都收到信號時，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`timeout`為零，此方法不會封鎖。 它會測試等候控制代碼的狀態，並立即傳回。  
  
 <xref:System.Threading.WaitHandle.WaitAll%2A>方法傳回時則等候會終止，這表示可能是所有控制代碼會收到信號，或發生逾時。 在某些實作中，若傳遞了 64 個以上的控制代碼，<xref:System.NotSupportedException>就會擲回。 如果陣列包含重複的項目，則呼叫會失敗。  
  
> [!NOTE]
>  <xref:System.Threading.WaitHandle.WaitAll%2A>必須執行緒上不支援方法<xref:System.STAThreadAttribute>。  
  
 最大值`timeout`是<xref:System.Int32.MaxValue?displayProperty=nameWithType>。  
  
 呼叫這個方法多載會呼叫相同<xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.TimeSpan%2CSystem.Boolean%29>多載，並指定`false`如`exitContext`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="waitHandles" /> 參數為 <see langword="null" />。  
  
 -或-  
  
 <paramref name="waitHandles" /> 陣列中的一或多個物件為 <see langword="null" />。  
  
 -或-  
  
 <paramref name="waitHandles" /> 是不含任何項目的陣列。</exception>
        <exception cref="T:System.DuplicateWaitObjectException">
          <block subset="none" type="note">
            <para>  
 在[適用於 Windows 市集應用程式的 .NET](http://go.microsoft.com/fwlink/?LinkID=247912) 或是[可攜式類別庫](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)中，改為攔截基底類別例外狀況 <see cref="T:System.ArgumentException" />。  
  
</para>
          </block>
          <paramref name="waitHandles" /> 陣列包含重複的項目。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="waitHandles" /> 中的物件數目超過系統允許的數目。  
  
 -或-  
  
 <see cref="T:System.STAThreadAttribute" /> 屬性會套用至目前執行緒的執行緒程序，且 <paramref name="waitHandles" /> 包含多個項目。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> 為 -1 毫秒以外的負數，表示無限逾時。  
  
 -或-  
  
 <paramref name="timeout" /> 大於 <see cref="F:System.Int32.MaxValue" />。</exception>
        <exception cref="T:System.Threading.AbandonedMutexException">由於執行緒結束時未釋放 Mutex，已結束等候。 在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="waitHandles" /> 陣列在另一個應用程式定義域中包含 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle(), millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, int millisecondsTimeout, bool exitContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <see langword="WaitHandle" /> 陣列，包含目前執行個體將等候的物件。 這個陣列無法包含相同物件 (複本) 的多個參考。</param>
        <param name="millisecondsTimeout">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
        <param name="exitContext">
          <see langword="true" /> 表示在等候 (如果在同步內容中) 前結束內容的同步處理網域，並於之後重新取得，否則為 <see langword="false" />。</param>
        <summary>等候指定陣列中的所有項目都收到信號，使用 <see cref="T:System.Int32" /> 值來指定時間間隔，並指定是否要先離開同步處理網域，再開始等候。</summary>
        <returns>
          當 <paramref name="waitHandles" /> 中的所有項目都收到信號時，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`millisecondsTimeout`為零，此方法不會封鎖。 它會測試等候控制代碼的狀態，並立即傳回。  
  
 <xref:System.Threading.AbandonedMutexException> 是.NET Framework 2.0 版的新功能。 在舊版中，<xref:System.Threading.WaitHandle.WaitAll%2A>方法會傳回`true`放棄 mutex 時。 已放棄的 mutex 通常表示發生嚴重的編碼錯誤。 如果是全系統 mutex，則可能表示應用程式已被突然終止 （例如，透過使用 Windows 工作管理員 」）。 包含適用於偵錯資訊的例外狀況。  
  
 <xref:System.Threading.WaitHandle.WaitAll%2A>方法傳回時則等候會終止，這表示所有控制代碼會收到信號或逾時發生時。 在某些實作中，若傳遞了 64 個以上的控制代碼，<xref:System.NotSupportedException>就會擲回。 如果陣列中有重複的項目，呼叫會失敗並<xref:System.DuplicateWaitObjectException>。  
  
> [!NOTE]
>  <xref:System.Threading.WaitHandle.WaitAll%2A>必須執行緒上不支援方法<xref:System.STAThreadAttribute>。  
  
## <a name="notes-on-exiting-the-context"></a>結束內容的資訊  
 `exitContext`參數沒有任何作用，除非<xref:System.Threading.WaitHandle.WaitAll%2A>方法從非預設的 managed 內容內呼叫。 如果執行緒位呼叫內部的衍生自類別的執行個體此情形<xref:System.ContextBoundObject>。 即使您目前正在執行的方法不衍生自的類別上<xref:System.ContextBoundObject>、 like <xref:System.String>，您可以在非預設的內容中如果<xref:System.ContextBoundObject>您目前的應用程式定義域中的堆疊上。  
  
 當您的程式碼在非預設的內容中執行時，指定`true`如`exitContext`造成執行緒結束的非預設的 managed 的內容 (也就是轉換至預設內容) 執行之前<xref:System.Threading.WaitHandle.WaitAll%2A>方法。 執行緒的呼叫之後傳回原始的非預設內容<xref:System.Threading.WaitHandle.WaitAll%2A>方法完成。  
  
 這有助於進行此內容繫結類別具有<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>屬性。 在此情況下，類別的成員的所有呼叫都會自動同步都處理，且同步處理網域為類別的程式碼的整個本文。 如果成員的呼叫堆疊中的程式碼會呼叫<xref:System.Threading.WaitHandle.WaitAll%2A>方法，並指定`true`如`exitContext`，執行緒結束的同步處理網域，讓呼叫物件的任何成員，以繼續進行遭到封鎖的執行緒。 當<xref:System.Threading.WaitHandle.WaitAll%2A>方法傳回時，進行呼叫的執行緒必須等待重新輸入同步處理網域。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用執行緒集區，以非同步方式建立和寫入檔案群組。 在完成時，做為工作項目和信號每一個寫入作業會排入佇列。 主執行緒等候發出信號的所有項目，然後結束。  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAll2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAll2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll2/CS/source2.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAll2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="waitHandles" /> 參數為 <see langword="null" />。  
  
 -或-  
  
 <paramref name="waitHandles" /> 陣列中的一或多個物件為 <see langword="null" />。  
  
 -或-  
  
 <paramref name="waitHandles" /> 是沒有任何項目的陣列，且 .NET Framework 版本為 2.0 或更新版本。</exception>
        <exception cref="T:System.DuplicateWaitObjectException">
          <paramref name="waitHandles" /> 陣列包含重複的項目。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="waitHandles" /> 中的物件數目超過系統允許的數目。  
  
 -或-  
  
 <see cref="T:System.STAThreadAttribute" /> 屬性會套用至目前執行緒的執行緒程序，且 <paramref name="waitHandles" /> 包含多個項目。</exception>
        <exception cref="T:System.ApplicationException">
          <paramref name="waitHandles" /> 是沒有任何項目的陣列，且 .NET Framework 版本為 1.0 或 1.1。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="millisecondsTimeout" /> 為 -1 以外的負數，表示無限逾時。</exception>
        <exception cref="T:System.Threading.AbandonedMutexException">由於執行緒結束時未釋放 Mutex，已完成等候。 在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="waitHandles" /> 陣列在另一個應用程式定義域中包含 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle(), timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, TimeSpan timeout, bool exitContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <see langword="WaitHandle" /> 陣列，包含目前執行個體將等候的物件。 這個陣列不能包含相同物件的多個參考。</param>
        <param name="timeout">
          <see cref="T:System.TimeSpan" />，代表要等候的毫秒數；或是 <see cref="T:System.TimeSpan" />，代表永遠等候的 -1 毫秒。</param>
        <param name="exitContext">
          <see langword="true" /> 表示在等候 (如果在同步內容中) 前結束內容的同步處理網域，並於之後重新取得，否則為 <see langword="false" />。</param>
        <summary>等候指定陣列中的所有項目都收到信號，使用 <see cref="T:System.TimeSpan" /> 值來指定時間間隔，並指定是否要先離開同步處理網域，再開始等候。</summary>
        <returns>
          當 <paramref name="waitHandles" /> 中的所有元素都收到訊號時，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`timeout`為零，此方法不會封鎖。 它會測試等候控制代碼的狀態，並立即傳回。  
  
 <xref:System.Threading.AbandonedMutexException> 是.NET Framework 2.0 版的新功能。 在舊版中，<xref:System.Threading.WaitHandle.WaitAll%2A>方法會傳回`true`放棄 mutex 時。 已放棄的 mutex 通常表示發生嚴重的編碼錯誤。 如果是全系統 mutex，則可能表示應用程式已被突然終止 （例如，透過使用 Windows 工作管理員 」）。 包含適用於偵錯資訊的例外狀況。  
  
 <xref:System.Threading.WaitHandle.WaitAll%2A>方法傳回時則等候會終止，這表示可能是所有控制代碼會收到信號，或發生逾時。 在某些實作中，若傳遞了 64 個以上的控制代碼，<xref:System.NotSupportedException>就會擲回。 如果陣列包含重複的項目，則呼叫會失敗。  
  
> [!NOTE]
>  <xref:System.Threading.WaitHandle.WaitAll%2A>必須執行緒上不支援方法<xref:System.STAThreadAttribute>。  
  
 最大值`timeout`是<xref:System.Int32.MaxValue?displayProperty=nameWithType>。  
  
## <a name="notes-on-exiting-the-context"></a>結束內容的資訊  
 `exitContext`參數沒有任何作用，除非<xref:System.Threading.WaitHandle.WaitAll%2A>方法從非預設的 managed 內容內呼叫。 如果執行緒位呼叫內部的衍生自類別的執行個體此情形<xref:System.ContextBoundObject>。 即使您目前正在執行的方法不衍生自的類別上<xref:System.ContextBoundObject>、 like <xref:System.String>，您可以在非預設的內容中如果<xref:System.ContextBoundObject>您目前的應用程式定義域中的堆疊上。  
  
 當您的程式碼在非預設的內容中執行時，指定`true`如`exitContext`造成執行緒結束的非預設的 managed 的內容 (也就是轉換至預設內容) 執行之前<xref:System.Threading.WaitHandle.WaitAll%2A>方法。 它會傳回原始的非預設內容呼叫之後<xref:System.Threading.WaitHandle.WaitAll%2A>方法完成。  
  
 這有助於進行此內容繫結類別具有<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>。 在此情況下，類別的成員的所有呼叫都會自動同步都處理，且同步處理網域為類別的程式碼的整個本文。 如果成員的呼叫堆疊中的程式碼會呼叫<xref:System.Threading.WaitHandle.WaitAll%2A>方法，並指定`true`如`exitContext`，執行緒結束的同步處理網域，讓呼叫物件的任何成員，以繼續進行遭到封鎖的執行緒。 當<xref:System.Threading.WaitHandle.WaitAll%2A>方法傳回時，進行呼叫的執行緒必須等待重新輸入同步處理網域。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用執行緒集區，以非同步方式建立和寫入檔案群組。 在完成時，做為工作項目和信號每一個寫入作業會排入佇列。 主執行緒等候發出信號的所有項目，然後結束。  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAll3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll3/CPP/source3.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAll3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll3/CS/source3.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAll3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll3/VB/source3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="waitHandles" /> 參數為 <see langword="null" />。  
  
 -或-  
  
 <paramref name="waitHandles" /> 陣列中的一或多個物件為 <see langword="null" />。  
  
 -或-  
  
 <paramref name="waitHandles" /> 是沒有任何項目的陣列，且 .NET Framework 版本為 2.0 或更新版本。</exception>
        <exception cref="T:System.DuplicateWaitObjectException">
          <paramref name="waitHandles" /> 陣列包含重複的項目。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="waitHandles" /> 中的物件數目超過系統允許的數目。  
  
 -或-  
  
 <see cref="T:System.STAThreadAttribute" /> 屬性會套用至目前執行緒的執行緒程序，且 <paramref name="waitHandles" /> 包含多個項目。</exception>
        <exception cref="T:System.ApplicationException">
          <paramref name="waitHandles" /> 是沒有任何項目的陣列，且 .NET Framework 版本為 1.0 或 1.1。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> 為 -1 毫秒以外的負數，表示無限逾時。  
  
 -或-  
  
 <paramref name="timeout" /> 大於 <see cref="F:System.Int32.MaxValue" />。</exception>
        <exception cref="T:System.Threading.AbandonedMutexException">由於執行緒結束時未釋放 Mutex，已結束等候。 在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="waitHandles" /> 陣列在另一個應用程式定義域中包含 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitAny">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>等候指定陣列中有任何項目收到信號。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <see langword="WaitHandle" /> 陣列，包含目前執行個體將等候的物件。</param>
        <summary>等候指定陣列中有任何項目收到信號。</summary>
        <returns>滿足等候條件之物件的陣列索引。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.AbandonedMutexException> 是.NET Framework 2.0 版的新功能。 在舊版中，<xref:System.Threading.WaitHandle.WaitAny%2A>方法會傳回`true`如果因為放棄 mutex，等候完成。 已放棄的 mutex 通常表示發生嚴重的編碼錯誤。 如果是全系統 mutex，則可能表示應用程式已被突然終止 （例如，透過使用 Windows 工作管理員 」）。 包含適用於偵錯資訊的例外狀況。  
  
 <xref:System.Threading.WaitHandle.WaitAny%2A>方法會擲回<xref:System.Threading.AbandonedMutexException>只等候完成的時間因為已放棄的 mutex。 如果`waitHandles`包含已發行的 mutex，較低的索引數目，已放棄的 mutex，比<xref:System.Threading.WaitHandle.WaitAny%2A>方法正常完成，並不會擲回例外狀況。  
  
> [!NOTE]
>  在.NET Framework 2.0 版中，如果在執行緒結束或中止但未明確地釋放之前的版本中<xref:System.Threading.Mutex>，而且`Mutex`中位於索引 0 （零）`WaitAny`上另一個執行緒，所傳回的索引陣列`WaitAny`是128 而不是 0。  
  
 這個方法會傳回任何控制代碼會收到信號時。 如果多個物件會變成通話期間發出訊號，則傳回的值會是具有最小的信號的所有物件的索引值的信號物件的陣列索引。 在某些實作中，如果多個傳遞 64 的控制代碼，<xref:System.NotSupportedException>就會擲回。  
  
 呼叫這個方法多載就相當於呼叫<xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29>方法多載，並指定-1 (或<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>) 的`millisecondsTimeout`和`true`如`exitContext`。  
  
   
  
## Examples  
 下列程式碼範例示範呼叫<xref:System.Threading.WaitHandle.WaitAny%2A>方法。  
  
 [!code-cpp[WaitHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/WaitHandle/cpp/WaitHandle.cpp#1)]
 [!code-csharp[WaitHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/WaitHandle/CS/WaitHandle.cs#1)]
 [!code-vb[WaitHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/WaitHandle/VB/WaitHandle.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="waitHandles" /> 參數為 <see langword="null" />。  
  
 -或-  
  
 <paramref name="waitHandles" /> 陣列中的一或多個物件為 <see langword="null" />。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="waitHandles" /> 中的物件數目超過系統允許的數目。</exception>
        <exception cref="T:System.ApplicationException">
          <paramref name="waitHandles" /> 是不具有項目的陣列，且 .NET Framework 版本為 1.0 或 1.1。</exception>
        <exception cref="T:System.Threading.AbandonedMutexException">由於執行緒結束時未釋放 Mutex，已完成等候。 在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="waitHandles" /> 是不具有元素的陣列，且 .NET Framework 版本為 2.0 (含) 以後版本。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="waitHandles" /> 陣列在另一個應用程式定義域中包含 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle(), millisecondsTimeout As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <see langword="WaitHandle" /> 陣列，包含目前執行個體將等候的物件。</param>
        <param name="millisecondsTimeout">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
        <summary>等候指定之陣列中有任何項目收到信號，使用 32 位元帶正負號的整數以指定時間間隔。</summary>
        <returns>滿足等候條件之物件的陣列索引；如果沒有物件滿足等候條件，而且已經過相當於 <paramref name="millisecondsTimeout" /> 的時間間隔，則為 <see cref="F:System.Threading.WaitHandle.WaitTimeout" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`millisecondsTimeout`為零，此方法不會封鎖。 它會測試等候控制代碼的狀態，並立即傳回。  
  
 <xref:System.Threading.WaitHandle.WaitAny%2A>方法會擲回<xref:System.Threading.AbandonedMutexException>只等候完成的時間因為已放棄的 mutex。 如果`waitHandles`包含已發行的 mutex，較低的索引數目，已放棄的 mutex，比<xref:System.Threading.WaitHandle.WaitAny%2A>方法正常完成，並不會擲回例外狀況。  
  
 這個方法傳回時則等候會終止，任何控制代碼信號或發生逾時。 如果多個物件會變成通話期間發出訊號，則傳回的值會是具有最小的信號的所有物件的索引值的信號物件的陣列索引。 在某些實作中，如果多個傳遞 64 的控制代碼，<xref:System.NotSupportedException>就會擲回。  
  
 呼叫這個方法多載會呼叫相同<xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29>多載，並指定`false`如`exitContext`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="waitHandles" /> 參數為 <see langword="null" />。  
  
 -或-  
  
 <paramref name="waitHandles" /> 陣列中的一或多個物件為 <see langword="null" />。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="waitHandles" /> 中的物件數目超過系統允許的數目。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="millisecondsTimeout" /> 為 -1 以外的負數，表示無限逾時。</exception>
        <exception cref="T:System.Threading.AbandonedMutexException">由於執行緒結束時未釋放 Mutex，已完成等候。 在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="waitHandles" /> 是不含任何項目的陣列。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="waitHandles" /> 陣列在另一個應用程式定義域中包含 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle(), timeout As TimeSpan) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <see langword="WaitHandle" /> 陣列，包含目前執行個體將等候的物件。</param>
        <param name="timeout">
          <see cref="T:System.TimeSpan" />，代表等候毫秒數；或是 <see cref="T:System.TimeSpan" />，代表無限期等候的 -1 毫秒。</param>
        <summary>等候指定陣列中的所有項目都收到信號，使用 <see cref="T:System.TimeSpan" /> 來指定時間間隔。</summary>
        <returns>滿足等候條件之物件的陣列索引；如果沒有物件滿足等候條件，而且已經過相當於 <paramref name="timeout" /> 的時間間隔，則為 <see cref="F:System.Threading.WaitHandle.WaitTimeout" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`timeout`為零，此方法不會封鎖。 它會測試等候控制代碼的狀態，並立即傳回。  
  
 <xref:System.Threading.WaitHandle.WaitAny%2A>方法會擲回<xref:System.Threading.AbandonedMutexException>只等候完成的時間因為已放棄的 mutex。 如果`waitHandles`包含已發行的 mutex，較低的索引數目，已放棄的 mutex，比<xref:System.Threading.WaitHandle.WaitAny%2A>方法正常完成，並不會擲回例外狀況。  
  
 這個方法傳回時則等候會終止，任何控制代碼信號或逾時的情況。 如果多個物件會變成通話期間發出訊號，則傳回的值會是具有最小的信號的所有物件的索引值的信號物件的陣列索引。 在某些實作中，如果多個傳遞 64 的控制代碼，<xref:System.NotSupportedException>就會擲回。  
  
 最大值`timeout`是<xref:System.Int32.MaxValue?displayProperty=nameWithType>。  
  
 呼叫這個方法多載會呼叫相同<xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.TimeSpan%2CSystem.Boolean%29>多載，並指定`false`如`exitContext`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="waitHandles" /> 參數為 <see langword="null" />。  
  
 -或-  
  
 <paramref name="waitHandles" /> 陣列中的一或多個物件為 <see langword="null" />。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="waitHandles" /> 中的物件數目超過系統允許的數目。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> 為 -1 毫秒以外的負數，表示無限逾時。  
  
 -或-  
  
 <paramref name="timeout" /> 大於 <see cref="F:System.Int32.MaxValue" />。</exception>
        <exception cref="T:System.Threading.AbandonedMutexException">由於執行緒結束時未釋放 Mutex，已完成等候。 在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="waitHandles" /> 是不含任何項目的陣列。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="waitHandles" /> 陣列在另一個應用程式定義域中包含 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle(), millisecondsTimeout As Integer, exitContext As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, int millisecondsTimeout, bool exitContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <see langword="WaitHandle" /> 陣列，包含目前執行個體將等候的物件。</param>
        <param name="millisecondsTimeout">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
        <param name="exitContext">
          <see langword="true" /> 表示在等候 (如果在同步內容中) 前結束內容的同步處理網域，並於之後重新取得，否則為 <see langword="false" />。</param>
        <summary>等候指定陣列中有任何項目收到信號；使用 32 位元帶正負號的整數 (Signed Integer) 來指定時間間隔，並指定是否在等候之前先離開同步處理領域。</summary>
        <returns>滿足等候條件之物件的陣列索引；如果沒有物件滿足等候條件，而且已經過相當於 <paramref name="millisecondsTimeout" /> 的時間間隔，則為 <see cref="F:System.Threading.WaitHandle.WaitTimeout" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`millisecondsTimeout`為零，此方法不會封鎖。 它會測試等候控制代碼的狀態，並立即傳回。  
  
 <xref:System.Threading.AbandonedMutexException> 是.NET Framework 2.0 版的新功能。 在舊版中，<xref:System.Threading.WaitHandle.WaitAny%2A>方法會傳回`true`如果因為放棄 mutex，等候完成。 已放棄的 mutex 通常表示發生嚴重的編碼錯誤。 如果是全系統 mutex，則可能表示應用程式已被突然終止 （例如，透過使用 Windows 工作管理員 」）。 包含適用於偵錯資訊的例外狀況。  
  
 <xref:System.Threading.WaitHandle.WaitAny%2A>方法會擲回<xref:System.Threading.AbandonedMutexException>只等候完成的時間因為已放棄的 mutex。 如果`waitHandles`包含已發行的 mutex，較低的索引數目，已放棄的 mutex，比<xref:System.Threading.WaitHandle.WaitAny%2A>方法正常完成，並不會擲回例外狀況。  
  
> [!NOTE]
>  在.NET Framework 2.0 版中，如果在執行緒結束或中止但未明確地釋放之前的版本中<xref:System.Threading.Mutex>，而且`Mutex`中位於索引 0 （零）`WaitAny`上另一個執行緒，所傳回的索引陣列`WaitAny`是128 而不是 0。  
  
 這個方法傳回時則等候會終止，任何控制代碼信號或發生逾時。 如果多個物件會變成通話期間發出訊號，則傳回的值會是具有最小的信號的所有物件的索引值的信號物件的陣列索引。 在某些實作中，如果多個傳遞 64 的控制代碼，<xref:System.NotSupportedException>就會擲回。  
  
## <a name="notes-on-exiting-the-context"></a>結束內容的資訊  
 `exitContext`參數沒有任何作用，除非<xref:System.Threading.WaitHandle.WaitAny%2A>方法從非預設的 managed 內容內呼叫。 如果執行緒位呼叫內部的衍生自類別的執行個體此情形<xref:System.ContextBoundObject>。 即使您目前正在執行的方法不是衍生自的類別上<xref:System.ContextBoundObject>、 like <xref:System.String>，您可以在非預設的內容中如果<xref:System.ContextBoundObject>您目前的應用程式定義域中的堆疊上。  
  
 當您的程式碼在非預設的內容中執行時，指定`true`如`exitContext`造成執行緒結束的非預設的 managed 的內容 (也就是轉換至預設內容) 執行之前<xref:System.Threading.WaitHandle.WaitAny%2A>方法。 執行緒的呼叫之後傳回原始的非預設內容<xref:System.Threading.WaitHandle.WaitAny%2A>方法完成。  
  
 這有助於進行此內容繫結類別具有<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>。 在此情況下，類別的成員的所有呼叫都會自動同步都處理，且同步處理網域為類別的程式碼的整個本文。 如果成員的呼叫堆疊中的程式碼會呼叫<xref:System.Threading.WaitHandle.WaitAny%2A>方法，並指定`true`如`exitContext`，執行緒結束的同步處理網域，讓呼叫物件的任何成員，以繼續進行遭到封鎖的執行緒。 當<xref:System.Threading.WaitHandle.WaitAny%2A>方法傳回時，進行呼叫的執行緒必須等待重新輸入同步處理網域。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用執行緒集區同時搜尋多個磁碟上的檔案。 空間考量因素，如搜尋才每個磁碟的根目錄。  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/CS/source2.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="waitHandles" /> 參數為 <see langword="null" />。  
  
 -或-  
  
 <paramref name="waitHandles" /> 陣列中的一或多個物件為 <see langword="null" />。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="waitHandles" /> 中的物件數目超過系統允許的數目。</exception>
        <exception cref="T:System.ApplicationException">
          <paramref name="waitHandles" /> 是不具有項目的陣列，且 .NET Framework 版本為 1.0 或 1.1。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="millisecondsTimeout" /> 為 -1 以外的負數，表示無限逾時。</exception>
        <exception cref="T:System.Threading.AbandonedMutexException">由於執行緒結束時未釋放 Mutex，已完成等候。 在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="waitHandles" /> 是不具有元素的陣列，且 .NET Framework 版本為 2.0 (含) 以後版本。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="waitHandles" /> 陣列在另一個應用程式定義域中包含 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle(), timeout As TimeSpan, exitContext As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, TimeSpan timeout, bool exitContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <see langword="WaitHandle" /> 陣列，包含目前執行個體將等候的物件。</param>
        <param name="timeout">
          <see cref="T:System.TimeSpan" />，代表等候毫秒數；或是 <see cref="T:System.TimeSpan" />，代表無限期等候的 -1 毫秒。</param>
        <param name="exitContext">
          <see langword="true" /> 表示在等候 (如果在同步內容中) 前結束內容的同步處理網域，並於之後重新取得，否則為 <see langword="false" />。</param>
        <summary>等候指定陣列中的所有項目都收到信號，使用 <see cref="T:System.TimeSpan" /> 來指定時間間隔，並指定是否要先離開同步處理網域，再開始等候。</summary>
        <returns>滿足等候條件之物件的陣列索引；如果沒有物件滿足等候條件，而且已經過相當於 <paramref name="timeout" /> 的時間間隔，則為 <see cref="F:System.Threading.WaitHandle.WaitTimeout" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`timeout`為零，此方法不會封鎖。 它會測試等候控制代碼的狀態，並立即傳回。  
  
 <xref:System.Threading.AbandonedMutexException> 是.NET Framework 2.0 版的新功能。 在舊版中，<xref:System.Threading.WaitHandle.WaitAny%2A>方法會傳回`true`如果因為放棄 mutex，等候完成。 已放棄的 mutex 通常表示發生嚴重的編碼錯誤。 如果是全系統 mutex，則可能表示應用程式已被突然終止 （例如，透過使用 Windows 工作管理員 」）。 包含適用於偵錯資訊的例外狀況。  
  
 <xref:System.Threading.WaitHandle.WaitAny%2A>方法會擲回<xref:System.Threading.AbandonedMutexException>只等候完成的時間因為已放棄的 mutex。 如果`waitHandles`包含已發行的 mutex，較低的索引數目，已放棄的 mutex，比<xref:System.Threading.WaitHandle.WaitAny%2A>方法正常完成，並不會擲回例外狀況。  
  
> [!NOTE]
>  在.NET Framework 2.0 版中，如果在執行緒結束或中止但未明確地釋放之前的版本中<xref:System.Threading.Mutex>，而且`Mutex`中位於索引 0 （零）`WaitAny`上另一個執行緒，所傳回的索引陣列`WaitAny`是128 而不是 0。  
  
 這個方法傳回時則等候會終止，任何控制代碼信號或逾時的情況。 如果多個物件會變成通話期間發出訊號，則傳回的值會是具有最小的信號的所有物件的索引值的信號物件的陣列索引。 在某些實作中，如果多個傳遞 64 的控制代碼，<xref:System.NotSupportedException>就會擲回。  
  
 最大值`timeout`是<xref:System.Int32.MaxValue?displayProperty=nameWithType>。  
  
## <a name="notes-on-exiting-the-context"></a>結束內容的資訊  
 `exitContext`參數沒有任何作用，除非<xref:System.Threading.WaitHandle.WaitAny%2A>方法從非預設的 managed 內容內呼叫。 如果執行緒位呼叫內部的衍生自類別的執行個體此情形<xref:System.ContextBoundObject>。 即使您目前正在執行的方法不是衍生自的類別上<xref:System.ContextBoundObject>、 like <xref:System.String>，您可以在非預設的內容中如果<xref:System.ContextBoundObject>您目前的應用程式定義域中的堆疊上。  
  
 當您的程式碼在非預設的內容中執行時，指定`true`如`exitContext`造成執行緒結束的非預設的 managed 的內容 (也就是轉換至預設內容) 執行之前<xref:System.Threading.WaitHandle.WaitAny%2A>方法。 執行緒的呼叫之後傳回原始的非預設內容<xref:System.Threading.WaitHandle.WaitAny%2A>方法完成。  
  
 這有助於進行此內容繫結類別具有<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>。 在此情況下，類別的成員的所有呼叫都會自動同步都處理，且同步處理網域為類別的程式碼的整個本文。 如果成員的呼叫堆疊中的程式碼會呼叫<xref:System.Threading.WaitHandle.WaitAny%2A>方法，並指定`true`如`exitContext`，執行緒結束的同步處理網域，讓呼叫物件的任何成員，以繼續進行遭到封鎖的執行緒。 當<xref:System.Threading.WaitHandle.WaitAny%2A>方法傳回時，進行呼叫的執行緒必須等待重新輸入同步處理網域。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用執行緒集區同時搜尋多個磁碟上的檔案。 空間考量因素，如搜尋才每個磁碟的根目錄。  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAny3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny3/CPP/source3.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAny3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny3/CS/source3.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAny3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny3/VB/source3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="waitHandles" /> 參數為 <see langword="null" />。  
  
 -或-  
  
 <paramref name="waitHandles" /> 陣列中的一或多個物件為 <see langword="null" />。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="waitHandles" /> 中的物件數目超過系統允許的數目。</exception>
        <exception cref="T:System.ApplicationException">
          <paramref name="waitHandles" /> 是不具有項目的陣列，且 .NET Framework 版本為 1.0 或 1.1。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> 為 -1 毫秒以外的負數，表示無限逾時。  
  
 -或-  
  
 <paramref name="timeout" /> 大於 <see cref="F:System.Int32.MaxValue" />。</exception>
        <exception cref="T:System.Threading.AbandonedMutexException">由於執行緒結束時未釋放 Mutex，已完成等候。 在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="waitHandles" /> 是不具有元素的陣列，且 .NET Framework 版本為 2.0 (含) 以後版本。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="waitHandles" /> 陣列在另一個應用程式定義域中包含 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitOne">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>封鎖目前的執行緒，直到目前的 <see cref="T:System.Threading.WaitHandle" /> 收到訊號為止。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>封鎖目前的執行緒，直到目前的 <see cref="T:System.Threading.WaitHandle" /> 收到訊號為止。</summary>
        <returns>
          如果目前的執行個體有收到信號，則為 <see langword="true" />。 如果目前的執行個體一直沒有收到訊號，<see cref="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)" /> 就一定不會傳回。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.AbandonedMutexException> 是.NET Framework 2.0 版的新功能。 在舊版中，<xref:System.Threading.WaitHandle.WaitOne%2A>方法會傳回`true`放棄 mutex 時。 已放棄的 mutex 通常表示發生嚴重的編碼錯誤。 如果是全系統 mutex，則可能表示應用程式已被突然終止 （例如，透過使用 Windows 工作管理員 」）。 包含適用於偵錯資訊的例外狀況。  
  
 這個方法會封鎖，直到目前的執行個體收到訊號的呼叫端。 使用這個方法來封鎖直到<xref:System.Threading.WaitHandle>從另一個執行緒收到訊號，例如便會產生非同步作業完成時。 如需詳細資訊，請參閱<xref:System.IAsyncResult>介面。  
  
 呼叫這個方法多載就相當於呼叫<xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29>方法多載，並指定-1 或<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>第一個參數和`false`第二個參數。  
  
 覆寫這個方法以自訂在衍生類別的行為。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用等候控制代碼，以防止處理程序同時等候背景執行緒完成執行。  
  
 [!code-cpp[System.Threading.WaitHandle.WaitOne1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne1/CPP/source1.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitOne1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne1/CS/source1.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitOne1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne1/VB/source1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">目前的執行個體已經過處置。</exception>
        <exception cref="T:System.Threading.AbandonedMutexException">由於執行緒結束時未釋放 Mutex，已完成等候。 在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</exception>
        <exception cref="T:System.InvalidOperationException">目前的執行個體是另一個應用程式定義域中 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</exception>
      </Docs>
    </Member>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne(int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
        <summary>封鎖目前執行緒，直到目前的 <see cref="T:System.Threading.WaitHandle" /> 收到信號為止，使用 32 位元帶正負號的整數來指定時間間隔 (以毫秒為單位)。</summary>
        <returns>
          如果目前的執行個體收到信號，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`millisecondsTimeout`為零，此方法不會封鎖。 它會測試的狀態，等候控制代碼，並立即傳回。  
  
 這個方法會封鎖，直到目前的執行個體收到信號或逾時的呼叫端就會發生。 使用這個方法來封鎖直到<xref:System.Threading.WaitHandle>從另一個執行緒收到訊號，例如便會產生非同步作業完成時。 如需詳細資訊，請參閱<xref:System.IAsyncResult>介面。  
  
 覆寫這個方法以自訂在衍生類別的行為。  
  
 呼叫這個方法多載會呼叫相同<xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29>多載，並指定`false`如`exitContext`。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用等候控制代碼，以防止處理程序同時等候背景執行緒完成執行。  
  
 [!code-cpp[System.Threading.WaitHandle.WaitOne2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitOne2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne2/CS/source2.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitOne2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">目前的執行個體已經過處置。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="millisecondsTimeout" /> 為 -1 以外的負數，表示無限逾時。</exception>
        <exception cref="T:System.Threading.AbandonedMutexException">由於執行緒結束時未釋放 Mutex，已完成等候。 在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</exception>
        <exception cref="T:System.InvalidOperationException">目前的執行個體是另一個應用程式定義域中 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</exception>
      </Docs>
    </Member>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne(TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <see cref="T:System.TimeSpan" />，代表等候毫秒數；或是 <see cref="T:System.TimeSpan" />，代表無限期等候的 -1 毫秒。</param>
        <summary>封鎖目前執行緒，直到目前執行個體收到信號為止，使用 <see cref="T:System.TimeSpan" /> 來指定時間間隔。</summary>
        <returns>
          如果目前的執行個體收到信號，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`timeout`為零，此方法不會封鎖。 它會測試的狀態，等候控制代碼，並立即傳回。  
  
 這個方法會封鎖，直到目前的執行個體收到信號或逾時的呼叫端就會發生。 使用這個方法來封鎖直到<xref:System.Threading.WaitHandle>從另一個執行緒收到訊號，例如便會產生非同步作業完成時。 如需詳細資訊，請參閱<xref:System.IAsyncResult>介面。  
  
 覆寫這個方法以自訂在衍生類別的行為。  
  
 最大值`timeout`是<xref:System.Int32.MaxValue?displayProperty=nameWithType>。  
  
 呼叫這個方法多載會呼叫相同<xref:System.Threading.WaitHandle.WaitOne%28System.TimeSpan%2CSystem.Boolean%29>多載，並指定`false`如`exitContext`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">目前的執行個體已經過處置。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> 為 -1 毫秒以外的負數，表示無限逾時。  
  
 -或-  
  
 <paramref name="timeout" /> 大於 <see cref="F:System.Int32.MaxValue" />。</exception>
        <exception cref="T:System.Threading.AbandonedMutexException">由於執行緒結束時未釋放 Mutex，已完成等候。 在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</exception>
        <exception cref="T:System.InvalidOperationException">目前的執行個體是另一個應用程式定義域中 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</exception>
      </Docs>
    </Member>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne (int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne(int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne (millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne(int millisecondsTimeout, bool exitContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
        <param name="exitContext">
          <see langword="true" /> 表示在等候 (如果在同步內容中) 前結束內容的同步處理網域，並於之後重新取得，否則為 <see langword="false" />。</param>
        <summary>封鎖目前執行緒，直到目前的 <see cref="T:System.Threading.WaitHandle" /> 收到信號為止，使用 32 位元帶正負號的整數來指定時間間隔，並指定是否要先離開同步處理網域，再開始等候。</summary>
        <returns>
          如果目前的執行個體收到信號，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`millisecondsTimeout`為零，此方法不會封鎖。 它會測試的狀態，等候控制代碼，並立即傳回。  
  
 <xref:System.Threading.AbandonedMutexException> 是.NET Framework 2.0 版的新功能。 在舊版中，<xref:System.Threading.WaitHandle.WaitOne%2A>方法會傳回`true`放棄 mutex 時。 已放棄的 mutex 通常表示發生嚴重的編碼錯誤。 如果是全系統 mutex，則可能表示應用程式已被突然終止 （例如，透過使用 Windows 工作管理員 」）。 包含適用於偵錯資訊的例外狀況。  
  
 這個方法會封鎖，直到目前的執行個體收到信號或逾時的呼叫端就會發生。 使用這個方法來封鎖直到<xref:System.Threading.WaitHandle>從另一個執行緒收到訊號，例如便會產生非同步作業完成時。 如需詳細資訊，請參閱<xref:System.IAsyncResult>介面。  
  
 覆寫這個方法以自訂在衍生類別的行為。  
  
## <a name="notes-on-exiting-the-context"></a>結束內容的資訊  
 `exitContext`參數沒有任何作用，除非<xref:System.Threading.WaitHandle.WaitOne%2A>方法從非預設的 managed 內容內呼叫。 如果執行緒位呼叫內部的衍生自類別的執行個體此情形<xref:System.ContextBoundObject>。 即使您目前正在執行的方法不是衍生自的類別上<xref:System.ContextBoundObject>、 like <xref:System.String>，您可以在非預設的內容中如果<xref:System.ContextBoundObject>您目前的應用程式定義域中的堆疊上。  
  
 當您的程式碼在非預設的內容中執行時，指定`true`如`exitContext`造成執行緒結束的非預設的 managed 的內容 (也就是轉換至預設內容) 執行之前<xref:System.Threading.WaitHandle.WaitOne%2A>方法。 執行緒的呼叫之後傳回原始的非預設內容<xref:System.Threading.WaitHandle.WaitOne%2A>方法完成。  
  
 這有助於進行此內容繫結類別具有<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>。 在此情況下，類別的成員的所有呼叫都會自動同步都處理，且同步處理網域為類別的程式碼的整個本文。 如果成員的呼叫堆疊中的程式碼會呼叫<xref:System.Threading.WaitHandle.WaitOne%2A>方法，並指定`true`如`exitContext`，執行緒結束的同步處理網域，讓呼叫物件的任何成員，以繼續進行遭到封鎖的執行緒。 當<xref:System.Threading.WaitHandle.WaitOne%2A>方法傳回時，進行呼叫的執行緒必須等待重新輸入同步處理網域。  
  
   
  
## Examples  
 下列範例會示範如何<xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29>時它同步處理網域中呼叫方法多載的行為。 首先，執行緒會等待與`exitContext`設`false`，直到等候的逾時到期。 第二個執行緒執行之後的第一個執行緒終止，並等候與`exitContext`設`true`。 表示這個第二個執行緒的等候控制代碼呼叫不會遭到封鎖，並等候逾時前完成的執行緒。  
  
 [!code-cpp[System.Threading.WaitHandle.WaitOne4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.threading.waithandle.waitone4/cpp/source.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitOne4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.waithandle.waitone4/cs/source.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitOne4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.waithandle.waitone4/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">目前的執行個體已經過處置。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="millisecondsTimeout" /> 為 -1 以外的負數，表示無限逾時。</exception>
        <exception cref="T:System.Threading.AbandonedMutexException">由於執行緒結束時未釋放 Mutex，已完成等候。 在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</exception>
        <exception cref="T:System.InvalidOperationException">目前的執行個體是另一個應用程式定義域中 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</exception>
      </Docs>
    </Member>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne (TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne(valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne (timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne(TimeSpan timeout, bool exitContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <see cref="T:System.TimeSpan" />，代表等候毫秒數；或是 <see cref="T:System.TimeSpan" />，代表無限期等候的 -1 毫秒。</param>
        <param name="exitContext">
          <see langword="true" /> 表示在等候 (如果在同步內容中) 前結束內容的同步處理網域，並於之後重新取得，否則為 <see langword="false" />。</param>
        <summary>封鎖目前執行緒，直到目前執行個體收到信號為止，使用 <see cref="T:System.TimeSpan" /> 來指定時間間隔，並指定是否要先離開同步處理網域，再開始等候。</summary>
        <returns>
          如果目前的執行個體收到信號，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`timeout`為零，此方法不會封鎖。 它會測試的狀態，等候控制代碼，並立即傳回。  
  
 <xref:System.Threading.AbandonedMutexException> 是.NET Framework 2.0 版的新功能。 在舊版中，<xref:System.Threading.WaitHandle.WaitOne%2A>方法會傳回`true`放棄 mutex 時。 已放棄的 mutex 通常表示發生嚴重的編碼錯誤。 如果是全系統 mutex，則可能表示應用程式已被突然終止 （例如，透過使用 Windows 工作管理員 」）。 包含適用於偵錯資訊的例外狀況。  
  
 這個方法會封鎖，直到目前的執行個體收到信號或逾時的呼叫端就會發生。 使用這個方法來封鎖直到<xref:System.Threading.WaitHandle>從另一個執行緒收到訊號，例如便會產生非同步作業完成時。 如需詳細資訊，請參閱<xref:System.IAsyncResult>介面。  
  
 覆寫這個方法以自訂在衍生類別的行為。  
  
 最大值`timeout`是<xref:System.Int32.MaxValue?displayProperty=nameWithType>。  
  
## <a name="notes-on-exiting-the-context"></a>結束內容的資訊  
 `exitContext`參數沒有任何作用，除非<xref:System.Threading.WaitHandle.WaitOne%2A>方法從非預設的 managed 內容內呼叫。 如果執行緒位呼叫內部的衍生自類別的執行個體此情形<xref:System.ContextBoundObject>。 即使您目前正在執行的方法不是衍生自的類別上<xref:System.ContextBoundObject>、 like <xref:System.String>，您可以在非預設的內容中如果<xref:System.ContextBoundObject>您目前的應用程式定義域中的堆疊上。  
  
 當您的程式碼在非預設的內容中執行時，指定`true`如`exitContext`造成執行緒結束的非預設的 managed 的內容 (也就是轉換至預設內容) 執行之前<xref:System.Threading.WaitHandle.WaitOne%2A>方法。 執行緒的呼叫之後傳回原始的非預設內容<xref:System.Threading.WaitHandle.WaitOne%2A>方法完成。  
  
 這有助於進行此內容繫結類別具有<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>。 在此情況下，類別的成員的所有呼叫都會自動同步都處理，且同步處理網域為類別的程式碼的整個本文。 如果成員的呼叫堆疊中的程式碼會呼叫<xref:System.Threading.WaitHandle.WaitOne%2A>方法，並指定`true`如`exitContext`，執行緒結束的同步處理網域，讓呼叫物件的任何成員，以繼續進行遭到封鎖的執行緒。 當<xref:System.Threading.WaitHandle.WaitOne%2A>方法傳回時，進行呼叫的執行緒必須等待重新輸入同步處理網域。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用等候控制代碼，以防止處理程序同時等候背景執行緒完成執行。  
  
 [!code-cpp[System.Threading.WaitHandle.WaitOne3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne3/CPP/source3.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitOne3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne3/CS/source3.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitOne3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne3/VB/source3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">目前的執行個體已經過處置。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> 為 -1 毫秒以外的負數，表示無限逾時。  
  
 -或-  
  
 <paramref name="timeout" /> 大於 <see cref="F:System.Int32.MaxValue" />。</exception>
        <exception cref="T:System.Threading.AbandonedMutexException">由於執行緒結束時未釋放 Mutex，已完成等候。 在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</exception>
        <exception cref="T:System.InvalidOperationException">目前的執行個體是另一個應用程式定義域中 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</exception>
      </Docs>
    </Member>
    <Member MemberName="WaitTimeout">
      <MemberSignature Language="C#" Value="public const int WaitTimeout = 258;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 WaitTimeout = (258)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.WaitHandle.WaitTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Const WaitTimeout As Integer  = 258" />
      <MemberSignature Language="C++ CLI" Value="public: int WaitTimeout = 258;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>258</MemberValue>
      <Docs>
        <summary>表示 <see cref="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)" /> 作業在發出任何等候控制代碼信號之前便已逾時。 這個欄位是常數。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個欄位是其中一個可能的傳回值的`WaitAny`。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用執行緒集區同時搜尋多個磁碟上的檔案。 空間考量因素，如搜尋才每個磁碟的根目錄。  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/CS/source2.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>