<Type Name="EventResetMode" FullName="System.Threading.EventResetMode">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ec1094a66ec69bf9f323cf19ef91b28810a2ba17" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public enum EventResetMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed EventResetMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Threading.EventResetMode" />
  <TypeSignature Language="VB.NET" Value="Public Enum EventResetMode" />
  <TypeSignature Language="C++ CLI" Value="public enum class EventResetMode" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="2d07f-101">表示收到信號之後，是否會自動或手動重設 <see cref="T:System.Threading.EventWaitHandle" />。</span>
      <span class="sxs-lookup">
        <span data-stu-id="2d07f-101">Indicates whether an <see cref="T:System.Threading.EventWaitHandle" /> is reset automatically or manually after receiving a signal.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2d07f-102">下列程式碼範例使用<xref:System.Threading.WaitHandle.SignalAndWait%28System.Threading.WaitHandle%2CSystem.Threading.WaitHandle%29>方法多載來允許主執行緒發出信號封鎖的執行緒，以及執行緒完成工作，然後等候。</span><span class="sxs-lookup"><span data-stu-id="2d07f-102">The following code example uses the <xref:System.Threading.WaitHandle.SignalAndWait%28System.Threading.WaitHandle%2CSystem.Threading.WaitHandle%29> method overload to allow the main thread to signal a blocked thread and then wait until the thread finishes a task.</span></span>  
  
 <span data-ttu-id="2d07f-103">範例啟動五個執行緒，並讓他們封鎖<xref:System.Threading.EventWaitHandle>AutoReset 旗標，建立然後發行一個執行緒時間使用者按下 ENTER 鍵。</span><span class="sxs-lookup"><span data-stu-id="2d07f-103">The example starts five threads and allows them to block on an <xref:System.Threading.EventWaitHandle> created with the AutoReset flag, then releases one thread each time the user presses the ENTER key.</span></span> <span data-ttu-id="2d07f-104">此範例會排入佇列，另一個的五個執行緒，並釋放所有使用<xref:System.Threading.EventWaitHandle>建立 ManualReset 旗標。</span><span class="sxs-lookup"><span data-stu-id="2d07f-104">The example then queues another five threads and releases them all using an <xref:System.Threading.EventWaitHandle> created with the ManualReset flag.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/CS/source.cs#1)]
 [!code-vb[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AutoReset">
      <MemberSignature Language="C#" Value="AutoReset" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.EventResetMode AutoReset = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.EventResetMode.AutoReset" />
      <MemberSignature Language="VB.NET" Value="AutoReset" />
      <MemberSignature Language="C++ CLI" Value="AutoReset" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.EventResetMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="2d07f-105">收到信號通知時，<see cref="T:System.Threading.EventWaitHandle" /> 在釋放單一執行緒後會自動重設。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2d07f-105">When signaled, the <see cref="T:System.Threading.EventWaitHandle" /> resets automatically after releasing a single thread.</span>
          </span>
          <span data-ttu-id="2d07f-106">如果沒有任何執行緒在等待，則 <see cref="T:System.Threading.EventWaitHandle" /> 會保持收到信號的狀態，直到有執行緒被封鎖為止，接著就釋放這個執行緒並將自己重設。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2d07f-106">If no threads are waiting, the <see cref="T:System.Threading.EventWaitHandle" /> remains signaled until a thread blocks, and resets after releasing the thread.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="ManualReset">
      <MemberSignature Language="C#" Value="ManualReset" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.EventResetMode ManualReset = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.EventResetMode.ManualReset" />
      <MemberSignature Language="VB.NET" Value="ManualReset" />
      <MemberSignature Language="C++ CLI" Value="ManualReset" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.EventResetMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="2d07f-107">收到信號通知時，<see cref="T:System.Threading.EventWaitHandle" /> 會釋放所有正在等待的執行緒，並保持收到信號的狀態，直到被手動重設為止。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2d07f-107">When signaled, the <see cref="T:System.Threading.EventWaitHandle" /> releases all waiting threads and remains signaled until it is manually reset.</span>
          </span>
        </summary>
      </Docs>
    </Member>
  </Members>
</Type>