<Type Name="SpinLock" FullName="System.Threading.SpinLock">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2e23183129f62f63c4589bc805d4ebc7b8b87041" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct SpinLock" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit SpinLock extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Threading.SpinLock" />
  <TypeSignature Language="VB.NET" Value="Public Structure SpinLock" />
  <TypeSignature Language="C++ CLI" Value="public value class SpinLock" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("IsHeld = {IsHeld}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Threading.SpinLock/SystemThreading_SpinLockDebugView))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="ad701-101">提供互斥鎖定基本作業，在這個作業中，嘗試取得鎖定的執行緒會用迴圈方式等候，並重複檢查，直到鎖定可用為止。</span>
      <span class="sxs-lookup">
        <span data-stu-id="ad701-101">Provides a mutual exclusion lock primitive where a thread trying to acquire the lock waits in a loop repeatedly checking until the lock becomes available.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad701-102">如需如何使用微調鎖定的範例，請參閱[How to： 使用 SpinLock 進行低階同步處理](~/docs/standard/threading/how-to-use-spinlock-for-low-level-synchronization.md)。</span><span class="sxs-lookup"><span data-stu-id="ad701-102">For an example of how to use a Spin Lock, see [How to: Use SpinLock for Low-Level Synchronization](~/docs/standard/threading/how-to-use-spinlock-for-low-level-synchronization.md).</span></span>  
  
 <span data-ttu-id="ad701-103">微調鎖定可用於分葉層級的鎖定物件配置所使用的隱含其中<xref:System.Threading.Monitor>、 大小，或由於記憶體回收集合不足的壓力，是過於昂貴。</span><span class="sxs-lookup"><span data-stu-id="ad701-103">Spin locks can be used for leaf-level locks where the object allocation implied by using a <xref:System.Threading.Monitor>, in size or due to garbage collection pressure, is overly expensive.</span></span> <span data-ttu-id="ad701-104">微調鎖定可以用來以避免封鎖。不過，如果您需要大量的封鎖，您可能不應該使用微調鎖定，因為過多的旋轉。</span><span class="sxs-lookup"><span data-stu-id="ad701-104">A spin lock can be useful in to avoid blocking; however, if you expect a significant amount of blocking, you should probably not use spin locks due to excessive spinning.</span></span> <span data-ttu-id="ad701-105">鎖定時更細緻和大型數字 （例如，每個節點的連結清單中的鎖定） 中，而且也時鎖定保留時間永遠極短，旋轉可能有所助益。</span><span class="sxs-lookup"><span data-stu-id="ad701-105">Spinning can be beneficial when locks are fine-grained and large in number (for example, a lock per node in a linked list) and also when lock hold-times are always extremely short.</span></span> <span data-ttu-id="ad701-106">一般情況下，保留微調鎖定時，其中一個應該避免任何這些動作：</span><span class="sxs-lookup"><span data-stu-id="ad701-106">In general, while holding a spin lock, one should avoid any of these actions:</span></span>  
  
-   <span data-ttu-id="ad701-107">封鎖</span><span class="sxs-lookup"><span data-stu-id="ad701-107">blocking,</span></span>  
  
-   <span data-ttu-id="ad701-108">呼叫的任何項目本身可能封鎖，</span><span class="sxs-lookup"><span data-stu-id="ad701-108">calling anything that itself may block,</span></span>  
  
-   <span data-ttu-id="ad701-109">同時，保留一個以上的微調鎖定</span><span class="sxs-lookup"><span data-stu-id="ad701-109">holding more than one spin lock at once,</span></span>  
  
-   <span data-ttu-id="ad701-110">以動態方式進行分派呼叫 （介面和虛擬函式）</span><span class="sxs-lookup"><span data-stu-id="ad701-110">making dynamically dispatched calls (interface and virtuals),</span></span>  
  
-   <span data-ttu-id="ad701-111">以靜態方式進行分派呼叫任何程式碼，其中並未擁有，或</span><span class="sxs-lookup"><span data-stu-id="ad701-111">making statically dispatched calls into any code one doesn't own, or</span></span>  
  
-   <span data-ttu-id="ad701-112">配置記憶體。</span><span class="sxs-lookup"><span data-stu-id="ad701-112">allocating memory.</span></span>  
  
 <span data-ttu-id="ad701-113"><xref:System.Threading.SpinLock> 應該只用於您確定後，這樣做可以改善應用程式的效能。</span><span class="sxs-lookup"><span data-stu-id="ad701-113"><xref:System.Threading.SpinLock> should only be used after you have been determined that doing so will improve an application's performance.</span></span> <span data-ttu-id="ad701-114">它也是很重要的一點<xref:System.Threading.SpinLock>是實值類型，基於效能的考量。</span><span class="sxs-lookup"><span data-stu-id="ad701-114">It is also important to note that <xref:System.Threading.SpinLock> is a value type, for performance reasons.</span></span> <span data-ttu-id="ad701-115">基於這個理由，您必須非常小心避免不小心複製<xref:System.Threading.SpinLock>執行個體，如 （原始和複製） 的兩個執行個體將會是完全獨立，而這樣可能會導致錯誤之行為的應用程式。</span><span class="sxs-lookup"><span data-stu-id="ad701-115">For this reason, you must be very careful not to accidentally copy a <xref:System.Threading.SpinLock> instance, as the two instances (the original and the copy) would then be completely independent of one another, which would likely lead to erroneous behavior of the application.</span></span> <span data-ttu-id="ad701-116">如果<xref:System.Threading.SpinLock>必須傳遞執行個體，它應該參考而非依值傳遞。</span><span class="sxs-lookup"><span data-stu-id="ad701-116">If a <xref:System.Threading.SpinLock> instance must be passed around, it should be passed by reference rather than by value.</span></span>  
  
 <span data-ttu-id="ad701-117">不要儲存<xref:System.Threading.SpinLock>唯讀欄位中的執行個體。</span><span class="sxs-lookup"><span data-stu-id="ad701-117">Do not store <xref:System.Threading.SpinLock> instances in readonly fields.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad701-118">下列範例示範如何使用<xref:System.Threading.SpinLock>:</span><span class="sxs-lookup"><span data-stu-id="ad701-118">The following example shows how to use a <xref:System.Threading.SpinLock>:</span></span>  
  
 [!code-csharp[System.Threading.SpinLock#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.spinlock/cs/spinlock.cs#01)]
 [!code-vb[System.Threading.SpinLock#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.spinlock/vb/spinlock.vb#01)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="ad701-119">所有成員<see cref="T:System.Threading.SpinLock" />是安全執行緒，且可能在從多個執行緒同時使用。</span>
      <span class="sxs-lookup">
        <span data-stu-id="ad701-119">All members of <see cref="T:System.Threading.SpinLock" /> are thread-safe and may be used from multiple threads concurrently.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpinLock (bool enableThreadOwnerTracking);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool enableThreadOwnerTracking) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (enableThreadOwnerTracking As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpinLock(bool enableThreadOwnerTracking);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="enableThreadOwnerTracking" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enableThreadOwnerTracking">
          <span data-ttu-id="ad701-120">是否要擷取並使用執行緒 ID 以進行偵錯。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad701-120">Whether to capture and use thread IDs for debugging purposes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ad701-121">使用可追蹤執行緒 ID 以改善偵錯的選項，初始化 <see cref="T:System.Threading.SpinLock" /> 結構的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad701-121">Initializes a new instance of the <see cref="T:System.Threading.SpinLock" /> structure with the option to track thread IDs to improve debugging.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad701-122">預設建構函式<xref:System.Threading.SpinLock>曲目執行緒擁有權。</span><span class="sxs-lookup"><span data-stu-id="ad701-122">The default constructor for <xref:System.Threading.SpinLock> tracks thread ownership.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad701-123">下列範例會示範如何可能使用單一執行緒存取鎖。</span><span class="sxs-lookup"><span data-stu-id="ad701-123">The following example demonstrates how a SpinLock may be used.</span></span>  
  
```  
// C#  
public class MyType  
{  
    private SpinLock _spinLock = new SpinLock();  
  
    public void DoWork()  
    {  
        bool lockTaken = false;   
        try  
        {  
           _spinLock.Enter(ref lockTaken);  
           // do work here protected by the lock  
        }  
        finally  
        {  
            if (lockTaken) _spinLock.Exit();  
        }  
    }  
}  
```  
  
```  
' Visual Basic  
  
Class MyType  
   Private _spinLock As New SpinLock()  
  
   Public Sub DoWork()  
      Dim lockTaken As Boolean = False  
      Try  
         _spinLock.Enter(lockTaken)  
         ' do work here protected by the lock  
      Finally  
         If lockTaken Then _spinLock.Exit()  
      End Try  
   End Sub  
End Class  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public void Enter (ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Enter(bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.Enter(System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Enter (ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Enter(bool % lockTaken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lockTaken" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="lockTaken">
          <span data-ttu-id="ad701-124">如果取得鎖定則為 true，否則為 false。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad701-124">True if the lock is acquired; otherwise, false.</span>
          </span>
          <span data-ttu-id="ad701-125">
            <c>lockTaken</c> 必須在呼叫這個方法之前初始化為 false。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad701-125">
              <c>lockTaken</c> must be initialized to false prior to calling this method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ad701-126">以可靠的方式取得鎖定，例如即使方法呼叫中發生例外狀況，還是能可靠地檢查 <paramref name="lockTaken" /> 以判斷是否已取得鎖定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad701-126">Acquires the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad701-127"><xref:System.Threading.SpinLock> 不可重新進入鎖定，也就是說，如果執行緒保持鎖定，它不允許重新進入鎖定狀態。</span><span class="sxs-lookup"><span data-stu-id="ad701-127"><xref:System.Threading.SpinLock> is a non-reentrant lock, meaning that if a thread holds the lock, it is not allowed to enter the lock again.</span></span> <span data-ttu-id="ad701-128">如果已啟用追蹤的執行緒擁有權 (是否已啟用可透過<xref:System.Threading.SpinLock.IsThreadOwnerTrackingEnabled%2A>)，執行緒嘗試重新輸入已經保留的鎖定時，會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="ad701-128">If thread ownership tracking is enabled (whether it's enabled is available through <xref:System.Threading.SpinLock.IsThreadOwnerTrackingEnabled%2A>), an exception will be thrown when a thread tries to re-enter a lock it already holds.</span></span> <span data-ttu-id="ad701-129">不過，如果已停用追蹤的執行緒擁有權，嘗試輸入已經持有的鎖定會導致死結。</span><span class="sxs-lookup"><span data-stu-id="ad701-129">However, if thread ownership tracking is disabled, attempting to enter a lock already held will result in deadlock.</span></span>  
  
 <span data-ttu-id="ad701-130">如果您呼叫<xref:System.Threading.SpinLock.Exit%2A>而不先呼叫<xref:System.Threading.SpinLock.Enter%2A>的內部狀態<xref:System.Threading.SpinLock>可能變成損毀。</span><span class="sxs-lookup"><span data-stu-id="ad701-130">If you call <xref:System.Threading.SpinLock.Exit%2A> without having first called <xref:System.Threading.SpinLock.Enter%2A> the internal state of the <xref:System.Threading.SpinLock> can become corrupted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ad701-131">
            <paramref name="lockTaken" /> 引數必須在呼叫 Enter 之前初始化為 False。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad701-131">The <paramref name="lockTaken" /> argument must be initialized to false prior to calling Enter.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.LockRecursionException">
          <span data-ttu-id="ad701-132">已啟用執行緒擁有權追蹤，且目前的執行緒已經取得這個鎖定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad701-132">Thread ownership tracking is enabled, and the current thread has already acquired this lock.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Exit">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ad701-133">釋放鎖定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad701-133">Releases the lock.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Exit">
      <MemberSignature Language="C#" Value="public void Exit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Exit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.Exit" />
      <MemberSignature Language="VB.NET" Value="Public Sub Exit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Exit();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ad701-134">釋放鎖定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad701-134">Releases the lock.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad701-135">預設多載<xref:System.Threading.SpinLock.Exit%2A>提供相同的行為如同呼叫<xref:System.Threading.SpinLock.Exit%2A>做為引數使用 true。</span><span class="sxs-lookup"><span data-stu-id="ad701-135">The default overload of <xref:System.Threading.SpinLock.Exit%2A> provides the same behavior as if calling <xref:System.Threading.SpinLock.Exit%2A> using true as the argument.</span></span>  
  
 <span data-ttu-id="ad701-136">如果您呼叫<xref:System.Threading.SpinLock.Exit%2A>而不先呼叫<xref:System.Threading.SpinLock.Enter%2A>的內部狀態<xref:System.Threading.SpinLock>可能變成損毀。</span><span class="sxs-lookup"><span data-stu-id="ad701-136">If you call <xref:System.Threading.SpinLock.Exit%2A> without having first called <xref:System.Threading.SpinLock.Enter%2A> the internal state of the <xref:System.Threading.SpinLock> can become corrupted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="ad701-137">已啟用執行緒擁有權追蹤，且目前的執行緒不是這個鎖定的擁有者。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad701-137">Thread ownership tracking is enabled, and the current thread is not the owner of this lock.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Exit">
      <MemberSignature Language="C#" Value="public void Exit (bool useMemoryBarrier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Exit(bool useMemoryBarrier) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.Exit(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Exit (useMemoryBarrier As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Exit(bool useMemoryBarrier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="useMemoryBarrier" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="useMemoryBarrier">
          <span data-ttu-id="ad701-138">布林值，表示是否應該發出記憶體柵欄，以便立即將結束作業發行至其他執行緒。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad701-138">A Boolean value that indicates whether a memory fence should be issued in order to immediately publish the exit operation to other threads.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ad701-139">釋放鎖定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad701-139">Releases the lock.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad701-140">呼叫<xref:System.Threading.SpinLock.Exit%2A>與`useMemoryBarrier`引數設為 true 會提升公平性，但會犧牲一些效能的鎖定。</span><span class="sxs-lookup"><span data-stu-id="ad701-140">Calling <xref:System.Threading.SpinLock.Exit%2A> with the `useMemoryBarrier` argument set to true will improve the fairness of the lock at the expense of some performance.</span></span> <span data-ttu-id="ad701-141">預設值<xref:System.Threading.SpinLock.Exit%2A>多載的行為就如同指定 true，表示`useMemoryBarrier`。</span><span class="sxs-lookup"><span data-stu-id="ad701-141">The default <xref:System.Threading.SpinLock.Exit%2A> overload behaves as if specifying true for `useMemoryBarrier`.</span></span>  
  
 <span data-ttu-id="ad701-142">如果您呼叫<xref:System.Threading.SpinLock.Exit%2A>而不先呼叫<xref:System.Threading.SpinLock.Enter%2A>的內部狀態<xref:System.Threading.SpinLock>可能變成損毀。</span><span class="sxs-lookup"><span data-stu-id="ad701-142">If you call <xref:System.Threading.SpinLock.Exit%2A> without having first called <xref:System.Threading.SpinLock.Enter%2A> the internal state of the <xref:System.Threading.SpinLock> can become corrupted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="ad701-143">已啟用執行緒擁有權追蹤，且目前的執行緒不是這個鎖定的擁有者。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad701-143">Thread ownership tracking is enabled, and the current thread is not the owner of this lock.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsHeld">
      <MemberSignature Language="C#" Value="public bool IsHeld { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHeld" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SpinLock.IsHeld" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsHeld As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHeld { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ad701-144">取得值，這個值表示此鎖定目前是否由任何執行緒持有。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad701-144">Gets whether the lock is currently held by any thread.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ad701-145">如果此鎖定目前由任何執行緒持有則為 true，否則為 false。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad701-145">true if the lock is currently held by any thread; otherwise false.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHeldByCurrentThread">
      <MemberSignature Language="C#" Value="public bool IsHeldByCurrentThread { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHeldByCurrentThread" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SpinLock.IsHeldByCurrentThread" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsHeldByCurrentThread As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHeldByCurrentThread { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ad701-146">取得值，表示此鎖定是否由目前執行緒持有。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad701-146">Gets whether the lock is held by the current thread.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ad701-147">如果此鎖定由目前執行緒持有則為 true，否則為 false。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad701-147">true if the lock is held by the current thread; otherwise false.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad701-148">如果鎖定已初始化為追蹤的擁有者執行緒，這會傳回目前執行緒是否已取得鎖定。</span><span class="sxs-lookup"><span data-stu-id="ad701-148">If the lock was initialized to track owner threads, this will return whether the lock is acquired by the current thread.</span></span> <span data-ttu-id="ad701-149">使用這個屬性時鎖定已初始化為執行緒擁有權不會追蹤無效。</span><span class="sxs-lookup"><span data-stu-id="ad701-149">It is invalid to use this property when the lock was initialized to not track thread ownership.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ad701-150">已停用執行緒擁有權追蹤。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad701-150">Thread ownership tracking is disabled.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsThreadOwnerTrackingEnabled">
      <MemberSignature Language="C#" Value="public bool IsThreadOwnerTrackingEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsThreadOwnerTrackingEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SpinLock.IsThreadOwnerTrackingEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsThreadOwnerTrackingEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsThreadOwnerTrackingEnabled { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ad701-151">取得值，表示這個執行個體是否已啟用執行緒擁有權追蹤。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad701-151">Gets whether thread ownership tracking is enabled for this instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ad701-152">如果這個執行個體已啟用執行緒擁有權追蹤則為 true，否則為 false。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad701-152">true if thread ownership tracking is enabled for this instance; otherwise false.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryEnter">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ad701-153">嘗試以可靠的方式取得鎖定，例如即使方法呼叫中發生例外狀況，還是能可靠地檢查 <paramref name="lockTaken" /> 以判斷是否已取得鎖定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad701-153">Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public void TryEnter (ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TryEnter(bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.TryEnter(System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TryEnter (ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TryEnter(bool % lockTaken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lockTaken" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="lockTaken">
          <span data-ttu-id="ad701-154">如果取得鎖定則為 true，否則為 false。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad701-154">True if the lock is acquired; otherwise, false.</span>
          </span>
          <span data-ttu-id="ad701-155">
            <c>lockTaken</c> 必須在呼叫這個方法之前初始化為 false。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad701-155">
              <c>lockTaken</c> must be initialized to false prior to calling this method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ad701-156">嘗試以可靠的方式取得鎖定，例如即使方法呼叫中發生例外狀況，還是能可靠地檢查 <paramref name="lockTaken" /> 以判斷是否已取得鎖定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad701-156">Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad701-157">不同於<xref:System.Threading.SpinLock.Enter%2A>，TryEnter 不會封鎖等候可用的鎖定。</span><span class="sxs-lookup"><span data-stu-id="ad701-157">Unlike <xref:System.Threading.SpinLock.Enter%2A>, TryEnter will not block waiting for the lock to be available.</span></span> <span data-ttu-id="ad701-158">如果鎖定不 TryEnter 呼叫時，它將不含任何進一步微調立即傳回。</span><span class="sxs-lookup"><span data-stu-id="ad701-158">If the lock is not available when TryEnter is called, it will return immediately without any further spinning.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ad701-159">
            <paramref name="lockTaken" /> 引數必須在呼叫 TryEnter 之前初始化為 False。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad701-159">The <paramref name="lockTaken" /> argument must be initialized to false prior to calling TryEnter.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.LockRecursionException">
          <span data-ttu-id="ad701-160">已啟用執行緒擁有權追蹤，且目前的執行緒已經取得這個鎖定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad701-160">Thread ownership tracking is enabled, and the current thread has already acquired this lock.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public void TryEnter (int millisecondsTimeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TryEnter(int32 millisecondsTimeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.TryEnter(System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TryEnter (millisecondsTimeout As Integer, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TryEnter(int millisecondsTimeout, bool % lockTaken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="lockTaken" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="ad701-161">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad701-161">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <param name="lockTaken">
          <span data-ttu-id="ad701-162">如果取得鎖定則為 true，否則為 false。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad701-162">True if the lock is acquired; otherwise, false.</span>
          </span>
          <span data-ttu-id="ad701-163">
            <c>lockTaken</c> 必須在呼叫這個方法之前初始化為 false。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad701-163">
              <c>lockTaken</c> must be initialized to false prior to calling this method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ad701-164">嘗試以可靠的方式取得鎖定，例如即使方法呼叫中發生例外狀況，還是能可靠地檢查 <paramref name="lockTaken" /> 以判斷是否已取得鎖定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad701-164">Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad701-165">不同於<xref:System.Threading.SpinLock.Enter%2A>，TryEnter 不會封鎖無限期等候的鎖定，才能使用。</span><span class="sxs-lookup"><span data-stu-id="ad701-165">Unlike <xref:System.Threading.SpinLock.Enter%2A>, TryEnter will not block indefinitely waiting for the lock to be available.</span></span> <span data-ttu-id="ad701-166">它會封鎖直到鎖定可用為止，或直到`millisecondsTimeout`已過期。</span><span class="sxs-lookup"><span data-stu-id="ad701-166">It will block until either the lock is available or until the `millisecondsTimeout` has expired.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="ad701-167">
            <paramref name="millisecondsTimeout" /> 為 -1 以外的負數，表示無限逾時。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad701-167">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ad701-168">
            <paramref name="lockTaken" /> 引數必須在呼叫 TryEnter 之前初始化為 False。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad701-168">The <paramref name="lockTaken" /> argument must be initialized to false prior to calling TryEnter.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.LockRecursionException">
          <span data-ttu-id="ad701-169">已啟用執行緒擁有權追蹤，且目前的執行緒已經取得這個鎖定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad701-169">Thread ownership tracking is enabled, and the current thread has already acquired this lock.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public void TryEnter (TimeSpan timeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TryEnter(valuetype System.TimeSpan timeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.TryEnter(System.TimeSpan,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TryEnter (timeout As TimeSpan, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TryEnter(TimeSpan timeout, bool % lockTaken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="lockTaken" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="ad701-170">
            <see cref="T:System.TimeSpan" />，代表等候毫秒數；或是 <see cref="T:System.TimeSpan" />，代表無限期等候的 -1 毫秒。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad701-170">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <param name="lockTaken">
          <span data-ttu-id="ad701-171">如果取得鎖定則為 true，否則為 false。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad701-171">True if the lock is acquired; otherwise, false.</span>
          </span>
          <span data-ttu-id="ad701-172">
            <c>lockTaken</c> 必須在呼叫這個方法之前初始化為 false。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad701-172">
              <c>lockTaken</c> must be initialized to false prior to calling this method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ad701-173">嘗試以可靠的方式取得鎖定，例如即使方法呼叫中發生例外狀況，還是能可靠地檢查 <paramref name="lockTaken" /> 以判斷是否已取得鎖定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad701-173">Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad701-174">不同於<xref:System.Threading.SpinLock.Enter%2A>，TryEnter 不會封鎖無限期等候的鎖定，才能使用。</span><span class="sxs-lookup"><span data-stu-id="ad701-174">Unlike <xref:System.Threading.SpinLock.Enter%2A>, TryEnter will not block indefinitely waiting for the lock to be available.</span></span> <span data-ttu-id="ad701-175">它會封鎖直到鎖定可用為止，或直到`timeout`已過期。</span><span class="sxs-lookup"><span data-stu-id="ad701-175">It will block until either the lock is available or until the `timeout` has expired.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="ad701-176">
            <paramref name="timeout" /> 是除了 -1 毫秒以外的負數，表示無限逾時，或是大於 <see cref="F:System.Int32.MaxValue" /> 毫秒的逾時。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad701-176">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ad701-177">
            <paramref name="lockTaken" /> 引數必須在呼叫 TryEnter 之前初始化為 False。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad701-177">The <paramref name="lockTaken" /> argument must be initialized to false prior to calling TryEnter.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.LockRecursionException">
          <span data-ttu-id="ad701-178">已啟用執行緒擁有權追蹤，且目前的執行緒已經取得這個鎖定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad701-178">Thread ownership tracking is enabled, and the current thread has already acquired this lock.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>