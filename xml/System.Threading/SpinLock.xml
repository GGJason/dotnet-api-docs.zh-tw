<Type Name="SpinLock" FullName="System.Threading.SpinLock">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c59e9333980e098ae85de5217b5fbd9769ec6870" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51896660" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct SpinLock" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit SpinLock extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Threading.SpinLock" />
  <TypeSignature Language="VB.NET" Value="Public Structure SpinLock" />
  <TypeSignature Language="C++ CLI" Value="public value class SpinLock" />
  <TypeSignature Language="F#" Value="type SpinLock = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("IsHeld = {IsHeld}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Threading.SpinLock/SystemThreading_SpinLockDebugView))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="c798c-101">提供互斥鎖定基本作業，在這個作業中，嘗試取得鎖定的執行緒會用迴圈方式等候，並重複檢查，直到鎖定可用為止。</span>
      <span class="sxs-lookup">
        <span data-stu-id="c798c-101">Provides a mutual exclusion lock primitive where a thread trying to acquire the lock waits in a loop repeatedly checking until the lock becomes available.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c798c-102">如需如何使用微調鎖定的範例，請參閱 <<c0> [ 如何： 使用 SpinLock 進行低階同步處理](~/docs/standard/threading/how-to-use-spinlock-for-low-level-synchronization.md)。</span><span class="sxs-lookup"><span data-stu-id="c798c-102">For an example of how to use a Spin Lock, see [How to: Use SpinLock for Low-Level Synchronization](~/docs/standard/threading/how-to-use-spinlock-for-low-level-synchronization.md).</span></span>  
  
 <span data-ttu-id="c798c-103">微調鎖定適用於分葉層級鎖定的物件配置所使用的隱含其中<xref:System.Threading.Monitor>、 大小，或由於記憶體回收集合不足的壓力，過於昂貴。</span><span class="sxs-lookup"><span data-stu-id="c798c-103">Spin locks can be used for leaf-level locks where the object allocation implied by using a <xref:System.Threading.Monitor>, in size or due to garbage collection pressure, is overly expensive.</span></span> <span data-ttu-id="c798c-104">微調鎖定很適合用來避免封鎖;不過，如果您預期一段很長的封鎖，您可能不應該使用微調鎖定，因為過多的旋轉。</span><span class="sxs-lookup"><span data-stu-id="c798c-104">A spin lock can be useful to avoid blocking; however, if you expect a significant amount of blocking, you should probably not use spin locks due to excessive spinning.</span></span> <span data-ttu-id="c798c-105">鎖定時更細緻且大型數字 （例如，鎖定的連結清單中每個節點） 中，而且也當鎖定保留時間永遠極短，旋轉可以是有幫助。</span><span class="sxs-lookup"><span data-stu-id="c798c-105">Spinning can be beneficial when locks are fine-grained and large in number (for example, a lock per node in a linked list) and also when lock hold-times are always extremely short.</span></span> <span data-ttu-id="c798c-106">一般情況下的微調鎖定時，其中一個應該避免任何這些動作：</span><span class="sxs-lookup"><span data-stu-id="c798c-106">In general, while holding a spin lock, one should avoid any of these actions:</span></span>  
  
-   <span data-ttu-id="c798c-107">封鎖，</span><span class="sxs-lookup"><span data-stu-id="c798c-107">blocking,</span></span>  
  
-   <span data-ttu-id="c798c-108">呼叫任何項目本身可能會封鎖，</span><span class="sxs-lookup"><span data-stu-id="c798c-108">calling anything that itself may block,</span></span>  
  
-   <span data-ttu-id="c798c-109">同時，保存一個以上的微調鎖定</span><span class="sxs-lookup"><span data-stu-id="c798c-109">holding more than one spin lock at once,</span></span>  
  
-   <span data-ttu-id="c798c-110">讓以動態方式分派呼叫 （介面和虛擬函式）</span><span class="sxs-lookup"><span data-stu-id="c798c-110">making dynamically dispatched calls (interface and virtuals),</span></span>  
  
-   <span data-ttu-id="c798c-111">以靜態方式進行分派呼叫其中一個未擁有，任何程式碼或</span><span class="sxs-lookup"><span data-stu-id="c798c-111">making statically dispatched calls into any code one doesn't own, or</span></span>  
  
-   <span data-ttu-id="c798c-112">配置記憶體。</span><span class="sxs-lookup"><span data-stu-id="c798c-112">allocating memory.</span></span>  
  
 <span data-ttu-id="c798c-113"><xref:System.Threading.SpinLock> 應該只用於您確定後，這麼做可以改善應用程式的效能。</span><span class="sxs-lookup"><span data-stu-id="c798c-113"><xref:System.Threading.SpinLock> should only be used after you have been determined that doing so will improve an application's performance.</span></span> <span data-ttu-id="c798c-114">它也是很重要的一點<xref:System.Threading.SpinLock>是實值類型，基於效能考量。</span><span class="sxs-lookup"><span data-stu-id="c798c-114">It is also important to note that <xref:System.Threading.SpinLock> is a value type, for performance reasons.</span></span> <span data-ttu-id="c798c-115">基於這個理由，您必須非常小心，不要不小心複製<xref:System.Threading.SpinLock>執行個體，因為兩個執行個體 （原始和複製），將會是完全獨立的這可能會導致應用程式的錯誤行為。</span><span class="sxs-lookup"><span data-stu-id="c798c-115">For this reason, you must be very careful not to accidentally copy a <xref:System.Threading.SpinLock> instance, as the two instances (the original and the copy) would then be completely independent of one another, which would likely lead to erroneous behavior of the application.</span></span> <span data-ttu-id="c798c-116">如果<xref:System.Threading.SpinLock>必須傳遞執行個體，應該在所參考，而不是依值傳遞。</span><span class="sxs-lookup"><span data-stu-id="c798c-116">If a <xref:System.Threading.SpinLock> instance must be passed around, it should be passed by reference rather than by value.</span></span>  
  
 <span data-ttu-id="c798c-117">不會儲存<xref:System.Threading.SpinLock>唯讀欄位中的執行個體。</span><span class="sxs-lookup"><span data-stu-id="c798c-117">Do not store <xref:System.Threading.SpinLock> instances in readonly fields.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c798c-118">下列範例示範如何使用<xref:System.Threading.SpinLock>:</span><span class="sxs-lookup"><span data-stu-id="c798c-118">The following example shows how to use a <xref:System.Threading.SpinLock>:</span></span>  
  
 [!code-csharp[System.Threading.SpinLock#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.spinlock/cs/spinlock.cs#01)]
 [!code-vb[System.Threading.SpinLock#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.spinlock/vb/spinlock.vb#01)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="c798c-119">所有成員<see cref="T:System.Threading.SpinLock" />是安全執行緒，且可能會從多個執行緒同時使用。</span>
      <span class="sxs-lookup">
        <span data-stu-id="c798c-119">All members of <see cref="T:System.Threading.SpinLock" /> are thread-safe and may be used from multiple threads concurrently.</span>
      </span>
    </threadsafe>
    <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
      <span data-ttu-id="c798c-120">SpinLock</span>
      <span class="sxs-lookup">
        <span data-stu-id="c798c-120">SpinLock</span>
      </span>
    </related>
    <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
      <span data-ttu-id="c798c-121">如何： 使用 SpinWait 和執行緒同步鎖定</span>
      <span class="sxs-lookup">
        <span data-stu-id="c798c-121">How to: Use SpinWait and SpinLock</span>
      </span>
    </related>
    <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
      <span data-ttu-id="c798c-122">如何：啟用 SpinLock 中的執行緒追蹤模式</span>
      <span class="sxs-lookup">
        <span data-stu-id="c798c-122">How to: Enable Thread-Tracking Mode in SpinLock</span>
      </span>
    </related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpinLock (bool enableThreadOwnerTracking);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool enableThreadOwnerTracking) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (enableThreadOwnerTracking As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpinLock(bool enableThreadOwnerTracking);" />
      <MemberSignature Language="F#" Value="new System.Threading.SpinLock : bool -&gt; System.Threading.SpinLock" Usage="new System.Threading.SpinLock enableThreadOwnerTracking" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="enableThreadOwnerTracking" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enableThreadOwnerTracking">
          <span data-ttu-id="c798c-123">是否要擷取並使用執行緒 ID 以進行偵錯。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-123">Whether to capture and use thread IDs for debugging purposes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c798c-124">使用可追蹤執行緒 ID 以改善偵錯的選項，初始化 <see cref="T:System.Threading.SpinLock" /> 結構的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-124">Initializes a new instance of the <see cref="T:System.Threading.SpinLock" /> structure with the option to track thread IDs to improve debugging.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c798c-125">預設建構函式<xref:System.Threading.SpinLock>追蹤執行緒擁有權。</span><span class="sxs-lookup"><span data-stu-id="c798c-125">The default constructor for <xref:System.Threading.SpinLock> tracks thread ownership.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c798c-126">下列範例會示範如何可能會使用單一執行緒存取鎖。</span><span class="sxs-lookup"><span data-stu-id="c798c-126">The following example demonstrates how a SpinLock may be used.</span></span>  
  
```csharp  
// C#  
public class MyType  
{  
    private SpinLock _spinLock = new SpinLock();  
  
    public void DoWork()  
    {  
        bool lockTaken = false;   
        try  
        {  
           _spinLock.Enter(ref lockTaken);  
           // do work here protected by the lock  
        }  
        finally  
        {  
            if (lockTaken) _spinLock.Exit();  
        }  
    }  
}  
```  
  
```vb  
' Visual Basic  
  
Class MyType  
   Private _spinLock As New SpinLock()  
  
   Public Sub DoWork()  
      Dim lockTaken As Boolean = False  
      Try  
         _spinLock.Enter(lockTaken)  
         ' do work here protected by the lock  
      Finally  
         If lockTaken Then _spinLock.Exit()  
      End Try  
   End Sub  
End Class  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
          <span data-ttu-id="c798c-127">SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-127">SpinLock</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
          <span data-ttu-id="c798c-128">如何：使用 SpinLock 進行低階同步處理</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-128">How to: Use SpinLock for Low-Level Synchronization</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
          <span data-ttu-id="c798c-129">如何：啟用 SpinLock 中的執行緒追蹤模式</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-129">How to: Enable Thread-Tracking Mode in SpinLock</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public void Enter (ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Enter(bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.Enter(System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Enter (ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Enter(bool % lockTaken);" />
      <MemberSignature Language="F#" Value="member this.Enter :  -&gt; unit" Usage="spinLock.Enter lockTaken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="lockTaken">
          <span data-ttu-id="c798c-130">如果取得鎖定則為 true，否則為 false。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-130">True if the lock is acquired; otherwise, false.</span>
          </span>
          <span data-ttu-id="c798c-131">
            <c>lockTaken</c> 必須在呼叫這個方法之前初始化為 false。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-131">
              <c>lockTaken</c> must be initialized to false prior to calling this method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c798c-132">以可靠的方式取得鎖定，例如即使方法呼叫中發生例外狀況，還是能可靠地檢查 <paramref name="lockTaken" /> 以判斷是否已取得鎖定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-132">Acquires the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c798c-133"><xref:System.Threading.SpinLock> 是不可重新進入鎖定，也就是說，如果執行緒持有鎖定時，不允許再次進入鎖定。</span><span class="sxs-lookup"><span data-stu-id="c798c-133"><xref:System.Threading.SpinLock> is a non-reentrant lock, meaning that if a thread holds the lock, it is not allowed to enter the lock again.</span></span> <span data-ttu-id="c798c-134">如果已啟用執行緒擁有權追蹤 (是否已啟用可透過<xref:System.Threading.SpinLock.IsThreadOwnerTrackingEnabled%2A>)，會擲回例外狀況，當執行緒嘗試重新進入它已經保留的鎖定。</span><span class="sxs-lookup"><span data-stu-id="c798c-134">If thread ownership tracking is enabled (whether it's enabled is available through <xref:System.Threading.SpinLock.IsThreadOwnerTrackingEnabled%2A>), an exception will be thrown when a thread tries to re-enter a lock it already holds.</span></span> <span data-ttu-id="c798c-135">不過，如果已停用執行緒擁有權追蹤，嘗試輸入已保留的鎖定會導致死結。</span><span class="sxs-lookup"><span data-stu-id="c798c-135">However, if thread ownership tracking is disabled, attempting to enter a lock already held will result in deadlock.</span></span>  
  
 <span data-ttu-id="c798c-136">如果您呼叫<xref:System.Threading.SpinLock.Exit%2A>而不需要先呼叫<xref:System.Threading.SpinLock.Enter%2A>的內部狀態<xref:System.Threading.SpinLock>可能變成損毀。</span><span class="sxs-lookup"><span data-stu-id="c798c-136">If you call <xref:System.Threading.SpinLock.Exit%2A> without having first called <xref:System.Threading.SpinLock.Enter%2A> the internal state of the <xref:System.Threading.SpinLock> can become corrupted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c798c-137">
            <paramref name="lockTaken" /> 引數必須在呼叫 Enter 之前初始化為 False。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-137">The <paramref name="lockTaken" /> argument must be initialized to false prior to calling Enter.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.LockRecursionException">
          <span data-ttu-id="c798c-138">已啟用執行緒擁有權追蹤，且目前的執行緒已經取得這個鎖定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-138">Thread ownership tracking is enabled, and the current thread has already acquired this lock.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
          <span data-ttu-id="c798c-139">SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-139">SpinLock</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
          <span data-ttu-id="c798c-140">如何：使用 SpinLock 進行低階同步處理</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-140">How to: Use SpinLock for Low-Level Synchronization</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
          <span data-ttu-id="c798c-141">如何：啟用 SpinLock 中的執行緒追蹤模式</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-141">How to: Enable Thread-Tracking Mode in SpinLock</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Exit">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c798c-142">釋放鎖定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-142">Releases the lock.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Exit">
      <MemberSignature Language="C#" Value="public void Exit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Exit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.Exit" />
      <MemberSignature Language="VB.NET" Value="Public Sub Exit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Exit();" />
      <MemberSignature Language="F#" Value="member this.Exit : unit -&gt; unit" Usage="spinLock.Exit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c798c-143">釋放鎖定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-143">Releases the lock.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c798c-144">預設多載<xref:System.Threading.SpinLock.Exit%2A>提供相同的行為如同呼叫<xref:System.Threading.SpinLock.Exit%2A>做為引數使用 true。</span><span class="sxs-lookup"><span data-stu-id="c798c-144">The default overload of <xref:System.Threading.SpinLock.Exit%2A> provides the same behavior as if calling <xref:System.Threading.SpinLock.Exit%2A> using true as the argument.</span></span>  
  
 <span data-ttu-id="c798c-145">如果您呼叫<xref:System.Threading.SpinLock.Exit%2A>而不需要先呼叫<xref:System.Threading.SpinLock.Enter%2A>的內部狀態<xref:System.Threading.SpinLock>可能變成損毀。</span><span class="sxs-lookup"><span data-stu-id="c798c-145">If you call <xref:System.Threading.SpinLock.Exit%2A> without having first called <xref:System.Threading.SpinLock.Enter%2A> the internal state of the <xref:System.Threading.SpinLock> can become corrupted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="c798c-146">已啟用執行緒擁有權追蹤，且目前的執行緒不是這個鎖定的擁有者。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-146">Thread ownership tracking is enabled, and the current thread is not the owner of this lock.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
          <span data-ttu-id="c798c-147">SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-147">SpinLock</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
          <span data-ttu-id="c798c-148">如何：使用 SpinLock 進行低階同步處理</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-148">How to: Use SpinLock for Low-Level Synchronization</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
          <span data-ttu-id="c798c-149">如何：啟用 SpinLock 中的執行緒追蹤模式</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-149">How to: Enable Thread-Tracking Mode in SpinLock</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Exit">
      <MemberSignature Language="C#" Value="public void Exit (bool useMemoryBarrier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Exit(bool useMemoryBarrier) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.Exit(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Exit (useMemoryBarrier As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Exit(bool useMemoryBarrier);" />
      <MemberSignature Language="F#" Value="member this.Exit : bool -&gt; unit" Usage="spinLock.Exit useMemoryBarrier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="useMemoryBarrier" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="useMemoryBarrier">
          <span data-ttu-id="c798c-150">布林值，表示是否應該發出記憶體柵欄，以便立即將結束作業發行至其他執行緒。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-150">A Boolean value that indicates whether a memory fence should be issued in order to immediately publish the exit operation to other threads.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c798c-151">釋放鎖定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-151">Releases the lock.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c798c-152">呼叫<xref:System.Threading.SpinLock.Exit%2A>與`useMemoryBarrier`引數設為 true 會提升公平性，但會犧牲一些效能的鎖定。</span><span class="sxs-lookup"><span data-stu-id="c798c-152">Calling <xref:System.Threading.SpinLock.Exit%2A> with the `useMemoryBarrier` argument set to true will improve the fairness of the lock at the expense of some performance.</span></span> <span data-ttu-id="c798c-153">預設值<xref:System.Threading.SpinLock.Exit%2A>多載的行為就如同指定 true `useMemoryBarrier`。</span><span class="sxs-lookup"><span data-stu-id="c798c-153">The default <xref:System.Threading.SpinLock.Exit%2A> overload behaves as if specifying true for `useMemoryBarrier`.</span></span>  
  
 <span data-ttu-id="c798c-154">如果您呼叫<xref:System.Threading.SpinLock.Exit%2A>而不需要先呼叫<xref:System.Threading.SpinLock.Enter%2A>的內部狀態<xref:System.Threading.SpinLock>可能變成損毀。</span><span class="sxs-lookup"><span data-stu-id="c798c-154">If you call <xref:System.Threading.SpinLock.Exit%2A> without having first called <xref:System.Threading.SpinLock.Enter%2A> the internal state of the <xref:System.Threading.SpinLock> can become corrupted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="c798c-155">已啟用執行緒擁有權追蹤，且目前的執行緒不是這個鎖定的擁有者。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-155">Thread ownership tracking is enabled, and the current thread is not the owner of this lock.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
          <span data-ttu-id="c798c-156">SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-156">SpinLock</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
          <span data-ttu-id="c798c-157">如何：使用 SpinLock 進行低階同步處理</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-157">How to: Use SpinLock for Low-Level Synchronization</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
          <span data-ttu-id="c798c-158">如何：啟用 SpinLock 中的執行緒追蹤模式</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-158">How to: Enable Thread-Tracking Mode in SpinLock</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IsHeld">
      <MemberSignature Language="C#" Value="public bool IsHeld { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHeld" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SpinLock.IsHeld" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsHeld As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHeld { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsHeld : bool" Usage="System.Threading.SpinLock.IsHeld" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c798c-159">取得值，這個值表示此鎖定目前是否由任何執行緒持有。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-159">Gets whether the lock is currently held by any thread.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c798c-160">如果此鎖定目前由任何執行緒持有則為 true，否則為 false。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-160">true if the lock is currently held by any thread; otherwise false.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
          <span data-ttu-id="c798c-161">SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-161">SpinLock</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
          <span data-ttu-id="c798c-162">如何：使用 SpinLock 進行低階同步處理</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-162">How to: Use SpinLock for Low-Level Synchronization</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
          <span data-ttu-id="c798c-163">如何：啟用 SpinLock 中的執行緒追蹤模式</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-163">How to: Enable Thread-Tracking Mode in SpinLock</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IsHeldByCurrentThread">
      <MemberSignature Language="C#" Value="public bool IsHeldByCurrentThread { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHeldByCurrentThread" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SpinLock.IsHeldByCurrentThread" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsHeldByCurrentThread As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHeldByCurrentThread { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsHeldByCurrentThread : bool" Usage="System.Threading.SpinLock.IsHeldByCurrentThread" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c798c-164">取得值，表示此鎖定是否由目前執行緒持有。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-164">Gets whether the lock is held by the current thread.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c798c-165">如果此鎖定由目前執行緒持有則為 true，否則為 false。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-165">true if the lock is held by the current thread; otherwise false.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c798c-166">如果鎖定已初始化來追蹤擁有者執行緒，這會傳回目前的執行緒是否已取得鎖定。</span><span class="sxs-lookup"><span data-stu-id="c798c-166">If the lock was initialized to track owner threads, this will return whether the lock is acquired by the current thread.</span></span> <span data-ttu-id="c798c-167">請無效時鎖定已初始化為追蹤執行緒擁有權，請使用這個屬性。</span><span class="sxs-lookup"><span data-stu-id="c798c-167">It is invalid to use this property when the lock was initialized to not track thread ownership.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="c798c-168">已停用執行緒擁有權追蹤。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-168">Thread ownership tracking is disabled.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
          <span data-ttu-id="c798c-169">SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-169">SpinLock</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
          <span data-ttu-id="c798c-170">如何：使用 SpinLock 進行低階同步處理</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-170">How to: Use SpinLock for Low-Level Synchronization</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
          <span data-ttu-id="c798c-171">如何：啟用 SpinLock 中的執行緒追蹤模式</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-171">How to: Enable Thread-Tracking Mode in SpinLock</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IsThreadOwnerTrackingEnabled">
      <MemberSignature Language="C#" Value="public bool IsThreadOwnerTrackingEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsThreadOwnerTrackingEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SpinLock.IsThreadOwnerTrackingEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsThreadOwnerTrackingEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsThreadOwnerTrackingEnabled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsThreadOwnerTrackingEnabled : bool" Usage="System.Threading.SpinLock.IsThreadOwnerTrackingEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c798c-172">取得值，表示這個執行個體是否已啟用執行緒擁有權追蹤。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-172">Gets whether thread ownership tracking is enabled for this instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c798c-173">如果這個執行個體已啟用執行緒擁有權追蹤則為 true，否則為 false。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-173">true if thread ownership tracking is enabled for this instance; otherwise false.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
          <span data-ttu-id="c798c-174">SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-174">SpinLock</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
          <span data-ttu-id="c798c-175">如何：使用 SpinLock 進行低階同步處理</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-175">How to: Use SpinLock for Low-Level Synchronization</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
          <span data-ttu-id="c798c-176">如何：啟用 SpinLock 中的執行緒追蹤模式</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-176">How to: Enable Thread-Tracking Mode in SpinLock</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryEnter">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c798c-177">嘗試以可靠的方式取得鎖定，例如即使方法呼叫中發生例外狀況，還是能可靠地檢查 <paramref name="lockTaken" /> 以判斷是否已取得鎖定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-177">Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</span>
          </span>
        </summary>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
          <span data-ttu-id="c798c-178">SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-178">SpinLock</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
          <span data-ttu-id="c798c-179">如何：使用 SpinLock 進行低階同步處理</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-179">How to: Use SpinLock for Low-Level Synchronization</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
          <span data-ttu-id="c798c-180">如何：啟用 SpinLock 中的執行緒追蹤模式</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-180">How to: Enable Thread-Tracking Mode in SpinLock</span>
          </span>
        </related>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public void TryEnter (ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TryEnter(bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.TryEnter(System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TryEnter (ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TryEnter(bool % lockTaken);" />
      <MemberSignature Language="F#" Value="member this.TryEnter :  -&gt; unit" Usage="spinLock.TryEnter lockTaken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="lockTaken">
          <span data-ttu-id="c798c-181">如果取得鎖定則為 true，否則為 false。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-181">True if the lock is acquired; otherwise, false.</span>
          </span>
          <span data-ttu-id="c798c-182">
            <c>lockTaken</c> 必須在呼叫這個方法之前初始化為 false。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-182">
              <c>lockTaken</c> must be initialized to false prior to calling this method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c798c-183">嘗試以可靠的方式取得鎖定，例如即使方法呼叫中發生例外狀況，還是能可靠地檢查 <paramref name="lockTaken" /> 以判斷是否已取得鎖定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-183">Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c798c-184">不同於<xref:System.Threading.SpinLock.Enter%2A>，TryEnter 也不會封鎖等候的鎖定，才能使用。</span><span class="sxs-lookup"><span data-stu-id="c798c-184">Unlike <xref:System.Threading.SpinLock.Enter%2A>, TryEnter will not block waiting for the lock to be available.</span></span> <span data-ttu-id="c798c-185">如果鎖定不是可用的 TryEnter 呼叫時，它會傳回立即而不需要任何進一步微調。</span><span class="sxs-lookup"><span data-stu-id="c798c-185">If the lock is not available when TryEnter is called, it will return immediately without any further spinning.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c798c-186">
            <paramref name="lockTaken" /> 引數必須在呼叫 TryEnter 之前初始化為 False。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-186">The <paramref name="lockTaken" /> argument must be initialized to false prior to calling TryEnter.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.LockRecursionException">
          <span data-ttu-id="c798c-187">已啟用執行緒擁有權追蹤，且目前的執行緒已經取得這個鎖定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-187">Thread ownership tracking is enabled, and the current thread has already acquired this lock.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
          <span data-ttu-id="c798c-188">SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-188">SpinLock</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
          <span data-ttu-id="c798c-189">如何：使用 SpinLock 進行低階同步處理</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-189">How to: Use SpinLock for Low-Level Synchronization</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
          <span data-ttu-id="c798c-190">如何：啟用 SpinLock 中的執行緒追蹤模式</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-190">How to: Enable Thread-Tracking Mode in SpinLock</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public void TryEnter (int millisecondsTimeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TryEnter(int32 millisecondsTimeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.TryEnter(System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TryEnter (millisecondsTimeout As Integer, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TryEnter(int millisecondsTimeout, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="member this.TryEnter : int *  -&gt; unit" Usage="spinLock.TryEnter (millisecondsTimeout, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="c798c-191">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-191">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <param name="lockTaken">
          <span data-ttu-id="c798c-192">如果取得鎖定則為 true，否則為 false。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-192">True if the lock is acquired; otherwise, false.</span>
          </span>
          <span data-ttu-id="c798c-193">
            <c>lockTaken</c> 必須在呼叫這個方法之前初始化為 false。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-193">
              <c>lockTaken</c> must be initialized to false prior to calling this method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c798c-194">嘗試以可靠的方式取得鎖定，例如即使方法呼叫中發生例外狀況，還是能可靠地檢查 <paramref name="lockTaken" /> 以判斷是否已取得鎖定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-194">Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c798c-195">不同於<xref:System.Threading.SpinLock.Enter%2A>，TryEnter 不會封鎖無限期等候的鎖定，才能使用。</span><span class="sxs-lookup"><span data-stu-id="c798c-195">Unlike <xref:System.Threading.SpinLock.Enter%2A>, TryEnter will not block indefinitely waiting for the lock to be available.</span></span> <span data-ttu-id="c798c-196">它會封鎖直到鎖定可用為止，或直到`millisecondsTimeout`已過期。</span><span class="sxs-lookup"><span data-stu-id="c798c-196">It will block until either the lock is available or until the `millisecondsTimeout` has expired.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="c798c-197">
            <paramref name="millisecondsTimeout" /> 是一個不等於 -1 的負數，-1 表示等候逾時為無限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-197">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c798c-198">
            <paramref name="lockTaken" /> 引數必須在呼叫 TryEnter 之前初始化為 False。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-198">The <paramref name="lockTaken" /> argument must be initialized to false prior to calling TryEnter.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.LockRecursionException">
          <span data-ttu-id="c798c-199">已啟用執行緒擁有權追蹤，且目前的執行緒已經取得這個鎖定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-199">Thread ownership tracking is enabled, and the current thread has already acquired this lock.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
          <span data-ttu-id="c798c-200">SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-200">SpinLock</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
          <span data-ttu-id="c798c-201">如何：使用 SpinLock 進行低階同步處理</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-201">How to: Use SpinLock for Low-Level Synchronization</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
          <span data-ttu-id="c798c-202">如何：啟用 SpinLock 中的執行緒追蹤模式</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-202">How to: Enable Thread-Tracking Mode in SpinLock</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public void TryEnter (TimeSpan timeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TryEnter(valuetype System.TimeSpan timeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.TryEnter(System.TimeSpan,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TryEnter (timeout As TimeSpan, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TryEnter(TimeSpan timeout, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="member this.TryEnter : TimeSpan *  -&gt; unit" Usage="spinLock.TryEnter (timeout, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="c798c-203">
            <see cref="T:System.TimeSpan" />，表示要等候的毫秒數，或是 <see cref="T:System.TimeSpan" />，表示無限期等候的 -1 毫秒。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-203">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <param name="lockTaken">
          <span data-ttu-id="c798c-204">如果取得鎖定則為 true，否則為 false。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-204">True if the lock is acquired; otherwise, false.</span>
          </span>
          <span data-ttu-id="c798c-205">
            <c>lockTaken</c> 必須在呼叫這個方法之前初始化為 false。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-205">
              <c>lockTaken</c> must be initialized to false prior to calling this method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c798c-206">嘗試以可靠的方式取得鎖定，例如即使方法呼叫中發生例外狀況，還是能可靠地檢查 <paramref name="lockTaken" /> 以判斷是否已取得鎖定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-206">Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c798c-207">不同於<xref:System.Threading.SpinLock.Enter%2A>，TryEnter 不會封鎖無限期等候的鎖定，才能使用。</span><span class="sxs-lookup"><span data-stu-id="c798c-207">Unlike <xref:System.Threading.SpinLock.Enter%2A>, TryEnter will not block indefinitely waiting for the lock to be available.</span></span> <span data-ttu-id="c798c-208">它會封鎖直到鎖定可用為止，或直到`timeout`已過期。</span><span class="sxs-lookup"><span data-stu-id="c798c-208">It will block until either the lock is available or until the `timeout` has expired.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="c798c-209">
            <paramref name="timeout" /> 是除了 -1 毫秒以外的負數，表示無限逾時，或是大於 <see cref="F:System.Int32.MaxValue" /> 毫秒的逾時。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-209">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c798c-210">
            <paramref name="lockTaken" /> 引數必須在呼叫 TryEnter 之前初始化為 False。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-210">The <paramref name="lockTaken" /> argument must be initialized to false prior to calling TryEnter.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.LockRecursionException">
          <span data-ttu-id="c798c-211">已啟用執行緒擁有權追蹤，且目前的執行緒已經取得這個鎖定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-211">Thread ownership tracking is enabled, and the current thread has already acquired this lock.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
          <span data-ttu-id="c798c-212">SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-212">SpinLock</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
          <span data-ttu-id="c798c-213">如何：使用 SpinLock 進行低階同步處理</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-213">How to: Use SpinLock for Low-Level Synchronization</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
          <span data-ttu-id="c798c-214">如何：啟用 SpinLock 中的執行緒追蹤模式</span>
          <span class="sxs-lookup">
            <span data-stu-id="c798c-214">How to: Enable Thread-Tracking Mode in SpinLock</span>
          </span>
        </related>
      </Docs>
    </Member>
  </Members>
</Type>