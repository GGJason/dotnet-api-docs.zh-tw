<Type Name="SemaphoreSlim" FullName="System.Threading.SemaphoreSlim">
  <Metadata><Meta Name="ms.openlocfilehash" Value="883d144e65efaa726c8b45cf100640d7f3d7a0cd" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58733070" /></Metadata><TypeSignature Language="C#" Value="public class SemaphoreSlim : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SemaphoreSlim extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.SemaphoreSlim" />
  <TypeSignature Language="VB.NET" Value="Public Class SemaphoreSlim&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SemaphoreSlim : IDisposable" />
  <TypeSignature Language="F#" Value="type SemaphoreSlim = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Current Count = {m_currentCount}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="6d2cf-101">代表 <see cref="T:System.Threading.Semaphore" /> 的輕量型替代品，限制可同時存取一項資源或資源集區的執行緒數目。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-101">Represents a lightweight alternative to <see cref="T:System.Threading.Semaphore" /> that limits the number of threads that can access a resource or pool of resources concurrently.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2cf-102">號誌有兩種類型： 本機號誌和具名的系統號誌。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-102">Semaphores are of two types: local semaphores and named system semaphores.</span></span> <span data-ttu-id="6d2cf-103">前者是本機應用程式。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-103">The former is local to an app.</span></span> <span data-ttu-id="6d2cf-104">後者會顯示整個作業系統，適合處理序間的同步處理。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-104">The latter is visible throughout the operating system and is suitable for inter-process synchronization.</span></span> <span data-ttu-id="6d2cf-105"><xref:System.Threading.SemaphoreSlim>是輕量級替代方案<xref:System.Threading.Semaphore>不會使用 Windows 核心號誌的類別。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-105">The <xref:System.Threading.SemaphoreSlim> is a lightweight alternative to the <xref:System.Threading.Semaphore> class that doesn't use Windows kernel semaphores.</span></span> <span data-ttu-id="6d2cf-106">不同於<xref:System.Threading.Semaphore>類別，<xref:System.Threading.SemaphoreSlim>類別不支援具名的系統號誌。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-106">Unlike the <xref:System.Threading.Semaphore> class, the <xref:System.Threading.SemaphoreSlim> class doesn't support named system semaphores.</span></span> <span data-ttu-id="6d2cf-107">您可以使用它作為本機信號。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-107">You can use it as a local semaphore only.</span></span> <span data-ttu-id="6d2cf-108"><xref:System.Threading.SemaphoreSlim>類別是建議的號誌，單一應用程式內的同步處理。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-108">The <xref:System.Threading.SemaphoreSlim> class is the recommended semaphore for synchronization within a single app.</span></span>  
  
 <span data-ttu-id="6d2cf-109">輕量型號誌，可控制存取權的資源集區的本機應用程式。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-109">A lightweight semaphore controls access to a pool of resources that is local to your application.</span></span> <span data-ttu-id="6d2cf-110">當您具現化的號誌時，您可以指定可以同時進入號誌的執行緒最大數目。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-110">When you instantiate a semaphore, you can specify the maximum number of threads that can enter the semaphore concurrently.</span></span> <span data-ttu-id="6d2cf-111">您也會指定可以同時進入號誌的執行緒的初始數目。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-111">You also specify the initial number of threads that can enter the semaphore concurrently.</span></span> <span data-ttu-id="6d2cf-112">這會定義將旗號的計數。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-112">This defines the semaphore's count.</span></span>  
  
 <span data-ttu-id="6d2cf-113">計數會遞減執行緒進入號誌，每次，每次遞增執行緒釋放號誌。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-113">The count is decremented each time a thread enters the semaphore, and incremented each time a thread releases the semaphore.</span></span> <span data-ttu-id="6d2cf-114">若要進入號誌，執行緒會呼叫其中一個<xref:System.Threading.SemaphoreSlim.Wait%2A>或<xref:System.Threading.SemaphoreSlim.WaitAsync%2A>多載。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-114">To enter the semaphore, a thread calls one of the <xref:System.Threading.SemaphoreSlim.Wait%2A> or <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> overloads.</span></span> <span data-ttu-id="6d2cf-115">若要釋放號誌，它會呼叫其中一個<xref:System.Threading.SemaphoreSlim.Release%2A>多載。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-115">To release the semaphore, it calls one of the <xref:System.Threading.SemaphoreSlim.Release%2A> overloads.</span></span> <span data-ttu-id="6d2cf-116">當計數到達零時，後續呼叫其中一個`Wait`方法封鎖，直到其他執行緒釋放號誌。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-116">When the count reaches zero, subsequent calls to one of the `Wait` methods block until other threads release the semaphore.</span></span> <span data-ttu-id="6d2cf-117">如果多個執行緒遭到封鎖，並沒有任何保證的順序，例如 FIFO 或 LIFO，可控制當執行緒進入號誌。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-117">If multiple threads are blocked, there is no guaranteed order, such as FIFO or LIFO, that controls when threads enter the semaphore.</span></span>  
  
 <span data-ttu-id="6d2cf-118">使用來保護資源的號誌的程式碼的基本結構是：</span><span class="sxs-lookup"><span data-stu-id="6d2cf-118">The basic structure for code that uses a semaphore to protect resources is:</span></span>  
  
```vb  
  
' Enter semaphore by calling one of the Wait or WaitAsync methods.  
SemaphoreSlim.Wait()  
'   
' Execute code protected by the semaphore.   
'  
SemaphoreSlim.Release()  
  
```  
  
 <span data-ttu-id="6d2cf-119">所有執行緒都釋放號誌，計數會達到最大值時指定已建立的號誌。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-119">When all threads have released the semaphore, the count is at the maximum value specified when the semaphore was created.</span></span> <span data-ttu-id="6d2cf-120">將旗號的計數是可從<xref:System.Threading.SemaphoreSlim.CurrentCount%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-120">The semaphore's count is available from the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6d2cf-121"><xref:System.Threading.SemaphoreSlim>類別並不會強制呼叫的執行緒或工作身分識別<xref:System.Threading.SemaphoreSlim.Wait%2A>， <xref:System.Threading.SemaphoreSlim.WaitAsync%2A>，和<xref:System.Threading.SemaphoreSlim.Release%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-121">The <xref:System.Threading.SemaphoreSlim> class doesn't enforce thread or task identity on calls to the <xref:System.Threading.SemaphoreSlim.Wait%2A>, <xref:System.Threading.SemaphoreSlim.WaitAsync%2A>, and <xref:System.Threading.SemaphoreSlim.Release%2A> methods.</span></span> <span data-ttu-id="6d2cf-122">此外，如果<xref:System.Threading.SemaphoreSlim.%23ctor%28System.Int32%29>建構函式用來具現化<xref:System.Threading.SemaphoreSlim>物件，<xref:System.Threading.SemaphoreSlim.CurrentCount%2A>屬性可以增加超過建構函式所設定的值。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-122">In addition, if the <xref:System.Threading.SemaphoreSlim.%23ctor%28System.Int32%29> constructor is used to instantiate the <xref:System.Threading.SemaphoreSlim> object, the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property can increase beyond the value set by the constructor.</span></span> <span data-ttu-id="6d2cf-123">它是以確保呼叫的程式設計師的責任<xref:System.Threading.SemaphoreSlim.Wait%2A>或是<xref:System.Threading.SemaphoreSlim.WaitAsync%2A>方法適當地搭配呼叫<xref:System.Threading.SemaphoreSlim.Release%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-123">It is the programmer's responsibility to ensure that calls to <xref:System.Threading.SemaphoreSlim.Wait%2A> or <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> methods are appropriately paired with calls to <xref:System.Threading.SemaphoreSlim.Release%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2cf-124">下列範例會建立一個號誌的三個執行緒的最大計數與初始計數為零的執行緒。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-124">The following example creates a semaphore with a maximum count of three threads and an initial count of zero threads.</span></span> <span data-ttu-id="6d2cf-125">此範例會啟動五個工作，其中都封鎖等候號誌。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-125">The example starts five tasks, all of which block waiting for the semaphore.</span></span> <span data-ttu-id="6d2cf-126">主執行緒呼叫<xref:System.Threading.SemaphoreSlim.Release%28System.Int32%29>號誌計數增加至其最大值，允許進入號誌的三個工作的多載。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-126">The main thread calls the <xref:System.Threading.SemaphoreSlim.Release%28System.Int32%29> overload to increase the semaphore count to its maximum, which allows three tasks to enter the semaphore.</span></span> <span data-ttu-id="6d2cf-127">已釋放號誌，每次會顯示先前的號誌計數。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-127">Each time the semaphore is released, the previous semaphore count is displayed.</span></span> <span data-ttu-id="6d2cf-128">主控台訊息追蹤號誌的使用。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-128">Console messages track semaphore use.</span></span> <span data-ttu-id="6d2cf-129">模擬的工作間隔會稍微增加，每個執行緒，可讓輸出更容易閱讀。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-129">The simulated work interval is increased slightly for each thread to make the output easier to read.</span></span>  
  
 [!code-csharp[System.Threading.SemaphoreSlim#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.semaphoreslim/cs/example.cs#1)]
 [!code-vb[System.Threading.SemaphoreSlim#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.semaphoreslim/vb/example.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="6d2cf-130">所有 public 和 protected 成員<see cref="T:System.Threading.SemaphoreSlim" />是安全執行緒，而且用於同時從多個執行緒，但不包括<see cref="M:System.Threading.SemaphoreSlim.Dispose" />，必須使用它時，才在所有其他作業<see cref="T:System.Threading.SemaphoreSlim" />已完成。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-130">All public and protected members of <see cref="T:System.Threading.SemaphoreSlim" /> are thread-safe and may be used concurrently from multiple threads, with the exception of <see cref="M:System.Threading.SemaphoreSlim.Dispose" />, which must be used only when all other operations on the <see cref="T:System.Threading.SemaphoreSlim" /> have completed.</span></span></threadsafe>
    <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="6d2cf-131">Semaphore 和 SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="6d2cf-131">Semaphore and SemaphoreSlim</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6d2cf-132">初始化 <see cref="T:System.Threading.SemaphoreSlim" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-132">Initializes a new instance of the <see cref="T:System.Threading.SemaphoreSlim" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemaphoreSlim (int initialCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemaphoreSlim(int initialCount);" />
      <MemberSignature Language="F#" Value="new System.Threading.SemaphoreSlim : int -&gt; System.Threading.SemaphoreSlim" Usage="new System.Threading.SemaphoreSlim initialCount" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="initialCount"><span data-ttu-id="6d2cf-133">可同時授與給號誌的初始要求數目。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-133">The initial number of requests for the semaphore that can be granted concurrently.</span></span></param>
        <summary><span data-ttu-id="6d2cf-134">指定可同時授與的初始要求數目，初始化 <see cref="T:System.Threading.SemaphoreSlim" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-134">Initializes a new instance of the <see cref="T:System.Threading.SemaphoreSlim" /> class, specifying the initial number of requests that can be granted concurrently.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2cf-135">`initialCount`參數會定義進入號誌可以授與的並行要求數目。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-135">The `initialCount` parameter defines the number of concurrent requests to enter the semaphore that can be granted.</span></span> <span data-ttu-id="6d2cf-136">不過，它不會定義可以同時授與的要求的數目上限。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-136">However, it doesn't define the maximum number of requests that can be granted concurrently.</span></span> <span data-ttu-id="6d2cf-137">A<xref:System.Threading.SemaphoreSlim>藉由呼叫這個建構函式具現化物件不會擲回<xref:System.Threading.SemaphoreFullException>例外狀況，如果呼叫<xref:System.Threading.SemaphoreSlim.Release%2A>方法會增加的值<xref:System.Threading.SemaphoreSlim.CurrentCount%2A>以外的屬性`initialCount`。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-137">A   <xref:System.Threading.SemaphoreSlim> object instantiated by calling this constructor doesn't throw a <xref:System.Threading.SemaphoreFullException> exception if a call to the <xref:System.Threading.SemaphoreSlim.Release%2A> method increases the value of the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property beyond `initialCount`.</span></span> <span data-ttu-id="6d2cf-138">如果有多個呼叫，發生這種的情況<xref:System.Threading.SemaphoreSlim.Release%2A>方法，比<xref:System.Threading.SemaphoreSlim.Wait%2A>或<xref:System.Threading.SemaphoreSlim.WaitAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-138">This occurs if there are more calls to <xref:System.Threading.SemaphoreSlim.Release%2A> methods than there are to <xref:System.Threading.SemaphoreSlim.Wait%2A> or <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> methods.</span></span> <span data-ttu-id="6d2cf-139">若要設定的進入號誌可以授與的並行要求數目上限，請呼叫<xref:System.Threading.SemaphoreSlim.%23ctor%28System.Int32%2CSystem.Int32%29>建構函式。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-139">To set the maximum number of concurrent requests to enter the semaphore that can be granted, call the <xref:System.Threading.SemaphoreSlim.%23ctor%28System.Int32%2CSystem.Int32%29> constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="6d2cf-140"><paramref name="initialCount" /> 小於 0。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-140"><paramref name="initialCount" /> is less than 0.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="6d2cf-141">Semaphore 和 SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="6d2cf-141">Semaphore and SemaphoreSlim</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemaphoreSlim (int initialCount, int maxCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount, int32 maxCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.#ctor(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialCount As Integer, maxCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemaphoreSlim(int initialCount, int maxCount);" />
      <MemberSignature Language="F#" Value="new System.Threading.SemaphoreSlim : int * int -&gt; System.Threading.SemaphoreSlim" Usage="new System.Threading.SemaphoreSlim (initialCount, maxCount)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" />
        <Parameter Name="maxCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="initialCount"><span data-ttu-id="6d2cf-142">可同時授與給號誌的初始要求數目。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-142">The initial number of requests for the semaphore that can be granted concurrently.</span></span></param>
        <param name="maxCount"><span data-ttu-id="6d2cf-143">可以同時授與之號誌要求的最大數目。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-143">The maximum number of requests for the semaphore that can be granted concurrently.</span></span></param>
        <summary><span data-ttu-id="6d2cf-144">指定可同時授與的初始要求數目及最大數目，初始化 <see cref="T:System.Threading.SemaphoreSlim" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-144">Initializes a new instance of the <see cref="T:System.Threading.SemaphoreSlim" /> class, specifying the initial and maximum number of requests that can be granted concurrently.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="6d2cf-145"><paramref name="initialCount" /> 小於 0，或者 <paramref name="initialCount" /> 大於 <paramref name="maxCount" />，或者 <paramref name="maxCount" /> 等於或小於 0。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-145"><paramref name="initialCount" /> is less than 0, or <paramref name="initialCount" /> is greater than <paramref name="maxCount" />, or <paramref name="maxCount" /> is equal to or less than 0.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="6d2cf-146">Semaphore 和 SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="6d2cf-146">Semaphore and SemaphoreSlim</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="AvailableWaitHandle">
      <MemberSignature Language="C#" Value="public System.Threading.WaitHandle AvailableWaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle AvailableWaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SemaphoreSlim.AvailableWaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AvailableWaitHandle As WaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::WaitHandle ^ AvailableWaitHandle { System::Threading::WaitHandle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AvailableWaitHandle : System.Threading.WaitHandle" Usage="System.Threading.SemaphoreSlim.AvailableWaitHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6d2cf-147">傳回可用來等候號誌的 <see cref="T:System.Threading.WaitHandle" />。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-147">Returns a <see cref="T:System.Threading.WaitHandle" /> that can be used to wait on the semaphore.</span></span></summary>
        <value><span data-ttu-id="6d2cf-148">可用來等候號誌的 <see cref="T:System.Threading.WaitHandle" />。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-148">A <see cref="T:System.Threading.WaitHandle" /> that can be used to wait on the semaphore.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2cf-149">您必須等候 SemaphoreSlim 搭配其他使用相同的等候控制代碼的核心為基礎的同步處理物件時，才，請使用這個屬性。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-149">Use this property only when you must wait on a SemaphoreSlim together with other kernel-based synchronization objects with the same wait handle.</span></span> <span data-ttu-id="6d2cf-150">成功等候<xref:System.Threading.SemaphoreSlim.AvailableWaitHandle%2A>並不表示成功的等候上<xref:System.Threading.SemaphoreSlim>本身，也不會遞減將旗號的計數。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-150">A successful wait on the <xref:System.Threading.SemaphoreSlim.AvailableWaitHandle%2A> does not imply a successful wait on the <xref:System.Threading.SemaphoreSlim> itself, nor does it decrement the semaphore's count.</span></span> <span data-ttu-id="6d2cf-151">可用的等候控制代碼會收到信號之後，您應該等候<xref:System.Threading.SemaphoreSlim>特別。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-151">After the available wait handle is signaled, you should wait on the <xref:System.Threading.SemaphoreSlim> specifically.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="6d2cf-152"><see cref="T:System.Threading.SemaphoreSlim" /> 已經處置。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-152">The <see cref="T:System.Threading.SemaphoreSlim" /> has been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="6d2cf-153">Semaphore 和 SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="6d2cf-153">Semaphore and SemaphoreSlim</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CurrentCount">
      <MemberSignature Language="C#" Value="public int CurrentCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SemaphoreSlim.CurrentCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentCount : int" Usage="System.Threading.SemaphoreSlim.CurrentCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6d2cf-154">取得可以進入 <see cref="T:System.Threading.SemaphoreSlim" /> 物件的剩餘執行緒數目。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-154">Gets the number of remaining threads that can enter the <see cref="T:System.Threading.SemaphoreSlim" /> object.</span></span></summary>
        <value><span data-ttu-id="6d2cf-155">可以進入號誌的剩餘執行緒數目。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-155">The number of remaining threads that can enter the semaphore.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2cf-156">初始值<xref:System.Threading.SemaphoreSlim.CurrentCount%2A>屬性由呼叫設定<xref:System.Threading.SemaphoreSlim.%23ctor%2A>類別建構函式。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-156">The initial value of the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property is set by the call to the <xref:System.Threading.SemaphoreSlim.%23ctor%2A> class constructor.</span></span> <span data-ttu-id="6d2cf-157">它也會減少每次呼叫<xref:System.Threading.SemaphoreSlim.Wait%2A>或是<xref:System.Threading.SemaphoreSlim.WaitAsync%2A>方法，並以每個呼叫來遞增<xref:System.Threading.SemaphoreSlim.Release%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-157">It is decremented by each call to the <xref:System.Threading.SemaphoreSlim.Wait%2A> or <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> method, and incremented by each call to the <xref:System.Threading.SemaphoreSlim.Release%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="6d2cf-158">Semaphore 和 SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="6d2cf-158">Semaphore and SemaphoreSlim</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6d2cf-159">將 <see cref="T:System.Threading.SemaphoreSlim" /> 類別的目前執行個體所使用的資源釋出。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-159">Releases resources used by the current instance of the <see cref="T:System.Threading.SemaphoreSlim" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="semaphoreSlim.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6d2cf-160">釋放 <see cref="T:System.Threading.SemaphoreSlim" /> 類別目前的執行個體所使用的全部資源。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-160">Releases all resources used by the current instance of the <see cref="T:System.Threading.SemaphoreSlim" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2cf-161">`Dispose` 使用完畢時，請呼叫 <xref:System.Threading.SemaphoreSlim>。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-161">Call `Dispose` when you are finished using the <xref:System.Threading.SemaphoreSlim>.</span></span> <span data-ttu-id="6d2cf-162">`Dispose` 方法會將 <xref:System.Threading.SemaphoreSlim> 保留在無法使用的狀態。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-162">The `Dispose` method leaves the <xref:System.Threading.SemaphoreSlim> in an unusable state.</span></span> <span data-ttu-id="6d2cf-163">之後呼叫`Dispose`，您必須釋放所有的參考<xref:System.Threading.SemaphoreSlim>讓記憶體回收行程可以回收記憶體，<xref:System.Threading.SemaphoreSlim>所佔用。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-163">After calling `Dispose`, you must release all references to the <xref:System.Threading.SemaphoreSlim> so the garbage collector can reclaim the memory that the <xref:System.Threading.SemaphoreSlim> was occupying.</span></span>  
  
 <span data-ttu-id="6d2cf-164">如需詳細資訊，請參閱 <<c0> [ 清除 Unmanaged 資源向上](~/docs/standard/garbage-collection/unmanaged.md)並[實作 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-164">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6d2cf-165">在您釋放最後一個 `Dispose` 參考之前，請務必呼叫 <xref:System.Threading.SemaphoreSlim>。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-165">Always call `Dispose` before you release your last reference to the <xref:System.Threading.SemaphoreSlim>.</span></span> <span data-ttu-id="6d2cf-166">否則工作窗格所使用的資源不會釋放，直到記憶體回收行程呼叫 <xref:System.Threading.SemaphoreSlim> 物件的 `Finalize` 方法。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-166">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.SemaphoreSlim> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="6d2cf-167">Semaphore 和 SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="6d2cf-167">Semaphore and SemaphoreSlim</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="semaphoreSlim.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="6d2cf-168"><see langword="true" /> 表示會同時釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-168"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="6d2cf-169">釋放 <see cref="T:System.Threading.SemaphoreSlim" /> 所使用的 Unmanaged 資源，並選擇性釋放 Managed 資源。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-169">Releases the unmanaged resources used by the <see cref="T:System.Threading.SemaphoreSlim" />, and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2cf-170">不同於大部分的成員清單<xref:System.Threading.SemaphoreSlim>，<xref:System.Threading.SemaphoreSlim.Dispose%2A>不具備執行緒安全，而且不能使用與這個執行個體的其他成員同時。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-170">Unlike most of the members of <xref:System.Threading.SemaphoreSlim>, <xref:System.Threading.SemaphoreSlim.Dispose%2A> is not thread-safe and may not be used concurrently with other members of this instance.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="6d2cf-171">Semaphore 和 SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="6d2cf-171">Semaphore and SemaphoreSlim</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Release">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6d2cf-172">釋出 <see cref="T:System.Threading.SemaphoreSlim" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-172">Releases the <see cref="T:System.Threading.SemaphoreSlim" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public int Release ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Release() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Release" />
      <MemberSignature Language="VB.NET" Value="Public Function Release () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Release();" />
      <MemberSignature Language="F#" Value="member this.Release : unit -&gt; int" Usage="semaphoreSlim.Release " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6d2cf-173">釋出 <see cref="T:System.Threading.SemaphoreSlim" /> 物件一次。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-173">Releases the <see cref="T:System.Threading.SemaphoreSlim" /> object once.</span></span></summary>
        <returns><span data-ttu-id="6d2cf-174"><see cref="T:System.Threading.SemaphoreSlim" /> 的先前計數。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-174">The previous count of the <see cref="T:System.Threading.SemaphoreSlim" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2cf-175">呼叫<xref:System.Threading.SemaphoreSlim.Release>方法會遞增<xref:System.Threading.SemaphoreSlim.CurrentCount%2A>其中一個屬性。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-175">A call to the <xref:System.Threading.SemaphoreSlim.Release> method increments the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span> <span data-ttu-id="6d2cf-176">如果值<xref:System.Threading.SemaphoreSlim.CurrentCount%2A>屬性為零，會在呼叫這個方法之前，方法也可讓一個執行緒或工作被封鎖的呼叫所<xref:System.Threading.SemaphoreSlim.Wait%2A>或<xref:System.Threading.SemaphoreSlim.WaitAsync%2A>進入號誌的方法。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-176">If the value of the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property is zero before this method is called, the method also allows one thread or task blocked by a call to the <xref:System.Threading.SemaphoreSlim.Wait%2A> or <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> method to enter the semaphore.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="6d2cf-177">目前的執行個體已經過處置。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-177">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.Threading.SemaphoreFullException"><span data-ttu-id="6d2cf-178"><see cref="T:System.Threading.SemaphoreSlim" /> 已經達到其大小上限。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-178">The <see cref="T:System.Threading.SemaphoreSlim" /> has already reached its maximum size.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="6d2cf-179">Semaphore 和 SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="6d2cf-179">Semaphore and SemaphoreSlim</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public int Release (int releaseCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Release(int32 releaseCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Release(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Release (releaseCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Release(int releaseCount);" />
      <MemberSignature Language="F#" Value="member this.Release : int -&gt; int" Usage="semaphoreSlim.Release releaseCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="releaseCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="releaseCount"><span data-ttu-id="6d2cf-180">結束號誌的次數。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-180">The number of times to exit the semaphore.</span></span></param>
        <summary><span data-ttu-id="6d2cf-181">釋出 <see cref="T:System.Threading.SemaphoreSlim" /> 物件指定的次數。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-181">Releases the <see cref="T:System.Threading.SemaphoreSlim" /> object a specified number of times.</span></span></summary>
        <returns><span data-ttu-id="6d2cf-182"><see cref="T:System.Threading.SemaphoreSlim" /> 的先前計數。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-182">The previous count of the <see cref="T:System.Threading.SemaphoreSlim" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2cf-183">呼叫<xref:System.Threading.SemaphoreSlim.Release%28System.Int32%29>方法會遞增<xref:System.Threading.SemaphoreSlim.CurrentCount%2A>屬性`releaseCount`。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-183">A call to the <xref:System.Threading.SemaphoreSlim.Release%28System.Int32%29> method increments the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by `releaseCount`.</span></span> <span data-ttu-id="6d2cf-184">如果值<xref:System.Threading.SemaphoreSlim.CurrentCount%2A>屬性為零，會在呼叫這個方法之前，此方法也可讓`releaseCount`執行緒或工作被封鎖的呼叫所<xref:System.Threading.SemaphoreSlim.Wait%2A>或<xref:System.Threading.SemaphoreSlim.WaitAsync%2A>進入號誌的方法。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-184">If the value of the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property is zero before this method is called, the method also allows `releaseCount` threads or tasks blocked by a call to the <xref:System.Threading.SemaphoreSlim.Wait%2A> or <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> method to enter the semaphore.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="6d2cf-185">目前的執行個體已經過處置。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-185">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="6d2cf-186"><paramref name="releaseCount" /> 小於 1。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-186"><paramref name="releaseCount" /> is less than 1.</span></span></exception>
        <exception cref="T:System.Threading.SemaphoreFullException"><span data-ttu-id="6d2cf-187"><see cref="T:System.Threading.SemaphoreSlim" /> 已經達到其大小上限。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-187">The <see cref="T:System.Threading.SemaphoreSlim" /> has already reached its maximum size.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="6d2cf-188">Semaphore 和 SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="6d2cf-188">Semaphore and SemaphoreSlim</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Wait">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6d2cf-189">執行封鎖目前的執行緒，直到此執行緒可以進入 <see cref="T:System.Threading.SemaphoreSlim" /> 為止。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-189">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public void Wait ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Wait() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Wait" />
      <MemberSignature Language="VB.NET" Value="Public Sub Wait ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Wait();" />
      <MemberSignature Language="F#" Value="member this.Wait : unit -&gt; unit" Usage="semaphoreSlim.Wait " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6d2cf-190">執行封鎖目前的執行緒，直到此執行緒可以進入 <see cref="T:System.Threading.SemaphoreSlim" /> 為止。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-190">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2cf-191">如果能夠進入號誌，執行緒或工作它遞減<xref:System.Threading.SemaphoreSlim.CurrentCount%2A>其中一個屬性。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-191">If a thread or task is able to enter the semaphore, it decrements the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="6d2cf-192">目前的執行個體已經過處置。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-192">The current instance has already been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="6d2cf-193">Semaphore 和 SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="6d2cf-193">Semaphore and SemaphoreSlim</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Wait(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Wait (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.Wait : int -&gt; bool" Usage="semaphoreSlim.Wait millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="6d2cf-194">要等候的毫秒數，<see cref="F:System.Threading.Timeout.Infinite" />(-1) 表示永遠等候，零表示測試等候控制代碼的狀態並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-194">The number of milliseconds to wait, <see cref="F:System.Threading.Timeout.Infinite" />(-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</span></span></param>
        <summary><span data-ttu-id="6d2cf-195">執行封鎖目前的執行緒，直到此執行緒可以進入 <see cref="T:System.Threading.SemaphoreSlim" /> 為止 (使用 32 位元帶正負號的整數以測量時間間隔)。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-195">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a 32-bit signed integer that specifies the timeout.</span></span></summary>
        <returns><span data-ttu-id="6d2cf-196">如果目前執行緒已成功進入 <see cref="T:System.Threading.SemaphoreSlim" /> 則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-196"><see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks 
<span data-ttu-id="6d2cf-197">如果在逾時設定為-1 毫秒，方法就會無限期地等候。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-197">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
<span data-ttu-id="6d2cf-198">如果在逾時設定為零毫秒，此方法不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-198">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="6d2cf-199">它會測試等候控制代碼的狀態，並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-199">It tests the state of the wait handle and returns immediately.</span></span>

<span data-ttu-id="6d2cf-200">如果能夠進入號誌，執行緒或工作它遞減<xref:System.Threading.SemaphoreSlim.CurrentCount%2A>其中一個屬性。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-200">If a thread or task is able to enter the semaphore, it decrements the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span>  
  
<span data-ttu-id="6d2cf-201">如果呼叫時遭到封鎖的執行緒或工作<xref:System.Threading.SemaphoreSlim.Wait%28System.Int32%29>及所指定的逾時間隔`millisecondsTimeout`到期：</span><span class="sxs-lookup"><span data-stu-id="6d2cf-201">If a thread or task is blocked when calling <xref:System.Threading.SemaphoreSlim.Wait%28System.Int32%29> and the timeout interval specified by `millisecondsTimeout` expires:</span></span>

- <span data-ttu-id="6d2cf-202">執行緒或工作不進入號誌。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-202">The thread or task doesn't enter the semaphore.</span></span>
- <span data-ttu-id="6d2cf-203"><xref:System.Threading.SemaphoreSlim.CurrentCount%2A>屬性不會遞減。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-203">The <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property isn't decremented.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="6d2cf-204"><paramref name="millisecondsTimeout" /> 是除了 -1 以外的負數，表示無限逾時，或是大於 <see cref="F:System.Int32.MaxValue" /> 的逾時。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-204"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="6d2cf-205"><see cref="T:System.Threading.SemaphoreSlim" /> 已經處置。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-205">The <see cref="T:System.Threading.SemaphoreSlim" /> has been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="6d2cf-206">Semaphore 和 SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="6d2cf-206">Semaphore and SemaphoreSlim</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public void Wait (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Wait(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Wait(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Wait : System.Threading.CancellationToken -&gt; unit" Usage="semaphoreSlim.Wait cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"><span data-ttu-id="6d2cf-207">要觀察的 <see cref="T:System.Threading.CancellationToken" /> 語彙基元。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-207">The <see cref="T:System.Threading.CancellationToken" /> token to observe.</span></span></param>
        <summary><span data-ttu-id="6d2cf-208">封鎖目前的執行緒，直到此執行緒可以進入 <see cref="T:System.Threading.SemaphoreSlim" /> 為止，同時觀察 <see cref="T:System.Threading.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-208">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />, while observing a <see cref="T:System.Threading.CancellationToken" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2cf-209">如果能夠進入號誌，執行緒或工作它遞減<xref:System.Threading.SemaphoreSlim.CurrentCount%2A>其中一個屬性。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-209">If a thread or task is able to enter the semaphore, it decrements the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span>  
  
 <span data-ttu-id="6d2cf-210">如果`cancellationToken`已取消，執行緒或工作不進入號誌，而<xref:System.Threading.SemaphoreSlim.CurrentCount%2A>屬性不會遞減。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-210">If `cancellationToken` is cancelled, the thread or task doesn't enter the semaphore, and the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property isn't decremented.</span></span> <span data-ttu-id="6d2cf-211">相反地，方法會擲回<xref:System.OperationCanceledException>例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-211">Instead, the method throws an <xref:System.OperationCanceledException> exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="6d2cf-212"><paramref name="cancellationToken" /> 已取消。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-212"><paramref name="cancellationToken" /> was canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="6d2cf-213">目前的執行個體已經過處置。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-213">The current instance has already been disposed.</span></span>  
  
<span data-ttu-id="6d2cf-214">-或-</span><span class="sxs-lookup"><span data-stu-id="6d2cf-214">-or-</span></span> 
<span data-ttu-id="6d2cf-215">已處置建立 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-215">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="6d2cf-216">Semaphore 和 SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="6d2cf-216">Semaphore and SemaphoreSlim</span></span></related>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="6d2cf-217">取消</span><span class="sxs-lookup"><span data-stu-id="6d2cf-217">Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Wait (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Wait : TimeSpan -&gt; bool" Usage="semaphoreSlim.Wait timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="6d2cf-218"><see cref="T:System.TimeSpan" />，代表要等候的毫秒數；<see cref="T:System.TimeSpan" /> 為 -1 毫秒表示永遠等候，<see cref="T:System.TimeSpan" /> 為 0 毫秒表示測試等候控制代碼並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-218">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely, or a <see cref="T:System.TimeSpan" /> that represents 0 milliseconds to test the wait handle and return immediately.</span></span></param>
        <summary><span data-ttu-id="6d2cf-219">封鎖目前的執行緒，直到此執行緒可以進入 <see cref="T:System.Threading.SemaphoreSlim" /> 為止 (使用 <see cref="T:System.TimeSpan" /> 以指定逾時)。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-219">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a <see cref="T:System.TimeSpan" /> to specify the timeout.</span></span></summary>
        <returns><span data-ttu-id="6d2cf-220">如果目前執行緒已成功進入 <see cref="T:System.Threading.SemaphoreSlim" /> 則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-220"><see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
<span data-ttu-id="6d2cf-221">如果在逾時設定為-1 毫秒，方法就會無限期地等候。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-221">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
<span data-ttu-id="6d2cf-222">如果在逾時設定為零毫秒，此方法不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-222">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="6d2cf-223">它會測試等候控制代碼的狀態，並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-223">It tests the state of the wait handle and returns immediately.</span></span> 
 
<span data-ttu-id="6d2cf-224">如果能夠進入號誌，執行緒或工作它遞減<xref:System.Threading.SemaphoreSlim.CurrentCount%2A>其中一個屬性。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-224">If a thread or task is able to enter the semaphore, it decrements the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span>  
  
<span data-ttu-id="6d2cf-225">如果呼叫時遭到封鎖的執行緒或工作<xref:System.Threading.SemaphoreSlim.Wait%28System.TimeSpan%29>及所指定的逾時間隔`millisecondsTimeout`到期：</span><span class="sxs-lookup"><span data-stu-id="6d2cf-225">If a thread or task is blocked when calling <xref:System.Threading.SemaphoreSlim.Wait%28System.TimeSpan%29> and the timeout interval specified by `millisecondsTimeout` expires:</span></span>

- <span data-ttu-id="6d2cf-226">執行緒或工作不進入號誌。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-226">The thread or task doesn't enter the semaphore.</span></span>
- <span data-ttu-id="6d2cf-227"><xref:System.Threading.SemaphoreSlim.CurrentCount%2A>屬性不會遞減。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-227">The <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property isn't decremented.</span></span>   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="6d2cf-228"><paramref name="timeout" /> 是除了 -1 以外的負數，表示無限逾時，或是大於 <see cref="F:System.Int32.MaxValue" /> 的逾時。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-228"><paramref name="timeout" /> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="6d2cf-229">semaphoreSlim 執行個體已經處置 <paramref name="." /></span><span class="sxs-lookup"><span data-stu-id="6d2cf-229">The semaphoreSlim instance has been disposed <paramref name="." /></span></span></exception>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="6d2cf-230">Semaphore 和 SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="6d2cf-230">Semaphore and SemaphoreSlim</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(int32 millisecondsTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(int millisecondsTimeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Wait : int * System.Threading.CancellationToken -&gt; bool" Usage="semaphoreSlim.Wait (millisecondsTimeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="6d2cf-231">要等候的毫秒數，<see cref="F:System.Threading.Timeout.Infinite" />(-1) 表示永遠等候，零表示測試等候控制代碼的狀態並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-231">The number of milliseconds to wait, <see cref="F:System.Threading.Timeout.Infinite" />(-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="6d2cf-232">要觀察的 <see cref="T:System.Threading.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-232">The <see cref="T:System.Threading.CancellationToken" /> to observe.</span></span></param>
        <summary><span data-ttu-id="6d2cf-233">封鎖目前的執行緒，直到此執行緒可以進入 <see cref="T:System.Threading.SemaphoreSlim" /> 為止 (使用 32 位元帶正負號整數以指定逾時)，同時觀察 <see cref="T:System.Threading.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-233">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a 32-bit signed integer that specifies the timeout, while observing a <see cref="T:System.Threading.CancellationToken" />.</span></span></summary>
        <returns><span data-ttu-id="6d2cf-234">如果目前執行緒已成功進入 <see cref="T:System.Threading.SemaphoreSlim" /> 則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-234"><see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
<span data-ttu-id="6d2cf-235">如果在逾時設定為-1 毫秒，方法就會無限期地等候。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-235">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
<span data-ttu-id="6d2cf-236">如果在逾時設定為零毫秒，此方法不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-236">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="6d2cf-237">它會測試等候控制代碼的狀態，並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-237">It tests the state of the wait handle and returns immediately.</span></span>

<span data-ttu-id="6d2cf-238">如果能夠進入號誌，執行緒或工作它遞減<xref:System.Threading.SemaphoreSlim.CurrentCount%2A>其中一個屬性。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-238">If a thread or task is able to enter the semaphore, it decrements the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span>  
  
<span data-ttu-id="6d2cf-239">如果`cancellationToken`遭到取消，或如果呼叫時遭到封鎖的執行緒或工作<xref:System.Threading.SemaphoreSlim.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29>和所指定的逾時間隔`millisecondsTimeout`到期：</span><span class="sxs-lookup"><span data-stu-id="6d2cf-239">If `cancellationToken` is cancelled, or if a thread or task is blocked when calling <xref:System.Threading.SemaphoreSlim.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> and the timeout interval specified by `millisecondsTimeout` expires:</span></span>

- <span data-ttu-id="6d2cf-240">執行緒或工作不進入號誌。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-240">The thread or task doesn't enter the semaphore.</span></span>
- <span data-ttu-id="6d2cf-241"><xref:System.Threading.SemaphoreSlim.CurrentCount%2A>屬性不會遞減。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-241">The <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property isn't decremented.</span></span>  
 
<span data-ttu-id="6d2cf-242">如果`cancellationToken`已取消，則方法會擲回<xref:System.OperationCanceledException>例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-242">If `cancellationToken` is cancelled, the method throws an   <xref:System.OperationCanceledException> exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="6d2cf-243"><paramref name="cancellationToken" /> 已取消。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-243"><paramref name="cancellationToken" /> was canceled.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="6d2cf-244"><paramref name="millisecondsTimeout" /> 是除了 -1 以外的負數，表示無限逾時，或是大於 <see cref="F:System.Int32.MaxValue" /> 的逾時。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-244"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="6d2cf-245">已處置 <see cref="T:System.Threading.SemaphoreSlim" /> 執行個體，或是已處置建立 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-245">The <see cref="T:System.Threading.SemaphoreSlim" /> instance has been disposed, or the <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="6d2cf-246">Semaphore 和 SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="6d2cf-246">Semaphore and SemaphoreSlim</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(TimeSpan timeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Wait : TimeSpan * System.Threading.CancellationToken -&gt; bool" Usage="semaphoreSlim.Wait (timeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="6d2cf-247"><see cref="T:System.TimeSpan" />，代表要等候的毫秒數；<see cref="T:System.TimeSpan" /> 為 -1 毫秒表示永遠等候，<see cref="T:System.TimeSpan" /> 為 0 毫秒表示測試等候控制代碼並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-247">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely, or a <see cref="T:System.TimeSpan" /> that represents 0 milliseconds to test the wait handle and return immediately.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="6d2cf-248">要觀察的 <see cref="T:System.Threading.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-248">The <see cref="T:System.Threading.CancellationToken" /> to observe.</span></span></param>
        <summary><span data-ttu-id="6d2cf-249">封鎖目前的執行緒，直到此執行緒可以進入 <see cref="T:System.Threading.SemaphoreSlim" /> 為止 (使用 <see cref="T:System.TimeSpan" /> 以指定逾時)，同時觀察 <see cref="T:System.Threading.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-249">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a <see cref="T:System.TimeSpan" /> that specifies the timeout, while observing a <see cref="T:System.Threading.CancellationToken" />.</span></span></summary>
        <returns><span data-ttu-id="6d2cf-250">如果目前執行緒已成功進入 <see cref="T:System.Threading.SemaphoreSlim" /> 則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-250"><see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
<span data-ttu-id="6d2cf-251">如果在逾時設定為-1 毫秒，方法就會無限期地等候。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-251">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
<span data-ttu-id="6d2cf-252">如果在逾時設定為零毫秒，此方法不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-252">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="6d2cf-253">它會測試等候控制代碼的狀態，並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-253">It tests the state of the wait handle and returns immediately.</span></span> 

<span data-ttu-id="6d2cf-254">如果能夠進入號誌，執行緒或工作它遞減<xref:System.Threading.SemaphoreSlim.CurrentCount%2A>其中一個屬性。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-254">If a thread or task is able to enter the semaphore, it decrements the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span>  
  
<span data-ttu-id="6d2cf-255">如果`cancellationToken`遭到取消，或如果呼叫時遭到封鎖的執行緒或工作<xref:System.Threading.SemaphoreSlim.Wait%28System.TimeSpan%2CSystem.Threading.CancellationToken%29>和所指定的逾時間隔`millisecondsTimeout`到期：</span><span class="sxs-lookup"><span data-stu-id="6d2cf-255">If `cancellationToken` is cancelled, or if a thread or task is blocked when calling <xref:System.Threading.SemaphoreSlim.Wait%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> and the timeout interval specified by `millisecondsTimeout` expires:</span></span>

- <span data-ttu-id="6d2cf-256">執行緒或工作不進入號誌。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-256">The thread or task doesn't enter the semaphore.</span></span>
- <span data-ttu-id="6d2cf-257"><xref:System.Threading.SemaphoreSlim.CurrentCount%2A>屬性不會遞減。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-257">The <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property isn't decremented.</span></span>  

<span data-ttu-id="6d2cf-258">如果`cancellationToken`已取消，則方法會擲回<xref:System.OperationCanceledException>例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-258">If `cancellationToken` is cancelled, the method throws an <xref:System.OperationCanceledException> exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="6d2cf-259"><paramref name="cancellationToken" /> 已取消。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-259"><paramref name="cancellationToken" /> was canceled.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="6d2cf-260"><paramref name="timeout" /> 是除了 -1 以外的負數，表示無限逾時，或是大於 <see cref="F:System.Int32.MaxValue" /> 的逾時。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-260"><paramref name="timeout" /> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="6d2cf-261">semaphoreSlim 執行個體已經處置 <paramref name="." /><paramref name="-or-" /></span><span class="sxs-lookup"><span data-stu-id="6d2cf-261">The semaphoreSlim instance has been disposed <paramref name="." /><paramref name="-or-" /></span></span>  
  
<span data-ttu-id="6d2cf-262">已處置建立 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-262">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="6d2cf-263">Semaphore 和 SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="6d2cf-263">Semaphore and SemaphoreSlim</span></span></related>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="6d2cf-264">取消</span><span class="sxs-lookup"><span data-stu-id="6d2cf-264">Cancellation</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitAsync">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6d2cf-265">非同步等待進入 <see cref="T:System.Threading.SemaphoreSlim" />。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-265">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WaitAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WaitAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.WaitAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WaitAsync();" />
      <MemberSignature Language="F#" Value="member this.WaitAsync : unit -&gt; System.Threading.Tasks.Task" Usage="semaphoreSlim.WaitAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6d2cf-266">非同步等待進入 <see cref="T:System.Threading.SemaphoreSlim" />。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-266">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />.</span></span></summary>
        <returns><span data-ttu-id="6d2cf-267">將會在號誌 (Semaphore) 輸入後完成的工作。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-267">A task that will complete when the semaphore has been entered.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="6d2cf-268"><see cref="T:System.Threading.SemaphoreSlim" /> 已經處置。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-268">The <see cref="T:System.Threading.SemaphoreSlim" /> has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; WaitAsync (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; WaitAsync(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitAsync (millisecondsTimeout As Integer) As Task(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;bool&gt; ^ WaitAsync(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.WaitAsync : int -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="semaphoreSlim.WaitAsync millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="6d2cf-269">要等候的毫秒數，<see cref="F:System.Threading.Timeout.Infinite" /> (-1) 表示永遠等候，零表示測試等候控制代碼的狀態並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-269">The number of milliseconds to wait, <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</span></span></param>
        <summary><span data-ttu-id="6d2cf-270">非同步等待進入 <see cref="T:System.Threading.SemaphoreSlim" />，並使用 32 位元帶正負號的整數來測量時間間隔。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-270">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a 32-bit signed integer to measure the time interval.</span></span></summary>
        <returns><span data-ttu-id="6d2cf-271">如果目前執行緒成功進入 <see cref="T:System.Threading.SemaphoreSlim" />，則工作會完成且結果為 <see langword="true" />，否則結果為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-271">A task that will complete with a result of <see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />, otherwise with a result of <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2cf-272">如果在逾時設定為-1 毫秒，方法就會無限期地等候。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-272">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
 <span data-ttu-id="6d2cf-273">如果在逾時設定為零毫秒，此方法不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-273">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="6d2cf-274">它會測試等候控制代碼的狀態，並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-274">It tests the state of the wait handle and returns immediately.</span></span> 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="6d2cf-275">目前的執行個體已經過處置。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-275">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="6d2cf-276"><paramref name="millisecondsTimeout" /> 是除了 -1 以外的負數，表示無限逾時，或是大於 <see cref="F:System.Int32.MaxValue" /> 的逾時。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-276"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WaitAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WaitAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.WaitAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WaitAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WaitAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="semaphoreSlim.WaitAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"><span data-ttu-id="6d2cf-277">要觀察的 <see cref="T:System.Threading.CancellationToken" /> 語彙基元。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-277">The <see cref="T:System.Threading.CancellationToken" /> token to observe.</span></span></param>
        <summary><span data-ttu-id="6d2cf-278">在觀察 <see cref="T:System.Threading.SemaphoreSlim" /> 時，非同步等待進入 <see cref="T:System.Threading.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-278">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />, while observing a <see cref="T:System.Threading.CancellationToken" />.</span></span></summary>
        <returns><span data-ttu-id="6d2cf-279">將會在號誌 (Semaphore) 輸入後完成的工作。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-279">A task that will complete when the semaphore has been entered.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="6d2cf-280">目前的執行個體已經過處置。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-280">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="6d2cf-281"><paramref name="cancellationToken" /> 已取消。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-281"><paramref name="cancellationToken" /> was canceled.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; WaitAsync (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; WaitAsync(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitAsync (timeout As TimeSpan) As Task(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;bool&gt; ^ WaitAsync(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.WaitAsync : TimeSpan -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="semaphoreSlim.WaitAsync timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="6d2cf-282"><see cref="T:System.TimeSpan" />，代表要等候的毫秒數；<see cref="T:System.TimeSpan" /> 為 -1 毫秒表示永遠等候，<see cref="T:System.TimeSpan" /> 為 0 毫秒表示測試等候控制代碼並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-282">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely, or a <see cref="T:System.TimeSpan" /> that represents 0 milliseconds to test the wait handle and return immediately.</span></span></param>
        <summary><span data-ttu-id="6d2cf-283">非同步等待進入 <see cref="T:System.Threading.SemaphoreSlim" />，並使用 <see cref="T:System.TimeSpan" /> 來測量時間間隔.</span><span class="sxs-lookup"><span data-stu-id="6d2cf-283">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a <see cref="T:System.TimeSpan" /> to measure the time interval.</span></span></summary>
        <returns><span data-ttu-id="6d2cf-284">如果目前執行緒成功進入 <see cref="T:System.Threading.SemaphoreSlim" />，則工作會完成且結果為 <see langword="true" />，否則結果為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-284">A task that will complete with a result of <see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />, otherwise with a result of <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2cf-285">如果在逾時設定為-1 毫秒，方法就會無限期地等候。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-285">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
 <span data-ttu-id="6d2cf-286">如果在逾時設定為零毫秒，此方法不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-286">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="6d2cf-287">它會測試等候控制代碼的狀態，並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-287">It tests the state of the wait handle and returns immediately.</span></span> 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="6d2cf-288">目前的執行個體已經過處置。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-288">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="6d2cf-289"><paramref name="millisecondsTimeout" /> 是除了 -1 以外的負數，表示無限逾時，或是大於 <see cref="F:System.Int32.MaxValue" /> 的逾時。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-289"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; WaitAsync (int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; WaitAsync(int32 millisecondsTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;bool&gt; ^ WaitAsync(int millisecondsTimeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WaitAsync : int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="semaphoreSlim.WaitAsync (millisecondsTimeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="6d2cf-290">要等候的毫秒數，<see cref="F:System.Threading.Timeout.Infinite" /> (-1) 表示永遠等候，零表示測試等候控制代碼的狀態並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-290">The number of milliseconds to wait, <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="6d2cf-291">要觀察的 <see cref="T:System.Threading.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-291">The <see cref="T:System.Threading.CancellationToken" /> to observe.</span></span></param>
        <summary><span data-ttu-id="6d2cf-292">在觀察 <see cref="T:System.Threading.SemaphoreSlim" /> 時，非同步等待進入 <see cref="T:System.Threading.CancellationToken" />，並使用 32 位元帶正負號的整數來測量時間間隔。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-292">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a 32-bit signed integer to measure the time interval, while observing a <see cref="T:System.Threading.CancellationToken" />.</span></span></summary>
        <returns><span data-ttu-id="6d2cf-293">如果目前執行緒成功進入 <see cref="T:System.Threading.SemaphoreSlim" />，則工作會完成且結果為 <see langword="true" />，否則結果為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-293">A task that will complete with a result of <see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />, otherwise with a result of <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2cf-294">如果在逾時設定為-1 毫秒，方法就會無限期地等候。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-294">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
 <span data-ttu-id="6d2cf-295">如果在逾時設定為零毫秒，此方法不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-295">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="6d2cf-296">它會測試等候控制代碼的狀態，並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-296">It tests the state of the wait handle and returns immediately.</span></span> 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="6d2cf-297"><paramref name="millisecondsTimeout" /> 是除了 -1 以外的數值，表示無限逾時，或是大於 <see cref="F:System.Int32.MaxValue" /> 的逾時。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-297"><paramref name="millisecondsTimeout" /> is a number other than -1, which represents an infinite timeout -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="6d2cf-298">目前的執行個體已經過處置。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-298">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="6d2cf-299"><paramref name="cancellationToken" /> 已取消。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-299"><paramref name="cancellationToken" /> was canceled.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; WaitAsync (TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; WaitAsync(valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;bool&gt; ^ WaitAsync(TimeSpan timeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WaitAsync : TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="semaphoreSlim.WaitAsync (timeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="6d2cf-300"><see cref="T:System.TimeSpan" />，代表要等候的毫秒數；<see cref="T:System.TimeSpan" /> 為 -1 毫秒表示永遠等候，<see cref="T:System.TimeSpan" /> 為 0 毫秒表示測試等候控制代碼並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-300">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely, or a <see cref="T:System.TimeSpan" /> that represents 0 milliseconds to test the wait handle and return immediately.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="6d2cf-301">要觀察的 <see cref="T:System.Threading.CancellationToken" /> 語彙基元。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-301">The <see cref="T:System.Threading.CancellationToken" /> token to observe.</span></span></param>
        <summary><span data-ttu-id="6d2cf-302">在觀察 <see cref="T:System.Threading.SemaphoreSlim" /> 時，非同步等待進入 <see cref="T:System.TimeSpan" />，並使用 <see cref="T:System.Threading.CancellationToken" />來測量時間間隔。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-302">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a <see cref="T:System.TimeSpan" /> to measure the time interval, while observing a <see cref="T:System.Threading.CancellationToken" />.</span></span></summary>
        <returns><span data-ttu-id="6d2cf-303">如果目前執行緒成功進入 <see cref="T:System.Threading.SemaphoreSlim" />，則工作會完成且結果為 <see langword="true" />，否則結果為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-303">A task that will complete with a result of <see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />, otherwise with a result of <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2cf-304">如果在逾時設定為-1 毫秒，方法就會無限期地等候。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-304">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>

 <span data-ttu-id="6d2cf-305">如果在逾時設定為零毫秒，此方法不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-305">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="6d2cf-306">它會測試等候控制代碼的狀態，並立即傳回。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-306">It tests the state of the wait handle and returns immediately.</span></span> 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="6d2cf-307"><paramref name="millisecondsTimeout" /> 是除了 -1 以外的負數，表示無限逾時，或是大於 <see cref="F:System.Int32.MaxValue" /> 的逾時。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-307"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="6d2cf-308"><paramref name="cancellationToken" /> 已取消。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-308"><paramref name="cancellationToken" /> was canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="6d2cf-309"><see cref="T:System.Threading.SemaphoreSlim" /> 已經處置。</span><span class="sxs-lookup"><span data-stu-id="6d2cf-309">The <see cref="T:System.Threading.SemaphoreSlim" /> has been disposed.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>