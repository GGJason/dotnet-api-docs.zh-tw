<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="SemaphoreSlim.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b857fe3" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2eccf4de-4b1c-4706-8cb3-f46682ccfb72268af4ec18ef9780af942f18f0369318755e0b83.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">268af4ec18ef9780af942f18f0369318755e0b83</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b15b8cf0f6dbc1504057c88969d9ef4b790891fe</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/11/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.SemaphoreSlim">
          <source>Represents a lightweight alternative to <ph id="ph1">&lt;see cref="T:System.Threading.Semaphore" /&gt;</ph> that limits the number of threads that can access a resource or pool of resources concurrently.</source>
          <target state="translated">代表 <ph id="ph1">&lt;see cref="T:System.Threading.Semaphore" /&gt;</ph> 的輕量型替代品，限制可同時存取一項資源或資源集區的執行緒數目。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>Semaphores are of two types: local semaphores and named system semaphores.</source>
          <target state="translated">號誌有兩種類型： 本機號誌和具名的系統號誌。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>The former is local to an app.</source>
          <target state="translated">前者是本機應用程式。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>The latter is visible throughout the operating system and is suitable for inter-process synchronization.</source>
          <target state="translated">後者是在作業系統各處，適用於處理序間的同步處理。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>The <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> is a lightweight alternative to the <ph id="ph2">&lt;xref:System.Threading.Semaphore&gt;</ph> class that doesn't use Windows kernel semaphores.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph>輕量級替代方案<ph id="ph2">&lt;xref:System.Threading.Semaphore&gt;</ph>不會使用 Windows 核心號誌的類別。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>Unlike the <ph id="ph1">&lt;xref:System.Threading.Semaphore&gt;</ph> class, the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> class doesn't support named system semaphores.</source>
          <target state="translated">不同於<ph id="ph1">&lt;xref:System.Threading.Semaphore&gt;</ph>類別<ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph>類別不支援具名的系統號誌。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>You can use it as a local semaphore only.</source>
          <target state="translated">您可以將它當做本機信號。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>The <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> class is the recommended semaphore for synchronization within a single app.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph>類別是建議的號誌，單一應用程式中的同步處理。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>A lightweight semaphore controls access to a pool of resources that is local to your application.</source>
          <target state="translated">輕量型號誌，控制對資源集區的應用程式的本機存取。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>When you instantiate a semaphore, you can specify the maximum number of threads that can enter the semaphore concurrently.</source>
          <target state="translated">當您具現化某個號誌時，您可以指定可以同時進入號誌的執行緒最大數目。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>You also specify the initial number of threads that can enter the semaphore concurrently.</source>
          <target state="translated">您也可以指定執行緒可以同時進入號誌的初始的數目。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>This defines the semaphore's count.</source>
          <target state="translated">這會定義將旗號的計數。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>The count is decremented each time a thread enters the semaphore, and incremented each time a thread releases the semaphore.</source>
          <target state="translated">計數遞減執行緒進入號誌，每次，且每次遞增執行緒釋放號誌。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>To enter the semaphore, a thread calls one of the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph> overloads.</source>
          <target state="translated">若要進入號誌，執行緒會呼叫其中一個<ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph>多載。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>To release the semaphore, it calls one of the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Release%2A&gt;</ph> overloads.</source>
          <target state="translated">若要釋放號誌，它會呼叫其中一個<ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Release%2A&gt;</ph>多載。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>When the count reaches zero, subsequent calls to one of the <ph id="ph1">`Wait`</ph> methods block until other threads release the semaphore.</source>
          <target state="translated">當計數到達零時，其中的後續呼叫<ph id="ph1">`Wait`</ph>方法封鎖，直到其他的執行緒釋放號誌。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>If multiple threads are blocked, there is no guaranteed order, such as FIFO or LIFO, that controls when threads enter the semaphore.</source>
          <target state="translated">如果多個執行緒會被封鎖，則無法保證的順序，例如 FIFO 或 LIFO，可控制當執行緒進入號誌。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>The basic structure for code that uses a semaphore to protect resources is:</source>
          <target state="translated">用來保護資源的號誌的程式碼的基本結構是：</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>When all threads have released the semaphore, the count is at the maximum value specified when the semaphore was created.</source>
          <target state="translated">所有執行緒都釋放號誌，計數為最大值時指定已建立號誌。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>The semaphore's count is available from the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property.</source>
          <target state="translated">號誌計數是可從<ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>The <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> class doesn't enforce thread or task identity on calls to the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Threading.SemaphoreSlim.Release%2A&gt;</ph> methods.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph>類別不會強制要求上呼叫的執行緒或工作識別<ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph>， <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph>，和<ph id="ph4">&lt;xref:System.Threading.SemaphoreSlim.Release%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>In addition, if the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.%23ctor%28System.Int32%29&gt;</ph> constructor is used to instantiate the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> object, the <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property can increase beyond the value set by the constructor.</source>
          <target state="translated">此外，如果<ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.%23ctor%28System.Int32%29&gt;</ph>建構函式用來具現化<ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph>物件<ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph>屬性可以增加超過設定的建構函式的值。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>It is the programmer's responsibility to ensure that calls to <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph> methods are appropriately paired with calls to <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.Release%2A&gt;</ph> methods.</source>
          <target state="translated">程式設計人員必須負責確保要呼叫<ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph>方法適當地搭配呼叫<ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.Release%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>The following example creates a semaphore with a maximum count of three threads and an initial count of zero threads.</source>
          <target state="translated">下列範例會建立一個號誌的三個執行緒的最大計數與初始計數為零的執行緒。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>The example starts five tasks, all of which block waiting for the semaphore.</source>
          <target state="translated">此範例會啟動有五個工作，全部都是封鎖而等待號誌。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>The main thread calls the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Release%28System.Int32%29&gt;</ph> overload to increase the semaphore count to its maximum, which allows three tasks to enter the semaphore.</source>
          <target state="translated">主執行緒呼叫<ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Release%28System.Int32%29&gt;</ph>號誌計數增加至其最大值，允許進入號誌的三個工作的多載。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>Each time the semaphore is released, the previous semaphore count is displayed.</source>
          <target state="translated">已釋放號誌，每次會顯示先前的號誌計數。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>Console messages track semaphore use.</source>
          <target state="translated">主控台訊息追蹤號誌的使用。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>The simulated work interval is increased slightly for each thread to make the output easier to read.</source>
          <target state="translated">模擬的工作間隔會稍微增加每個執行緒，可讓輸出更容易閱讀。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>All public and protected members of <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> are thread-safe and may be used concurrently from multiple threads, with the exception of <ph id="ph2">&lt;see cref="M:System.Threading.SemaphoreSlim.Dispose" /&gt;</ph>, which must be used only when all other operations on the <ph id="ph3">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> have completed.</source>
          <target state="translated">所有公用和受保護成員<ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>是安全執行緒，而且可用來同時從多個執行緒，但<ph id="ph2">&lt;see cref="M:System.Threading.SemaphoreSlim.Dispose" /&gt;</ph>，必須使用它時，才在所有其他作業<ph id="ph3">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>已完成。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="T:System.Threading.SemaphoreSlim">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.#ctor(System.Int32)">
          <source>The initial number of requests for the semaphore that can be granted concurrently.</source>
          <target state="translated">可同時授與給號誌的初始要求數目。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.#ctor(System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> class, specifying the initial number of requests that can be granted concurrently.</source>
          <target state="translated">指定可同時授與的初始要求數目，初始化 <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.#ctor(System.Int32)">
          <source>The <ph id="ph1">`initialCount`</ph> parameter defines the number of concurrent requests to enter the semaphore that can be granted.</source>
          <target state="translated"><ph id="ph1">`initialCount`</ph>參數定義輸入可被授與之號誌的並行要求數目。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.#ctor(System.Int32)">
          <source>However, it doesn't define the maximum number of requests that can be granted concurrently.</source>
          <target state="translated">不過，它不會定義可以同時授與的要求數目上限。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.#ctor(System.Int32)">
          <source>A   <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> object instantiated by calling this constructor doesn't throw a <ph id="ph2">&lt;xref:System.Threading.SemaphoreFullException&gt;</ph> exception if a call to the <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.Release%2A&gt;</ph> method increases the value of the <ph id="ph4">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property beyond <ph id="ph5">`initialCount`</ph>.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph>藉由呼叫這個建構函式具現化的物件不會擲回<ph id="ph2">&lt;xref:System.Threading.SemaphoreFullException&gt;</ph>例外狀況，如果呼叫<ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.Release%2A&gt;</ph>方法增加的值<ph id="ph4">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph>屬性超出<ph id="ph5">`initialCount`</ph>。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.#ctor(System.Int32)">
          <source>This occurs if there are more calls to <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Release%2A&gt;</ph> methods than there are to <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph> methods.</source>
          <target state="translated">會發生這個錯誤有多個呼叫<ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Release%2A&gt;</ph>方法比很<ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph>或<ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.#ctor(System.Int32)">
          <source>To set the maximum number of concurrent requests to enter the semaphore that can be granted, call the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.%23ctor%28System.Int32%2CSystem.Int32%29&gt;</ph> constructor.</source>
          <target state="translated">若要設定的輸入可以授與之號誌的並行要求數目上限，請呼叫<ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.%23ctor%28System.Int32%2CSystem.Int32%29&gt;</ph>建構函式。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.#ctor(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="initialCount" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="initialCount" /&gt;</ph> 小於 0。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.#ctor(System.Int32,System.Int32)">
          <source>The initial number of requests for the semaphore that can be granted concurrently.</source>
          <target state="translated">可同時授與給號誌的初始要求數目。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.#ctor(System.Int32,System.Int32)">
          <source>The maximum number of requests for the semaphore that can be granted concurrently.</source>
          <target state="translated">可以同時授與之號誌要求的最大數目。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.#ctor(System.Int32,System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> class, specifying the initial and maximum number of requests that can be granted concurrently.</source>
          <target state="translated">指定可同時授與的初始要求數目及最大數目，初始化 <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.#ctor(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="initialCount" /&gt;</ph> is less than 0, or <ph id="ph2">&lt;paramref name="initialCount" /&gt;</ph> is greater than <ph id="ph3">&lt;paramref name="maxCount" /&gt;</ph>, or <ph id="ph4">&lt;paramref name="maxCount" /&gt;</ph> is equal to or less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="initialCount" /&gt;</ph> 小於 0，或者 <ph id="ph2">&lt;paramref name="initialCount" /&gt;</ph> 大於 <ph id="ph3">&lt;paramref name="maxCount" /&gt;</ph>，或者 <ph id="ph4">&lt;paramref name="maxCount" /&gt;</ph> 等於或小於 0。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="P:System.Threading.SemaphoreSlim.AvailableWaitHandle">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> that can be used to wait on the semaphore.</source>
          <target state="translated">傳回可用來等候號誌的 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.SemaphoreSlim.AvailableWaitHandle">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> that can be used to wait on the semaphore.</source>
          <target state="translated">可用來等候號誌的 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.SemaphoreSlim.AvailableWaitHandle">
          <source>Use this property only when you must wait on a SemaphoreSlim together with other kernel-based synchronization objects with the same wait handle.</source>
          <target state="translated">您必須等候 SemaphoreSlim 連同其他核心為基礎的同步處理的物件與相同的等候控制代碼時，才使用這個屬性。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.SemaphoreSlim.AvailableWaitHandle">
          <source>A successful wait on the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.AvailableWaitHandle%2A&gt;</ph> does not imply a successful wait on the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> itself, nor does it decrement the semaphore's count.</source>
          <target state="translated">成功等候<ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.AvailableWaitHandle%2A&gt;</ph>並不表示成功的等候上<ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph>本身，也不會遞減旗號的計數。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.SemaphoreSlim.AvailableWaitHandle">
          <source>After the available wait handle is signaled, you should wait on the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> specifically.</source>
          <target state="translated">使用等候控制代碼會收到信號之後，您應該等候<ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph>特別。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="P:System.Threading.SemaphoreSlim.AvailableWaitHandle">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> has been disposed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> 已經處置。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="P:System.Threading.SemaphoreSlim.CurrentCount">
          <source>Gets the number of remaining threads that can enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> object.</source>
          <target state="translated">取得可以進入 <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> 物件的剩餘執行緒數目。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.SemaphoreSlim.CurrentCount">
          <source>The number of remaining threads that can enter the semaphore.</source>
          <target state="translated">可以進入號誌的剩餘執行緒數目。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.SemaphoreSlim.CurrentCount">
          <source>The initial value of the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property is set by the call to the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.%23ctor%2A&gt;</ph> class constructor.</source>
          <target state="translated">初始值<ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph>屬性由呼叫設定<ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.%23ctor%2A&gt;</ph>類別建構函式。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.SemaphoreSlim.CurrentCount">
          <source>It is decremented by each call to the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph> method, and incremented by each call to the <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.Release%2A&gt;</ph> method.</source>
          <target state="translated">它也會減少每次呼叫<ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph>方法，而且每次呼叫遞增<ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.Release%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="T:System.Threading.SemaphoreSlim">
          <source>Releases resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> class.</source>
          <target state="translated">將 <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> 類別的目前執行個體所使用的資源釋出。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Dispose">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> class.</source>
          <target state="translated">將 <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> 類別目前的執行個體所使用的資源全部釋出。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Dispose">
          <source>Call <ph id="ph1">`Dispose`</ph> when you are finished using the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose`</ph> 使用完畢時，請呼叫 <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Dispose">
          <source>The <ph id="ph1">`Dispose`</ph> method leaves the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> in an unusable state.</source>
          <target state="translated"><ph id="ph1">`Dispose`</ph> 方法會將 <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> 保留在無法使用的狀態。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Dispose">
          <source>After calling <ph id="ph1">`Dispose`</ph>, you must release all references to the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> so the garbage collector can reclaim the memory that the <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> was occupying.</source>
          <target state="translated">在呼叫<ph id="ph1">`Dispose`</ph>，您必須釋放所有參考<ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph>讓記憶體回收行程可以回收記憶體的<ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph>所佔用。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Dispose">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>清除 Unmanaged 資源上<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>和<bpt id="p2">[</bpt>實作 Dispose 方法<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Dispose">
          <source>Always call <ph id="ph1">`Dispose`</ph> before you release your last reference to the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph>.</source>
          <target state="translated">在您釋放最後一個 <ph id="ph1">`Dispose`</ph> 參考之前，請務必呼叫 <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Dispose">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> object's <ph id="ph2">`Finalize`</ph> method.</source>
          <target state="translated">否則工作窗格所使用的資源不會釋放，直到記憶體回收行程呼叫 <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> 物件的 <ph id="ph2">`Finalize`</ph> 方法。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> 表示釋放 Managed 和 Unmanaged 資源，<ph id="ph2">&lt;see langword="false" /&gt;</ph> 則表示只釋放 Unmanaged 資源。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, and optionally releases the managed resources.</source>
          <target state="translated">釋放 <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> 所使用的 Unmanaged 資源，並選擇性釋放 Managed 資源。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Dispose(System.Boolean)">
          <source>Unlike most of the members of <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Dispose%2A&gt;</ph> is not thread-safe and may not be used concurrently with other members of this instance.</source>
          <target state="translated">不同於大部分的成員<ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph>，<ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Dispose%2A&gt;</ph>不具備執行緒安全，而且不能與這個執行個體的其他成員同時使用。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="T:System.Threading.SemaphoreSlim">
          <source>Releases the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> object.</source>
          <target state="translated">釋出 <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> 物件。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Release">
          <source>Releases the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> object once.</source>
          <target state="translated">釋出 <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> 物件一次。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Release">
          <source>The previous count of the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> 的先前計數。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Release">
          <source>A call to the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Release&gt;</ph> method increments the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property by one.</source>
          <target state="translated">呼叫<ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Release&gt;</ph>方法遞增<ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph>一個屬性。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Release">
          <source>If the value of the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property is zero before this method is called, the method also allows one thread or task blocked by a call to the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph> method to enter the semaphore.</source>
          <target state="translated">如果值<ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph>屬性為零，會在呼叫這個方法之前，此方法也可讓一個執行緒或呼叫被封鎖的工作<ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph>或<ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph>進入號誌的方法。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Release">
          <source>The current instance has already been disposed.</source>
          <target state="translated">目前的執行個體已經過處置。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Release">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> has already reached its maximum size.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> 已經達到其大小上限。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Release(System.Int32)">
          <source>The number of times to exit the semaphore.</source>
          <target state="translated">結束號誌的次數。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Release(System.Int32)">
          <source>Releases the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> object a specified number of times.</source>
          <target state="translated">釋出 <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> 物件指定的次數。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Release(System.Int32)">
          <source>The previous count of the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> 的先前計數。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Release(System.Int32)">
          <source>A call to the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Release%28System.Int32%29&gt;</ph> method increments the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property by <ph id="ph3">`releaseCount`</ph>.</source>
          <target state="translated">呼叫<ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Release%28System.Int32%29&gt;</ph>方法遞增<ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph>屬性<ph id="ph3">`releaseCount`</ph>。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Release(System.Int32)">
          <source>If the value of the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property is zero before this method is called, the method also allows <ph id="ph2">`releaseCount`</ph> threads or tasks blocked by a call to the <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph> method to enter the semaphore.</source>
          <target state="translated">如果值<ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph>屬性為零，會在呼叫這個方法之前，此方法也可讓<ph id="ph2">`releaseCount`</ph>執行緒或呼叫被封鎖的工作<ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph>或<ph id="ph4">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph>進入號誌的方法。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Release(System.Int32)">
          <source>The current instance has already been disposed.</source>
          <target state="translated">目前的執行個體已經過處置。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Release(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="releaseCount" /&gt;</ph> is less than 1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="releaseCount" /&gt;</ph> 小於 1。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Release(System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> has already reached its maximum size.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> 已經達到其大小上限。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="T:System.Threading.SemaphoreSlim">
          <source>Blocks the current thread until it can enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>.</source>
          <target state="translated">封鎖目前的執行緒，直到這個執行緒可以進入 <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> 為止。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait">
          <source>Blocks the current thread until it can enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>.</source>
          <target state="translated">封鎖目前的執行緒，直到這個執行緒可以進入 <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> 為止。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait">
          <source>If a thread or task is able to enter the semaphore, it decrements the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property by one.</source>
          <target state="translated">如果能夠進入號誌，執行緒或工作它遞減<ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph>一個屬性。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait">
          <source>The current instance has already been disposed.</source>
          <target state="translated">目前的執行個體已經過處置。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32)">
          <source>The number of milliseconds to wait, <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>(-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</source>
          <target state="translated">要等候的毫秒數，<ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>(-1) 表示永遠等候，零表示測試等候控制代碼的狀態並立即傳回。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32)">
          <source>Blocks the current thread until it can enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, using a 32-bit signed integer that specifies the timeout.</source>
          <target state="translated">封鎖目前的執行緒，直到這個執行緒可以進入 <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> 為止，並使用 32 位元帶正負號的整數來指定逾時。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current thread successfully entered the <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果目前的執行緒成功進入 <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32)">
          <source>If the timeout is set to -1 milliseconds, the method waits indefinitely.</source>
          <target state="translated">如果在逾時設定為-1 毫秒，方法將會無限期等候。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32)">
          <source>If the timeout is set to zero milliseconds, the method doesn't block.</source>
          <target state="translated">如果在逾時設定為零毫秒，此方法不會封鎖。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32)">
          <source>It tests the state of the wait handle and returns immediately.</source>
          <target state="translated">它會測試的狀態，等候控制代碼，並立即傳回。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32)">
          <source>If a thread or task is able to enter the semaphore, it decrements the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property by one.</source>
          <target state="translated">如果能夠進入號誌，執行緒或工作它遞減<ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph>一個屬性。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32)">
          <source>If a thread or task is blocked when calling <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Wait%28System.Int32%29&gt;</ph> and the timeout interval specified by <ph id="ph2">`millisecondsTimeout`</ph> expires:</source>
          <target state="translated">如果呼叫時遭到封鎖的執行緒或工作<ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Wait%28System.Int32%29&gt;</ph>和所指定的逾時間隔<ph id="ph2">`millisecondsTimeout`</ph>到期：</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32)">
          <source>The thread or task doesn't enter the semaphore.</source>
          <target state="translated">執行緒或工作不會進入號誌。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property isn't decremented.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph>屬性不可遞減。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> 是除了 -1 以外的負數，表示無限逾時，或是大於 <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> 的逾時。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> token to observe.</source>
          <target state="translated">要觀察的 <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> 語彙基元。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)">
          <source>Blocks the current thread until it can enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, while observing a <ph id="ph2">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</source>
          <target state="translated">封鎖目前的執行緒，直到這個執行緒可以進入 <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> 為止，同時觀察 <ph id="ph2">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)">
          <source>If a thread or task is able to enter the semaphore, it decrements the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property by one.</source>
          <target state="translated">如果能夠進入號誌，執行緒或工作它遞減<ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph>一個屬性。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)">
          <source>If <ph id="ph1">`cancellationToken`</ph> is cancelled, the thread or task doesn't enter the semaphore, and the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property isn't decremented.</source>
          <target state="translated">如果<ph id="ph1">`cancellationToken`</ph>已取消，執行緒或工作不會進入號誌，而<ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph>屬性不可遞減。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)">
          <source>Instead, the method throws an <ph id="ph1">&lt;xref:System.OperationCanceledException&gt;</ph> exception.</source>
          <target state="translated">相反地，方法會擲回<ph id="ph1">&lt;xref:System.OperationCanceledException&gt;</ph>例外狀況。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> was canceled.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> 已取消。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)">
          <source>The current instance has already been disposed.</source>
          <target state="translated">目前的執行個體已經過處置。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated">已處置建立 <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> 的 <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)">
          <source>A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents the number of milliseconds to wait, a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents -1 milliseconds to wait indefinitely, or a <ph id="ph3">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents 0 milliseconds to test the wait handle and return immediately.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>，代表要等候的毫秒數；<ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> 為 -1 毫秒表示永遠等候，<ph id="ph3">&lt;see cref="T:System.TimeSpan" /&gt;</ph> 為 0 毫秒表示測試等候控制代碼並立即傳回。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)">
          <source>Blocks the current thread until it can enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, using a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> to specify the timeout.</source>
          <target state="translated">封鎖目前的執行緒，直到這個執行緒可以進入 <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> 為止，並使用 <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> 來指定逾時。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current thread successfully entered the <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果目前的執行緒成功進入 <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)">
          <source>If the timeout is set to -1 milliseconds, the method waits indefinitely.</source>
          <target state="translated">如果在逾時設定為-1 毫秒，方法將會無限期等候。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)">
          <source>If the timeout is set to zero milliseconds, the method doesn't block.</source>
          <target state="translated">如果在逾時設定為零毫秒，此方法不會封鎖。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)">
          <source>It tests the state of the wait handle and returns immediately.</source>
          <target state="translated">它會測試的狀態，等候控制代碼，並立即傳回。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)">
          <source>If a thread or task is able to enter the semaphore, it decrements the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property by one.</source>
          <target state="translated">如果能夠進入號誌，執行緒或工作它遞減<ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph>一個屬性。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)">
          <source>If a thread or task is blocked when calling <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Wait%28System.TimeSpan%29&gt;</ph> and the timeout interval specified by <ph id="ph2">`millisecondsTimeout`</ph> expires:</source>
          <target state="translated">如果呼叫時遭到封鎖的執行緒或工作<ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Wait%28System.TimeSpan%29&gt;</ph>和所指定的逾時間隔<ph id="ph2">`millisecondsTimeout`</ph>到期：</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)">
          <source>The thread or task doesn't enter the semaphore.</source>
          <target state="translated">執行緒或工作不會進入號誌。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property isn't decremented.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph>屬性不可遞減。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> 是除了 -1 以外的負數，表示無限逾時，或是大於 <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> 的逾時。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)">
          <source>The semaphoreSlim instance has been disposed <ph id="ph1">&lt;paramref name="." /&gt;</ph></source>
          <target state="translated">semaphoreSlim 執行個體已經處置 <ph id="ph1">&lt;paramref name="." /&gt;</ph></target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>The number of milliseconds to wait, <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>(-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</source>
          <target state="translated">要等候的毫秒數，<ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>(-1) 表示永遠等候，零表示測試等候控制代碼的狀態並立即傳回。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> to observe.</source>
          <target state="translated">要觀察的 <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>Blocks the current thread until it can enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, using a 32-bit signed integer that specifies the timeout, while observing a <ph id="ph2">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</source>
          <target state="translated">封鎖目前的執行緒，直到這個執行緒可以進入 <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> 為止，並使用 32 位元帶正負號的整數來指定逾時，同時觀察 <ph id="ph2">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current thread successfully entered the <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果目前的執行緒成功進入 <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>If the timeout is set to -1 milliseconds, the method waits indefinitely.</source>
          <target state="translated">如果在逾時設定為-1 毫秒，方法將會無限期等候。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>If the timeout is set to zero milliseconds, the method doesn't block.</source>
          <target state="translated">如果在逾時設定為零毫秒，此方法不會封鎖。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>It tests the state of the wait handle and returns immediately.</source>
          <target state="translated">它會測試的狀態，等候控制代碼，並立即傳回。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>If a thread or task is able to enter the semaphore, it decrements the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property by one.</source>
          <target state="translated">如果能夠進入號誌，執行緒或工作它遞減<ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph>一個屬性。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>If <ph id="ph1">`cancellationToken`</ph> is cancelled, or if a thread or task is blocked when calling <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29&gt;</ph> and the timeout interval specified by <ph id="ph3">`millisecondsTimeout`</ph> expires:</source>
          <target state="translated">如果<ph id="ph1">`cancellationToken`</ph>已取消，或如果呼叫時遭到封鎖的執行緒或工作<ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29&gt;</ph>和所指定的逾時間隔<ph id="ph3">`millisecondsTimeout`</ph>到期：</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>The thread or task doesn't enter the semaphore.</source>
          <target state="translated">執行緒或工作不會進入號誌。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property isn't decremented.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph>屬性不可遞減。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>If <ph id="ph1">`cancellationToken`</ph> is cancelled, the method throws an   <ph id="ph2">&lt;xref:System.OperationCanceledException&gt;</ph> exception.</source>
          <target state="translated">如果<ph id="ph1">`cancellationToken`</ph>已取消，方法會擲回<ph id="ph2">&lt;xref:System.OperationCanceledException&gt;</ph>例外狀況。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> was canceled.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> 已取消。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> 是除了 -1 以外的負數，表示無限逾時，或是大於 <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> 的逾時。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> instance has been disposed, or the <ph id="ph2">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created <ph id="ph3">&lt;paramref name="cancellationToken" /&gt;</ph> has been disposed.</source>
          <target state="translated">已處置 <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> 執行個體，或是已處置建立 <ph id="ph3">&lt;paramref name="cancellationToken" /&gt;</ph> 的 <ph id="ph2">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents the number of milliseconds to wait, a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents -1 milliseconds to wait indefinitely, or a <ph id="ph3">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents 0 milliseconds to test the wait handle and return immediately.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>，代表要等候的毫秒數；<ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> 為 -1 毫秒表示永遠等候，<ph id="ph3">&lt;see cref="T:System.TimeSpan" /&gt;</ph> 為 0 毫秒表示測試等候控制代碼並立即傳回。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> to observe.</source>
          <target state="translated">要觀察的 <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>Blocks the current thread until it can enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, using a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that specifies the timeout, while observing a <ph id="ph3">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</source>
          <target state="translated">封鎖目前的執行緒，直到這個執行緒可以進入 <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> 為止，並使用 <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> 來指定逾時，同時觀察 <ph id="ph3">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current thread successfully entered the <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果目前的執行緒成功進入 <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>If the timeout is set to -1 milliseconds, the method waits indefinitely.</source>
          <target state="translated">如果在逾時設定為-1 毫秒，方法將會無限期等候。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>If the timeout is set to zero milliseconds, the method doesn't block.</source>
          <target state="translated">如果在逾時設定為零毫秒，此方法不會封鎖。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>It tests the state of the wait handle and returns immediately.</source>
          <target state="translated">它會測試的狀態，等候控制代碼，並立即傳回。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>If a thread or task is able to enter the semaphore, it decrements the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property by one.</source>
          <target state="translated">如果能夠進入號誌，執行緒或工作它遞減<ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph>一個屬性。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>If <ph id="ph1">`cancellationToken`</ph> is cancelled, or if a thread or task is blocked when calling <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Wait%28System.TimeSpan%2CSystem.Threading.CancellationToken%29&gt;</ph> and the timeout interval specified by <ph id="ph3">`millisecondsTimeout`</ph> expires:</source>
          <target state="translated">如果<ph id="ph1">`cancellationToken`</ph>已取消，或如果呼叫時遭到封鎖的執行緒或工作<ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Wait%28System.TimeSpan%2CSystem.Threading.CancellationToken%29&gt;</ph>和所指定的逾時間隔<ph id="ph3">`millisecondsTimeout`</ph>到期：</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>The thread or task doesn't enter the semaphore.</source>
          <target state="translated">執行緒或工作不會進入號誌。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property isn't decremented.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph>屬性不可遞減。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>If <ph id="ph1">`cancellationToken`</ph> is cancelled, the method throws an <ph id="ph2">&lt;xref:System.OperationCanceledException&gt;</ph> exception.</source>
          <target state="translated">如果<ph id="ph1">`cancellationToken`</ph>已取消，方法會擲回<ph id="ph2">&lt;xref:System.OperationCanceledException&gt;</ph>例外狀況。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> was canceled.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> 已取消。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> 是除了 -1 以外的負數，表示無限逾時，或是大於 <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> 的逾時。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>The semaphoreSlim instance has been disposed <ph id="ph1">&lt;paramref name="." /&gt;</ph><ph id="ph2">&lt;paramref name="-or-" /&gt;</ph></source>
          <target state="translated">semaphoreSlim 執行個體已經處置 <ph id="ph1">&lt;paramref name="." /&gt;</ph><ph id="ph2">&lt;paramref name="-or-" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated">已處置建立 <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> 的 <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="T:System.Threading.SemaphoreSlim">
          <source>Asynchronously waits to enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>.</source>
          <target state="translated">以非同步方式等候進入 <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync">
          <source>Asynchronously waits to enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>.</source>
          <target state="translated">以非同步方式等候進入 <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync">
          <source>A task that will complete when the semaphore has been entered.</source>
          <target state="translated">將會在號誌 (Semaphore) 輸入後完成的工作。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32)">
          <source>The number of milliseconds to wait, <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</source>
          <target state="translated">要等候的毫秒數，<ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (-1) 表示永遠等候，零表示測試等候控制代碼的狀態並立即傳回。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32)">
          <source>Asynchronously waits to enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, using a 32-bit signed integer to measure the time interval.</source>
          <target state="translated">以非同步方式等候進入 <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>，並使用 32 位元帶正負號的整數來測量時間間隔。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32)">
          <source>A task that will complete with a result of <ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current thread successfully entered the <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, otherwise with a result of <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果目前的執行緒成功進入 <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>，則工作會完成且結果為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則結果為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32)">
          <source>If the timeout is set to -1 milliseconds, the method waits indefinitely.</source>
          <target state="translated">如果在逾時設定為-1 毫秒，方法將會無限期等候。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32)">
          <source>If the timeout is set to zero milliseconds, the method doesn't block.</source>
          <target state="translated">如果在逾時設定為零毫秒，此方法不會封鎖。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32)">
          <source>It tests the state of the wait handle and returns immediately.</source>
          <target state="translated">它會測試的狀態，等候控制代碼，並立即傳回。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32)">
          <source>The current instance has already been disposed.</source>
          <target state="translated">目前的執行個體已經過處置。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> 是除了 -1 以外的負數，表示無限逾時，或是大於 <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> 的逾時。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> token to observe.</source>
          <target state="translated">要觀察的 <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> 語彙基元。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Threading.CancellationToken)">
          <source>Asynchronously waits to enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, while observing a <ph id="ph2">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</source>
          <target state="translated">以非同步方式等候進入 <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>，同時觀察 <ph id="ph2">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Threading.CancellationToken)">
          <source>A task that will complete when the semaphore has been entered.</source>
          <target state="translated">將會在號誌 (Semaphore) 輸入後完成的工作。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Threading.CancellationToken)">
          <source>The current instance has already been disposed.</source>
          <target state="translated">目前的執行個體已經過處置。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> was canceled.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> 已取消。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)">
          <source>A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents the number of milliseconds to wait, a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents -1 milliseconds to wait indefinitely, or a <ph id="ph3">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents 0 milliseconds to test the wait handle and return immediately.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>，代表要等候的毫秒數；<ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> 為 -1 毫秒表示永遠等候，<ph id="ph3">&lt;see cref="T:System.TimeSpan" /&gt;</ph> 為 0 毫秒表示測試等候控制代碼並立即傳回。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)">
          <source>Asynchronously waits to enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, using a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> to measure the time interval.</source>
          <target state="translated">以非同步方式等候進入 <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>，並使用 <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> 來測量時間間隔。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)">
          <source>A task that will complete with a result of <ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current thread successfully entered the <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, otherwise with a result of <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果目前的執行緒成功進入 <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>，則工作會完成且結果為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則結果為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)">
          <source>If the timeout is set to -1 milliseconds, the method waits indefinitely.</source>
          <target state="translated">如果在逾時設定為-1 毫秒，方法將會無限期等候。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)">
          <source>If the timeout is set to zero milliseconds, the method doesn't block.</source>
          <target state="translated">如果在逾時設定為零毫秒，此方法不會封鎖。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)">
          <source>It tests the state of the wait handle and returns immediately.</source>
          <target state="translated">它會測試的狀態，等候控制代碼，並立即傳回。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)">
          <source>The current instance has already been disposed.</source>
          <target state="translated">目前的執行個體已經過處置。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> 是除了 -1 以外的負數，表示無限逾時，或是大於 <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> 的逾時。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)">
          <source>The number of milliseconds to wait, <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</source>
          <target state="translated">要等候的毫秒數，<ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (-1) 表示永遠等候，零表示測試等候控制代碼的狀態並立即傳回。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> to observe.</source>
          <target state="translated">要觀察的 <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)">
          <source>Asynchronously waits to enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, using a 32-bit signed integer to measure the time interval, while observing a <ph id="ph2">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</source>
          <target state="translated">以非同步方式等候進入 <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>，並使用 32 位元帶正負號的整數來測量時間間隔，同時觀察 <ph id="ph2">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)">
          <source>A task that will complete with a result of <ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current thread successfully entered the <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, otherwise with a result of <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果目前的執行緒成功進入 <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>，則工作會完成且結果為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則結果為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)">
          <source>If the timeout is set to -1 milliseconds, the method waits indefinitely.</source>
          <target state="translated">如果在逾時設定為-1 毫秒，方法將會無限期等候。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)">
          <source>If the timeout is set to zero milliseconds, the method doesn't block.</source>
          <target state="translated">如果在逾時設定為零毫秒，此方法不會封鎖。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)">
          <source>It tests the state of the wait handle and returns immediately.</source>
          <target state="translated">它會測試的狀態，等候控制代碼，並立即傳回。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> is a number other than -1, which represents an infinite timeout -or- timeout is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> 是除了 -1 以外的數值，表示無限逾時，或是大於 <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> 的逾時。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)">
          <source>The current instance has already been disposed.</source>
          <target state="translated">目前的執行個體已經過處置。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> was canceled.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> 已取消。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)">
          <source>A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents the number of milliseconds to wait, a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents -1 milliseconds to wait indefinitely, or a <ph id="ph3">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents 0 milliseconds to test the wait handle and return immediately.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>，代表要等候的毫秒數；<ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> 為 -1 毫秒表示永遠等候，<ph id="ph3">&lt;see cref="T:System.TimeSpan" /&gt;</ph> 為 0 毫秒表示測試等候控制代碼並立即傳回。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> token to observe.</source>
          <target state="translated">要觀察的 <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> 語彙基元。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)">
          <source>Asynchronously waits to enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, using a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> to measure the time interval, while observing a <ph id="ph3">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</source>
          <target state="translated">以非同步方式等候進入 <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>，並使用 <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> 來測量時間間隔，同時觀察 <ph id="ph3">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)">
          <source>A task that will complete with a result of <ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current thread successfully entered the <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, otherwise with a result of <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果目前的執行緒成功進入 <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>，則工作會完成且結果為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則結果為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)">
          <source>If the timeout is set to -1 milliseconds, the method waits indefinitely.</source>
          <target state="translated">如果在逾時設定為-1 毫秒，方法將會無限期等候。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)">
          <source>If the timeout is set to zero milliseconds, the method doesn't block.</source>
          <target state="translated">如果在逾時設定為零毫秒，此方法不會封鎖。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)">
          <source>It tests the state of the wait handle and returns immediately.</source>
          <target state="translated">它會測試的狀態，等候控制代碼，並立即傳回。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> 是除了 -1 以外的負數，表示無限逾時，或是大於 <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> 的逾時。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> was canceled.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> 已取消。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>