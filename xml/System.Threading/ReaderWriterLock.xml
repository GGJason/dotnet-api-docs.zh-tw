<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ReaderWriterLock.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5fc1a0c88765040869d8ad919aeb575e304c71bde.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fc1a0c88765040869d8ad919aeb575e304c71bde</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.ReaderWriterLock">
          <source>Defines a lock that supports single writers and multiple readers.</source>
          <target state="translated">定義鎖定，它支援單一寫入器和多重讀取器。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>The <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> has two reader-writer locks, <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLockSlim&gt;</ph> and <ph id="ph3">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> 擁有 <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLockSlim&gt;</ph> 和 <ph id="ph3">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> 這兩個 Reader-Writer 鎖定。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLockSlim&gt;</ph> is recommended for all new development.</source>
          <target state="translated">建議針對所有新的開發使用 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLockSlim&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLockSlim&gt;</ph> is similar to <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>, but it has simplified rules for recursion and for upgrading and downgrading lock state.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLockSlim&gt;</ph> 類似於 <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>，但是它有遞迴以及升級和降級鎖定狀態的簡化規則。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLockSlim&gt;</ph> avoids many cases of potential deadlock.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLockSlim&gt;</ph> 可避免可能發生死結的許多情況。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>In addition, the performance of <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLockSlim&gt;</ph> is significantly better than <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>.</source>
          <target state="translated">此外，<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLockSlim&gt;</ph> 的效能明顯優於 <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> is used to synchronize access to a resource.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> 用來同步處理資源的存取權。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>At any given time, it allows either concurrent read access for multiple threads, or write access for a single thread.</source>
          <target state="translated">在任何時候，它可讓多重執行緒的並行讀取權限，或是單一執行緒的寫入權限。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>In a situation where a resource is changed infrequently, a <ph id="ph1">`ReaderWriterLock`</ph> provides better throughput than a simple one-at-a-time lock, such as <ph id="ph2">&lt;xref:System.Threading.Monitor&gt;</ph>.</source>
          <target state="translated">資源不常變更的情況下<ph id="ph1">`ReaderWriterLock`</ph>提供更佳的輸送量，比簡單的其中一個-一次鎖定，例如<ph id="ph2">&lt;xref:System.Threading.Monitor&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source><ph id="ph1">`ReaderWriterLock`</ph> works best where most accesses are reads, while writes are infrequent and of short duration.</source>
          <target state="translated"><ph id="ph1">`ReaderWriterLock`</ph> 其中大部分的存取，則讀取、 寫入不頻繁和短時間內，效果最好。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>Multiple readers alternate with single writers, so that neither readers nor writers are blocked for long periods.</source>
          <target state="translated">多個讀取器的替代與單一寫入器，因此會讀取器或寫入器會封鎖長時間。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>Holding reader locks or writer locks for long periods will starve other threads.</source>
          <target state="translated">長期保留讀取鎖定或寫入器鎖定會影響其他執行緒。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>For best performance, consider restructuring your application to minimize the duration of writes.</source>
          <target state="translated">為了達到最佳效能，請考慮重建您的應用程式寫入的持續時間降至最低。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>A thread can hold a reader lock or a writer lock, but not both at the same time.</source>
          <target state="translated">執行緒可以保留讀取鎖定或寫入器鎖定，但不可同時在相同的時間。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>Instead of releasing a reader lock in order to acquire the writer lock, you can use <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A&gt;</ph>.</source>
          <target state="translated">而不是為了取得寫入器鎖定釋放讀取器的鎖定，您可以使用<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>Recursive lock requests increase the lock count on a lock.</source>
          <target state="translated">遞迴的鎖定要求增加上鎖定的鎖定計數。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>Readers and writers are queued separately.</source>
          <target state="translated">是個別佇列讀取器和寫入器。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>When a thread releases the writer lock, all threads waiting in the reader queue at that instant are granted reader locks; when all of those reader locks have been released, the next thread waiting in the writer queue, if any, is granted the writer lock, and so on.</source>
          <target state="translated">當執行緒釋放寫入器的鎖定時，那時讀取器佇列中等待的所有執行緒授都與讀取器鎖定。當這些讀取器鎖定的所有已發行下, 一個執行緒等候寫入器中排入佇列，如果任何，授與寫入器的鎖定，等等。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>In other words, <ph id="ph1">`ReaderWriterLock`</ph> alternates between a collection of readers, and one writer.</source>
          <target state="translated">換句話說，<ph id="ph1">`ReaderWriterLock`</ph>交替讀取器，集合和一個寫入器。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>While a thread in the writer queue is waiting for active reader locks to be released, threads requesting new reader locks accumulate in the reader queue.</source>
          <target state="translated">當寫入器佇列中的執行緒正在等候讀取器鎖定釋出時，要求新的讀取器鎖定的執行緒會累積讀取器佇列中。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>Their requests are not granted, even though they could share concurrent access with existing reader-lock holders; this helps protect writers against indefinite blockage by readers.</source>
          <target state="translated">要求未獲授予，即使它們無法與現有的讀取器鎖定持有者; 共用的並行存取這有助於保護針對讀取者無限期發生封鎖情形等的寫入器。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>Most methods for acquiring locks on a <ph id="ph1">`ReaderWriterLock`</ph> accept time-out values.</source>
          <target state="translated">大部分的方法上取得鎖定<ph id="ph1">`ReaderWriterLock`</ph>接受逾時值。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>Use time-outs to avoid deadlocks in your application.</source>
          <target state="translated">若要避免死結，應用程式中的使用逾時。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>For example, a thread might acquire the writer lock on one resource and then request a reader lock on a second resource; in the meantime, another thread might acquire the writer lock on the second resource, and request a reader lock on the first.</source>
          <target state="translated">比方說，執行緒可能會取得一個資源寫入器鎖定，而且然後要求第二個資源; 讀取器鎖定在此同時，另一個執行緒可能取得寫入器鎖定，第二個資源，並要求在第一個讀取器的鎖定。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>Unless time-outs are used, the threads deadlock.</source>
          <target state="translated">除非使用逾時，執行緒會鎖死。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>If the time-out interval expires and the lock request has not been granted, the method returns control to the calling thread by throwing an <ph id="ph1">&lt;xref:System.ApplicationException&gt;</ph>.</source>
          <target state="translated">如果逾時間隔到期且未被授與鎖定要求，方法會傳回控制項至呼叫的執行緒所擲回<ph id="ph1">&lt;xref:System.ApplicationException&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>A thread can catch this exception and determine what action to take next.</source>
          <target state="translated">執行緒可以捕捉此例外狀況，並判斷要採取的後續動作。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>Time-outs are expressed in milliseconds.</source>
          <target state="translated">逾時值被以毫秒為單位。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>If you use a <ph id="ph1">&lt;xref:System.TimeSpan?displayProperty=nameWithType&gt;</ph> to specify the time-out, the value used is the total number of whole milliseconds represented by the <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</source>
          <target state="translated">如果您使用<ph id="ph1">&lt;xref:System.TimeSpan?displayProperty=nameWithType&gt;</ph>指定逾時，所使用的值是由表示整數毫秒總數<ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>The following table shows the valid time-out values in milliseconds.</source>
          <target state="translated">下表顯示有效的逾時值以毫秒為單位。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>Value</source>
          <target state="translated">值</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>Description</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>-1</source>
          <target state="translated">-1</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>The thread waits until the lock is acquired, regardless of how long it takes.</source>
          <target state="translated">執行緒等候，直到鎖定，則不論花費的時間。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>For methods that specify integer time-outs, the constant <ph id="ph1">&lt;xref:System.Threading.Timeout.Infinite&gt;</ph> can be used.</source>
          <target state="translated">指定的整數逾時、 常數的方法<ph id="ph1">&lt;xref:System.Threading.Timeout.Infinite&gt;</ph>可用。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>0</source>
          <target state="translated">0</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>The thread does not wait to acquire the lock.</source>
          <target state="translated">執行緒不會等候取得鎖定。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>If the lock cannot be acquired immediately, the method returns.</source>
          <target state="translated">如果無法立即取得鎖定，則方法傳回。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>&gt;0</source>
          <target state="translated">&gt;0</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>The number of milliseconds to wait.</source>
          <target state="translated">要等候的毫秒數。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>With the exception of -1, negative time-out values are not allowed.</source>
          <target state="translated">-1，除了不允許負值。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>If you specify a negative integer other than -1, a time-out value of zero is used instead.</source>
          <target state="translated">如果您指定-1 以外的負數的整數，改為使用零的逾時值。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>(That is, the method returns without waiting, if the lock cannot be acquired immediately.) If you specify a <ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> that represents a negative number of milliseconds other than -1, <ph id="ph2">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> is thrown.</source>
          <target state="translated">（亦即，方法會傳回而不要等候，如果無法立即取得鎖定。）如果您指定<ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph>表示毫秒-1，以外的負數<ph id="ph2">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>就會擲回。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>The following example demonstrates how to use a <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> to protect a shared resource, an integer value named <ph id="ph2">`resource`</ph>, that is read concurrently and written exclusively by multiple threads.</source>
          <target state="translated">下列範例示範如何使用<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>若要保護的共用的資源，整數值，名為<ph id="ph2">`resource`</ph>，也就是同時讀取和寫入專屬的多個執行緒。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>Note that the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> is declared at the class level so that it is visible to all threads.</source>
          <target state="translated">請注意，<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>宣告類別層級，因此它會顯示所有執行緒。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>This type is thread safe.</source>
          <target state="translated">此型別具備執行緒安全。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.ReaderWriterLock" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Threading.ReaderWriterLock" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.#ctor">
          <source>The following code example demonstrates how to create a new instance of the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">下列程式碼範例示範如何建立 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.#ctor">
          <source>This code is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">這段程式碼是針對所提供之較大範例的一部分<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>類別。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="T:System.Threading.ReaderWriterLock">
          <source>Acquires a reader lock.</source>
          <target state="translated">取得讀取器的鎖定。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>The time-out in milliseconds.</source>
          <target state="translated">逾時以毫秒為單位。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>Acquires a reader lock, using an <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> value for the time-out.</source>
          <target state="translated">使用逾時值 <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 取得讀取器的鎖定。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireReaderLock%2A&gt;</ph> blocks if a different thread has the writer lock, or if at least one thread is waiting for the writer lock.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireReaderLock%2A&gt;</ph> 如果在不同的執行緒寫入器的鎖定，或至少一個執行緒正在等候寫入器的鎖定封鎖。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>If the current thread already has the writer lock, no reader lock is acquired.</source>
          <target state="translated">如果目前執行緒已寫入器的鎖定，沒有讀取器鎖定。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>Instead, the lock count on the writer lock is incremented.</source>
          <target state="translated">相反地，寫入器的鎖定上的鎖定計數會遞增。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>This prevents a thread from blocking on its own writer lock.</source>
          <target state="translated">這可防止在其本身的寫入器鎖定上封鎖執行緒。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>The result is exactly the same as calling <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A&gt;</ph>, and an additional call to <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A&gt;</ph> is required when releasing the writer lock.</source>
          <target state="translated">結果是完全呼叫相同<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A&gt;</ph>，以及額外的呼叫<ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A&gt;</ph>釋放寫入器鎖定時，就需要。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source><ph id="ph1">`AcquireReaderLock`</ph> supports recursive reader-lock requests.</source>
          <target state="translated"><ph id="ph1">`AcquireReaderLock`</ph> 支援遞迴的讀取器鎖定要求。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>That is, a thread can call AcquireReaderLock multiple times, which increments the lock count each time.</source>
          <target state="translated">也就是說，執行緒可以呼叫 AcquireReaderLock 多次，這在每次增加的鎖定計數。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>You must call <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A&gt;</ph> once for each time you call <ph id="ph2">`AcquireReaderLock`</ph>.</source>
          <target state="translated">您必須呼叫<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A&gt;</ph>一次針對每次呼叫<ph id="ph2">`AcquireReaderLock`</ph>。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>Alternatively, you can call <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph> to reduce the lock count to zero immediately.</source>
          <target state="translated">或者，您可以呼叫<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph>減少鎖定計數為零立即。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>Recursive lock requests are always granted immediately, without placing the requesting thread in the reader queue.</source>
          <target state="translated">遞迴的鎖定要求會一律立即授與，而不會讓讀取器佇列中要求的執行緒。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>Use recursive locks with caution, to avoid blocking writer-lock requests for long periods.</source>
          <target state="translated">遞迴鎖定謹慎使用，以避免長時間封鎖寫入器鎖定要求。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>For valid time-out values, see <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>.</source>
          <target state="translated">有效的逾時值，請參閱<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>The following code example shows how to acquire and release a reader lock, and how to handle the exception thrown when a request times out.</source>
          <target state="translated">下列程式碼範例示範如何取得及釋放讀取器的鎖定，以及如何處理時要求逾時擲回的例外狀況。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>This code is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">這段程式碼是針對所提供之較大範例的一部分<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>類別。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> expires before the lock request is granted.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> 在授與鎖定要求前過期。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source>A <ph id="ph1">&lt;see langword="TimeSpan" /&gt;</ph> specifying the time-out period.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="TimeSpan" /&gt;</ph>，指定逾時期間。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source>Acquires a reader lock, using a <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> value for the time-out.</source>
          <target state="translated">使用逾時值 <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> 取得讀取器的鎖定。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireReaderLock%2A&gt;</ph> blocks if a different thread has the writer lock, or if at least one thread is waiting for the writer lock.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireReaderLock%2A&gt;</ph> 如果在不同的執行緒寫入器的鎖定，或至少一個執行緒正在等候寫入器的鎖定封鎖。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source>If the current thread already has the writer lock, no reader lock is acquired.</source>
          <target state="translated">如果目前執行緒已寫入器的鎖定，沒有讀取器鎖定。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source>Instead, the lock count on the writer lock is incremented.</source>
          <target state="translated">相反地，寫入器的鎖定上的鎖定計數會遞增。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source>This prevents a thread from blocking on its own writer lock.</source>
          <target state="translated">這可防止在其本身的寫入器鎖定上封鎖執行緒。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source>The result is exactly the same as calling <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A&gt;</ph>, and an additional call to <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A&gt;</ph> is required when releasing the writer lock.</source>
          <target state="translated">結果是完全呼叫相同<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A&gt;</ph>，以及額外的呼叫<ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A&gt;</ph>釋放寫入器鎖定時，就需要。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source><ph id="ph1">`AcquireReaderLock`</ph> supports recursive reader-lock requests.</source>
          <target state="translated"><ph id="ph1">`AcquireReaderLock`</ph> 支援遞迴的讀取器鎖定要求。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source>That is, a thread can call AcquireReaderLock multiple times, which increments the lock count each time.</source>
          <target state="translated">也就是說，執行緒可以呼叫 AcquireReaderLock 多次，這在每次增加的鎖定計數。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source>You must call <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A&gt;</ph> once for each time you call <ph id="ph2">`AcquireReaderLock`</ph>.</source>
          <target state="translated">您必須呼叫<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A&gt;</ph>一次針對每次呼叫<ph id="ph2">`AcquireReaderLock`</ph>。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source>Alternatively, you can call <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph> to reduce the lock count to zero immediately.</source>
          <target state="translated">或者，您可以呼叫<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph>減少鎖定計數為零立即。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source>Recursive lock requests are always granted immediately, without placing the requesting thread in the reader queue.</source>
          <target state="translated">遞迴的鎖定要求會一律立即授與，而不會讓讀取器佇列中要求的執行緒。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source>Use recursive locks with caution, to avoid blocking writer-lock requests for long periods.</source>
          <target state="translated">遞迴鎖定謹慎使用，以避免長時間封鎖寫入器鎖定要求。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source>For valid time-out values, see <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>.</source>
          <target state="translated">有效的逾時值，請參閱<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> expires before the lock request is granted.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> 在授與鎖定要求前過期。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> specifies a negative value other than -1 milliseconds.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> 可以指定 -1 毫秒以外的負值。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="T:System.Threading.ReaderWriterLock">
          <source>Acquires the writer lock.</source>
          <target state="translated">取得寫入器的鎖定。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>The time-out in milliseconds.</source>
          <target state="translated">逾時以毫秒為單位。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>Acquires the writer lock, using an <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> value for the time-out.</source>
          <target state="translated">使用逾時值 <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 取得寫入器的鎖定。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>This method blocks if another thread has a reader lock or writer lock.</source>
          <target state="translated">這個方法會封鎖，如果另一個執行緒讀取器的鎖定或寫入器鎖定。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>For a description of the way the writer lock alternates with multiple concurrent reader locks, see the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">如需寫入器的鎖定會與多個並行讀取器鎖定交替出現的方式的說明，請參閱<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>類別。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>A thread that already has a reader lock can acquire the writer lock in one of two ways: by releasing the reader lock before calling <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A&gt;</ph>, or by calling <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph>.</source>
          <target state="translated">已讀取器的鎖定的執行緒可以取得寫入器鎖定在兩種方式之一： 釋放讀取鎖定，然後再呼叫<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A&gt;</ph>，或藉由呼叫<ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>If a thread calls <ph id="ph1">`AcquireWriterLock`</ph> while it still has a reader lock, it will block on its own reader lock; if an infinite time-out is specified, the thread will deadlock.</source>
          <target state="translated">如果呼叫執行緒<ph id="ph1">`AcquireWriterLock`</ph>時仍有讀取器的鎖定，它會封鎖讀取器鎖定上; 如果指定無限逾時，就會鎖死的執行緒。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>To avoid such deadlocks, use <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A&gt;</ph> to determine whether the current thread already has a reader lock.</source>
          <target state="translated">若要避免這類死結，請使用<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A&gt;</ph>來判斷目前的執行緒是否已有讀取器的鎖定。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source><ph id="ph1">`AcquireWriterLock`</ph> supports recursive writer-lock requests.</source>
          <target state="translated"><ph id="ph1">`AcquireWriterLock`</ph> 支援遞迴的寫入器鎖定要求。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>That is, a thread can call <ph id="ph1">`AcquireWriterLock`</ph> multiple times, which increments the lock count each time.</source>
          <target state="translated">也就是說，執行緒可以呼叫<ph id="ph1">`AcquireWriterLock`</ph>許多次，其中的鎖定計數遞增每一次。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>You must call <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A&gt;</ph> once for each time you call <ph id="ph2">`AcquireWriterLock`</ph>.</source>
          <target state="translated">您必須呼叫<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A&gt;</ph>一次針對每次呼叫<ph id="ph2">`AcquireWriterLock`</ph>。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>Alternatively, you can call <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph> to reduce the lock count to zero immediately.</source>
          <target state="translated">或者，您可以呼叫<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph>減少鎖定計數為零立即。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>Recursive lock requests are always granted immediately, without placing the requesting thread in the writer queue.</source>
          <target state="translated">遞迴的鎖定要求會一律立即授與，而不會讓寫入器佇列中要求的執行緒。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>For valid time-out values, see <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>.</source>
          <target state="translated">有效的逾時值，請參閱<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>The following code example shows how to acquire and release a writer lock, and how to handle the exception thrown when a request times out.</source>
          <target state="translated">下列程式碼範例示範如何取得並發行寫入器鎖定，以及如何處理時要求逾時擲回的例外狀況。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>This code is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">這段程式碼是針對所提供之較大範例的一部分<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>類別。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> expires before the lock request is granted.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> 在授與鎖定要求前過期。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;see langword="TimeSpan" /&gt;</ph> specifying the time-out period.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="TimeSpan" /&gt;</ph>，指定逾時期間。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source>Acquires the writer lock, using a <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> value for the time-out.</source>
          <target state="translated">使用逾時值 <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> 取得寫入器的鎖定。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source>This method blocks if another thread has a reader lock or writer lock.</source>
          <target state="translated">這個方法會封鎖，如果另一個執行緒讀取器的鎖定或寫入器鎖定。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source>For a description of the way the writer lock alternates with multiple concurrent reader locks, see the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">如需寫入器的鎖定會與多個並行讀取器鎖定交替出現的方式的說明，請參閱<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>類別。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source>A thread that already has a reader lock can acquire the writer lock in one of two ways: by releasing the reader lock before calling <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A&gt;</ph>, or by calling <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph>.</source>
          <target state="translated">已讀取器的鎖定的執行緒可以取得寫入器鎖定在兩種方式之一： 釋放讀取鎖定，然後再呼叫<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A&gt;</ph>，或藉由呼叫<ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source>If a thread calls <ph id="ph1">`AcquireWriterLock`</ph> while it still has a reader lock, it will block on its own reader lock; if an infinite time-out is specified, the thread will deadlock.</source>
          <target state="translated">如果呼叫執行緒<ph id="ph1">`AcquireWriterLock`</ph>時仍有讀取器的鎖定，它會封鎖讀取器鎖定上; 如果指定無限逾時，就會鎖死的執行緒。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source>To avoid such deadlocks, use <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A&gt;</ph> to determine whether the current thread already has a reader lock.</source>
          <target state="translated">若要避免這類死結，請使用<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A&gt;</ph>來判斷目前的執行緒是否已有讀取器的鎖定。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source><ph id="ph1">`AcquireWriterLock`</ph> supports recursive writer-lock requests.</source>
          <target state="translated"><ph id="ph1">`AcquireWriterLock`</ph> 支援遞迴的寫入器鎖定要求。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source>That is, a thread can call <ph id="ph1">`AcquireWriterLock`</ph> multiple times, which increments the lock count each time.</source>
          <target state="translated">也就是說，執行緒可以呼叫<ph id="ph1">`AcquireWriterLock`</ph>許多次，其中的鎖定計數遞增每一次。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source>You must call <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A&gt;</ph> once for each time you call <ph id="ph2">`AcquireWriterLock`</ph>.</source>
          <target state="translated">您必須呼叫<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A&gt;</ph>一次針對每次呼叫<ph id="ph2">`AcquireWriterLock`</ph>。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source>Alternatively, you can call <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph> to reduce the lock count to zero immediately.</source>
          <target state="translated">或者，您可以呼叫<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph>減少鎖定計數為零立即。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source>Recursive lock requests are always granted immediately, without placing the requesting thread in the writer queue.</source>
          <target state="translated">遞迴的鎖定要求會一律立即授與，而不會讓寫入器佇列中要求的執行緒。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source>For valid time-out values, see <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>.</source>
          <target state="translated">有效的逾時值，請參閱<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> expires before the lock request is granted.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> 在授與鎖定要求前過期。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> specifies a negative value other than -1 milliseconds.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> 可以指定 -1 毫秒以外的負值。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AnyWritersSince(System.Int32)">
          <source>The sequence number.</source>
          <target state="translated">序號。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AnyWritersSince(System.Int32)">
          <source>Indicates whether the writer lock has been granted to any thread since the sequence number was obtained.</source>
          <target state="translated">指示取得序號之後有無將寫入器鎖定授與至任何執行緒。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AnyWritersSince(System.Int32)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the writer lock has been granted to any thread since the sequence number was obtained; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果取得序號之後有將寫入器鎖定授與至任何執行緒，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AnyWritersSince(System.Int32)">
          <source>You can use <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A&gt;</ph> and <ph id="ph2">`AnyWritersSince`</ph> to improve application performance.</source>
          <target state="translated">您可以使用<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A&gt;</ph>和<ph id="ph2">`AnyWritersSince`</ph>改善應用程式效能。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AnyWritersSince(System.Int32)">
          <source>For example, a thread might cache the information it obtains while holding a reader lock.</source>
          <target state="translated">例如，執行緒可能會快取保留讀取鎖定時取得的資訊。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AnyWritersSince(System.Int32)">
          <source>After releasing and later reacquiring the lock, the thread can use <ph id="ph1">`AnyWritersSince`</ph> to determine whether other threads have written to the resource in the interim; if not, the cached information can be used.</source>
          <target state="translated">釋出和更新版本重新取得鎖定之後, 可以使用執行緒<ph id="ph1">`AnyWritersSince`</ph>來判斷是否其他執行緒的資源寫入暫時; 如果沒有，可以使用快取的資訊。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AnyWritersSince(System.Int32)">
          <source>This technique is useful where reading the information protected by the lock is expensive; for example, running a database query.</source>
          <target state="translated">這個技術非常有用是高度耗費資源; 讀取鎖定所保護的資訊例如，執行資料庫查詢。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AnyWritersSince(System.Int32)">
          <source>The caller must be holding a reader lock or a writer lock in order for the sequence number to be useful.</source>
          <target state="translated">呼叫端必須寫入器鎖定或讀取器鎖定保留順序，序號才能發揮作用。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AnyWritersSince(System.Int32)">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A&gt;</ph> property to determine whether another thread acquired the writer lock on the protected resource since the current thread last held the writer lock.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A&gt;</ph>方法和<ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A&gt;</ph>屬性來判斷另一個執行緒是否已受保護的資源寫入器鎖定，因為目前的執行緒上一次保留寫入器的鎖定。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AnyWritersSince(System.Int32)">
          <source>This code is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">這段程式碼是針對所提供之較大範例的一部分<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>類別。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.LockCookie" /&gt;</ph> returned by <ph id="ph2">&lt;see cref="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.LockCookie" /&gt;</ph> 所傳回的 <ph id="ph2">&lt;see cref="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)">
          <source>Restores the lock status of the thread to what it was before <ph id="ph1">&lt;see cref="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" /&gt;</ph> was called.</source>
          <target state="translated">將執行緒的鎖定狀態還原到呼叫 <ph id="ph1">&lt;see cref="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" /&gt;</ph> 之前的狀態。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)">
          <source><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A&gt;</ph> releases the writer lock, regardless of the recursive lock count, and restores the reader lock that was held by the thread before upgrading to the writer lock.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A&gt;</ph> 釋放寫入器的鎖定，不論遞迴鎖定計數，並還原已由執行緒持有然後再升級至寫入器鎖定的讀取器鎖定。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)">
          <source>The lock count on the reader lock is restored.</source>
          <target state="translated">在讀取器鎖定的鎖定計數就會還原。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)">
          <source><ph id="ph1">`DowngradeFromWriterLock`</ph> accepts a <ph id="ph2">&lt;xref:System.Threading.LockCookie&gt;</ph> obtained by calling <ph id="ph3">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`DowngradeFromWriterLock`</ph> 接受<ph id="ph2">&lt;xref:System.Threading.LockCookie&gt;</ph>藉由呼叫取得<ph id="ph3">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)">
          <source>Do not use a <ph id="ph1">`LockCookie`</ph> returned by <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph>.</source>
          <target state="translated">請勿使用<ph id="ph1">`LockCookie`</ph>傳回<ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)">
          <source>A thread does not block when downgrading from the writer lock, even if other threads are waiting for the writer lock, because all reader-lock requests are granted when the writer lock is released.</source>
          <target state="translated">執行緒不會封鎖寫入器的鎖定，從降級時，即使其他執行緒正在等候寫入器的鎖定，因為當使用者放開寫入器鎖定授與所有的讀取器鎖定要求。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)">
          <source>The following code example shows how to request a reader lock, upgrade the reader lock to a writer lock, and downgrade to a reader lock again.</source>
          <target state="translated">下列程式碼範例示範如何要求讀取器的鎖定、 將讀取器鎖定升級至寫入器鎖定，以及一次降級為讀取器的鎖定。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)">
          <source>This code is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">這段程式碼是針對所提供之較大範例的一部分<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>類別。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)">
          <source>The thread does not have the writer lock.</source>
          <target state="translated">執行緒沒有寫入器鎖定。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)">
          <source>The address of <ph id="ph1">&lt;paramref name="lockCookie" /&gt;</ph> is a null pointer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="lockCookie" /&gt;</ph> 的位址為 null 指標。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.Finalize">
          <source>Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <ph id="ph1">&lt;see cref="T:System.Threading.ReaderWriterLock" /&gt;</ph> object.</source>
          <target state="translated">確認釋出資源，並在記憶體回收行程再利用 <ph id="ph1">&lt;see cref="T:System.Threading.ReaderWriterLock" /&gt;</ph> 物件時執行其他清除作業。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.Finalize">
          <source>The garbage collector calls <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.Finalize%2A&gt;</ph> when the current <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> object is ready to be finalized.</source>
          <target state="translated">記憶體回收行程呼叫<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.Finalize%2A&gt;</ph>時目前<ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>物件已經準備完成。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="P:System.Threading.ReaderWriterLock.IsReaderLockHeld">
          <source>Gets a value indicating whether the current thread holds a reader lock.</source>
          <target state="translated">取得值，指出目前的執行緒是否掌握讀取器的鎖定。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.IsReaderLockHeld">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current thread holds a reader lock; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果目前的執行緒掌握讀取器的鎖定，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.IsReaderLockHeld">
          <source>The following code example demonstrates how to use <ph id="ph1">`IsReaderLockHeld`</ph> to avoid deadlocks.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">`IsReaderLockHeld`</ph>若要避免死結。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="P:System.Threading.ReaderWriterLock.IsWriterLockHeld">
          <source>Gets a value indicating whether the current thread holds the writer lock.</source>
          <target state="translated">取得值，指出目前的執行緒是否掌握寫入器的鎖定。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.IsWriterLockHeld">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current thread holds the writer lock; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果目前的執行緒掌握寫入器的鎖定，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.IsWriterLockHeld">
          <source>The following code example demonstrates that when an attempt is made to acquire a reader lock on a thread that has a writer lock, <ph id="ph1">`ReaderWriterLock`</ph> does not grant the reader lock but instead increments the lock count on the writer lock.</source>
          <target state="translated">下列程式碼範例示範當嘗試取得具有寫入器鎖定，在執行緒上的讀取器鎖定<ph id="ph1">`ReaderWriterLock`</ph>不授與讀取器鎖定，但改為遞增寫入器的鎖定上的鎖定計數。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.ReleaseLock">
          <source>Releases the lock, regardless of the number of times the thread acquired the lock.</source>
          <target state="translated">無論執行緒取得鎖定的次數為多少，都會釋放鎖定。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.ReleaseLock">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.LockCookie" /&gt;</ph> value representing the released lock.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.LockCookie" /&gt;</ph> 值，代表釋放的鎖定。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseLock">
          <source><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph> releases the reader lock or writer lock, regardless of the recursive lock count.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph> 釋放讀取器鎖定或寫入器鎖定，不論遞迴鎖定計數。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseLock">
          <source>To restore the state of the lock, including the lock count, pass the <ph id="ph1">&lt;xref:System.Threading.LockCookie&gt;</ph> to <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.RestoreLock%2A&gt;</ph>.</source>
          <target state="translated">若要還原狀態的鎖定，包括的鎖定計數，將傳遞<ph id="ph1">&lt;xref:System.Threading.LockCookie&gt;</ph>至<ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.RestoreLock%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseLock">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph> method to release the lock, regardless of how many times it has been acquired by the thread, and how to restore the state of the lock later.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph>方法，以釋出鎖定，不論多少次它已經取得的執行緒，以及如何還原的更新版本的鎖定狀態。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseLock">
          <source>This code is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">這段程式碼是針對所提供之較大範例的一部分<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>類別。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.ReleaseReaderLock">
          <source>Decrements the lock count.</source>
          <target state="translated">減量鎖定計數。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseReaderLock">
          <source><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A&gt;</ph> decrements the lock count.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A&gt;</ph> 減量鎖定計數。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseReaderLock">
          <source>When the count reaches zero, the lock is released.</source>
          <target state="translated">當計數到達零時，會釋放鎖定。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseReaderLock">
          <source>If a thread has the writer lock, calling <ph id="ph1">`ReleaseReaderLock`</ph> has the same effect as calling <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A&gt;</ph>.</source>
          <target state="translated">如果執行緒有將寫入器鎖定，則呼叫<ph id="ph1">`ReleaseReaderLock`</ph>具有相同的效果與呼叫<ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseReaderLock">
          <source>If a thread has no locks, calling <ph id="ph1">`ReleaseReaderLock`</ph> throws an <ph id="ph2">&lt;xref:System.ApplicationException&gt;</ph>.</source>
          <target state="translated">如果執行緒不有任何鎖定，則呼叫<ph id="ph1">`ReleaseReaderLock`</ph>會擲回<ph id="ph2">&lt;xref:System.ApplicationException&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseReaderLock">
          <source>The following code example shows how to acquire and release a reader lock, and how to handle the exception thrown when a request times out.</source>
          <target state="translated">下列程式碼範例示範如何取得及釋放讀取器的鎖定，以及如何處理時要求逾時擲回的例外狀況。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseReaderLock">
          <source>This code is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">這段程式碼是針對所提供之較大範例的一部分<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>類別。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.ReleaseReaderLock">
          <source>The thread does not have any reader or writer locks.</source>
          <target state="translated">執行緒沒有任何讀取器或寫入器鎖定。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.ReleaseWriterLock">
          <source>Decrements the lock count on the writer lock.</source>
          <target state="translated">減量寫入器鎖定上的鎖定計數。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseWriterLock">
          <source><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A&gt;</ph> decrements the writer lock count.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A&gt;</ph> 減量寫入器的鎖定計數。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseWriterLock">
          <source>When the count reaches zero, the writer lock is released.</source>
          <target state="translated">當計數到達零時，就會寫入器鎖定釋放。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseWriterLock">
          <source>If a thread has a reader lock, or no locks, calling <ph id="ph1">`ReleaseWriterLock`</ph> throws an <ph id="ph2">&lt;xref:System.ApplicationException&gt;</ph>.</source>
          <target state="translated">如果執行緒有讀取器的鎖定或沒有鎖定，則呼叫<ph id="ph1">`ReleaseWriterLock`</ph>會擲回<ph id="ph2">&lt;xref:System.ApplicationException&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseWriterLock">
          <source>The following code example shows how to acquire and release a writer lock, and how to handle the exception thrown when a request times out.</source>
          <target state="translated">下列程式碼範例示範如何取得並發行寫入器鎖定，以及如何處理時要求逾時擲回的例外狀況。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseWriterLock">
          <source>This code is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">這段程式碼是針對所提供之較大範例的一部分<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>類別。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.ReleaseWriterLock">
          <source>The thread does not have the writer lock.</source>
          <target state="translated">執行緒沒有寫入器鎖定。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.LockCookie" /&gt;</ph> returned by <ph id="ph2">&lt;see cref="M:System.Threading.ReaderWriterLock.ReleaseLock" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.LockCookie" /&gt;</ph> 所傳回的 <ph id="ph2">&lt;see cref="M:System.Threading.ReaderWriterLock.ReleaseLock" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)">
          <source>Restores the lock status of the thread to what it was before calling <ph id="ph1">&lt;see cref="M:System.Threading.ReaderWriterLock.ReleaseLock" /&gt;</ph>.</source>
          <target state="translated">將執行緒的鎖定狀態還原到呼叫 <ph id="ph1">&lt;see cref="M:System.Threading.ReaderWriterLock.ReleaseLock" /&gt;</ph> 之前的狀態。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)">
          <source>The state restored by <ph id="ph1">`RestoreLock`</ph> includes the recursive lock count.</source>
          <target state="translated">還原狀態<ph id="ph1">`RestoreLock`</ph>包含遞迴鎖定計數。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)">
          <source>A thread blocks if it tries to restore a reader lock after another thread has acquired the writer lock, or if it tries to restore the writer lock after another thread has acquired a reader lock or writer lock.</source>
          <target state="translated">如果它嘗試還原另一個執行緒取得寫入器鎖定之後，或如果它嘗試還原另一個執行緒取得讀取器鎖定或寫入器鎖定之後的寫入器鎖定的讀取器的鎖定的執行緒封鎖。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)">
          <source>Because <ph id="ph1">`RestoreLock`</ph> does not accept a time-out, you should take care to avoid possible deadlocks.</source>
          <target state="translated">因為<ph id="ph1">`RestoreLock`</ph>不接受逾時，您應謹慎避免可能的死結。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)">
          <source>Before calling <ph id="ph1">`RestoreLock`</ph>, make sure you have released all locks acquired since the call to <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph>.</source>
          <target state="translated">然後再呼叫<ph id="ph1">`RestoreLock`</ph>，請確定在您釋放所有的呼叫取得的鎖定<ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)">
          <source>For example, a thread deadlocks if it acquires a reader lock, and then attempts to restore an earlier writer lock.</source>
          <target state="translated">例如，執行緒死結若取得讀取器的鎖定，然後再嘗試還原較早的寫入器鎖定。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)">
          <source>Use <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.IsWriterLockHeld%2A&gt;</ph> to detect such additional locks.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.IsWriterLockHeld%2A&gt;</ph>偵測這類額外的鎖定。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)">
          <source>Do not use a <ph id="ph1">&lt;xref:System.Threading.LockCookie&gt;</ph> returned from <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph>.</source>
          <target state="translated">請勿使用<ph id="ph1">&lt;xref:System.Threading.LockCookie&gt;</ph>從傳回<ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph> method to release the lock, regardless of how many times it has been acquired by the thread, and how to restore the state of the lock later.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph>方法，以釋出鎖定，不論多少次它已經取得的執行緒，以及如何還原的更新版本的鎖定狀態。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)">
          <source>This code is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">這段程式碼是針對所提供之較大範例的一部分<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>類別。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)">
          <source>The address of <ph id="ph1">&lt;paramref name="lockCookie" /&gt;</ph> is a null pointer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="lockCookie" /&gt;</ph> 的位址為 null 指標。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="T:System.Threading.ReaderWriterLock">
          <source>Upgrades a reader lock to the writer lock.</source>
          <target state="translated">讀取器鎖定升級至寫入器鎖定。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>The time-out in milliseconds.</source>
          <target state="translated">逾時以毫秒為單位。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>Upgrades a reader lock to the writer lock, using an <ph id="ph1">&lt;see langword="Int32" /&gt;</ph> value for the time-out.</source>
          <target state="translated">使用逾時值 <ph id="ph1">&lt;see langword="Int32" /&gt;</ph>，將讀取器鎖定升級至寫入器鎖定。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.LockCookie" /&gt;</ph> value.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.LockCookie" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>When a thread calls <ph id="ph1">`UpgradeToWriterLock`</ph> the reader lock is released, regardless of the lock count, and the thread goes to the end of the queue for the writer lock.</source>
          <target state="translated">當一個執行緒呼叫<ph id="ph1">`UpgradeToWriterLock`</ph>釋放讀取器鎖定，鎖定計數，不管和執行緒進行的寫入器鎖定的佇列結尾。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>Thus, other threads might write to the resource before the thread that requested the upgrade is granted the writer lock.</source>
          <target state="translated">因此，其他執行緒可能會寫入之前要求升級會授與寫入器鎖定的執行緒資源。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>The time-out exception is not thrown until the thread that called the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph> method can reacquire the reader lock.</source>
          <target state="translated">逾時例外狀況不會擲回呼叫執行緒直到<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph>方法可以取得讀取器鎖定。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>If there are no other threads waiting for the writer lock, this happens immediately.</source>
          <target state="translated">如果沒有其他執行緒等候寫入器鎖定，此事件會立即發生。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>However, if another thread is queued for the writer lock, the thread that called the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph> method cannot reacquire the reader lock until all current readers have released their locks, and one thread has acquired and released the writer lock.</source>
          <target state="translated">不過，如果另一個執行緒在佇列中等候寫入器的鎖定，執行緒的呼叫<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph>方法不能重新取得讀取器鎖定，直到所有目前的讀取器已釋放其鎖定，以及一個執行緒具有取得和釋放寫入器的鎖定。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>This is true even if the other thread that requested the writer lock requested it after the current thread called the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph> method.</source>
          <target state="translated">這是 true，即使要求寫入器鎖定的執行緒在目前的執行緒呼叫之後要求<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>To restore the lock state, call <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A&gt;</ph> using the <ph id="ph2">&lt;xref:System.Threading.LockCookie&gt;</ph> returned by <ph id="ph3">`UpgradeToWriterLock`</ph>.</source>
          <target state="translated">若要還原的鎖定狀態，請呼叫<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A&gt;</ph>使用<ph id="ph2">&lt;xref:System.Threading.LockCookie&gt;</ph>傳回<ph id="ph3">`UpgradeToWriterLock`</ph>。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>Do not use this <ph id="ph1">`LockCookie`</ph> with <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.RestoreLock%2A&gt;</ph>.</source>
          <target state="translated">不使用這個<ph id="ph1">`LockCookie`</ph>與<ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.RestoreLock%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>When a thread has no reader lock, do not use <ph id="ph1">`UpgradeToWriterLock`</ph>.</source>
          <target state="translated">當執行緒必須沒有讀取器的鎖定時，請勿使用<ph id="ph1">`UpgradeToWriterLock`</ph>。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>Use <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A&gt;</ph> instead.</source>
          <target state="translated">請改用 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>For valid time-out values, see <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>.</source>
          <target state="translated">有效的逾時值，請參閱<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>The following code example shows how to request a reader lock, upgrade the reader lock to a writer lock, and downgrade to a reader lock again.</source>
          <target state="translated">下列程式碼範例示範如何要求讀取器的鎖定、 將讀取器鎖定升級至寫入器鎖定，以及一次降級為讀取器的鎖定。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>This code is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">這段程式碼是針對所提供之較大範例的一部分<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>類別。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> expires before the lock request is granted.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> 在授與鎖定要求前過期。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;see langword="TimeSpan" /&gt;</ph> specifying the time-out period.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="TimeSpan" /&gt;</ph>，指定逾時期間。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>Upgrades a reader lock to the writer lock, using a <ph id="ph1">&lt;see langword="TimeSpan" /&gt;</ph> value for the time-out.</source>
          <target state="translated">使用逾時值 <ph id="ph1">&lt;see langword="TimeSpan" /&gt;</ph>，將讀取器鎖定升級至寫入器鎖定。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.LockCookie" /&gt;</ph> value.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.LockCookie" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>When a thread calls <ph id="ph1">`UpgradeToWriterLock`</ph> the reader lock is released, regardless of the lock count, and the thread goes to the end of the queue for the writer lock.</source>
          <target state="translated">當一個執行緒呼叫<ph id="ph1">`UpgradeToWriterLock`</ph>釋放讀取器鎖定，鎖定計數，不管和執行緒進行的寫入器鎖定的佇列結尾。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>Thus, other threads might write to the resource before the thread that requested the upgrade is granted the writer lock.</source>
          <target state="translated">因此，其他執行緒可能會寫入之前要求升級會授與寫入器鎖定的執行緒資源。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>The time-out exception is not thrown until the thread that called the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph> method can reacquire the reader lock.</source>
          <target state="translated">逾時例外狀況不會擲回呼叫執行緒直到<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph>方法可以取得讀取器鎖定。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>If there are no other threads waiting for the writer lock, this happens immediately.</source>
          <target state="translated">如果沒有其他執行緒等候寫入器鎖定，此事件會立即發生。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>However, if another thread is queued for the writer lock, the thread that called the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph> method cannot reacquire the reader lock until all current readers have released their locks, and one thread has acquired and released the writer lock.</source>
          <target state="translated">不過，如果另一個執行緒在佇列中等候寫入器的鎖定，執行緒的呼叫<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph>方法不能重新取得讀取器鎖定，直到所有目前的讀取器已釋放其鎖定，以及一個執行緒具有取得和釋放寫入器的鎖定。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>This is true even if the other thread that requested the writer lock requested it after the current thread called the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph> method.</source>
          <target state="translated">這是 true，即使要求寫入器鎖定的執行緒在目前的執行緒呼叫之後要求<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>To restore the lock state, call <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A&gt;</ph> using the <ph id="ph2">&lt;xref:System.Threading.LockCookie&gt;</ph> returned by <ph id="ph3">`UpgradeToWriterLock`</ph>.</source>
          <target state="translated">若要還原的鎖定狀態，請呼叫<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A&gt;</ph>使用<ph id="ph2">&lt;xref:System.Threading.LockCookie&gt;</ph>傳回<ph id="ph3">`UpgradeToWriterLock`</ph>。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>Do not use this <ph id="ph1">`LockCookie`</ph> with <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.RestoreLock%2A&gt;</ph>.</source>
          <target state="translated">不使用這個<ph id="ph1">`LockCookie`</ph>與<ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.RestoreLock%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>When a thread has no reader lock, do not use <ph id="ph1">`UpgradeToWriterLock`</ph>.</source>
          <target state="translated">當執行緒必須沒有讀取器的鎖定時，請勿使用<ph id="ph1">`UpgradeToWriterLock`</ph>。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>Use <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A&gt;</ph> instead.</source>
          <target state="translated">請改用 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>For valid time-out values, see <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>.</source>
          <target state="translated">有效的逾時值，請參閱<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> expires before the lock request is granted.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> 在授與鎖定要求前過期。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> specifies a negative value other than -1 milliseconds.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> 可以指定 -1 毫秒以外的負值。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="P:System.Threading.ReaderWriterLock.WriterSeqNum">
          <source>Gets the current sequence number.</source>
          <target state="translated">取得目前的序號。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.WriterSeqNum">
          <source>The current sequence number.</source>
          <target state="translated">目前的序號。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.WriterSeqNum">
          <source>The sequence number increases whenever a thread acquires the writer lock.</source>
          <target state="translated">此順序數字會增加每當執行緒取得寫入器的鎖定。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.WriterSeqNum">
          <source>You can save the sequence number and pass it to <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A&gt;</ph> at a later time, if you want to determine whether other threads have acquired the writer lock in the meantime.</source>
          <target state="translated">您可以儲存的序號，並將它傳遞給<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A&gt;</ph>稍後，如果您想要判斷是否其他執行緒已取得寫入器鎖定同時。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.WriterSeqNum">
          <source>You can use <ph id="ph1">`WriterSeqNum`</ph> to improve application performance.</source>
          <target state="translated">您可以使用<ph id="ph1">`WriterSeqNum`</ph>改善應用程式效能。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.WriterSeqNum">
          <source>For example, a thread might cache the information it obtains while holding a reader lock.</source>
          <target state="translated">例如，執行緒可能會快取保留讀取鎖定時取得的資訊。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.WriterSeqNum">
          <source>After releasing and later reacquiring the lock, the thread can determine whether other threads have written to the resource by calling <ph id="ph1">`AnyWritersSince`</ph>; if not, the cached information can be used.</source>
          <target state="translated">之後釋出和更新版本重新取得鎖定，執行緒可以判斷其他的執行緒是否已寫入至資源藉由呼叫<ph id="ph1">`AnyWritersSince`</ph>; 如果沒有，可以使用快取的資訊。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.WriterSeqNum">
          <source>This technique is useful when reading the information protected by the lock is expensive; for example, running a database query.</source>
          <target state="translated">讀取鎖定所保護的資訊是高度耗費資源; 時，這項技術非常有用例如，執行資料庫查詢。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.WriterSeqNum">
          <source>The caller must be holding a reader lock or a writer lock in order for the sequence number to be useful.</source>
          <target state="translated">呼叫端必須寫入器鎖定或讀取器鎖定保留順序，序號才能發揮作用。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.WriterSeqNum">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A&gt;</ph> property and the <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A&gt;</ph> method to determine whether another thread acquired the writer lock on the protected resource since the current thread last held the writer lock.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A&gt;</ph>屬性和<ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A&gt;</ph>方法來判斷另一個執行緒是否已受保護的資源寫入器鎖定，因為目前的執行緒上一次保留寫入器的鎖定。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.WriterSeqNum">
          <source>This code is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">這段程式碼是針對所提供之較大範例的一部分<ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>類別。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>