<Type Name="ReaderWriterLock" FullName="System.Threading.ReaderWriterLock">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c3e44698bf9b3581837778729caf8bb923358a40" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58715587" /></Metadata><TypeSignature Language="C#" Value="public sealed class ReaderWriterLock : System.Runtime.ConstrainedExecution.CriticalFinalizerObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ReaderWriterLock extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ReaderWriterLock" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ReaderWriterLock&#xA;Inherits CriticalFinalizerObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class ReaderWriterLock sealed : System::Runtime::ConstrainedExecution::CriticalFinalizerObject" />
  <TypeSignature Language="F#" Value="type ReaderWriterLock = class&#xA;    inherit CriticalFinalizerObject" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Runtime.ConstrainedExecution.CriticalFinalizerObject</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-1.1">System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="9487d-101">定義鎖定，它支援單一寫入器和多重讀取器。</span><span class="sxs-lookup"><span data-stu-id="9487d-101">Defines a lock that supports single writers and multiple readers.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="9487d-102">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 擁有 <xref:System.Threading.ReaderWriterLockSlim> 和 <xref:System.Threading.ReaderWriterLock> 這兩個 Reader-Writer 鎖定。</span><span class="sxs-lookup"><span data-stu-id="9487d-102">The [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] has two reader-writer locks, <xref:System.Threading.ReaderWriterLockSlim> and <xref:System.Threading.ReaderWriterLock>.</span></span> <span data-ttu-id="9487d-103">建議針對所有新的開發使用 <xref:System.Threading.ReaderWriterLockSlim>。</span><span class="sxs-lookup"><span data-stu-id="9487d-103"><xref:System.Threading.ReaderWriterLockSlim> is recommended for all new development.</span></span> <span data-ttu-id="9487d-104"><xref:System.Threading.ReaderWriterLockSlim> 類似於 <xref:System.Threading.ReaderWriterLock>，但是它有遞迴以及升級和降級鎖定狀態的簡化規則。</span><span class="sxs-lookup"><span data-stu-id="9487d-104"><xref:System.Threading.ReaderWriterLockSlim> is similar to <xref:System.Threading.ReaderWriterLock>, but it has simplified rules for recursion and for upgrading and downgrading lock state.</span></span> <span data-ttu-id="9487d-105"><xref:System.Threading.ReaderWriterLockSlim> 可避免可能發生死結的許多情況。</span><span class="sxs-lookup"><span data-stu-id="9487d-105"><xref:System.Threading.ReaderWriterLockSlim> avoids many cases of potential deadlock.</span></span> <span data-ttu-id="9487d-106">此外，<xref:System.Threading.ReaderWriterLockSlim> 的效能明顯優於 <xref:System.Threading.ReaderWriterLock>。</span><span class="sxs-lookup"><span data-stu-id="9487d-106">In addition, the performance of <xref:System.Threading.ReaderWriterLockSlim> is significantly better than <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
 <span data-ttu-id="9487d-107"><xref:System.Threading.ReaderWriterLock> 用來同步處理資源的存取權。</span><span class="sxs-lookup"><span data-stu-id="9487d-107"><xref:System.Threading.ReaderWriterLock> is used to synchronize access to a resource.</span></span> <span data-ttu-id="9487d-108">在任何時候，它可讓多個執行緒的並行讀取權限，或是單一執行緒的寫入權限。</span><span class="sxs-lookup"><span data-stu-id="9487d-108">At any given time, it allows either concurrent read access for multiple threads, or write access for a single thread.</span></span> <span data-ttu-id="9487d-109">資源不常變更的情況下`ReaderWriterLock`提供更佳的輸送量比簡單的一個-一次鎖定，例如<xref:System.Threading.Monitor>。</span><span class="sxs-lookup"><span data-stu-id="9487d-109">In a situation where a resource is changed infrequently, a `ReaderWriterLock` provides better throughput than a simple one-at-a-time lock, such as <xref:System.Threading.Monitor>.</span></span>  
  
 <span data-ttu-id="9487d-110">`ReaderWriterLock` 其中大部分的存取是讀取、 寫入是不常執行和短時間內的效果最佳。</span><span class="sxs-lookup"><span data-stu-id="9487d-110">`ReaderWriterLock` works best where most accesses are reads, while writes are infrequent and of short duration.</span></span> <span data-ttu-id="9487d-111">多個讀取器的替代與單一寫入器，以便讀取或寫入器不會封鎖長時間。</span><span class="sxs-lookup"><span data-stu-id="9487d-111">Multiple readers alternate with single writers, so that neither readers nor writers are blocked for long periods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9487d-112">長期保留讀取鎖定或寫入器鎖定會影響其他執行緒。</span><span class="sxs-lookup"><span data-stu-id="9487d-112">Holding reader locks or writer locks for long periods will starve other threads.</span></span> <span data-ttu-id="9487d-113">為了達到最佳效能，請考慮重新建構您的應用程式，將寫入的持續時間降至最低。</span><span class="sxs-lookup"><span data-stu-id="9487d-113">For best performance, consider restructuring your application to minimize the duration of writes.</span></span>  
  
 <span data-ttu-id="9487d-114">鎖定或寫入器鎖定，但不要同時在相同的時間，執行緒可以保留讀取器。</span><span class="sxs-lookup"><span data-stu-id="9487d-114">A thread can hold a reader lock or a writer lock, but not both at the same time.</span></span> <span data-ttu-id="9487d-115">而不是為了取得寫入器鎖定釋放讀取器的鎖定，您可以使用<xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>和<xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A>。</span><span class="sxs-lookup"><span data-stu-id="9487d-115">Instead of releasing a reader lock in order to acquire the writer lock, you can use <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> and <xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A>.</span></span>  
  
 <span data-ttu-id="9487d-116">遞迴的鎖定要求增加鎖定的鎖定計數。</span><span class="sxs-lookup"><span data-stu-id="9487d-116">Recursive lock requests increase the lock count on a lock.</span></span>  
  
 <span data-ttu-id="9487d-117">是個別佇列讀取器和寫入。</span><span class="sxs-lookup"><span data-stu-id="9487d-117">Readers and writers are queued separately.</span></span> <span data-ttu-id="9487d-118">當執行緒釋放寫入器鎖定時，那時讀取器佇列中等候的所有執行緒會被授都與讀取器鎖定;當這些讀取器鎖定的所有已發行下, 一個執行緒等候寫入器中排入佇列，如果任何項目，授與寫入器的鎖定，等等。</span><span class="sxs-lookup"><span data-stu-id="9487d-118">When a thread releases the writer lock, all threads waiting in the reader queue at that instant are granted reader locks; when all of those reader locks have been released, the next thread waiting in the writer queue, if any, is granted the writer lock, and so on.</span></span> <span data-ttu-id="9487d-119">換句話說，`ReaderWriterLock`交替的讀卡機，集合和一個寫入器。</span><span class="sxs-lookup"><span data-stu-id="9487d-119">In other words, `ReaderWriterLock` alternates between a collection of readers, and one writer.</span></span>  
  
 <span data-ttu-id="9487d-120">雖然寫入器佇列中的執行緒正在等候使用中的讀取器的鎖定釋出，要求新的讀取器鎖定的執行緒會累積讀取器佇列中。</span><span class="sxs-lookup"><span data-stu-id="9487d-120">While a thread in the writer queue is waiting for active reader locks to be released, threads requesting new reader locks accumulate in the reader queue.</span></span> <span data-ttu-id="9487d-121">其不授與，即使它們無法分享現有的讀取器鎖定持有者; 中的並行存取這有助於保護對讀取器不會無限期妨礙的寫入器。</span><span class="sxs-lookup"><span data-stu-id="9487d-121">Their requests are not granted, even though they could share concurrent access with existing reader-lock holders; this helps protect writers against indefinite blockage by readers.</span></span>  
  
 <span data-ttu-id="9487d-122">大部分的方法上取得鎖定`ReaderWriterLock`接受逾時值。</span><span class="sxs-lookup"><span data-stu-id="9487d-122">Most methods for acquiring locks on a `ReaderWriterLock` accept time-out values.</span></span> <span data-ttu-id="9487d-123">若要避免死結，在您的應用程式中使用逾時。</span><span class="sxs-lookup"><span data-stu-id="9487d-123">Use time-outs to avoid deadlocks in your application.</span></span> <span data-ttu-id="9487d-124">比方說，執行緒可能會取得在一個資源上的寫入器鎖定，而接著要求第二個資源的讀取器鎖定在此同時，另一個執行緒可能會取得第二個資源中，寫入器鎖定，並要求讀取器的鎖定在第一天。</span><span class="sxs-lookup"><span data-stu-id="9487d-124">For example, a thread might acquire the writer lock on one resource and then request a reader lock on a second resource; in the meantime, another thread might acquire the writer lock on the second resource, and request a reader lock on the first.</span></span> <span data-ttu-id="9487d-125">除非使用逾時，執行緒會鎖死。</span><span class="sxs-lookup"><span data-stu-id="9487d-125">Unless time-outs are used, the threads deadlock.</span></span>  
  
 <span data-ttu-id="9487d-126">如果逾時間隔到期且未被授與鎖定要求，方法將控制權還給呼叫的執行緒擲回<xref:System.ApplicationException>。</span><span class="sxs-lookup"><span data-stu-id="9487d-126">If the time-out interval expires and the lock request has not been granted, the method returns control to the calling thread by throwing an <xref:System.ApplicationException>.</span></span> <span data-ttu-id="9487d-127">執行緒可以攔截此例外狀況，並判斷後續要採取什麼動作。</span><span class="sxs-lookup"><span data-stu-id="9487d-127">A thread can catch this exception and determine what action to take next.</span></span>  
  
 <span data-ttu-id="9487d-128">逾時值被以毫秒為單位。</span><span class="sxs-lookup"><span data-stu-id="9487d-128">Time-outs are expressed in milliseconds.</span></span> <span data-ttu-id="9487d-129">如果您使用<xref:System.TimeSpan?displayProperty=nameWithType>若要指定在逾時，所使用的值是所表示之整數毫秒總數<xref:System.TimeSpan>。</span><span class="sxs-lookup"><span data-stu-id="9487d-129">If you use a <xref:System.TimeSpan?displayProperty=nameWithType> to specify the time-out, the value used is the total number of whole milliseconds represented by the <xref:System.TimeSpan>.</span></span> <span data-ttu-id="9487d-130">下表顯示有效的逾時值以毫秒為單位。</span><span class="sxs-lookup"><span data-stu-id="9487d-130">The following table shows the valid time-out values in milliseconds.</span></span>  
  
|<span data-ttu-id="9487d-131">值</span><span class="sxs-lookup"><span data-stu-id="9487d-131">Value</span></span>|<span data-ttu-id="9487d-132">描述</span><span class="sxs-lookup"><span data-stu-id="9487d-132">Description</span></span>|  
|-----------|-----------------|  
|<span data-ttu-id="9487d-133">-1</span><span class="sxs-lookup"><span data-stu-id="9487d-133">-1</span></span>|<span data-ttu-id="9487d-134">在執行緒等候，直到取得鎖定，不論它花多少時間。</span><span class="sxs-lookup"><span data-stu-id="9487d-134">The thread waits until the lock is acquired, regardless of how long it takes.</span></span> <span data-ttu-id="9487d-135">指定的整數逾時、 常數的方法<xref:System.Threading.Timeout.Infinite>可用。</span><span class="sxs-lookup"><span data-stu-id="9487d-135">For methods that specify integer time-outs, the constant <xref:System.Threading.Timeout.Infinite> can be used.</span></span>|  
|<span data-ttu-id="9487d-136">0</span><span class="sxs-lookup"><span data-stu-id="9487d-136">0</span></span>|<span data-ttu-id="9487d-137">執行緒不會等候取得鎖定。</span><span class="sxs-lookup"><span data-stu-id="9487d-137">The thread does not wait to acquire the lock.</span></span> <span data-ttu-id="9487d-138">如果無法立即取得鎖定，此方法會傳回。</span><span class="sxs-lookup"><span data-stu-id="9487d-138">If the lock cannot be acquired immediately, the method returns.</span></span>|  
|<span data-ttu-id="9487d-139">>0</span><span class="sxs-lookup"><span data-stu-id="9487d-139">>0</span></span>|<span data-ttu-id="9487d-140">要等候的毫秒數。</span><span class="sxs-lookup"><span data-stu-id="9487d-140">The number of milliseconds to wait.</span></span>|  
  
 <span data-ttu-id="9487d-141">除了-1，不允許負值的逾時值。</span><span class="sxs-lookup"><span data-stu-id="9487d-141">With the exception of -1, negative time-out values are not allowed.</span></span> <span data-ttu-id="9487d-142">如果您指定-1 以外的負數整數，改為使用零的逾時值。</span><span class="sxs-lookup"><span data-stu-id="9487d-142">If you specify a negative integer other than -1, a time-out value of zero is used instead.</span></span> <span data-ttu-id="9487d-143">（亦即，方法會傳回而不等待，如果無法立即取得鎖定。）如果您指定<xref:System.TimeSpan>表示的負毫秒數目-1，以外<xref:System.ArgumentOutOfRangeException>就會擲回。</span><span class="sxs-lookup"><span data-stu-id="9487d-143">(That is, the method returns without waiting, if the lock cannot be acquired immediately.) If you specify a <xref:System.TimeSpan> that represents a negative number of milliseconds other than -1, <xref:System.ArgumentOutOfRangeException> is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9487d-144">下列範例示範如何使用<xref:System.Threading.ReaderWriterLock>若要保護的共用的資源，整數值，名為`resource`，也就是以獨佔方式所多個執行緒同時讀取和寫入。</span><span class="sxs-lookup"><span data-stu-id="9487d-144">The following example demonstrates how to use a <xref:System.Threading.ReaderWriterLock> to protect a shared resource, an integer value named `resource`, that is read concurrently and written exclusively by multiple threads.</span></span> <span data-ttu-id="9487d-145">請注意，<xref:System.Threading.ReaderWriterLock>宣告類別層級，因此它會顯示所有執行緒。</span><span class="sxs-lookup"><span data-stu-id="9487d-145">Note that the <xref:System.Threading.ReaderWriterLock> is declared at the class level so that it is visible to all threads.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ReaderWriterLock#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLock#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="9487d-146">此型別具備執行緒安全。</span><span class="sxs-lookup"><span data-stu-id="9487d-146">This type is thread safe.</span></span></threadsafe>
    <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="9487d-147">Managed 執行緒處理</span><span class="sxs-lookup"><span data-stu-id="9487d-147">Managed Threading</span></span></related>
    <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="9487d-148">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="9487d-148">ReaderWriterLock</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReaderWriterLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReaderWriterLock();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9487d-149">初始化 <see cref="T:System.Threading.ReaderWriterLock" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="9487d-149">Initializes a new instance of the <see cref="T:System.Threading.ReaderWriterLock" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9487d-150">下列程式碼範例示範如何建立 <xref:System.Threading.ReaderWriterLock> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="9487d-150">The following code example demonstrates how to create a new instance of the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 <span data-ttu-id="9487d-151">此程式碼是針對提供之較大範例的一部分<xref:System.Threading.ReaderWriterLock>類別。</span><span class="sxs-lookup"><span data-stu-id="9487d-151">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="9487d-152">Managed 執行緒處理</span><span class="sxs-lookup"><span data-stu-id="9487d-152">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="9487d-153">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="9487d-153">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="AcquireReaderLock">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9487d-154">取得讀取器的鎖定。</span><span class="sxs-lookup"><span data-stu-id="9487d-154">Acquires a reader lock.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AcquireReaderLock">
      <MemberSignature Language="C#" Value="public void AcquireReaderLock (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcquireReaderLock(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AcquireReaderLock (millisecondsTimeout As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AcquireReaderLock(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.AcquireReaderLock : int -&gt; unit" Usage="readerWriterLock.AcquireReaderLock millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="9487d-155">逾時以毫秒為單位。</span><span class="sxs-lookup"><span data-stu-id="9487d-155">The time-out in milliseconds.</span></span></param>
        <summary><span data-ttu-id="9487d-156">使用逾時值 <see cref="T:System.Int32" /> 取得讀取器的鎖定。</span><span class="sxs-lookup"><span data-stu-id="9487d-156">Acquires a reader lock, using an <see cref="T:System.Int32" /> value for the time-out.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9487d-157"><xref:System.Threading.ReaderWriterLock.AcquireReaderLock%2A> 如果不同的執行緒寫入器的鎖定，或至少一個執行緒正在等候寫入器鎖定封鎖。</span><span class="sxs-lookup"><span data-stu-id="9487d-157"><xref:System.Threading.ReaderWriterLock.AcquireReaderLock%2A> blocks if a different thread has the writer lock, or if at least one thread is waiting for the writer lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9487d-158">如果目前的執行緒已經寫入器鎖定，沒有讀取器會取得鎖定。</span><span class="sxs-lookup"><span data-stu-id="9487d-158">If the current thread already has the writer lock, no reader lock is acquired.</span></span> <span data-ttu-id="9487d-159">相反地，寫入器鎖定上的鎖定計數會遞增。</span><span class="sxs-lookup"><span data-stu-id="9487d-159">Instead, the lock count on the writer lock is incremented.</span></span> <span data-ttu-id="9487d-160">這可防止在它自己的寫入器鎖定上封鎖執行緒。</span><span class="sxs-lookup"><span data-stu-id="9487d-160">This prevents a thread from blocking on its own writer lock.</span></span> <span data-ttu-id="9487d-161">結果正是呼叫相同<xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>，以及額外的呼叫<xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A>釋放寫入器鎖定時是必要的。</span><span class="sxs-lookup"><span data-stu-id="9487d-161">The result is exactly the same as calling <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>, and an additional call to <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> is required when releasing the writer lock.</span></span>  
  
 <span data-ttu-id="9487d-162">`AcquireReaderLock` 支援遞迴的讀取器鎖定要求。</span><span class="sxs-lookup"><span data-stu-id="9487d-162">`AcquireReaderLock` supports recursive reader-lock requests.</span></span> <span data-ttu-id="9487d-163">也就是說，執行緒可以呼叫 AcquireReaderLock 多次，這在每次增加的鎖定計數。</span><span class="sxs-lookup"><span data-stu-id="9487d-163">That is, a thread can call AcquireReaderLock multiple times, which increments the lock count each time.</span></span> <span data-ttu-id="9487d-164">您必須呼叫<xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A>針對每次呼叫一次`AcquireReaderLock`。</span><span class="sxs-lookup"><span data-stu-id="9487d-164">You must call <xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A> once for each time you call `AcquireReaderLock`.</span></span> <span data-ttu-id="9487d-165">或者，您可以呼叫<xref:System.Threading.ReaderWriterLock.ReleaseLock%2A>減少為零立即鎖定計數。</span><span class="sxs-lookup"><span data-stu-id="9487d-165">Alternatively, you can call <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> to reduce the lock count to zero immediately.</span></span>  
  
 <span data-ttu-id="9487d-166">遞迴的鎖定要求是一律立即授與，而不會讓要求的執行緒在讀取器佇列中。</span><span class="sxs-lookup"><span data-stu-id="9487d-166">Recursive lock requests are always granted immediately, without placing the requesting thread in the reader queue.</span></span> <span data-ttu-id="9487d-167">遞迴鎖定謹慎使用，以避免長時間封鎖寫入器鎖定要求。</span><span class="sxs-lookup"><span data-stu-id="9487d-167">Use recursive locks with caution, to avoid blocking writer-lock requests for long periods.</span></span>  
  
 <span data-ttu-id="9487d-168">有效的逾時值，請參閱<xref:System.Threading.ReaderWriterLock>。</span><span class="sxs-lookup"><span data-stu-id="9487d-168">For valid time-out values, see <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9487d-169">下列程式碼範例示範如何取得和釋放讀取器的鎖定，以及如何處理時的要求逾時擲回的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9487d-169">The following code example shows how to acquire and release a reader lock, and how to handle the exception thrown when a request times out.</span></span>  
  
 <span data-ttu-id="9487d-170">此程式碼是針對提供之較大範例的一部分<xref:System.Threading.ReaderWriterLock>類別。</span><span class="sxs-lookup"><span data-stu-id="9487d-170">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#3)]
[!code-csharp[System.Threading.ReaderWriterLock#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#3)]
[!code-vb[System.Threading.ReaderWriterLock#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#3)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="9487d-171"><paramref name="millisecondsTimeout" /> 在授與鎖定要求前過期。</span><span class="sxs-lookup"><span data-stu-id="9487d-171"><paramref name="millisecondsTimeout" /> expires before the lock request is granted.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="9487d-172">Managed 執行緒處理</span><span class="sxs-lookup"><span data-stu-id="9487d-172">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="9487d-173">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="9487d-173">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="AcquireReaderLock">
      <MemberSignature Language="C#" Value="public void AcquireReaderLock (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcquireReaderLock(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AcquireReaderLock (timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AcquireReaderLock(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.AcquireReaderLock : TimeSpan -&gt; unit" Usage="readerWriterLock.AcquireReaderLock timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="9487d-174"><see langword="TimeSpan" /> 可以指定逾時週期。</span><span class="sxs-lookup"><span data-stu-id="9487d-174">A <see langword="TimeSpan" /> specifying the time-out period.</span></span></param>
        <summary><span data-ttu-id="9487d-175">使用逾時值 <see cref="T:System.TimeSpan" /> 取得讀取器的鎖定。</span><span class="sxs-lookup"><span data-stu-id="9487d-175">Acquires a reader lock, using a <see cref="T:System.TimeSpan" /> value for the time-out.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9487d-176"><xref:System.Threading.ReaderWriterLock.AcquireReaderLock%2A> 如果不同的執行緒寫入器的鎖定，或至少一個執行緒正在等候寫入器鎖定封鎖。</span><span class="sxs-lookup"><span data-stu-id="9487d-176"><xref:System.Threading.ReaderWriterLock.AcquireReaderLock%2A> blocks if a different thread has the writer lock, or if at least one thread is waiting for the writer lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9487d-177">如果目前的執行緒已經寫入器鎖定，沒有讀取器會取得鎖定。</span><span class="sxs-lookup"><span data-stu-id="9487d-177">If the current thread already has the writer lock, no reader lock is acquired.</span></span> <span data-ttu-id="9487d-178">相反地，寫入器鎖定上的鎖定計數會遞增。</span><span class="sxs-lookup"><span data-stu-id="9487d-178">Instead, the lock count on the writer lock is incremented.</span></span> <span data-ttu-id="9487d-179">這可防止在它自己的寫入器鎖定上封鎖執行緒。</span><span class="sxs-lookup"><span data-stu-id="9487d-179">This prevents a thread from blocking on its own writer lock.</span></span> <span data-ttu-id="9487d-180">結果正是呼叫相同<xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>，以及額外的呼叫<xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A>釋放寫入器鎖定時是必要的。</span><span class="sxs-lookup"><span data-stu-id="9487d-180">The result is exactly the same as calling <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>, and an additional call to <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> is required when releasing the writer lock.</span></span>  
  
 <span data-ttu-id="9487d-181">`AcquireReaderLock` 支援遞迴的讀取器鎖定要求。</span><span class="sxs-lookup"><span data-stu-id="9487d-181">`AcquireReaderLock` supports recursive reader-lock requests.</span></span> <span data-ttu-id="9487d-182">也就是說，執行緒可以呼叫 AcquireReaderLock 多次，這在每次增加的鎖定計數。</span><span class="sxs-lookup"><span data-stu-id="9487d-182">That is, a thread can call AcquireReaderLock multiple times, which increments the lock count each time.</span></span> <span data-ttu-id="9487d-183">您必須呼叫<xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A>針對每次呼叫一次`AcquireReaderLock`。</span><span class="sxs-lookup"><span data-stu-id="9487d-183">You must call <xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A> once for each time you call `AcquireReaderLock`.</span></span> <span data-ttu-id="9487d-184">或者，您可以呼叫<xref:System.Threading.ReaderWriterLock.ReleaseLock%2A>減少為零立即鎖定計數。</span><span class="sxs-lookup"><span data-stu-id="9487d-184">Alternatively, you can call <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> to reduce the lock count to zero immediately.</span></span>  
  
 <span data-ttu-id="9487d-185">遞迴的鎖定要求是一律立即授與，而不會讓要求的執行緒在讀取器佇列中。</span><span class="sxs-lookup"><span data-stu-id="9487d-185">Recursive lock requests are always granted immediately, without placing the requesting thread in the reader queue.</span></span> <span data-ttu-id="9487d-186">遞迴鎖定謹慎使用，以避免長時間封鎖寫入器鎖定要求。</span><span class="sxs-lookup"><span data-stu-id="9487d-186">Use recursive locks with caution, to avoid blocking writer-lock requests for long periods.</span></span>  
  
 <span data-ttu-id="9487d-187">有效的逾時值，請參閱<xref:System.Threading.ReaderWriterLock>。</span><span class="sxs-lookup"><span data-stu-id="9487d-187">For valid time-out values, see <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="9487d-188"><paramref name="timeout" /> 在授與鎖定要求前過期。</span><span class="sxs-lookup"><span data-stu-id="9487d-188"><paramref name="timeout" /> expires before the lock request is granted.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9487d-189"><paramref name="timeout" /> 可以指定 -1 毫秒以外的負值。</span><span class="sxs-lookup"><span data-stu-id="9487d-189"><paramref name="timeout" /> specifies a negative value other than -1 milliseconds.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="9487d-190">Managed 執行緒處理</span><span class="sxs-lookup"><span data-stu-id="9487d-190">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="9487d-191">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="9487d-191">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="AcquireWriterLock">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9487d-192">取得寫入器的鎖定。</span><span class="sxs-lookup"><span data-stu-id="9487d-192">Acquires the writer lock.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AcquireWriterLock">
      <MemberSignature Language="C#" Value="public void AcquireWriterLock (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcquireWriterLock(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AcquireWriterLock (millisecondsTimeout As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AcquireWriterLock(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.AcquireWriterLock : int -&gt; unit" Usage="readerWriterLock.AcquireWriterLock millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="9487d-193">逾時以毫秒為單位。</span><span class="sxs-lookup"><span data-stu-id="9487d-193">The time-out in milliseconds.</span></span></param>
        <summary><span data-ttu-id="9487d-194">使用逾時值 <see cref="T:System.Int32" /> 取得寫入器的鎖定。</span><span class="sxs-lookup"><span data-stu-id="9487d-194">Acquires the writer lock, using an <see cref="T:System.Int32" /> value for the time-out.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9487d-195">如果另一個執行緒讀取器的鎖定或寫入器鎖定，就會封鎖此方法。</span><span class="sxs-lookup"><span data-stu-id="9487d-195">This method blocks if another thread has a reader lock or writer lock.</span></span> <span data-ttu-id="9487d-196">如需寫入器鎖定會與多個並行讀取器鎖定交替出現的方式的說明，請參閱<xref:System.Threading.ReaderWriterLock>類別。</span><span class="sxs-lookup"><span data-stu-id="9487d-196">For a description of the way the writer lock alternates with multiple concurrent reader locks, see the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 <span data-ttu-id="9487d-197">已將讀取器鎖定的執行緒可以取得寫入器鎖定在兩種方式之一： 釋放讀取器的鎖定，然後再呼叫<xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>，或藉由呼叫<xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>。</span><span class="sxs-lookup"><span data-stu-id="9487d-197">A thread that already has a reader lock can acquire the writer lock in one of two ways: by releasing the reader lock before calling <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>, or by calling <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="9487d-198">如果執行緒呼叫`AcquireWriterLock`仍有讀取器的鎖定，它就會封鎖讀取器鎖定; 如果指定無限逾時，則執行緒會鎖死。</span><span class="sxs-lookup"><span data-stu-id="9487d-198">If a thread calls `AcquireWriterLock` while it still has a reader lock, it will block on its own reader lock; if an infinite time-out is specified, the thread will deadlock.</span></span> <span data-ttu-id="9487d-199">若要避免發生這類死結，請使用<xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A>來判斷目前的執行緒是否已有讀取器的鎖定。</span><span class="sxs-lookup"><span data-stu-id="9487d-199">To avoid such deadlocks, use <xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A> to determine whether the current thread already has a reader lock.</span></span>  
  
 <span data-ttu-id="9487d-200">`AcquireWriterLock` 支援遞迴的寫入器鎖定要求。</span><span class="sxs-lookup"><span data-stu-id="9487d-200">`AcquireWriterLock` supports recursive writer-lock requests.</span></span> <span data-ttu-id="9487d-201">也就是說，執行緒可以呼叫`AcquireWriterLock`許多次，其中的鎖定計數遞增每一次。</span><span class="sxs-lookup"><span data-stu-id="9487d-201">That is, a thread can call `AcquireWriterLock` multiple times, which increments the lock count each time.</span></span> <span data-ttu-id="9487d-202">您必須呼叫<xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A>針對每次呼叫一次`AcquireWriterLock`。</span><span class="sxs-lookup"><span data-stu-id="9487d-202">You must call <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> once for each time you call `AcquireWriterLock`.</span></span> <span data-ttu-id="9487d-203">或者，您可以呼叫<xref:System.Threading.ReaderWriterLock.ReleaseLock%2A>減少為零立即鎖定計數。</span><span class="sxs-lookup"><span data-stu-id="9487d-203">Alternatively, you can call <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> to reduce the lock count to zero immediately.</span></span>  
  
 <span data-ttu-id="9487d-204">遞迴的鎖定要求是一律立即授與，而不會讓寫入器佇列中的要求的執行緒。</span><span class="sxs-lookup"><span data-stu-id="9487d-204">Recursive lock requests are always granted immediately, without placing the requesting thread in the writer queue.</span></span>  
  
 <span data-ttu-id="9487d-205">有效的逾時值，請參閱<xref:System.Threading.ReaderWriterLock>。</span><span class="sxs-lookup"><span data-stu-id="9487d-205">For valid time-out values, see <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9487d-206">下列程式碼範例示範如何取得和釋放寫入器鎖定，以及如何處理時的要求逾時擲回的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9487d-206">The following code example shows how to acquire and release a writer lock, and how to handle the exception thrown when a request times out.</span></span>  
  
 <span data-ttu-id="9487d-207">此程式碼是針對提供之較大範例的一部分<xref:System.Threading.ReaderWriterLock>類別。</span><span class="sxs-lookup"><span data-stu-id="9487d-207">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#4)]
[!code-csharp[System.Threading.ReaderWriterLock#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#4)]
[!code-vb[System.Threading.ReaderWriterLock#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#4)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="9487d-208"><paramref name="timeout" /> 在授與鎖定要求前過期。</span><span class="sxs-lookup"><span data-stu-id="9487d-208"><paramref name="timeout" /> expires before the lock request is granted.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="9487d-209">Managed 執行緒處理</span><span class="sxs-lookup"><span data-stu-id="9487d-209">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="9487d-210">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="9487d-210">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="AcquireWriterLock">
      <MemberSignature Language="C#" Value="public void AcquireWriterLock (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcquireWriterLock(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AcquireWriterLock (timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AcquireWriterLock(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.AcquireWriterLock : TimeSpan -&gt; unit" Usage="readerWriterLock.AcquireWriterLock timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="9487d-211"><see langword="TimeSpan" />，指定逾時的時段。</span><span class="sxs-lookup"><span data-stu-id="9487d-211">The <see langword="TimeSpan" /> specifying the time-out period.</span></span></param>
        <summary><span data-ttu-id="9487d-212">使用逾時值 <see cref="T:System.TimeSpan" /> 取得寫入器的鎖定。</span><span class="sxs-lookup"><span data-stu-id="9487d-212">Acquires the writer lock, using a <see cref="T:System.TimeSpan" /> value for the time-out.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9487d-213">如果另一個執行緒讀取器的鎖定或寫入器鎖定，就會封鎖此方法。</span><span class="sxs-lookup"><span data-stu-id="9487d-213">This method blocks if another thread has a reader lock or writer lock.</span></span> <span data-ttu-id="9487d-214">如需寫入器鎖定會與多個並行讀取器鎖定交替出現的方式的說明，請參閱<xref:System.Threading.ReaderWriterLock>類別。</span><span class="sxs-lookup"><span data-stu-id="9487d-214">For a description of the way the writer lock alternates with multiple concurrent reader locks, see the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 <span data-ttu-id="9487d-215">已將讀取器鎖定的執行緒可以取得寫入器鎖定在兩種方式之一： 釋放讀取器的鎖定，然後再呼叫<xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>，或藉由呼叫<xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>。</span><span class="sxs-lookup"><span data-stu-id="9487d-215">A thread that already has a reader lock can acquire the writer lock in one of two ways: by releasing the reader lock before calling <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>, or by calling <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="9487d-216">如果執行緒呼叫`AcquireWriterLock`仍有讀取器的鎖定，它就會封鎖讀取器鎖定; 如果指定無限逾時，則執行緒會鎖死。</span><span class="sxs-lookup"><span data-stu-id="9487d-216">If a thread calls `AcquireWriterLock` while it still has a reader lock, it will block on its own reader lock; if an infinite time-out is specified, the thread will deadlock.</span></span> <span data-ttu-id="9487d-217">若要避免發生這類死結，請使用<xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A>來判斷目前的執行緒是否已有讀取器的鎖定。</span><span class="sxs-lookup"><span data-stu-id="9487d-217">To avoid such deadlocks, use <xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A> to determine whether the current thread already has a reader lock.</span></span>  
  
 <span data-ttu-id="9487d-218">`AcquireWriterLock` 支援遞迴的寫入器鎖定要求。</span><span class="sxs-lookup"><span data-stu-id="9487d-218">`AcquireWriterLock` supports recursive writer-lock requests.</span></span> <span data-ttu-id="9487d-219">也就是說，執行緒可以呼叫`AcquireWriterLock`許多次，其中的鎖定計數遞增每一次。</span><span class="sxs-lookup"><span data-stu-id="9487d-219">That is, a thread can call `AcquireWriterLock` multiple times, which increments the lock count each time.</span></span> <span data-ttu-id="9487d-220">您必須呼叫<xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A>針對每次呼叫一次`AcquireWriterLock`。</span><span class="sxs-lookup"><span data-stu-id="9487d-220">You must call <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> once for each time you call `AcquireWriterLock`.</span></span> <span data-ttu-id="9487d-221">或者，您可以呼叫<xref:System.Threading.ReaderWriterLock.ReleaseLock%2A>減少為零立即鎖定計數。</span><span class="sxs-lookup"><span data-stu-id="9487d-221">Alternatively, you can call <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> to reduce the lock count to zero immediately.</span></span>  
  
 <span data-ttu-id="9487d-222">遞迴的鎖定要求是一律立即授與，而不會讓寫入器佇列中的要求的執行緒。</span><span class="sxs-lookup"><span data-stu-id="9487d-222">Recursive lock requests are always granted immediately, without placing the requesting thread in the writer queue.</span></span>  
  
 <span data-ttu-id="9487d-223">有效的逾時值，請參閱<xref:System.Threading.ReaderWriterLock>。</span><span class="sxs-lookup"><span data-stu-id="9487d-223">For valid time-out values, see <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="9487d-224"><paramref name="timeout" /> 在授與鎖定要求前過期。</span><span class="sxs-lookup"><span data-stu-id="9487d-224"><paramref name="timeout" /> expires before the lock request is granted.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9487d-225"><paramref name="timeout" /> 可以指定 -1 毫秒以外的負值。</span><span class="sxs-lookup"><span data-stu-id="9487d-225"><paramref name="timeout" /> specifies a negative value other than -1 milliseconds.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="9487d-226">Managed 執行緒處理</span><span class="sxs-lookup"><span data-stu-id="9487d-226">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="9487d-227">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="9487d-227">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="AnyWritersSince">
      <MemberSignature Language="C#" Value="public bool AnyWritersSince (int seqNum);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool AnyWritersSince(int32 seqNum) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.AnyWritersSince(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AnyWritersSince (seqNum As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool AnyWritersSince(int seqNum);" />
      <MemberSignature Language="F#" Value="member this.AnyWritersSince : int -&gt; bool" Usage="readerWriterLock.AnyWritersSince seqNum" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seqNum" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="seqNum"><span data-ttu-id="9487d-228">序號。</span><span class="sxs-lookup"><span data-stu-id="9487d-228">The sequence number.</span></span></param>
        <summary><span data-ttu-id="9487d-229">指示取得序號之後有無將寫入器鎖定授與至任何執行緒。</span><span class="sxs-lookup"><span data-stu-id="9487d-229">Indicates whether the writer lock has been granted to any thread since the sequence number was obtained.</span></span></summary>
        <returns><span data-ttu-id="9487d-230"><see langword="true" />，表示取得序號之後有將寫入器鎖定授與至任何執行緒，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9487d-230"><see langword="true" /> if the writer lock has been granted to any thread since the sequence number was obtained; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9487d-231">您可以使用<xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A>和`AnyWritersSince`改善應用程式效能。</span><span class="sxs-lookup"><span data-stu-id="9487d-231">You can use <xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A> and `AnyWritersSince` to improve application performance.</span></span> <span data-ttu-id="9487d-232">例如，執行緒可能會快取的讀取器鎖定時取得的資訊。</span><span class="sxs-lookup"><span data-stu-id="9487d-232">For example, a thread might cache the information it obtains while holding a reader lock.</span></span> <span data-ttu-id="9487d-233">釋出，並稍後重新取得鎖定之後, 可以使用執行緒`AnyWritersSince`來判斷是否其他執行緒就會有寫入資源中，在此過渡期間，如果沒有，可以使用快取的資訊。</span><span class="sxs-lookup"><span data-stu-id="9487d-233">After releasing and later reacquiring the lock, the thread can use `AnyWritersSince` to determine whether other threads have written to the resource in the interim; if not, the cached information can be used.</span></span> <span data-ttu-id="9487d-234">這個技術非常有用是昂貴; 讀取鎖定所保護的資訊例如，執行資料庫查詢。</span><span class="sxs-lookup"><span data-stu-id="9487d-234">This technique is useful where reading the information protected by the lock is expensive; for example, running a database query.</span></span>  
  
 <span data-ttu-id="9487d-235">呼叫端必須將讀取器鎖定或寫入器鎖定保留順序的序號，才能發揮作用。</span><span class="sxs-lookup"><span data-stu-id="9487d-235">The caller must be holding a reader lock or a writer lock in order for the sequence number to be useful.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9487d-236">下列程式碼範例示範如何使用<xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A>方法和<xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A>屬性來判斷另一個執行緒是否會取得受保護資源的寫入器鎖定，因為目前的執行緒上一次保留的寫入器鎖定。</span><span class="sxs-lookup"><span data-stu-id="9487d-236">The following code example shows how to use the <xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A> method and the <xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A> property to determine whether another thread acquired the writer lock on the protected resource since the current thread last held the writer lock.</span></span>  
  
 <span data-ttu-id="9487d-237">此程式碼是針對提供之較大範例的一部分<xref:System.Threading.ReaderWriterLock>類別。</span><span class="sxs-lookup"><span data-stu-id="9487d-237">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#6)]
[!code-csharp[System.Threading.ReaderWriterLock#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#6)]
[!code-vb[System.Threading.ReaderWriterLock#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#6)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="9487d-238">Managed 執行緒處理</span><span class="sxs-lookup"><span data-stu-id="9487d-238">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="9487d-239">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="9487d-239">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DowngradeFromWriterLock">
      <MemberSignature Language="C#" Value="public void DowngradeFromWriterLock (ref System.Threading.LockCookie lockCookie);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DowngradeFromWriterLock(valuetype System.Threading.LockCookie&amp; lockCookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DowngradeFromWriterLock (ByRef lockCookie As LockCookie)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DowngradeFromWriterLock(System::Threading::LockCookie % lockCookie);" />
      <MemberSignature Language="F#" Value="member this.DowngradeFromWriterLock :  -&gt; unit" Usage="readerWriterLock.DowngradeFromWriterLock lockCookie" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lockCookie" Type="System.Threading.LockCookie" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="lockCookie"><span data-ttu-id="9487d-240"><see cref="T:System.Threading.LockCookie" /> 傳回的 <see cref="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" />。</span><span class="sxs-lookup"><span data-stu-id="9487d-240">A <see cref="T:System.Threading.LockCookie" /> returned by <see cref="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" />.</span></span></param>
        <summary><span data-ttu-id="9487d-241">將執行緒的鎖定狀態還原到還沒有呼叫 <see cref="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" /> 之前的狀態。</span><span class="sxs-lookup"><span data-stu-id="9487d-241">Restores the lock status of the thread to what it was before <see cref="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" /> was called.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9487d-242"><xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A> 釋放寫入器鎖定，不會考慮遞迴鎖定計數，並還原已由執行緒持有才能升級至寫入器鎖定的讀取器鎖定。</span><span class="sxs-lookup"><span data-stu-id="9487d-242"><xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A> releases the writer lock, regardless of the recursive lock count, and restores the reader lock that was held by the thread before upgrading to the writer lock.</span></span> <span data-ttu-id="9487d-243">讀取器鎖定上的鎖定計數就會還原。</span><span class="sxs-lookup"><span data-stu-id="9487d-243">The lock count on the reader lock is restored.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9487d-244">`DowngradeFromWriterLock` 接受<xref:System.Threading.LockCookie>藉由呼叫取得<xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>。</span><span class="sxs-lookup"><span data-stu-id="9487d-244">`DowngradeFromWriterLock` accepts a <xref:System.Threading.LockCookie> obtained by calling <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>.</span></span> <span data-ttu-id="9487d-245">請勿使用`LockCookie`所傳回<xref:System.Threading.ReaderWriterLock.ReleaseLock%2A>。</span><span class="sxs-lookup"><span data-stu-id="9487d-245">Do not use a `LockCookie` returned by <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A>.</span></span>  
  
 <span data-ttu-id="9487d-246">執行緒不會封鎖寫入器的鎖定，從降級時，即使其他執行緒正在等候寫入器的鎖定，因為當使用者放開寫入器鎖定授與讀取器鎖定的所有要求。</span><span class="sxs-lookup"><span data-stu-id="9487d-246">A thread does not block when downgrading from the writer lock, even if other threads are waiting for the writer lock, because all reader-lock requests are granted when the writer lock is released.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9487d-247">下列程式碼範例示範如何要求讀取器的鎖定，將讀取器鎖定升級至寫入器鎖定，再降級為讀取器的鎖定。</span><span class="sxs-lookup"><span data-stu-id="9487d-247">The following code example shows how to request a reader lock, upgrade the reader lock to a writer lock, and downgrade to a reader lock again.</span></span>  
  
 <span data-ttu-id="9487d-248">此程式碼是針對提供之較大範例的一部分<xref:System.Threading.ReaderWriterLock>類別。</span><span class="sxs-lookup"><span data-stu-id="9487d-248">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#5)]
[!code-csharp[System.Threading.ReaderWriterLock#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#5)]
[!code-vb[System.Threading.ReaderWriterLock#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#5)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="9487d-249">執行緒沒有寫入器鎖定。</span><span class="sxs-lookup"><span data-stu-id="9487d-249">The thread does not have the writer lock.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="9487d-250"><paramref name="lockCookie" /> 的位址為 null 指標。</span><span class="sxs-lookup"><span data-stu-id="9487d-250">The address of <paramref name="lockCookie" /> is a null pointer.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="9487d-251">Managed 執行緒處理</span><span class="sxs-lookup"><span data-stu-id="9487d-251">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="9487d-252">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="9487d-252">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~ReaderWriterLock ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!ReaderWriterLock ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="readerWriterLock.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9487d-253">確認釋出資源，並在記憶體回收行程回收 <see cref="T:System.Threading.ReaderWriterLock" /> 物件時執行其他清除作業。</span><span class="sxs-lookup"><span data-stu-id="9487d-253">Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <see cref="T:System.Threading.ReaderWriterLock" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9487d-254">記憶體回收行程呼叫<xref:System.Threading.ReaderWriterLock.Finalize%2A>時目前<xref:System.Threading.ReaderWriterLock>物件已經準備完成。</span><span class="sxs-lookup"><span data-stu-id="9487d-254">The garbage collector calls <xref:System.Threading.ReaderWriterLock.Finalize%2A> when the current <xref:System.Threading.ReaderWriterLock> object is ready to be finalized.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReaderLockHeld">
      <MemberSignature Language="C#" Value="public bool IsReaderLockHeld { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReaderLockHeld" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLock.IsReaderLockHeld" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReaderLockHeld As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReaderLockHeld { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReaderLockHeld : bool" Usage="System.Threading.ReaderWriterLock.IsReaderLockHeld" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9487d-255">取得值，指出目前的執行緒是否掌握讀取器的鎖定。</span><span class="sxs-lookup"><span data-stu-id="9487d-255">Gets a value indicating whether the current thread holds a reader lock.</span></span></summary>
        <value><span data-ttu-id="9487d-256">如果目前的執行緒掌握讀取器的鎖定，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9487d-256"><see langword="true" /> if the current thread holds a reader lock; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9487d-257">下列程式碼範例示範如何使用`IsReaderLockHeld`為了避免死結。</span><span class="sxs-lookup"><span data-stu-id="9487d-257">The following code example demonstrates how to use `IsReaderLockHeld` to avoid deadlocks.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock.IsWriterLockHeld#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock.IsWriterLockHeld/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ReaderWriterLock.IsWriterLockHeld#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock.IsWriterLockHeld/CS/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLock.IsWriterLockHeld#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock.IsWriterLockHeld/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="9487d-258">Managed 執行緒處理</span><span class="sxs-lookup"><span data-stu-id="9487d-258">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="9487d-259">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="9487d-259">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsWriterLockHeld">
      <MemberSignature Language="C#" Value="public bool IsWriterLockHeld { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWriterLockHeld" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLock.IsWriterLockHeld" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsWriterLockHeld As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsWriterLockHeld { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsWriterLockHeld : bool" Usage="System.Threading.ReaderWriterLock.IsWriterLockHeld" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9487d-260">取得值，指出目前的執行緒是否掌握寫入器的鎖定。</span><span class="sxs-lookup"><span data-stu-id="9487d-260">Gets a value indicating whether the current thread holds the writer lock.</span></span></summary>
        <value><span data-ttu-id="9487d-261">如果目前的執行緒掌握寫入器的鎖定，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9487d-261"><see langword="true" /> if the current thread holds the writer lock; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9487d-262">下列程式碼範例示範當嘗試取得已寫入器鎖定的執行緒上的讀取器鎖定`ReaderWriterLock`不會授與讀取器鎖定，但改為遞增 寫入器鎖定上的鎖定計數。</span><span class="sxs-lookup"><span data-stu-id="9487d-262">The following code example demonstrates that when an attempt is made to acquire a reader lock on a thread that has a writer lock, `ReaderWriterLock` does not grant the reader lock but instead increments the lock count on the writer lock.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock.IsWriterLockHeld#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock.IsWriterLockHeld/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ReaderWriterLock.IsWriterLockHeld#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock.IsWriterLockHeld/CS/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLock.IsWriterLockHeld#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock.IsWriterLockHeld/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="9487d-263">Managed 執行緒處理</span><span class="sxs-lookup"><span data-stu-id="9487d-263">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="9487d-264">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="9487d-264">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReleaseLock">
      <MemberSignature Language="C#" Value="public System.Threading.LockCookie ReleaseLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.LockCookie ReleaseLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.ReleaseLock" />
      <MemberSignature Language="VB.NET" Value="Public Function ReleaseLock () As LockCookie" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::LockCookie ReleaseLock();" />
      <MemberSignature Language="F#" Value="member this.ReleaseLock : unit -&gt; System.Threading.LockCookie" Usage="readerWriterLock.ReleaseLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.LockCookie</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9487d-265">無論執行緒取得鎖定的次數為多少，都會釋放鎖定。</span><span class="sxs-lookup"><span data-stu-id="9487d-265">Releases the lock, regardless of the number of times the thread acquired the lock.</span></span></summary>
        <returns><span data-ttu-id="9487d-266"><see cref="T:System.Threading.LockCookie" /> 值，代表釋放的鎖定。</span><span class="sxs-lookup"><span data-stu-id="9487d-266">A <see cref="T:System.Threading.LockCookie" /> value representing the released lock.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9487d-267"><xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> 釋放的讀取器鎖定或寫入器鎖定，不會考慮遞迴鎖定計數。</span><span class="sxs-lookup"><span data-stu-id="9487d-267"><xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> releases the reader lock or writer lock, regardless of the recursive lock count.</span></span> <span data-ttu-id="9487d-268">若要還原狀態的鎖定，其中包括鎖定計數，傳遞<xref:System.Threading.LockCookie>至<xref:System.Threading.ReaderWriterLock.RestoreLock%2A>。</span><span class="sxs-lookup"><span data-stu-id="9487d-268">To restore the state of the lock, including the lock count, pass the <xref:System.Threading.LockCookie> to <xref:System.Threading.ReaderWriterLock.RestoreLock%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9487d-269">下列程式碼範例示範如何使用<xref:System.Threading.ReaderWriterLock.ReleaseLock%2A>執行緒，以及如何還原之後的鎖定狀態已收購方法，以釋出鎖定，不論它多少次。</span><span class="sxs-lookup"><span data-stu-id="9487d-269">The following code example shows how to use the <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> method to release the lock, regardless of how many times it has been acquired by the thread, and how to restore the state of the lock later.</span></span>  
  
 <span data-ttu-id="9487d-270">此程式碼是針對提供之較大範例的一部分<xref:System.Threading.ReaderWriterLock>類別。</span><span class="sxs-lookup"><span data-stu-id="9487d-270">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#6)]
[!code-csharp[System.Threading.ReaderWriterLock#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#6)]
[!code-vb[System.Threading.ReaderWriterLock#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#6)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="9487d-271">Managed 執行緒處理</span><span class="sxs-lookup"><span data-stu-id="9487d-271">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="9487d-272">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="9487d-272">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReleaseReaderLock">
      <MemberSignature Language="C#" Value="public void ReleaseReaderLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseReaderLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.ReleaseReaderLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseReaderLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseReaderLock();" />
      <MemberSignature Language="F#" Value="member this.ReleaseReaderLock : unit -&gt; unit" Usage="readerWriterLock.ReleaseReaderLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9487d-273">減量鎖定計數。</span><span class="sxs-lookup"><span data-stu-id="9487d-273">Decrements the lock count.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9487d-274"><xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A> 減量鎖定計數。</span><span class="sxs-lookup"><span data-stu-id="9487d-274"><xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A> decrements the lock count.</span></span> <span data-ttu-id="9487d-275">當計數到達零時，會釋放鎖定。</span><span class="sxs-lookup"><span data-stu-id="9487d-275">When the count reaches zero, the lock is released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9487d-276">如果執行緒必須寫入器鎖定，則呼叫`ReleaseReaderLock`具有相同的效果，與呼叫<xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A>。</span><span class="sxs-lookup"><span data-stu-id="9487d-276">If a thread has the writer lock, calling `ReleaseReaderLock` has the same effect as calling <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A>.</span></span> <span data-ttu-id="9487d-277">如果執行緒不有任何鎖定，則呼叫`ReleaseReaderLock`會擲回<xref:System.ApplicationException>。</span><span class="sxs-lookup"><span data-stu-id="9487d-277">If a thread has no locks, calling `ReleaseReaderLock` throws an <xref:System.ApplicationException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9487d-278">下列程式碼範例示範如何取得和釋放讀取器的鎖定，以及如何處理時的要求逾時擲回的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9487d-278">The following code example shows how to acquire and release a reader lock, and how to handle the exception thrown when a request times out.</span></span>  
  
 <span data-ttu-id="9487d-279">此程式碼是針對提供之較大範例的一部分<xref:System.Threading.ReaderWriterLock>類別。</span><span class="sxs-lookup"><span data-stu-id="9487d-279">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#3)]
[!code-csharp[System.Threading.ReaderWriterLock#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#3)]
[!code-vb[System.Threading.ReaderWriterLock#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#3)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="9487d-280">執行緒沒有任何讀取器或寫入器鎖定。</span><span class="sxs-lookup"><span data-stu-id="9487d-280">The thread does not have any reader or writer locks.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="9487d-281">Managed 執行緒處理</span><span class="sxs-lookup"><span data-stu-id="9487d-281">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="9487d-282">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="9487d-282">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReleaseWriterLock">
      <MemberSignature Language="C#" Value="public void ReleaseWriterLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseWriterLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.ReleaseWriterLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseWriterLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseWriterLock();" />
      <MemberSignature Language="F#" Value="member this.ReleaseWriterLock : unit -&gt; unit" Usage="readerWriterLock.ReleaseWriterLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9487d-283">減量寫入器鎖定上的鎖定計數。</span><span class="sxs-lookup"><span data-stu-id="9487d-283">Decrements the lock count on the writer lock.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9487d-284"><xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> 減量寫入器的鎖定計數。</span><span class="sxs-lookup"><span data-stu-id="9487d-284"><xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> decrements the writer lock count.</span></span> <span data-ttu-id="9487d-285">當計數到達零時，會釋放寫入器鎖定。</span><span class="sxs-lookup"><span data-stu-id="9487d-285">When the count reaches zero, the writer lock is released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9487d-286">如果執行緒必須讀取器的鎖定或不需要鎖定，則呼叫`ReleaseWriterLock`會擲回<xref:System.ApplicationException>。</span><span class="sxs-lookup"><span data-stu-id="9487d-286">If a thread has a reader lock, or no locks, calling `ReleaseWriterLock` throws an <xref:System.ApplicationException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9487d-287">下列程式碼範例示範如何取得和釋放寫入器鎖定，以及如何處理時的要求逾時擲回的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9487d-287">The following code example shows how to acquire and release a writer lock, and how to handle the exception thrown when a request times out.</span></span>  
  
 <span data-ttu-id="9487d-288">此程式碼是針對提供之較大範例的一部分<xref:System.Threading.ReaderWriterLock>類別。</span><span class="sxs-lookup"><span data-stu-id="9487d-288">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#4)]
[!code-csharp[System.Threading.ReaderWriterLock#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#4)]
[!code-vb[System.Threading.ReaderWriterLock#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#4)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="9487d-289">執行緒沒有寫入器鎖定。</span><span class="sxs-lookup"><span data-stu-id="9487d-289">The thread does not have the writer lock.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="9487d-290">Managed 執行緒處理</span><span class="sxs-lookup"><span data-stu-id="9487d-290">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="9487d-291">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="9487d-291">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RestoreLock">
      <MemberSignature Language="C#" Value="public void RestoreLock (ref System.Threading.LockCookie lockCookie);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RestoreLock(valuetype System.Threading.LockCookie&amp; lockCookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RestoreLock (ByRef lockCookie As LockCookie)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RestoreLock(System::Threading::LockCookie % lockCookie);" />
      <MemberSignature Language="F#" Value="member this.RestoreLock :  -&gt; unit" Usage="readerWriterLock.RestoreLock lockCookie" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lockCookie" Type="System.Threading.LockCookie" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="lockCookie"><span data-ttu-id="9487d-292"><see cref="T:System.Threading.LockCookie" /> 傳回的 <see cref="M:System.Threading.ReaderWriterLock.ReleaseLock" />。</span><span class="sxs-lookup"><span data-stu-id="9487d-292">A <see cref="T:System.Threading.LockCookie" /> returned by <see cref="M:System.Threading.ReaderWriterLock.ReleaseLock" />.</span></span></param>
        <summary><span data-ttu-id="9487d-293">將執行緒的鎖定狀態還原到還沒有呼叫 <see cref="M:System.Threading.ReaderWriterLock.ReleaseLock" /> 之前。</span><span class="sxs-lookup"><span data-stu-id="9487d-293">Restores the lock status of the thread to what it was before calling <see cref="M:System.Threading.ReaderWriterLock.ReleaseLock" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9487d-294">狀態還原`RestoreLock`包含遞迴鎖定計數。</span><span class="sxs-lookup"><span data-stu-id="9487d-294">The state restored by `RestoreLock` includes the recursive lock count.</span></span>  
  
 <span data-ttu-id="9487d-295">如果它嘗試還原另一個執行緒取得寫入器鎖定之後，或如果它嘗試還原另一個執行緒已取得讀取器的鎖定或寫入器鎖定之後的寫入器鎖定的讀取器鎖定的執行緒封鎖。</span><span class="sxs-lookup"><span data-stu-id="9487d-295">A thread blocks if it tries to restore a reader lock after another thread has acquired the writer lock, or if it tries to restore the writer lock after another thread has acquired a reader lock or writer lock.</span></span> <span data-ttu-id="9487d-296">因為`RestoreLock`不接受逾時，您應該謹慎地避免可能的死結。</span><span class="sxs-lookup"><span data-stu-id="9487d-296">Because `RestoreLock` does not accept a time-out, you should take care to avoid possible deadlocks.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="9487d-297">然後再呼叫`RestoreLock`，請確定您已發行的呼叫之後取得的所有鎖定<xref:System.Threading.ReaderWriterLock.ReleaseLock%2A>。</span><span class="sxs-lookup"><span data-stu-id="9487d-297">Before calling `RestoreLock`, make sure you have released all locks acquired since the call to <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A>.</span></span> <span data-ttu-id="9487d-298">例如，執行緒死結 （deadlock) 若已取得讀取器鎖定，然後再嘗試還原較早的寫入器鎖定。</span><span class="sxs-lookup"><span data-stu-id="9487d-298">For example, a thread deadlocks if it acquires a reader lock, and then attempts to restore an earlier writer lock.</span></span> <span data-ttu-id="9487d-299">使用<xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A>和<xref:System.Threading.ReaderWriterLock.IsWriterLockHeld%2A>來偵測這類其他鎖定。</span><span class="sxs-lookup"><span data-stu-id="9487d-299">Use <xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A> and <xref:System.Threading.ReaderWriterLock.IsWriterLockHeld%2A> to detect such additional locks.</span></span>  
  
 <span data-ttu-id="9487d-300">請勿使用<xref:System.Threading.LockCookie>傳回<xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>。</span><span class="sxs-lookup"><span data-stu-id="9487d-300">Do not use a <xref:System.Threading.LockCookie> returned from <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9487d-301">下列程式碼範例示範如何使用<xref:System.Threading.ReaderWriterLock.ReleaseLock%2A>執行緒，以及如何還原之後的鎖定狀態已收購方法，以釋出鎖定，不論它多少次。</span><span class="sxs-lookup"><span data-stu-id="9487d-301">The following code example shows how to use the <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> method to release the lock, regardless of how many times it has been acquired by the thread, and how to restore the state of the lock later.</span></span>  
  
 <span data-ttu-id="9487d-302">此程式碼是針對提供之較大範例的一部分<xref:System.Threading.ReaderWriterLock>類別。</span><span class="sxs-lookup"><span data-stu-id="9487d-302">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#6)]
[!code-csharp[System.Threading.ReaderWriterLock#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#6)]
[!code-vb[System.Threading.ReaderWriterLock#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#6)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="9487d-303"><paramref name="lockCookie" /> 的位址為 null 指標。</span><span class="sxs-lookup"><span data-stu-id="9487d-303">The address of <paramref name="lockCookie" /> is a null pointer.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="9487d-304">Managed 執行緒處理</span><span class="sxs-lookup"><span data-stu-id="9487d-304">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="9487d-305">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="9487d-305">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="UpgradeToWriterLock">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9487d-306">讀取器鎖定升級至寫入器鎖定。</span><span class="sxs-lookup"><span data-stu-id="9487d-306">Upgrades a reader lock to the writer lock.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UpgradeToWriterLock">
      <MemberSignature Language="C#" Value="public System.Threading.LockCookie UpgradeToWriterLock (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.LockCookie UpgradeToWriterLock(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function UpgradeToWriterLock (millisecondsTimeout As Integer) As LockCookie" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::LockCookie UpgradeToWriterLock(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.UpgradeToWriterLock : int -&gt; System.Threading.LockCookie" Usage="readerWriterLock.UpgradeToWriterLock millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.LockCookie</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="9487d-307">逾時以毫秒為單位。</span><span class="sxs-lookup"><span data-stu-id="9487d-307">The time-out in milliseconds.</span></span></param>
        <summary><span data-ttu-id="9487d-308">使用逾時值 <see langword="Int32" />，將讀取器鎖定升級至寫入器鎖定。</span><span class="sxs-lookup"><span data-stu-id="9487d-308">Upgrades a reader lock to the writer lock, using an <see langword="Int32" /> value for the time-out.</span></span></summary>
        <returns><span data-ttu-id="9487d-309"><see cref="T:System.Threading.LockCookie" /> 值。</span><span class="sxs-lookup"><span data-stu-id="9487d-309">A <see cref="T:System.Threading.LockCookie" /> value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9487d-310">當執行緒呼叫`UpgradeToWriterLock`發行讀取器鎖定時，不會考慮鎖定計數，和，執行緒就會將寫入器鎖定的佇列的結尾。</span><span class="sxs-lookup"><span data-stu-id="9487d-310">When a thread calls `UpgradeToWriterLock` the reader lock is released, regardless of the lock count, and the thread goes to the end of the queue for the writer lock.</span></span> <span data-ttu-id="9487d-311">因此，其他執行緒可能會寫入要求的升級會授與寫入器鎖定的執行緒之前的資源。</span><span class="sxs-lookup"><span data-stu-id="9487d-311">Thus, other threads might write to the resource before the thread that requested the upgrade is granted the writer lock.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9487d-312">逾時例外狀況不會擲回呼叫執行緒直到<xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>方法可以重新取得讀取鎖定。</span><span class="sxs-lookup"><span data-stu-id="9487d-312">The time-out exception is not thrown until the thread that called the <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> method can reacquire the reader lock.</span></span> <span data-ttu-id="9487d-313">如果沒有其他執行緒等候寫入器鎖定，這會立即發生。</span><span class="sxs-lookup"><span data-stu-id="9487d-313">If there are no other threads waiting for the writer lock, this happens immediately.</span></span> <span data-ttu-id="9487d-314">不過，如果另一個執行緒已排入佇列的寫入器鎖定時，執行緒的呼叫<xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>方法不能重新取得讀取鎖定，直到所有目前的讀取器已釋放其鎖定，以及一個執行緒已經取得及釋放寫入器鎖定。</span><span class="sxs-lookup"><span data-stu-id="9487d-314">However, if another thread is queued for the writer lock, the thread that called the <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> method cannot reacquire the reader lock until all current readers have released their locks, and one thread has acquired and released the writer lock.</span></span> <span data-ttu-id="9487d-315">這是 true，即使要求寫入器鎖定的執行緒在目前的執行緒呼叫之後要求<xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="9487d-315">This is true even if the other thread that requested the writer lock requested it after the current thread called the <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> method.</span></span>  
  
 <span data-ttu-id="9487d-316">若要還原的鎖定狀態，請呼叫<xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A>使用<xref:System.Threading.LockCookie>所傳回`UpgradeToWriterLock`。</span><span class="sxs-lookup"><span data-stu-id="9487d-316">To restore the lock state, call <xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A> using the <xref:System.Threading.LockCookie> returned by `UpgradeToWriterLock`.</span></span> <span data-ttu-id="9487d-317">請勿使用此`LockCookie`與<xref:System.Threading.ReaderWriterLock.RestoreLock%2A>。</span><span class="sxs-lookup"><span data-stu-id="9487d-317">Do not use this `LockCookie` with <xref:System.Threading.ReaderWriterLock.RestoreLock%2A>.</span></span>  
  
 <span data-ttu-id="9487d-318">當執行緒必須沒有讀取器的鎖定時，請勿使用`UpgradeToWriterLock`。</span><span class="sxs-lookup"><span data-stu-id="9487d-318">When a thread has no reader lock, do not use `UpgradeToWriterLock`.</span></span> <span data-ttu-id="9487d-319">請改用 <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>。</span><span class="sxs-lookup"><span data-stu-id="9487d-319">Use <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A> instead.</span></span>  
  
 <span data-ttu-id="9487d-320">有效的逾時值，請參閱<xref:System.Threading.ReaderWriterLock>。</span><span class="sxs-lookup"><span data-stu-id="9487d-320">For valid time-out values, see <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9487d-321">下列程式碼範例示範如何要求讀取器的鎖定，將讀取器鎖定升級至寫入器鎖定，再降級為讀取器的鎖定。</span><span class="sxs-lookup"><span data-stu-id="9487d-321">The following code example shows how to request a reader lock, upgrade the reader lock to a writer lock, and downgrade to a reader lock again.</span></span>  
  
 <span data-ttu-id="9487d-322">此程式碼是針對提供之較大範例的一部分<xref:System.Threading.ReaderWriterLock>類別。</span><span class="sxs-lookup"><span data-stu-id="9487d-322">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#5)]
[!code-csharp[System.Threading.ReaderWriterLock#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#5)]
[!code-vb[System.Threading.ReaderWriterLock#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#5)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="9487d-323"><paramref name="millisecondsTimeout" /> 在授與鎖定要求前過期。</span><span class="sxs-lookup"><span data-stu-id="9487d-323"><paramref name="millisecondsTimeout" /> expires before the lock request is granted.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="9487d-324">Managed 執行緒處理</span><span class="sxs-lookup"><span data-stu-id="9487d-324">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="9487d-325">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="9487d-325">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="UpgradeToWriterLock">
      <MemberSignature Language="C#" Value="public System.Threading.LockCookie UpgradeToWriterLock (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.LockCookie UpgradeToWriterLock(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function UpgradeToWriterLock (timeout As TimeSpan) As LockCookie" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::LockCookie UpgradeToWriterLock(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.UpgradeToWriterLock : TimeSpan -&gt; System.Threading.LockCookie" Usage="readerWriterLock.UpgradeToWriterLock timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LockCookie</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="9487d-326"><see langword="TimeSpan" />，指定逾時的時段。</span><span class="sxs-lookup"><span data-stu-id="9487d-326">The <see langword="TimeSpan" /> specifying the time-out period.</span></span></param>
        <summary><span data-ttu-id="9487d-327">使用逾時值 <see langword="TimeSpan" />，將讀取器鎖定升級至寫入器鎖定。</span><span class="sxs-lookup"><span data-stu-id="9487d-327">Upgrades a reader lock to the writer lock, using a <see langword="TimeSpan" /> value for the time-out.</span></span></summary>
        <returns><span data-ttu-id="9487d-328"><see cref="T:System.Threading.LockCookie" /> 值。</span><span class="sxs-lookup"><span data-stu-id="9487d-328">A <see cref="T:System.Threading.LockCookie" /> value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9487d-329">當執行緒呼叫`UpgradeToWriterLock`發行讀取器鎖定時，不會考慮鎖定計數，和，執行緒就會將寫入器鎖定的佇列的結尾。</span><span class="sxs-lookup"><span data-stu-id="9487d-329">When a thread calls `UpgradeToWriterLock` the reader lock is released, regardless of the lock count, and the thread goes to the end of the queue for the writer lock.</span></span> <span data-ttu-id="9487d-330">因此，其他執行緒可能會寫入要求的升級會授與寫入器鎖定的執行緒之前的資源。</span><span class="sxs-lookup"><span data-stu-id="9487d-330">Thus, other threads might write to the resource before the thread that requested the upgrade is granted the writer lock.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9487d-331">逾時例外狀況不會擲回呼叫執行緒直到<xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>方法可以重新取得讀取鎖定。</span><span class="sxs-lookup"><span data-stu-id="9487d-331">The time-out exception is not thrown until the thread that called the <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> method can reacquire the reader lock.</span></span> <span data-ttu-id="9487d-332">如果沒有其他執行緒等候寫入器鎖定，這會立即發生。</span><span class="sxs-lookup"><span data-stu-id="9487d-332">If there are no other threads waiting for the writer lock, this happens immediately.</span></span> <span data-ttu-id="9487d-333">不過，如果另一個執行緒已排入佇列的寫入器鎖定時，執行緒的呼叫<xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>方法不能重新取得讀取鎖定，直到所有目前的讀取器已釋放其鎖定，以及一個執行緒已經取得及釋放寫入器鎖定。</span><span class="sxs-lookup"><span data-stu-id="9487d-333">However, if another thread is queued for the writer lock, the thread that called the <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> method cannot reacquire the reader lock until all current readers have released their locks, and one thread has acquired and released the writer lock.</span></span> <span data-ttu-id="9487d-334">這是 true，即使要求寫入器鎖定的執行緒在目前的執行緒呼叫之後要求<xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="9487d-334">This is true even if the other thread that requested the writer lock requested it after the current thread called the <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> method.</span></span>  
  
 <span data-ttu-id="9487d-335">若要還原的鎖定狀態，請呼叫<xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A>使用<xref:System.Threading.LockCookie>所傳回`UpgradeToWriterLock`。</span><span class="sxs-lookup"><span data-stu-id="9487d-335">To restore the lock state, call <xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A> using the <xref:System.Threading.LockCookie> returned by `UpgradeToWriterLock`.</span></span> <span data-ttu-id="9487d-336">請勿使用此`LockCookie`與<xref:System.Threading.ReaderWriterLock.RestoreLock%2A>。</span><span class="sxs-lookup"><span data-stu-id="9487d-336">Do not use this `LockCookie` with <xref:System.Threading.ReaderWriterLock.RestoreLock%2A>.</span></span>  
  
 <span data-ttu-id="9487d-337">當執行緒必須沒有讀取器的鎖定時，請勿使用`UpgradeToWriterLock`。</span><span class="sxs-lookup"><span data-stu-id="9487d-337">When a thread has no reader lock, do not use `UpgradeToWriterLock`.</span></span> <span data-ttu-id="9487d-338">請改用 <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>。</span><span class="sxs-lookup"><span data-stu-id="9487d-338">Use <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A> instead.</span></span>  
  
 <span data-ttu-id="9487d-339">有效的逾時值，請參閱<xref:System.Threading.ReaderWriterLock>。</span><span class="sxs-lookup"><span data-stu-id="9487d-339">For valid time-out values, see <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="9487d-340"><paramref name="timeout" /> 在授與鎖定要求前過期。</span><span class="sxs-lookup"><span data-stu-id="9487d-340"><paramref name="timeout" /> expires before the lock request is granted.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9487d-341"><paramref name="timeout" /> 可以指定 -1 毫秒以外的負值。</span><span class="sxs-lookup"><span data-stu-id="9487d-341"><paramref name="timeout" /> specifies a negative value other than -1 milliseconds.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="9487d-342">Managed 執行緒處理</span><span class="sxs-lookup"><span data-stu-id="9487d-342">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="9487d-343">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="9487d-343">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriterSeqNum">
      <MemberSignature Language="C#" Value="public int WriterSeqNum { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WriterSeqNum" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLock.WriterSeqNum" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WriterSeqNum As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int WriterSeqNum { int get(); };" />
      <MemberSignature Language="F#" Value="member this.WriterSeqNum : int" Usage="System.Threading.ReaderWriterLock.WriterSeqNum" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9487d-344">取得目前的序號。</span><span class="sxs-lookup"><span data-stu-id="9487d-344">Gets the current sequence number.</span></span></summary>
        <value><span data-ttu-id="9487d-345">目前的序號。</span><span class="sxs-lookup"><span data-stu-id="9487d-345">The current sequence number.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9487d-346">順序號碼會漸次每當執行緒取得寫入器鎖定。</span><span class="sxs-lookup"><span data-stu-id="9487d-346">The sequence number increases whenever a thread acquires the writer lock.</span></span> <span data-ttu-id="9487d-347">您可以儲存的序號，並將它傳遞給<xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A>稍後，如果您想要判斷是否其他執行緒已經取得寫入器鎖定同時。</span><span class="sxs-lookup"><span data-stu-id="9487d-347">You can save the sequence number and pass it to <xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A> at a later time, if you want to determine whether other threads have acquired the writer lock in the meantime.</span></span>  
  
 <span data-ttu-id="9487d-348">您可以使用`WriterSeqNum`改善應用程式效能。</span><span class="sxs-lookup"><span data-stu-id="9487d-348">You can use `WriterSeqNum` to improve application performance.</span></span> <span data-ttu-id="9487d-349">例如，執行緒可能會快取的讀取器鎖定時取得的資訊。</span><span class="sxs-lookup"><span data-stu-id="9487d-349">For example, a thread might cache the information it obtains while holding a reader lock.</span></span> <span data-ttu-id="9487d-350">之後釋出和更新版本重新取得鎖定，則執行緒可以決定其他執行緒是否已藉由呼叫寫入至資源`AnyWritersSince`; 如果沒有，可以使用快取的資訊。</span><span class="sxs-lookup"><span data-stu-id="9487d-350">After releasing and later reacquiring the lock, the thread can determine whether other threads have written to the resource by calling `AnyWritersSince`; if not, the cached information can be used.</span></span> <span data-ttu-id="9487d-351">高讀取鎖定所保護的資訊時，這個技術非常有用例如，執行資料庫查詢。</span><span class="sxs-lookup"><span data-stu-id="9487d-351">This technique is useful when reading the information protected by the lock is expensive; for example, running a database query.</span></span>  
  
 <span data-ttu-id="9487d-352">呼叫端必須將讀取器鎖定或寫入器鎖定保留順序的序號，才能發揮作用。</span><span class="sxs-lookup"><span data-stu-id="9487d-352">The caller must be holding a reader lock or a writer lock in order for the sequence number to be useful.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9487d-353">下列程式碼範例示範如何使用<xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A>屬性和<xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A>方法，以判斷另一個執行緒是否會取得受保護資源的寫入器鎖定，因為目前的執行緒上一次保留的寫入器鎖定。</span><span class="sxs-lookup"><span data-stu-id="9487d-353">The following code example shows how to use the <xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A> property and the <xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A> method to determine whether another thread acquired the writer lock on the protected resource since the current thread last held the writer lock.</span></span>  
  
 <span data-ttu-id="9487d-354">此程式碼是針對提供之較大範例的一部分<xref:System.Threading.ReaderWriterLock>類別。</span><span class="sxs-lookup"><span data-stu-id="9487d-354">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#6)]
[!code-csharp[System.Threading.ReaderWriterLock#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#6)]
[!code-vb[System.Threading.ReaderWriterLock#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#6)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="9487d-355">Managed 執行緒處理</span><span class="sxs-lookup"><span data-stu-id="9487d-355">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="9487d-356">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="9487d-356">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>