<Type Name="ParameterizedThreadStart" FullName="System.Threading.ParameterizedThreadStart">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1f89ab27a5d48225389ff0ad41c3bbc265121c09" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30528062" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void ParameterizedThreadStart(object obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ParameterizedThreadStart extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ParameterizedThreadStart" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub ParameterizedThreadStart(obj As Object)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void ParameterizedThreadStart(System::Object ^ obj);" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="obj" Type="System.Object" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="obj">
      <span data-ttu-id="4ca59-101">物件，包含執行緒程序的資料。</span>
      <span class="sxs-lookup">
        <span data-stu-id="4ca59-101">An object that contains data for the thread procedure.</span>
      </span>
    </param>
    <summary>
      <span data-ttu-id="4ca59-102">代表在 <see cref="T:System.Threading.Thread" /> 上執行的方法。</span>
      <span class="sxs-lookup">
        <span data-stu-id="4ca59-102">Represents the method that executes on a <see cref="T:System.Threading.Thread" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4ca59-103">建立 managed 的執行緒時，所表示的執行緒執行的方法：</span><span class="sxs-lookup"><span data-stu-id="4ca59-103">When a managed thread is created, the method that executes on the thread is represented by:</span></span>  
  
-   <span data-ttu-id="4ca59-104">A<xref:System.Threading.ThreadStart>委派傳遞給<xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=nameWithType>建構函式。</span><span class="sxs-lookup"><span data-stu-id="4ca59-104">A <xref:System.Threading.ThreadStart> delegate that is passed to the <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=nameWithType> constructor.</span></span>  <span data-ttu-id="4ca59-105">任何方法沒有參數並傳回`void`在 C# 或`Sub`在 Visual Basic 中的程序可以表示的委派。</span><span class="sxs-lookup"><span data-stu-id="4ca59-105">Any method that has no parameters and that returns `void` in C# or is a `Sub` procedure in Visual Basic can represent the delegate.</span></span>  
  
-   <span data-ttu-id="4ca59-106">A<xref:System.Threading.ParameterizedThreadStart>委派傳遞給<xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29?displayProperty=nameWithType>建構函式。</span><span class="sxs-lookup"><span data-stu-id="4ca59-106">A <xref:System.Threading.ParameterizedThreadStart> delegate that is passed to the <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="4ca59-107">具有單一參數類型的任何方法<xref:System.Object>，而且可傳回 void，在 C# 或 Visual Basic 中的子程序可代表委派。</span><span class="sxs-lookup"><span data-stu-id="4ca59-107">Any method that has a single parameter of type <xref:System.Object> and that returns void in C# or is a Sub procedure in Visual Basic can represent the delegate.</span></span>  
  
 <span data-ttu-id="4ca59-108">執行緒不會開始執行之前<xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType>方法呼叫。</span><span class="sxs-lookup"><span data-stu-id="4ca59-108">The thread does not begin executing until the <xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType> method is called.</span></span> <span data-ttu-id="4ca59-109"><xref:System.Threading.ThreadStart>或<xref:System.Threading.ParameterizedThreadStart>，在執行緒上叫用委派和委派所表示之方法的第一行中開始執行。</span><span class="sxs-lookup"><span data-stu-id="4ca59-109">The <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate is invoked on the thread, and execution begins at the first line of the method represented by the delegate.</span></span> <span data-ttu-id="4ca59-110">如果是<xref:System.Threading.ParameterizedThreadStart>委派，會傳遞至物件<xref:System.Threading.Thread.Start%28System.Object%29>方法傳遞給委派。</span><span class="sxs-lookup"><span data-stu-id="4ca59-110">In the case of the <xref:System.Threading.ParameterizedThreadStart> delegate, the object that is passed to the <xref:System.Threading.Thread.Start%28System.Object%29> method is passed to the delegate.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4ca59-111">Visual Basic 和 C# 使用者可以省略<xref:System.Threading.ThreadStart>或<xref:System.Threading.ParameterizedThreadStart>委派建構函式建立執行緒時。</span><span class="sxs-lookup"><span data-stu-id="4ca59-111">Visual Basic and C# users can omit the <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate constructor when creating a thread.</span></span> <span data-ttu-id="4ca59-112">在 Visual Basic 使用`AddressOf`運算子傳遞自己的方法時<xref:System.Threading.Thread.%23ctor%2A>建構函式，例如`Dim t As New Thread(AddressOf ThreadProc)`。</span><span class="sxs-lookup"><span data-stu-id="4ca59-112">In Visual Basic, use the `AddressOf` operator when passing your method to the <xref:System.Threading.Thread.%23ctor%2A> constructor; for example, `Dim t As New Thread(AddressOf ThreadProc)`.</span></span> <span data-ttu-id="4ca59-113">在 C# 中，只需要指定執行緒的程序的名稱。</span><span class="sxs-lookup"><span data-stu-id="4ca59-113">In C#, simply specify the name of the thread procedure.</span></span> <span data-ttu-id="4ca59-114">編譯器會選擇正確的委派建構函式。</span><span class="sxs-lookup"><span data-stu-id="4ca59-114">The compiler selects the correct delegate constructor.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4ca59-115">當您建立<xref:System.Threading.ParameterizedThreadStart>委派 c + + 中的第一個參數的建構函式的執行個體方法的執行個體變數。</span><span class="sxs-lookup"><span data-stu-id="4ca59-115">When you create a <xref:System.Threading.ParameterizedThreadStart> delegate for an instance method in C++, the first parameter of the constructor is the instance variable.</span></span> <span data-ttu-id="4ca59-116">對於靜態方法，建構函式的第一個參數為零。</span><span class="sxs-lookup"><span data-stu-id="4ca59-116">For a static method, the first parameter of the constructor is zero.</span></span> <span data-ttu-id="4ca59-117">對於靜態方法，委派建構函式只需要一個參數： 回呼方法，類別名稱所限定的位址。</span><span class="sxs-lookup"><span data-stu-id="4ca59-117">For a static method, the delegate constructor requires only one parameter: the address of the callback method, qualified by the class name.</span></span>  
  
 <span data-ttu-id="4ca59-118"><xref:System.Threading.ParameterizedThreadStart>委派和<xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType>方法多載即可輕易地將資料傳遞給執行緒的程序，但這項技術不是類型安全因為任何物件可以傳遞至<xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="4ca59-118">The <xref:System.Threading.ParameterizedThreadStart> delegate and the <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> method overload make it easy to pass data to a thread procedure, but this technique is not type safe because any object can be passed to <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType>.</span></span> <span data-ttu-id="4ca59-119">將執行緒的程序與資料欄位放入背景工作物件是更穩固的方式，將資料傳遞給執行緒的程序。</span><span class="sxs-lookup"><span data-stu-id="4ca59-119">A more robust way to pass data to a thread procedure is to put both the thread procedure and the data fields into a worker object.</span></span> <span data-ttu-id="4ca59-120">如需詳細資訊，請參閱[建立執行緒和開始時間傳遞資料](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md)。</span><span class="sxs-lookup"><span data-stu-id="4ca59-120">For more information, see [Creating Threads and Passing Data at Start Time](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md).</span></span>  
  
 <span data-ttu-id="4ca59-121"><xref:System.Threading.ParameterizedThreadStart>委派支援只有一個參數。</span><span class="sxs-lookup"><span data-stu-id="4ca59-121">The <xref:System.Threading.ParameterizedThreadStart> delegate supports only a single parameter.</span></span> <span data-ttu-id="4ca59-122">您可以傳遞多個資料項目<xref:System.Threading.ParameterizedThreadStart>藉由下列其中一個參數：</span><span class="sxs-lookup"><span data-stu-id="4ca59-122">You can pass multiple data items to the <xref:System.Threading.ParameterizedThreadStart> by making that parameter one of the following:</span></span>  
  
-   <span data-ttu-id="4ca59-123">陣列。</span><span class="sxs-lookup"><span data-stu-id="4ca59-123">An array.</span></span>  
  
-   <span data-ttu-id="4ca59-124">集合型別上，如果所有資料的項目都是相同的型別。</span><span class="sxs-lookup"><span data-stu-id="4ca59-124">A collection type, if all of the data items are of the same type.</span></span>  
  
-   <span data-ttu-id="4ca59-125">元組類型，例如<xref:System.Tuple%602>或<xref:System.Tuple%604>。</span><span class="sxs-lookup"><span data-stu-id="4ca59-125">A tuple type, such as <xref:System.Tuple%602> or <xref:System.Tuple%604>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4ca59-126">下列程式碼範例使用<xref:System.Threading.ParameterizedThreadStart>執行靜態方法和執行個體方法的委派。</span><span class="sxs-lookup"><span data-stu-id="4ca59-126">The following code example uses a <xref:System.Threading.ParameterizedThreadStart> delegate to execute a static method and an instance method.</span></span> <span data-ttu-id="4ca59-127">第一個<xref:System.Threading.ParameterizedThreadStart>委派由靜態`DoWork`，第二個方法由執行個體`DoMoreWork`方法。</span><span class="sxs-lookup"><span data-stu-id="4ca59-127">The first <xref:System.Threading.ParameterizedThreadStart> delegate is represented by the static `DoWork` method and the second is represented by the instance `DoMoreWork` method.</span></span> <span data-ttu-id="4ca59-128">這兩種方法比對<xref:System.Threading.ParameterizedThreadStart>委派簽章; 亦即，它們需要類型的單一參數<xref:System.Object>且沒有傳回值。</span><span class="sxs-lookup"><span data-stu-id="4ca59-128">Both methods match the <xref:System.Threading.ParameterizedThreadStart> delegate signature; that is, they have a single parameter of type <xref:System.Object> and don't return a value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4ca59-129">Visual Basic 和 C# 編譯器推斷<xref:System.Threading.ParameterizedThreadStart>委派的簽章`DoWork`和`DoMoreWork`方法，並呼叫正確的建構函式。</span><span class="sxs-lookup"><span data-stu-id="4ca59-129">The Visual Basic and C# compilers infer the <xref:System.Threading.ParameterizedThreadStart> delegate from the signatures of the `DoWork` and `DoMoreWork` methods, and call the correct constructor.</span></span> <span data-ttu-id="4ca59-130">因此，沒有明確建構函式呼叫程式碼中。</span><span class="sxs-lookup"><span data-stu-id="4ca59-130">Thus, there is no explicit constructor call in the code.</span></span>  
  
 [!code-cpp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CS/source.cs#1)]
 [!code-vb[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.ThreadStart" />
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="Overload:System.Threading.Thread.Start" />
    <altmember cref="T:System.AppDomain" />
  </Docs>
</Type>