<Type Name="ParameterizedThreadStart" FullName="System.Threading.ParameterizedThreadStart">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6367040f3868461a31ceec837781de60b418c2f6" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48762348" /></Metadata><TypeSignature Language="C#" Value="public delegate void ParameterizedThreadStart(object obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ParameterizedThreadStart extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ParameterizedThreadStart" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub ParameterizedThreadStart(obj As Object)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void ParameterizedThreadStart(System::Object ^ obj);" />
  <TypeSignature Language="F#" Value="type ParameterizedThreadStart = delegate of obj -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="obj" Type="System.Object" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="obj">物件，包含執行緒程序的資料。</param>
    <summary>表示在 <see cref="T:System.Threading.Thread" /> 上執行的方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 建立 managed 的執行緒時，會表示為的執行緒執行的方法：  
  
-   A<xref:System.Threading.ThreadStart>傳遞至委派<xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=nameWithType>建構函式。  任何方法沒有參數並傳回`void`在 C# 或`Sub`Visual Basic 中的程序可代表委派。  
  
-   A<xref:System.Threading.ParameterizedThreadStart>傳遞至委派<xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29?displayProperty=nameWithType>建構函式。 具有單一參數型別的任何方法<xref:System.Object>，而且，會傳回 void 在 C# 或 Visual Basic 中的子程序可代表委派。  
  
 執行緒不會開始執行到<xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType>呼叫方法。 <xref:System.Threading.ThreadStart>或<xref:System.Threading.ParameterizedThreadStart>的執行緒上叫用委派時，委派所表示之方法的第一行開始執行。 若是<xref:System.Threading.ParameterizedThreadStart>委派，會傳遞至物件<xref:System.Threading.Thread.Start%28System.Object%29>方法傳遞給委派。  
  
> [!NOTE]
>  Visual Basic 和 C# 的使用者可以省略<xref:System.Threading.ThreadStart>或<xref:System.Threading.ParameterizedThreadStart>委派建構函式建立執行緒時。 在 Visual Basic 中使用`AddressOf`運算子傳遞自己的方法時<xref:System.Threading.Thread.%23ctor%2A>建構函式，例如`Dim t As New Thread(AddressOf ThreadProc)`。 在 C# 中，只需指定執行緒的程序的名稱。 編譯器會選取正確的委派建構函式。  
  
> [!NOTE]
>  當您建立<xref:System.Threading.ParameterizedThreadStart>委派執行個體方法，在 c + +，建構函式的第一個參數是執行個體變數。 對於靜態方法，建構函式的第一個參數為零。 對於靜態方法，委派建構函式只需要一個參數： 回呼方法中，類別名稱所限定的位址。  
  
 <xref:System.Threading.ParameterizedThreadStart>委派並<xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType>方法多載輕鬆地將資料傳遞至執行緒程序，但這項技術不安全的型別因為任何物件可以傳遞至<xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType>。 更穩固的方式，將資料傳遞至執行緒程序是進入背景工作物件中的執行緒程序和資料欄位。 如需詳細資訊，請參閱 <<c0> [ 建立的執行緒和開始時間傳遞資料](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md)。  
  
 <xref:System.Threading.ParameterizedThreadStart>委派支援只有一個參數。 您可以傳遞至多個資料項目<xref:System.Threading.ParameterizedThreadStart>藉由該參數的下列其中一個：  
  
-   陣列。  
  
-   集合型別上，如果所有資料的項目屬於相同的型別。  
  
-   Tuple 類型，例如<xref:System.Tuple%602>或<xref:System.Tuple%604>。  
  
   
  
## Examples  
 下列程式碼範例使用<xref:System.Threading.ParameterizedThreadStart>執行靜態方法和執行個體方法的委派。 第一個<xref:System.Threading.ParameterizedThreadStart>委派由靜態`DoWork`方法和第二個執行個體所表示`DoMoreWork`方法。 這兩種方法比對<xref:System.Threading.ParameterizedThreadStart>委派簽章; 亦即，它們需要類型的單一參數<xref:System.Object>且不傳回值。  
  
> [!NOTE]
>  Visual Basic 和 C# 編譯器推斷<xref:System.Threading.ParameterizedThreadStart>委派的簽章`DoWork`和`DoMoreWork`方法，並呼叫正確的建構函式。 因此，沒有明確的建構函式呼叫程式碼中。  
  
 [!code-cpp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CS/source.cs#1)]
 [!code-vb[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.ThreadStart" />
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="Overload:System.Threading.Thread.Start" />
    <altmember cref="T:System.AppDomain" />
    <related type="Article" href="~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md">建立執行緒</related>
  </Docs>
</Type>