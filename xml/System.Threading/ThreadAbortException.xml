<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ThreadAbortException.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac51b2a2f2697e92949b7f739964f5f510bbcbe3e0a.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1b2a2f2697e92949b7f739964f5f510bbcbe3e0a</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.ThreadAbortException">
          <source>The exception that is thrown when a call is made to the <ph id="ph1">&lt;see cref="M:System.Threading.Thread.Abort(System.Object)" /&gt;</ph> method.</source>
          <target state="translated">對 <ph id="ph1">&lt;see cref="M:System.Threading.Thread.Abort(System.Object)" /&gt;</ph> 方法呼叫時所擲回的例外狀況。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Threading.ThreadAbortException">
          <source>This class cannot be inherited.</source>
          <target state="translated">這個類別無法被繼承。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadAbortException">
          <source>When a call is made to the <ph id="ph1">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph> method to destroy a thread, the common language runtime throws a <ph id="ph2">&lt;xref:System.Threading.ThreadAbortException&gt;</ph>.</source>
          <target state="translated">進行呼叫以<ph id="ph1">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph>終結執行緒時，common language runtime 方法會擲回<ph id="ph2">&lt;xref:System.Threading.ThreadAbortException&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadAbortException">
          <source><ph id="ph1">&lt;xref:System.Threading.ThreadAbortException&gt;</ph> is a special exception that can be caught, but it will automatically be raised again at the end of the <ph id="ph2">`catch`</ph> block.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ThreadAbortException&gt;</ph> 是特殊的例外狀況可以攔截，但是它會自動再次引發的結尾<ph id="ph2">`catch`</ph>區塊。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadAbortException">
          <source>When this exception is raised, the runtime executes all the <ph id="ph1">`finally`</ph> blocks before ending the thread.</source>
          <target state="translated">當產生這個例外狀況時，執行階段會執行所有<ph id="ph1">`finally`</ph>區塊結束的執行緒之前。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadAbortException">
          <source>Because the thread can do an unbounded computation in the <ph id="ph1">`finally`</ph> blocks or call <ph id="ph2">&lt;xref:System.Threading.Thread.ResetAbort%2A?displayProperty=nameWithType&gt;</ph> to cancel the abort, there is no guarantee that the thread will ever end.</source>
          <target state="translated">因為執行緒可以進行無限制的計算<ph id="ph1">`finally`</ph>區塊或呼叫<ph id="ph2">&lt;xref:System.Threading.Thread.ResetAbort%2A?displayProperty=nameWithType&gt;</ph>取消中止，也不會保證曾經將會結束執行緒。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadAbortException">
          <source>If you want to wait until the aborted thread has ended, you can call the <ph id="ph1">&lt;xref:System.Threading.Thread.Join%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">如果您想要等到被中止的執行緒已結束，您可以呼叫<ph id="ph1">&lt;xref:System.Threading.Thread.Join%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadAbortException">
          <source><ph id="ph1">&lt;xref:System.Threading.Thread.Join%2A&gt;</ph> is a blocking call that does not return until the thread actually stops executing.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Thread.Join%2A&gt;</ph> 是封鎖呼叫執行緒實際上會停止執行之前不會傳回。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadAbortException">
          <source>When the common language runtime (CLR) stops background threadsafter all foreground threads in a managed executable have ended, it does not use <ph id="ph1">&lt;xref:System.Threading.Thread.Abort%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">當 common language runtime (CLR) 停止背景 threadsafter managed 可執行檔中的所有前景執行緒已都結束時，它不會使用<ph id="ph1">&lt;xref:System.Threading.Thread.Abort%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadAbortException">
          <source>Therefore, you cannot use <ph id="ph1">&lt;xref:System.Threading.ThreadAbortException&gt;</ph> to detect when background threads are being terminated by the CLR.</source>
          <target state="translated">因此，您無法使用<ph id="ph1">&lt;xref:System.Threading.ThreadAbortException&gt;</ph>偵測時，clr 即將終止背景執行緒。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadAbortException">
          <source><ph id="ph1">&lt;xref:System.Threading.ThreadAbortException&gt;</ph> uses the HRESULT COR_E_THREADABORTED, which has the value 0x80131530.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ThreadAbortException&gt;</ph> 會使用 HRESULT COR_E_THREADABORTED，0x80131530 的值。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadAbortException">
          <source>The value of the inherited <ph id="ph1">&lt;xref:System.Exception.Data%2A&gt;</ph> property is always <ph id="ph2">`null`</ph>.</source>
          <target state="translated">繼承的值<ph id="ph1">&lt;xref:System.Exception.Data%2A&gt;</ph>屬性一律會是<ph id="ph2">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadAbortException">
          <source>The following example demonstrates aborting a thread.</source>
          <target state="translated">下列範例會示範中止執行緒。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadAbortException">
          <source>The thread that receives the <ph id="ph1">`ThreadAbortException`</ph> uses the <ph id="ph2">&lt;xref:System.Threading.Thread.ResetAbort%2A&gt;</ph> method to cancel the abort request and continue executing.</source>
          <target state="translated">接收執行緒<ph id="ph1">`ThreadAbortException`</ph>使用<ph id="ph2">&lt;xref:System.Threading.Thread.ResetAbort%2A&gt;</ph>方法來取消中止要求，並繼續執行。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadAbortException">
          <source>This code produces the following output:</source>
          <target state="translated">此程式碼會產生下列輸出：</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="P:System.Threading.ThreadAbortException.ExceptionState">
          <source>Gets an object that contains application-specific information related to the thread abort.</source>
          <target state="translated">取得物件，其中包含有關執行緒中止之特定應用程式的資訊。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ThreadAbortException.ExceptionState">
          <source>An object containing application-specific information.</source>
          <target state="translated">包含特定應用程式資訊的物件。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ThreadAbortException.ExceptionState">
          <source>The object returned by this property is specified through the <ph id="ph1">`stateInfo`</ph> parameter of the <ph id="ph2">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph> method.</source>
          <target state="translated">這個屬性所傳回的物件透過指定<ph id="ph1">`stateInfo`</ph>參數<ph id="ph2">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ThreadAbortException.ExceptionState">
          <source>The exact content and usage of this object is application defined; it is typically used to convey information that is meaningful to the thread being aborted.</source>
          <target state="translated">確切內容和此物件的使用方式是定義; 的應用程式它通常用來傳達正在中止的執行緒以有意義的資訊。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ThreadAbortException.ExceptionState">
          <source>The following code example shows how to pass information to a thread that is being aborted.</source>
          <target state="translated">下列程式碼範例示範如何將資訊傳遞給要中止的執行緒。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>