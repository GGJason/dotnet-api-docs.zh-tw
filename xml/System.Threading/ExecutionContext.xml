<Type Name="ExecutionContext" FullName="System.Threading.ExecutionContext">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2d11eb2e08ac5047a81064d0fe34fde568252e1d" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30529522" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ExecutionContext : IDisposable, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit ExecutionContext extends System.Object implements class System.IDisposable, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ExecutionContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ExecutionContext&#xA;Implements IDisposable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExecutionContext sealed : IDisposable, System::Runtime::Serialization::ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="684c0-101">管理目前執行緒的執行內容。</span>
      <span class="sxs-lookup">
        <span data-stu-id="684c0-101">Manages the execution context for the current thread.</span>
      </span>
      <span data-ttu-id="684c0-102">這個類別無法被繼承。</span>
      <span class="sxs-lookup">
        <span data-stu-id="684c0-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="684c0-103"><xref:System.Threading.ExecutionContext>類別會提供所有的相關資訊的邏輯執行緒執行的單一容器。</span><span class="sxs-lookup"><span data-stu-id="684c0-103">The <xref:System.Threading.ExecutionContext> class provides a single container for all information relevant to a logical thread of execution.</span></span> <span data-ttu-id="684c0-104">這包括安全性內容中，呼叫內容，以及同步處理內容。</span><span class="sxs-lookup"><span data-stu-id="684c0-104">This includes security context, call context, and synchronization context.</span></span>  
  
 <span data-ttu-id="684c0-105"><xref:System.Threading.ExecutionContext>類別會提供擷取並傳送到使用者定義的非同步點的此內容的使用者程式碼的功能。</span><span class="sxs-lookup"><span data-stu-id="684c0-105">The <xref:System.Threading.ExecutionContext> class provides the functionality for user code to capture and transfer this context across user-defined asynchronous points.</span></span> <span data-ttu-id="684c0-106">通用語言執行平台可確保<xref:System.Threading.ExecutionContext>一致地傳輸到執行階段定義受管理的程序中的非同步點。</span><span class="sxs-lookup"><span data-stu-id="684c0-106">The common language runtime ensures that the <xref:System.Threading.ExecutionContext> is consistently transferred across runtime-defined asynchronous points within the managed process.</span></span>  
  
 <span data-ttu-id="684c0-107">執行內容是 COM apartment 的 managed 對應項。</span><span class="sxs-lookup"><span data-stu-id="684c0-107">An execution context is the managed equivalent of a COM apartment.</span></span> <span data-ttu-id="684c0-108">應用程式定義域內傳輸執行緒時，每當必須傳送的整個執行內容。</span><span class="sxs-lookup"><span data-stu-id="684c0-108">Within an application domain, the entire execution context must be transferred whenever a thread is transferred.</span></span> <span data-ttu-id="684c0-109">所做的傳輸期間發生這種情況<xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType>方法、 大部分的執行緒集區作業和 Windows Forms 執行緒封送處理 Windows 訊息幫浦透過。</span><span class="sxs-lookup"><span data-stu-id="684c0-109">This situation occurs during transfers made by the <xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType> method, most thread pool operations, and Windows Forms thread marshaling through the Windows message pump.</span></span> <span data-ttu-id="684c0-110">它不會發生在不安全的執行緒集區作業 (例如<xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A>方法)，這不會傳送壓縮的堆疊。</span><span class="sxs-lookup"><span data-stu-id="684c0-110">It does not occur in unsafe thread pool operations (such as the <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A> method), which do not transfer the compressed stack.</span></span> <span data-ttu-id="684c0-111">只要壓縮的堆疊流動時，受管理的主體、 同步處理、 地區設定和使用者內容也資料流程。</span><span class="sxs-lookup"><span data-stu-id="684c0-111">Wherever the compressed stack flows, the managed principal, synchronization, locale, and user context also flow.</span></span> <span data-ttu-id="684c0-112"><xref:System.Threading.ExecutionContext>類別提供<xref:System.Threading.ExecutionContext.Capture%2A>和<xref:System.Threading.ExecutionContext.CreateCopy%2A>方法，以取得執行內容和<xref:System.Threading.ExecutionContext.Run%2A>方法來設定目前執行緒的執行內容。</span><span class="sxs-lookup"><span data-stu-id="684c0-112">The <xref:System.Threading.ExecutionContext> class provides the <xref:System.Threading.ExecutionContext.Capture%2A> and <xref:System.Threading.ExecutionContext.CreateCopy%2A> methods to get the execution context and the <xref:System.Threading.ExecutionContext.Run%2A> method to set the execution context for the current thread.</span></span>  
  
 <span data-ttu-id="684c0-113"><xref:System.Threading.ExecutionContext>關聯與執行緒上不能設定另一個執行緒。</span><span class="sxs-lookup"><span data-stu-id="684c0-113">An <xref:System.Threading.ExecutionContext> that is associated with a thread cannot be set on another thread.</span></span> <span data-ttu-id="684c0-114">嘗試這樣做會導致擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="684c0-114">Attempting to do so will result in an exception being thrown.</span></span> <span data-ttu-id="684c0-115">若要傳播<xref:System.Threading.ExecutionContext>到另一個執行緒，從建立一份<xref:System.Threading.ExecutionContext>。</span><span class="sxs-lookup"><span data-stu-id="684c0-115">To propagate the <xref:System.Threading.ExecutionContext> from one thread to another, make a copy of the <xref:System.Threading.ExecutionContext>.</span></span>  
  
 <span data-ttu-id="684c0-116">就內部而言，<xref:System.Threading.ExecutionContext>儲存相關聯的所有資料<xref:System.Runtime.Remoting.Messaging.LogicalCallContext>。</span><span class="sxs-lookup"><span data-stu-id="684c0-116">Internally, the <xref:System.Threading.ExecutionContext> stores all data that is associated with the <xref:System.Runtime.Remoting.Messaging.LogicalCallContext>.</span></span> <span data-ttu-id="684c0-117">這可讓<xref:System.Runtime.Remoting.Messaging.LogicalCallContext>資料時傳播<xref:System.Threading.ExecutionContext>會複製並傳送。</span><span class="sxs-lookup"><span data-stu-id="684c0-117">This allows the <xref:System.Runtime.Remoting.Messaging.LogicalCallContext> data to be propagated when the <xref:System.Threading.ExecutionContext> is copied and transferred.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Capture">
      <MemberSignature Language="C#" Value="public static System.Threading.ExecutionContext Capture ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.ExecutionContext Capture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ExecutionContext.Capture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Capture () As ExecutionContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::ExecutionContext ^ Capture();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.ExecutionContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="684c0-118">從目前的執行緒擷取執行內容。</span>
          <span class="sxs-lookup">
            <span data-stu-id="684c0-118">Captures the execution context from the current thread.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="684c0-119">
            <see cref="T:System.Threading.ExecutionContext" /> 物件，表示目前執行緒的執行內容。</span>
          <span class="sxs-lookup">
            <span data-stu-id="684c0-119">An <see cref="T:System.Threading.ExecutionContext" /> object representing the execution context for the current thread.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="684c0-120">擷取的執行內容可用來當做`executionContext`參數<xref:System.Threading.ExecutionContext.Run%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="684c0-120">The captured execution context can be used as the `executionContext` parameter for the <xref:System.Threading.ExecutionContext.Run%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCopy">
      <MemberSignature Language="C#" Value="public System.Threading.ExecutionContext CreateCopy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.ExecutionContext CreateCopy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ExecutionContext.CreateCopy" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateCopy () As ExecutionContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::ExecutionContext ^ CreateCopy();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.ExecutionContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="684c0-121">建立目前執行內容的複本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="684c0-121">Creates a copy of the current execution context.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="684c0-122">
            <see cref="T:System.Threading.ExecutionContext" /> 物件，表示目前的執行內容。</span>
          <span class="sxs-lookup">
            <span data-stu-id="684c0-122">An <see cref="T:System.Threading.ExecutionContext" /> object representing the current execution context.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="684c0-123">這個方法可用於將傳播至另一個執行緒執行內容。</span><span class="sxs-lookup"><span data-stu-id="684c0-123">This method is useful for propagating an execution context from one thread to another.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="684c0-124">無法複製這個內容，因為正在使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="684c0-124">This context cannot be copied because it is used.</span>
          </span>
          <span data-ttu-id="684c0-125">只能複製剛剛擷取的內容。</span>
          <span class="sxs-lookup">
            <span data-stu-id="684c0-125">Only newly captured contexts can be copied.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ExecutionContext.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="684c0-126">將 <see cref="T:System.Threading.ExecutionContext" /> 類別目前的執行個體所使用的資源全部釋出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="684c0-126">Releases all resources used by the current instance of the <see cref="T:System.Threading.ExecutionContext" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="684c0-127">`Dispose` 使用完畢時，請呼叫 <xref:System.Threading.ExecutionContext>。</span><span class="sxs-lookup"><span data-stu-id="684c0-127">Call `Dispose` when you are finished using the <xref:System.Threading.ExecutionContext>.</span></span> <span data-ttu-id="684c0-128">`Dispose` 方法會將 <xref:System.Threading.ExecutionContext> 保留在無法使用的狀態。</span><span class="sxs-lookup"><span data-stu-id="684c0-128">The `Dispose` method leaves the <xref:System.Threading.ExecutionContext> in an unusable state.</span></span> <span data-ttu-id="684c0-129">在呼叫`Dispose`，您必須釋放所有參考<xref:System.Threading.ExecutionContext>讓記憶體回收行程可以回收記憶體的<xref:System.Threading.ExecutionContext>所佔用。</span><span class="sxs-lookup"><span data-stu-id="684c0-129">After calling `Dispose`, you must release all references to the <xref:System.Threading.ExecutionContext> so the garbage collector can reclaim the memory that the <xref:System.Threading.ExecutionContext> was occupying.</span></span>  
  
 <span data-ttu-id="684c0-130">如需詳細資訊，請參閱[清除 Unmanaged 資源上](~/docs/standard/garbage-collection/unmanaged.md)和[實作 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。</span><span class="sxs-lookup"><span data-stu-id="684c0-130">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="684c0-131">在您釋放最後一個 `Dispose` 參考之前，請務必呼叫 <xref:System.Threading.ExecutionContext>。</span><span class="sxs-lookup"><span data-stu-id="684c0-131">Always call `Dispose` before you release your last reference to the <xref:System.Threading.ExecutionContext>.</span></span> <span data-ttu-id="684c0-132">否則工作窗格所使用的資源不會釋放，直到記憶體回收行程呼叫 <xref:System.Threading.ExecutionContext> 物件的 `Finalize` 方法。</span><span class="sxs-lookup"><span data-stu-id="684c0-132">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.ExecutionContext> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ExecutionContext.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="684c0-133">要填入序列化資訊的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="684c0-133">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object to be populated with serialization information.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="684c0-134">
            <see cref="T:System.Runtime.Serialization.StreamingContext" /> 結構，表示序列化的目的內容。</span>
          <span class="sxs-lookup">
            <span data-stu-id="684c0-134">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> structure representing the destination context of the serialization.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="684c0-135">設定具有所需邏輯內容資訊的指定 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件，以重新建立目前執行內容的執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="684c0-135">Sets the specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the logical context information needed to recreate an instance of the current execution context.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="684c0-136"><xref:System.Threading.ExecutionContext.GetObjectData%2A> 設定<xref:System.Runtime.Serialization.SerializationInfo>以邏輯呼叫內容資訊。</span><span class="sxs-lookup"><span data-stu-id="684c0-136"><xref:System.Threading.ExecutionContext.GetObjectData%2A> sets a <xref:System.Runtime.Serialization.SerializationInfo> with the logical call context information.</span></span> <span data-ttu-id="684c0-137">還原序列化期間的執行內容的物件重新組成從<xref:System.Runtime.Serialization.SerializationInfo>資料流上傳輸。</span><span class="sxs-lookup"><span data-stu-id="684c0-137">During deserialization, the execution context object is reconstituted from the <xref:System.Runtime.Serialization.SerializationInfo> transmitted over the stream.</span></span>  
  
 <span data-ttu-id="684c0-138">如需詳細資訊，請參閱<xref:System.Runtime.Serialization.SerializationInfo>。</span><span class="sxs-lookup"><span data-stu-id="684c0-138">For more information, see <xref:System.Runtime.Serialization.SerializationInfo>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="684c0-139">
            <paramref name="info" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="684c0-139">
              <paramref name="info" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="684c0-140">需要完全信任立即呼叫者。</span>
          <span class="sxs-lookup">
            <span data-stu-id="684c0-140">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="684c0-141">這個成員無法供部分信任或安全性透明程式碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="684c0-141">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
      </Docs>
    </Member>
    <Member MemberName="IsFlowSuppressed">
      <MemberSignature Language="C#" Value="public static bool IsFlowSuppressed ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsFlowSuppressed() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ExecutionContext.IsFlowSuppressed" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsFlowSuppressed () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsFlowSuppressed();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="684c0-142">指出目前是否已抑制執行內容的流量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="684c0-142">Indicates whether the flow of the execution context is currently suppressed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="684c0-143">如果已經抑制流量則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="684c0-143">
              <see langword="true" /> if the flow is suppressed; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="684c0-144"><xref:System.Threading.ExecutionContext.IsFlowSuppressed%2A>基礎結構元件會使用方法來判斷是否要傳送<xref:System.Threading.ExecutionContext>非同步作業期間。</span><span class="sxs-lookup"><span data-stu-id="684c0-144">The <xref:System.Threading.ExecutionContext.IsFlowSuppressed%2A> method is used by infrastructure components to determine whether to transfer the <xref:System.Threading.ExecutionContext> during asynchronous operations.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RestoreFlow">
      <MemberSignature Language="C#" Value="public static void RestoreFlow ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RestoreFlow() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ExecutionContext.RestoreFlow" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RestoreFlow ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RestoreFlow();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="684c0-145">還原執行內容在非同步執行緒之間的流量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="684c0-145">Restores the flow of the execution context across asynchronous threads.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="684c0-146"><xref:System.Threading.ExecutionContext.RestoreFlow%2A> 反轉先前的效果<xref:System.Threading.ExecutionContext.SuppressFlow%2A>方法呼叫。</span><span class="sxs-lookup"><span data-stu-id="684c0-146"><xref:System.Threading.ExecutionContext.RestoreFlow%2A> reverses the effect of a prior <xref:System.Threading.ExecutionContext.SuppressFlow%2A> method call.</span></span>  
  
 <span data-ttu-id="684c0-147">這個方法會呼叫<xref:System.Threading.AsyncFlowControl.Undo%2A>方法<xref:System.Threading.AsyncFlowControl>所傳回的結構<xref:System.Threading.ExecutionContext.SuppressFlow%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="684c0-147">This method is called by the <xref:System.Threading.AsyncFlowControl.Undo%2A> method of the <xref:System.Threading.AsyncFlowControl> structure returned by the <xref:System.Threading.ExecutionContext.SuppressFlow%2A> method.</span></span>  <span data-ttu-id="684c0-148">您應該使用<xref:System.Threading.AsyncFlowControl.Undo%2A>方法未還原的執行內容中，流程<xref:System.Threading.ExecutionContext.RestoreFlow%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="684c0-148">You should use the <xref:System.Threading.AsyncFlowControl.Undo%2A> method to restore the flow of the execution context, not the <xref:System.Threading.ExecutionContext.RestoreFlow%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="684c0-149">內容流量無法還原，因為它並未隱藏。</span>
          <span class="sxs-lookup">
            <span data-stu-id="684c0-149">The context flow cannot be restored because it is not being suppressed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static void Run (System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Run(class System.Threading.ExecutionContext executionContext, class System.Threading.ContextCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext,System.Threading.ContextCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Run(System::Threading::ExecutionContext ^ executionContext, System::Threading::ContextCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="executionContext" Type="System.Threading.ExecutionContext" />
        <Parameter Name="callback" Type="System.Threading.ContextCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="executionContext">
          <span data-ttu-id="684c0-150">要設定的 <see cref="T:System.Threading.ExecutionContext" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="684c0-150">The <see cref="T:System.Threading.ExecutionContext" /> to set.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="684c0-151">
            <see cref="T:System.Threading.ContextCallback" /> 委派，表示要在所提供執行內容中執行的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="684c0-151">A <see cref="T:System.Threading.ContextCallback" /> delegate that represents the method to be run in the provided execution context.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="684c0-152">要傳遞至回呼 (Callback) 方法的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="684c0-152">The object to pass to the callback method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="684c0-153">在目前執行緒上的指定執行內容中執行方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="684c0-153">Runs a method in a specified execution context on the current thread.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="684c0-154">方法完成時，執行內容會回到先前的狀態。</span><span class="sxs-lookup"><span data-stu-id="684c0-154">The execution context is returned to its previous state when the method completes.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="684c0-155">
            <paramref name="executionContext" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="684c0-155">
              <paramref name="executionContext" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="684c0-156">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="684c0-156">-or-</span>
          </span>
          <span data-ttu-id="684c0-157">
            <paramref name="executionContext" /> 不是透過擷取作業取得。</span>
          <span class="sxs-lookup">
            <span data-stu-id="684c0-157">
              <paramref name="executionContext" /> was not acquired through a capture operation.</span>
          </span>
          <span data-ttu-id="684c0-158">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="684c0-158">-or-</span>
          </span>
          <span data-ttu-id="684c0-159">已經將 <paramref name="executionContext" /> 當做 <see cref="M:System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext,System.Threading.ContextCallback,System.Object)" /> 呼叫的引數使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="684c0-159">
              <paramref name="executionContext" /> has already been used as the argument to a <see cref="M:System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext,System.Threading.ContextCallback,System.Object)" /> call.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="684c0-160">需要完全信任立即呼叫者。</span>
          <span class="sxs-lookup">
            <span data-stu-id="684c0-160">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="684c0-161">這個成員無法供部分信任或安全性透明程式碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="684c0-161">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="SuppressFlow">
      <MemberSignature Language="C#" Value="public static System.Threading.AsyncFlowControl SuppressFlow ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.AsyncFlowControl SuppressFlow() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ExecutionContext.SuppressFlow" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SuppressFlow () As AsyncFlowControl" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::AsyncFlowControl SuppressFlow();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.AsyncFlowControl</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="684c0-162">抑制執行內容在非同步執行緒之間的流量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="684c0-162">Suppresses the flow of the execution context across asynchronous threads.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="684c0-163">還原流量的 <see cref="T:System.Threading.AsyncFlowControl" /> 結構。</span>
          <span class="sxs-lookup">
            <span data-stu-id="684c0-163">An <see cref="T:System.Threading.AsyncFlowControl" /> structure for restoring the flow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="684c0-164">使用這個方法來隱藏的流程<xref:System.Threading.ExecutionContext>目前執行緒上。</span><span class="sxs-lookup"><span data-stu-id="684c0-164">Use this method to suppress the flow of the <xref:System.Threading.ExecutionContext> on the current thread.</span></span>  
  
 <span data-ttu-id="684c0-165">您必須使用<xref:System.Threading.AsyncFlowControl.Undo%2A>方法在傳回<xref:System.Threading.AsyncFlowControl>結構，以還原的流程<xref:System.Threading.ExecutionContext>。</span><span class="sxs-lookup"><span data-stu-id="684c0-165">You must use the <xref:System.Threading.AsyncFlowControl.Undo%2A> method on the returned <xref:System.Threading.AsyncFlowControl> structure to restore the flow of the <xref:System.Threading.ExecutionContext>.</span></span>  
  
 <span data-ttu-id="684c0-166">這個方法受到<xref:System.Security.Permissions.SecurityAction.LinkDemand?displayProperty=nameWithType>如<xref:System.Security.Permissions.SecurityPermissionFlag.Infrastructure?displayProperty=nameWithType>權限。</span><span class="sxs-lookup"><span data-stu-id="684c0-166">This method is protected with a <xref:System.Security.Permissions.SecurityAction.LinkDemand?displayProperty=nameWithType> for <xref:System.Security.Permissions.SecurityPermissionFlag.Infrastructure?displayProperty=nameWithType> permission.</span></span> <span data-ttu-id="684c0-167">完全信任的元件可以呼叫這個方法，以隱藏的流程<xref:System.Threading.ExecutionContext>非同步呼叫期間。</span><span class="sxs-lookup"><span data-stu-id="684c0-167">A fully trusted component can call this method to suppress the flow of the <xref:System.Threading.ExecutionContext> during asynchronous calls.</span></span> <span data-ttu-id="684c0-168">隱藏流程時，雖然<xref:System.Security.SecurityContext.Capture%2A>方法會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="684c0-168">While the flow is suppressed, the <xref:System.Security.SecurityContext.Capture%2A> method returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="684c0-169">內容流量已隱藏。</span>
          <span class="sxs-lookup">
            <span data-stu-id="684c0-169">The context flow is already suppressed.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="684c0-170">需要完全信任立即呼叫者。</span>
          <span class="sxs-lookup">
            <span data-stu-id="684c0-170">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="684c0-171">這個成員無法供部分信任或安全性透明程式碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="684c0-171">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="T:System.Threading.AsyncFlowControl" />
      </Docs>
    </Member>
  </Members>
</Type>