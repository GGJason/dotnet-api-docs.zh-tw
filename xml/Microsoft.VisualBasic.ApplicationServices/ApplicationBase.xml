<Type Name="ApplicationBase" FullName="Microsoft.VisualBasic.ApplicationServices.ApplicationBase">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9cb825c7ad95ea987bdbb0b346da0be798939034" />
    <Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="09/22/2018" />
    <Meta Name="ms.locfileid" Value="46589910" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ApplicationBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ApplicationBase extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.ApplicationServices.ApplicationBase" />
  <TypeSignature Language="VB.NET" Value="Public Class ApplicationBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class ApplicationBase" />
  <TypeSignature Language="F#" Value="type ApplicationBase = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供與目前應用程式相關的屬性、方法和事件。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所公開的屬性`My.Application`物件只與目前的應用程式或 DLL 相關聯的傳回資料。 使用 `My.Application` 無法改變任何系統層級資訊。  
  
 `My.Application` 物件包含下列類別：  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase> 提供適用於所有專案的成員。  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase> 提供可在 Windows Forms 應用程式中的成員。  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase> 提供可在主控台應用程式中的成員。  
  
   
  
## Examples  
 這個範例會使用`My.Application.GetEnvironmentVariable`方法來取得並顯示路徑環境變數的值，這個值是否可用。 否則，它會顯示一個訊息，指出 PATH 環境變數不存在。  
  
 [!code-vb[VbVbalrMyApplication#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#7)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ApplicationContext" />
    <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase" />
    <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />
    <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">物件 (Visual Basic)</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ApplicationBase ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ApplicationBase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:Microsoft.VisualBasic.ApplicationServices.ApplicationBase" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">物件 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="ChangeCulture">
      <MemberSignature Language="C#" Value="public void ChangeCulture (string cultureName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void ChangeCulture(string cultureName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.ChangeCulture(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChangeCulture (cultureName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ChangeCulture(System::String ^ cultureName);" />
      <MemberSignature Language="F#" Value="member this.ChangeCulture : string -&gt; unit" Usage="applicationBase.ChangeCulture cultureName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cultureName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="cultureName">
          <see langword="String" />。 做為字串的文化特性名稱。 如需可能名稱的清單，請參閱 <see cref="T:System.Globalization.CultureInfo" />。</param>
        <summary>變更目前執行緒用於字串操作和字串格式化的文化特性。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Application.ChangeCulture`方法會變更目前的執行緒<xref:System.Threading.Thread.CurrentCulture%2A>屬性。 <xref:System.Threading.Thread.CurrentCulture%2A> 決定的預設格式的日期、 時間、 貨幣、 數字、 文字及字串比較，請在該執行緒上的所有計算的大小寫的排序。  
  
 若要擷取目前文化特性，您可以使用<xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.Culture%2A>屬性或<xref:System.Threading.Thread.CurrentCulture%2A>屬性。  
  
 <xref:System.Threading.Thread.CurrentCulture%2A>設定是不同的語言設定。 它包含與標準地理地區設定相關的資料。 因此，<xref:System.Threading.Thread.CurrentCulture%2A>屬性只能設定，到特定文化特性或<xref:System.Globalization.CultureInfo.InvariantCulture%2A>。  
  
 使用`My.Application.ChangeUICulture`方法，以變更目前執行緒用來擷取特定文化特性資源的文化特性。  
  
> [!IMPORTANT]
>  `My.Application.ChangeCulture`方法需要<xref:System.Security.Permissions.SecurityPermission>使用<xref:System.Security.Permissions.SecurityPermissionFlag.ControlThread>設定。 操作執行緒有危險，因為與執行緒相關聯的安全性狀態。 因此，此權限，才指定必要時，才可信任的程式碼。 您無法變更非完全信任的程式碼中的執行緒的文化特性。  
  
## <a name="availability-by-project-type"></a>專案類型的可用性  
  
|專案類型|可用|  
|-|-|  
|Windows Forms 應用程式|**是**|  
|類別庫|**是**|  
|主控台應用程式|**是**|  
|Windows Form 控制項程式庫|**是**|  
|Web 控制項程式庫|否|  
|Windows 服務|**是**|  
|網站|否|  
  
   
  
## Examples  
 此範例會示範如何變更文化特性變更日期的字串表示。  
  
 [!code-vb[VbVbalrMyApplication#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="cultureName" /> 為 <see langword="Nothing" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="cultureName" /> 不是有效的文化特性名稱。</exception>
        <altmember cref="P:System.Threading.Thread.CurrentCulture" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">物件 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="ChangeUICulture">
      <MemberSignature Language="C#" Value="public void ChangeUICulture (string cultureName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void ChangeUICulture(string cultureName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.ChangeUICulture(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChangeUICulture (cultureName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ChangeUICulture(System::String ^ cultureName);" />
      <MemberSignature Language="F#" Value="member this.ChangeUICulture : string -&gt; unit" Usage="applicationBase.ChangeUICulture cultureName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cultureName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="cultureName">
          <see langword="String" />。 做為字串的文化特性名稱。 如需可能名稱的清單，請參閱 <see cref="T:System.Globalization.CultureInfo" />。</param>
        <summary>變更目前執行緒用來擷取特定文化特性資源的文化特性。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Application.ChangeUICulture`方法會變更目前的執行緒<xref:System.Threading.Thread.CurrentUICulture%2A>屬性。 <xref:System.Threading.Thread.CurrentUICulture%2A>屬性會決定在 Resource Manager 所使用的文化特性和`My.Resources`物件; 在執行階段查詢特定文化特性資源的情況下，它在使用此資訊。  
  
 若要擷取目前 UI 文化特性，您可以使用<xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.UICulture%2A>屬性或<xref:System.Threading.Thread.CurrentUICulture%2A>屬性。  
  
 使用`My.Application.ChangeCulture`方法，以變更目前執行緒用於字串操作和字串格式化的文化特性。  
  
## <a name="availability-by-project-type"></a>專案類型的可用性  
  
|專案類型|可用|  
|-|-|  
|Windows Forms 應用程式|**是**|  
|類別庫|**是**|  
|主控台應用程式|**是**|  
|Windows Form 控制項程式庫|**是**|  
|Web 控制項程式庫|否|  
|Windows 服務|**是**|  
|網站|否|  
  
   
  
## Examples  
 這個範例會使用`My.Application.ChangeUICulture`方法來設定文化特性`My.Resources`物件用來擷取資源。  
  
 [!code-vb[VbVbalrMyResources#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyResources/VB/Form1.vb#10)]  
  
 針對此範例正常運作，您的應用程式必須有名稱為的字串`Message`在應用程式的資源檔和應用程式應該有的資源檔案，法文文化特性版本`Resources.fr-FR.resx`。 如需詳細資訊，請參閱 <<c0> [ 如何： 加入或移除資源](http://msdn.microsoft.com/library/7b77bc06-3952-4799-b029-def3f8f7f88d)。  
  
 如果應用程式並沒有法文文化特性的資源檔案版本，`My.Resources`物件會擷取預設文化特性資源檔中的資源。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="cultureName" /> 為 <see langword="Nothing" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="cultureName" /> 不是有效的文化特性名稱。</exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">物件 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Culture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Culture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Culture" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.Culture" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Culture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Culture { System::Globalization::CultureInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Culture : System.Globalization.CultureInfo" Usage="Microsoft.VisualBasic.ApplicationServices.ApplicationBase.Culture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得目前執行緒用於字串 (String) 操作和字串格式化的文化特性 (Culture)。</summary>
        <value>
          <see cref="T:System.Globalization.CultureInfo" /> 物件，表示目前執行緒用於字串操作和字串格式化的文化特性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Application.CurrentCulture`屬性會取得<xref:System.Globalization.CultureInfo>目前執行緒用於字串操作和字串格式化的物件。 這個物件是所傳回的相同<xref:System.Threading.Thread.CurrentCulture%2A>屬性，控制許多字串相關計算，在該執行緒上。 <xref:System.Threading.Thread.CurrentCulture%2A>屬性決定的預設格式的日期、 時間、 貨幣和數字。 它也會決定如何排序、 比較和大寫的字串。  
  
 若要變更文化特性，您可以使用<xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.ChangeCulture%2A>方法或指派不同<xref:System.Globalization.CultureInfo>物件到<xref:System.Threading.Thread.CurrentCulture%2A>屬性。  
  
 <xref:System.Threading.Thread.CurrentCulture%2A>設定是不同的語言設定。 它包含與標準地理地區設定相關的資料。  
  
 使用`My.Application.CurrentUICulture`取得目前執行緒用來擷取特定文化特性資源的文化特性的屬性。  
  
## <a name="availability-by-project-type"></a>專案類型的可用性  
  
|專案類型|可用|  
|-|-|  
|Windows Forms 應用程式|**是**|  
|類別庫|**是**|  
|主控台應用程式|**是**|  
|Windows Form 控制項程式庫|**是**|  
|Web 控制項程式庫|否|  
|Windows 服務|**是**|  
|網站|否|  
  
   
  
## Examples  
 此範例示範文化特性如何影響日期的字串表示。  
  
 [!code-vb[VbVbalrMyApplication#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Threading.Thread.CurrentCulture" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">物件 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="GetEnvironmentVariable">
      <MemberSignature Language="C#" Value="public string GetEnvironmentVariable (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public instance string GetEnvironmentVariable(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.GetEnvironmentVariable(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnvironmentVariable (name As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetEnvironmentVariable(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.GetEnvironmentVariable : string -&gt; string" Usage="applicationBase.GetEnvironmentVariable name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <see langword="String" />，包含環境變數的名稱。</param>
        <summary>傳回指定環境變數的值。</summary>
        <returns>
          <see langword="String" /> 包含具有名為 <paramref name="name" /> 的環境變數值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Application.GetEnvironmentVariable`方法會傳回名稱的環境變數`name`。 這個方法很類似<xref:System.Environment.GetEnvironmentVariable%28System.String%29?displayProperty=nameWithType>，不過這個方法會引發例外狀況，如果環境變數所指定`name`不存在。  
  
## <a name="availability-by-project-type"></a>專案類型的可用性  
  
|專案類型|可用|  
|-|-|  
|Windows Forms 應用程式|**是**|  
|類別庫|**是**|  
|主控台應用程式|**是**|  
|Windows Form 控制項程式庫|**是**|  
|Web 控制項程式庫|否|  
|Windows 服務|**是**|  
|網站|否|  
  
   
  
## Examples  
 這個範例會使用`My.Application.GetEnvironmentVariable`方法來取得並顯示路徑環境變數的值，如果有的話。 否則，它會顯示一則訊息指出的 PATH 環境變數不存在。  
  
 [!code-vb[VbVbalrMyApplication#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> 為 <see langword="Nothing" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> 所指定的環境變數不存在。</exception>
        <exception cref="T:System.Security.SecurityException">呼叫程式碼沒有 <see cref="T:System.Security.Permissions.EnvironmentPermission" /> 與 <see langword="Read" /> 存取權。</exception>
        <altmember cref="M:System.Environment.GetEnvironmentVariable(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">物件 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Info">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.ApplicationServices.AssemblyInfo Info { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.VisualBasic.ApplicationServices.AssemblyInfo Info" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.Info" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Info As AssemblyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::ApplicationServices::AssemblyInfo ^ Info { Microsoft::VisualBasic::ApplicationServices::AssemblyInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Info : Microsoft.VisualBasic.ApplicationServices.AssemblyInfo" Usage="Microsoft.VisualBasic.ApplicationServices.ApplicationBase.Info" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ApplicationServices.AssemblyInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得物件，提供用於取得應用程式組件之相關資訊 (例如版本號碼、描述等) 的屬性。</summary>
        <value>目前應用程式的 <see cref="T:Microsoft.VisualBasic.ApplicationServices.AssemblyInfo" /> 物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 這個範例會使用`My.Application.Info.Version`屬性來顯示應用程式的版本。  
  
 [!code-vb[VbVbalrMyApplication#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.AssemblyInfo" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">物件 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.Log Log { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.VisualBasic.Logging.Log Log" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.Log" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Log As Log" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::Logging::Log ^ Log { Microsoft::VisualBasic::Logging::Log ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Log : Microsoft.VisualBasic.Logging.Log" Usage="Microsoft.VisualBasic.ApplicationServices.ApplicationBase.Log" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.Log</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得物件，提供用於將事件和例外狀況 (Exception) 資訊寫入應用程式記錄檔接聽程式的屬性和方法。</summary>
        <value>目前應用程式的 <see cref="T:Microsoft.VisualBasic.Logging.Log" /> 物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 此範例示範如何使用 `My.Application.Log.WriteEntry` 方法寫入追蹤資訊。 如需詳細資訊，請參閱 <<c0> [ 如何： 寫入記錄訊息](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)。  
  
 [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.Log" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">物件 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="UICulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo UICulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo UICulture" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.UICulture" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ UICulture { System::Globalization::CultureInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UICulture : System.Globalization.CultureInfo" Usage="Microsoft.VisualBasic.ApplicationServices.ApplicationBase.UICulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得目前執行緒用來擷取特定文化特性資源的文化特性。</summary>
        <value>
          <see cref="T:System.Globalization.CultureInfo" /> 物件，表示目前執行緒用來擷取特定文化特性資源的文化特性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Application.CurrentUICulture`屬性會取得<xref:System.Globalization.CultureInfo>物件目前的執行緒用來擷取特定文化特性的資源。 這個物件是所傳回的相同<xref:System.Threading.Thread.CurrentUICulture%2A>屬性。 <xref:System.Threading.Thread.CurrentUICulture%2A>屬性會決定在 Resource Manager 所使用的文化特性和`My.Resources`物件，它在執行階段查詢特定文化特性的資源所需的資訊。  
  
 若要變更文化特性，您可以使用<xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.ChangeUICulture%2A>方法或指派不同<xref:System.Globalization.CultureInfo>物件到<xref:System.Threading.Thread.CurrentUICulture%2A>屬性。  
  
 <xref:System.Threading.Thread.CurrentCulture%2A>設定是不同的語言設定。 它包含與標準地理地區設定相關的資料。  
  
 使用`My.Application.CurrentCulture`屬性來取得目前執行緒用於字串操作和字串格式化的文化特性。  
  
## <a name="availability-by-project-type"></a>專案類型的可用性  
  
|專案類型|可用|  
|-|-|  
|Windows Forms 應用程式|**是**|  
|類別庫|**是**|  
|主控台應用程式|**是**|  
|Windows Form 控制項程式庫|**是**|  
|Web 控制項程式庫|否|  
|Windows 服務|**是**|  
|網站|否|  
  
   
  
## Examples  
 這個範例會使用`My.Application.CurrentCulture`快取目前的文化特性，然後再變更使用屬性<xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.ChangeUICulture%2A>。 `My.Application.ChangeUICulture`方法設定的文化特性，`My.Resources`物件用來擷取資源。  
  
 [!code-vb[VbVbalrMyResources#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyResources/VB/Form1.vb#10)]  
  
 針對此範例正常運作，您的應用程式必須有名稱為的字串`Message`在應用程式的資源檔和應用程式應該有的資源檔案，法文文化特性版本`Resources.fr-FR.resx`。 如需詳細資訊，請參閱 <<c0> [ 如何： 加入或移除資源](http://msdn.microsoft.com/library/7b77bc06-3952-4799-b029-def3f8f7f88d)。  
  
 如果應用程式並沒有法文文化特性的資源檔案版本，`My.Resources`物件會擷取預設文化特性資源檔中的資源。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Threading.Thread.CurrentUICulture" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">物件 (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/my-resources-object.md">My.Resources 物件 (Visual Basic)</related>
      </Docs>
    </Member>
  </Members>
</Type>