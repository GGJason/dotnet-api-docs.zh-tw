<Type Name="User" FullName="Microsoft.VisualBasic.ApplicationServices.User">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7f77fd2917800e7f15fa7fb160d23edf74c600a8" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36661084" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class User" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi User extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.ApplicationServices.User" />
  <TypeSignature Language="VB.NET" Value="Public Class User" />
  <TypeSignature Language="C++ CLI" Value="public ref class User" />
  <TypeSignature Language="F#" Value="type User = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供目前使用者相關資訊的存取。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 公開屬性和方法所`My.User`物件提供存取目前使用者的相關資訊。 「 目前使用者 」 的意義與 Windows 及 Web 應用程式之間稍有不同。 在 Windows 應用程式中，目前使用者是執行應用程式的使用者。 Web 應用程式中目前的使用者是存取應用程式的使用者。  
  
 `My.User`屬性也可存取<xref:System.Security.Principal.IPrincipal>目前的使用者。 主體的物件代表使用者的安全性內容，包括該使用者的識別以及使用者所屬的任何角色。  
  
 對於 Windows 應用程式，這個屬性會提供相同的功能<xref:System.Threading.Thread.CurrentPrincipal%2A>屬性。 Web 應用程式，這個屬性會提供相同的功能<xref:System.Web.HttpContext.User%2A>屬性所傳回的物件<xref:System.Web.HttpContext.Current%2A>屬性。  
  
> [!NOTE]
>  對於 Windows 應用程式中，只有專案建置**Windows 應用程式**範本初始化`My.User`預設物件。 在其他所有的 Windows 專案類型，您必須初始化`My.User`藉由呼叫物件<xref:Microsoft.VisualBasic.ApplicationServices.User.InitializeWithWindowsUser%2A>方法明確或指派值給<xref:System.Threading.Thread.CurrentPrincipal%2A>。  
  
> [!NOTE]
>  `My.User`物件無法報告目前的 Windows 使用者，因為這些作業系統不支援登入之使用者的概念，當執行在 Windows 95 及 Windows 98 的相關資訊。 您必須實作自訂驗證，才能使用`My.User`這些作業系統上的物件。  
  
   
  
## Examples  
 這個範例會檢查應用程式是否使用 Windows 或自訂驗證，並使用該資訊來剖析`My.User.Name`屬性。  
  
 [!code-vb[VbVbalrMyUser#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyUser/VB/Class1.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Security.Principal.IPrincipal" />
    <altmember cref="P:System.Threading.Thread.CurrentPrincipal" />
    <altmember cref="P:System.Web.HttpContext.User" />
    <altmember cref="P:System.Web.HttpContext.Current" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public User ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.User.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; User();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:Microsoft.VisualBasic.ApplicationServices.User" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 公開屬性和方法所`My.User`物件提供存取目前使用者相關資訊。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentPrincipal">
      <MemberSignature Language="C#" Value="public System.Security.Principal.IPrincipal CurrentPrincipal { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Principal.IPrincipal CurrentPrincipal" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.User.CurrentPrincipal" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrentPrincipal As IPrincipal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Principal::IPrincipal ^ CurrentPrincipal { System::Security::Principal::IPrincipal ^ get(); void set(System::Security::Principal::IPrincipal ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrentPrincipal : System.Security.Principal.IPrincipal with get, set" Usage="Microsoft.VisualBasic.ApplicationServices.User.CurrentPrincipal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Principal.IPrincipal</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定目前主體 (以角色為基礎的安全性之用)。</summary>
        <value>
          <see cref="T:System.Security.Principal.IPrincipal" /> 值，表示安全性內容。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以設定`My.User.CurrentPrincipal`要實作的物件屬性<xref:System.Security.Principal.IPrincipal>介面以啟用自訂驗證。  
  
 在大部分的專案類型，這個屬性會取得並設定執行緒的目前主體。 ASP.NET 應用程式中，這個屬性會取得及設定目前 HTTP 要求的使用者身分識別的安全性資訊。  
  
 這是進階的成員;它不會顯示在 IntelliSense 中除非您按一下**所有** 索引標籤。  
  
## <a name="availability-by-project-type"></a>專案類型的可用性  
  
|專案類型|可用|  
|-|-|  
|Windows 應用程式|**是**|  
|類別庫|**是**|  
|主控台應用程式|**是**|  
|Windows 控制項程式庫|**是**|  
|Web 控制項程式庫|**是**|  
|Windows 服務|**是**|  
|網站|**是**|  
  
   
  
## Examples  
 這個範例會檢查應用程式是否使用 Windows 或自訂驗證，並使用該資訊來剖析`My.User.Name`屬性。  
  
 [!code-vb[VbVbalrMyUser#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyUser/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">呼叫端沒有設定主體的必要權限。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">描述一組套用至程式碼的安全性權限。 關聯的列舉型別：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />。</permission>
        <altmember cref="T:System.Security.Principal.IPrincipal" />
      </Docs>
    </Member>
    <Member MemberName="InitializeWithWindowsUser">
      <MemberSignature Language="C#" Value="public void InitializeWithWindowsUser ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void InitializeWithWindowsUser() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.User.InitializeWithWindowsUser" />
      <MemberSignature Language="VB.NET" Value="Public Sub InitializeWithWindowsUser ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InitializeWithWindowsUser();" />
      <MemberSignature Language="F#" Value="member this.InitializeWithWindowsUser : unit -&gt; unit" Usage="user.InitializeWithWindowsUser " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將執行緒的目前主體設為啟動應用程式的 Windows 使用者。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用`My.User.InitializeWithWindowsUser`設為 啟動應用程式的 Windows 使用者執行緒的目前主體的方法。 Visual Basic 應用程式模型中的 Windows 應用程式啟動時呼叫這個方法，根據預設。 在其他專案類型，您必須設定執行緒的目前主體呼叫這個方法明確或指派值給<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType>。  
  
 在 Windows 專案中，`My.User`物件以執行緒的目前主體為基礎; 因此，這個方法可以變更的資訊`My.User`傳回。 ASP.NET 應用程式中，`My.User`物件根據目前的 HTTP 要求的使用者身分識別，而且是由這個方法不會受到影響。  
  
> [!NOTE]
>  確切的行為`My.User`物件取決於應用程式的類型以及應用程式執行所在的作業系統。 如需詳細資訊，請參閱<xref:Microsoft.VisualBasic.ApplicationServices.User>類別概觀。  
  
 這是進階的成員;它不會顯示在 IntelliSense 中除非您按一下**所有** 索引標籤。  
  
## <a name="availability-by-project-type"></a>專案類型的可用性  
  
|專案類型|可用|  
|-|-|  
|Windows 應用程式|**是**|  
|類別庫|**是**|  
|主控台應用程式|**是**|  
|Windows 控制項程式庫|**是**|  
|Web 控制項程式庫|**是**|  
|Windows 服務|**是**|  
|網站|**是**|  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">描述一組套用至程式碼的安全性權限。 關聯的列舉型別：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="InternalPrincipal">
      <MemberSignature Language="C#" Value="protected virtual System.Security.Principal.IPrincipal InternalPrincipal { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Principal.IPrincipal InternalPrincipal" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.User.InternalPrincipal" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Property InternalPrincipal As IPrincipal" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Security::Principal::IPrincipal ^ InternalPrincipal { System::Security::Principal::IPrincipal ^ get(); void set(System::Security::Principal::IPrincipal ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InternalPrincipal : System.Security.Principal.IPrincipal with get, set" Usage="Microsoft.VisualBasic.ApplicationServices.User.InternalPrincipal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Principal.IPrincipal</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 Principal 物件，表示目前使用者。</summary>
        <value>
          <see cref="T:System.Security.Principal.IPrincipal" /> 物件，代表目前的使用者。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在<xref:Microsoft.VisualBasic.ApplicationServices.User>物件，此屬性包裝<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType>屬性。 覆寫此方法以提供不同的行為在衍生類別中。 例如，<xref:Microsoft.VisualBasic.ApplicationServices.WebUser.InternalPrincipal%2A?displayProperty=nameWithType>屬性會覆寫這個屬性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAuthenticated">
      <MemberSignature Language="C#" Value="public bool IsAuthenticated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAuthenticated" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.User.IsAuthenticated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAuthenticated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAuthenticated { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAuthenticated : bool" Usage="Microsoft.VisualBasic.ApplicationServices.User.IsAuthenticated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，表示使用者是否已經驗證。</summary>
        <value>如果使用者已驗證，則為 <see langword="True" />，否則為 <see langword="False" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.User.IsAuthenticated`屬性可讓您判斷目前的使用者是否已驗證的程式碼。  
  
> [!NOTE]
>  確切的行為`My.User`物件取決於應用程式類型和執行應用程式的作業系統。 如需詳細資訊，請參閱<xref:Microsoft.VisualBasic.ApplicationServices.User>類別概觀。  
  
## <a name="availability-by-project-type"></a>專案類型的可用性  
  
|專案類型|可用|  
|-|-|  
|Windows 應用程式|**是**|  
|類別庫|**是**|  
|主控台應用程式|**是**|  
|Windows 控制項程式庫|**是**|  
|Web 控制項程式庫|**是**|  
|Windows 服務|**是**|  
|網站|**是**|  
  
   
  
## Examples  
 此範例中，確認已存取資源之前驗證使用者。  
  
 [!code-vb[VbVbalrMyUser#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyUser/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">描述一組套用至程式碼的安全性權限。 關聯的列舉型別：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />。</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsInRole">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>判斷目前的使用者是否屬於指定的角色。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsInRole">
      <MemberSignature Language="C#" Value="public bool IsInRole (Microsoft.VisualBasic.ApplicationServices.BuiltInRole role);" />
      <MemberSignature Language="ILAsm" Value=".method public instance bool IsInRole(valuetype Microsoft.VisualBasic.ApplicationServices.BuiltInRole role) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.User.IsInRole(Microsoft.VisualBasic.ApplicationServices.BuiltInRole)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsInRole (role As BuiltInRole) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsInRole(Microsoft::VisualBasic::ApplicationServices::BuiltInRole role);" />
      <MemberSignature Language="F#" Value="member this.IsInRole : Microsoft.VisualBasic.ApplicationServices.BuiltInRole -&gt; bool" Usage="user.IsInRole role" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="role" Type="Microsoft.VisualBasic.ApplicationServices.BuiltInRole" />
      </Parameters>
      <Docs>
        <param name="role">要檢查其成員資格的內建 Windows 角色。</param>
        <summary>判斷目前的使用者是否屬於指定的角色。</summary>
        <returns>如果目前使用者是指定角色的成員則為 <see langword="True" />，否則為 <see langword="False" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.User.IsInRole`方法可讓您的程式碼，判斷目前使用者是否為指定之角色的成員。  
  
 多載`My.User.IsInRole`方法可接受 string 提供簡易存取<xref:System.Security.Principal.IPrincipal.IsInRole%2A>目前主體的方法。  
  
 多載`My.User.IsInRole`採用方法`BuiltInRole`列舉型別行為方式，會根據目前的主體。 如果是 Windows 使用者主體 (<xref:System.Security.Principal.WindowsPrincipal>)，此函式會將轉換`role`對等<xref:System.Security.Principal.WindowsBuiltInRole>列舉型別，並傳回呼叫<xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>。 如果目前的主體為任何其他主體，此函式會將傳遞中列舉值的名稱`role`主體<xref:System.Security.Principal.IPrincipal.IsInRole%2A>方法。  
  
> [!NOTE]
>  確切的行為`My.User`物件取決於應用程式類型和執行應用程式的作業系統。 如需詳細資訊，請參閱<xref:Microsoft.VisualBasic.ApplicationServices.User>類別概觀。  
  
## <a name="availability-by-project-type"></a>專案類型的可用性  
  
|專案類型|可用|  
|-|-|  
|Windows 應用程式|**是**|  
|類別庫|**是**|  
|主控台應用程式|**是**|  
|Windows 控制項程式庫|**是**|  
|Web 控制項程式庫|**是**|  
|Windows 服務|**是**|  
|網站|**是**|  
  
   
  
## Examples  
 這個範例會檢查使用者是否為系統管理員才能存取資源。  
  
 [!code-vb[VbVbalrMyUser#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyUser/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">描述一組套用至程式碼的安全性權限。 關聯的列舉型別：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="IsInRole">
      <MemberSignature Language="C#" Value="public bool IsInRole (string role);" />
      <MemberSignature Language="ILAsm" Value=".method public instance bool IsInRole(string role) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.User.IsInRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsInRole (role As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsInRole(System::String ^ role);" />
      <MemberSignature Language="F#" Value="member this.IsInRole : string -&gt; bool" Usage="user.IsInRole role" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="role" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="role">用來檢查成員資格的角色名稱。</param>
        <summary>判斷目前的使用者是否屬於指定的角色。</summary>
        <returns>如果目前使用者是指定角色的成員則為 <see langword="True" />，否則為 <see langword="False" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.User.IsInRole`方法可讓您的程式碼，判斷目前使用者是否為指定之角色的成員。  
  
 多載`My.User.IsInRole`方法可接受 string 提供簡易存取<xref:System.Security.Principal.IPrincipal.IsInRole%2A>目前主體的方法。  
  
 多載`My.User.IsInRole`採用方法`BuiltInRole`列舉型別行為方式，會根據目前的主體。 如果是 Windows 使用者主體 (<xref:System.Security.Principal.WindowsPrincipal>)，此函式會將轉換`role`對等<xref:System.Security.Principal.WindowsBuiltInRole>列舉型別，並傳回呼叫<xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>。 如果目前的主體為任何其他主體，此函式會將傳遞中列舉值的名稱`role`主體<xref:System.Security.Principal.IPrincipal.IsInRole%2A>方法。  
  
> [!NOTE]
>  確切的行為`My.User`物件取決於應用程式類型和執行應用程式的作業系統。 如需詳細資訊，請參閱<xref:Microsoft.VisualBasic.ApplicationServices.User>類別概觀。  
  
## <a name="availability-by-project-type"></a>專案類型的可用性  
  
|專案類型|可用|  
|-|-|  
|Windows 應用程式|**是**|  
|類別庫|**是**|  
|主控台應用程式|**是**|  
|Windows 控制項程式庫|**是**|  
|Web 控制項程式庫|**是**|  
|Windows 服務|**是**|  
|網站|**是**|  
  
   
  
## Examples  
 這個範例會檢查使用者是否為系統管理員才能存取資源。  
  
 [!code-vb[VbVbalrMyUser#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyUser/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">描述一組套用至程式碼的安全性權限。 關聯的列舉型別：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />。</permission>
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.BuiltInRole" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.User.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="Microsoft.VisualBasic.ApplicationServices.User.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得目前使用者的名稱。</summary>
        <value>
          <see langword="String" />。 目前使用者的名稱。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用`My.User`物件來取得目前使用者的相關資訊。  
  
 驗證使用者的主體也會控制使用者名稱的格式。 根據預設，應用程式使用 Windows 驗證，且使用者名稱格式為網域 \ 使用者名稱。 主體的自訂實作不一定會使用相同的格式。  
  
> [!NOTE]
>  `My.User.Name`屬性會傳回空字串，因為這些作業系統無法辨識的使用者名稱，當執行 Windows 95 和 Windows 98 底下。  
  
> [!NOTE]
>  確切的行為`My.User`物件取決於應用程式類型和執行應用程式的作業系統。 如需詳細資訊，請參閱<xref:Microsoft.VisualBasic.ApplicationServices.User>類別概觀。  
  
## <a name="availability-by-project-type"></a>專案類型的可用性  
  
|專案類型|可用|  
|-|-|  
|Windows 應用程式|**是**|  
|類別庫|**是**|  
|主控台應用程式|**是**|  
|Windows 控制項程式庫|**是**|  
|Web 控制項程式庫|**是**|  
|Windows 服務|**是**|  
|網站|**是**|  
  
   
  
## Examples  
 這個範例會檢查應用程式是否使用 Windows 或自訂驗證，並使用該資訊來剖析`My.User.Name`屬性。  
  
 [!code-vb[VbVbalrMyUser#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyUser/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">描述一組套用至程式碼的安全性權限。 關聯的列舉型別：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />。</permission>
      </Docs>
    </Member>
  </Members>
</Type>