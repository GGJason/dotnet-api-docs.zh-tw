<Type Name="EnvelopedSignatureReader" FullName="System.IdentityModel.EnvelopedSignatureReader">
  <TypeSignature Language="C#" Value="public sealed class EnvelopedSignatureReader : System.IdentityModel.DelegatingXmlDictionaryReader" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit EnvelopedSignatureReader extends System.IdentityModel.DelegatingXmlDictionaryReader" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.EnvelopedSignatureReader" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class EnvelopedSignatureReader&#xA;Inherits DelegatingXmlDictionaryReader" />
  <TypeSignature Language="C++ CLI" Value="public ref class EnvelopedSignatureReader sealed : System::IdentityModel::DelegatingXmlDictionaryReader" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IdentityModel.DelegatingXmlDictionaryReader</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="64ae2-101">包裝正指向已包裹和已簽署之 XML 的讀取器，以提供用來在不需處理簽章的情況下讀取內容的讀取器。</span><span class="sxs-lookup"><span data-stu-id="64ae2-101">Wraps a reader that is pointing to enveloped signed XML to provide a reader that can be used to read the content without having to process the signature.</span></span> <span data-ttu-id="64ae2-102">當信封的最後一個項目被讀取時，會自動驗證簽章。</span><span class="sxs-lookup"><span data-stu-id="64ae2-102">The signature is automatically validated when the last element of the envelope is read.</span></span> <span data-ttu-id="64ae2-103">這個類別無法被繼承。</span><span class="sxs-lookup"><span data-stu-id="64ae2-103">This class cannot be inherited.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="64ae2-104">初始化 <see cref="T:System.IdentityModel.EnvelopedSignatureReader" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="64ae2-104">Initializes a new instance of the <see cref="T:System.IdentityModel.EnvelopedSignatureReader" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EnvelopedSignatureReader (System.Xml.XmlReader reader, System.IdentityModel.Selectors.SecurityTokenSerializer securityTokenSerializer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlReader reader, class System.IdentityModel.Selectors.SecurityTokenSerializer securityTokenSerializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.EnvelopedSignatureReader.#ctor(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenSerializer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EnvelopedSignatureReader(System::Xml::XmlReader ^ reader, System::IdentityModel::Selectors::SecurityTokenSerializer ^ securityTokenSerializer);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="securityTokenSerializer" Type="System.IdentityModel.Selectors.SecurityTokenSerializer" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="64ae2-105">指向已包裹簽署之 XML 的讀取器。</span><span class="sxs-lookup"><span data-stu-id="64ae2-105">A reader that is pointing to the enveloped signed XML.</span></span></param>
        <param name="securityTokenSerializer"><span data-ttu-id="64ae2-106">要用來還原序列化簽章的<see cref="T:System.Security.Cryptography.Xml.KeyInfo" />的權杖序列化程式。</span><span class="sxs-lookup"><span data-stu-id="64ae2-106">The token serializer to be used to deserialize the <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> of the signature.</span></span></param>
        <summary><span data-ttu-id="64ae2-107">初始化 <see cref="T:System.IdentityModel.EnvelopedSignatureReader" /> 類別的新執行個體。使用指定的讀取器和安全性權杖序列化程式。</span><span class="sxs-lookup"><span data-stu-id="64ae2-107">Initializes a new instance of the <see cref="T:System.IdentityModel.EnvelopedSignatureReader" /> class by using the specified reader and security token serializer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ae2-108"><xref:System.IdentityModel.EnvelopedSignatureReader.%23ctor%28System.Xml.XmlReader%2CSystem.IdentityModel.Selectors.SecurityTokenSerializer%2CSystem.IdentityModel.Selectors.SecurityTokenResolver%2CSystem.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType>建構函式會叫用由下列的其他參數：</span><span class="sxs-lookup"><span data-stu-id="64ae2-108">The <xref:System.IdentityModel.EnvelopedSignatureReader.%23ctor%28System.Xml.XmlReader%2CSystem.IdentityModel.Selectors.SecurityTokenSerializer%2CSystem.IdentityModel.Selectors.SecurityTokenResolver%2CSystem.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> constructor is invoked with the following additional parameters:</span></span>  
  
|<span data-ttu-id="64ae2-109">參數名稱</span><span class="sxs-lookup"><span data-stu-id="64ae2-109">Parameter Name</span></span>|<span data-ttu-id="64ae2-110">值</span><span class="sxs-lookup"><span data-stu-id="64ae2-110">Value</span></span>|  
|--------------------|-----------|  
|`signingTokenResolver`|`null`|  
|`requireSignature`|`true`|  
|`automaticallyReadSignature`|`true`|  
|`resolveIntrinsicSigningKeys`|`true`|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="64ae2-111"><paramref name="reader" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="64ae2-111"><paramref name="reader" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="64ae2-112">-或-</span><span class="sxs-lookup"><span data-stu-id="64ae2-112">-or-</span></span>  
  
 <span data-ttu-id="64ae2-113"><paramref name="securityTokenSerializer" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="64ae2-113"><paramref name="securityTokenSerializer" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EnvelopedSignatureReader (System.Xml.XmlReader reader, System.IdentityModel.Selectors.SecurityTokenSerializer securityTokenSerializer, System.IdentityModel.Selectors.SecurityTokenResolver signingTokenResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlReader reader, class System.IdentityModel.Selectors.SecurityTokenSerializer securityTokenSerializer, class System.IdentityModel.Selectors.SecurityTokenResolver signingTokenResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.EnvelopedSignatureReader.#ctor(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EnvelopedSignatureReader(System::Xml::XmlReader ^ reader, System::IdentityModel::Selectors::SecurityTokenSerializer ^ securityTokenSerializer, System::IdentityModel::Selectors::SecurityTokenResolver ^ signingTokenResolver);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="securityTokenSerializer" Type="System.IdentityModel.Selectors.SecurityTokenSerializer" />
        <Parameter Name="signingTokenResolver" Type="System.IdentityModel.Selectors.SecurityTokenResolver" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="64ae2-114">指向已包裹簽署之 XML 的讀取器。</span><span class="sxs-lookup"><span data-stu-id="64ae2-114">A reader that is pointing to the enveloped signed XML.</span></span></param>
        <param name="securityTokenSerializer"><span data-ttu-id="64ae2-115">要用來還原序列化簽章的<see cref="T:System.Security.Cryptography.Xml.KeyInfo" />的權杖序列化程式。</span><span class="sxs-lookup"><span data-stu-id="64ae2-115">The token serializer to be used to deserialize the <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> of the signature.</span></span></param>
        <param name="signingTokenResolver"><span data-ttu-id="64ae2-116">用來解析簽署的權杖的權杖解析程式。</span><span class="sxs-lookup"><span data-stu-id="64ae2-116">The token resolver to be used to resolve the signing token.</span></span> <span data-ttu-id="64ae2-117"><see langword="null" /> 指定應該使用預設的安全性權杖解析程式。</span><span class="sxs-lookup"><span data-stu-id="64ae2-117"><see langword="null" /> specifies that a default security token resolver should be used.</span></span></param>
        <summary><span data-ttu-id="64ae2-118">使用指定的讀取器、安全性權杖序列化程式和權杖解析程式，初始化 <see cref="T:System.IdentityModel.EnvelopedSignatureReader" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="64ae2-118">Initializes a new instance of the <see cref="T:System.IdentityModel.EnvelopedSignatureReader" /> class by using the specified reader, security token serializer, and token resolver.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ae2-119"><xref:System.IdentityModel.EnvelopedSignatureReader.%23ctor%28System.Xml.XmlReader%2CSystem.IdentityModel.Selectors.SecurityTokenSerializer%2CSystem.IdentityModel.Selectors.SecurityTokenResolver%2CSystem.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType>建構函式會叫用由下列的其他參數：</span><span class="sxs-lookup"><span data-stu-id="64ae2-119">The <xref:System.IdentityModel.EnvelopedSignatureReader.%23ctor%28System.Xml.XmlReader%2CSystem.IdentityModel.Selectors.SecurityTokenSerializer%2CSystem.IdentityModel.Selectors.SecurityTokenResolver%2CSystem.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> constructor is invoked with the following additional parameters:</span></span>  
  
|<span data-ttu-id="64ae2-120">參數名稱</span><span class="sxs-lookup"><span data-stu-id="64ae2-120">Parameter Name</span></span>|<span data-ttu-id="64ae2-121">值</span><span class="sxs-lookup"><span data-stu-id="64ae2-121">Value</span></span>|  
|--------------------|-----------|  
|`requireSignature`|`true`|  
|`automaticallyReadSignature`|`true`|  
|`resolveIntrinsicSigningKeys`|`true`|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="64ae2-122"><paramref name="reader" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="64ae2-122"><paramref name="reader" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="64ae2-123">-或-</span><span class="sxs-lookup"><span data-stu-id="64ae2-123">-or-</span></span>  
  
 <span data-ttu-id="64ae2-124"><paramref name="securityTokenSerializer" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="64ae2-124"><paramref name="securityTokenSerializer" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EnvelopedSignatureReader (System.Xml.XmlReader reader, System.IdentityModel.Selectors.SecurityTokenSerializer securityTokenSerializer, System.IdentityModel.Selectors.SecurityTokenResolver signingTokenResolver, bool requireSignature, bool automaticallyReadSignature, bool resolveIntrinsicSigningKeys);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlReader reader, class System.IdentityModel.Selectors.SecurityTokenSerializer securityTokenSerializer, class System.IdentityModel.Selectors.SecurityTokenResolver signingTokenResolver, bool requireSignature, bool automaticallyReadSignature, bool resolveIntrinsicSigningKeys) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.EnvelopedSignatureReader.#ctor(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver,System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EnvelopedSignatureReader(System::Xml::XmlReader ^ reader, System::IdentityModel::Selectors::SecurityTokenSerializer ^ securityTokenSerializer, System::IdentityModel::Selectors::SecurityTokenResolver ^ signingTokenResolver, bool requireSignature, bool automaticallyReadSignature, bool resolveIntrinsicSigningKeys);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="securityTokenSerializer" Type="System.IdentityModel.Selectors.SecurityTokenSerializer" />
        <Parameter Name="signingTokenResolver" Type="System.IdentityModel.Selectors.SecurityTokenResolver" />
        <Parameter Name="requireSignature" Type="System.Boolean" />
        <Parameter Name="automaticallyReadSignature" Type="System.Boolean" />
        <Parameter Name="resolveIntrinsicSigningKeys" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="64ae2-125">指向已包裹簽署之 XML 的讀取器。</span><span class="sxs-lookup"><span data-stu-id="64ae2-125">A reader that is pointing to the enveloped signed XML.</span></span></param>
        <param name="securityTokenSerializer"><span data-ttu-id="64ae2-126">要用來還原序列化簽章的<see cref="T:System.Security.Cryptography.Xml.KeyInfo" />的權杖序列化程式。</span><span class="sxs-lookup"><span data-stu-id="64ae2-126">The token serializer to be used to deserialize the <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> of the signature.</span></span></param>
        <param name="signingTokenResolver"><span data-ttu-id="64ae2-127">用來解析簽署的權杖的權杖解析程式。</span><span class="sxs-lookup"><span data-stu-id="64ae2-127">The token resolver to be used to resolve the signing token.</span></span> <span data-ttu-id="64ae2-128"><see langword="null" /> 指定應該使用預設的安全性權杖解析程式。</span><span class="sxs-lookup"><span data-stu-id="64ae2-128"><see langword="null" /> specifies that a default security token resolver should be used.</span></span></param>
        <param name="requireSignature">
          <span data-ttu-id="64ae2-129">如果需要簽章，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="64ae2-129"><see langword="true" /> if the signature is required; otherwise, <see langword="false" />.</span></span></param>
        <param name="automaticallyReadSignature">
          <span data-ttu-id="64ae2-130">如果應該讀取簽章則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="64ae2-130"><see langword="true" /> if the signature should be read; otherwise, <see langword="false" />.</span></span></param>
        <param name="resolveIntrinsicSigningKeys">
          <span data-ttu-id="64ae2-131">如果應該解析內建的簽署金鑰，則為 <see langword="true" />，否則為<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="64ae2-131"><see langword="true" /> if intrinsic signing keys should be resolved; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="64ae2-132">使用指定的讀取器、安全性權杖序列化程式、權杖解析程式和行為，初始化 <see cref="T:System.IdentityModel.EnvelopedSignatureReader" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="64ae2-132">Initializes a new instance of the <see cref="T:System.IdentityModel.EnvelopedSignatureReader" /> class by using the specified reader, security token serializer, token resolver, and behavior.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="64ae2-133"><paramref name="reader" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="64ae2-133"><paramref name="reader" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="64ae2-134">-或-</span><span class="sxs-lookup"><span data-stu-id="64ae2-134">-or-</span></span>  
  
 <span data-ttu-id="64ae2-135"><paramref name="securityTokenSerializer" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="64ae2-135"><paramref name="securityTokenSerializer" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.EnvelopedSignatureReader.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override bool Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.EnvelopedSignatureReader.Read" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Read () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Read();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="64ae2-136">從資料流讀取下一個節點。</span><span class="sxs-lookup"><span data-stu-id="64ae2-136">Reads the next node from the stream.</span></span></summary>
        <returns>
          <span data-ttu-id="64ae2-137">如果成功讀取下一個節點，則為 <see langword="true" />，如果沒有其他節點，則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="64ae2-137"><see langword="true" /> if the next node was read successfully; <see langword="false" /> if there are no more nodes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ae2-138">檢查是否信封的結束為止，並驗證簽章，如果`requireSignature`參數指定`true`建構函式中。</span><span class="sxs-lookup"><span data-stu-id="64ae2-138">Checks whether the end of the envelope is reached and validates the signature if the `requireSignature` parameter was specified `true` in the constructor.</span></span> <span data-ttu-id="64ae2-139">如果讀取器取得位於`<Signature>`整個簽章讀取項目，如果`automaticallyReadSignature`參數指定`true`建構函式中。</span><span class="sxs-lookup"><span data-stu-id="64ae2-139">If the reader gets positioned on a `<Signature>` element, the whole signature is read in if the `automaticallyReadSignature` parameter was specified `true` in the constructor.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SigningCredentials">
      <MemberSignature Language="C#" Value="public System.IdentityModel.Tokens.SigningCredentials SigningCredentials { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IdentityModel.Tokens.SigningCredentials SigningCredentials" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.EnvelopedSignatureReader.SigningCredentials" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SigningCredentials As SigningCredentials" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IdentityModel::Tokens::SigningCredentials ^ SigningCredentials { System::IdentityModel::Tokens::SigningCredentials ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SigningCredentials</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64ae2-140">取得在使用信封之後，以及當驗證簽章時，簽章中所使用的簽署認證。</span><span class="sxs-lookup"><span data-stu-id="64ae2-140">Gets the signing credentials that are used in the signature, after the envelope is consumed and when the signature is validated.</span></span></summary>
        <value><span data-ttu-id="64ae2-141">簽署認證。</span><span class="sxs-lookup"><span data-stu-id="64ae2-141">The signing credentials.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReadSignature">
      <MemberSignature Language="C#" Value="public bool TryReadSignature ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryReadSignature() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.EnvelopedSignatureReader.TryReadSignature" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReadSignature () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryReadSignature();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="64ae2-142">如果讀取器目前位在 <see langword="&lt;Signature&gt;" />項目，則讀取簽章。</span><span class="sxs-lookup"><span data-stu-id="64ae2-142">Reads the signature if the reader is currently positioned at a <see langword="&lt;Signature&gt;" /> element.</span></span></summary>
        <returns>
          <span data-ttu-id="64ae2-143">如果順利讀取簽章，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="64ae2-143"><see langword="true" /> if the signature was successfully read; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ae2-144">如果讀取器目前所在`<Signature>`項目，會叫用<xref:System.IdentityModel.EnvelopedSignatureReader.Read%2A>讀取簽章的方法。</span><span class="sxs-lookup"><span data-stu-id="64ae2-144">If the reader is currently positioned on a `<Signature>` element, invokes the <xref:System.IdentityModel.EnvelopedSignatureReader.Read%2A> method to read the signature.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>