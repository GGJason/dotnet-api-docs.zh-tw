<Type Name="ImmutableList&lt;T&gt;" FullName="System.Collections.Immutable.ImmutableList&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="00cd61558e14648e384b97f7656c112c41c92953" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="65002308" /></Metadata><TypeSignature Language="C#" Value="public sealed class ImmutableList&lt;T&gt; : System.Collections.Generic.ICollection&lt;T&gt;, System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.Generic.IList&lt;T&gt;, System.Collections.Generic.IReadOnlyCollection&lt;T&gt;, System.Collections.Generic.IReadOnlyList&lt;T&gt;, System.Collections.IList, System.Collections.Immutable.IImmutableList&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ImmutableList`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.ICollection`1&lt;!T&gt;, class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.Generic.IList`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyList`1&lt;!T&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList, class System.Collections.Immutable.IImmutableList`1&lt;!T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Immutable.ImmutableList`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ImmutableList(Of T)&#xA;Implements ICollection(Of T), IEnumerable(Of T), IImmutableList(Of T), IList, IList(Of T), IReadOnlyCollection(Of T), IReadOnlyList(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class ImmutableList sealed : System::Collections::Generic::ICollection&lt;T&gt;, System::Collections::Generic::IEnumerable&lt;T&gt;, System::Collections::Generic::IList&lt;T&gt;, System::Collections::Generic::IReadOnlyCollection&lt;T&gt;, System::Collections::Generic::IReadOnlyList&lt;T&gt;, System::Collections::IList, System::Collections::Immutable::IImmutableList&lt;T&gt;" />
  <TypeSignature Language="F#" Value="type ImmutableList&lt;'T&gt; = class&#xA;    interface ICollection&lt;'T&gt;&#xA;    interface seq&lt;'T&gt;&#xA;    interface IEnumerable&#xA;    interface IList&lt;'T&gt;&#xA;    interface IReadOnlyCollection&lt;'T&gt;&#xA;    interface IReadOnlyList&lt;'T&gt;&#xA;    interface ICollection&#xA;    interface IList&#xA;    interface IImmutableList&lt;'T&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.Immutable</AssemblyName>
    <AssemblyVersion>1.1.37.0</AssemblyVersion>
    <AssemblyVersion>1.2.0.0</AssemblyVersion>
    <AssemblyVersion>1.2.1.0</AssemblyVersion>
    <AssemblyVersion>1.2.2.0</AssemblyVersion>
    <AssemblyVersion>1.2.3.0</AssemblyVersion>
    <AssemblyVersion>1.2.4.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IList&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyList&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Immutable.IImmutableList&lt;T&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;dotnet-uwp-10.0">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;dotnet-uwp-10.0">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Immutable.ImmutableListDebuggerProxy`1))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T"><span data-ttu-id="157d4-101">清單中項目的類型。</span><span class="sxs-lookup"><span data-stu-id="157d4-101">The type of elements in the list.</span></span></typeparam>
    <summary><span data-ttu-id="157d4-102">表示一個可以依照索引存取強式型別物件的不可變清單。</span><span class="sxs-lookup"><span data-stu-id="157d4-102">Represents an immutable list, which is a strongly typed list of objects that can be accessed by index.</span></span>  
  
 <span data-ttu-id="157d4-103">**NuGet 套件**：<see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">關於固定集合及其安裝方法</see>)</span><span class="sxs-lookup"><span data-stu-id="157d4-103">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks

<span data-ttu-id="157d4-104">`ImmutableList<T>` 沒有公用建構函式;您會開始擷取空`ImmutableList<T>`使用<xref:System.Collections.Immutable.ImmutableList%601.Empty?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="157d4-104">`ImmutableList<T>` has no public constructor; you begin by retrieving an empty `ImmutableList<T>` by using the <xref:System.Collections.Immutable.ImmutableList%601.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="157d4-105">您可以接著呼叫方法，例如<xref:System.Collections.Immutable.ImmutableList%601.Add%2A>和<xref:System.Collections.Immutable.ImmutableList%601.AddRange%2A>、 要填入集合。</span><span class="sxs-lookup"><span data-stu-id="157d4-105">You can then call methods, such as <xref:System.Collections.Immutable.ImmutableList%601.Add%2A> and <xref:System.Collections.Immutable.ImmutableList%601.AddRange%2A>, to populate the collection.</span></span> <span data-ttu-id="157d4-106">請注意，這些方法會傳回新的物件。</span><span class="sxs-lookup"><span data-stu-id="157d4-106">Note that these methods return a new object.</span></span> <span data-ttu-id="157d4-107">當您新增或移除不可變的清單中的項目時，並提出一份原始的清單項目加入或移除，原始清單會保持不變。</span><span class="sxs-lookup"><span data-stu-id="157d4-107">When you add or remove items from an immutable list, a copy of the original list is made with the items added or removed, and the original list is unchanged.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="157d4-108">此型別具備執行緒安全。</span><span class="sxs-lookup"><span data-stu-id="157d4-108">This type is thread safe.</span></span></threadsafe>
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableList&lt;T&gt; Add (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableList`1&lt;!T&gt; Add(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (value As T) As ImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableList&lt;T&gt; ^ Add(T value);" />
      <MemberSignature Language="F#" Value="member this.Add : 'T -&gt; System.Collections.Immutable.ImmutableList&lt;'T&gt;" Usage="immutableList.Add value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="157d4-109">要加入的物件。</span><span class="sxs-lookup"><span data-stu-id="157d4-109">The object to add.</span></span></param>
        <summary><span data-ttu-id="157d4-110">將指定的物件加入不可變清單的尾端。</span><span class="sxs-lookup"><span data-stu-id="157d4-110">Adds the specified object to the end of the immutable list.</span></span></summary>
        <returns><span data-ttu-id="157d4-111">已新增物件的不可變新清單。</span><span class="sxs-lookup"><span data-stu-id="157d4-111">A new immutable list with the object added.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableList&lt;T&gt; AddRange (System.Collections.Generic.IEnumerable&lt;T&gt; items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableList`1&lt;!T&gt; AddRange(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function AddRange (items As IEnumerable(Of T)) As ImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableList&lt;T&gt; ^ AddRange(System::Collections::Generic::IEnumerable&lt;T&gt; ^ items);" />
      <MemberSignature Language="F#" Value="member this.AddRange : seq&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableList&lt;'T&gt;" Usage="immutableList.AddRange items" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="items"><span data-ttu-id="157d4-112">元素將加入至清單尾端的集合。</span><span class="sxs-lookup"><span data-stu-id="157d4-112">The collection whose elements will be added to the end of the list.</span></span></param>
        <summary><span data-ttu-id="157d4-113">將指定集合的元素加入至不可變清單的尾端。</span><span class="sxs-lookup"><span data-stu-id="157d4-113">Adds the elements of the specified collection to the end of the immutable list.</span></span></summary>
        <returns><span data-ttu-id="157d4-114">已新增項目的不可變新清單。</span><span class="sxs-lookup"><span data-stu-id="157d4-114">A new immutable list with the elements added.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BinarySearch">
      <MemberSignature Language="C#" Value="public int BinarySearch (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 BinarySearch(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function BinarySearch (item As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int BinarySearch(T item);" />
      <MemberSignature Language="F#" Value="member this.BinarySearch : 'T -&gt; int" Usage="immutableList.BinarySearch item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="157d4-115">要尋找的物件。</span><span class="sxs-lookup"><span data-stu-id="157d4-115">The object to locate.</span></span> <span data-ttu-id="157d4-116">參考類型的值可以是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="157d4-116">The value can be <see langword="null" /> for reference types.</span></span></param>
        <summary><span data-ttu-id="157d4-117">使用預設的比較子並傳回元素以零為起始的索引，來搜尋整個已排序的清單的某個元素。</span><span class="sxs-lookup"><span data-stu-id="157d4-117">Searches the entire sorted list for an element using the default comparer and returns the zero-based index of the element.</span></span></summary>
        <returns><span data-ttu-id="157d4-118">如果有找到，則為已排序的清單中元素之以零為起始的索引，否則便為負數，此負數為大於元素的下一個元素索引之位元補數，或者，如果沒有更大的元素，則為 <see cref="P:System.Collections.ICollection.Count" /> 的位元補數。</span><span class="sxs-lookup"><span data-stu-id="157d4-118">The zero-based index of item in the sorted List, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of <see cref="P:System.Collections.ICollection.Count" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="157d4-119">預設比較子找不到類型 T 的比較子實作。</span><span class="sxs-lookup"><span data-stu-id="157d4-119">The default comparer cannot find a comparer implementation of the for type T.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BinarySearch">
      <MemberSignature Language="C#" Value="public int BinarySearch (T item, System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 BinarySearch(!T item, class System.Collections.Generic.IComparer`1&lt;!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function BinarySearch (item As T, comparer As IComparer(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int BinarySearch(T item, System::Collections::Generic::IComparer&lt;T&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="member this.BinarySearch : 'T * System.Collections.Generic.IComparer&lt;'T&gt; -&gt; int" Usage="immutableList.BinarySearch (item, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="157d4-120">要尋找的物件。</span><span class="sxs-lookup"><span data-stu-id="157d4-120">The object to locate.</span></span> <span data-ttu-id="157d4-121">參考類型的值可以是 Null。</span><span class="sxs-lookup"><span data-stu-id="157d4-121">The value can be null for reference types.</span></span></param>
        <param name="comparer"><span data-ttu-id="157d4-122">比較元素時要使用的比較子實作，或 null 表示使用預設比較子。</span><span class="sxs-lookup"><span data-stu-id="157d4-122">The  comparer implementation to use when comparing elements or null to use the default comparer.</span></span></param>
        <summary><span data-ttu-id="157d4-123">使用指定的比較子並傳回元素以零為起始的索引，來搜尋整個已排序的清單中的某個元素。</span><span class="sxs-lookup"><span data-stu-id="157d4-123">Searches the entire sorted list for an element using the specified comparer and returns the zero-based index of the element.</span></span></summary>
        <returns><span data-ttu-id="157d4-124">如果有找到，則為已排序的清單中元素之以零為起始的索引，否則便為負數，此負數為大於元素的下一個元素索引之位元補數，或者，如果沒有更大的元素，則為 <see cref="P:System.Collections.ICollection.Count" /> 的位元補數。</span><span class="sxs-lookup"><span data-stu-id="157d4-124">The zero-based index of item in the sorted List, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of <see cref="P:System.Collections.ICollection.Count" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="157d4-125">比較子是 <see langword="null" />，而且預設比較子找不到類型 T 的比較子實作。</span><span class="sxs-lookup"><span data-stu-id="157d4-125">comparer is <see langword="null" />, and the default comparer cannot find an comparer implementation for type T.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BinarySearch">
      <MemberSignature Language="C#" Value="public int BinarySearch (int index, int count, T item, System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 BinarySearch(int32 index, int32 count, !T item, class System.Collections.Generic.IComparer`1&lt;!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function BinarySearch (index As Integer, count As Integer, item As T, comparer As IComparer(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int BinarySearch(int index, int count, T item, System::Collections::Generic::IComparer&lt;T&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="member this.BinarySearch : int * int * 'T * System.Collections.Generic.IComparer&lt;'T&gt; -&gt; int" Usage="immutableList.BinarySearch (index, count, item, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="item" Type="T" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="157d4-126">要搜尋範圍內之以零為起始的起始索引。</span><span class="sxs-lookup"><span data-stu-id="157d4-126">The zero-based starting index of the range to search.</span></span></param>
        <param name="count"><span data-ttu-id="157d4-127">搜尋範圍的長度。</span><span class="sxs-lookup"><span data-stu-id="157d4-127">The length of the range to search.</span></span></param>
        <param name="item"><span data-ttu-id="157d4-128">要尋找的物件。</span><span class="sxs-lookup"><span data-stu-id="157d4-128">The object to locate.</span></span> <span data-ttu-id="157d4-129">參考類型的值可以是 Null。</span><span class="sxs-lookup"><span data-stu-id="157d4-129">The value can be null for reference types.</span></span></param>
        <param name="comparer"><span data-ttu-id="157d4-130">比較元素時要使用的比較子實作，或 <see langword="null" /> 表示使用預設比較子。</span><span class="sxs-lookup"><span data-stu-id="157d4-130">The comparer implementation to use when comparing elements, or <see langword="null" /> to use the default comparer.</span></span></param>
        <summary><span data-ttu-id="157d4-131">使用指定的比較子在已排序之清單內搜尋某範圍的元素，並傳回該元素以零為起始的索引。</span><span class="sxs-lookup"><span data-stu-id="157d4-131">Searches a range of elements in the sorted list for an element using the specified comparer and returns the zero-based index of the element.</span></span></summary>
        <returns><span data-ttu-id="157d4-132">如果有找到，則為已排序的清單中元素之以零為起始的索引，否則便為負數，此負數為大於元素的下一個元素索引之位元補數，或者，如果沒有更大的元素，則為 <paramref name="count" /> 的位元補數。</span><span class="sxs-lookup"><span data-stu-id="157d4-132">The zero-based index of item in the sorted list, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of <paramref name="count" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="157d4-133">索引小於 0 或 <paramref name="count" /> 小於 0。</span><span class="sxs-lookup"><span data-stu-id="157d4-133">index is less than 0 or <paramref name="count" /> is less than 0.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="157d4-134">索引和 <paramref name="count" /> 不代表清單中的有效範圍。</span><span class="sxs-lookup"><span data-stu-id="157d4-134">index and <paramref name="count" /> do not denote a valid range in the list.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="157d4-135"><paramref name="comparer" /> 是 <see langword="null" />，而且預設比較子找不到類型 T 的比較子實作。</span><span class="sxs-lookup"><span data-stu-id="157d4-135"><paramref name="comparer" /> is <see langword="null" />, and the default comparer cannot find an comparer implementation for type T.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableList&lt;T&gt; Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableList`1&lt;!T&gt; Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Function Clear () As ImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableList&lt;T&gt; ^ Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; System.Collections.Immutable.ImmutableList&lt;'T&gt;" Usage="immutableList.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="157d4-136">從不可變清單中移除所有元素。</span><span class="sxs-lookup"><span data-stu-id="157d4-136">Removes all elements from the immutable list.</span></span></summary>
        <returns><span data-ttu-id="157d4-137">空白清單保留此實體擁有的相同排序或未排序的語意。</span><span class="sxs-lookup"><span data-stu-id="157d4-137">An empty list that retains the same sort or unordered semantics that this instance has.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(T value);" />
      <MemberSignature Language="F#" Value="abstract member Contains : 'T -&gt; bool&#xA;override this.Contains : 'T -&gt; bool" Usage="immutableList.Contains value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Contains(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="157d4-138">要尋找的值。</span><span class="sxs-lookup"><span data-stu-id="157d4-138">The value to locate.</span></span></param>
        <summary><span data-ttu-id="157d4-139">判斷此不可變的清單是否包含指定的值。</span><span class="sxs-lookup"><span data-stu-id="157d4-139">Determines whether this immutable list contains the specified value.</span></span></summary>
        <returns><span data-ttu-id="157d4-140">如果包含指定的值，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="157d4-140"><see langword="true" /> if the list contains the specified value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertAll&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableList&lt;TOutput&gt; ConvertAll&lt;TOutput&gt; (Func&lt;T,TOutput&gt; converter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableList`1&lt;!!TOutput&gt; ConvertAll&lt;TOutput&gt;(class System.Func`2&lt;!T, !!TOutput&gt; converter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.ConvertAll``1(System.Func{`0,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function ConvertAll(Of TOutput) (converter As Func(Of T, TOutput)) As ImmutableList(Of TOutput)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA; System::Collections::Immutable::ImmutableList&lt;TOutput&gt; ^ ConvertAll(Func&lt;T, TOutput&gt; ^ converter);" />
      <MemberSignature Language="F#" Value="member this.ConvertAll : Func&lt;'T, 'Output&gt; -&gt; System.Collections.Immutable.ImmutableList&lt;'Output&gt;" Usage="immutableList.ConvertAll converter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableList&lt;TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="converter" Type="System.Func&lt;T,TOutput&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput"><span data-ttu-id="157d4-141">目標陣列項目的類型。</span><span class="sxs-lookup"><span data-stu-id="157d4-141">The type of the elements of the target array.</span></span></typeparam>
        <param name="converter"><span data-ttu-id="157d4-142">可將某一型別的每個元素轉換成另一個型別的委派。</span><span class="sxs-lookup"><span data-stu-id="157d4-142">A delegate that converts each element from one type to another type.</span></span></param>
        <summary><span data-ttu-id="157d4-143">將目前不可變清單中的元素轉換為另一種型別，並傳回包含已轉換元素的清單。</span><span class="sxs-lookup"><span data-stu-id="157d4-143">Converts the elements in the current immutable list to another type, and returns a list containing the converted elements.</span></span></summary>
        <returns><span data-ttu-id="157d4-144">包含已轉換的項目從目前的目標型別的清單<see cref="T:System.Collections.Immutable.ImmutableList`1" />。</span><span class="sxs-lookup"><span data-stu-id="157d4-144">A list of the target type containing the converted elements from the current <see cref="T:System.Collections.Immutable.ImmutableList`1" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (T[] array);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(!T[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.CopyTo(`0[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As T())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;T&gt; ^ array);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : 'T[] -&gt; unit" Usage="immutableList.CopyTo array" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="157d4-145">一維陣列，該陣列是從不可變清單複製之項目的目的地。</span><span class="sxs-lookup"><span data-stu-id="157d4-145">The one-dimensional array that is the destination of the elements copied from the immutable list.</span></span> <span data-ttu-id="157d4-146">陣列必須有以零為起始的索引。</span><span class="sxs-lookup"><span data-stu-id="157d4-146">The array must have zero-based indexing.</span></span></param>
        <summary><span data-ttu-id="157d4-147">從目標陣列的開頭開始，將整個不可變的清單複製到相容的一維陣列。</span><span class="sxs-lookup"><span data-stu-id="157d4-147">Copies the entire immutable list to a compatible one-dimensional array, starting at the beginning of the target array.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (T[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(!T[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.CopyTo(`0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As T(), arrayIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(cli::array &lt;T&gt; ^ array, int arrayIndex);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : 'T[] * int -&gt; unit&#xA;override this.CopyTo : 'T[] * int -&gt; unit" Usage="immutableList.CopyTo (array, arrayIndex)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="157d4-148">一維陣列，該陣列是從不可變清單複製之項目的目的地。</span><span class="sxs-lookup"><span data-stu-id="157d4-148">The one-dimensional array that is the destination of the elements copied from the immutable list.</span></span> <span data-ttu-id="157d4-149">陣列必須有以零為起始的索引。</span><span class="sxs-lookup"><span data-stu-id="157d4-149">The array must have zero-based indexing.</span></span></param>
        <param name="arrayIndex"><span data-ttu-id="157d4-150"><paramref name="array" /> 中以零起始的索引，即開始複製的位置。</span><span class="sxs-lookup"><span data-stu-id="157d4-150">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="157d4-151">從目標陣列的指定索引處開始，將整個不可變的清單複製到相容的一維陣列。</span><span class="sxs-lookup"><span data-stu-id="157d4-151">Copies the entire immutable list to a compatible one-dimensional array, starting at the specified index of the target array.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (int index, T[] array, int arrayIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(int32 index, !T[] array, int32 arrayIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (index As Integer, array As T(), arrayIndex As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(int index, cli::array &lt;T&gt; ^ array, int arrayIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : int * 'T[] * int * int -&gt; unit" Usage="immutableList.CopyTo (index, array, arrayIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="157d4-152">來源的不可變清單中以零為起始的索引，其為複製開始處。</span><span class="sxs-lookup"><span data-stu-id="157d4-152">The zero-based index in the source immutable list at which copying begins.</span></span></param>
        <param name="array"><span data-ttu-id="157d4-153">一維陣列，該陣列是從不可變清單複製之項目的目的地。</span><span class="sxs-lookup"><span data-stu-id="157d4-153">The one-dimensional array that is the destination of the elements copied from the immutable list.</span></span> <span data-ttu-id="157d4-154">陣列必須有以零為起始的索引。</span><span class="sxs-lookup"><span data-stu-id="157d4-154">The array must have zero-based indexing.</span></span></param>
        <param name="arrayIndex"><span data-ttu-id="157d4-155">陣列中以零起始的索引，即複製的起始處。</span><span class="sxs-lookup"><span data-stu-id="157d4-155">The zero-based index in array at which copying begins.</span></span></param>
        <param name="count"><span data-ttu-id="157d4-156">要複製的項目數目。</span><span class="sxs-lookup"><span data-stu-id="157d4-156">The number of elements to copy.</span></span></param>
        <summary><span data-ttu-id="157d4-157">從目標陣列的指定索引處開始，從不可變清單中複製某範圍的元素到相容的一維陣列。</span><span class="sxs-lookup"><span data-stu-id="157d4-157">Copies a range of elements from the immutable list to a compatible one-dimensional array, starting at the specified index of the target array.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableList`1.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Collections.Immutable.ImmutableList&lt;'T&gt;.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.Count</InterfaceMember>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyCollection`1.Count</InterfaceMember>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="157d4-158">取得清單中所包含元素的數目。</span><span class="sxs-lookup"><span data-stu-id="157d4-158">Gets the number of elements contained in the list.</span></span></summary>
        <value><span data-ttu-id="157d4-159">清單中項目的數目。</span><span class="sxs-lookup"><span data-stu-id="157d4-159">The number of elements in the list.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static readonly System.Collections.Immutable.ImmutableList&lt;T&gt; Empty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Collections.Immutable.ImmutableList`1&lt;!T&gt; Empty" />
      <MemberSignature Language="DocId" Value="F:System.Collections.Immutable.ImmutableList`1.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Empty As ImmutableList(Of T) " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Collections::Immutable::ImmutableList&lt;T&gt; ^ Empty;" />
      <MemberSignature Language="F#" Value=" staticval mutable Empty : System.Collections.Immutable.ImmutableList&lt;'T&gt;" Usage="System.Collections.Immutable.ImmutableList&lt;'T&gt;.Empty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="157d4-160">取得含有預設排序比較子的空集合。</span><span class="sxs-lookup"><span data-stu-id="157d4-160">Gets an empty set with the default sort comparer.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exists">
      <MemberSignature Language="C#" Value="public bool Exists (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Exists(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.Exists(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Exists (match As Predicate(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Exists(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.Exists : Predicate&lt;'T&gt; -&gt; bool" Usage="immutableList.Exists match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match"><span data-ttu-id="157d4-161">定義要搜尋項目之條件的委派。</span><span class="sxs-lookup"><span data-stu-id="157d4-161">The delegate that defines the conditions of the elements to search for.</span></span></param>
        <summary><span data-ttu-id="157d4-162">判斷不可變的清單是否包含符合指定述詞所定義之條件的項目。</span><span class="sxs-lookup"><span data-stu-id="157d4-162">Determines whether the immutable list contains elements that match the conditions defined by the specified predicate.</span></span></summary>
        <returns><span data-ttu-id="157d4-163">如果不可變的清單包含一或多個符合指定述詞所定義之條件的項目，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="157d4-163"><see langword="true" /> if the immutable list contains one or more elements that match the conditions defined by the specified predicate; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public T Find (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T Find(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.Find(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (match As Predicate(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T Find(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.Find : Predicate&lt;'T&gt; -&gt; 'T" Usage="immutableList.Find match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match"><span data-ttu-id="157d4-164">定義要搜尋項目之條件的委派。</span><span class="sxs-lookup"><span data-stu-id="157d4-164">The delegate that defines the conditions of the element to search for.</span></span></param>
        <summary><span data-ttu-id="157d4-165">搜尋符合指定述詞所定義之條件的項目，並傳回整個不可變清單內第一個出現的項目。</span><span class="sxs-lookup"><span data-stu-id="157d4-165">Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire immutable list.</span></span></summary>
        <returns><span data-ttu-id="157d4-166">第一個符合指定之述詞所定義的條件之項目 (如有找到)，否則為類型 <paramref name="T" /> 的預設值。</span><span class="sxs-lookup"><span data-stu-id="157d4-166">The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <paramref name="T" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindAll">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableList&lt;T&gt; FindAll (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableList`1&lt;!T&gt; FindAll(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.FindAll(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindAll (match As Predicate(Of T)) As ImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableList&lt;T&gt; ^ FindAll(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindAll : Predicate&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableList&lt;'T&gt;" Usage="immutableList.FindAll match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match"><span data-ttu-id="157d4-167">定義要搜尋項目之條件的委派。</span><span class="sxs-lookup"><span data-stu-id="157d4-167">The delegate that defines the conditions of the elements to search for.</span></span></param>
        <summary><span data-ttu-id="157d4-168">擷取符合指定之述詞所定義的條件之所有項目。</span><span class="sxs-lookup"><span data-stu-id="157d4-168">Retrieves all the elements that match the conditions defined by the specified predicate.</span></span></summary>
        <returns><span data-ttu-id="157d4-169">不可變的清單其中包含符合指定述詞所定義之條件的所有元素 (如有找到)，否則為空的不可變清單。</span><span class="sxs-lookup"><span data-stu-id="157d4-169">An immutable list that contains all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty immutable list.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindIndex">
      <MemberSignature Language="C#" Value="public int FindIndex (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindIndex(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindIndex (match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindIndex(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindIndex : Predicate&lt;'T&gt; -&gt; int" Usage="immutableList.FindIndex match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match"><span data-ttu-id="157d4-170">定義要搜尋項目之條件的委派。</span><span class="sxs-lookup"><span data-stu-id="157d4-170">The delegate that defines the conditions of the element to search for.</span></span></param>
        <summary><span data-ttu-id="157d4-171">搜尋符合指定述詞所定義之條件的項目，並傳回整個不可變清單內第一個出現項目之以零為起始的索引。</span><span class="sxs-lookup"><span data-stu-id="157d4-171">Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire immutable list.</span></span></summary>
        <returns><span data-ttu-id="157d4-172">第一次出現符合比對所定義之條件的元素以零為起始的索引 (如有找到)，如未找到則為 -1。</span><span class="sxs-lookup"><span data-stu-id="157d4-172">The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, ?1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindIndex">
      <MemberSignature Language="C#" Value="public int FindIndex (int startIndex, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindIndex(int32 startIndex, class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindIndex (startIndex As Integer, match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindIndex(int startIndex, Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindIndex : int * Predicate&lt;'T&gt; -&gt; int" Usage="immutableList.FindIndex (startIndex, match)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="startIndex"><span data-ttu-id="157d4-173">搜尋之以零為起始的起始索引。</span><span class="sxs-lookup"><span data-stu-id="157d4-173">The zero-based starting index of the search.</span></span></param>
        <param name="match"><span data-ttu-id="157d4-174">定義要搜尋項目之條件的委派。</span><span class="sxs-lookup"><span data-stu-id="157d4-174">The delegate that defines the conditions of the element to search for.</span></span></param>
        <summary><span data-ttu-id="157d4-175">搜尋符合指定述詞所定義之條件的項目，並傳回不可變的清單中，從指定索引開始到最後一個項目的項目範圍內，第一個出現項目以零為起始的索引。</span><span class="sxs-lookup"><span data-stu-id="157d4-175">Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.</span></span></summary>
        <returns><span data-ttu-id="157d4-176">第一次出現符合比對所定義之條件的元素以零為起始的索引 (如有找到)，如未找到則為 -1。</span><span class="sxs-lookup"><span data-stu-id="157d4-176">The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, ?1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindIndex">
      <MemberSignature Language="C#" Value="public int FindIndex (int startIndex, int count, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindIndex(int32 startIndex, int32 count, class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindIndex (startIndex As Integer, count As Integer, match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindIndex(int startIndex, int count, Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindIndex : int * int * Predicate&lt;'T&gt; -&gt; int" Usage="immutableList.FindIndex (startIndex, count, match)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="startIndex"><span data-ttu-id="157d4-177">搜尋之以零為起始的起始索引。</span><span class="sxs-lookup"><span data-stu-id="157d4-177">The zero-based starting index of the search.</span></span></param>
        <param name="count"><span data-ttu-id="157d4-178">區段中要搜尋的項目數目。</span><span class="sxs-lookup"><span data-stu-id="157d4-178">The number of elements in the section to search.</span></span></param>
        <param name="match"><span data-ttu-id="157d4-179">定義要搜尋項目之條件的委派。</span><span class="sxs-lookup"><span data-stu-id="157d4-179">The delegate that defines the conditions of the element to search for.</span></span></param>
        <summary><span data-ttu-id="157d4-180">搜尋符合指定述詞所定義之條件的項目，並傳回不可變的清單中，從指定索引開始且包含指定項目數的項目範圍內，第一個出現項目以零為起始的索引。</span><span class="sxs-lookup"><span data-stu-id="157d4-180">Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that starts at the specified index and contains the specified number of elements.</span></span></summary>
        <returns><span data-ttu-id="157d4-181">第一次出現符合比對所定義之條件的元素以零為起始的索引 (如有找到)，如未找到則為 -1。</span><span class="sxs-lookup"><span data-stu-id="157d4-181">The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, ?1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindLast">
      <MemberSignature Language="C#" Value="public T FindLast (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T FindLast(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.FindLast(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindLast (match As Predicate(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T FindLast(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindLast : Predicate&lt;'T&gt; -&gt; 'T" Usage="immutableList.FindLast match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match"><span data-ttu-id="157d4-182">定義要搜尋項目之條件的委派。</span><span class="sxs-lookup"><span data-stu-id="157d4-182">The delegate that defines the conditions of the element to search for.</span></span></param>
        <summary><span data-ttu-id="157d4-183">搜尋符合指定述詞所定義之條件的項目，並傳回整個不可變清單內最後一個出現的項目。</span><span class="sxs-lookup"><span data-stu-id="157d4-183">Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire immutable list.</span></span></summary>
        <returns><span data-ttu-id="157d4-184">最後一個符合指定之述詞所定義的條件之項目 (如有找到)，否則為類型 <paramref name="T" /> 的預設值。</span><span class="sxs-lookup"><span data-stu-id="157d4-184">The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <paramref name="T" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindLastIndex">
      <MemberSignature Language="C#" Value="public int FindLastIndex (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindLastIndex(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindLastIndex (match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindLastIndex(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindLastIndex : Predicate&lt;'T&gt; -&gt; int" Usage="immutableList.FindLastIndex match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match"><span data-ttu-id="157d4-185">定義要搜尋項目之條件的委派。</span><span class="sxs-lookup"><span data-stu-id="157d4-185">The delegate that defines the conditions of the element to search for.</span></span></param>
        <summary><span data-ttu-id="157d4-186">搜尋符合指定述詞所定義之條件的項目，並傳回整個不可變清單內最後一個出現項目以零為起始的索引。</span><span class="sxs-lookup"><span data-stu-id="157d4-186">Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire immutable list.</span></span></summary>
        <returns><span data-ttu-id="157d4-187">符合 <paramref name="match" /> 所定義之條件且最後一次出現之元素的以零為起始的索引 (如有找到)，如未找到則為 -1。</span><span class="sxs-lookup"><span data-stu-id="157d4-187">The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, ?1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindLastIndex">
      <MemberSignature Language="C#" Value="public int FindLastIndex (int startIndex, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindLastIndex(int32 startIndex, class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindLastIndex (startIndex As Integer, match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindLastIndex(int startIndex, Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindLastIndex : int * Predicate&lt;'T&gt; -&gt; int" Usage="immutableList.FindLastIndex (startIndex, match)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="startIndex"><span data-ttu-id="157d4-188">向後搜尋之以零為起始的起始索引。</span><span class="sxs-lookup"><span data-stu-id="157d4-188">The zero-based starting index of the backward search.</span></span></param>
        <param name="match"><span data-ttu-id="157d4-189">定義要搜尋項目之條件的委派。</span><span class="sxs-lookup"><span data-stu-id="157d4-189">The delegate that defines the conditions of the element to search for.</span></span></param>
        <summary><span data-ttu-id="157d4-190">搜尋符合指定述詞所定義之條件的項目，並傳回不可變的清單中，從第一個項目開始到指定索引的項目範圍內，最後一個出現項目以零為起始的索引。</span><span class="sxs-lookup"><span data-stu-id="157d4-190">Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.</span></span></summary>
        <returns><span data-ttu-id="157d4-191">符合 <paramref name="match" /> 所定義之條件且最後一次出現之元素的以零為起始的索引 (如有找到)，如未找到則為 -1。</span><span class="sxs-lookup"><span data-stu-id="157d4-191">The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, ?1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindLastIndex">
      <MemberSignature Language="C#" Value="public int FindLastIndex (int startIndex, int count, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindLastIndex(int32 startIndex, int32 count, class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindLastIndex (startIndex As Integer, count As Integer, match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindLastIndex(int startIndex, int count, Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindLastIndex : int * int * Predicate&lt;'T&gt; -&gt; int" Usage="immutableList.FindLastIndex (startIndex, count, match)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="startIndex"><span data-ttu-id="157d4-192">向後搜尋之以零為起始的起始索引。</span><span class="sxs-lookup"><span data-stu-id="157d4-192">The zero-based starting index of the backward search.</span></span></param>
        <param name="count"><span data-ttu-id="157d4-193">區段中要搜尋的項目數目。</span><span class="sxs-lookup"><span data-stu-id="157d4-193">The number of elements in the section to search.</span></span></param>
        <param name="match"><span data-ttu-id="157d4-194">定義要搜尋項目之條件的委派。</span><span class="sxs-lookup"><span data-stu-id="157d4-194">The delegate that defines the conditions of the element to search for.</span></span></param>
        <summary><span data-ttu-id="157d4-195">搜尋符合指定述詞所定義之條件的項目，並傳回不可變的清單中，包含指定項目數且結束於指定索引的項目範圍內，最後一個出現項目以零為起始的索引。</span><span class="sxs-lookup"><span data-stu-id="157d4-195">Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that contains the specified number of elements and ends at the specified index.</span></span></summary>
        <returns><span data-ttu-id="157d4-196">符合 <paramref name="match" /> 所定義之條件且最後一次出現之元素的以零為起始的索引 (如有找到)，如未找到則為 -1。</span><span class="sxs-lookup"><span data-stu-id="157d4-196">The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, ?1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForEach">
      <MemberSignature Language="C#" Value="public void ForEach (Action&lt;T&gt; action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ForEach(class System.Action`1&lt;!T&gt; action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.ForEach(System.Action{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub ForEach (action As Action(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ForEach(Action&lt;T&gt; ^ action);" />
      <MemberSignature Language="F#" Value="member this.ForEach : Action&lt;'T&gt; -&gt; unit" Usage="immutableList.ForEach action" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="157d4-197">要在不可變清單的每一個元素上執行的委派。</span><span class="sxs-lookup"><span data-stu-id="157d4-197">The delegate to perform on each element of the immutable list.</span></span></param>
        <summary><span data-ttu-id="157d4-198">在不可變清單的每一個元素上執行指定動作。</span><span class="sxs-lookup"><span data-stu-id="157d4-198">Performs the specified action on each element of the immutable list.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableList&lt;T&gt;.Enumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableList`1/Enumerator&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As ImmutableList(Of T).Enumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableList&lt;T&gt;::Enumerator GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Collections.Immutable.ImmutableList&lt;'T&gt;.Enumerator" Usage="immutableList.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableList&lt;T&gt;+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="157d4-199">傳回可逐一查看不可變清單的列舉程式。</span><span class="sxs-lookup"><span data-stu-id="157d4-199">Returns an enumerator that iterates through the immutable list.</span></span></summary>
        <returns><span data-ttu-id="157d4-200">可用於逐一查看不可變清單的列舉程式。</span><span class="sxs-lookup"><span data-stu-id="157d4-200">An enumerator  that can be used to iterate through the immutable list.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!CAUTION]
>  <span data-ttu-id="157d4-201">當這個列舉值做為值類型 （也就是當它未經過 boxing 處理），執行不會複製它，將它指派給第二個變數，或將它傳遞給另一種方法。</span><span class="sxs-lookup"><span data-stu-id="157d4-201">When this enumerator is used as a value type (that is, when it isn't boxed), do not copy it by assigning it to a second variable or by passing it to another method.</span></span> <span data-ttu-id="157d4-202">當處置此列舉值時，它傳回可變動參考類型的堆疊資源集區，而如果值的類型列舉值複製 （會發生這個情況容易不小心如果您傳遞周圍的值），則會有風險，已經過的堆疊傳回資源集區仍然可能在使用其中一個列舉值的複本，導致資料損毀或例外狀況。</span><span class="sxs-lookup"><span data-stu-id="157d4-202">When this enumerator is disposed of, it returns a mutable reference type stack to a resource pool, and if the value type enumerator is copied (which can easily happen unintentionally if you pass the value around), there is a risk that a stack that has already been returned to the resource pool may still be in use by one of the enumerator copies, leading to data corruption or exceptions.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableList&lt;T&gt; GetRange (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableList`1&lt;!T&gt; GetRange(int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.GetRange(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRange (index As Integer, count As Integer) As ImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableList&lt;T&gt; ^ GetRange(int index, int count);" />
      <MemberSignature Language="F#" Value="member this.GetRange : int * int -&gt; System.Collections.Immutable.ImmutableList&lt;'T&gt;" Usage="immutableList.GetRange (index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="157d4-203">以零為起始的索引，此為範圍起始處。</span><span class="sxs-lookup"><span data-stu-id="157d4-203">The zero-based index at which the range starts.</span></span></param>
        <param name="count"><span data-ttu-id="157d4-204">範圍中的項目數。</span><span class="sxs-lookup"><span data-stu-id="157d4-204">The number of elements in the range.</span></span></param>
        <summary><span data-ttu-id="157d4-205">為來源不可變清單中的項目範圍建立淺層複本。</span><span class="sxs-lookup"><span data-stu-id="157d4-205">Creates a shallow copy of a range of elements in the source immutable list.</span></span></summary>
        <returns><span data-ttu-id="157d4-206">來源不可變清單中項目範圍的淺層複本。</span><span class="sxs-lookup"><span data-stu-id="157d4-206">A shallow copy of a range of elements in the source immutable list.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.IndexOf(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(T value);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : 'T -&gt; int&#xA;override this.IndexOf : 'T -&gt; int" Usage="immutableList.IndexOf value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.IndexOf(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="157d4-207">要位於不可變清單中的物件。</span><span class="sxs-lookup"><span data-stu-id="157d4-207">The object to locate in the immutable list.</span></span> <span data-ttu-id="157d4-208">參考類型的值可以是 <c>null</c>。</span><span class="sxs-lookup"><span data-stu-id="157d4-208">The value can be <c>null</c> for reference types.</span></span></param>
        <summary><span data-ttu-id="157d4-209">搜尋指定的物件，並傳回整個不可變清單中第一個出現物件之以零為起始的索引。</span><span class="sxs-lookup"><span data-stu-id="157d4-209">Searches for the specified object and returns the zero-based index of the first occurrence within the entire immutable list.</span></span></summary>
        <returns><span data-ttu-id="157d4-210">整個不可變清單中第一個出現 <paramref name="value" /> 之以零為起始的索引 (如有找到)，否則為 -1。</span><span class="sxs-lookup"><span data-stu-id="157d4-210">The zero-based index of the first occurrence of <paramref name="value" /> within the entire immutable list, if found; otherwise, ?1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (T item, int index, int count, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(!T item, int32 index, int32 count, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (item As T, index As Integer, count As Integer, equalityComparer As IEqualityComparer(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(T item, int index, int count, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : 'T * int * int * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; int&#xA;override this.IndexOf : 'T * int * int * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; int" Usage="immutableList.IndexOf (item, index, count, equalityComparer)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="157d4-211">在清單中要尋找的物件，參考型別的值可以是 null。</span><span class="sxs-lookup"><span data-stu-id="157d4-211">The object to locate in the list The value can be null for reference types.</span></span></param>
        <param name="index"><span data-ttu-id="157d4-212">搜尋之以零為起始的起始索引。</span><span class="sxs-lookup"><span data-stu-id="157d4-212">The zero-based starting index of the search.</span></span> <span data-ttu-id="157d4-213">0 (零) 在空白清單中有效。</span><span class="sxs-lookup"><span data-stu-id="157d4-213">0 (zero) is valid in an empty list.</span></span></param>
        <param name="count"><span data-ttu-id="157d4-214">區段中要搜尋的項目數目。</span><span class="sxs-lookup"><span data-stu-id="157d4-214">The number of elements in the section to search.</span></span></param>
        <param name="equalityComparer"><span data-ttu-id="157d4-215">搜尋中所使用的相等比較子。</span><span class="sxs-lookup"><span data-stu-id="157d4-215">The equality comparer to use in the search.</span></span></param>
        <summary><span data-ttu-id="157d4-216">在清單中從指定索引開始且包含指定元素數目的範圍內，搜尋指定的物件第一次出現的位置，並傳回其索引值 (索引以零為起始)。</span><span class="sxs-lookup"><span data-stu-id="157d4-216">Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the list that starts at the specified index and contains the specified number of elements.</span></span></summary>
        <returns><span data-ttu-id="157d4-217">在清單中從索引處開始且包含項目數計數的項目範圍內，第一次出現項目之以零為起始的索引；如未找到則為 -1。</span><span class="sxs-lookup"><span data-stu-id="157d4-217">The zero-based index of the first occurrence of item within the range of elements in the list that starts at index and contains count number of elements, if found; otherwise, -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableList&lt;T&gt; Insert (int index, T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableList`1&lt;!T&gt; Insert(int32 index, !T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.Insert(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (index As Integer, item As T) As ImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableList&lt;T&gt; ^ Insert(int index, T item);" />
      <MemberSignature Language="F#" Value="member this.Insert : int * 'T -&gt; System.Collections.Immutable.ImmutableList&lt;'T&gt;" Usage="immutableList.Insert (index, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="157d4-218">要插入物件之以零起始的索引處。</span><span class="sxs-lookup"><span data-stu-id="157d4-218">The zero-based index at which to insert the object.</span></span></param>
        <param name="item"><span data-ttu-id="157d4-219">要插入的物件。</span><span class="sxs-lookup"><span data-stu-id="157d4-219">The object to insert.</span></span></param>
        <summary><span data-ttu-id="157d4-220">將指定的物件插入至不可變清單的指定索引處。</span><span class="sxs-lookup"><span data-stu-id="157d4-220">Inserts the specified object into the immutable list at the specified index.</span></span></summary>
        <returns><span data-ttu-id="157d4-221">插入物件後新的不可變清單。</span><span class="sxs-lookup"><span data-stu-id="157d4-221">The new immutable list after the object is inserted.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableList&lt;T&gt; InsertRange (int index, System.Collections.Generic.IEnumerable&lt;T&gt; items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableList`1&lt;!T&gt; InsertRange(int32 index, class System.Collections.Generic.IEnumerable`1&lt;!T&gt; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function InsertRange (index As Integer, items As IEnumerable(Of T)) As ImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableList&lt;T&gt; ^ InsertRange(int index, System::Collections::Generic::IEnumerable&lt;T&gt; ^ items);" />
      <MemberSignature Language="F#" Value="member this.InsertRange : int * seq&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableList&lt;'T&gt;" Usage="immutableList.InsertRange (index, items)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="157d4-222">要插入元素之以零起始的索引處。</span><span class="sxs-lookup"><span data-stu-id="157d4-222">The zero-based index at which to insert the elements.</span></span></param>
        <param name="items"><span data-ttu-id="157d4-223">應插入元素的集合。</span><span class="sxs-lookup"><span data-stu-id="157d4-223">The collection whose elements should be inserted.</span></span></param>
        <summary><span data-ttu-id="157d4-224">將集合的項目插入不可變清單的指定索引處。</span><span class="sxs-lookup"><span data-stu-id="157d4-224">Inserts the elements of a collection into the immutable list at the specified index.</span></span></summary>
        <returns><span data-ttu-id="157d4-225">插入元素後新的不可變清單。</span><span class="sxs-lookup"><span data-stu-id="157d4-225">The new immutable list after the elements are inserted.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableList`1.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEmpty : bool" Usage="System.Collections.Immutable.ImmutableList&lt;'T&gt;.IsEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;dotnet-uwp-10.0">
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="157d4-226">取得值，這個值指出清單是否為空。</span><span class="sxs-lookup"><span data-stu-id="157d4-226">Gets a value that indicates whether this list is empty.</span></span></summary>
        <value><span data-ttu-id="157d4-227">如果該清單為空則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="157d4-227"><see langword="true" /> if the list is empty; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public T this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableList`1.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(index As Integer) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T default[int] { T get(int index); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : 'T" Usage="System.Collections.Immutable.ImmutableList&lt;'T&gt;.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="157d4-228">要擷取之項目的索引。</span><span class="sxs-lookup"><span data-stu-id="157d4-228">The index of the element to retrieve.</span></span></param>
        <summary><span data-ttu-id="157d4-229">取得清單中指定索引處的元素。</span><span class="sxs-lookup"><span data-stu-id="157d4-229">Gets the element at the specified index of the list.</span></span></summary>
        <value><span data-ttu-id="157d4-230">在指定索引上的項目。</span><span class="sxs-lookup"><span data-stu-id="157d4-230">The element at the specified index.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IndexOutOfRangeException"><span data-ttu-id="157d4-231">在 get 作業中，<paramref name="index" />是負數或不小於<see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />。</span><span class="sxs-lookup"><span data-stu-id="157d4-231">In a get operation, <paramref name="index" /> is negative or not less than <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ItemRef">
      <MemberSignature Language="C#" Value="public ref readonly T&amp; ItemRef (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance T&amp; modreq(System.Runtime.InteropServices.InAttribute) ItemRef(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.ItemRef(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ItemRef (index As Integer) As T&amp;" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T&amp; ^ ItemRef(int index);" />
      <MemberSignature Language="F#" Value="member this.ItemRef : int -&gt; T&amp;" Usage="immutableList.ItemRef index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Readonly">
        <ReturnType>T</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="netcore-2.1">
            <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.1" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="157d4-232">傳回集合中的項目零起始索引。</span><span class="sxs-lookup"><span data-stu-id="157d4-232">The 0-based index of the element in the set to return.</span></span></param>
        <summary><span data-ttu-id="157d4-233">取得在集合的元素的唯讀參考給定<paramref name="index" />。</span><span class="sxs-lookup"><span data-stu-id="157d4-233">Gets a read-only reference to the element of the set at the given <paramref name="index" />.</span></span></summary>
        <returns><span data-ttu-id="157d4-234">指定位置處的項目唯讀參考。</span><span class="sxs-lookup"><span data-stu-id="157d4-234">A read-only reference to the element at the given position.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IndexOutOfRangeException"><span data-ttu-id="157d4-235"><paramref name="index" /> 是負數或不小於<see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />。</span><span class="sxs-lookup"><span data-stu-id="157d4-235"><paramref name="index" /> is negative or not less than <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (T item, int index, int count, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(!T item, int32 index, int32 count, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (item As T, index As Integer, count As Integer, equalityComparer As IEqualityComparer(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(T item, int index, int count, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : 'T * int * int * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; int&#xA;override this.LastIndexOf : 'T * int * int * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; int" Usage="immutableList.LastIndexOf (item, index, count, equalityComparer)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="157d4-236">要在清單中尋找的物件</span><span class="sxs-lookup"><span data-stu-id="157d4-236">The object to locate in the list.</span></span> <span data-ttu-id="157d4-237">參考類型的值可以是 Null。</span><span class="sxs-lookup"><span data-stu-id="157d4-237">The value can be null for reference types.</span></span></param>
        <param name="index"><span data-ttu-id="157d4-238">向後搜尋之以零為起始的起始索引。</span><span class="sxs-lookup"><span data-stu-id="157d4-238">The zero-based starting index of the backward search.</span></span></param>
        <param name="count"><span data-ttu-id="157d4-239">區段中要搜尋的項目數目。</span><span class="sxs-lookup"><span data-stu-id="157d4-239">The number of elements in the section to search.</span></span></param>
        <param name="equalityComparer"><span data-ttu-id="157d4-240">搜尋中所使用的相等比較子。</span><span class="sxs-lookup"><span data-stu-id="157d4-240">The equality comparer to use in the search.</span></span></param>
        <summary><span data-ttu-id="157d4-241">在清單中包含指定個數元素且結尾位於指定索引的元素範圍內，搜尋指定的物件最後一次出現的位置，並傳回其索引值 (索引以零為起始)。</span><span class="sxs-lookup"><span data-stu-id="157d4-241">Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the list that contains the specified number of elements and ends at the specified index.</span></span></summary>
        <returns><span data-ttu-id="157d4-242">在清單中包含項目數計數且結束於索引處的項目範圍內，最後一次出現項目之以零為起始的索引；如未找到則為 -1。</span><span class="sxs-lookup"><span data-stu-id="157d4-242">The zero-based index of the last occurrence of item within the range of elements in the list that contains count number of elements and ends at index, if found; otherwise, -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableList&lt;T&gt; Remove (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableList`1&lt;!T&gt; Remove(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (value As T) As ImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableList&lt;T&gt; ^ Remove(T value);" />
      <MemberSignature Language="F#" Value="member this.Remove : 'T -&gt; System.Collections.Immutable.ImmutableList&lt;'T&gt;" Usage="immutableList.Remove value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="157d4-243">要移除的物件。</span><span class="sxs-lookup"><span data-stu-id="157d4-243">The object to remove.</span></span></param>
        <summary><span data-ttu-id="157d4-244">從這個不可變清單中移除指定物件的第一個符合元素。</span><span class="sxs-lookup"><span data-stu-id="157d4-244">Removes the first occurrence of the specified object from this immutable list.</span></span></summary>
        <returns><span data-ttu-id="157d4-245">新的清單已移除物件，或是指定的物件已不存在於此清單則為此清單。</span><span class="sxs-lookup"><span data-stu-id="157d4-245">A new list with the object removed, or this list if the specified object is not in this list.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableList&lt;T&gt; Remove (T value, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableList`1&lt;!T&gt; Remove(!T value, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (value As T, equalityComparer As IEqualityComparer(Of T)) As ImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableList&lt;T&gt; ^ Remove(T value, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="member this.Remove : 'T * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableList&lt;'T&gt;" Usage="immutableList.Remove (value, equalityComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="157d4-246">從清單移除之元素的值。</span><span class="sxs-lookup"><span data-stu-id="157d4-246">The value of the element to remove from the list.</span></span></param>
        <param name="equalityComparer"><span data-ttu-id="157d4-247">搜尋中所使用的相等比較子。</span><span class="sxs-lookup"><span data-stu-id="157d4-247">The equality comparer to use in the search.</span></span></param>
        <summary><span data-ttu-id="157d4-248">從這個不可變清單中移除第一個符合指定值的物件。</span><span class="sxs-lookup"><span data-stu-id="157d4-248">Removes the first occurrence of the object that matches the specified value from this immutable list.</span></span></summary>
        <returns><span data-ttu-id="157d4-249">新的清單已移除物件，或是指定的物件已不存在於此清單則為此清單。</span><span class="sxs-lookup"><span data-stu-id="157d4-249">A new list with the object removed, or this list if the specified object is not in this list.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAll">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableList&lt;T&gt; RemoveAll (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableList`1&lt;!T&gt; RemoveAll(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.RemoveAll(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAll (match As Predicate(Of T)) As ImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableList&lt;T&gt; ^ RemoveAll(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.RemoveAll : Predicate&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableList&lt;'T&gt;" Usage="immutableList.RemoveAll match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match"><span data-ttu-id="157d4-250">定義要移除項目之條件的委派。</span><span class="sxs-lookup"><span data-stu-id="157d4-250">The delegate that defines the conditions of the elements to remove.</span></span></param>
        <summary><span data-ttu-id="157d4-251">移除符合指定的述詞所定義之條件的所有項目。</span><span class="sxs-lookup"><span data-stu-id="157d4-251">Removes all the elements that match the conditions defined by the specified predicate.</span></span></summary>
        <returns><span data-ttu-id="157d4-252">已移除元素的新清單。</span><span class="sxs-lookup"><span data-stu-id="157d4-252">The new list with the elements removed.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableList&lt;T&gt; RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableList`1&lt;!T&gt; RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAt (index As Integer) As ImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableList&lt;T&gt; ^ RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="member this.RemoveAt : int -&gt; System.Collections.Immutable.ImmutableList&lt;'T&gt;" Usage="immutableList.RemoveAt index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="157d4-253">移除項目之以零為起始的索引。</span><span class="sxs-lookup"><span data-stu-id="157d4-253">The zero-based index of the element to remove.</span></span></param>
        <summary><span data-ttu-id="157d4-254">移除指定索引中的項目。</span><span class="sxs-lookup"><span data-stu-id="157d4-254">Removes the element at the specified index.</span></span></summary>
        <returns><span data-ttu-id="157d4-255">已移除項目的新清單。</span><span class="sxs-lookup"><span data-stu-id="157d4-255">A new list with the element removed.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableList&lt;T&gt; RemoveRange (System.Collections.Generic.IEnumerable&lt;T&gt; items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableList`1&lt;!T&gt; RemoveRange(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveRange (items As IEnumerable(Of T)) As ImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableList&lt;T&gt; ^ RemoveRange(System::Collections::Generic::IEnumerable&lt;T&gt; ^ items);" />
      <MemberSignature Language="F#" Value="member this.RemoveRange : seq&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableList&lt;'T&gt;" Usage="immutableList.RemoveRange items" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="items"><span data-ttu-id="157d4-256">若在這個清單中找到符合的元素，應被移除元素的集合。</span><span class="sxs-lookup"><span data-stu-id="157d4-256">The collection whose elements should be removed if matches are found in this list.</span></span></param>
        <summary><span data-ttu-id="157d4-257">從這個不可變清單移除一個範圍的元素。</span><span class="sxs-lookup"><span data-stu-id="157d4-257">Removes a range of elements from this immutable list.</span></span></summary>
        <returns><span data-ttu-id="157d4-258">已移除項目的新清單。</span><span class="sxs-lookup"><span data-stu-id="157d4-258">A new list with the elements removed.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableList&lt;T&gt; RemoveRange (System.Collections.Generic.IEnumerable&lt;T&gt; items, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableList`1&lt;!T&gt; RemoveRange(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; items, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveRange (items As IEnumerable(Of T), equalityComparer As IEqualityComparer(Of T)) As ImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableList&lt;T&gt; ^ RemoveRange(System::Collections::Generic::IEnumerable&lt;T&gt; ^ items, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="member this.RemoveRange : seq&lt;'T&gt; * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableList&lt;'T&gt;" Usage="immutableList.RemoveRange (items, equalityComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="items"><span data-ttu-id="157d4-259">如果在這個清單中找到相符項目時要移除的項目。</span><span class="sxs-lookup"><span data-stu-id="157d4-259">The items to remove if matches are found in this list.</span></span></param>
        <param name="equalityComparer"><span data-ttu-id="157d4-260">搜尋中所使用的相等比較子。</span><span class="sxs-lookup"><span data-stu-id="157d4-260">The equality comparer to use in the search.</span></span></param>
        <summary><span data-ttu-id="157d4-261">從這個清單中移除指定的值。</span><span class="sxs-lookup"><span data-stu-id="157d4-261">Removes the specified values from this list.</span></span></summary>
        <returns><span data-ttu-id="157d4-262">已移除項目的新清單。</span><span class="sxs-lookup"><span data-stu-id="157d4-262">A new list with the elements removed.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableList&lt;T&gt; RemoveRange (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableList`1&lt;!T&gt; RemoveRange(int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveRange (index As Integer, count As Integer) As ImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableList&lt;T&gt; ^ RemoveRange(int index, int count);" />
      <MemberSignature Language="F#" Value="member this.RemoveRange : int * int -&gt; System.Collections.Immutable.ImmutableList&lt;'T&gt;" Usage="immutableList.RemoveRange (index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="157d4-263">開始移除的起始索引。</span><span class="sxs-lookup"><span data-stu-id="157d4-263">The starting index to begin removal.</span></span></param>
        <param name="count"><span data-ttu-id="157d4-264">要移除的項目數目。</span><span class="sxs-lookup"><span data-stu-id="157d4-264">The number of elements to remove.</span></span></param>
        <summary><span data-ttu-id="157d4-265">從不可變清單中移除某範圍的元素，從指定的索引開始，並且包含指定數目的元素。</span><span class="sxs-lookup"><span data-stu-id="157d4-265">Removes a range of elements, starting from the specified index and containing the specified number of elements, from this immutable list.</span></span></summary>
        <returns><span data-ttu-id="157d4-266">已移除項目的新清單。</span><span class="sxs-lookup"><span data-stu-id="157d4-266">A new list with the elements removed.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableList&lt;T&gt; Replace (T oldValue, T newValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableList`1&lt;!T&gt; Replace(!T oldValue, !T newValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.Replace(`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (oldValue As T, newValue As T) As ImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableList&lt;T&gt; ^ Replace(T oldValue, T newValue);" />
      <MemberSignature Language="F#" Value="member this.Replace : 'T * 'T -&gt; System.Collections.Immutable.ImmutableList&lt;'T&gt;" Usage="immutableList.Replace (oldValue, newValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldValue" Type="T" />
        <Parameter Name="newValue" Type="T" />
      </Parameters>
      <Docs>
        <param name="oldValue"><span data-ttu-id="157d4-267">要取代的項目。</span><span class="sxs-lookup"><span data-stu-id="157d4-267">The element to replace.</span></span></param>
        <param name="newValue"><span data-ttu-id="157d4-268">要取代 <paramref name="oldValue" /> 的元素。</span><span class="sxs-lookup"><span data-stu-id="157d4-268">The element to replace <paramref name="oldValue" /> with.</span></span></param>
        <summary><span data-ttu-id="157d4-269">在不可變清單中以新元素取代指定元素。</span><span class="sxs-lookup"><span data-stu-id="157d4-269">Replaces the specified element in the immutable list with a new element.</span></span></summary>
        <returns><span data-ttu-id="157d4-270">含已取代之元素的新清單，即使該元素等於舊的元素。</span><span class="sxs-lookup"><span data-stu-id="157d4-270">The new list with the replaced element, even if it is equal to the old element.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="157d4-271">不可變的清單中沒有 <paramref name="oldValue" />。</span><span class="sxs-lookup"><span data-stu-id="157d4-271"><paramref name="oldValue" /> does not exist in the immutable list.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableList&lt;T&gt; Replace (T oldValue, T newValue, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableList`1&lt;!T&gt; Replace(!T oldValue, !T newValue, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (oldValue As T, newValue As T, equalityComparer As IEqualityComparer(Of T)) As ImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableList&lt;T&gt; ^ Replace(T oldValue, T newValue, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="member this.Replace : 'T * 'T * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableList&lt;'T&gt;" Usage="immutableList.Replace (oldValue, newValue, equalityComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldValue" Type="T" />
        <Parameter Name="newValue" Type="T" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="oldValue"><span data-ttu-id="157d4-272">在清單中要取代的元素。</span><span class="sxs-lookup"><span data-stu-id="157d4-272">The element to replace in the list.</span></span></param>
        <param name="newValue"><span data-ttu-id="157d4-273">要取代 <paramref name="oldValue" /> 的元素。</span><span class="sxs-lookup"><span data-stu-id="157d4-273">The element to replace <paramref name="oldValue" /> with.</span></span></param>
        <param name="equalityComparer"><span data-ttu-id="157d4-274">用來檢查相等的比較子。</span><span class="sxs-lookup"><span data-stu-id="157d4-274">The comparer to use to check for equality.</span></span></param>
        <summary><span data-ttu-id="157d4-275">在不可變清單中以新元素取代指定元素。</span><span class="sxs-lookup"><span data-stu-id="157d4-275">Replaces the specified element in the immutable list with a new element.</span></span></summary>
        <returns><span data-ttu-id="157d4-276">新的清單含有已取代的物件，或是這個清單沒有指定的物件則為此清單。</span><span class="sxs-lookup"><span data-stu-id="157d4-276">A new list with the object replaced, or this list if the specified object is not in this list.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reverse">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableList&lt;T&gt; Reverse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableList`1&lt;!T&gt; Reverse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.Reverse" />
      <MemberSignature Language="VB.NET" Value="Public Function Reverse () As ImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableList&lt;T&gt; ^ Reverse();" />
      <MemberSignature Language="F#" Value="member this.Reverse : unit -&gt; System.Collections.Immutable.ImmutableList&lt;'T&gt;" Usage="immutableList.Reverse " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="157d4-277">反轉整個不可變清單中項目的順序。</span><span class="sxs-lookup"><span data-stu-id="157d4-277">Reverses the order of the elements in the entire immutable list.</span></span></summary>
        <returns><span data-ttu-id="157d4-278">反向排列的清單。</span><span class="sxs-lookup"><span data-stu-id="157d4-278">The reversed list.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reverse">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableList&lt;T&gt; Reverse (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableList`1&lt;!T&gt; Reverse(int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.Reverse(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Reverse (index As Integer, count As Integer) As ImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableList&lt;T&gt; ^ Reverse(int index, int count);" />
      <MemberSignature Language="F#" Value="member this.Reverse : int * int -&gt; System.Collections.Immutable.ImmutableList&lt;'T&gt;" Usage="immutableList.Reverse (index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="157d4-279">要反向範圍內之以零為起始的起始索引。</span><span class="sxs-lookup"><span data-stu-id="157d4-279">The zero-based starting index of the range to reverse.</span></span></param>
        <param name="count"><span data-ttu-id="157d4-280">要反向範圍中的項目數。</span><span class="sxs-lookup"><span data-stu-id="157d4-280">The number of elements in the range to reverse.</span></span></param>
        <summary><span data-ttu-id="157d4-281">反轉不可變清單之指定範圍中項目的順序。</span><span class="sxs-lookup"><span data-stu-id="157d4-281">Reverses the order of the elements in the specified range of the immutable list.</span></span></summary>
        <returns><span data-ttu-id="157d4-282">反向排列的清單。</span><span class="sxs-lookup"><span data-stu-id="157d4-282">The reversed list.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetItem">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableList&lt;T&gt; SetItem (int index, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableList`1&lt;!T&gt; SetItem(int32 index, !T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.SetItem(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetItem (index As Integer, value As T) As ImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableList&lt;T&gt; ^ SetItem(int index, T value);" />
      <MemberSignature Language="F#" Value="member this.SetItem : int * 'T -&gt; System.Collections.Immutable.ImmutableList&lt;'T&gt;" Usage="immutableList.SetItem (index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="157d4-283">清單中要取代之元素的位置。</span><span class="sxs-lookup"><span data-stu-id="157d4-283">The position in the list of the element to replace.</span></span></param>
        <param name="value"><span data-ttu-id="157d4-284">用來取代舊項目的項目。</span><span class="sxs-lookup"><span data-stu-id="157d4-284">The element to replace the old element with.</span></span></param>
        <summary><span data-ttu-id="157d4-285">以指定元素取代不可變清單中指定位置的元素。</span><span class="sxs-lookup"><span data-stu-id="157d4-285">Replaces an element at a given position in the immutable list with the specified element.</span></span></summary>
        <returns><span data-ttu-id="157d4-286">含已取代之元素的新清單，即使該元素等於位置上舊的元素。</span><span class="sxs-lookup"><span data-stu-id="157d4-286">The new list with the replaced element, even if it is equal to the old element at that position.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableList&lt;T&gt; Sort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableList`1&lt;!T&gt; Sort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.Sort" />
      <MemberSignature Language="VB.NET" Value="Public Function Sort () As ImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableList&lt;T&gt; ^ Sort();" />
      <MemberSignature Language="F#" Value="member this.Sort : unit -&gt; System.Collections.Immutable.ImmutableList&lt;'T&gt;" Usage="immutableList.Sort " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="157d4-287">使用預設的比較子來排序整個不可變清單中的元素。</span><span class="sxs-lookup"><span data-stu-id="157d4-287">Sorts the elements in the entire immutable list using the default comparer.</span></span></summary>
        <returns><span data-ttu-id="157d4-288">已排序的清單。</span><span class="sxs-lookup"><span data-stu-id="157d4-288">The sorted list.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableList&lt;T&gt; Sort (System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableList`1&lt;!T&gt; Sort(class System.Collections.Generic.IComparer`1&lt;!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Collections.Generic.IComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Sort (comparer As IComparer(Of T)) As ImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableList&lt;T&gt; ^ Sort(System::Collections::Generic::IComparer&lt;T&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="member this.Sort : System.Collections.Generic.IComparer&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableList&lt;'T&gt;" Usage="immutableList.Sort comparer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="comparer"><span data-ttu-id="157d4-289">比較元素時要使用的實作，或 <see langword="null" /> 表示使用預設比較子 (<see cref="P:System.Collections.Generic.Comparer`1.Default" />)。</span><span class="sxs-lookup"><span data-stu-id="157d4-289">The  implementation to use when comparing elements, or <see langword="null" /> to use the default comparer (<see cref="P:System.Collections.Generic.Comparer`1.Default" />).</span></span></param>
        <summary><span data-ttu-id="157d4-290">使用指定的比較子來排序整個不可變清單中的元素。</span><span class="sxs-lookup"><span data-stu-id="157d4-290">Sorts the elements in the entire immutable list using the specified comparer.</span></span></summary>
        <returns><span data-ttu-id="157d4-291">已排序的清單。</span><span class="sxs-lookup"><span data-stu-id="157d4-291">The sorted list.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableList&lt;T&gt; Sort (Comparison&lt;T&gt; comparison);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableList`1&lt;!T&gt; Sort(class System.Comparison`1&lt;!T&gt; comparison) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Comparison{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Sort (comparison As Comparison(Of T)) As ImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableList&lt;T&gt; ^ Sort(Comparison&lt;T&gt; ^ comparison);" />
      <MemberSignature Language="F#" Value="member this.Sort : Comparison&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableList&lt;'T&gt;" Usage="immutableList.Sort comparison" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparison" Type="System.Comparison&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="comparison"><span data-ttu-id="157d4-292">比較元素時所要使用的委派。</span><span class="sxs-lookup"><span data-stu-id="157d4-292">The delegate to use when comparing elements.</span></span></param>
        <summary><span data-ttu-id="157d4-293">使用指定的比較子來排序整個不可變清單中的元素。</span><span class="sxs-lookup"><span data-stu-id="157d4-293">Sorts the elements in the entire immutable list using the specified comparer.</span></span></summary>
        <returns><span data-ttu-id="157d4-294">已排序的清單。</span><span class="sxs-lookup"><span data-stu-id="157d4-294">The sorted list.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="157d4-295"><paramref name="comparison" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="157d4-295"><paramref name="comparison" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableList&lt;T&gt; Sort (int index, int count, System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableList`1&lt;!T&gt; Sort(int32 index, int32 count, class System.Collections.Generic.IComparer`1&lt;!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Sort (index As Integer, count As Integer, comparer As IComparer(Of T)) As ImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableList&lt;T&gt; ^ Sort(int index, int count, System::Collections::Generic::IComparer&lt;T&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="member this.Sort : int * int * System.Collections.Generic.IComparer&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableList&lt;'T&gt;" Usage="immutableList.Sort (index, count, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="157d4-296">要排序範圍內之以零為起始的起始索引。</span><span class="sxs-lookup"><span data-stu-id="157d4-296">The zero-based starting index of the range to sort.</span></span></param>
        <param name="count"><span data-ttu-id="157d4-297">要排序的範圍長度。</span><span class="sxs-lookup"><span data-stu-id="157d4-297">The length of the range to sort.</span></span></param>
        <param name="comparer"><span data-ttu-id="157d4-298">比較項目時所使用的實作，或 <see langword="null" /> 表示使用預設的比較子 (<see cref="P:System.Collections.Generic.Comparer`1.Default" />)。</span><span class="sxs-lookup"><span data-stu-id="157d4-298">The implementation to use when comparing elements, or <see langword="null" /> to use the default comparer (<see cref="P:System.Collections.Generic.Comparer`1.Default" />).</span></span></param>
        <summary><span data-ttu-id="157d4-299">使用指定的比較子來排序不可變清單某範圍內的元素。</span><span class="sxs-lookup"><span data-stu-id="157d4-299">Sorts a range of elements in the immutable list using the specified comparer.</span></span></summary>
        <returns><span data-ttu-id="157d4-300">已排序的清單。</span><span class="sxs-lookup"><span data-stu-id="157d4-300">The sorted list.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;T&gt;.Add">
      <MemberSignature Language="C#" Value="void ICollection&lt;T&gt;.Add (T item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection&lt;T&gt;.Add(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection&lt;T&gt;#Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Sub Add (item As T) Implements ICollection(Of T).Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ICollection&lt;T&gt;.Add(T item) = System::Collections::Generic::ICollection&lt;T&gt;::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="157d4-301">要新增的項目。</span><span class="sxs-lookup"><span data-stu-id="157d4-301">The item to add.</span></span></param>
        <summary><span data-ttu-id="157d4-302">將指定的項目加入至不可變的清單。</span><span class="sxs-lookup"><span data-stu-id="157d4-302">Adds the specified item to the immutable list.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="157d4-303">這個成員是明確介面成員實作，</span><span class="sxs-lookup"><span data-stu-id="157d4-303">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="157d4-304">只有在 <xref:System.Collections.Immutable.ImmutableList%601> 執行個體轉換成 <xref:System.Collections.Generic.ICollection%601> 介面時，才能使用這個成員。</span><span class="sxs-lookup"><span data-stu-id="157d4-304">It can be used only when the <xref:System.Collections.Immutable.ImmutableList%601> instance is cast to an <xref:System.Collections.Generic.ICollection%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;T&gt;.Clear">
      <MemberSignature Language="C#" Value="void ICollection&lt;T&gt;.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection&lt;T&gt;.Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection&lt;T&gt;#Clear" />
      <MemberSignature Language="VB.NET" Value="Sub Clear () Implements ICollection(Of T).Clear" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ICollection&lt;T&gt;.Clear() = System::Collections::Generic::ICollection&lt;T&gt;::Clear;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="157d4-305">從不可變的清單中移除所有項目。</span><span class="sxs-lookup"><span data-stu-id="157d4-305">Removes all items from the immutable list.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="157d4-306">這個成員是明確介面成員實作，</span><span class="sxs-lookup"><span data-stu-id="157d4-306">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="157d4-307">只有在 <xref:System.Collections.Immutable.ImmutableList%601> 執行個體轉換成 <xref:System.Collections.Generic.ICollection%601> 介面時，才能使用這個成員。</span><span class="sxs-lookup"><span data-stu-id="157d4-307">It can be used only when the <xref:System.Collections.Immutable.ImmutableList%601> instance is cast to an <xref:System.Collections.Generic.ICollection%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection&lt;T&gt;#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements ICollection(Of T).IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::Generic::ICollection&lt;T&gt;::IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="157d4-308">取得值，指出 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否唯讀。</span><span class="sxs-lookup"><span data-stu-id="157d4-308">Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</span></span></summary>
        <value><span data-ttu-id="157d4-309">如果 <see langword="true" /> 是唯讀，則為 <see cref="T:System.Collections.Generic.ICollection`1" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="157d4-309"><see langword="true" /> if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;T&gt;.Remove">
      <MemberSignature Language="C#" Value="bool ICollection&lt;T&gt;.Remove (T item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.Generic.ICollection&lt;T&gt;.Remove(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection&lt;T&gt;#Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Function Remove (item As T) As Boolean Implements ICollection(Of T).Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.Generic.ICollection&lt;T&gt;.Remove(T item) = System::Collections::Generic::ICollection&lt;T&gt;::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="157d4-310">要移除的物件。</span><span class="sxs-lookup"><span data-stu-id="157d4-310">The object to remove.</span></span></param>
        <summary><span data-ttu-id="157d4-311">從不可變的清單中移除第一個出現的特定物件。</span><span class="sxs-lookup"><span data-stu-id="157d4-311">Removes the first occurrence of a specific object from the immutable list.</span></span></summary>
        <returns><span data-ttu-id="157d4-312">如果 <paramref name="item" /> 從清單中成功移除，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="157d4-312"><see langword="true" /> if <paramref name="item" /> was successfully removed from the list; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="157d4-313">若 <paramref name="item" /> 沒有在原本的清單中找到，則這個方法也會回傳 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="157d4-313">This method also returns <see langword="false" /> if <paramref name="item" /> is not found in the original list.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="157d4-314">這個成員是明確介面成員實作，</span><span class="sxs-lookup"><span data-stu-id="157d4-314">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="157d4-315">只有在 <xref:System.Collections.Immutable.ImmutableList%601> 執行個體轉換成 <xref:System.Collections.Generic.ICollection%601> 介面時，才能使用這個成員。</span><span class="sxs-lookup"><span data-stu-id="157d4-315">It can be used only when the <xref:System.Collections.Immutable.ImmutableList%601> instance is cast to an <xref:System.Collections.Generic.ICollection%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;T&gt; IEnumerable&lt;T&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IEnumerable&lt;T&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;T&gt; ^ System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;T&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="157d4-316">傳回可逐一查看不可變清單的列舉程式。</span><span class="sxs-lookup"><span data-stu-id="157d4-316">Returns an enumerator that iterates through the immutable list.</span></span></summary>
        <returns><span data-ttu-id="157d4-317">可用來逐一查看清單的列舉程式。</span><span class="sxs-lookup"><span data-stu-id="157d4-317">An enumerator that can be used to iterate through the list.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="157d4-318">這個成員是明確介面成員實作，</span><span class="sxs-lookup"><span data-stu-id="157d4-318">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="157d4-319">只有在 <xref:System.Collections.Immutable.ImmutableList%601> 執行個體轉換成 <xref:System.Collections.Generic.IEnumerable%601> 介面時，才能使用這個成員。</span><span class="sxs-lookup"><span data-stu-id="157d4-319">It can be used only when the <xref:System.Collections.Immutable.ImmutableList%601> instance is cast to an <xref:System.Collections.Generic.IEnumerable%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;T&gt;.Insert">
      <MemberSignature Language="C#" Value="void IList&lt;T&gt;.Insert (int index, T item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.IList&lt;T&gt;.Insert(int32 index, !T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList&lt;T&gt;#Insert(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, item As T) Implements IList(Of T).Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.IList&lt;T&gt;.Insert(int index, T item) = System::Collections::Generic::IList&lt;T&gt;::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="157d4-320">應在 <paramref name="item" /> 插入以零為起始的索引。</span><span class="sxs-lookup"><span data-stu-id="157d4-320">The zero-based index at which <paramref name="item" /> should be inserted.</span></span></param>
        <param name="item"><span data-ttu-id="157d4-321">要插入的物件。</span><span class="sxs-lookup"><span data-stu-id="157d4-321">The object to insert.</span></span></param>
        <summary><span data-ttu-id="157d4-322">將物件插入至不可變清單的指定索引處。</span><span class="sxs-lookup"><span data-stu-id="157d4-322">Inserts an object in the immutable list at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="157d4-323">這個成員是明確介面成員實作，</span><span class="sxs-lookup"><span data-stu-id="157d4-323">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="157d4-324">只有在 <xref:System.Collections.Immutable.ImmutableList%601> 執行個體轉換成 <xref:System.Collections.Generic.IList%601> 介面時，才能使用這個成員。</span><span class="sxs-lookup"><span data-stu-id="157d4-324">It can be used only when the <xref:System.Collections.Immutable.ImmutableList%601> instance is cast to an <xref:System.Collections.Generic.IList%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;T&gt;.Item">
      <MemberSignature Language="C#" Value="T System.Collections.Generic.IList&lt;T&gt;.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T System.Collections.Generic.IList&lt;T&gt;.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList&lt;T&gt;#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As T Implements IList(Of T).Item" />
      <MemberSignature Language="C++ CLI" Value="property T System::Collections::Generic::IList&lt;T&gt;::Item[int] { T get(int index); void set(int index, T value); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Generic.IList&lt;T&gt;.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IList`1.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary><span data-ttu-id="157d4-325">取得或設定指定之索引處的值。</span><span class="sxs-lookup"><span data-stu-id="157d4-325">Gets or sets the value at the specified index.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IndexOutOfRangeException"><span data-ttu-id="157d4-326">當 <paramref name="index" /> 是負數或不小於 <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" /> 時，從 getter 擲回。</span><span class="sxs-lookup"><span data-stu-id="157d4-326">Thrown from getter when <paramref name="index" /> is negative or not less than <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="157d4-327">一律從 setter 擲回。</span><span class="sxs-lookup"><span data-stu-id="157d4-327">Always thrown from the setter.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;T&gt;.RemoveAt">
      <MemberSignature Language="C#" Value="void IList&lt;T&gt;.RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.IList&lt;T&gt;.RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList&lt;T&gt;#RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub RemoveAt (index As Integer) Implements IList(Of T).RemoveAt" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.IList&lt;T&gt;.RemoveAt(int index) = System::Collections::Generic::IList&lt;T&gt;::RemoveAt;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="157d4-328">要移除之項目的以零為起始的索引。</span><span class="sxs-lookup"><span data-stu-id="157d4-328">The zero-based index of the item to remove.</span></span></param>
        <summary><span data-ttu-id="157d4-329">移除在指定索引處的值。</span><span class="sxs-lookup"><span data-stu-id="157d4-329">Removes the value at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="157d4-330">這個成員是明確介面成員實作，</span><span class="sxs-lookup"><span data-stu-id="157d4-330">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="157d4-331">只有在 <xref:System.Collections.Immutable.ImmutableList%601> 執行個體轉換成 <xref:System.Collections.Generic.IList%601> 介面時，才能使用這個成員。</span><span class="sxs-lookup"><span data-stu-id="157d4-331">It can be used only when the <xref:System.Collections.Immutable.ImmutableList%601> instance is cast to an <xref:System.Collections.Generic.IList%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int arrayIndex) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="157d4-332">從不可變清單複製元素的目的地一維陣列。</span><span class="sxs-lookup"><span data-stu-id="157d4-332">The one-dimensional array that is the destination of the elements copied from immutable list.</span></span></param>
        <param name="arrayIndex"><span data-ttu-id="157d4-333"><paramref name="array" /> 中以零起始的索引，即開始複製的位置。</span><span class="sxs-lookup"><span data-stu-id="157d4-333">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="157d4-334">從指定的陣列索引處開始，將整個不可變的清單複製到相容的一維陣列。</span><span class="sxs-lookup"><span data-stu-id="157d4-334">Copies the entire immutable list to a compatible one-dimensional array, starting at the specified array index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="157d4-335">這個成員是明確介面成員實作，</span><span class="sxs-lookup"><span data-stu-id="157d4-335">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="157d4-336">只有在 <xref:System.Collections.Immutable.ImmutableList%601> 執行個體轉換成 <xref:System.Collections.ICollection> 介面時，才能使用這個成員。</span><span class="sxs-lookup"><span data-stu-id="157d4-336">It can be used only when the <xref:System.Collections.Immutable.ImmutableList%601> instance is cast to an <xref:System.Collections.ICollection> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;dotnet-uwp-10.0">
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="157d4-337">請參閱 <see cref="T:System.Collections.ICollection" /> 介面。</span><span class="sxs-lookup"><span data-stu-id="157d4-337">See the <see cref="T:System.Collections.ICollection" /> interface.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;dotnet-uwp-10.0">
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="157d4-338">請參閱 <see cref="T:System.Collections.ICollection" />。</span><span class="sxs-lookup"><span data-stu-id="157d4-338">See <see cref="T:System.Collections.ICollection" />.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="157d4-339">傳回可逐一查看不可變清單的列舉程式。</span><span class="sxs-lookup"><span data-stu-id="157d4-339">Returns an enumerator that iterates through the immutable list.</span></span></summary>
        <returns><span data-ttu-id="157d4-340">可用來逐一查看清單的列舉程式。</span><span class="sxs-lookup"><span data-stu-id="157d4-340">An enumerator that can be used to iterate through the list.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="157d4-341">這個成員是明確介面成員實作，</span><span class="sxs-lookup"><span data-stu-id="157d4-341">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="157d4-342">只有在 <xref:System.Collections.Immutable.ImmutableList%601> 執行個體轉換成 <xref:System.Collections.IEnumerable> 介面時，才能使用這個成員。</span><span class="sxs-lookup"><span data-stu-id="157d4-342">It can be used only when the <xref:System.Collections.Immutable.ImmutableList%601> instance is cast to an <xref:System.Collections.IEnumerable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Add (value As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.Add(System::Object ^ value) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="157d4-343">要加入至清單的物件。</span><span class="sxs-lookup"><span data-stu-id="157d4-343">The object to add to the list.</span></span></param>
        <summary><span data-ttu-id="157d4-344">將項目加入不可變的清單中。</span><span class="sxs-lookup"><span data-stu-id="157d4-344">Adds an item to the immutable list.</span></span></summary>
        <returns><span data-ttu-id="157d4-345">新元素的插入的位置，或是 -1 表示此元素沒有插入清單中。</span><span class="sxs-lookup"><span data-stu-id="157d4-345">The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the list.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="157d4-346">這個成員是明確介面成員實作，</span><span class="sxs-lookup"><span data-stu-id="157d4-346">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="157d4-347">只有在 <xref:System.Collections.Immutable.ImmutableList%601> 執行個體轉換成 <xref:System.Collections.IList> 介面時，才能使用這個成員。</span><span class="sxs-lookup"><span data-stu-id="157d4-347">It can be used only when the <xref:System.Collections.Immutable.ImmutableList%601> instance is cast to an <xref:System.Collections.IList> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="157d4-348">一律擲回。</span><span class="sxs-lookup"><span data-stu-id="157d4-348">Always thrown.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Clear">
      <MemberSignature Language="C#" Value="void IList.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Clear" />
      <MemberSignature Language="VB.NET" Value="Sub Clear () Implements IList.Clear" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Clear() = System::Collections::IList::Clear;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="157d4-349">從不可變的清單中移除所有項目。</span><span class="sxs-lookup"><span data-stu-id="157d4-349">Removes all items from the immutable list.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="157d4-350">這個成員是明確介面成員實作，</span><span class="sxs-lookup"><span data-stu-id="157d4-350">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="157d4-351">只有在 <xref:System.Collections.Immutable.ImmutableList%601> 執行個體轉換成 <xref:System.Collections.IList> 介面時，才能使用這個成員。</span><span class="sxs-lookup"><span data-stu-id="157d4-351">It can be used only when the <xref:System.Collections.Immutable.ImmutableList%601> instance is cast to an <xref:System.Collections.IList> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="157d4-352">一律擲回。</span><span class="sxs-lookup"><span data-stu-id="157d4-352">Always thrown.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (value As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IList.Contains(System::Object ^ value) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="157d4-353">要在清單中尋找的物件</span><span class="sxs-lookup"><span data-stu-id="157d4-353">The object to locate in the list.</span></span></param>
        <summary><span data-ttu-id="157d4-354">判斷不可變的清單是否包含特定值。</span><span class="sxs-lookup"><span data-stu-id="157d4-354">Determines whether the immutable list contains a specific value.</span></span></summary>
        <returns><span data-ttu-id="157d4-355">如果在清單中找到此物件則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="157d4-355"><see langword="true" /> if the object is found in the list; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="157d4-356">這個成員是明確介面成員實作，</span><span class="sxs-lookup"><span data-stu-id="157d4-356">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="157d4-357">只有在 <xref:System.Collections.Immutable.ImmutableList%601> 執行個體轉換成 <xref:System.Collections.IList> 介面時，才能使用這個成員。</span><span class="sxs-lookup"><span data-stu-id="157d4-357">It can be used only when the <xref:System.Collections.Immutable.ImmutableList%601> instance is cast to an <xref:System.Collections.IList> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (value As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.IndexOf(System::Object ^ value) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.IndexOf(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="157d4-358">要在清單中尋找的物件</span><span class="sxs-lookup"><span data-stu-id="157d4-358">The object to locate in the list.</span></span></param>
        <summary><span data-ttu-id="157d4-359">判斷不可變清單中特定項目的索引。</span><span class="sxs-lookup"><span data-stu-id="157d4-359">Determines the index of a specific item in the immutable list.</span></span></summary>
        <returns><span data-ttu-id="157d4-360">如果可在清單中找到則為 <paramref name="value" /> 的索引，否則為 -1。</span><span class="sxs-lookup"><span data-stu-id="157d4-360">The index of <paramref name="value" /> if found in the list; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="157d4-361">這個成員是明確介面成員實作，</span><span class="sxs-lookup"><span data-stu-id="157d4-361">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="157d4-362">只有在 <xref:System.Collections.Immutable.ImmutableList%601> 執行個體轉換成 <xref:System.Collections.IList> 介面時，才能使用這個成員。</span><span class="sxs-lookup"><span data-stu-id="157d4-362">It can be used only when the <xref:System.Collections.Immutable.ImmutableList%601> instance is cast to an <xref:System.Collections.IList> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Insert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, value As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Insert(int index, System::Object ^ value) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Insert(System.Int32,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="157d4-363">應在 <paramref name="value" /> 插入以零為起始的索引。</span><span class="sxs-lookup"><span data-stu-id="157d4-363">The zero-based index at which <paramref name="value" /> should be inserted.</span></span></param>
        <param name="value"><span data-ttu-id="157d4-364">要插入清單的物件。</span><span class="sxs-lookup"><span data-stu-id="157d4-364">The object to insert into the list.</span></span></param>
        <summary><span data-ttu-id="157d4-365">將項目插入至不可變清單的指定索引處。</span><span class="sxs-lookup"><span data-stu-id="157d4-365">Inserts an item into the immutable list at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="157d4-366">這個成員是明確介面成員實作，</span><span class="sxs-lookup"><span data-stu-id="157d4-366">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="157d4-367">只有在 <xref:System.Collections.Immutable.ImmutableList%601> 執行個體轉換成 <xref:System.Collections.IList> 介面時，才能使用這個成員。</span><span class="sxs-lookup"><span data-stu-id="157d4-367">It can be used only when the <xref:System.Collections.Immutable.ImmutableList%601> instance is cast to an <xref:System.Collections.IList> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="157d4-368">一律擲回。</span><span class="sxs-lookup"><span data-stu-id="157d4-368">Always thrown.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.IsFixedSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="157d4-369">取得值，指出 <see cref="T:System.Collections.IList" /> 是否有固定的大小。</span><span class="sxs-lookup"><span data-stu-id="157d4-369">Gets a value indicating whether the <see cref="T:System.Collections.IList" /> has a fixed size.</span></span></summary>
        <value><span data-ttu-id="157d4-370">如果 <see langword="true" /> 有固定大小，則為 <see cref="T:System.Collections.IList" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="157d4-370"><see langword="true" /> if the <see cref="T:System.Collections.IList" /> has a fixed size; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements IList.IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="157d4-371">取得值，指出 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否唯讀。</span><span class="sxs-lookup"><span data-stu-id="157d4-371">Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</span></span></summary>
        <value><span data-ttu-id="157d4-372">如果 <see langword="true" /> 是唯讀，則為 <see cref="T:System.Collections.Generic.ICollection`1" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="157d4-372"><see langword="true" /> if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Object Implements IList.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IList::Item[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="157d4-373">索引。</span><span class="sxs-lookup"><span data-stu-id="157d4-373">The index.</span></span></param>
        <summary><span data-ttu-id="157d4-374">取得或設定在指定索引處的 <see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="157d4-374">Gets or sets the <see cref="T:System.Object" /> at the specified index.</span></span></summary>
        <value><span data-ttu-id="157d4-375">位於指定索引處的值。</span><span class="sxs-lookup"><span data-stu-id="157d4-375">The value at the specified index.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IndexOutOfRangeException"><span data-ttu-id="157d4-376">當 <paramref name="index" /> 是負數或不小於 <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" /> 時，從 getter 擲回。</span><span class="sxs-lookup"><span data-stu-id="157d4-376">Thrown from getter when <paramref name="index" /> is negative or not less than <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="157d4-377">一律從 setter 擲回。</span><span class="sxs-lookup"><span data-stu-id="157d4-377">Always thrown from the setter.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (value As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Remove(System::Object ^ value) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="157d4-378">要從清單中移除的物件。</span><span class="sxs-lookup"><span data-stu-id="157d4-378">The object to remove from the list.</span></span></param>
        <summary><span data-ttu-id="157d4-379">從不可變的清單中移除第一個出現的特定物件。</span><span class="sxs-lookup"><span data-stu-id="157d4-379">Removes the first occurrence of a specific object from the immutable list.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="157d4-380">這個成員是明確介面成員實作，</span><span class="sxs-lookup"><span data-stu-id="157d4-380">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="157d4-381">只有在 <xref:System.Collections.Immutable.ImmutableList%601> 執行個體轉換成 <xref:System.Collections.IList> 介面時，才能使用這個成員。</span><span class="sxs-lookup"><span data-stu-id="157d4-381">It can be used only when the <xref:System.Collections.Immutable.ImmutableList%601> instance is cast to an <xref:System.Collections.IList> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="157d4-382">一律擲回。</span><span class="sxs-lookup"><span data-stu-id="157d4-382">Always thrown.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.RemoveAt">
      <MemberSignature Language="C#" Value="void IList.RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub RemoveAt (index As Integer) Implements IList.RemoveAt" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.RemoveAt(int index) = System::Collections::IList::RemoveAt;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="157d4-383">要移除之項目的以零為起始的索引。</span><span class="sxs-lookup"><span data-stu-id="157d4-383">The zero-based index of the item to remove.</span></span></param>
        <summary><span data-ttu-id="157d4-384">移除位於不可變清單之指定索引處的項目。</span><span class="sxs-lookup"><span data-stu-id="157d4-384">Removes the item at the specified index of the immutable list.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="157d4-385">這個成員是明確介面成員實作，</span><span class="sxs-lookup"><span data-stu-id="157d4-385">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="157d4-386">只有在 <xref:System.Collections.Immutable.ImmutableList%601> 執行個體轉換成 <xref:System.Collections.IList> 介面時，才能使用這個成員。</span><span class="sxs-lookup"><span data-stu-id="157d4-386">It can be used only when the <xref:System.Collections.Immutable.ImmutableList%601> instance is cast to an <xref:System.Collections.IList> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="157d4-387">一律擲回。</span><span class="sxs-lookup"><span data-stu-id="157d4-387">Always thrown.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableList&lt;T&gt;.Add">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableList&lt;T&gt; IImmutableList&lt;T&gt;.Add (T value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; System.Collections.Immutable.IImmutableList&lt;T&gt;.Add(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList&lt;T&gt;#Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Function Add (value As T) As IImmutableList(Of T) Implements IImmutableList(Of T).Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableList&lt;T&gt; ^ System.Collections.Immutable.IImmutableList&lt;T&gt;.Add(T value) = System::Collections::Immutable::IImmutableList&lt;T&gt;::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="157d4-388">要加入的值。</span><span class="sxs-lookup"><span data-stu-id="157d4-388">The value to add.</span></span></param>
        <summary><span data-ttu-id="157d4-389">將指定的值加入至這個不可變清單。</span><span class="sxs-lookup"><span data-stu-id="157d4-389">Adds the specified value to this immutable list.</span></span></summary>
        <returns><span data-ttu-id="157d4-390">已新增項目的新清單。</span><span class="sxs-lookup"><span data-stu-id="157d4-390">A new list with the element added.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="157d4-391">這個成員是明確介面成員實作，</span><span class="sxs-lookup"><span data-stu-id="157d4-391">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="157d4-392">只有在 <xref:System.Collections.Immutable.ImmutableList%601> 執行個體轉換成 <xref:System.Collections.Immutable.IImmutableList%601> 介面時，才能使用這個成員。</span><span class="sxs-lookup"><span data-stu-id="157d4-392">It can be used only when the <xref:System.Collections.Immutable.ImmutableList%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableList%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableList&lt;T&gt;.AddRange">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableList&lt;T&gt; IImmutableList&lt;T&gt;.AddRange (System.Collections.Generic.IEnumerable&lt;T&gt; items);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; System.Collections.Immutable.IImmutableList&lt;T&gt;.AddRange(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList&lt;T&gt;#AddRange(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Function AddRange (items As IEnumerable(Of T)) As IImmutableList(Of T) Implements IImmutableList(Of T).AddRange" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableList&lt;T&gt; ^ System.Collections.Immutable.IImmutableList&lt;T&gt;.AddRange(System::Collections::Generic::IEnumerable&lt;T&gt; ^ items) = System::Collections::Immutable::IImmutableList&lt;T&gt;::AddRange;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="items"><span data-ttu-id="157d4-393">要加入的值。</span><span class="sxs-lookup"><span data-stu-id="157d4-393">The values to add.</span></span></param>
        <summary><span data-ttu-id="157d4-394">將指定的值加入至這個不可變清單。</span><span class="sxs-lookup"><span data-stu-id="157d4-394">Adds the specified values to this immutable list.</span></span></summary>
        <returns><span data-ttu-id="157d4-395">新增項目的新清單。</span><span class="sxs-lookup"><span data-stu-id="157d4-395">A new list with the elements added.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="157d4-396">這個成員是明確介面成員實作，</span><span class="sxs-lookup"><span data-stu-id="157d4-396">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="157d4-397">只有在 <xref:System.Collections.Immutable.ImmutableList%601> 執行個體轉換成 <xref:System.Collections.Immutable.IImmutableList%601> 介面時，才能使用這個成員。</span><span class="sxs-lookup"><span data-stu-id="157d4-397">It can be used only when the <xref:System.Collections.Immutable.ImmutableList%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableList%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableList&lt;T&gt;.Clear">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableList&lt;T&gt; IImmutableList&lt;T&gt;.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; System.Collections.Immutable.IImmutableList&lt;T&gt;.Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList&lt;T&gt;#Clear" />
      <MemberSignature Language="VB.NET" Value="Function Clear () As IImmutableList(Of T) Implements IImmutableList(Of T).Clear" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableList&lt;T&gt; ^ System.Collections.Immutable.IImmutableList&lt;T&gt;.Clear() = System::Collections::Immutable::IImmutableList&lt;T&gt;::Clear;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="157d4-398">擷取空的清單，這個清單的排序及順序語意與這個執行個體相同。</span><span class="sxs-lookup"><span data-stu-id="157d4-398">Retrieves an empty list that has the same sorting and ordering semantics as this instance.</span></span></summary>
        <returns><span data-ttu-id="157d4-399">空的清單，這個清單的排序及順序語意與這個執行個體相同。</span><span class="sxs-lookup"><span data-stu-id="157d4-399">An empty list that has the same sorting and ordering semantics as this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="157d4-400">這個成員是明確介面成員實作，</span><span class="sxs-lookup"><span data-stu-id="157d4-400">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="157d4-401">只有在 <xref:System.Collections.Immutable.ImmutableList%601> 執行個體轉換成 <xref:System.Collections.Immutable.IImmutableList%601> 介面時，才能使用這個成員。</span><span class="sxs-lookup"><span data-stu-id="157d4-401">It can be used only when the <xref:System.Collections.Immutable.ImmutableList%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableList%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableList&lt;T&gt;.Insert">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableList&lt;T&gt; IImmutableList&lt;T&gt;.Insert (int index, T item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; System.Collections.Immutable.IImmutableList&lt;T&gt;.Insert(int32 index, !T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList&lt;T&gt;#Insert(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Function Insert (index As Integer, item As T) As IImmutableList(Of T) Implements IImmutableList(Of T).Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableList&lt;T&gt; ^ System.Collections.Immutable.IImmutableList&lt;T&gt;.Insert(int index, T item) = System::Collections::Immutable::IImmutableList&lt;T&gt;::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.Insert(System.Int32,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="157d4-402">要插入值的索引。</span><span class="sxs-lookup"><span data-stu-id="157d4-402">The index at which to insert the value.</span></span></param>
        <param name="item"><span data-ttu-id="157d4-403">要插入的元素。</span><span class="sxs-lookup"><span data-stu-id="157d4-403">The element to insert.</span></span></param>
        <summary><span data-ttu-id="157d4-404">將指定的項目插入至不可變清單中的指定索引處。</span><span class="sxs-lookup"><span data-stu-id="157d4-404">Inserts the specified element at the specified index in the immutable list.</span></span></summary>
        <returns><span data-ttu-id="157d4-405">新的不可變清單，其中包含指定的項目。</span><span class="sxs-lookup"><span data-stu-id="157d4-405">A new immutable list that includes the specified element.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="157d4-406">這個成員是明確介面成員實作，</span><span class="sxs-lookup"><span data-stu-id="157d4-406">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="157d4-407">只有在 <xref:System.Collections.Immutable.ImmutableList%601> 執行個體轉換成 <xref:System.Collections.Immutable.IImmutableList%601> 介面時，才能使用這個成員。</span><span class="sxs-lookup"><span data-stu-id="157d4-407">It can be used only when the <xref:System.Collections.Immutable.ImmutableList%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableList%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableList&lt;T&gt;.InsertRange">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableList&lt;T&gt; IImmutableList&lt;T&gt;.InsertRange (int index, System.Collections.Generic.IEnumerable&lt;T&gt; items);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; System.Collections.Immutable.IImmutableList&lt;T&gt;.InsertRange(int32 index, class System.Collections.Generic.IEnumerable`1&lt;!T&gt; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList&lt;T&gt;#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Function InsertRange (index As Integer, items As IEnumerable(Of T)) As IImmutableList(Of T) Implements IImmutableList(Of T).InsertRange" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableList&lt;T&gt; ^ System.Collections.Immutable.IImmutableList&lt;T&gt;.InsertRange(int index, System::Collections::Generic::IEnumerable&lt;T&gt; ^ items) = System::Collections::Immutable::IImmutableList&lt;T&gt;::InsertRange;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="157d4-408">要插入元素的索引處。</span><span class="sxs-lookup"><span data-stu-id="157d4-408">The index at which to insert the elements.</span></span></param>
        <param name="items"><span data-ttu-id="157d4-409">要插入的項目。</span><span class="sxs-lookup"><span data-stu-id="157d4-409">The elements to insert.</span></span></param>
        <summary><span data-ttu-id="157d4-410">將指定的項目插入至不可變清單中的指定索引處。</span><span class="sxs-lookup"><span data-stu-id="157d4-410">Inserts the specified elements at the specified index in the immutable list.</span></span></summary>
        <returns><span data-ttu-id="157d4-411">新的不可變清單，其中包含指定的項目。</span><span class="sxs-lookup"><span data-stu-id="157d4-411">A new immutable list that includes the specified elements.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="157d4-412">這個成員是明確介面成員實作，</span><span class="sxs-lookup"><span data-stu-id="157d4-412">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="157d4-413">只有在 <xref:System.Collections.Immutable.ImmutableList%601> 執行個體轉換成 <xref:System.Collections.Immutable.IImmutableList%601> 介面時，才能使用這個成員。</span><span class="sxs-lookup"><span data-stu-id="157d4-413">It can be used only when the <xref:System.Collections.Immutable.ImmutableList%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableList%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableList&lt;T&gt;.Remove">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableList&lt;T&gt; IImmutableList&lt;T&gt;.Remove (T value, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; System.Collections.Immutable.IImmutableList&lt;T&gt;.Remove(!T value, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList&lt;T&gt;#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Function Remove (value As T, equalityComparer As IEqualityComparer(Of T)) As IImmutableList(Of T) Implements IImmutableList(Of T).Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableList&lt;T&gt; ^ System.Collections.Immutable.IImmutableList&lt;T&gt;.Remove(T value, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer) = System::Collections::Immutable::IImmutableList&lt;T&gt;::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="157d4-414">從清單移除之元素的值。</span><span class="sxs-lookup"><span data-stu-id="157d4-414">The value of the element to remove from the list.</span></span></param>
        <param name="equalityComparer"><span data-ttu-id="157d4-415">用來比較元素相等的比較子。</span><span class="sxs-lookup"><span data-stu-id="157d4-415">The comparer to use to compare elements for equality.</span></span></param>
        <summary><span data-ttu-id="157d4-416">從清單中移除具有特定值的元素。</span><span class="sxs-lookup"><span data-stu-id="157d4-416">Removes the element with the specified value from the list.</span></span></summary>
        <returns><span data-ttu-id="157d4-417">已移除指定項目的新 <see cref="T:System.Collections.Immutable.ImmutableList`1" />。</span><span class="sxs-lookup"><span data-stu-id="157d4-417">A new <see cref="T:System.Collections.Immutable.ImmutableList`1" /> with the specified element removed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="157d4-418">這個成員是明確介面成員實作，</span><span class="sxs-lookup"><span data-stu-id="157d4-418">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="157d4-419">只有在 <xref:System.Collections.Immutable.ImmutableList%601> 執行個體轉換成 <xref:System.Collections.Immutable.IImmutableList%601> 介面時，才能使用這個成員。</span><span class="sxs-lookup"><span data-stu-id="157d4-419">It can be used only when the <xref:System.Collections.Immutable.ImmutableList%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableList%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableList&lt;T&gt;.RemoveAll">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableList&lt;T&gt; IImmutableList&lt;T&gt;.RemoveAll (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; System.Collections.Immutable.IImmutableList&lt;T&gt;.RemoveAll(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList&lt;T&gt;#RemoveAll(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Function RemoveAll (match As Predicate(Of T)) As IImmutableList(Of T) Implements IImmutableList(Of T).RemoveAll" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableList&lt;T&gt; ^ System.Collections.Immutable.IImmutableList&lt;T&gt;.RemoveAll(Predicate&lt;T&gt; ^ match) = System::Collections::Immutable::IImmutableList&lt;T&gt;::RemoveAll;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.RemoveAll(System.Predicate{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match"><span data-ttu-id="157d4-420">定義要移除項目之條件的委派。</span><span class="sxs-lookup"><span data-stu-id="157d4-420">The delegate that defines the conditions of the elements to remove.</span></span></param>
        <summary><span data-ttu-id="157d4-421">移除符合指定的述詞所定義之條件的所有項目。</span><span class="sxs-lookup"><span data-stu-id="157d4-421">Removes all the elements that match the conditions defined by the specified predicate.</span></span></summary>
        <returns><span data-ttu-id="157d4-422">已移除項目的新不可變清單。</span><span class="sxs-lookup"><span data-stu-id="157d4-422">A new immutable list with the elements removed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="157d4-423">這個成員是明確介面成員實作，</span><span class="sxs-lookup"><span data-stu-id="157d4-423">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="157d4-424">只有在 <xref:System.Collections.Immutable.ImmutableList%601> 執行個體轉換成 <xref:System.Collections.Immutable.IImmutableList%601> 介面時，才能使用這個成員。</span><span class="sxs-lookup"><span data-stu-id="157d4-424">It can be used only when the <xref:System.Collections.Immutable.ImmutableList%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableList%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableList&lt;T&gt;.RemoveAt">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableList&lt;T&gt; IImmutableList&lt;T&gt;.RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; System.Collections.Immutable.IImmutableList&lt;T&gt;.RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList&lt;T&gt;#RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Function RemoveAt (index As Integer) As IImmutableList(Of T) Implements IImmutableList(Of T).RemoveAt" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableList&lt;T&gt; ^ System.Collections.Immutable.IImmutableList&lt;T&gt;.RemoveAt(int index) = System::Collections::Immutable::IImmutableList&lt;T&gt;::RemoveAt;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="157d4-425">要移除的項目索引。</span><span class="sxs-lookup"><span data-stu-id="157d4-425">The index of the element to remove.</span></span></param>
        <summary><span data-ttu-id="157d4-426">移除不可變清單之指定索引處的項目。</span><span class="sxs-lookup"><span data-stu-id="157d4-426">Removes the element at the specified index of the immutable list.</span></span></summary>
        <returns><span data-ttu-id="157d4-427">已移除項目的新清單。</span><span class="sxs-lookup"><span data-stu-id="157d4-427">A new list with the element removed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="157d4-428">這個成員是明確介面成員實作，</span><span class="sxs-lookup"><span data-stu-id="157d4-428">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="157d4-429">只有在 <xref:System.Collections.Immutable.ImmutableList%601> 執行個體轉換成 <xref:System.Collections.Immutable.IImmutableList%601> 介面時，才能使用這個成員。</span><span class="sxs-lookup"><span data-stu-id="157d4-429">It can be used only when the <xref:System.Collections.Immutable.ImmutableList%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableList%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="System.Collections.Immutable.IImmutableList&lt;T&gt;.RemoveRange">
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="157d4-430">從這個不可變清單移除一個範圍的元素。</span><span class="sxs-lookup"><span data-stu-id="157d4-430">Removes a range of elements from this immutable list.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="157d4-431">這個成員是明確介面成員實作，</span><span class="sxs-lookup"><span data-stu-id="157d4-431">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="157d4-432">只有在 <xref:System.Collections.Immutable.ImmutableList%601> 執行個體轉換成 <xref:System.Collections.Immutable.IImmutableList%601> 介面時，才能使用這個成員。</span><span class="sxs-lookup"><span data-stu-id="157d4-432">It can be used only when the <xref:System.Collections.Immutable.ImmutableList%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableList%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="System.Collections.Immutable.IImmutableList&lt;T&gt;.RemoveRange">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableList&lt;T&gt; IImmutableList&lt;T&gt;.RemoveRange (System.Collections.Generic.IEnumerable&lt;T&gt; items, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; System.Collections.Immutable.IImmutableList&lt;T&gt;.RemoveRange(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; items, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList&lt;T&gt;#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Function RemoveRange (items As IEnumerable(Of T), equalityComparer As IEqualityComparer(Of T)) As IImmutableList(Of T) Implements IImmutableList(Of T).RemoveRange" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableList&lt;T&gt; ^ System.Collections.Immutable.IImmutableList&lt;T&gt;.RemoveRange(System::Collections::Generic::IEnumerable&lt;T&gt; ^ items, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer) = System::Collections::Immutable::IImmutableList&lt;T&gt;::RemoveRange;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="items"><span data-ttu-id="157d4-433">從清單中要移除項目的範圍 (如有找到)。</span><span class="sxs-lookup"><span data-stu-id="157d4-433">The range of items to remove from the list, if found.</span></span></param>
        <param name="equalityComparer"><span data-ttu-id="157d4-434">用來比較元素的相等比較子。</span><span class="sxs-lookup"><span data-stu-id="157d4-434">The equality comparer to use to compare elements.</span></span></param>
        <summary><span data-ttu-id="157d4-435">從這個符合項目指定的不可變清單移除一個範圍的元素。</span><span class="sxs-lookup"><span data-stu-id="157d4-435">Removes a range of elements from this immutable list that match the items specified.</span></span></summary>
        <returns><span data-ttu-id="157d4-436">已移除項目的不可變清單。</span><span class="sxs-lookup"><span data-stu-id="157d4-436">An immutable list with the items removed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="157d4-437">這個成員是明確介面成員實作，</span><span class="sxs-lookup"><span data-stu-id="157d4-437">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="157d4-438">只有在 <xref:System.Collections.Immutable.ImmutableList%601> 執行個體轉換成 <xref:System.Collections.Immutable.IImmutableList%601> 介面時，才能使用這個成員。</span><span class="sxs-lookup"><span data-stu-id="157d4-438">It can be used only when the <xref:System.Collections.Immutable.ImmutableList%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableList%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="157d4-439"><paramref name="items" /> 或 <paramref name="equalityComparer" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="157d4-439"><paramref name="items" /> or <paramref name="equalityComparer" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableList&lt;T&gt;.RemoveRange">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableList&lt;T&gt; IImmutableList&lt;T&gt;.RemoveRange (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; System.Collections.Immutable.IImmutableList&lt;T&gt;.RemoveRange(int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList&lt;T&gt;#RemoveRange(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Function RemoveRange (index As Integer, count As Integer) As IImmutableList(Of T) Implements IImmutableList(Of T).RemoveRange" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableList&lt;T&gt; ^ System.Collections.Immutable.IImmutableList&lt;T&gt;.RemoveRange(int index, int count) = System::Collections::Immutable::IImmutableList&lt;T&gt;::RemoveRange;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Int32,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="157d4-440">要移除之元素範圍的起始索引。</span><span class="sxs-lookup"><span data-stu-id="157d4-440">The starting index of the range of elements to remove.</span></span></param>
        <param name="count"><span data-ttu-id="157d4-441">要移除的項目數目。</span><span class="sxs-lookup"><span data-stu-id="157d4-441">The number of elements to remove.</span></span></param>
        <summary><span data-ttu-id="157d4-442">從這個清單中的指定位置移除指定數目的元素。</span><span class="sxs-lookup"><span data-stu-id="157d4-442">Removes the specified number of elements at the specified location from this list.</span></span></summary>
        <returns><span data-ttu-id="157d4-443">已移除項目的新清單。</span><span class="sxs-lookup"><span data-stu-id="157d4-443">A new list with the elements removed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="157d4-444">這個成員是明確介面成員實作，</span><span class="sxs-lookup"><span data-stu-id="157d4-444">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="157d4-445">只有在 <xref:System.Collections.Immutable.ImmutableList%601> 執行個體轉換成 <xref:System.Collections.Immutable.IImmutableList%601> 介面時，才能使用這個成員。</span><span class="sxs-lookup"><span data-stu-id="157d4-445">It can be used only when the <xref:System.Collections.Immutable.ImmutableList%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableList%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableList&lt;T&gt;.Replace">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableList&lt;T&gt; IImmutableList&lt;T&gt;.Replace (T oldValue, T newValue, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; System.Collections.Immutable.IImmutableList&lt;T&gt;.Replace(!T oldValue, !T newValue, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList&lt;T&gt;#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Function Replace (oldValue As T, newValue As T, equalityComparer As IEqualityComparer(Of T)) As IImmutableList(Of T) Implements IImmutableList(Of T).Replace" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableList&lt;T&gt; ^ System.Collections.Immutable.IImmutableList&lt;T&gt;.Replace(T oldValue, T newValue, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer) = System::Collections::Immutable::IImmutableList&lt;T&gt;::Replace;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldValue" Type="T" />
        <Parameter Name="newValue" Type="T" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="oldValue"><span data-ttu-id="157d4-446">要取代的項目。</span><span class="sxs-lookup"><span data-stu-id="157d4-446">The element to replace.</span></span></param>
        <param name="newValue"><span data-ttu-id="157d4-447">用來取代舊項目的項目。</span><span class="sxs-lookup"><span data-stu-id="157d4-447">The element to replace the old element with.</span></span></param>
        <param name="equalityComparer"><span data-ttu-id="157d4-448">搜尋中所使用的相等比較子。</span><span class="sxs-lookup"><span data-stu-id="157d4-448">The equality comparer to use in the search.</span></span></param>
        <summary><span data-ttu-id="157d4-449">使用指定的元素取代清單中的元素。</span><span class="sxs-lookup"><span data-stu-id="157d4-449">Replaces an element in the list with the specified element.</span></span></summary>
        <returns><span data-ttu-id="157d4-450">新的清單。</span><span class="sxs-lookup"><span data-stu-id="157d4-450">The new list.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="157d4-451">會在清單中沒有舊值時擲回。</span><span class="sxs-lookup"><span data-stu-id="157d4-451">Thrown when the old value does not exist in the list.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableList&lt;T&gt;.SetItem">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableList&lt;T&gt; IImmutableList&lt;T&gt;.SetItem (int index, T value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; System.Collections.Immutable.IImmutableList&lt;T&gt;.SetItem(int32 index, !T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList&lt;T&gt;#SetItem(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Function SetItem (index As Integer, value As T) As IImmutableList(Of T) Implements IImmutableList(Of T).SetItem" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableList&lt;T&gt; ^ System.Collections.Immutable.IImmutableList&lt;T&gt;.SetItem(int index, T value) = System::Collections::Immutable::IImmutableList&lt;T&gt;::SetItem;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.SetItem(System.Int32,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="157d4-452">清單中要取代之元素的位置。</span><span class="sxs-lookup"><span data-stu-id="157d4-452">The position in the list of the element to replace.</span></span></param>
        <param name="value"><span data-ttu-id="157d4-453">用來取代舊項目的項目。</span><span class="sxs-lookup"><span data-stu-id="157d4-453">The element to replace the old element with.</span></span></param>
        <summary><span data-ttu-id="157d4-454">使用指定的項目取代清單中指定位置的項目。</span><span class="sxs-lookup"><span data-stu-id="157d4-454">Replaces an element in the list at a given position with the specified element.</span></span></summary>
        <returns><span data-ttu-id="157d4-455">新的清單。</span><span class="sxs-lookup"><span data-stu-id="157d4-455">The new list.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="157d4-456">這個成員是明確介面成員實作，</span><span class="sxs-lookup"><span data-stu-id="157d4-456">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="157d4-457">只有在 <xref:System.Collections.Immutable.ImmutableList%601> 執行個體轉換成 <xref:System.Collections.Immutable.IImmutableList%601> 介面時，才能使用這個成員。</span><span class="sxs-lookup"><span data-stu-id="157d4-457">It can be used only when the <xref:System.Collections.Immutable.ImmutableList%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableList%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToBuilder">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableList&lt;T&gt;.Builder ToBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableList`1/Builder&lt;!T&gt; ToBuilder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.ToBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Function ToBuilder () As ImmutableList(Of T).Builder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableList&lt;T&gt;::Builder ^ ToBuilder();" />
      <MemberSignature Language="F#" Value="member this.ToBuilder : unit -&gt; System.Collections.Immutable.ImmutableList&lt;'T&gt;.Builder" Usage="immutableList.ToBuilder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableList&lt;T&gt;+Builder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="157d4-458">建立與此清單 (能夠使用標準變動介面，有效率地跨多個作業進行變動) 內容相同之清單。</span><span class="sxs-lookup"><span data-stu-id="157d4-458">Creates a list that has the same contents as this list and can be efficiently mutated across multiple operations using standard mutable interfaces.</span></span></summary>
        <returns><span data-ttu-id="157d4-459">已建立的清單含有與此清單相同的內容。</span><span class="sxs-lookup"><span data-stu-id="157d4-459">The created list with the same contents as this list.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="157d4-460">這是 o （1） 作業，而且會導致只有單一 （小型） 的記憶體配置。</span><span class="sxs-lookup"><span data-stu-id="157d4-460">This is an O(1) operation and results in only a single (small) memory allocation.</span></span> <span data-ttu-id="157d4-461">傳回可變動清單不是安全執行緒。</span><span class="sxs-lookup"><span data-stu-id="157d4-461">The mutable list that is returned is not thread-safe.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrueForAll">
      <MemberSignature Language="C#" Value="public bool TrueForAll (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TrueForAll(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableList`1.TrueForAll(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function TrueForAll (match As Predicate(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TrueForAll(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.TrueForAll : Predicate&lt;'T&gt; -&gt; bool" Usage="immutableList.TrueForAll match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match"><span data-ttu-id="157d4-462">定義檢查項目所根據之條件的委派。</span><span class="sxs-lookup"><span data-stu-id="157d4-462">The delegate that defines the conditions to check against the elements.</span></span></param>
        <summary><span data-ttu-id="157d4-463">判斷不可變清單中的每一個項目是否符合指定述詞所定義的條件。</span><span class="sxs-lookup"><span data-stu-id="157d4-463">Determines whether every element in the immutable list matches the conditions defined by the specified predicate.</span></span></summary>
        <returns><span data-ttu-id="157d4-464">如果不可變清單中的每一個項目都符合指定述詞所定義的條件，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="157d4-464"><see langword="true" /> if every element in the immutable list matches the conditions defined by the specified predicate; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="157d4-465">如果清單中沒有元素，則傳回值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="157d4-465">If the list has no elements, the return value is <see langword="true" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>