<Type Name="XpsDocumentWriter" FullName="System.Windows.Xps.XpsDocumentWriter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="82c5bf19aca0fac5af1fd9134db0566fada7fb7b" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30670552" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XpsDocumentWriter : System.Windows.Documents.Serialization.SerializerWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XpsDocumentWriter extends System.Windows.Documents.Serialization.SerializerWriter" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Xps.XpsDocumentWriter" />
  <TypeSignature Language="VB.NET" Value="Public Class XpsDocumentWriter&#xA;Inherits SerializerWriter" />
  <TypeSignature Language="C++ CLI" Value="public ref class XpsDocumentWriter : System::Windows::Documents::Serialization::SerializerWriter" />
  <AssemblyInfo>
    <AssemblyName>System.Printing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Documents.Serialization.SerializerWriter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供寫入 XPS 文件或列印佇列的方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Xps.XpsDocumentWriter> 有沒有建構函式。 若要建立<xref:System.Windows.Xps.XpsDocumentWriter>，使用靜態<xref:System.Windows.Xps.Packaging.XpsDocument.CreateXpsDocumentWriter%2A>方法<xref:System.Windows.Xps.Packaging.XpsDocument>類別，或使用其中一個靜態<xref:System.Printing.PrintQueue.CreateXpsDocumentWriter%2A>方法<xref:System.Printing.PrintQueue>類別。 文件或建立的佇列<xref:System.Windows.Xps.XpsDocumentWriter>成為它所寫入的目標。  
  
   
  
## Examples  
 下列範例示範如何建立 <xref:System.Windows.Xps.XpsDocumentWriter> 類別的執行個體。  
  
 [!code-csharp[XpsSave#CreateXpsDocumentWriter](~/samples/snippets/csharp/VS_Snippets_Wpf/XpsSave/CSharp/XpsSaveHelper.cs#createxpsdocumentwriter)]
 [!code-vb[XpsSave#CreateXpsDocumentWriter](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XpsSave/visualbasic/xpssavehelper.vb#createxpsdocumentwriter)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CancelAsync">
      <MemberSignature Language="C#" Value="public override void CancelAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CancelAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Xps.XpsDocumentWriter.CancelAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub CancelAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void CancelAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取消目前的 <see cref="Overload:System.Windows.Xps.XpsDocumentWriter.WriteAsync" /> 作業。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Windows.Xps.XpsWriterException">目前未進行非同步寫入作業。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateVisualsCollator">
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>傳回可將 <see cref="T:System.Windows.Xps.VisualsToXpsDocument" /> 物件寫入文件或列印佇列的 <see cref="T:System.Windows.Media.Visual" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Xps.VisualsToXpsDocument>寫入相同的目標<xref:System.Windows.Xps.Packaging.XpsDocument>或<xref:System.Printing.PrintQueue>為<xref:System.Windows.Xps.XpsDocumentWriter>會建立<xref:System.Windows.Xps.VisualsToXpsDocument>。  
  
   
  
## Examples  
 下列範例會示範如何使用 <xref:System.Windows.Xps.XpsDocumentWriter.CreateVisualsCollator%2A> 方法。  
  
 [!code-csharp[XpsSave#CreateAndWriteToVisualsCollator](~/samples/snippets/csharp/VS_Snippets_Wpf/XpsSave/CSharp/XpsSaveHelper.cs#createandwritetovisualscollator)]
 [!code-vb[XpsSave#CreateAndWriteToVisualsCollator](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XpsSave/visualbasic/xpssavehelper.vb#createandwritetovisualscollator)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateVisualsCollator">
      <MemberSignature Language="C#" Value="public override System.Windows.Documents.Serialization.SerializerWriterCollator CreateVisualsCollator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Windows.Documents.Serialization.SerializerWriterCollator CreateVisualsCollator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Xps.XpsDocumentWriter.CreateVisualsCollator" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CreateVisualsCollator () As SerializerWriterCollator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Windows::Documents::Serialization::SerializerWriterCollator ^ CreateVisualsCollator();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.Serialization.SerializerWriterCollator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回可將 <see cref="T:System.Windows.Xps.VisualsToXpsDocument" /> 物件寫入文件或列印佇列的 <see cref="T:System.Windows.Media.Visual" />。</summary>
        <returns>新的 <see cref="T:System.Windows.Xps.VisualsToXpsDocument" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Xps.VisualsToXpsDocument>寫入相同的目標<xref:System.Windows.Xps.Packaging.XpsDocument>或<xref:System.Printing.PrintQueue>為<xref:System.Windows.Xps.XpsDocumentWriter>會建立<xref:System.Windows.Xps.VisualsToXpsDocument>。  
  
   
  
## Examples  
 下列範例會示範如何使用 <xref:System.Windows.Xps.XpsDocumentWriter.CreateVisualsCollator%2A> 方法。  
  
 [!code-csharp[XpsSave#CreateAndWriteToVisualsCollator](~/samples/snippets/csharp/VS_Snippets_Wpf/XpsSave/CSharp/XpsSaveHelper.cs#createandwritetovisualscollator)]
 [!code-vb[XpsSave#CreateAndWriteToVisualsCollator](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XpsSave/visualbasic/xpssavehelper.vb#createandwritetovisualscollator)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateVisualsCollator">
      <MemberSignature Language="C#" Value="public override System.Windows.Documents.Serialization.SerializerWriterCollator CreateVisualsCollator (System.Printing.PrintTicket documentSequencePrintTicket, System.Printing.PrintTicket documentPrintTicket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Windows.Documents.Serialization.SerializerWriterCollator CreateVisualsCollator(class System.Printing.PrintTicket documentSequencePrintTicket, class System.Printing.PrintTicket documentPrintTicket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Xps.XpsDocumentWriter.CreateVisualsCollator(System.Printing.PrintTicket,System.Printing.PrintTicket)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CreateVisualsCollator (documentSequencePrintTicket As PrintTicket, documentPrintTicket As PrintTicket) As SerializerWriterCollator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Windows::Documents::Serialization::SerializerWriterCollator ^ CreateVisualsCollator(System::Printing::PrintTicket ^ documentSequencePrintTicket, System::Printing::PrintTicket ^ documentPrintTicket);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.Serialization.SerializerWriterCollator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentSequencePrintTicket" Type="System.Printing.PrintTicket" />
        <Parameter Name="documentPrintTicket" Type="System.Printing.PrintTicket" />
      </Parameters>
      <Docs>
        <param name="documentSequencePrintTicket">
          <see cref="T:System.Printing.PrintTicket" />，指定文件序列 (Sequence) 的預設列印偏好設定。</param>
        <param name="documentPrintTicket">
          <see cref="T:System.Printing.PrintTicket" />，表示每個文件的預設列印偏好設定。</param>
        <summary>傳回 <see cref="T:System.Windows.Xps.VisualsToXpsDocument" />，它可以將具有 <see cref="T:System.Windows.Media.Visual" /> 設定的 <see cref="T:System.Printing.PrintTicket" /> 物件寫入至 XPS 文件或列印佇列。</summary>
        <returns>新的 <see cref="T:System.Windows.Xps.VisualsToXpsDocument" />，可將具有 <see cref="T:System.Windows.Media.Visual" /> 設定的 <see cref="T:System.Printing.PrintTicket" /> 項目寫入至 <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Xps.VisualsToXpsDocument>寫入相同的目標<xref:System.Windows.Xps.Packaging.XpsDocument>或<xref:System.Printing.PrintQueue>為<xref:System.Windows.Xps.XpsDocumentWriter>會建立<xref:System.Windows.Xps.VisualsToXpsDocument>。  
  
 這個方法不會驗證或修改指定`documentPrintTicket`特定<xref:System.Printing.PrintQueue>。 如果有必要，請使用<xref:System.Printing.PrintQueue.MergeAndValidatePrintTicket%2A>方法來建立<xref:System.Printing.PrintTicket>專屬於<xref:System.Printing.PrintQueue>和適用於指定的印表機。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Write">
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>以同步方式寫入 XPS 文件或列印佇列。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (string documentPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Write(string documentPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Xps.XpsDocumentWriter.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (documentPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Write(System::String ^ documentPath);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="documentPath">來源文件的路徑。</param>
        <summary>以同步方式將指定的 [!INCLUDE[TLA2#tla_xps](~/includes/tla2sharptla-xps-md.md)] 文件寫入目標 <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> 或 <see cref="T:System.Printing.PrintQueue" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 雖然<xref:System.Windows.Xps.Packaging.XpsDocument>類別具有單數名稱，<xref:System.Windows.Xps.Packaging.XpsDocument>可以是其中一個<xref:System.Windows.Documents.FixedDocument>或一組多份文件。 這個方法會加入<xref:System.Windows.Documents.FixedDocument>集來源中的項目<xref:System.Windows.Documents.FixedDocument>目標中的項目<xref:System.Windows.Xps.Packaging.XpsDocument>或<xref:System.Printing.PrintQueue>。  
  
 這<xref:System.Windows.Xps.XpsDocumentWriter.Write%2A>方法將 reserialize 指定[!INCLUDE[TLA2#tla_xps](~/includes/tla2sharptla-xps-md.md)]文件會在移除的所有內容<xref:System.IO.Packaging.Package>，就不需要由保留[XML Paper Specification](http://go.microsoft.com/fwlink/?LinkID=65761)。  介紹雷同，也會移除所有延伸模組從<xref:System.Windows.Documents.FixedPage>標記，包括任何擴充[!INCLUDE[TLA2#tla_xps](~/includes/tla2sharptla-xps-md.md)]內容。  
  
 依設計這<xref:System.Windows.Xps.XpsDocumentWriter.Write%2A>方法不會呼叫<xref:System.Windows.Xps.XpsDocumentWriter.WritingPrintTicketRequired>事件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (System.Windows.Documents.DocumentPaginator documentPaginator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(class System.Windows.Documents.DocumentPaginator documentPaginator) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Xps.XpsDocumentWriter.Write(System.Windows.Documents.DocumentPaginator)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::Windows::Documents::DocumentPaginator ^ documentPaginator);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentPaginator" Type="System.Windows.Documents.DocumentPaginator" />
      </Parameters>
      <Docs>
        <param name="documentPaginator">包含未分頁來源資料指標，也包含資料分頁方法的物件。</param>
        <summary>從指定的 <see cref="T:System.Windows.Documents.DocumentPaginator" />，將分頁內容以同步方式寫入目標 <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> 或 <see cref="T:System.Printing.PrintQueue" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例示範如何使用<xref:System.Windows.Xps.XpsDocumentWriter.Write%2A>方法，將寫入[!INCLUDE[TLA2#tla_xps](~/includes/tla2sharptla-xps-md.md)]文件。  
  
 [!code-csharp[XpsSave#WriteToXpsWithDocumentPaginator](~/samples/snippets/csharp/VS_Snippets_Wpf/XpsSave/CSharp/XpsSaveHelper.cs#writetoxpswithdocumentpaginator)]
 [!code-vb[XpsSave#WriteToXpsWithDocumentPaginator](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XpsSave/visualbasic/xpssavehelper.vb#writetoxpswithdocumentpaginator)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (System.Windows.Documents.FixedDocument fixedDocument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(class System.Windows.Documents.FixedDocument fixedDocument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Xps.XpsDocumentWriter.Write(System.Windows.Documents.FixedDocument)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::Windows::Documents::FixedDocument ^ fixedDocument);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fixedDocument" Type="System.Windows.Documents.FixedDocument" />
      </Parameters>
      <Docs>
        <param name="fixedDocument">寫入至 <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> 的文件。</param>
        <summary>以同步方式將指定的 <see cref="T:System.Windows.Documents.FixedDocument" /> 寫入目標 <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> 或 <see cref="T:System.Printing.PrintQueue" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 雖然<xref:System.Windows.Xps.Packaging.XpsDocument>類別具有單數名稱，<xref:System.Windows.Xps.Packaging.XpsDocument>可以是其中一個<xref:System.Windows.Documents.FixedDocument>或一組多份文件。 這個方法會加入<xref:System.Windows.Documents.FixedDocument>集。  
  
   
  
## Examples  
 下列範例示範如何使用這個方法來寫入[!INCLUDE[TLA2#tla_xps](~/includes/tla2sharptla-xps-md.md)]文件。  
  
 [!code-csharp[XpsSave#WriteToXpsWithFixedDocument](~/samples/snippets/csharp/VS_Snippets_Wpf/XpsSave/CSharp/XpsSaveHelper.cs#writetoxpswithfixeddocument)]
 [!code-vb[XpsSave#WriteToXpsWithFixedDocument](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XpsSave/visualbasic/xpssavehelper.vb#writetoxpswithfixeddocument)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (System.Windows.Documents.FixedDocumentSequence fixedDocumentSequence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(class System.Windows.Documents.FixedDocumentSequence fixedDocumentSequence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Xps.XpsDocumentWriter.Write(System.Windows.Documents.FixedDocumentSequence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::Windows::Documents::FixedDocumentSequence ^ fixedDocumentSequence);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fixedDocumentSequence" Type="System.Windows.Documents.FixedDocumentSequence" />
      </Parameters>
      <Docs>
        <param name="fixedDocumentSequence">寫入至 <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> 的一組文件。</param>
        <summary>以同步方式將指定的 <see cref="T:System.Windows.Documents.FixedDocumentSequence" /> 寫入目標 <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> 或 <see cref="T:System.Printing.PrintQueue" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 雖然<xref:System.Windows.Xps.Packaging.XpsDocument>類別具有單數名稱，<xref:System.Windows.Xps.Packaging.XpsDocument>可以是其中一個<xref:System.Windows.Documents.FixedDocument>或一組多份文件。 這個方法會加入<xref:System.Windows.Documents.FixedDocument>或一組<xref:System.Windows.Documents.FixedDocument>項目至現有的集。  
  
   
  
## Examples  
 下列範例示範如何使用<xref:System.Windows.Xps.XpsDocumentWriter.Write%2A>方法寫入一連串[!INCLUDE[TLA2#tla_xps](~/includes/tla2sharptla-xps-md.md)]文件。  
  
 [!code-csharp[XpsSave#WriteToXpsWithFixedDocumentSequence](~/samples/snippets/csharp/VS_Snippets_Wpf/XpsSave/CSharp/XpsSaveHelper.cs#writetoxpswithfixeddocumentsequence)]
 [!code-vb[XpsSave#WriteToXpsWithFixedDocumentSequence](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XpsSave/visualbasic/xpssavehelper.vb#writetoxpswithfixeddocumentsequence)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (System.Windows.Documents.FixedPage fixedPage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(class System.Windows.Documents.FixedPage fixedPage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Xps.XpsDocumentWriter.Write(System.Windows.Documents.FixedPage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::Windows::Documents::FixedPage ^ fixedPage);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fixedPage" Type="System.Windows.Documents.FixedPage" />
      </Parameters>
      <Docs>
        <param name="fixedPage">寫入至 <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> 的頁面。</param>
        <summary>以同步方式將指定的 <see cref="T:System.Windows.Documents.FixedPage" /> 寫入目標 <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> 或 <see cref="T:System.Printing.PrintQueue" />。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (System.Windows.Media.Visual visual);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(class System.Windows.Media.Visual visual) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Xps.XpsDocumentWriter.Write(System.Windows.Media.Visual)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::Windows::Media::Visual ^ visual);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visual" Type="System.Windows.Media.Visual" />
      </Parameters>
      <Docs>
        <param name="visual">寫入的 <see cref="T:System.Windows.Media.Visual" />。</param>
        <summary>以同步方式將指定的 <see cref="T:System.Windows.Media.Visual" /> 寫入目標 <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> 或 <see cref="T:System.Printing.PrintQueue" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 為批次寫入<xref:System.Windows.Media.Visual>，使用<xref:System.Windows.Xps.VisualsToXpsDocument>。  
  
   
  
## Examples  
 下列範例示範如何使用<xref:System.Windows.Xps.XpsDocumentWriter.Write%2A>方法寫入<xref:System.Windows.Media.Visual>至[!INCLUDE[TLA2#tla_xps](~/includes/tla2sharptla-xps-md.md)]文件。  
  
 [!code-csharp[XpsSave#WriteToXpsWithVisual](~/samples/snippets/csharp/VS_Snippets_Wpf/XpsSave/CSharp/XpsSaveHelper.cs#writetoxpswithvisual)]
 [!code-vb[XpsSave#WriteToXpsWithVisual](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XpsSave/visualbasic/xpssavehelper.vb#writetoxpswithvisual)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (string documentPath, System.Windows.Xps.XpsDocumentNotificationLevel notificationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Write(string documentPath, valuetype System.Windows.Xps.XpsDocumentNotificationLevel notificationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Xps.XpsDocumentWriter.Write(System.String,System.Windows.Xps.XpsDocumentNotificationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (documentPath As String, notificationLevel As XpsDocumentNotificationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Write(System::String ^ documentPath, System::Windows::Xps::XpsDocumentNotificationLevel notificationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentPath" Type="System.String" />
        <Parameter Name="notificationLevel" Type="System.Windows.Xps.XpsDocumentNotificationLevel" />
      </Parameters>
      <Docs>
        <param name="documentPath">來源文件的路徑。</param>
        <param name="notificationLevel">指出是否啟用通知。</param>
        <summary>以同步方式將指定的 [!INCLUDE[TLA2#tla_xps](~/includes/tla2sharptla-xps-md.md)] 文件寫入目標 <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> 或 <see cref="T:System.Printing.PrintQueue" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當`notificationLevel`已停用，<xref:System.Windows.Xps.XpsDocumentWriter>複製序列化[!INCLUDE[TLA2#tla_xps](~/includes/tla2sharptla-xps-md.md)]至目標文件<xref:System.Windows.Xps.Packaging.XpsDocument>或<xref:System.Printing.PrintQueue>建立<xref:System.Windows.Xps.XpsDocumentWriter>。 當`notificationLevel`已啟用，<xref:System.Windows.Xps.XpsDocumentWriter>先還原序列化文件，接下來這，然後將它寫入進度通知的目標為每個頁面都會輸出。  
  
 雖然<xref:System.Windows.Xps.Packaging.XpsDocument>類別具有單數名稱，<xref:System.Windows.Xps.Packaging.XpsDocument>可以是其中一個<xref:System.Windows.Documents.FixedDocument>或一組多份文件。 這個方法會加入<xref:System.Windows.Documents.FixedDocument>來源的序列中的項目<xref:System.Windows.Documents.FixedDocument>目標中的項目<xref:System.Windows.Xps.Packaging.XpsDocument>或<xref:System.Printing.PrintQueue>。  
  
 如果`notificationLevel`指定為<xref:System.Windows.Xps.XpsDocumentNotificationLevel.ReceiveNotificationEnabled>，僅序列化文件，不會列印時，才不會產生通知。  若要接收通知必須 reserialized 文件。  當 reserialized 文件是從所有內容<xref:System.IO.Packaging.Package>，就不需要由保留[XML Paper Specification (XPS)](http://go.microsoft.com/fwlink/?LinkID=65761)已移除。  介紹雷同，也會移除所有延伸模組從<xref:System.Windows.Documents.FixedPage>標記，包括任何擴充[!INCLUDE[TLA2#tla_xps](~/includes/tla2sharptla-xps-md.md)]內容。  
  
 如果`notificationLevel`指定為<xref:System.Windows.Xps.XpsDocumentNotificationLevel.ReceiveNotificationDisabled>不 reserialized 文件和延伸的任何內容都會保留下來，即使在列印時。  
  
 依設計這<xref:System.Windows.Xps.XpsDocumentWriter.Write%2A>方法不會呼叫<xref:System.Windows.Xps.XpsDocumentWriter.WritingPrintTicketRequired>事件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (System.Windows.Documents.DocumentPaginator documentPaginator, System.Printing.PrintTicket printTicket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(class System.Windows.Documents.DocumentPaginator documentPaginator, class System.Printing.PrintTicket printTicket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Xps.XpsDocumentWriter.Write(System.Windows.Documents.DocumentPaginator,System.Printing.PrintTicket)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::Windows::Documents::DocumentPaginator ^ documentPaginator, System::Printing::PrintTicket ^ printTicket);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentPaginator" Type="System.Windows.Documents.DocumentPaginator" />
        <Parameter Name="printTicket" Type="System.Printing.PrintTicket" />
      </Parameters>
      <Docs>
        <param name="documentPaginator">包含未分頁來源資料指標，也包含資料分頁方法的物件。</param>
        <param name="printTicket">
          <see cref="T:System.Printing.PrintTicket" />，表示資料的預設列印偏好設定。</param>
        <summary>從指定的 <see cref="T:System.Windows.Documents.DocumentPaginator" />，將分頁內容連同 <see cref="T:System.Printing.PrintTicket" /> 以同步方式寫入目標 <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> 或 <see cref="T:System.Printing.PrintQueue" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法不會驗證或修改指定`printTicket`特定<xref:System.Printing.PrintQueue>。 如果有必要，請使用<xref:System.Printing.PrintQueue.MergeAndValidatePrintTicket%2A>方法來建立<xref:System.Printing.PrintTicket>專屬於<xref:System.Printing.PrintQueue>和適用於指定的印表機。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (System.Windows.Documents.FixedDocument fixedDocument, System.Printing.PrintTicket printTicket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(class System.Windows.Documents.FixedDocument fixedDocument, class System.Printing.PrintTicket printTicket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Xps.XpsDocumentWriter.Write(System.Windows.Documents.FixedDocument,System.Printing.PrintTicket)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::Windows::Documents::FixedDocument ^ fixedDocument, System::Printing::PrintTicket ^ printTicket);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fixedDocument" Type="System.Windows.Documents.FixedDocument" />
        <Parameter Name="printTicket" Type="System.Printing.PrintTicket" />
      </Parameters>
      <Docs>
        <param name="fixedDocument">寫入的文件。</param>
        <param name="printTicket">
          <see cref="T:System.Printing.PrintTicket" />，代表文件的預設列印喜好設定。</param>
        <summary>以同步方式將 <see cref="T:System.Windows.Documents.FixedDocument" /> 連同 <see cref="T:System.Printing.PrintTicket" /> 一起寫入目標 <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> 或 <see cref="T:System.Printing.PrintQueue" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 雖然<xref:System.Windows.Xps.Packaging.XpsDocument>類別具有單數名稱，<xref:System.Windows.Xps.Packaging.XpsDocument>可以是其中一個<xref:System.Windows.Documents.FixedDocument>或一組多份文件。 這個方法會加入<xref:System.Windows.Documents.FixedDocument>集。  
  
 這個方法不會驗證或修改指定`printTicket`特定<xref:System.Printing.PrintQueue>。 如果有必要，請使用<xref:System.Printing.PrintQueue.MergeAndValidatePrintTicket%2A>方法來建立<xref:System.Printing.PrintTicket>專屬於<xref:System.Printing.PrintQueue>和適用於指定的印表機。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (System.Windows.Documents.FixedDocumentSequence fixedDocumentSequence, System.Printing.PrintTicket printTicket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(class System.Windows.Documents.FixedDocumentSequence fixedDocumentSequence, class System.Printing.PrintTicket printTicket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Xps.XpsDocumentWriter.Write(System.Windows.Documents.FixedDocumentSequence,System.Printing.PrintTicket)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::Windows::Documents::FixedDocumentSequence ^ fixedDocumentSequence, System::Printing::PrintTicket ^ printTicket);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fixedDocumentSequence" Type="System.Windows.Documents.FixedDocumentSequence" />
        <Parameter Name="printTicket" Type="System.Printing.PrintTicket" />
      </Parameters>
      <Docs>
        <param name="fixedDocumentSequence">寫入的文件集。</param>
        <param name="printTicket">
          <see cref="T:System.Printing.PrintTicket" />，表示文件集的預設列印偏好設定。</param>
        <summary>以同步方式將指定的 <see cref="T:System.Windows.Documents.FixedDocumentSequence" /> 連同 <see cref="T:System.Printing.PrintTicket" /> 一起寫入目標 <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> 或 <see cref="T:System.Printing.PrintQueue" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 雖然<xref:System.Windows.Xps.Packaging.XpsDocument>類別具有單數名稱，<xref:System.Windows.Xps.Packaging.XpsDocument>可以是其中一個<xref:System.Windows.Documents.FixedDocument>或一組多份文件。 這個方法會加入<xref:System.Windows.Documents.FixedDocument>或一組<xref:System.Windows.Documents.FixedDocument>項目至現有的集。  
  
 這個方法不會驗證或修改指定`printTicket`特定<xref:System.Printing.PrintQueue>。 如果有必要，請使用<xref:System.Printing.PrintQueue.MergeAndValidatePrintTicket%2A>方法來建立<xref:System.Printing.PrintTicket>專屬於<xref:System.Printing.PrintQueue>和適用於指定的印表機。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (System.Windows.Documents.FixedPage fixedPage, System.Printing.PrintTicket printTicket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(class System.Windows.Documents.FixedPage fixedPage, class System.Printing.PrintTicket printTicket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Xps.XpsDocumentWriter.Write(System.Windows.Documents.FixedPage,System.Printing.PrintTicket)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::Windows::Documents::FixedPage ^ fixedPage, System::Printing::PrintTicket ^ printTicket);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fixedPage" Type="System.Windows.Documents.FixedPage" />
        <Parameter Name="printTicket" Type="System.Printing.PrintTicket" />
      </Parameters>
      <Docs>
        <param name="fixedPage">寫入的頁面。</param>
        <param name="printTicket">A <see cref="T:System.Printing.PrintTicket" />，表示頁面的預設列印偏好設定。</param>
        <summary>以同步方式將指定的 <see cref="T:System.Windows.Documents.FixedPage" /> 連同 <see cref="T:System.Printing.PrintTicket" /> 一起寫入目標 <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> 或 <see cref="T:System.Printing.PrintQueue" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法不會驗證或修改指定`printTicket`特定<xref:System.Printing.PrintQueue>。 如果有必要，請使用<xref:System.Printing.PrintQueue.MergeAndValidatePrintTicket%2A>方法來建立<xref:System.Printing.PrintTicket>專屬於<xref:System.Printing.PrintQueue>和適用於指定的印表機。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (System.Windows.Media.Visual visual, System.Printing.PrintTicket printTicket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(class System.Windows.Media.Visual visual, class System.Printing.PrintTicket printTicket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Xps.XpsDocumentWriter.Write(System.Windows.Media.Visual,System.Printing.PrintTicket)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::Windows::Media::Visual ^ visual, System::Printing::PrintTicket ^ printTicket);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visual" Type="System.Windows.Media.Visual" />
        <Parameter Name="printTicket" Type="System.Printing.PrintTicket" />
      </Parameters>
      <Docs>
        <param name="visual">寫入的 <see cref="T:System.Windows.Media.Visual" />。</param>
        <param name="printTicket">
          <see cref="T:System.Printing.PrintTicket" />，代表文件的預設列印喜好設定。</param>
        <summary>以同步方式將指定的 <see cref="T:System.Windows.Media.Visual" /> 連同 <see cref="T:System.Printing.PrintTicket" /> 一起寫入目標 <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> 或 <see cref="T:System.Printing.PrintQueue" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 為批次寫入<xref:System.Windows.Media.Visual>，使用<xref:System.Windows.Xps.VisualsToXpsDocument>。  
  
 這個方法不會驗證或修改指定`printTicket`特定<xref:System.Printing.PrintQueue>。 如果有必要，請使用<xref:System.Printing.PrintQueue.MergeAndValidatePrintTicket%2A>方法來建立<xref:System.Printing.PrintTicket>專屬於<xref:System.Printing.PrintQueue>和適用於指定的印表機。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteAsync">
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>以非同步方式寫入 <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> 或建立 <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> 的 <see cref="T:System.Printing.PrintQueue" />。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public void WriteAsync (string documentPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteAsync(string documentPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Xps.XpsDocumentWriter.WriteAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteAsync (documentPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteAsync(System::String ^ documentPath);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="documentPath">來源文件的路徑。</param>
        <summary>以非同步方式將指定的 [!INCLUDE[TLA2#tla_xps](~/includes/tla2sharptla-xps-md.md)] 文件寫入目標 <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> 或 <see cref="T:System.Printing.PrintQueue" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 雖然<xref:System.Windows.Xps.Packaging.XpsDocument>類別具有單數名稱，<xref:System.Windows.Xps.Packaging.XpsDocument>可以是其中一個<xref:System.Windows.Documents.FixedDocument>或一組多份文件。 這個方法會加入<xref:System.Windows.Documents.FixedDocument>集來源中的項目<xref:System.Windows.Documents.FixedDocument>目標中的項目<xref:System.Windows.Xps.Packaging.XpsDocument>或<xref:System.Printing.PrintQueue>。  
  
 這<xref:System.Windows.Xps.XpsDocumentWriter.WriteAsync%2A>方法將 reserialize 指定[!INCLUDE[TLA2#tla_xps](~/includes/tla2sharptla-xps-md.md)]文件會在移除的所有內容<xref:System.IO.Packaging.Package>，就不需要由保留[XML Paper Specification](http://go.microsoft.com/fwlink/?LinkID=65761)。  介紹雷同，也會移除所有延伸模組從<xref:System.Windows.Documents.FixedPage>標記，包括任何擴充[!INCLUDE[TLA2#tla_xps](~/includes/tla2sharptla-xps-md.md)]內容。  
  
 依設計這<xref:System.Windows.Xps.XpsDocumentWriter.WriteAsync%2A>方法不會呼叫<xref:System.Windows.Xps.XpsDocumentWriter.WritingPrintTicketRequired>事件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public override void WriteAsync (System.Windows.Documents.DocumentPaginator documentPaginator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteAsync(class System.Windows.Documents.DocumentPaginator documentPaginator) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Xps.XpsDocumentWriter.WriteAsync(System.Windows.Documents.DocumentPaginator)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteAsync(System::Windows::Documents::DocumentPaginator ^ documentPaginator);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentPaginator" Type="System.Windows.Documents.DocumentPaginator" />
      </Parameters>
      <Docs>
        <param name="documentPaginator">包含未分頁來源資料指標，也包含資料分頁方法的物件。</param>
        <summary>從指定的 <see cref="T:System.Windows.Documents.DocumentPaginator" />，將分頁內容以非同步方式寫入目標 <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> 或 <see cref="T:System.Printing.PrintQueue" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例示範如何使用這個方法來寫入[!INCLUDE[TLA2#tla_xps](~/includes/tla2sharptla-xps-md.md)]文件。  
  
 [!code-csharp[XpsSave#WriteAsyncToXpsWithDocumentPaginator](~/samples/snippets/csharp/VS_Snippets_Wpf/XpsSave/CSharp/XpsSaveHelper.cs#writeasynctoxpswithdocumentpaginator)]
 [!code-vb[XpsSave#WriteAsyncToXpsWithDocumentPaginator](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XpsSave/visualbasic/xpssavehelper.vb#writeasynctoxpswithdocumentpaginator)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public override void WriteAsync (System.Windows.Documents.FixedDocument fixedDocument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteAsync(class System.Windows.Documents.FixedDocument fixedDocument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Xps.XpsDocumentWriter.WriteAsync(System.Windows.Documents.FixedDocument)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteAsync(System::Windows::Documents::FixedDocument ^ fixedDocument);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fixedDocument" Type="System.Windows.Documents.FixedDocument" />
      </Parameters>
      <Docs>
        <param name="fixedDocument">寫入的文件。</param>
        <summary>以非同步方式將指定的 <see cref="T:System.Windows.Documents.FixedDocument" /> 寫入目標 <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> 或 <see cref="T:System.Printing.PrintQueue" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 雖然<xref:System.Windows.Xps.Packaging.XpsDocument>類別具有單數名稱，<xref:System.Windows.Xps.Packaging.XpsDocument>可以是其中一個<xref:System.Windows.Documents.FixedDocument>或一組多份文件。 這個方法會加入<xref:System.Windows.Documents.FixedDocument>集。  
  
   
  
## Examples  
 下列範例示範如何使用這個方法來寫入[!INCLUDE[TLA2#tla_xps](~/includes/tla2sharptla-xps-md.md)]文件。  
  
 [!code-csharp[XpsSave#WriteAsyncToXpsWithFixedDocument](~/samples/snippets/csharp/VS_Snippets_Wpf/XpsSave/CSharp/XpsSaveHelper.cs#writeasynctoxpswithfixeddocument)]
 [!code-vb[XpsSave#WriteAsyncToXpsWithFixedDocument](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XpsSave/visualbasic/xpssavehelper.vb#writeasynctoxpswithfixeddocument)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public override void WriteAsync (System.Windows.Documents.FixedDocumentSequence fixedDocumentSequence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteAsync(class System.Windows.Documents.FixedDocumentSequence fixedDocumentSequence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Xps.XpsDocumentWriter.WriteAsync(System.Windows.Documents.FixedDocumentSequence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteAsync(System::Windows::Documents::FixedDocumentSequence ^ fixedDocumentSequence);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fixedDocumentSequence" Type="System.Windows.Documents.FixedDocumentSequence" />
      </Parameters>
      <Docs>
        <param name="fixedDocumentSequence">寫入的文件集。</param>
        <summary>以非同步方式將指定的 <see cref="T:System.Windows.Documents.FixedDocumentSequence" /> 寫入目標 <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> 或 <see cref="T:System.Printing.PrintQueue" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 雖然<xref:System.Windows.Xps.Packaging.XpsDocument>類別具有單數名稱，<xref:System.Windows.Xps.Packaging.XpsDocument>可以是其中一個<xref:System.Windows.Documents.FixedDocument>或一組多份文件。 這個方法會加入<xref:System.Windows.Documents.FixedDocument>或一組<xref:System.Windows.Documents.FixedDocument>項目至現有的集。  
  
   
  
## Examples  
 下列範例示範如何使用這個方法來寫入[!INCLUDE[TLA2#tla_xps](~/includes/tla2sharptla-xps-md.md)]文件。  
  
 [!code-csharp[XpsSave#WriteAsyncToXpsWithFixedDocumentSequence](~/samples/snippets/csharp/VS_Snippets_Wpf/XpsSave/CSharp/XpsSaveHelper.cs#writeasynctoxpswithfixeddocumentsequence)]
 [!code-vb[XpsSave#WriteAsyncToXpsWithFixedDocumentSequence](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XpsSave/visualbasic/xpssavehelper.vb#writeasynctoxpswithfixeddocumentsequence)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public override void WriteAsync (System.Windows.Documents.FixedPage fixedPage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteAsync(class System.Windows.Documents.FixedPage fixedPage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Xps.XpsDocumentWriter.WriteAsync(System.Windows.Documents.FixedPage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteAsync(System::Windows::Documents::FixedPage ^ fixedPage);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fixedPage" Type="System.Windows.Documents.FixedPage" />
      </Parameters>
      <Docs>
        <param name="fixedPage">寫入的頁面。</param>
        <summary>以非同步方式將指定的 <see cref="T:System.Windows.Documents.FixedPage" /> 寫入目標 <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> 或 <see cref="T:System.Printing.PrintQueue" />。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public override void WriteAsync (System.Windows.Media.Visual visual);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteAsync(class System.Windows.Media.Visual visual) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Xps.XpsDocumentWriter.WriteAsync(System.Windows.Media.Visual)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteAsync(System::Windows::Media::Visual ^ visual);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visual" Type="System.Windows.Media.Visual" />
      </Parameters>
      <Docs>
        <param name="visual">寫入的 <see cref="T:System.Windows.Media.Visual" />。</param>
        <summary>以非同步方式將指定的 <see cref="T:System.Windows.Media.Visual" /> 寫入目標 <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> 或 <see cref="T:System.Printing.PrintQueue" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 為批次寫入<xref:System.Windows.Media.Visual>，使用<xref:System.Windows.Xps.VisualsToXpsDocument>。  
  
   
  
## Examples  
 下列範例示範如何使用這個方法來撰寫<xref:System.Windows.Media.Visual>至[!INCLUDE[TLA2#tla_xps](~/includes/tla2sharptla-xps-md.md)]文件。  
  
 [!code-csharp[XpsSave#WriteAsyncToXpsWithVisual](~/samples/snippets/csharp/VS_Snippets_Wpf/XpsSave/CSharp/XpsSaveHelper.cs#writeasynctoxpswithvisual)]
 [!code-vb[XpsSave#WriteAsyncToXpsWithVisual](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XpsSave/visualbasic/xpssavehelper.vb#writeasynctoxpswithvisual)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public void WriteAsync (string documentPath, System.Windows.Xps.XpsDocumentNotificationLevel notificationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteAsync(string documentPath, valuetype System.Windows.Xps.XpsDocumentNotificationLevel notificationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Xps.XpsDocumentWriter.WriteAsync(System.String,System.Windows.Xps.XpsDocumentNotificationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteAsync (documentPath As String, notificationLevel As XpsDocumentNotificationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteAsync(System::String ^ documentPath, System::Windows::Xps::XpsDocumentNotificationLevel notificationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentPath" Type="System.String" />
        <Parameter Name="notificationLevel" Type="System.Windows.Xps.XpsDocumentNotificationLevel" />
      </Parameters>
      <Docs>
        <param name="documentPath">來源文件的路徑。</param>
        <param name="notificationLevel">指出是否啟用通知。</param>
        <summary>以非同步方式，將指定的 [!INCLUDE[TLA2#tla_xps](~/includes/tla2sharptla-xps-md.md)] 文件連同通知選項一起寫入目標 <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> 或 <see cref="T:System.Printing.PrintQueue" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當`notificationLevel`已停用，<xref:System.Windows.Xps.XpsDocumentWriter>複製序列化[!INCLUDE[TLA2#tla_xps](~/includes/tla2sharptla-xps-md.md)]至目標文件<xref:System.Windows.Xps.Packaging.XpsDocument>或<xref:System.Printing.PrintQueue>建立<xref:System.Windows.Xps.XpsDocumentWriter>。 當`notificationLevel`已啟用，<xref:System.Windows.Xps.XpsDocumentWriter>先還原序列化文件，接下來這，然後將它寫入進度通知的目標為每個頁面都會輸出。  
  
 雖然<xref:System.Windows.Xps.Packaging.XpsDocument>類別具有單數名稱，<xref:System.Windows.Xps.Packaging.XpsDocument>可以是其中一個<xref:System.Windows.Documents.FixedDocument>或一組多份文件。 這個方法會加入<xref:System.Windows.Documents.FixedDocument>來源的序列中的項目<xref:System.Windows.Documents.FixedDocument>目標中的項目<xref:System.Windows.Xps.Packaging.XpsDocument>或<xref:System.Printing.PrintQueue>。  
  
 如果`notificationLevel`指定為<xref:System.Windows.Xps.XpsDocumentNotificationLevel.ReceiveNotificationEnabled>，僅序列化文件，不會列印時，才不會產生通知。  若要接收通知必須 reserialized 文件。  當 reserialized 文件是從所有內容<xref:System.IO.Packaging.Package>，就不需要由保留[XML Paper Specification](http://go.microsoft.com/fwlink/?LinkID=65761)已移除。  介紹雷同，也會移除所有延伸模組從<xref:System.Windows.Documents.FixedPage>標記，包括任何擴充[!INCLUDE[TLA2#tla_xps](~/includes/tla2sharptla-xps-md.md)]內容。  
  
 如果`notificationLevel`指定為<xref:System.Windows.Xps.XpsDocumentNotificationLevel.ReceiveNotificationDisabled>不 reserialized 文件和延伸的任何內容都會保留下來，即使在列印時。  
  
 依設計這<xref:System.Windows.Xps.XpsDocumentWriter.WriteAsync%2A>方法不會呼叫<xref:System.Windows.Xps.XpsDocumentWriter.WritingPrintTicketRequired>事件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public override void WriteAsync (System.Windows.Documents.DocumentPaginator documentPaginator, object userSuppliedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteAsync(class System.Windows.Documents.DocumentPaginator documentPaginator, object userSuppliedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Xps.XpsDocumentWriter.WriteAsync(System.Windows.Documents.DocumentPaginator,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteAsync(System::Windows::Documents::DocumentPaginator ^ documentPaginator, System::Object ^ userSuppliedState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentPaginator" Type="System.Windows.Documents.DocumentPaginator" />
        <Parameter Name="userSuppliedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="documentPaginator">包含取消來源素材編頁指標的物件，也包含素材編頁的方法。</param>
        <param name="userSuppliedState">識別非同步作業以及與其相關聯的使用者指定物件。</param>
        <summary>從指定的 <see cref="T:System.Windows.Documents.DocumentPaginator" />，將分頁內容以非同步方式寫入目標 <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> 或 <see cref="T:System.Printing.PrintQueue" />。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public override void WriteAsync (System.Windows.Documents.DocumentPaginator documentPaginator, System.Printing.PrintTicket printTicket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteAsync(class System.Windows.Documents.DocumentPaginator documentPaginator, class System.Printing.PrintTicket printTicket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Xps.XpsDocumentWriter.WriteAsync(System.Windows.Documents.DocumentPaginator,System.Printing.PrintTicket)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteAsync(System::Windows::Documents::DocumentPaginator ^ documentPaginator, System::Printing::PrintTicket ^ printTicket);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentPaginator" Type="System.Windows.Documents.DocumentPaginator" />
        <Parameter Name="printTicket" Type="System.Printing.PrintTicket" />
      </Parameters>
      <Docs>
        <param name="documentPaginator">包含未分頁來源資料指標，也包含資料分頁方法的物件。</param>
        <param name="printTicket">
          <see cref="T:System.Printing.PrintTicket" />，表示資料的預設列印偏好設定。</param>
        <summary>以非同步方式，從指定的 <see cref="T:System.Windows.Documents.DocumentPaginator" /> 將分頁內容連同 <see cref="T:System.Printing.PrintTicket" /> 一起寫入目標 <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> 或 <see cref="T:System.Printing.PrintQueue" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法不會驗證或修改指定`printTicket`特定<xref:System.Printing.PrintQueue>。 如果有必要，請使用<xref:System.Printing.PrintQueue.MergeAndValidatePrintTicket%2A>方法來建立<xref:System.Printing.PrintTicket>專屬於<xref:System.Printing.PrintQueue>和適用於指定的印表機。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public override void WriteAsync (System.Windows.Documents.FixedDocument fixedDocument, object userSuppliedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteAsync(class System.Windows.Documents.FixedDocument fixedDocument, object userSuppliedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Xps.XpsDocumentWriter.WriteAsync(System.Windows.Documents.FixedDocument,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteAsync(System::Windows::Documents::FixedDocument ^ fixedDocument, System::Object ^ userSuppliedState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fixedDocument" Type="System.Windows.Documents.FixedDocument" />
        <Parameter Name="userSuppliedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="fixedDocument">寫入的文件。</param>
        <param name="userSuppliedState">識別非同步作業以及與其相關聯的使用者指定物件。</param>
        <summary>以非同步方式將指定的 <see cref="T:System.Windows.Documents.FixedDocument" /> 寫入目標 <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> 或 <see cref="T:System.Printing.PrintQueue" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 雖然<xref:System.Windows.Xps.Packaging.XpsDocument>類別具有單數名稱，<xref:System.Windows.Xps.Packaging.XpsDocument>可以是其中一個<xref:System.Windows.Documents.FixedDocument>或一組多份文件。 這個方法會加入<xref:System.Windows.Documents.FixedDocument>集。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public override void WriteAsync (System.Windows.Documents.FixedDocument fixedDocument, System.Printing.PrintTicket printTicket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteAsync(class System.Windows.Documents.FixedDocument fixedDocument, class System.Printing.PrintTicket printTicket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Xps.XpsDocumentWriter.WriteAsync(System.Windows.Documents.FixedDocument,System.Printing.PrintTicket)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteAsync(System::Windows::Documents::FixedDocument ^ fixedDocument, System::Printing::PrintTicket ^ printTicket);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fixedDocument" Type="System.Windows.Documents.FixedDocument" />
        <Parameter Name="printTicket" Type="System.Printing.PrintTicket" />
      </Parameters>
      <Docs>
        <param name="fixedDocument">寫入的文件。</param>
        <param name="printTicket">
          <see cref="T:System.Printing.PrintTicket" />，代表文件的預設列印喜好設定。</param>
        <summary>以非同步方式將指定的 <see cref="T:System.Windows.Documents.FixedDocument" /> 連同 <see cref="T:System.Printing.PrintTicket" /> 一起寫入目標 <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> 或 <see cref="T:System.Printing.PrintQueue" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 雖然<xref:System.Windows.Xps.Packaging.XpsDocument>類別具有單數名稱，<xref:System.Windows.Xps.Packaging.XpsDocument>可以是其中一個<xref:System.Windows.Documents.FixedDocument>或一組多份文件。 這個方法會加入<xref:System.Windows.Documents.FixedDocument>集。  
  
 這個方法不會驗證或修改指定`printTicket`特定<xref:System.Printing.PrintQueue>。 如果有必要，請使用<xref:System.Printing.PrintQueue.MergeAndValidatePrintTicket%2A>方法來建立<xref:System.Printing.PrintTicket>專屬於<xref:System.Printing.PrintQueue>和適用於指定的印表機。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public override void WriteAsync (System.Windows.Documents.FixedDocumentSequence fixedDocumentSequence, object userSuppliedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteAsync(class System.Windows.Documents.FixedDocumentSequence fixedDocumentSequence, object userSuppliedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Xps.XpsDocumentWriter.WriteAsync(System.Windows.Documents.FixedDocumentSequence,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteAsync(System::Windows::Documents::FixedDocumentSequence ^ fixedDocumentSequence, System::Object ^ userSuppliedState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fixedDocumentSequence" Type="System.Windows.Documents.FixedDocumentSequence" />
        <Parameter Name="userSuppliedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="fixedDocumentSequence">寫入的文件集。</param>
        <param name="userSuppliedState">識別非同步作業以及與其相關聯的使用者指定物件。</param>
        <summary>以非同步方式將指定的 <see cref="T:System.Windows.Documents.FixedDocumentSequence" /> 寫入目標 <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> 或 <see cref="T:System.Printing.PrintQueue" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 雖然<xref:System.Windows.Xps.Packaging.XpsDocument>類別具有單數名稱，<xref:System.Windows.Xps.Packaging.XpsDocument>可以是其中一個<xref:System.Windows.Documents.FixedDocument>或一組多份文件。 這個方法會加入<xref:System.Windows.Documents.FixedDocument>或一組<xref:System.Windows.Documents.FixedDocument>項目至現有的集。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public override void WriteAsync (System.Windows.Documents.FixedDocumentSequence fixedDocumentSequence, System.Printing.PrintTicket printTicket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteAsync(class System.Windows.Documents.FixedDocumentSequence fixedDocumentSequence, class System.Printing.PrintTicket printTicket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Xps.XpsDocumentWriter.WriteAsync(System.Windows.Documents.FixedDocumentSequence,System.Printing.PrintTicket)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteAsync(System::Windows::Documents::FixedDocumentSequence ^ fixedDocumentSequence, System::Printing::PrintTicket ^ printTicket);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fixedDocumentSequence" Type="System.Windows.Documents.FixedDocumentSequence" />
        <Parameter Name="printTicket" Type="System.Printing.PrintTicket" />
      </Parameters>
      <Docs>
        <param name="fixedDocumentSequence">寫入的文件集。</param>
        <param name="printTicket">
          <see cref="T:System.Printing.PrintTicket" />，表示文件集的預設列印偏好設定。</param>
        <summary>以非同步方式將指定的 <see cref="T:System.Windows.Documents.FixedDocumentSequence" /> 連同 <see cref="T:System.Printing.PrintTicket" /> 一起寫入目標 <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> 或 <see cref="T:System.Printing.PrintQueue" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 雖然<xref:System.Windows.Xps.Packaging.XpsDocument>類別具有單數名稱，<xref:System.Windows.Xps.Packaging.XpsDocument>可以是其中一個<xref:System.Windows.Documents.FixedDocument>或一組多份文件。 這個方法會加入<xref:System.Windows.Documents.FixedDocument>或一組<xref:System.Windows.Documents.FixedDocument>項目至現有的集。  
  
 這個方法不會驗證或修改指定`printTicket`特定<xref:System.Printing.PrintQueue>。 如果有必要，請使用<xref:System.Printing.PrintQueue.MergeAndValidatePrintTicket%2A>方法來建立<xref:System.Printing.PrintTicket>專屬於<xref:System.Printing.PrintQueue>和適用於指定的印表機。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public override void WriteAsync (System.Windows.Documents.FixedPage fixedPage, object userSuppliedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteAsync(class System.Windows.Documents.FixedPage fixedPage, object userSuppliedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Xps.XpsDocumentWriter.WriteAsync(System.Windows.Documents.FixedPage,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteAsync(System::Windows::Documents::FixedPage ^ fixedPage, System::Object ^ userSuppliedState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fixedPage" Type="System.Windows.Documents.FixedPage" />
        <Parameter Name="userSuppliedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="fixedPage">寫入的頁面。</param>
        <param name="userSuppliedState">識別非同步作業以及與其相關聯的使用者指定物件。</param>
        <summary>以非同步方式將指定的 <see cref="T:System.Windows.Documents.FixedPage" /> 寫入目標 <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> 或 <see cref="T:System.Printing.PrintQueue" />。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public override void WriteAsync (System.Windows.Documents.FixedPage fixedPage, System.Printing.PrintTicket printTicket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteAsync(class System.Windows.Documents.FixedPage fixedPage, class System.Printing.PrintTicket printTicket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Xps.XpsDocumentWriter.WriteAsync(System.Windows.Documents.FixedPage,System.Printing.PrintTicket)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteAsync(System::Windows::Documents::FixedPage ^ fixedPage, System::Printing::PrintTicket ^ printTicket);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fixedPage" Type="System.Windows.Documents.FixedPage" />
        <Parameter Name="printTicket" Type="System.Printing.PrintTicket" />
      </Parameters>
      <Docs>
        <param name="fixedPage">寫入的頁面。</param>
        <param name="printTicket">A <see cref="T:System.Printing.PrintTicket" />，表示頁面的預設列印偏好設定。</param>
        <summary>以非同步方式將指定的 <see cref="T:System.Windows.Documents.FixedPage" /> 連同 <see cref="T:System.Printing.PrintTicket" /> 一起寫入目標 <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> 或 <see cref="T:System.Printing.PrintQueue" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法不會驗證或修改指定`printTicket`特定<xref:System.Printing.PrintQueue>。 如果有必要，請使用<xref:System.Printing.PrintQueue.MergeAndValidatePrintTicket%2A>方法來建立<xref:System.Printing.PrintTicket>專屬於<xref:System.Printing.PrintQueue>和適用於指定的印表機。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public override void WriteAsync (System.Windows.Media.Visual visual, object userSuppliedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteAsync(class System.Windows.Media.Visual visual, object userSuppliedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Xps.XpsDocumentWriter.WriteAsync(System.Windows.Media.Visual,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteAsync(System::Windows::Media::Visual ^ visual, System::Object ^ userSuppliedState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visual" Type="System.Windows.Media.Visual" />
        <Parameter Name="userSuppliedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="visual">寫入的 <see cref="T:System.Windows.Media.Visual" />。</param>
        <param name="userSuppliedState">識別非同步作業以及與其相關聯的使用者指定物件。</param>
        <summary>以非同步方式將指定的 <see cref="T:System.Windows.Media.Visual" /> 寫入目標 <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> 或 <see cref="T:System.Printing.PrintQueue" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 為批次寫入<xref:System.Windows.Media.Visual>，使用<xref:System.Windows.Xps.VisualsToXpsDocument>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public override void WriteAsync (System.Windows.Media.Visual visual, System.Printing.PrintTicket printTicket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteAsync(class System.Windows.Media.Visual visual, class System.Printing.PrintTicket printTicket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Xps.XpsDocumentWriter.WriteAsync(System.Windows.Media.Visual,System.Printing.PrintTicket)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteAsync(System::Windows::Media::Visual ^ visual, System::Printing::PrintTicket ^ printTicket);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visual" Type="System.Windows.Media.Visual" />
        <Parameter Name="printTicket" Type="System.Printing.PrintTicket" />
      </Parameters>
      <Docs>
        <param name="visual">寫入的 <see cref="T:System.Windows.Media.Visual" />。</param>
        <param name="printTicket">
          <see cref="T:System.Printing.PrintTicket" />，代表文件的預設列印喜好設定。</param>
        <summary>以非同步方式將指定的 <see cref="T:System.Windows.Media.Visual" /> 連同 <see cref="T:System.Printing.PrintTicket" /> 一起寫入目標 <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> 或 <see cref="T:System.Printing.PrintQueue" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 為批次寫入<xref:System.Windows.Media.Visual>，使用<xref:System.Windows.Xps.VisualsToXpsDocument>。  
  
 這個方法不會驗證或修改指定`printTicket`特定<xref:System.Printing.PrintQueue>。 如果有必要，請使用<xref:System.Printing.PrintQueue.MergeAndValidatePrintTicket%2A>方法來建立<xref:System.Printing.PrintTicket>專屬於<xref:System.Printing.PrintQueue>和適用於指定的印表機。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public override void WriteAsync (System.Windows.Documents.DocumentPaginator documentPaginator, System.Printing.PrintTicket printTicket, object userSuppliedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteAsync(class System.Windows.Documents.DocumentPaginator documentPaginator, class System.Printing.PrintTicket printTicket, object userSuppliedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Xps.XpsDocumentWriter.WriteAsync(System.Windows.Documents.DocumentPaginator,System.Printing.PrintTicket,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteAsync(System::Windows::Documents::DocumentPaginator ^ documentPaginator, System::Printing::PrintTicket ^ printTicket, System::Object ^ userSuppliedState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentPaginator" Type="System.Windows.Documents.DocumentPaginator" />
        <Parameter Name="printTicket" Type="System.Printing.PrintTicket" />
        <Parameter Name="userSuppliedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="documentPaginator">包含取消來源素材編頁指標的物件，也包含素材編頁的方法。</param>
        <param name="printTicket">
          <see cref="T:System.Printing.PrintTicket" />，表示資料的預設列印偏好設定。</param>
        <param name="userSuppliedState">識別非同步作業以及與其相關聯的使用者指定物件。</param>
        <summary>以非同步方式，從指定的 <see cref="T:System.Windows.Documents.DocumentPaginator" /> 將分頁內容連同 <see cref="T:System.Printing.PrintTicket" /> 一起寫入目標 <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> 或 <see cref="T:System.Printing.PrintQueue" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法不會驗證或修改指定`printTicket`特定<xref:System.Printing.PrintQueue>。 如果有必要，請使用<xref:System.Printing.PrintQueue.MergeAndValidatePrintTicket%2A>方法來建立<xref:System.Printing.PrintTicket>專屬於<xref:System.Printing.PrintQueue>和適用於指定的印表機。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public override void WriteAsync (System.Windows.Documents.FixedDocument fixedDocument, System.Printing.PrintTicket printTicket, object userSuppliedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteAsync(class System.Windows.Documents.FixedDocument fixedDocument, class System.Printing.PrintTicket printTicket, object userSuppliedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Xps.XpsDocumentWriter.WriteAsync(System.Windows.Documents.FixedDocument,System.Printing.PrintTicket,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteAsync(System::Windows::Documents::FixedDocument ^ fixedDocument, System::Printing::PrintTicket ^ printTicket, System::Object ^ userSuppliedState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fixedDocument" Type="System.Windows.Documents.FixedDocument" />
        <Parameter Name="printTicket" Type="System.Printing.PrintTicket" />
        <Parameter Name="userSuppliedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="fixedDocument">寫入的文件。</param>
        <param name="printTicket">
          <see cref="T:System.Printing.PrintTicket" />，代表文件的預設列印喜好設定。</param>
        <param name="userSuppliedState">識別非同步作業以及與其相關聯的使用者指定物件。</param>
        <summary>以非同步方式將指定的 <see cref="T:System.Windows.Documents.FixedDocument" /> 連同 <see cref="T:System.Printing.PrintTicket" /> 一起寫入目標 <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> 或 <see cref="T:System.Printing.PrintQueue" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 雖然<xref:System.Windows.Xps.Packaging.XpsDocument>類別具有單數名稱，<xref:System.Windows.Xps.Packaging.XpsDocument>可以是其中一個<xref:System.Windows.Documents.FixedDocument>或一組多份文件。 這個方法會加入<xref:System.Windows.Documents.FixedDocument>集。  
  
 這個方法不會驗證或修改指定`printTicket`特定<xref:System.Printing.PrintQueue>。 如果有必要，請使用<xref:System.Printing.PrintQueue.MergeAndValidatePrintTicket%2A>方法來建立<xref:System.Printing.PrintTicket>專屬於<xref:System.Printing.PrintQueue>和適用於指定的印表機。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public override void WriteAsync (System.Windows.Documents.FixedDocumentSequence fixedDocumentSequence, System.Printing.PrintTicket printTicket, object userSuppliedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteAsync(class System.Windows.Documents.FixedDocumentSequence fixedDocumentSequence, class System.Printing.PrintTicket printTicket, object userSuppliedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Xps.XpsDocumentWriter.WriteAsync(System.Windows.Documents.FixedDocumentSequence,System.Printing.PrintTicket,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteAsync(System::Windows::Documents::FixedDocumentSequence ^ fixedDocumentSequence, System::Printing::PrintTicket ^ printTicket, System::Object ^ userSuppliedState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fixedDocumentSequence" Type="System.Windows.Documents.FixedDocumentSequence" />
        <Parameter Name="printTicket" Type="System.Printing.PrintTicket" />
        <Parameter Name="userSuppliedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="fixedDocumentSequence">要寫入的文件集。</param>
        <param name="printTicket">
          <see cref="T:System.Printing.PrintTicket" />，表示文件集的預設列印偏好設定。</param>
        <param name="userSuppliedState">識別非同步作業以及與其相關聯的使用者指定物件。</param>
        <summary>以非同步方式將指定的 <see cref="T:System.Windows.Documents.FixedDocumentSequence" /> 連同 <see cref="T:System.Printing.PrintTicket" /> 一起寫入目標 <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> 或 <see cref="T:System.Printing.PrintQueue" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Xps.XpsDocumentWriter.WriteAsync%2A> 以非同步方式寫入的文件集<xref:System.Windows.Xps.Packaging.XpsDocument>或<xref:System.Printing.PrintQueue>建立<xref:System.Windows.Xps.XpsDocumentWriter>。 寫入的資料包括<xref:System.Printing.PrintTicket>和呼叫端要傳遞至事件處理常式的其他資訊。  
  
 雖然<xref:System.Windows.Xps.Packaging.XpsDocument>類別具有單數名稱，<xref:System.Windows.Xps.Packaging.XpsDocument>可以是其中一個<xref:System.Windows.Documents.FixedDocument>或一組多份文件。 這個方法會加入<xref:System.Windows.Documents.FixedDocument>或一組<xref:System.Windows.Documents.FixedDocument>項目至現有的順序。  
  
 這個方法不會驗證或修改指定`printTicket`特定<xref:System.Printing.PrintQueue>。 如果有必要，請使用<xref:System.Printing.PrintQueue.MergeAndValidatePrintTicket%2A>方法來建立<xref:System.Printing.PrintTicket>專屬於<xref:System.Printing.PrintQueue>和適用於指定的印表機。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public override void WriteAsync (System.Windows.Documents.FixedPage fixedPage, System.Printing.PrintTicket printTicket, object userSuppliedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteAsync(class System.Windows.Documents.FixedPage fixedPage, class System.Printing.PrintTicket printTicket, object userSuppliedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Xps.XpsDocumentWriter.WriteAsync(System.Windows.Documents.FixedPage,System.Printing.PrintTicket,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteAsync(System::Windows::Documents::FixedPage ^ fixedPage, System::Printing::PrintTicket ^ printTicket, System::Object ^ userSuppliedState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fixedPage" Type="System.Windows.Documents.FixedPage" />
        <Parameter Name="printTicket" Type="System.Printing.PrintTicket" />
        <Parameter Name="userSuppliedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="fixedPage">寫入的頁面。</param>
        <param name="printTicket">A <see cref="T:System.Printing.PrintTicket" />，表示頁面的預設列印偏好設定。</param>
        <param name="userSuppliedState">識別非同步作業以及與其相關聯的使用者指定物件。</param>
        <summary>以非同步方式將指定的 <see cref="T:System.Windows.Documents.FixedPage" /> 連同 <see cref="T:System.Printing.PrintTicket" /> 一起寫入目標 <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> 或 <see cref="T:System.Printing.PrintQueue" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法不會驗證或修改指定`printTicket`特定<xref:System.Printing.PrintQueue>。 如果有必要，請使用<xref:System.Printing.PrintQueue.MergeAndValidatePrintTicket%2A>方法來建立<xref:System.Printing.PrintTicket>專屬於<xref:System.Printing.PrintQueue>和適用於指定的印表機。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public override void WriteAsync (System.Windows.Media.Visual visual, System.Printing.PrintTicket printTicket, object userSuppliedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteAsync(class System.Windows.Media.Visual visual, class System.Printing.PrintTicket printTicket, object userSuppliedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Xps.XpsDocumentWriter.WriteAsync(System.Windows.Media.Visual,System.Printing.PrintTicket,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteAsync(System::Windows::Media::Visual ^ visual, System::Printing::PrintTicket ^ printTicket, System::Object ^ userSuppliedState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visual" Type="System.Windows.Media.Visual" />
        <Parameter Name="printTicket" Type="System.Printing.PrintTicket" />
        <Parameter Name="userSuppliedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="visual">寫入的 <see cref="T:System.Windows.Media.Visual" />。</param>
        <param name="printTicket">
          <see cref="T:System.Printing.PrintTicket" />，代表文件的預設列印喜好設定。</param>
        <param name="userSuppliedState">識別非同步作業以及與其相關聯的使用者指定物件。</param>
        <summary>以非同步方式將指定的 <see cref="T:System.Windows.Media.Visual" /> 連同 <see cref="T:System.Printing.PrintTicket" /> 一起寫入目標 <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> 或 <see cref="T:System.Printing.PrintQueue" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 撰寫多個<xref:System.Windows.Media.Visual>項目，使用<xref:System.Windows.Xps.VisualsToXpsDocument>。  
  
 這個方法不會驗證或修改指定`printTicket`特定<xref:System.Printing.PrintQueue>。 如果有必要，請使用<xref:System.Printing.PrintQueue.MergeAndValidatePrintTicket%2A>方法來建立<xref:System.Printing.PrintTicket>專屬於<xref:System.Printing.PrintQueue>和適用於指定的印表機。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WritingCancelled">
      <MemberSignature Language="C#" Value="public override event System.Windows.Documents.Serialization.WritingCancelledEventHandler WritingCancelled;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Documents.Serialization.WritingCancelledEventHandler WritingCancelled" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Xps.XpsDocumentWriter.WritingCancelled" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Custom Event WritingCancelled As WritingCancelledEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override event System::Windows::Documents::Serialization::WritingCancelledEventHandler ^ WritingCancelled;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.Serialization.WritingCancelledEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於取消 <see cref="Overload:System.Windows.Xps.XpsDocumentWriter.Write" /> 或 <see cref="Overload:System.Windows.Xps.XpsDocumentWriter.WriteAsync" /> 作業時。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WritingCompleted">
      <MemberSignature Language="C#" Value="public override event System.Windows.Documents.Serialization.WritingCompletedEventHandler WritingCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Documents.Serialization.WritingCompletedEventHandler WritingCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Xps.XpsDocumentWriter.WritingCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Custom Event WritingCompleted As WritingCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override event System::Windows::Documents::Serialization::WritingCompletedEventHandler ^ WritingCompleted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.Serialization.WritingCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於寫入作業完成時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例顯示如何使用 <xref:System.Windows.Xps.XpsDocumentWriter.WritingCompleted> 事件。  
  
 [!code-csharp[XpsSave#WritingEvents](~/samples/snippets/csharp/VS_Snippets_Wpf/XpsSave/CSharp/XpsSaveHelper.cs#writingevents)]
 [!code-vb[XpsSave#WritingEvents](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XpsSave/visualbasic/xpssavehelper.vb#writingevents)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Xps.XpsDocumentWriter.raise_WritingCompleted(System.Object,System.Windows.Documents.Serialization.WritingCompletedEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="WritingPrintTicketRequired">
      <MemberSignature Language="C#" Value="public override event System.Windows.Documents.Serialization.WritingPrintTicketRequiredEventHandler WritingPrintTicketRequired;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Documents.Serialization.WritingPrintTicketRequiredEventHandler WritingPrintTicketRequired" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Xps.XpsDocumentWriter.WritingPrintTicketRequired" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Custom Event WritingPrintTicketRequired As WritingPrintTicketRequiredEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override event System::Windows::Documents::Serialization::WritingPrintTicketRequiredEventHandler ^ WritingPrintTicketRequired;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.Serialization.WritingPrintTicketRequiredEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在 <see cref="Overload:System.Windows.Xps.XpsDocumentWriter.Write" /> 或 <see cref="Overload:System.Windows.Xps.XpsDocumentWriter.WriteAsync" /> 方法將 <see cref="T:System.Printing.PrintTicket" /> 加入至文件或列印佇列之前發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Xps.XpsDocumentWriter.WritingPrintTicketRequired> 可讓事件處理常式以取代新<xref:System.Printing.PrintTicket>個傳遞給寫入作業。  
  
 下列四個<xref:System.Windows.Xps.XpsDocumentWriter.Write%2A>和<xref:System.Windows.Xps.XpsDocumentWriter.WriteAsync%2A>方法不會呼叫<xref:System.Windows.Xps.XpsDocumentWriter.WritingPrintTicketRequired>事件：  
  
-   <xref:System.Windows.Xps.XpsDocumentWriter.Write%2A>(String)  
  
-   <xref:System.Windows.Xps.XpsDocumentWriter.Write%2A>(String, XpsDocumentNotificationLevel)  
  
-   <xref:System.Windows.Xps.XpsDocumentWriter.WriteAsync%2A>(String)  
  
-   <xref:System.Windows.Xps.XpsDocumentWriter.WriteAsync%2A>(String, XpsDocumentNotificationLevel)  
  
   
  
## Examples  
 下列範例顯示如何使用 <xref:System.Windows.Xps.XpsDocumentWriter.WritingPrintTicketRequired> 事件。  
  
 [!code-csharp[XpsPrint#PrintMultipleFixedContentDocuments](~/samples/snippets/csharp/VS_Snippets_Wpf/XpsPrint/CSharp/XpsPrintHelper.cs#printmultiplefixedcontentdocuments)]
 [!code-vb[XpsPrint#PrintMultipleFixedContentDocuments](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XpsPrint/visualbasic/xpsprinthelper.vb#printmultiplefixedcontentdocuments)]  
  
 下列範例所建立的事件處理常式。  
  
 [!code-csharp[XpsPrint#MultipleFixedContentDocuments_WritingPrintTicketRequired](~/samples/snippets/csharp/VS_Snippets_Wpf/XpsPrint/CSharp/XpsPrintHelper.cs#multiplefixedcontentdocuments_writingprintticketrequired)]
 [!code-vb[XpsPrint#MultipleFixedContentDocuments_WritingPrintTicketRequired](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XpsPrint/visualbasic/xpsprinthelper.vb#multiplefixedcontentdocuments_writingprintticketrequired)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Xps.XpsDocumentWriter.raise_WritingPrintTicketRequired(System.Object,System.Windows.Documents.Serialization.WritingPrintTicketRequiredEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="WritingProgressChanged">
      <MemberSignature Language="C#" Value="public override event System.Windows.Documents.Serialization.WritingProgressChangedEventHandler WritingProgressChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Documents.Serialization.WritingProgressChangedEventHandler WritingProgressChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Xps.XpsDocumentWriter.WritingProgressChanged" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Custom Event WritingProgressChanged As WritingProgressChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override event System::Windows::Documents::Serialization::WritingProgressChangedEventHandler ^ WritingProgressChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.Serialization.WritingProgressChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於 <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> 更新進度時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例示範如何建立及使用<xref:System.Windows.Xps.XpsDocumentWriter.WritingProgressChanged>事件處理常式。  
  
 [!code-csharp[XpsSave#WritingEvents](~/samples/snippets/csharp/VS_Snippets_Wpf/XpsSave/CSharp/XpsSaveHelper.cs#writingevents)]
 [!code-vb[XpsSave#WritingEvents](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XpsSave/visualbasic/xpssavehelper.vb#writingevents)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Xps.XpsDocumentWriter.raise_WritingProgressChanged(System.Object,System.Windows.Documents.Serialization.WritingProgressChangedEventArgs)" />
      </Docs>
    </Member>
  </Members>
</Type>