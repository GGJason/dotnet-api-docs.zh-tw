<Type Name="GraphicsPathIterator" FullName="System.Drawing.Drawing2D.GraphicsPathIterator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="868cfafe7838293ffd89cde43221f26fa996840c" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30410152" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class GraphicsPathIterator : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit GraphicsPathIterator extends System.MarshalByRefObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.Drawing2D.GraphicsPathIterator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class GraphicsPathIterator&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class GraphicsPathIterator sealed : MarshalByRefObject, IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>提供在 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> 中逐一查看子路徑，並測試每個子路徑中含有之形狀類型的功能。 這個類別無法被繼承。</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GraphicsPathIterator (System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.#ctor(System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As GraphicsPath)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GraphicsPathIterator(System::Drawing::Drawing2D::GraphicsPath ^ path);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="path">用來初始化這個 Helper 類別的 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> 物件。</param>
        <summary>使用指定的 <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> 物件，初始化 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyData">
      <MemberSignature Language="C#" Value="public int CopyData (ref System.Drawing.PointF[] points, ref byte[] types, int startIndex, int endIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 CopyData(valuetype System.Drawing.PointF[]&amp; points, unsigned int8[]&amp; types, int32 startIndex, int32 endIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.CopyData(System.Drawing.PointF[]@,System.Byte[]@,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyData (ByRef points As PointF(), ByRef types As Byte(), startIndex As Integer, endIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CopyData(cli::array &lt;System::Drawing::PointF&gt; ^ % points, cli::array &lt;System::Byte&gt; ^ % types, int startIndex, int endIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="System.Drawing.PointF[]&amp;" RefType="ref" />
        <Parameter Name="types" Type="System.Byte[]&amp;" RefType="ref" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="endIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="points">在傳回時，含有 <see cref="T:System.Drawing.PointF" /> 結構的陣列，這個陣列表示路徑中的點。</param>
        <param name="types">在傳回時，含有位元組陣列，這個陣列表示路徑中的點型別。</param>
        <param name="startIndex">指定陣列的開始索引。</param>
        <param name="endIndex">指定陣列的結束索引。</param>
        <summary>將關聯的 <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints" /> 之 <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathTypes" /> 屬性和 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> 屬性陣列複製至這兩個指定的陣列。</summary>
        <returns>複製的點數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用`startIndex`和`endIndex`複製指定的路徑資料範圍的參數。  
  
   
  
## Examples  
 下列範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`、<xref:System.Windows.Forms.Form.OnPaint%2A>事件物件。 該程式碼執行下列動作：  
  
-   建立圖形路徑。  
  
-   填入多個基本和某些標記。  
  
-   列出在螢幕左邊的路徑資料。  
  
-   建立<xref:System.Drawing.Drawing2D.GraphicsPathIterator>並倒轉它。  
  
-   遞增第二個標記的路徑資料索引。  
  
-   呼叫<xref:System.Drawing.Drawing2D.GraphicsPathIterator.CopyData%2A>方法，以複製包含開始和結束之間的路徑資料點索引，而且型別陣列。  
  
-   列出此複製的資料在螢幕的右邊。  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#1)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Drawing2D.GraphicsPathIterator.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得路徑中的點數。</summary>
        <value>路徑中的點數。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>釋放這個 <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> 物件使用的所有資源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫`Dispose`允許所使用的資源<xref:System.Drawing.Drawing2D.GraphicsPathIterator>都重新配置用於其他用途的物件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Enumerate">
      <MemberSignature Language="C#" Value="public int Enumerate (ref System.Drawing.PointF[] points, ref byte[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Enumerate(valuetype System.Drawing.PointF[]&amp; points, unsigned int8[]&amp; types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.Enumerate(System.Drawing.PointF[]@,System.Byte[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Function Enumerate (ByRef points As PointF(), ByRef types As Byte()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Enumerate(cli::array &lt;System::Drawing::PointF&gt; ^ % points, cli::array &lt;System::Byte&gt; ^ % types);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="System.Drawing.PointF[]&amp;" RefType="ref" />
        <Parameter Name="types" Type="System.Byte[]&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="points">在傳回時，含有 <see cref="T:System.Drawing.PointF" /> 結構的陣列，這個陣列表示路徑中的點。</param>
        <param name="types">在傳回時，含有位元組陣列，這個陣列表示路徑中的點型別。</param>
        <summary>將關聯的 <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints" /> 之 <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathTypes" /> 屬性和 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> 屬性陣列複製至這兩個指定的陣列。</summary>
        <returns>複製的點數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`、<xref:System.Windows.Forms.Form.OnPaint%2A>事件物件。 該程式碼執行下列動作：  
  
-   建立圖形路徑。  
  
-   填入多個基本和某些標記。  
  
-   列出在螢幕左邊的路徑資料。  
  
-   建立<xref:System.Drawing.Drawing2D.GraphicsPathIterator>並倒轉它。  
  
-   遞增第二個標記的路徑資料索引。  
  
-   呼叫<xref:System.Drawing.Drawing2D.GraphicsPathIterator.Enumerate%2A>方法來將路徑資料複製到`points`和`types`陣列。  
  
-   列出此複製的資料在螢幕的右邊。  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#2)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~GraphicsPathIterator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!GraphicsPathIterator ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在記憶體回收開始前，允許物件嘗試釋放資源，並執行其他清除作業。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasCurve">
      <MemberSignature Language="C#" Value="public bool HasCurve ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasCurve() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve" />
      <MemberSignature Language="VB.NET" Value="Public Function HasCurve () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasCurve();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>指示與這個 <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> 關聯的路徑是否含有曲線。</summary>
        <returns>如果目前的子路徑含有曲線，則這個方法會傳回 <see langword="true" />，否則傳回 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在路徑中的所有曲線會都儲存為序列的貝茲曲線。 例如，當您新增橢圓形的路徑時，您指定左上角、 寬度和橢圓形之周框的高度。 這些數字 （左上角、 寬度和高度） 不會儲存在路徑中。相反地，省略符號會轉換成一連串的四個貝茲曲線。 路徑存放區之端點和那些貝茲曲線控制點。  
  
 路徑會存放的陣列的資料點，其中每一個都屬於一條線或貝茲曲線。 如果在陣列中的某些屬於貝茲曲線，然後<xref:System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve%2A>傳回`true`。 如果陣列中的所有點都屬於線條，然後<xref:System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve%2A>傳回`false`。  
  
 某些方法壓平合併的路徑，這表示在路徑中的所有曲線會都轉換成線條的序列。 路徑已經過扁平化之後，<xref:System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve%2A>一律會傳回`false`。 呼叫<xref:System.Drawing.Drawing2D.GraphicsPath.Flatten%2A>， <xref:System.Drawing.Drawing2D.GraphicsPath.Widen%2A>，或<xref:System.Drawing.Drawing2D.GraphicsPath.Warp%2A>方法<xref:System.Drawing.Drawing2D.GraphicsPath>類別將簡維路徑。  
  
   
  
## Examples  
 下列範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`、<xref:System.Windows.Forms.Form.OnPaint%2A>事件物件。 該程式碼執行下列動作：  
  
-   建立<xref:System.Drawing.Drawing2D.GraphicsPath>物件`myPath`。  
  
-   將三行、 矩形和橢圓形。  
  
-   建立<xref:System.Drawing.Drawing2D.GraphicsPathIterator>物件`myPath`。  
  
-   會測試目前的路徑`myPath`包含曲線。  
  
-   在訊息方塊會顯示測試的結果。  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#3)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="NextMarker">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將 Iterator 移至路徑中的下一個資料標記。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="NextMarker">
      <MemberSignature Language="C#" Value="public int NextMarker (System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NextMarker(class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberSignature Language="VB.NET" Value="Public Function NextMarker (path As GraphicsPath) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int NextMarker(System::Drawing::Drawing2D::GraphicsPath ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="path">點複製至的 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> 物件。</param>
        <summary>這個 <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> 具有與其相關聯的 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> 物件。 <see cref="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Drawing.Drawing2D.GraphicsPath)" /> 方法會將關聯的 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> 遞增至其路徑中的下一個資料標記，並將目前資料標記和下一個資料標記 (或路徑端點) 之間包含的所有點複製至傳入至參數的第二個 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> 物件。</summary>
        <returns>在這個資料標記和下一個資料標記之間的點數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Drawing.Drawing2D.GraphicsPath.SetMarkers%2A>方法來設定路徑中的標記。 標記可用來建立子路徑的群組。 一個或多個子可以是兩個資料標記之間。  
  
   
  
## Examples  
 下列範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`、<xref:System.Windows.Forms.Form.OnPaint%2A>事件物件。 該程式碼執行下列動作：  
  
-   建立 <xref:System.Drawing.Drawing2D.GraphicsPath> 物件。  
  
-   將三個線條、 矩形、 橢圓形及兩個標記。  
  
-   列出所有的路徑指向左側螢幕的值。  
  
-   建立 <xref:System.Drawing.Drawing2D.GraphicsPathIterator> 物件。  
  
-   建立<xref:System.Drawing.Drawing2D.GraphicsPath>物件`myPathSection`中接收複製的點。  
  
-   呼叫<xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A>方法，它會逐一查看至第一個標記並複製該標記與下的一個来包含的所有點`myPathSection`。  
  
-   傳回的點數複製到`markerPoints`。  
  
-   列出的標記數目 （第一個標記） 和它包含在螢幕的右側，即點數目。  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#4)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextMarker">
      <MemberSignature Language="C#" Value="public int NextMarker (out int startIndex, out int endIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NextMarker([out] int32&amp; startIndex, [out] int32&amp; endIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function NextMarker (ByRef startIndex As Integer, ByRef endIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int NextMarker([Runtime::InteropServices::Out] int % startIndex, [Runtime::InteropServices::Out] int % endIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="endIndex" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="startIndex">[out] 提供給這個參數的整數參考會接收開始子路徑的點索引。</param>
        <param name="endIndex">[out] 提供給這個參數的整數參考會接收結束 <c>startIndex</c> 所指向的子路徑之點索引。</param>
        <summary>將 <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> 遞增至路徑中的下一個資料標記，並經由 [out] 參數傳回開始和停止索引。</summary>
        <returns>在這個資料標記和下一個資料標記之間的點數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Drawing.Drawing2D.GraphicsPath.SetMarkers%2A>方法來設定路徑中的標記。 標記可用來建立子路徑的群組。 一個或多個子可以是兩個資料標記之間。  
  
   
  
## Examples  
 下列範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`、<xref:System.Windows.Forms.Form.OnPaint%2A>事件物件。 該程式碼執行下列動作：  
  
-   建立 <xref:System.Drawing.Drawing2D.GraphicsPath> 物件。  
  
-   將三行、 一個矩形和橢圓形 ¾ 標記之間。  
  
-   將點陣列的值繪製到螢幕。  
  
-   建立 <xref:System.Drawing.Drawing2D.GraphicsPathIterator> 物件。  
  
-   呼叫 <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A> 方法。  
  
-   使用從反覆呼叫所傳回的值<xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A>繪製開始和停止點，針對每個標記至螢幕。  
  
-   將點總數值繪製到螢幕。  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#5)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextPathType">
      <MemberSignature Language="C#" Value="public int NextPathType (out byte pathType, out int startIndex, out int endIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NextPathType([out] unsigned int8&amp; pathType, [out] int32&amp; startIndex, [out] int32&amp; endIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType(System.Byte@,System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function NextPathType (ByRef pathType As Byte, ByRef startIndex As Integer, ByRef endIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int NextPathType([Runtime::InteropServices::Out] System::Byte % pathType, [Runtime::InteropServices::Out] int % startIndex, [Runtime::InteropServices::Out] int % endIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pathType" Type="System.Byte&amp;" RefType="out" />
        <Parameter Name="startIndex" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="endIndex" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pathType">[out] 接收由群組中所有點共用的點類型。 可能的類型可從 <see cref="T:System.Drawing.Drawing2D.PathPointType" /> 列舉型別 (Enumeration) 擷取。</param>
        <param name="startIndex">[out] 接收點群組的開始索引。</param>
        <param name="endIndex">[out] 接收點群組的結束索引。</param>
        <summary>取得具有相同型別之資料點的下一個群組之開始索引和結束索引。</summary>
        <returns>這個方法會傳回群組中的資料點數。 如果路徑中沒有其他的群組，則這個方法會傳回 0。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`、<xref:System.Windows.Forms.Form.OnPaint%2A>事件物件。 該程式碼執行下列動作：  
  
-   建立 <xref:System.Drawing.Drawing2D.GraphicsPath> 物件。  
  
-   將三行、 矩形和橢圓形。  
  
-   列出所有點的左側螢幕的值。  
  
-   建立<xref:System.Drawing.Drawing2D.GraphicsPathIterator>並倒轉它。  
  
-   在`for`迴圈內，請重複使用的點<xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType%2A>和<xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType%2A>方法。  
  
-   列出子路徑的數字、 點，數目和螢幕的右側，即路徑點的類型會使用從反覆進行的呼叫傳回的值。  
  
-   顯示螢幕的點總數的值。  
  
 請注意，`ListPathPoints`是區隔大部分的 helper 函式 （並非全部） 的圖形路徑程式碼顯示程式碼。  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#6)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#6)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="NextSubpath">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將子路徑移至指定之 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> 中的下一個子路徑。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="NextSubpath">
      <MemberSignature Language="C#" Value="public int NextSubpath (System.Drawing.Drawing2D.GraphicsPath path, out bool isClosed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NextSubpath(class System.Drawing.Drawing2D.GraphicsPath path, [out] bool&amp; isClosed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Function NextSubpath (path As GraphicsPath, ByRef isClosed As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int NextSubpath(System::Drawing::Drawing2D::GraphicsPath ^ path, [Runtime::InteropServices::Out] bool % isClosed);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
        <Parameter Name="isClosed" Type="System.Boolean&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="path">
          <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />，將設定其資料點以符合這個 Iterator 之所擷取圖形 (子路徑) 的資料點。</param>
        <param name="isClosed">[out] 指示目前的子路徑是否關閉。 如果圖形是關閉的，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
        <summary>從這個 <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> 的相關路徑取得下一個圖形 (子路徑)。</summary>
        <returns>擷取的圖形 (子路徑) 中的資料點數。 如果沒有其他要擷取的圖形，則傳回零。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`、<xref:System.Windows.Forms.Form.OnPaint%2A>事件物件。 該程式碼執行下列動作：  
  
-   建立 <xref:System.Drawing.Drawing2D.GraphicsPath> 物件。  
  
-   將三個線條、 矩形、 橢圓形及兩個標記。  
  
-   列出所有的路徑指向左側螢幕的值。  
  
-   建立 <xref:System.Drawing.Drawing2D.GraphicsPathIterator> 物件。  
  
-   建立<xref:System.Drawing.Drawing2D.GraphicsPath>物件`myPathSection`中接收複製的點。  
  
-   呼叫<xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A>方法，它會逐一查看到第三個子路徑 （圖） 並複製到該子路徑中所包含的所有點`myPathSection`路徑，以及傳回的點數複製到`subpathPoints`。  
  
-   列出子路徑的數目和螢幕的右側，即包含的點數目。  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#7)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#7)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextSubpath">
      <MemberSignature Language="C#" Value="public int NextSubpath (out int startIndex, out int endIndex, out bool isClosed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NextSubpath([out] int32&amp; startIndex, [out] int32&amp; endIndex, [out] bool&amp; isClosed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(System.Int32@,System.Int32@,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Function NextSubpath (ByRef startIndex As Integer, ByRef endIndex As Integer, ByRef isClosed As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int NextSubpath([Runtime::InteropServices::Out] int % startIndex, [Runtime::InteropServices::Out] int % endIndex, [Runtime::InteropServices::Out] bool % isClosed);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="endIndex" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="isClosed" Type="System.Boolean&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="startIndex">[out] 接收下一個子路徑的開始索引。</param>
        <param name="endIndex">[out] 接收下一個子路徑的結束索引。</param>
        <param name="isClosed">[out] 指示子路徑是否關閉。</param>
        <summary>將 <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> 移至路徑中的下一個子路徑。 下一個子路徑的開始索引和結束索引包含在 [out] 參數中。</summary>
        <returns>在 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> 物件中的子路徑數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例設計用於搭配 Windows Form，且其需要<xref:System.Windows.Forms.PaintEventArgs> `e`、<xref:System.Windows.Forms.Form.OnPaint%2A>事件物件。 該程式碼執行下列動作：  
  
-   建立 <xref:System.Drawing.Drawing2D.GraphicsPath> 物件。  
  
-   將三行、 矩形和橢圓形。  
  
-   將點陣列的值繪製到螢幕。  
  
-   建立 <xref:System.Drawing.Drawing2D.GraphicsPathIterator> 物件。  
  
-   呼叫 <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A> 方法。  
  
-   使用從反覆呼叫所傳回的值<xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A>繪製開始和停止每個螢幕的子路徑的值。  
  
-   將子路徑的總數值繪製到螢幕。  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#8)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#8)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rewind">
      <MemberSignature Language="C#" Value="public void Rewind ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Rewind() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.Rewind" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rewind ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Rewind();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將這個 <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> 回轉至其相關路徑的開始。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 第一次呼叫<xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A>迭代器的方法，它會取得第一個圖形 （子路徑） 的迭代器的相關聯的路徑。 第二次，它會取得第二個圖形，依此類推。 當您呼叫<xref:System.Drawing.Drawing2D.GraphicsPathIterator.Rewind%2A>方法時，順序後，啟動，也就是您呼叫<xref:System.Drawing.Drawing2D.GraphicsPathIterator.Rewind%2A>，下次呼叫<xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A>取得路徑中的第一個圖形。 <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A>和<xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType%2A>方法有類似的行為。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SubpathCount">
      <MemberSignature Language="C#" Value="public int SubpathCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SubpathCount" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Drawing2D.GraphicsPathIterator.SubpathCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SubpathCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SubpathCount { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得路徑中的子路徑數。</summary>
        <value>路徑中的子路徑數。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>