<Type Name="SemaphoreSecurity" FullName="System.Security.AccessControl.SemaphoreSecurity">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="84c547789bd5907b052331368ba36af03e2fe08f" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SemaphoreSecurity : System.Security.AccessControl.NativeObjectSecurity" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SemaphoreSecurity extends System.Security.AccessControl.NativeObjectSecurity" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.SemaphoreSecurity" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SemaphoreSecurity&#xA;Inherits NativeObjectSecurity" />
  <TypeSignature Language="C++ CLI" Value="public ref class SemaphoreSecurity sealed : System::Security::AccessControl::NativeObjectSecurity" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.AccessControl.NativeObjectSecurity</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="7021f-101">表示具名號誌 (Semaphore) 的 Windows 存取控制安全性。</span>
      <span class="sxs-lookup">
        <span data-stu-id="7021f-101">Represents the Windows access control security for a named semaphore.</span>
      </span>
      <span data-ttu-id="7021f-102">這個類別無法被繼承。</span>
      <span class="sxs-lookup">
        <span data-stu-id="7021f-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7021f-103">A<xref:System.Security.AccessControl.SemaphoreSecurity>物件指定為具名的系統號誌的存取權限，也會指定如何稽核存取嘗試。</span><span class="sxs-lookup"><span data-stu-id="7021f-103">A <xref:System.Security.AccessControl.SemaphoreSecurity> object specifies access rights for a named system semaphore, and also specifies how access attempts are audited.</span></span> <span data-ttu-id="7021f-104">號誌的存取權限會由每個存取規則的規則，以表示<xref:System.Security.AccessControl.SemaphoreAccessRule>物件。</span><span class="sxs-lookup"><span data-stu-id="7021f-104">Access rights to the semaphore are expressed as rules, with each access rule represented by a <xref:System.Security.AccessControl.SemaphoreAccessRule> object.</span></span> <span data-ttu-id="7021f-105">每個稽核規則由<xref:System.Security.AccessControl.SemaphoreAuditRule>物件。</span><span class="sxs-lookup"><span data-stu-id="7021f-105">Each auditing rule is represented by a <xref:System.Security.AccessControl.SemaphoreAuditRule> object.</span></span>  
  
 <span data-ttu-id="7021f-106">這會反映基礎的 Windows 安全性系統，其中每個安全性實體物件都有最多一個判別存取控制清單 (DACL) 控制存取安全的物件，並最多一個系統存取控制清單 (SACL) 指定的權限稽核嘗試。</span><span class="sxs-lookup"><span data-stu-id="7021f-106">This mirrors the underlying Windows security system, in which each securable object has at most one discretionary access control list (DACL) that controls access to the secured object, and at most one system access control list (SACL) that specifies which access attempts are audited.</span></span> <span data-ttu-id="7021f-107">DACL，SACL 會排序清單的指定存取和稽核使用者和群組的存取控制項目 (ACE)。</span><span class="sxs-lookup"><span data-stu-id="7021f-107">The DACL and SACL are ordered lists of access control entries (ACE) that specify access and auditing for users and groups.</span></span> <span data-ttu-id="7021f-108">A<xref:System.Security.AccessControl.SemaphoreAccessRule>或<xref:System.Security.AccessControl.SemaphoreAuditRule>物件可能代表一個以上的 ACE。</span><span class="sxs-lookup"><span data-stu-id="7021f-108">A <xref:System.Security.AccessControl.SemaphoreAccessRule> or <xref:System.Security.AccessControl.SemaphoreAuditRule> object might represent more than one ACE.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7021f-109">A<xref:System.Threading.Semaphore>物件可代表區域號誌或具名的系統號誌。</span><span class="sxs-lookup"><span data-stu-id="7021f-109">A <xref:System.Threading.Semaphore> object can represent a local semaphore or a named system semaphore.</span></span> <span data-ttu-id="7021f-110">Windows 存取控制安全性是有意義，只會針對具名的系統號誌。</span><span class="sxs-lookup"><span data-stu-id="7021f-110">Windows access control security is meaningful only for named system semaphores.</span></span>  
  
 <span data-ttu-id="7021f-111"><xref:System.Security.AccessControl.SemaphoreSecurity>， <xref:System.Security.AccessControl.SemaphoreAccessRule>，和<xref:System.Security.AccessControl.SemaphoreAuditRule>類別隱藏 Acl 和 Ace 的實作詳細資料。</span><span class="sxs-lookup"><span data-stu-id="7021f-111">The <xref:System.Security.AccessControl.SemaphoreSecurity>, <xref:System.Security.AccessControl.SemaphoreAccessRule>, and <xref:System.Security.AccessControl.SemaphoreAuditRule> classes hide the implementation details of ACLs and ACEs.</span></span> <span data-ttu-id="7021f-112">它們可讓您忽略十七不同的 ACE 類型，並正確地維護繼承和存取權限傳播的複雜性。</span><span class="sxs-lookup"><span data-stu-id="7021f-112">They allow you to ignore the seventeen different ACE types and the complexity of correctly maintaining inheritance and propagation of access rights.</span></span> <span data-ttu-id="7021f-113">這些物件也會設計是為了避免下列常見的存取控制項錯誤：</span><span class="sxs-lookup"><span data-stu-id="7021f-113">These objects are also designed to prevent the following common access control errors:</span></span>  
  
-   <span data-ttu-id="7021f-114">建立與 null 的 DACL 的安全性描述元。</span><span class="sxs-lookup"><span data-stu-id="7021f-114">Creating a security descriptor with a null DACL.</span></span> <span data-ttu-id="7021f-115">DACL 的 null 參考可讓任何使用者新增到物件，也有可能產生的阻絕服務攻擊的存取規則。</span><span class="sxs-lookup"><span data-stu-id="7021f-115">A null reference to a DACL allows any user to add access rules to an object, potentially creating a denial-of-service attack.</span></span> <span data-ttu-id="7021f-116">新<xref:System.Security.AccessControl.SemaphoreSecurity>物件永遠會以空的 DACL，它會拒絕所有使用者的所有存取啟動。</span><span class="sxs-lookup"><span data-stu-id="7021f-116">A new <xref:System.Security.AccessControl.SemaphoreSecurity> object always starts with an empty DACL, which denies all access for all users.</span></span>  
  
-   <span data-ttu-id="7021f-117">違反 Ace 的標準順序。</span><span class="sxs-lookup"><span data-stu-id="7021f-117">Violating the canonical ordering of ACEs.</span></span> <span data-ttu-id="7021f-118">如果 DACL 中的 ACE 清單不會保持在標準順序，使用者可能會不小心指定存取受保護的物件。</span><span class="sxs-lookup"><span data-stu-id="7021f-118">If the ACE list in the DACL is not kept in the canonical order, users might inadvertently be given access to the secured object.</span></span> <span data-ttu-id="7021f-119">比方說，拒絕的存取權限必須永遠出現之前允許的存取權限。</span><span class="sxs-lookup"><span data-stu-id="7021f-119">For example, denied access rights must always appear before allowed access rights.</span></span> <span data-ttu-id="7021f-120"><xref:System.Security.AccessControl.SemaphoreSecurity> 物件會在內部維護正確的順序。</span><span class="sxs-lookup"><span data-stu-id="7021f-120"><xref:System.Security.AccessControl.SemaphoreSecurity> objects maintain the correct order internally.</span></span>  
  
-   <span data-ttu-id="7021f-121">管理安全性描述元旗標，它應該只資源管理員的控制下。</span><span class="sxs-lookup"><span data-stu-id="7021f-121">Manipulating security descriptor flags, which should be under resource manager control only.</span></span>  
  
-   <span data-ttu-id="7021f-122">建立無效的 ACE 旗標組合。</span><span class="sxs-lookup"><span data-stu-id="7021f-122">Creating invalid combinations of ACE flags.</span></span>  
  
-   <span data-ttu-id="7021f-123">管理繼承的 Ace。</span><span class="sxs-lookup"><span data-stu-id="7021f-123">Manipulating inherited ACEs.</span></span> <span data-ttu-id="7021f-124">繼承和傳用是由資源管理員，以回應變更您對存取和稽核規則處理。</span><span class="sxs-lookup"><span data-stu-id="7021f-124">Inheritance and propagation are handled by the resource manager, in response to changes you make to access and audit rules.</span></span>  
  
-   <span data-ttu-id="7021f-125">插入 Acl 無意義的 Ace。</span><span class="sxs-lookup"><span data-stu-id="7021f-125">Inserting meaningless ACEs into ACLs.</span></span>  
  
 <span data-ttu-id="7021f-126">不支援.NET 安全性物件的唯一功能是危險的活動，應避免大部分的應用程式開發人員，如下所示：</span><span class="sxs-lookup"><span data-stu-id="7021f-126">The only capabilities not supported by the .NET security objects are dangerous activities that should be avoided by the majority of application developers, such as the following:</span></span>  
  
-   <span data-ttu-id="7021f-127">通常由資源管理員執行的低階工作。</span><span class="sxs-lookup"><span data-stu-id="7021f-127">Low-level tasks that are normally performed by the resource manager.</span></span>  
  
-   <span data-ttu-id="7021f-128">加入或移除存取控制項目不會維護標準順序的方式。</span><span class="sxs-lookup"><span data-stu-id="7021f-128">Adding or removing access control entries in ways that do not maintain the canonical ordering.</span></span>  
  
 <span data-ttu-id="7021f-129">若要修改 Windows 具名號誌的存取控制安全性，請使用<xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType>方法來取得<xref:System.Security.AccessControl.SemaphoreSecurity>物件。</span><span class="sxs-lookup"><span data-stu-id="7021f-129">To modify Windows access control security for a named semaphore, use the <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType> method to get the <xref:System.Security.AccessControl.SemaphoreSecurity> object.</span></span> <span data-ttu-id="7021f-130">加入和移除規則，來修改安全性物件，然後使用<xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType>方法來重新附加它。</span><span class="sxs-lookup"><span data-stu-id="7021f-130">Modify the security object by adding and removing rules, and then use the <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType> method to reattach it.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7021f-131">您所做的變更<xref:System.Security.AccessControl.SemaphoreSecurity>物件不會影響具名號誌的存取層級直到您呼叫<xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType>將更改的安全性物件指派給具名號誌方法。</span><span class="sxs-lookup"><span data-stu-id="7021f-131">Changes you make to a <xref:System.Security.AccessControl.SemaphoreSecurity> object do not affect the access levels of the named semaphore until you call the <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType> method to assign the altered security object to the named semaphore.</span></span>  
  
 <span data-ttu-id="7021f-132">若要從一個號誌的存取控制安全性複製到另一個中，使用<xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType>方法來取得<xref:System.Security.AccessControl.SemaphoreSecurity>表示第一個號誌的存取和稽核規則的物件，然後使用<xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType>方法或接受的建構函式<xref:System.Security.AccessControl.SemaphoreSecurity>物件，這些規則將第二個號誌。</span><span class="sxs-lookup"><span data-stu-id="7021f-132">To copy access control security from one semaphore to another, use the <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType> method to get a <xref:System.Security.AccessControl.SemaphoreSecurity> object representing the access and audit rules for the first semaphore, then use the <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType> method, or a constructor that accepts a <xref:System.Security.AccessControl.SemaphoreSecurity> object, to assign those rules to the second semaphore.</span></span>  
  
 <span data-ttu-id="7021f-133">中的安全性描述元定義語言 (SDDL) 投資的使用者可以使用<xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A>方法，以設定具名號誌的存取規則和<xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A>方法，以取得字串，代表 SDDL 格式中的存取規則。</span><span class="sxs-lookup"><span data-stu-id="7021f-133">Users with an investment in the security descriptor definition language (SDDL) can use the <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A> method to set access rules for a named semaphore, and the <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A> method to obtain a string that represents the access rules in SDDL format.</span></span> <span data-ttu-id="7021f-134">建議您不要開發新項目。</span><span class="sxs-lookup"><span data-stu-id="7021f-134">This is not recommended for new development.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7021f-135">Windows 98 或 Windows Millennium Edition 不支援同步處理物件的安全性。</span><span class="sxs-lookup"><span data-stu-id="7021f-135">Security on synchronization objects is not supported for Windows 98 or Windows Millennium Edition.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7021f-136">下列程式碼範例示範之間的分離<xref:System.Security.AccessControl.AccessControlType.Allow>規則和<xref:System.Security.AccessControl.AccessControlType.Deny>規則，並顯示相容的規則中的權限的組合。</span><span class="sxs-lookup"><span data-stu-id="7021f-136">The following code example demonstrates the separation between <xref:System.Security.AccessControl.AccessControlType.Allow> rules and <xref:System.Security.AccessControl.AccessControlType.Deny> rules, and shows the combination of rights in compatible rules.</span></span> <span data-ttu-id="7021f-137">此範例會建立<xref:System.Security.AccessControl.SemaphoreSecurity>物件、 將規則，允許和拒絕各種權限目前的使用者，並顯示規則的結果組。</span><span class="sxs-lookup"><span data-stu-id="7021f-137">The example creates a <xref:System.Security.AccessControl.SemaphoreSecurity> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules.</span></span> <span data-ttu-id="7021f-138">此範例會允許新的權限為目前的使用者，並顯示結果，顯示新的權限，系統會合併與現有<xref:System.Security.AccessControl.AccessControlType.Allow>規則。</span><span class="sxs-lookup"><span data-stu-id="7021f-138">The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType.Allow> rule.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7021f-139">此範例不會附加安全性物件至<xref:System.Threading.Semaphore>物件。</span><span class="sxs-lookup"><span data-stu-id="7021f-139">This example does not attach the security object to a <xref:System.Threading.Semaphore> object.</span></span> <span data-ttu-id="7021f-140">中可以找到附加安全性物件的範例<xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType>和<xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="7021f-140">Examples that attach security objects can be found in <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType> and <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Security.AccessControl.SemaphoreAccessRule" />
    <altmember cref="T:System.Security.AccessControl.SemaphoreAuditRule" />
    <altmember cref="T:System.Security.AccessControl.SemaphoreRights" />
    <altmember cref="M:System.Threading.Semaphore.GetAccessControl" />
    <altmember cref="M:System.Threading.Semaphore.SetAccessControl(System.Security.AccessControl.SemaphoreSecurity)" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7021f-141">初始化 <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-141">Initializes a new instance of the <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemaphoreSecurity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemaphoreSecurity();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7021f-142">使用預設值，初始化 <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-142">Initializes a new instance of the <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> class with default values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7021f-143">新<xref:System.Security.AccessControl.SemaphoreSecurity>物件一律開頭空白的判別存取清單 (DACL)，它會拒絕所有使用者的所有存取。</span><span class="sxs-lookup"><span data-stu-id="7021f-143">A new <xref:System.Security.AccessControl.SemaphoreSecurity> object always starts with an empty discretionary access list (DACL), which denies all access for all users.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="7021f-144">Windows 98 或 Windows Millennium Edition 上不支援這個類別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-144">This class is not supported on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemaphoreSecurity (string name, System.Security.AccessControl.AccessControlSections includeSections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, valuetype System.Security.AccessControl.AccessControlSections includeSections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.#ctor(System.String,System.Security.AccessControl.AccessControlSections)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, includeSections As AccessControlSections)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemaphoreSecurity(System::String ^ name, System::Security::AccessControl::AccessControlSections includeSections);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="includeSections" Type="System.Security.AccessControl.AccessControlSections" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="7021f-145">要擷取其存取控制安全性規則的系統號誌名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-145">The name of the system semaphore whose access control security rules are to be retrieved.</span>
          </span>
        </param>
        <param name="includeSections">
          <span data-ttu-id="7021f-146">
            <see cref="T:System.Security.AccessControl.AccessControlSections" /> 旗標的組合，指定要擷取的區段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-146">A combination of <see cref="T:System.Security.AccessControl.AccessControlSections" /> flags specifying the sections to retrieve.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7021f-147">從具有指定名稱的系統號誌，使用指定的存取控制安全性規則區段，初始化 <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-147">Initializes a new instance of the <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> class with the specified sections of the access control security rules from the system semaphore with the specified name.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7021f-148">這個建構函式可讓您取得具名的系統號誌的存取控制安全性，而不會先建立<xref:System.Threading.Semaphore>物件。</span><span class="sxs-lookup"><span data-stu-id="7021f-148">This constructor allows you to obtain the access control security for a named system semaphore without first creating a <xref:System.Threading.Semaphore> object.</span></span>  
  
 <span data-ttu-id="7021f-149">使用具名的系統物件時請務必小心。</span><span class="sxs-lookup"><span data-stu-id="7021f-149">Caution must be exercised when working with named system objects.</span></span> <span data-ttu-id="7021f-150">如果是名為系統物件`name`無法信號，可能會擷取其存取控制安全性。</span><span class="sxs-lookup"><span data-stu-id="7021f-150">If there is a system object named `name` that is not a semaphore, its control access security might be retrieved.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="7021f-151">Windows 98 或 Windows Millennium Edition 上不支援這個類別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-151">This class is not supported on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AccessRightType">
      <MemberSignature Language="C#" Value="public override Type AccessRightType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AccessRightType" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.SemaphoreSecurity.AccessRightType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AccessRightType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ AccessRightType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7021f-152">取得 <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> 類別用來表示存取權限的列舉型別 (Enumeration)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-152">Gets the enumeration that the <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> class uses to represent access rights.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7021f-153">
            <see cref="T:System.Type" /> 物件，表示 <see cref="T:System.Security.AccessControl.SemaphoreRights" /> 列舉型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-153">A <see cref="T:System.Type" /> object representing the <see cref="T:System.Security.AccessControl.SemaphoreRights" /> enumeration.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7021f-154">類別衍生自<xref:System.Security.AccessControl.ObjectSecurity>類別覆寫<xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A>屬性，並傳回它們以表示的存取權限的類型。</span><span class="sxs-lookup"><span data-stu-id="7021f-154">Classes that derive from the <xref:System.Security.AccessControl.ObjectSecurity> class override the <xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A> property and return the type they use to represent access rights.</span></span> <span data-ttu-id="7021f-155">當您使用陣列或包含多個類型的安全性物件的集合時，使用這個屬性來判斷要用於每個安全性物件的正確的列舉類型。</span><span class="sxs-lookup"><span data-stu-id="7021f-155">When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct enumeration type to use with each security object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessRuleFactory">
      <MemberSignature Language="C#" Value="public override System.Security.AccessControl.AccessRule AccessRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.AccessControl.AccessRule AccessRuleFactory(class System.Security.Principal.IdentityReference identityReference, int32 accessMask, bool isInherited, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::AccessControl::AccessRule ^ AccessRuleFactory(System::Security::Principal::IdentityReference ^ identityReference, int accessMask, bool isInherited, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AccessControlType type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.AccessRule</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identityReference" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="accessMask" Type="System.Int32" />
        <Parameter Name="isInherited" Type="System.Boolean" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identityReference">
          <span data-ttu-id="7021f-156">
            <see cref="T:System.Security.Principal.IdentityReference" />，可識別套用這個規則的使用者或群組。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-156">An <see cref="T:System.Security.Principal.IdentityReference" /> that identifies the user or group the rule applies to.</span>
          </span>
        </param>
        <param name="accessMask">
          <span data-ttu-id="7021f-157">
            <see cref="T:System.Security.AccessControl.SemaphoreRights" /> 值的位元組合，指定允許或拒絕的存取權限 (轉型成整數)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-157">A bitwise combination of <see cref="T:System.Security.AccessControl.SemaphoreRights" /> values specifying the access rights to allow or deny, cast to an integer.</span>
          </span>
        </param>
        <param name="isInherited">
          <span data-ttu-id="7021f-158">對於具名號誌沒有意義，因為它們沒有階層架構。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-158">Meaningless for named semaphores, because they have no hierarchy.</span>
          </span>
        </param>
        <param name="inheritanceFlags">
          <span data-ttu-id="7021f-159">對於具名號誌沒有意義，因為它們沒有階層架構。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-159">Meaningless for named semaphores, because they have no hierarchy.</span>
          </span>
        </param>
        <param name="propagationFlags">
          <span data-ttu-id="7021f-160">對於具名號誌沒有意義，因為它們沒有階層架構。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-160">Meaningless for named semaphores, because they have no hierarchy.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="7021f-161">其中一個 <see cref="T:System.Security.AccessControl.AccessControlType" /> 值，指定允許還是拒絕權限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-161">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> values specifying whether the rights are allowed or denied.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7021f-162">以指定的存取權限、存取控制和旗標，為指定的使用者建立新的存取控制規則。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-162">Creates a new access control rule for the specified user, with the specified access rights, access control, and flags.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7021f-163">
            <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" /> 物件，表示指定之使用者的指定權限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-163">A <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" /> object representing the specified rights for the specified user.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7021f-164">建立存取控制規則的建議的方式是使用的建構函式<xref:System.Security.AccessControl.SemaphoreAccessRule>類別。</span><span class="sxs-lookup"><span data-stu-id="7021f-164">The recommended way to create access control rules is to use the constructors of the <xref:System.Security.AccessControl.SemaphoreAccessRule> class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7021f-165">雖然繼承和傳播旗標是無意義的具名號誌，就仍然可以指定這是不建議使用，因為它不必要地變得非常複雜的維護的規則，例如藉由干擾規則組合否則，將相容。</span><span class="sxs-lookup"><span data-stu-id="7021f-165">Although inheritance and propagation flags are meaningless for named semaphores, it is still possible to specify them This is not recommended, because it needlessly complicates the maintenance of rules, for example by interfering with the combination of rules that would otherwise be compatible.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7021f-166">
            <paramref name="accessMask" />、<paramref name="inheritanceFlags" />、<paramref name="propagationFlags" /> 或 <paramref name="type" /> 會指定無效的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-166">
              <paramref name="accessMask" />, <paramref name="inheritanceFlags" />, <paramref name="propagationFlags" />, or <paramref name="type" /> specifies an invalid value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7021f-167">
            <paramref name="identityReference" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-167">
              <paramref name="identityReference" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="7021f-168">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-168">-or-</span>
          </span>
          <span data-ttu-id="7021f-169">
            <paramref name="accessMask" /> 為零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-169">
              <paramref name="accessMask" /> is zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7021f-170">
            <paramref name="identityReference" /> 既不是 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 型別，也不是可以轉換成 <see cref="T:System.Security.Principal.NTAccount" /> 型別的型別 (例如 <see cref="T:System.Security.Principal.SecurityIdentifier" />)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-170">
              <paramref name="identityReference" /> is neither of type <see cref="T:System.Security.Principal.SecurityIdentifier" />, nor of a type such as <see cref="T:System.Security.Principal.NTAccount" /> that can be converted to type <see cref="T:System.Security.Principal.SecurityIdentifier" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AccessRuleType">
      <MemberSignature Language="C#" Value="public override Type AccessRuleType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AccessRuleType" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.SemaphoreSecurity.AccessRuleType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AccessRuleType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ AccessRuleType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7021f-171">取得 <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> 類別用來表示存取規則的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-171">Gets the type that the <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> class uses to represent access rules.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7021f-172">
            <see cref="T:System.Type" /> 物件，表示 <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" /> 類別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-172">A <see cref="T:System.Type" /> object representing the <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" /> class.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7021f-173">類別衍生自<xref:System.Security.AccessControl.ObjectSecurity>類別覆寫<xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A>屬性，並傳回它們以表示存取規則的類型。</span><span class="sxs-lookup"><span data-stu-id="7021f-173">Classes that derive from the <xref:System.Security.AccessControl.ObjectSecurity> class override the <xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A> property and return the type they use to represent access rules.</span></span> <span data-ttu-id="7021f-174">當您使用陣列或包含多個類型的安全性物件的集合時，使用這個屬性來判斷用於每個安全性物件的正確的存取規則類型。</span><span class="sxs-lookup"><span data-stu-id="7021f-174">When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct access rule type to use with each security object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAccessRule">
      <MemberSignature Language="C#" Value="public void AddAccessRule (System.Security.AccessControl.SemaphoreAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAccessRule(class System.Security.AccessControl.SemaphoreAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.AddAccessRule(System.Security.AccessControl.SemaphoreAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAccessRule (rule As SemaphoreAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAccessRule(System::Security::AccessControl::SemaphoreAccessRule ^ rule);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.SemaphoreAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">
          <span data-ttu-id="7021f-175">要加入的存取控制規則。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-175">The access control rule to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7021f-176">搜尋可合併新規則的相符規則。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-176">Searches for a matching rule with which the new rule can be merged.</span>
          </span>
          <span data-ttu-id="7021f-177">如果找不到，就加入新規則。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-177">If none are found, adds the new rule.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7021f-178"><xref:System.Security.AccessControl.SemaphoreSecurity.AddAccessRule%2A>方法會搜尋具有相同的使用者或群組及相同的規則<xref:System.Security.AccessControl.AccessControlType>為`rule`。</span><span class="sxs-lookup"><span data-stu-id="7021f-178">The <xref:System.Security.AccessControl.SemaphoreSecurity.AddAccessRule%2A> method searches for rules with the same user or group and the same <xref:System.Security.AccessControl.AccessControlType> as `rule`.</span></span> <span data-ttu-id="7021f-179">如果找不到，`rule`加入。</span><span class="sxs-lookup"><span data-stu-id="7021f-179">If none are found, `rule` is added.</span></span> <span data-ttu-id="7021f-180">如果找到相符的規則是中的權限`rule`會合併與現有的規則。</span><span class="sxs-lookup"><span data-stu-id="7021f-180">If a matching rule is found, the rights in `rule` are merged with the existing rule.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7021f-181">下列程式碼範例示範之間的分離<xref:System.Security.AccessControl.AccessControlType.Allow>規則和<xref:System.Security.AccessControl.AccessControlType.Deny>規則，並顯示相容的規則中的權限的組合。</span><span class="sxs-lookup"><span data-stu-id="7021f-181">The following code example demonstrates the separation between <xref:System.Security.AccessControl.AccessControlType.Allow> rules and <xref:System.Security.AccessControl.AccessControlType.Deny> rules, and shows the combination of rights in compatible rules.</span></span> <span data-ttu-id="7021f-182">此範例會建立<xref:System.Security.AccessControl.SemaphoreSecurity>物件、 將規則，允許和拒絕各種權限目前的使用者，並顯示規則的結果組。</span><span class="sxs-lookup"><span data-stu-id="7021f-182">The example creates a <xref:System.Security.AccessControl.SemaphoreSecurity> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules.</span></span> <span data-ttu-id="7021f-183">此範例會允許新的權限為目前的使用者，並顯示結果，顯示新的權限，系統會合併與現有<xref:System.Security.AccessControl.AccessControlType.Allow>規則。</span><span class="sxs-lookup"><span data-stu-id="7021f-183">The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType.Allow> rule.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7021f-184">此範例不會附加安全性物件至<xref:System.Threading.Semaphore>物件。</span><span class="sxs-lookup"><span data-stu-id="7021f-184">This example does not attach the security object to a <xref:System.Threading.Semaphore> object.</span></span> <span data-ttu-id="7021f-185">中可以找到附加安全性物件的範例<xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType>和<xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="7021f-185">Examples that attach security objects can be found in <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType> and <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7021f-186">
            <paramref name="rule" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-186">
              <paramref name="rule" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AddAuditRule">
      <MemberSignature Language="C#" Value="public void AddAuditRule (System.Security.AccessControl.SemaphoreAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAuditRule(class System.Security.AccessControl.SemaphoreAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.AddAuditRule(System.Security.AccessControl.SemaphoreAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAuditRule (rule As SemaphoreAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAuditRule(System::Security::AccessControl::SemaphoreAuditRule ^ rule);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.SemaphoreAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">
          <span data-ttu-id="7021f-187">要加入的稽核規則。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-187">The audit rule to add.</span>
          </span>
          <span data-ttu-id="7021f-188">這個規則指定的使用者會決定搜尋方式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-188">The user specified by this rule determines the search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7021f-189">搜尋可合併新規則的稽核規則。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-189">Searches for an audit rule with which the new rule can be merged.</span>
          </span>
          <span data-ttu-id="7021f-190">如果找不到，就加入新規則。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-190">If none are found, adds the new rule.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7021f-191"><xref:System.Security.AccessControl.SemaphoreSecurity.AddAuditRule%2A>方法具有相同的使用者或群組做為規則會搜尋`rule`。</span><span class="sxs-lookup"><span data-stu-id="7021f-191">The <xref:System.Security.AccessControl.SemaphoreSecurity.AddAuditRule%2A> method searches for rules with the same user or group as `rule`.</span></span> <span data-ttu-id="7021f-192">如果找不到，`rule`加入。</span><span class="sxs-lookup"><span data-stu-id="7021f-192">If none are found, `rule` is added.</span></span> <span data-ttu-id="7021f-193">如果找到相符的規則是中的旗標`rule`會合併到現有的規則。</span><span class="sxs-lookup"><span data-stu-id="7021f-193">If a matching rule is found, the flags in `rule` are merged into the existing rule.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AuditRuleFactory">
      <MemberSignature Language="C#" Value="public override System.Security.AccessControl.AuditRule AuditRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.AccessControl.AuditRule AuditRuleFactory(class System.Security.Principal.IdentityReference identityReference, int32 accessMask, bool isInherited, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AuditFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::AccessControl::AuditRule ^ AuditRuleFactory(System::Security::Principal::IdentityReference ^ identityReference, int accessMask, bool isInherited, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AuditFlags flags);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.AuditRule</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identityReference" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="accessMask" Type="System.Int32" />
        <Parameter Name="isInherited" Type="System.Boolean" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="flags" Type="System.Security.AccessControl.AuditFlags" />
      </Parameters>
      <Docs>
        <param name="identityReference">
          <span data-ttu-id="7021f-194">
            <see cref="T:System.Security.Principal.IdentityReference" />，可識別套用這個規則的使用者或群組。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-194">An <see cref="T:System.Security.Principal.IdentityReference" /> that identifies the user or group the rule applies to.</span>
          </span>
        </param>
        <param name="accessMask">
          <span data-ttu-id="7021f-195">
            <see cref="T:System.Security.AccessControl.SemaphoreRights" /> 值的位元組合，指定要稽核的存取權限 (轉型成整數)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-195">A bitwise combination of <see cref="T:System.Security.AccessControl.SemaphoreRights" /> values specifying the access rights to audit, cast to an integer.</span>
          </span>
        </param>
        <param name="isInherited">
          <span data-ttu-id="7021f-196">命名為等候控制代碼是沒有意義的，因為它們並未具有階層架構。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-196">Meaningless for named wait handles, because they have no hierarchy.</span>
          </span>
        </param>
        <param name="inheritanceFlags">
          <span data-ttu-id="7021f-197">命名為等候控制代碼是沒有意義的，因為它們並未具有階層架構。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-197">Meaningless for named wait handles, because they have no hierarchy.</span>
          </span>
        </param>
        <param name="propagationFlags">
          <span data-ttu-id="7021f-198">命名為等候控制代碼是沒有意義的，因為它們並未具有階層架構。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-198">Meaningless for named wait handles, because they have no hierarchy.</span>
          </span>
        </param>
        <param name="flags">
          <span data-ttu-id="7021f-199">
            <see cref="T:System.Security.AccessControl.AuditFlags" /> 值的位元組合，指定是否要稽核成功存取、失敗存取或兩者皆稽核。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-199">A bitwise combination of <see cref="T:System.Security.AccessControl.AuditFlags" /> values that specify whether to audit successful access, failed access, or both.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7021f-200">以指定要套用規則的使用者的方式，建立新的稽核規則、要稽核的存取權限以及觸發該稽核規則的結果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-200">Creates a new audit rule, specifying the user the rule applies to, the access rights to audit, and the outcome that triggers the audit rule.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7021f-201">
            <see cref="T:System.Security.AccessControl.SemaphoreAuditRule" /> 物件，表示指定之使用者的指定稽核規則。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-201">A <see cref="T:System.Security.AccessControl.SemaphoreAuditRule" /> object representing the specified audit rule for the specified user.</span>
          </span>
          <span data-ttu-id="7021f-202">此方法的傳回型別為基底類別 <see cref="T:System.Security.AccessControl.AuditRule" />，但是傳回值可以安全地轉型為衍生類別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-202">The return type of the method is the base class, <see cref="T:System.Security.AccessControl.AuditRule" />, but the return value can be cast safely to the derived class.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7021f-203">若要建立的稽核規則的建議的方式是使用的建構函式<xref:System.Security.AccessControl.SemaphoreAuditRule>類別。</span><span class="sxs-lookup"><span data-stu-id="7021f-203">The recommended way to create audit rules is to use the constructors of the <xref:System.Security.AccessControl.SemaphoreAuditRule> class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7021f-204">雖然繼承和傳播旗標是無意義的具名號誌，就仍然可以指定它們。</span><span class="sxs-lookup"><span data-stu-id="7021f-204">Although inheritance and propagation flags are meaningless for named semaphores, it is still possible to specify them.</span></span> <span data-ttu-id="7021f-205">這不是建議，因為它不必要地變得非常複雜的維護的規則，例如藉由干擾原本是相容的規則的組合。</span><span class="sxs-lookup"><span data-stu-id="7021f-205">This is not recommended, because it needlessly complicates the maintenance of rules, for example by interfering with the combination of rules that would otherwise be compatible.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7021f-206">
            <paramref name="accessMask" />、<paramref name="inheritanceFlags" />、<paramref name="propagationFlags" /> 或 <paramref name="flags" /> 會指定無效的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-206">
              <paramref name="accessMask" />, <paramref name="inheritanceFlags" />, <paramref name="propagationFlags" />, or <paramref name="flags" /> specifies an invalid value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7021f-207">
            <paramref name="identityReference" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-207">
              <paramref name="identityReference" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="7021f-208">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-208">-or-</span>
          </span>
          <span data-ttu-id="7021f-209">
            <paramref name="accessMask" /> 為零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-209">
              <paramref name="accessMask" /> is zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7021f-210">
            <paramref name="identityReference" /> 既不是 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 型別，也不是可以轉換成 <see cref="T:System.Security.Principal.NTAccount" /> 型別的型別 (例如 <see cref="T:System.Security.Principal.SecurityIdentifier" />)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-210">
              <paramref name="identityReference" /> is neither of type <see cref="T:System.Security.Principal.SecurityIdentifier" />, nor of a type such as <see cref="T:System.Security.Principal.NTAccount" /> that can be converted to type <see cref="T:System.Security.Principal.SecurityIdentifier" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AuditRuleType">
      <MemberSignature Language="C#" Value="public override Type AuditRuleType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AuditRuleType" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.SemaphoreSecurity.AuditRuleType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AuditRuleType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ AuditRuleType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7021f-211">取得 <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> 類別用來表示稽核規則的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-211">Gets the type that the <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> class uses to represent audit rules.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7021f-212">
            <see cref="T:System.Type" /> 物件，表示 <see cref="T:System.Security.AccessControl.SemaphoreAuditRule" /> 類別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-212">A <see cref="T:System.Type" /> object representing the <see cref="T:System.Security.AccessControl.SemaphoreAuditRule" /> class.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7021f-213">類別衍生自<xref:System.Security.AccessControl.ObjectSecurity>類別覆寫<xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A>屬性和傳回類型，用以代表稽核權限。</span><span class="sxs-lookup"><span data-stu-id="7021f-213">Classes that derive from the <xref:System.Security.AccessControl.ObjectSecurity> class override the <xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A> property and return the type they use to represent audit rights.</span></span> <span data-ttu-id="7021f-214">當您使用陣列或包含多個類型的安全性物件的集合時，使用這個屬性來判斷用於每個安全性物件的正確的稽核規則類型。</span><span class="sxs-lookup"><span data-stu-id="7021f-214">When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct audit rule type to use with each security object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRule">
      <MemberSignature Language="C#" Value="public bool RemoveAccessRule (System.Security.AccessControl.SemaphoreAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveAccessRule(class System.Security.AccessControl.SemaphoreAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRule(System.Security.AccessControl.SemaphoreAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAccessRule (rule As SemaphoreAccessRule) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RemoveAccessRule(System::Security::AccessControl::SemaphoreAccessRule ^ rule);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.SemaphoreAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">
          <span data-ttu-id="7021f-215">
            <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" />，其會指定要搜尋的使用者和 <see cref="T:System.Security.AccessControl.AccessControlType" />，以及必須與相符的規則 (如果找到的話) 相容的繼承和傳用旗標集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-215">A <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" /> that specifies the user and <see cref="T:System.Security.AccessControl.AccessControlType" /> to search for, and a set of inheritance and propagation flags that a matching rule, if found, must be compatible with.</span>
          </span>
          <span data-ttu-id="7021f-216">如果找到的話，指定從相容的規則中移除此權限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-216">Specifies the rights to remove from the compatible rule, if found.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7021f-217">搜尋具有與指定之規則相同的使用者和 <see cref="T:System.Security.AccessControl.AccessControlType" /> (允許或拒絕) 以及具有相容的繼承和傳用旗標的存取控制規則。如果找到這樣的規則，則會移除指定之存取規則中所包含的權限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-217">Searches for an access control rule with the same user and <see cref="T:System.Security.AccessControl.AccessControlType" /> (allow or deny) as the specified rule, and with compatible inheritance and propagation flags; if such a rule is found, the rights contained in the specified access rule are removed from it.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7021f-218">如果找到相容的規則，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-218">
              <see langword="true" /> if a compatible rule is found; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7021f-219">目前<xref:System.Security.AccessControl.SemaphoreSecurity>擁有相同的使用者和相同的規則會搜尋<xref:System.Security.AccessControl.AccessControlType>視為`rule`。</span><span class="sxs-lookup"><span data-stu-id="7021f-219">The current <xref:System.Security.AccessControl.SemaphoreSecurity> is searched for a rule that has the same user and the same <xref:System.Security.AccessControl.AccessControlType> value as `rule`.</span></span> <span data-ttu-id="7021f-220">如果找到任何這類規則，會採取任何動作，而且方法會傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="7021f-220">If no such rule is found, no action is taken, and the method returns `false`.</span></span> <span data-ttu-id="7021f-221">如果找到比對規則，其繼承和相容性旗標會檢查在指定的旗標與相容性的`rule`。</span><span class="sxs-lookup"><span data-stu-id="7021f-221">If matching rules are found, their inheritance and compatibility flags are checked for compatibility with the flags specified in `rule`.</span></span> <span data-ttu-id="7021f-222">如果找到不相容的規則，會採取任何動作，而且方法會傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="7021f-222">If no compatible rule is found, no action is taken, and the method returns `false`.</span></span> <span data-ttu-id="7021f-223">如果找到具有相容的旗標的規則，在指定的權限`rule`移除了相容的規則，而且方法會傳回`true`。</span><span class="sxs-lookup"><span data-stu-id="7021f-223">If a rule with compatible flags is found, the rights specified in `rule` are removed from the compatible rule, and the method returns `true`.</span></span> <span data-ttu-id="7021f-224">如果`rule`指定不相容的規則中包含的權限，就會採取任何動作，與這些權限。</span><span class="sxs-lookup"><span data-stu-id="7021f-224">If `rule` specifies rights not contained in the compatible rule, no action is taken with respect to those rights.</span></span> <span data-ttu-id="7021f-225">如果從相容的規則會移除所有的權限，整個規則會移除從目前<xref:System.Security.AccessControl.SemaphoreSecurity>物件。</span><span class="sxs-lookup"><span data-stu-id="7021f-225">If all rights are removed from the compatible rule, the entire rule is removed from the current <xref:System.Security.AccessControl.SemaphoreSecurity> object.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7021f-226">雖然您可以藉由建立它們與指定的號誌的存取規則的繼承和傳播旗標<xref:System.Security.AccessControl.SemaphoreSecurity.AccessRuleFactory%2A>，這不建議使用方法。</span><span class="sxs-lookup"><span data-stu-id="7021f-226">Although you can specify inheritance and propagation flags for semaphore access rules, by creating them with the <xref:System.Security.AccessControl.SemaphoreSecurity.AccessRuleFactory%2A> method, this is not recommended.</span></span> <span data-ttu-id="7021f-227">繼承和傳播的具名號誌，無意義，請存取規則的維護更為複雜。</span><span class="sxs-lookup"><span data-stu-id="7021f-227">Inheritance and propagation have no meaning for named semaphores, and they make the maintenance of access rules more complicated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7021f-228">下列程式碼範例示範如何使用<xref:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRule%2A>方法中移除的權限從<xref:System.Security.AccessControl.AccessControlType.Allow>規則中<xref:System.Security.AccessControl.SemaphoreSecurity>物件。</span><span class="sxs-lookup"><span data-stu-id="7021f-228">The following code example demonstrates the use of the <xref:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRule%2A> method to remove rights from an <xref:System.Security.AccessControl.AccessControlType.Allow> rule in a <xref:System.Security.AccessControl.SemaphoreSecurity> object.</span></span> <span data-ttu-id="7021f-229">它也會顯示中的其他權限`rule`都會被忽略。</span><span class="sxs-lookup"><span data-stu-id="7021f-229">It also shows that other rights in `rule` are ignored.</span></span>  
  
 <span data-ttu-id="7021f-230">此範例會建立<xref:System.Security.AccessControl.SemaphoreSecurity>物件並將加入規則，允許和拒絕目前使用者的各種權限。</span><span class="sxs-lookup"><span data-stu-id="7021f-230">The example creates a <xref:System.Security.AccessControl.SemaphoreSecurity> object and adds rules that allow and deny various rights for the current user.</span></span> <span data-ttu-id="7021f-231">權限允許包含<xref:System.Security.AccessControl.SemaphoreRights.Modify>， <xref:System.Security.AccessControl.SemaphoreRights.ReadPermissions>，和<xref:System.Security.AccessControl.SemaphoreRights.Synchronize>。</span><span class="sxs-lookup"><span data-stu-id="7021f-231">The rights allowed include <xref:System.Security.AccessControl.SemaphoreRights.Modify>, <xref:System.Security.AccessControl.SemaphoreRights.ReadPermissions>, and <xref:System.Security.AccessControl.SemaphoreRights.Synchronize>.</span></span> <span data-ttu-id="7021f-232">這個範例會建立新的規則，目前的使用者，包括<xref:System.Security.AccessControl.SemaphoreRights.ReadPermissions>和<xref:System.Security.AccessControl.SemaphoreRights.TakeOwnership>權限，並使用與該規則<xref:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRule%2A>方法移除<xref:System.Security.AccessControl.SemaphoreRights.ReadPermissions>從<xref:System.Security.AccessControl.AccessControlType.Allow>規則中<xref:System.Security.AccessControl.SemaphoreSecurity>物件。</span><span class="sxs-lookup"><span data-stu-id="7021f-232">The example then creates a new rule for the current user, including <xref:System.Security.AccessControl.SemaphoreRights.ReadPermissions> and <xref:System.Security.AccessControl.SemaphoreRights.TakeOwnership> rights, and uses that rule with the <xref:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRule%2A> method to remove <xref:System.Security.AccessControl.SemaphoreRights.ReadPermissions> from the <xref:System.Security.AccessControl.AccessControlType.Allow> rule in the <xref:System.Security.AccessControl.SemaphoreSecurity> object.</span></span> <span data-ttu-id="7021f-233">多餘<xref:System.Security.AccessControl.SemaphoreRights.TakeOwnership>中由左至右`rule`會被忽略。</span><span class="sxs-lookup"><span data-stu-id="7021f-233">The extraneous <xref:System.Security.AccessControl.SemaphoreRights.TakeOwnership> right in `rule` is ignored.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7021f-234">此範例不會附加安全性物件至<xref:System.Threading.Semaphore>物件。</span><span class="sxs-lookup"><span data-stu-id="7021f-234">This example does not attach the security object to a <xref:System.Threading.Semaphore> object.</span></span> <span data-ttu-id="7021f-235">中可以找到附加安全性物件的範例<xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType>和<xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="7021f-235">Examples that attach security objects can be found in <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType> and <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.RemoveAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.RemoveAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7021f-236">
            <paramref name="rule" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-236">
              <paramref name="rule" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRuleAll">
      <MemberSignature Language="C#" Value="public void RemoveAccessRuleAll (System.Security.AccessControl.SemaphoreAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAccessRuleAll(class System.Security.AccessControl.SemaphoreAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleAll(System.Security.AccessControl.SemaphoreAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAccessRuleAll (rule As SemaphoreAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAccessRuleAll(System::Security::AccessControl::SemaphoreAccessRule ^ rule);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.SemaphoreAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">
          <span data-ttu-id="7021f-237">
            <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" />，指定要搜尋的使用者和 <see cref="T:System.Security.AccessControl.AccessControlType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-237">A <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" /> that specifies the user and <see cref="T:System.Security.AccessControl.AccessControlType" /> to search for.</span>
          </span>
          <span data-ttu-id="7021f-238">忽略根據此規則指定的任何權限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-238">Any rights specified by this rule are ignored.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7021f-239">搜尋與指定規則具有相同使用者和 <see cref="T:System.Security.AccessControl.AccessControlType" /> (允許或拒絕) 的所有存取控制規則，如果找到的話，便加以移除。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-239">Searches for all access control rules with the same user and <see cref="T:System.Security.AccessControl.AccessControlType" /> (allow or deny) as the specified rule and, if found, removes them.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7021f-240">目前<xref:System.Security.AccessControl.SemaphoreSecurity>具備相同的使用者和相同的規則搜尋物件<xref:System.Security.AccessControl.AccessControlType>視為`rule`。</span><span class="sxs-lookup"><span data-stu-id="7021f-240">The current <xref:System.Security.AccessControl.SemaphoreSecurity> object is searched for rules that have the same user and the same <xref:System.Security.AccessControl.AccessControlType> value as `rule`.</span></span> <span data-ttu-id="7021f-241">指定的任何權限`rule`時執行這項搜尋將會被忽略。</span><span class="sxs-lookup"><span data-stu-id="7021f-241">Any rights specified by `rule` are ignored when performing this search.</span></span> <span data-ttu-id="7021f-242">如果找不到任何對應的規則，會不採取任何動作。</span><span class="sxs-lookup"><span data-stu-id="7021f-242">If no matching rules are found, no action is taken.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7021f-243">下列程式碼範例顯示<xref:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleAll%2A>方法移除符合使用者的所有規則和<xref:System.Security.AccessControl.AccessControlType>，略過權限。</span><span class="sxs-lookup"><span data-stu-id="7021f-243">The following code example shows that the <xref:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleAll%2A> method removes all rules that match user and <xref:System.Security.AccessControl.AccessControlType>, ignoring rights.</span></span>  
  
 <span data-ttu-id="7021f-244">此範例會建立<xref:System.Security.AccessControl.SemaphoreSecurity>物件、 將規則，允許和拒絕各種權限目前的使用者，並接著將合併到其他的權限<xref:System.Security.AccessControl.AccessControlType.Allow>規則。</span><span class="sxs-lookup"><span data-stu-id="7021f-244">The example creates a <xref:System.Security.AccessControl.SemaphoreSecurity> object, adds rules that allow and deny various rights for the current user, and then merges additional rights into the <xref:System.Security.AccessControl.AccessControlType.Allow> rule.</span></span> <span data-ttu-id="7021f-245">這個範例會建立新的規則，可讓目前的使用者取得擁有權，並使用該規則，移除<xref:System.Security.AccessControl.AccessControlType.Allow>規則從<xref:System.Security.AccessControl.SemaphoreSecurity>物件。</span><span class="sxs-lookup"><span data-stu-id="7021f-245">The example then creates a new rule that allows the current user to take ownership, and uses that rule to remove the <xref:System.Security.AccessControl.AccessControlType.Allow> rule from the <xref:System.Security.AccessControl.SemaphoreSecurity> object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7021f-246">此範例不會附加安全性物件至<xref:System.Threading.Semaphore>物件。</span><span class="sxs-lookup"><span data-stu-id="7021f-246">This example does not attach the security object to a <xref:System.Threading.Semaphore> object.</span></span> <span data-ttu-id="7021f-247">中可以找到附加安全性物件的範例<xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType>和<xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="7021f-247">Examples that attach security objects can be found in <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType> and <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleAll#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleAll/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleAll/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7021f-248">
            <paramref name="rule" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-248">
              <paramref name="rule" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRuleSpecific">
      <MemberSignature Language="C#" Value="public void RemoveAccessRuleSpecific (System.Security.AccessControl.SemaphoreAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAccessRuleSpecific(class System.Security.AccessControl.SemaphoreAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.SemaphoreAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAccessRuleSpecific (rule As SemaphoreAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAccessRuleSpecific(System::Security::AccessControl::SemaphoreAccessRule ^ rule);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.SemaphoreAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">
          <span data-ttu-id="7021f-249">要移除的 <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-249">The <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" /> to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7021f-250">搜尋與指定規則完全相符的存取控制規則，如果找到的話，便加以移除。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-250">Searches for an access control rule that exactly matches the specified rule and, if found, removes it.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7021f-251">此規則會移除它完全符合時，才`rule`中所有詳細資料，包括旗標。</span><span class="sxs-lookup"><span data-stu-id="7021f-251">The rule is removed only if it exactly matches `rule` in all details, including flags.</span></span> <span data-ttu-id="7021f-252">其他規則具有相同的使用者和<xref:System.Security.AccessControl.AccessControlType>不會受到影響。</span><span class="sxs-lookup"><span data-stu-id="7021f-252">Other rules with the same user and <xref:System.Security.AccessControl.AccessControlType> are not affected.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7021f-253">規則表示一或多個基礎存取控制項目 (ACE)，而且這些項目分割或修改使用者存取安全性規則時，視需要結合。</span><span class="sxs-lookup"><span data-stu-id="7021f-253">A rule represents one or more underlying access control entries (ACE), and these entries are split or combined as necessary when you modify the access security rules for a user.</span></span> <span data-ttu-id="7021f-254">因此，規則不再存在於在特定的表單時加入，然後在此情況下<xref:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific%2A>方法無法將其移除。</span><span class="sxs-lookup"><span data-stu-id="7021f-254">Thus, a rule might no longer exist in the specific form it had when it was added, and in that case the <xref:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific%2A> method cannot remove it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7021f-255">下列程式碼範例顯示<xref:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific%2A>方法需要完全相符，才能移除規則，與規則，以允許和拒絕權限會彼此獨立。</span><span class="sxs-lookup"><span data-stu-id="7021f-255">The following code example shows that the <xref:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific%2A> method requires an exact match in order to remove a rule, and that rules to allow and deny rights are independent of each other.</span></span>  
  
 <span data-ttu-id="7021f-256">此範例會建立<xref:System.Security.AccessControl.SemaphoreSecurity>物件、 將規則，允許和拒絕各種權限目前的使用者，並接著將合併到其他的權限<xref:System.Security.AccessControl.AccessControlType.Allow>存取規則。</span><span class="sxs-lookup"><span data-stu-id="7021f-256">The example creates a <xref:System.Security.AccessControl.SemaphoreSecurity> object, adds rules that allow and deny various rights for the current user, and then merges additional rights into the <xref:System.Security.AccessControl.AccessControlType.Allow> access rule.</span></span> <span data-ttu-id="7021f-257">此範例接著會將傳遞的原始<xref:System.Security.AccessControl.AccessControlType.Allow>規則<xref:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific%2A>方法，並顯示結果，並顯示不會刪除。</span><span class="sxs-lookup"><span data-stu-id="7021f-257">The example then passes the original <xref:System.Security.AccessControl.AccessControlType.Allow> rule to the <xref:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific%2A> method, and displays the results, showing that nothing is deleted.</span></span> <span data-ttu-id="7021f-258">此範例接著會建構規則符合<xref:System.Security.AccessControl.AccessControlType.Allow>規則中<xref:System.Security.AccessControl.SemaphoreSecurity>物件，並已成功使用<xref:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific%2A>方法來移除規則。</span><span class="sxs-lookup"><span data-stu-id="7021f-258">The example then constructs a rule that matches the <xref:System.Security.AccessControl.AccessControlType.Allow> rule in the <xref:System.Security.AccessControl.SemaphoreSecurity> object, and successfully uses the <xref:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific%2A> method to remove the rule.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7021f-259">此範例不會附加安全性物件至<xref:System.Threading.Semaphore>物件。</span><span class="sxs-lookup"><span data-stu-id="7021f-259">This example does not attach the security object to a <xref:System.Threading.Semaphore> object.</span></span> <span data-ttu-id="7021f-260">中可以找到附加安全性物件的範例<xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType>和<xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="7021f-260">Examples that attach security objects can be found in <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType> and <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7021f-261">
            <paramref name="rule" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-261">
              <paramref name="rule" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRule">
      <MemberSignature Language="C#" Value="public bool RemoveAuditRule (System.Security.AccessControl.SemaphoreAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveAuditRule(class System.Security.AccessControl.SemaphoreAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRule(System.Security.AccessControl.SemaphoreAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAuditRule (rule As SemaphoreAuditRule) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RemoveAuditRule(System::Security::AccessControl::SemaphoreAuditRule ^ rule);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.SemaphoreAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">
          <span data-ttu-id="7021f-262">
            <see cref="T:System.Security.AccessControl.SemaphoreAuditRule" />，其會指定要搜尋的使用者，以及必須與相符的規則 (如果找到的話) 相容的繼承和傳用旗標集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-262">A <see cref="T:System.Security.AccessControl.SemaphoreAuditRule" /> that specifies the user to search for, and a set of inheritance and propagation flags that a matching rule, if found, must be compatible with.</span>
          </span>
          <span data-ttu-id="7021f-263">如果找到的話，指定從相容的規則中移除此權限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-263">Specifies the rights to remove from the compatible rule, if found.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7021f-264">搜尋具有與指定之規則相同的使用者以及具有相容的繼承和傳用旗標的稽核控制規則。如果找到了相容的規則，則會移除指定之規則中所包含的權限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-264">Searches for an audit control rule with the same user as the specified rule, and with compatible inheritance and propagation flags; if a compatible rule is found, the rights contained in the specified rule are removed from it.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7021f-265">如果找到相容的規則，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-265">
              <see langword="true" /> if a compatible rule is found; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7021f-266">目前<xref:System.Security.AccessControl.SemaphoreSecurity>搜尋具有相同的使用者的稽核規則`rule`。</span><span class="sxs-lookup"><span data-stu-id="7021f-266">The current <xref:System.Security.AccessControl.SemaphoreSecurity> is searched for an audit rule that has the same user as `rule`.</span></span> <span data-ttu-id="7021f-267">如果找到任何這類規則，會採取任何動作，而且方法會傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="7021f-267">If no such rule is found, no action is taken, and the method returns `false`.</span></span> <span data-ttu-id="7021f-268">如果找到比對規則，其繼承和相容性旗標會檢查在指定的旗標與相容性的`rule`。</span><span class="sxs-lookup"><span data-stu-id="7021f-268">If matching rules are found, their inheritance and compatibility flags are checked for compatibility with the flags specified in `rule`.</span></span> <span data-ttu-id="7021f-269">如果找到不相容的規則，會採取任何動作，而且方法會傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="7021f-269">If no compatible rule is found, no action is taken, and the method returns `false`.</span></span> <span data-ttu-id="7021f-270">如果找到具有相容的旗標的規則，在指定的權限`rule`移除了相容的規則，而且方法會傳回`true`。</span><span class="sxs-lookup"><span data-stu-id="7021f-270">If a rule with compatible flags is found, the rights specified in `rule` are removed from the compatible rule, and the method returns `true`.</span></span> <span data-ttu-id="7021f-271">如果`rule`指定不相容的規則中包含的權限，就會採取任何動作，與這些權限。</span><span class="sxs-lookup"><span data-stu-id="7021f-271">If `rule` specifies rights not contained in the compatible rule, no action is taken with respect to those rights.</span></span> <span data-ttu-id="7021f-272">如果從相容的規則會移除所有的權限，整個規則會移除從目前<xref:System.Security.AccessControl.SemaphoreSecurity>物件。</span><span class="sxs-lookup"><span data-stu-id="7021f-272">If all rights are removed from the compatible rule, the entire rule is removed from the current <xref:System.Security.AccessControl.SemaphoreSecurity> object.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7021f-273">雖然您可以藉由建立它們與指定的號誌的稽核規則的繼承和傳播旗標<xref:System.Security.AccessControl.SemaphoreSecurity.AuditRuleFactory%2A>，這不建議使用方法。</span><span class="sxs-lookup"><span data-stu-id="7021f-273">Although you can specify inheritance and propagation flags for semaphore audit rules, by creating them with the <xref:System.Security.AccessControl.SemaphoreSecurity.AuditRuleFactory%2A> method, this is not recommended.</span></span> <span data-ttu-id="7021f-274">繼承和傳播的具名號誌，無意義，請稽核規則的維護更為複雜。</span><span class="sxs-lookup"><span data-stu-id="7021f-274">Inheritance and propagation have no meaning for named semaphores, and they make the maintenance of audit rules more complicated.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7021f-275">
            <paramref name="rule" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-275">
              <paramref name="rule" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRuleAll">
      <MemberSignature Language="C#" Value="public void RemoveAuditRuleAll (System.Security.AccessControl.SemaphoreAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAuditRuleAll(class System.Security.AccessControl.SemaphoreAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRuleAll(System.Security.AccessControl.SemaphoreAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAuditRuleAll (rule As SemaphoreAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAuditRuleAll(System::Security::AccessControl::SemaphoreAuditRule ^ rule);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.SemaphoreAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">
          <span data-ttu-id="7021f-276">
            <see cref="T:System.Security.AccessControl.SemaphoreAuditRule" />，指定要搜尋的使用者。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-276">A <see cref="T:System.Security.AccessControl.SemaphoreAuditRule" /> that specifies the user to search for.</span>
          </span>
          <span data-ttu-id="7021f-277">忽略根據此規則指定的任何權限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-277">Any rights specified by this rule are ignored.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7021f-278">搜尋與所指定規則有相同使用者的所有稽核規則，找到以後將其移除。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-278">Searches for all audit rules with the same user as the specified rule and, if found, removes them.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7021f-279">目前<xref:System.Security.AccessControl.SemaphoreSecurity>搜尋中是否有具有相同的使用者的稽核規則`rule`。</span><span class="sxs-lookup"><span data-stu-id="7021f-279">The current <xref:System.Security.AccessControl.SemaphoreSecurity> is searched for audit rules that have the same user as `rule`.</span></span> <span data-ttu-id="7021f-280">指定的任何權限`rule`時執行這項搜尋將會被忽略。</span><span class="sxs-lookup"><span data-stu-id="7021f-280">Any rights specified by `rule` are ignored when performing this search.</span></span> <span data-ttu-id="7021f-281">會移除所有比對規則。</span><span class="sxs-lookup"><span data-stu-id="7021f-281">All matching rules are removed.</span></span> <span data-ttu-id="7021f-282">如果找不到任何對應的規則，會不採取任何動作。</span><span class="sxs-lookup"><span data-stu-id="7021f-282">If no matching rules are found, no action is taken.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7021f-283">
            <paramref name="rule" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-283">
              <paramref name="rule" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRuleSpecific">
      <MemberSignature Language="C#" Value="public void RemoveAuditRuleSpecific (System.Security.AccessControl.SemaphoreAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAuditRuleSpecific(class System.Security.AccessControl.SemaphoreAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.SemaphoreAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAuditRuleSpecific (rule As SemaphoreAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAuditRuleSpecific(System::Security::AccessControl::SemaphoreAuditRule ^ rule);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.SemaphoreAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">
          <span data-ttu-id="7021f-284">要移除的 <see cref="T:System.Security.AccessControl.SemaphoreAuditRule" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-284">The <see cref="T:System.Security.AccessControl.SemaphoreAuditRule" /> to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7021f-285">搜尋與指定規則完全相符的稽核規則，如果找到的話，便加以移除。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-285">Searches for an audit rule that exactly matches the specified rule and, if found, removes it.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7021f-286">此規則會移除它完全符合時，才`rule`中所有詳細資料，包括旗標。</span><span class="sxs-lookup"><span data-stu-id="7021f-286">The rule is removed only if it exactly matches `rule` in all details, including flags.</span></span> <span data-ttu-id="7021f-287">不會影響同一個使用者的其他稽核規則。</span><span class="sxs-lookup"><span data-stu-id="7021f-287">Other audit rules for the same user are not affected.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7021f-288">規則表示一或多個基礎存取控制項目 (ACE)，而且這些項目分割或修改使用者的安全性稽核規則時，視需要結合。</span><span class="sxs-lookup"><span data-stu-id="7021f-288">A rule represents one or more underlying access control entries (ACE), and these entries are split or combined as necessary when you modify the audit security rules for a user.</span></span> <span data-ttu-id="7021f-289">因此，規則不再存在於在特定的表單時加入，然後在此情況下<xref:System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRuleSpecific%2A>方法無法將其移除。</span><span class="sxs-lookup"><span data-stu-id="7021f-289">Thus, a rule might no longer exist in the specific form it had when it was added, and in that case the <xref:System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRuleSpecific%2A> method cannot remove it.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7021f-290">
            <paramref name="rule" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-290">
              <paramref name="rule" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ResetAccessRule">
      <MemberSignature Language="C#" Value="public void ResetAccessRule (System.Security.AccessControl.SemaphoreAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetAccessRule(class System.Security.AccessControl.SemaphoreAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.ResetAccessRule(System.Security.AccessControl.SemaphoreAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetAccessRule (rule As SemaphoreAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetAccessRule(System::Security::AccessControl::SemaphoreAccessRule ^ rule);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.SemaphoreAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">
          <span data-ttu-id="7021f-291">要加入的 <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-291">The <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" /> to add.</span>
          </span>
          <span data-ttu-id="7021f-292">這個規則指定的使用者會決定在加入這項規則之前要移除的規則。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-292">The user specified by this rule determines the rules to remove before this rule is added.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7021f-293">移除與指定規則具有相同使用者的所有存取控制規則 (不論 <see cref="T:System.Security.AccessControl.AccessControlType" /> 為何)，然後加入指定規則。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-293">Removes all access control rules with the same user as the specified rule, regardless of <see cref="T:System.Security.AccessControl.AccessControlType" />, and then adds the specified rule.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7021f-294">如果沒有使用者符合指定之規則的存取規則`rule`加入。</span><span class="sxs-lookup"><span data-stu-id="7021f-294">If there are no access rules whose user matches the specified rule, `rule` is added.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7021f-295">下列程式碼範例示範如何<xref:System.Security.AccessControl.SemaphoreSecurity.ResetAccessRule%2A>方法會取代為指定的比對的規則比對使用者的所有規則。</span><span class="sxs-lookup"><span data-stu-id="7021f-295">The following code example shows how the <xref:System.Security.AccessControl.SemaphoreSecurity.ResetAccessRule%2A> method replaces all rules for the matching user with the rule specified for the match.</span></span>  
  
 <span data-ttu-id="7021f-296">此範例會建立<xref:System.Security.AccessControl.SemaphoreSecurity>物件並將加入規則，允許和拒絕目前使用者的各種權限。</span><span class="sxs-lookup"><span data-stu-id="7021f-296">The example creates a <xref:System.Security.AccessControl.SemaphoreSecurity> object and adds rules that allow and deny various rights for the current user.</span></span> <span data-ttu-id="7021f-297">這個範例會建立新的規則，可讓您目前的使用者完整控制，並使用<xref:System.Security.AccessControl.SemaphoreSecurity.ResetAccessRule%2A>方法，以使用新的規則來取代這兩個現有的規則。</span><span class="sxs-lookup"><span data-stu-id="7021f-297">The example then creates a new rule that allows the current user full control, and uses the <xref:System.Security.AccessControl.SemaphoreSecurity.ResetAccessRule%2A> method to replace both of the existing rules with the new rule.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7021f-298">此範例不會附加安全性物件至<xref:System.Threading.Semaphore>物件。</span><span class="sxs-lookup"><span data-stu-id="7021f-298">This example does not attach the security object to a <xref:System.Threading.Semaphore> object.</span></span> <span data-ttu-id="7021f-299">中可以找到附加安全性物件的範例<xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType>和<xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="7021f-299">Examples that attach security objects can be found in <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType> and <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.Security.AccessControl.SemaphoreSecurity.ResetAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.ResetAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.SemaphoreSecurity.ResetAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.ResetAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7021f-300">
            <paramref name="rule" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-300">
              <paramref name="rule" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetAccessRule">
      <MemberSignature Language="C#" Value="public void SetAccessRule (System.Security.AccessControl.SemaphoreAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAccessRule(class System.Security.AccessControl.SemaphoreAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.SetAccessRule(System.Security.AccessControl.SemaphoreAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAccessRule (rule As SemaphoreAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAccessRule(System::Security::AccessControl::SemaphoreAccessRule ^ rule);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.SemaphoreAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">
          <span data-ttu-id="7021f-301">要加入的 <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-301">The <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" /> to add.</span>
          </span>
          <span data-ttu-id="7021f-302">這個規則的使用者和 <see cref="T:System.Security.AccessControl.AccessControlType" /> 會決定在加入這項規則之前要移除的規則。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-302">The user and <see cref="T:System.Security.AccessControl.AccessControlType" /> of this rule determine the rules to remove before this rule is added.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7021f-303">移除與指定規則具有相同使用者和 <see cref="T:System.Security.AccessControl.AccessControlType" /> (允許或拒絕) 的所有存取控制規則，然後加入指定規則。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-303">Removes all access control rules with the same user and <see cref="T:System.Security.AccessControl.AccessControlType" /> (allow or deny) as the specified rule, and then adds the specified rule.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7021f-304">如果指定的規則有<xref:System.Security.AccessControl.AccessControlType.Allow>，這個方法的效果是要移除所有<xref:System.Security.AccessControl.AccessControlType.Allow>規則所指定的使用者，將其取代為指定的規則。</span><span class="sxs-lookup"><span data-stu-id="7021f-304">If the specified rule has <xref:System.Security.AccessControl.AccessControlType.Allow>, the effect of this method is to remove all <xref:System.Security.AccessControl.AccessControlType.Allow> rules for the specified user, replacing them with the specified rule.</span></span> <span data-ttu-id="7021f-305">如果指定的規則有<xref:System.Security.AccessControl.AccessControlType.Deny>，則所有<xref:System.Security.AccessControl.AccessControlType.Deny>規則指定的使用者都取代成指定的規則。</span><span class="sxs-lookup"><span data-stu-id="7021f-305">If the specified rule has <xref:System.Security.AccessControl.AccessControlType.Deny>, all <xref:System.Security.AccessControl.AccessControlType.Deny> rules for the specified user are replaced with the specified rule.</span></span>  
  
 <span data-ttu-id="7021f-306">如果沒有規則的使用者和<xref:System.Security.AccessControl.AccessControlType>符合指定之規則`rule`加入。</span><span class="sxs-lookup"><span data-stu-id="7021f-306">If there are no rules whose user and <xref:System.Security.AccessControl.AccessControlType> match the specified rule, `rule` is added.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7021f-307">下列程式碼範例示範如何<xref:System.Security.AccessControl.SemaphoreSecurity.SetAccessRule%2A>方法移除符合這兩個使用者的所有規則和<xref:System.Security.AccessControl.AccessControlType>的`rule`，取代它們與`rule`。</span><span class="sxs-lookup"><span data-stu-id="7021f-307">The following code example shows how the <xref:System.Security.AccessControl.SemaphoreSecurity.SetAccessRule%2A> method removes all rules that match both the user and the <xref:System.Security.AccessControl.AccessControlType> of `rule`, replacing them with `rule`.</span></span>  
  
 <span data-ttu-id="7021f-308">此範例會建立<xref:System.Security.AccessControl.SemaphoreSecurity>物件並將加入規則，允許和拒絕目前使用者的各種權限。</span><span class="sxs-lookup"><span data-stu-id="7021f-308">The example creates a <xref:System.Security.AccessControl.SemaphoreSecurity> object and adds rules that allow and deny various rights for the current user.</span></span> <span data-ttu-id="7021f-309">這個範例會建立新的規則，可讓您目前的使用者完整控制，並使用<xref:System.Security.AccessControl.SemaphoreSecurity.SetAccessRule%2A>方法來取代現有允許使用新的規則的規則。</span><span class="sxs-lookup"><span data-stu-id="7021f-309">The example then creates a new rule that allows the current user full control, and uses the <xref:System.Security.AccessControl.SemaphoreSecurity.SetAccessRule%2A> method to replace the existing Allow rule with the new rule.</span></span> <span data-ttu-id="7021f-310">不受影響的規則，拒絕存取。</span><span class="sxs-lookup"><span data-stu-id="7021f-310">The rule that denies access is not affected.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7021f-311">此範例不會附加安全性物件至<xref:System.Threading.Semaphore>物件。</span><span class="sxs-lookup"><span data-stu-id="7021f-311">This example does not attach the security object to a <xref:System.Threading.Semaphore> object.</span></span> <span data-ttu-id="7021f-312">中可以找到附加安全性物件的範例<xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType>和<xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="7021f-312">Examples that attach security objects can be found in <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType> and <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.Security.AccessControl.SemaphoreSecurity.SetAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.SetAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.SemaphoreSecurity.SetAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.SetAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7021f-313">
            <paramref name="rule" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-313">
              <paramref name="rule" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetAuditRule">
      <MemberSignature Language="C#" Value="public void SetAuditRule (System.Security.AccessControl.SemaphoreAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAuditRule(class System.Security.AccessControl.SemaphoreAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.SetAuditRule(System.Security.AccessControl.SemaphoreAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAuditRule (rule As SemaphoreAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAuditRule(System::Security::AccessControl::SemaphoreAuditRule ^ rule);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.SemaphoreAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">
          <span data-ttu-id="7021f-314">要加入的 <see cref="T:System.Security.AccessControl.SemaphoreAuditRule" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-314">The <see cref="T:System.Security.AccessControl.SemaphoreAuditRule" /> to add.</span>
          </span>
          <span data-ttu-id="7021f-315">這個規則指定的使用者會決定在加入這項規則之前要移除的規則。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-315">The user specified by this rule determines the rules to remove before this rule is added.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7021f-316">移除與指定規則具有相同使用者的所有稽核規則 (不論 <see cref="T:System.Security.AccessControl.AuditFlags" /> 值為何)，然後加入指定規則。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-316">Removes all audit rules with the same user as the specified rule, regardless of the <see cref="T:System.Security.AccessControl.AuditFlags" /> value, and then adds the specified rule.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7021f-317">如果沒有使用者符合指定之規則的稽核規則`rule`加入。</span><span class="sxs-lookup"><span data-stu-id="7021f-317">If there are no audit rules whose user matches the specified rule, `rule` is added.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7021f-318">
            <paramref name="rule" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7021f-318">
              <paramref name="rule" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>