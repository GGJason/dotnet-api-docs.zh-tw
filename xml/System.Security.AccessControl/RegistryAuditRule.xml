<Type Name="RegistryAuditRule" FullName="System.Security.AccessControl.RegistryAuditRule">
  <Metadata><Meta Name="ms.openlocfilehash" Value="510987497ca40d40498771c67c99be0c45b07a96" /><Meta Name="ms.sourcegitcommit" Value="0d6aa6694f157a08fe52cd25b4d9d3dcf913e812" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="10/12/2018" /><Meta Name="ms.locfileid" Value="49138735" /></Metadata><TypeSignature Language="C#" Value="public sealed class RegistryAuditRule : System.Security.AccessControl.AuditRule" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit RegistryAuditRule extends System.Security.AccessControl.AuditRule" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.RegistryAuditRule" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class RegistryAuditRule&#xA;Inherits AuditRule" />
  <TypeSignature Language="C++ CLI" Value="public ref class RegistryAuditRule sealed : System::Security::AccessControl::AuditRule" />
  <TypeSignature Language="F#" Value="type RegistryAuditRule = class&#xA;    inherit AuditRule" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.AccessControl.AuditRule</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示要針對使用者或群組稽核的一組存取權限。 這個類別無法被繼承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.RegistryAuditRule>類別是其中一個的一組.NET Framework 會提供用於管理 Windows 存取控制安全性，在登錄機碼的類別。 如需這些類別和其基礎的 Windows 存取控制結構與關聯性的概觀，請參閱<xref:System.Security.AccessControl.RegistrySecurity>。  
  
> [!NOTE]
>  Windows 存取控制安全性只能套用到登錄機碼。 它無法套用至個別的索引鍵/值組儲存在索引鍵。  
  
 若要取得目前套用至登錄機碼的稽核規則的清單，請使用<xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType>方法來取得<xref:System.Security.AccessControl.RegistrySecurity>物件，並接著使用及其<xref:System.Security.AccessControl.CommonObjectSecurity.GetAuditRules%2A>方法，以取得的集合<xref:System.Security.AccessControl.RegistryAuditRule>物件。  
  
 <xref:System.Security.AccessControl.RegistryAuditRule> 物件不會對應一對一與基礎的判別存取控制清單 (DACL) 中存取控制項目。 取得集合之所有稽核規則的登錄機碼後，該集合會包含規則目前表示所有存取控制項目所需的最小數目。  
  
> [!NOTE]
>  當您套用和移除規則，就會變更基礎的存取控制項目。 在規則中的資訊可能的話，合併到維護存取控制項目最小數目。 因此，當您讀取目前的規則清單時，它看起來可能不完全您新增的所有規則的清單。  
  
 使用<xref:System.Security.AccessControl.RegistryAuditRule>物件，以指定要稽核的使用者或群組的存取權限。 若要將規則套用到登錄機碼，使用<xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType>方法來取得<xref:System.Security.AccessControl.RegistrySecurity>物件。 修改<xref:System.Security.AccessControl.RegistrySecurity>物件使用其方法來新增規則，然後使用<xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType>重新附加安全性物件的方法。  
  
> [!IMPORTANT]
>  您所做的變更<xref:System.Security.AccessControl.RegistrySecurity>物件不會影響登錄機碼的存取層級直到您呼叫<xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType>將更改的安全性物件指派到登錄機碼的方法。  
  
 <xref:System.Security.AccessControl.RegistryAuditRule> 物件是不可變的。 使用的方法修改登錄機碼的安全性<xref:System.Security.AccessControl.RegistrySecurity>類別來新增或移除規則; 當您這麼做時，會修改基礎的存取控制項目。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistryAuditRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Principal.IdentityReference identity, valuetype System.Security.AccessControl.RegistryRights registryRights, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AuditFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistryAuditRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistryAuditRule(System::Security::Principal::IdentityReference ^ identity, System::Security::AccessControl::RegistryRights registryRights, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AuditFlags flags);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.RegistryAuditRule : System.Security.Principal.IdentityReference * System.Security.AccessControl.RegistryRights * System.Security.AccessControl.InheritanceFlags * System.Security.AccessControl.PropagationFlags * System.Security.AccessControl.AuditFlags -&gt; System.Security.AccessControl.RegistryAuditRule" Usage="new System.Security.AccessControl.RegistryAuditRule (identity, registryRights, inheritanceFlags, propagationFlags, flags)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="registryRights" Type="System.Security.AccessControl.RegistryRights" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="flags" Type="System.Security.AccessControl.AuditFlags" />
      </Parameters>
      <Docs>
        <param name="identity">適用這項規則的使用者或群組。 必須是型別 <see cref="T:System.Security.Principal.SecurityIdentifier" />，或是像是可以轉換成型別 <see cref="T:System.Security.Principal.NTAccount" /> 的 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 的型別。</param>
        <param name="registryRights"><see cref="T:System.Security.AccessControl.RegistryRights" /> 值的位元組合，指定要稽核的存取類型。</param>
        <param name="inheritanceFlags"><see cref="T:System.Security.AccessControl.InheritanceFlags" /> 值的位元組合，指定稽核規則是否套用至目前機碼的子機碼 (Subkey)。</param>
        <param name="propagationFlags"><see cref="T:System.Security.AccessControl.PropagationFlags" /> 值的位元組合，這些值會影響繼承之稽核規則傳用至目前機碼的子機碼的方式。</param>
        <param name="flags"><see cref="T:System.Security.AccessControl.AuditFlags" /> 值的位元組合，指定是否要稽核成功、失敗或兩者皆稽核。</param>
        <summary>初始化 <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> 類別的新執行個體，指定要稽核的使用者或群組、要稽核的權限、是否考慮繼承 (Inheritance)，以及是要稽核成功、失敗或兩者皆稽核。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所有登錄機碼是容器，因此對登錄機碼有意義的唯一繼承旗標是<xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType>旗標。 如果未指定此旗標，會忽略傳播旗標，並立即的金鑰會受到影響。 如果旗標存在，此規則會傳播下, 表所示。 此表格假設沒有子系子機碼 CS 與 GS 孫系子機碼的子機碼 S。 也就是孫系子機碼的路徑是 S\CS\GS。  
  
|傳用旗標|S|CS|GS|  
|-----------------------|-------|--------|--------|  
|<xref:System.Security.AccessControl.PropagationFlags.None>|X|X|X|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>|X|X||  
|<xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||X|X|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>、 <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||X||  
  
 孫系子機碼的模式會控管的孫系子機碼所包含的所有子機碼。  
  
 比方說，如果<xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit>旗標指定給`inheritanceFlags`並<xref:System.Security.AccessControl.PropagationFlags.InheritOnly>傳用旗標會指定給`propagationFlags`，這項規則不適用於直屬子機碼，但未套用至所有子直屬子機碼和所有子機碼它們包含。  
  
> [!NOTE]
>  雖然您可以指定<xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType>旗標，以`inheritanceFlags`，在此情況下沒有意義。 子機碼中的名稱/值組的存取控制的目的，不是個別物件。 名稱/值組的存取權限是由子機碼的權限控制。 此外，因為所有子機碼是容器 （也就是它們可以包含其他子機碼），它們不會受到<xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit>旗標。 最後，指定<xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit>旗標不必要地變得非常複雜的維護的規則，因為它會干擾一般相容規則的組合。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="eventRights" /> 指定了無效的值。  
  
-或- 
 <paramref name="flags" /> 指定了無效的值。  
  
-或- 
 <paramref name="inheritanceFlags" /> 指定了無效的值。  
  
-或- 
 <paramref name="propagationFlags" /> 指定了無效的值。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="identity" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="registryRights" /> 為零。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="identity" /> 既不是 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 型別，也不是可以轉換成 <see cref="T:System.Security.Principal.NTAccount" /> 型別的型別 (例如 <see cref="T:System.Security.Principal.SecurityIdentifier" />)。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistryAuditRule (string identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string identity, valuetype System.Security.AccessControl.RegistryRights registryRights, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AuditFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistryAuditRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistryAuditRule(System::String ^ identity, System::Security::AccessControl::RegistryRights registryRights, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AuditFlags flags);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.RegistryAuditRule : string * System.Security.AccessControl.RegistryRights * System.Security.AccessControl.InheritanceFlags * System.Security.AccessControl.PropagationFlags * System.Security.AccessControl.AuditFlags -&gt; System.Security.AccessControl.RegistryAuditRule" Usage="new System.Security.AccessControl.RegistryAuditRule (identity, registryRights, inheritanceFlags, propagationFlags, flags)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.String" />
        <Parameter Name="registryRights" Type="System.Security.AccessControl.RegistryRights" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="flags" Type="System.Security.AccessControl.AuditFlags" />
      </Parameters>
      <Docs>
        <param name="identity">套用這個規則的使用者或群組名稱。</param>
        <param name="registryRights"><see cref="T:System.Security.AccessControl.RegistryRights" /> 值的位元組合，指定要稽核的存取類型。</param>
        <param name="inheritanceFlags"><see cref="T:System.Security.AccessControl.InheritanceFlags" /> 旗標的組合，指定稽核規則是否要套用至目前機碼的子機碼。</param>
        <param name="propagationFlags"><see cref="T:System.Security.AccessControl.PropagationFlags" /> 旗標的組合，這些旗標會影響繼承之稽核規則傳用至目前機碼的子機碼的方式。</param>
        <param name="flags"><see cref="T:System.Security.AccessControl.AuditFlags" /> 值的位元組合，指定是否要稽核成功、失敗或兩者皆稽核。</param>
        <summary>初始化 <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> 類別的新執行個體，指定要稽核的使用者或群組名稱、要稽核的權限、是否考慮繼承，以及是要稽核成功、失敗或兩者皆稽核。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所有登錄機碼是容器，因此對登錄機碼有意義的唯一繼承旗標是<xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType>旗標。 如果未指定此旗標，會忽略傳播旗標，並立即的金鑰會受到影響。 如果旗標存在，此規則會傳播下, 表所示。 此表格假設沒有子系子機碼 CS 與 GS 孫系子機碼的子機碼 S。 也就是孫系子機碼的路徑是 S\CS\GS。  
  
|傳用旗標|S|CS|GS|  
|-----------------------|-------|--------|--------|  
|<xref:System.Security.AccessControl.PropagationFlags.None>|X|X|X|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>|X|X||  
|<xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||X|X|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>、 <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||X||  
  
 孫系子機碼的模式會控管的孫系子機碼所包含的所有子機碼。  
  
 比方說，如果<xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit>旗標指定給`inheritanceFlags`並<xref:System.Security.AccessControl.PropagationFlags.InheritOnly>傳用旗標會指定給`propagationFlags`，這項規則不適用於直屬子機碼，但未套用至所有子直屬子機碼和所有子機碼它們包含。  
  
> [!NOTE]
>  雖然您可以指定<xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType>旗標，以`inheritanceFlags`，在此情況下沒有意義。 子機碼中的名稱/值組的存取控制的目的，不是個別物件。 名稱/值組的存取權限是由子機碼的權限控制。 此外，因為所有子機碼是容器 （也就是它們可以包含其他子機碼），它們不會受到<xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit>旗標。 最後，指定<xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit>旗標不必要地變得非常複雜的維護的規則，因為它會干擾一般相容規則的組合。  
  
 這個建構函式相當於建立<xref:System.Security.Principal.NTAccount>物件，傳遞`identity`要<xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=nameWithType>建構函式，並傳遞新建立<xref:System.Security.Principal.NTAccount>物件<xref:System.Security.AccessControl.RegistryAuditRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.InheritanceFlags%2CSystem.Security.AccessControl.PropagationFlags%2CSystem.Security.AccessControl.AuditFlags%29>建構函式。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="eventRights" /> 指定了無效的值。  
  
-或- 
 <paramref name="flags" /> 指定了無效的值。  
  
-或- 
 <paramref name="inheritanceFlags" /> 指定了無效的值。  
  
-或- 
 <paramref name="propagationFlags" /> 指定了無效的值。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="registryRights" /> 為零。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="identity" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="identity" /> 是零長度字串。  
  
-或- 
 <paramref name="identity" /> 的長度超過 512 個字元。</exception>
      </Docs>
    </Member>
    <Member MemberName="RegistryRights">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.RegistryRights RegistryRights { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.AccessControl.RegistryRights RegistryRights" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.RegistryAuditRule.RegistryRights" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RegistryRights As RegistryRights" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::AccessControl::RegistryRights RegistryRights { System::Security::AccessControl::RegistryRights get(); };" />
      <MemberSignature Language="F#" Value="member this.RegistryRights : System.Security.AccessControl.RegistryRights" Usage="System.Security.AccessControl.RegistryAuditRule.RegistryRights" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.RegistryRights</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得受稽核規則影響的存取權限。</summary>
        <value><see cref="T:System.Security.AccessControl.RegistryRights" /> 值的位元組合，表示受稽核規則所影響的權限。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.RegistryAuditRule> 物件是不可變的。 您可以建立新的稽核規則，代表不同的使用者、 不同的權限或不同的組合<xref:System.Security.AccessControl.AuditFlags>旗標，但是您無法修改現有的稽核規則。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>