<Type Name="AceEnumerator" FullName="System.Security.AccessControl.AceEnumerator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1e3c963e08072dced3419135e174fee2308be45f" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36532998" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class AceEnumerator : System.Collections.IEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AceEnumerator extends System.Object implements class System.Collections.IEnumerator" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.AceEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AceEnumerator&#xA;Implements IEnumerator" />
  <TypeSignature Language="C++ CLI" Value="public ref class AceEnumerator sealed : System::Collections::IEnumerator" />
  <TypeSignature Language="F#" Value="type AceEnumerator = class&#xA;    interface IEnumerator" />
  <AssemblyInfo>
    <AssemblyName>System.Security.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="3b5d5-101">可在存取控制清單 (ACL) 中逐一查看存取控制項目 (ACE)。</span>
      <span class="sxs-lookup">
        <span data-stu-id="3b5d5-101">Provides the ability to iterate through the access control entries (ACEs) in an access control list (ACL).</span>
      </span>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.GenericAce Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.AccessControl.GenericAce Current" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.AceEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As GenericAce" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::AccessControl::GenericAce ^ Current { System::Security::AccessControl::GenericAce ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : System.Security.AccessControl.GenericAce" Usage="System.Security.AccessControl.AceEnumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.GenericAce</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3b5d5-102">取得 <see cref="T:System.Security.AccessControl.GenericAce" /> 集合中的目前項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b5d5-102">Gets the current element in the <see cref="T:System.Security.AccessControl.GenericAce" /> collection.</span>
          </span>
          <span data-ttu-id="3b5d5-103">這個屬性會取得物件的易記型別版本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b5d5-103">This property gets the type-friendly version of the object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3b5d5-104">
            <see cref="T:System.Security.AccessControl.GenericAce" /> 集合中的目前項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b5d5-104">The current element in the <see cref="T:System.Security.AccessControl.GenericAce" /> collection.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.AceEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberSignature Language="F#" Value="abstract member MoveNext : unit -&gt; bool&#xA;override this.MoveNext : unit -&gt; bool" Usage="aceEnumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Security.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3b5d5-105">讓列舉程式前進至 <see cref="T:System.Security.AccessControl.GenericAce" /> 集合中的下一個項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b5d5-105">Advances the enumerator to the next element of the <see cref="T:System.Security.AccessControl.GenericAce" /> collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b5d5-106">如果列舉值成功前移至下一個項目，則為 <see langword="true" />；如果列舉值超過集合的結尾，則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b5d5-106">
              <see langword="true" /> if the enumerator was successfully advanced to the next element; <see langword="false" /> if the enumerator has passed the end of the collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b5d5-107">建立列舉值之後，或呼叫後<xref:System.Security.AccessControl.AceEnumerator.Reset%2A>方法，列舉程式位於集合中，且第一個呼叫的第一個元素之前<xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>方法集合的第一個項目上方移動列舉值。</span><span class="sxs-lookup"><span data-stu-id="3b5d5-107">After an enumerator is created or after a call to the <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> method, an enumerator is positioned before the first element of the collection, and the first call to the <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> method moves the enumerator over the first element of the collection.</span></span>  
  
 <span data-ttu-id="3b5d5-108">集合的結尾傳遞，後續呼叫之後<xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>傳回`false`直到<xref:System.Security.AccessControl.AceEnumerator.Reset%2A>呼叫。</span><span class="sxs-lookup"><span data-stu-id="3b5d5-108">After the end of the collection is passed, subsequent calls to <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> return `false` until <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> is called.</span></span>  
  
 <span data-ttu-id="3b5d5-109">只要集合維持不變，列舉程式就持續有效。</span><span class="sxs-lookup"><span data-stu-id="3b5d5-109">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="3b5d5-110">如果變更，例如加入、 修改或刪除元素，進行至集合中，列舉程式會永久失效，且下次呼叫<xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>或<xref:System.Security.AccessControl.AceEnumerator.Reset%2A>會擲回<xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="3b5d5-110">If changes, such as adding, modifying, or deleting elements, are made to the collection, the enumerator is irrecoverably invalidated and the next call to <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> or <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3b5d5-111">建立列舉值之後，集合已修改。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b5d5-111">The collection was modified after the enumerator was created.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.AceEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="aceEnumerator.Reset " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Security.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3b5d5-112">將列舉值設為它的初始位置，即 <see cref="T:System.Security.AccessControl.GenericAce" /> 集合中的第一個項目之前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b5d5-112">Sets the enumerator to its initial position, which is before the first element in the <see cref="T:System.Security.AccessControl.GenericAce" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b5d5-113">只要集合維持不變，列舉程式就持續有效。</span><span class="sxs-lookup"><span data-stu-id="3b5d5-113">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="3b5d5-114">如果，例如加入、 修改或刪除元素，會對集合進行的列舉程式會永久失效，且下次呼叫<xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>方法或<xref:System.Security.AccessControl.AceEnumerator.Reset%2A>方法會擲回 <xref:System.InvalidOperationException></span><span class="sxs-lookup"><span data-stu-id="3b5d5-114">If , such as adding, modifying, or deleting elements, are made to the collection, the enumerator is irrecoverably invalidated and the next call to the <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> method or the <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> method throws an <xref:System.InvalidOperationException></span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3b5d5-115">建立列舉值之後，集合已修改。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b5d5-115">The collection was modified after the enumerator was created.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="3b5d5-116">
            <para>所有呼叫<see cref="M:System.Security.AccessControl.AceEnumerator.Reset" />列舉值時必須產生相同的狀態。將列舉值移至集合中，第一個項目之前，開頭為慣用的實作。這會使列舉值，如果集合已經過修改，因為建立列舉值，也就是與一致<see cref="M:System.Security.AccessControl.AceEnumerator.MoveNext" />和<see cref="P:System.Security.AccessControl.AceEnumerator.Current" />。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3b5d5-116">
              <para>All calls to <see cref="M:System.Security.AccessControl.AceEnumerator.Reset" /> must result in the same state for the enumerator. The preferred implementation is to move the enumerator to the beginning of the collection, before the first element. This invalidates the enumerator if the collection has been modified since the enumerator was created, which is consistent with <see cref="M:System.Security.AccessControl.AceEnumerator.MoveNext" /> and <see cref="P:System.Security.AccessControl.AceEnumerator.Current" />.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IEnumerator.Current { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Security.AccessControl.AceEnumerator.System.Collections.IEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Security.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3b5d5-117">取得集合中目前的項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b5d5-117">Gets the current element in the collection.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3b5d5-118">傳回集合中目前的項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b5d5-118">Returns the current element in the collection.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b5d5-119">建立列舉值之後，或呼叫後<xref:System.Security.AccessControl.AceEnumerator.Reset%2A>方法，您必須呼叫<xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>方法，以將列舉值前進到第一個項目，再讀取的值集合的<xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A>，否則<xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A>是未定義.</span><span class="sxs-lookup"><span data-stu-id="3b5d5-119">After an enumerator is created or after a call to the <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> method, you must call the <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A>; otherwise, <xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A> is undefined.</span></span>  
  
 <span data-ttu-id="3b5d5-120"><xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A> 也會發生例外狀況，如果最後一個呼叫<xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>傳回`false`，表示集合的結尾。</span><span class="sxs-lookup"><span data-stu-id="3b5d5-120"><xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A> also throws an exception if the last call to <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> returned `false`, which indicates the end of the collection.</span></span>  
  
 <span data-ttu-id="3b5d5-121"><xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A> 不會移動的列舉程式及連續呼叫位置<xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A>傳回相同的物件直到<xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>或<xref:System.Security.AccessControl.AceEnumerator.Reset%2A>呼叫。</span><span class="sxs-lookup"><span data-stu-id="3b5d5-121"><xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A> does not move the position of the enumerator, and consecutive calls to <xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A> return the same object until either <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> or <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> is called.</span></span>  
  
 <span data-ttu-id="3b5d5-122">只要集合維持不變，列舉程式就持續有效。</span><span class="sxs-lookup"><span data-stu-id="3b5d5-122">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="3b5d5-123">如果變更，例如加入、 修改或刪除元素，進行至集合中，列舉程式會永久失效，且下次呼叫<xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>或<xref:System.Security.AccessControl.AceEnumerator.Reset%2A>會擲回<xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="3b5d5-123">If changes, such as adding, modifying, or deleting elements, are made to the collection, the enumerator is irrecoverably invalidated, and the next call to <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> or <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="3b5d5-124">如果之間修改集合<xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>和<xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A>，<xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A>傳回項目所設定，即使列舉值已經無效。</span><span class="sxs-lookup"><span data-stu-id="3b5d5-124">If the collection is modified between <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> and <xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A>, <xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3b5d5-125">建立列舉值之後，集合已修改。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b5d5-125">The collection was modified after the enumerator was created.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>