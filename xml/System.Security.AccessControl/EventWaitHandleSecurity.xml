<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="EventWaitHandleSecurity.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5552d1bbce19f1c94b3fc43ff75cb4f46a5379a82.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">552d1bbce19f1c94b3fc43ff75cb4f46a5379a82</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Security.AccessControl.EventWaitHandleSecurity">
          <source>Represents the Windows access control security applied to a named system wait handle.</source>
          <target state="translated">表示套用至具名系統等候控制代碼 (Wait Handle) 的 Windows 存取控制安全性。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Security.AccessControl.EventWaitHandleSecurity">
          <source>This class cannot be inherited.</source>
          <target state="translated">這個類別無法被繼承。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.EventWaitHandleSecurity">
          <source>An <ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph> object specifies access rights for a named system wait handle, and also specifies the way access attempts are audited.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph>物件指定存取權限的具名的系統等候控制代碼，且也指定稽核嘗試存取的方式。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.EventWaitHandleSecurity">
          <source>Access rights to the wait handle are expressed as rules, with each access rule represented by an <ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleAccessRule&gt;</ph> object.</source>
          <target state="translated">等候控制代碼的存取權限會由每個存取規則的規則，以表示<ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleAccessRule&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.EventWaitHandleSecurity">
          <source>Each auditing rule is represented by an <ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleAuditRule&gt;</ph> object.</source>
          <target state="translated">每個稽核規則由<ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleAuditRule&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.EventWaitHandleSecurity">
          <source>This mirrors the underlying Windows security system, in which each securable object has at most one discretionary access control list (DACL) that controls access to the secured object, and at most one system access control list (SACL) that specifies which access attempts are audited.</source>
          <target state="translated">這會反映基礎的 Windows 安全性系統，其中每個安全性實體物件都有最多一個判別存取控制清單 (DACL) 控制存取安全的物件，並最多一個系統存取控制清單 (SACL) 指定的權限稽核嘗試。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.EventWaitHandleSecurity">
          <source>The DACL and SACL are ordered lists of access control entries (ACE) that specify access and auditing for users and groups.</source>
          <target state="translated">DACL，SACL 會排序清單的指定存取和稽核使用者和群組的存取控制項目 (ACE)。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.EventWaitHandleSecurity">
          <source>An <ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleAccessRule&gt;</ph> or <ph id="ph2">&lt;xref:System.Security.AccessControl.EventWaitHandleAuditRule&gt;</ph> object might represent more than one ACE.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleAccessRule&gt;</ph>或<ph id="ph2">&lt;xref:System.Security.AccessControl.EventWaitHandleAuditRule&gt;</ph>物件可能代表一個以上的 ACE。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.EventWaitHandleSecurity">
          <source>An <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> object can represent a local wait handle or a named system wait handle.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>物件可代表本機等候控制代碼或具名的系統等候控制代碼。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.EventWaitHandleSecurity">
          <source>Windows access control security is meaningful only for named system wait handles.</source>
          <target state="translated">Windows 存取控制安全性是有意義，只會針對具名的系統等候控制代碼。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.EventWaitHandleSecurity">
          <source>The <ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph>, <ph id="ph2">&lt;xref:System.Security.AccessControl.EventWaitHandleAccessRule&gt;</ph>, and <ph id="ph3">&lt;xref:System.Security.AccessControl.EventWaitHandleAuditRule&gt;</ph> classes hide the implementation details of ACLs and ACEs.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph>， <ph id="ph2">&lt;xref:System.Security.AccessControl.EventWaitHandleAccessRule&gt;</ph>，和<ph id="ph3">&lt;xref:System.Security.AccessControl.EventWaitHandleAuditRule&gt;</ph>類別隱藏 Acl 和 Ace 的實作詳細資料。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.EventWaitHandleSecurity">
          <source>They allow you to ignore the seventeen different ACE types and the complexity of correctly maintaining inheritance and propagation of access rights.</source>
          <target state="translated">它們可讓您忽略十七不同的 ACE 類型，並正確地維護繼承和存取權限傳播的複雜性。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.EventWaitHandleSecurity">
          <source>These objects are also designed to prevent the following common access control errors:</source>
          <target state="translated">這些物件也會設計是為了避免下列常見的存取控制項錯誤：</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.EventWaitHandleSecurity">
          <source>Creating a security descriptor with a null DACL.</source>
          <target state="translated">建立與 null 的 DACL 的安全性描述元。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.EventWaitHandleSecurity">
          <source>A null reference to a DACL allows any user to add access rules to an object, potentially creating a denial-of-service attack.</source>
          <target state="translated">DACL 的 null 參考可讓任何使用者新增到物件，也有可能產生的阻絕服務攻擊的存取規則。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.EventWaitHandleSecurity">
          <source>A new <ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph> object always starts with an empty DACL, which denies all access for all users.</source>
          <target state="translated">新<ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph>物件永遠會以空的 DACL，它會拒絕所有使用者的所有存取啟動。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.EventWaitHandleSecurity">
          <source>Violating the canonical ordering of ACEs.</source>
          <target state="translated">違反 Ace 的標準順序。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.EventWaitHandleSecurity">
          <source>If the ACE list in the DACL is not kept in the canonical order, users might inadvertently be given access to the secured object.</source>
          <target state="translated">如果 DACL 中的 ACE 清單不會保持在標準順序，使用者可能會不小心指定存取受保護的物件。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.EventWaitHandleSecurity">
          <source>For example, denied access rights must always appear before allowed access rights.</source>
          <target state="translated">比方說，拒絕的存取權限必須永遠出現之前允許的存取權限。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.EventWaitHandleSecurity">
          <source><ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph> objects maintain the correct order internally.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph> 物件會在內部維護正確的順序。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.EventWaitHandleSecurity">
          <source>Manipulating security descriptor flags, which should be under resource manager control only.</source>
          <target state="translated">管理安全性描述元旗標，它應該只資源管理員的控制下。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.EventWaitHandleSecurity">
          <source>Creating invalid combinations of ACE flags.</source>
          <target state="translated">建立無效的 ACE 旗標組合。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.EventWaitHandleSecurity">
          <source>Manipulating inherited ACEs.</source>
          <target state="translated">管理繼承的 Ace。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.EventWaitHandleSecurity">
          <source>Inheritance and propagation are handled by the resource manager, in response to changes you make to access and audit rules.</source>
          <target state="translated">繼承和傳用是由資源管理員，以回應變更您對存取和稽核規則處理。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.EventWaitHandleSecurity">
          <source>Inserting meaningless ACEs into ACLs.</source>
          <target state="translated">插入 Acl 無意義的 Ace。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.EventWaitHandleSecurity">
          <source>The only capabilities not supported by the .NET security objects are dangerous activities that should be avoided by the majority of application developers, such as the following:</source>
          <target state="translated">不支援.NET 安全性物件的唯一功能是危險的活動，應避免大部分的應用程式開發人員，如下所示：</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.EventWaitHandleSecurity">
          <source>Low-level tasks that are normally performed by the resource manager.</source>
          <target state="translated">通常由資源管理員執行的低階工作。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.EventWaitHandleSecurity">
          <source>Adding or removing access control entries in ways that do not maintain the canonical ordering.</source>
          <target state="translated">加入或移除存取控制項目不會維護標準順序的方式。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.EventWaitHandleSecurity">
          <source>To modify Windows access control security for a named wait handle, use the <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph> method to get the <ph id="ph2">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph> object.</source>
          <target state="translated">若要修改具名的等候控制代碼的 Windows 存取控制安全性，請使用<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph>方法來取得<ph id="ph2">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.EventWaitHandleSecurity">
          <source>Modify the security object by adding and removing rules, and then use the <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph> method to reattach it.</source>
          <target state="translated">加入和移除規則，來修改安全性物件，然後使用<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph>方法來重新附加它。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.EventWaitHandleSecurity">
          <source>Changes you make to an <ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph> object do not affect the access levels of the named wait handle until you call the <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph> method to assign the altered security object to the named wait handle.</source>
          <target state="translated">您所做的變更<ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph>物件不會影響具名的等候控制代碼的存取層級直到您呼叫<ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph>方法，以更改的安全性物件指派到具名的等候控制代碼。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.EventWaitHandleSecurity">
          <source>To copy access control security from one wait handle to another, use the <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph> method to get an <ph id="ph2">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph> object representing the access and audit rules for the first wait handle, and then use the <ph id="ph3">&lt;xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph> method, or a constructor that accepts an <ph id="ph4">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph> object, to assign those rules to the second wait handle.</source>
          <target state="translated">若要從一個等候控制代碼複製存取控制安全性，到另一個，使用<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph>方法來取得<ph id="ph2">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph>表示第一個等候控制代碼的存取和稽核規則的物件，然後使用<ph id="ph3">&lt;xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph>方法或建構函式可接受<ph id="ph4">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph>物件，這些規則將第二個等候控制代碼。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.EventWaitHandleSecurity">
          <source>Users with an investment in the security descriptor definition language (SDDL) can use the <ph id="ph1">&lt;xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A&gt;</ph> method to set access rules for a named wait handle, and the <ph id="ph2">&lt;xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A&gt;</ph> method to obtain a string that represents the access rules in SDDL format.</source>
          <target state="translated">中的安全性描述元定義語言 (SDDL) 投資的使用者可以使用<ph id="ph1">&lt;xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A&gt;</ph>方法，以設定存取規則命名為的等候控制代碼，而<ph id="ph2">&lt;xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A&gt;</ph>方法，以取得字串，代表 SDDL 格式中的存取規則。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.EventWaitHandleSecurity">
          <source>This is not recommended for new development.</source>
          <target state="translated">建議您不要開發新項目。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.EventWaitHandleSecurity">
          <source>The following code example demonstrates the separation between <ph id="ph1">&lt;xref:System.Security.AccessControl.AccessControlType.Allow&gt;</ph> rules and <ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType.Deny&gt;</ph> rules, and shows the combination of rights in compatible rules.</source>
          <target state="translated">下列程式碼範例示範之間的分離<ph id="ph1">&lt;xref:System.Security.AccessControl.AccessControlType.Allow&gt;</ph>規則和<ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType.Deny&gt;</ph>規則，並顯示相容的規則中的權限的組合。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.EventWaitHandleSecurity">
          <source>The example creates an <ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules.</source>
          <target state="translated">此範例會建立<ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph>物件、 將規則，允許和拒絕各種權限目前的使用者，並顯示規則的結果組。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.EventWaitHandleSecurity">
          <source>The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <ph id="ph1">&lt;xref:System.Security.AccessControl.AccessControlType.Allow&gt;</ph> rule.</source>
          <target state="translated">此範例會允許新的權限為目前的使用者，並顯示結果，顯示新的權限，系統會合併與現有<ph id="ph1">&lt;xref:System.Security.AccessControl.AccessControlType.Allow&gt;</ph>規則。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.EventWaitHandleSecurity">
          <source>This example does not attach the security object to a <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> object.</source>
          <target state="translated">此範例不會附加安全性物件至<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.EventWaitHandleSecurity">
          <source>Examples that attach security objects can be found in <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">中可以找到附加安全性物件的範例<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph>和<ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.EventWaitHandleSecurity" /&gt;</ph> class with default values.</source>
          <target state="translated">使用預設值，初始化 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.EventWaitHandleSecurity" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.#ctor">
          <source>A new <ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph> object always starts with an empty discretionary access list (DACL), which denies all access for all users.</source>
          <target state="translated">新<ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph>物件一律開頭空白的判別存取清單 (DACL)，它會拒絕所有使用者的所有存取。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.#ctor">
          <source>This class is not supported on Windows 98 or Windows Millennium Edition.</source>
          <target state="translated">Windows 98 或 Windows Millennium Edition 上不支援這個類別。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="P:System.Security.AccessControl.EventWaitHandleSecurity.AccessRightType">
          <source>Gets the enumeration type that the <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.EventWaitHandleSecurity" /&gt;</ph> class uses to represent access rights.</source>
          <target state="translated">取得 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.EventWaitHandleSecurity" /&gt;</ph> 類別用來表示存取權限的列舉型別。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.EventWaitHandleSecurity.AccessRightType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object representing the <ph id="ph2">&lt;see cref="T:System.Security.AccessControl.EventWaitHandleRights" /&gt;</ph> enumeration.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 物件，表示 <ph id="ph2">&lt;see cref="T:System.Security.AccessControl.EventWaitHandleRights" /&gt;</ph> 列舉型別。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.EventWaitHandleSecurity.AccessRightType">
          <source>Classes that derive from the <ph id="ph1">&lt;xref:System.Security.AccessControl.ObjectSecurity&gt;</ph> class override the <ph id="ph2">&lt;xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A&gt;</ph> property and return the type they use to represent access rights.</source>
          <target state="translated">類別衍生自<ph id="ph1">&lt;xref:System.Security.AccessControl.ObjectSecurity&gt;</ph>類別覆寫<ph id="ph2">&lt;xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A&gt;</ph>屬性，並傳回它們以表示的存取權限的類型。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.EventWaitHandleSecurity.AccessRightType">
          <source>When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct enumeration type to use with each security object.</source>
          <target state="translated">當您使用陣列或包含多個類型的安全性物件的集合時，使用這個屬性來判斷要用於每個安全性物件的正確的列舉類型。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Security.Principal.IdentityReference" /&gt;</ph> that identifies the user or group the rule applies to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.Principal.IdentityReference" /&gt;</ph>，可識別套用這個規則的使用者或群組。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>A bitwise combination of <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.EventWaitHandleRights" /&gt;</ph> values specifying the access rights to allow or deny, cast to an integer.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.AccessControl.EventWaitHandleRights" /&gt;</ph> 值的位元組合，指定允許或拒絕的存取權限 (轉型成整數)。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>Meaningless for named wait handles, because they have no hierarchy.</source>
          <target state="translated">命名為等候控制代碼是沒有意義的，因為它們並未具有階層架構。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>Meaningless for named wait handles, because they have no hierarchy.</source>
          <target state="translated">命名為等候控制代碼是沒有意義的，因為它們並未具有階層架構。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>Meaningless for named wait handles, because they have no hierarchy.</source>
          <target state="translated">命名為等候控制代碼是沒有意義的，因為它們並未具有階層架構。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph> values specifying whether the rights are allowed or denied.</source>
          <target state="translated">其中一個 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph> 值，指定允許還是拒絕權限。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>Creates a new access control rule for the specified user, with the specified access rights, access control, and flags.</source>
          <target state="translated">以指定的存取權限、存取控制和旗標，為指定的使用者建立新的存取控制規則。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.EventWaitHandleAccessRule" /&gt;</ph> object representing the specified rights for the specified user.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.AccessControl.EventWaitHandleAccessRule" /&gt;</ph> 物件，表示指定之使用者的指定權限。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>The recommended way to create access control rules is to use the constructors of the <ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleAccessRule&gt;</ph> class.</source>
          <target state="translated">建立存取控制規則的建議的方式是使用的建構函式<ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleAccessRule&gt;</ph>類別。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>Although inheritance and propagation flags are meaningless for named events, it is still possible to specify them.</source>
          <target state="translated">雖然繼承和傳播旗標是無意義的具名事件，就仍然可以指定它們。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>This is not recommended, because it needlessly complicates the maintenance of rules, for example by interfering with the combination of rules that would otherwise be compatible.</source>
          <target state="translated">這不是建議，因為它不必要地變得非常複雜的維護的規則，例如藉由干擾原本是相容的規則的組合。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source><ph id="ph1">&lt;paramref name="accessMask" /&gt;</ph>, <ph id="ph2">&lt;paramref name="inheritanceFlags" /&gt;</ph>, <ph id="ph3">&lt;paramref name="propagationFlags" /&gt;</ph>, or <ph id="ph4">&lt;paramref name="type" /&gt;</ph> specifies an invalid value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="accessMask" /&gt;</ph>、<ph id="ph2">&lt;paramref name="inheritanceFlags" /&gt;</ph>、<ph id="ph3">&lt;paramref name="propagationFlags" /&gt;</ph> 或 <ph id="ph4">&lt;paramref name="type" /&gt;</ph> 會指定無效的值。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source><ph id="ph1">&lt;paramref name="identityReference" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="identityReference" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source><ph id="ph1">&lt;paramref name="accessMask" /&gt;</ph> is zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="accessMask" /&gt;</ph> 為零。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source><ph id="ph1">&lt;paramref name="identityReference" /&gt;</ph> is neither of type <ph id="ph2">&lt;see cref="T:System.Security.Principal.SecurityIdentifier" /&gt;</ph>, nor of a type such as <ph id="ph3">&lt;see cref="T:System.Security.Principal.NTAccount" /&gt;</ph> that can be converted to type <ph id="ph4">&lt;see cref="T:System.Security.Principal.SecurityIdentifier" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="identityReference" /&gt;</ph> 既不是 <ph id="ph2">&lt;see cref="T:System.Security.Principal.SecurityIdentifier" /&gt;</ph> 型別，也不是可以轉換成 <ph id="ph3">&lt;see cref="T:System.Security.Principal.NTAccount" /&gt;</ph> 型別的型別 (例如 <ph id="ph4">&lt;see cref="T:System.Security.Principal.SecurityIdentifier" /&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="P:System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleType">
          <source>Gets the type that the <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.EventWaitHandleSecurity" /&gt;</ph> class uses to represent access rules.</source>
          <target state="translated">取得 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.EventWaitHandleSecurity" /&gt;</ph> 類別用來表示存取規則的型別。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object representing the <ph id="ph2">&lt;see cref="T:System.Security.AccessControl.EventWaitHandleAccessRule" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 物件，表示 <ph id="ph2">&lt;see cref="T:System.Security.AccessControl.EventWaitHandleAccessRule" /&gt;</ph> 類別。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleType">
          <source>Classes that derive from the <ph id="ph1">&lt;xref:System.Security.AccessControl.ObjectSecurity&gt;</ph> class override the <ph id="ph2">&lt;xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A&gt;</ph> property and return the type they use to represent access rules.</source>
          <target state="translated">類別衍生自<ph id="ph1">&lt;xref:System.Security.AccessControl.ObjectSecurity&gt;</ph>類別覆寫<ph id="ph2">&lt;xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A&gt;</ph>屬性，並傳回它們以表示存取規則的類型。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleType">
          <source>When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct access rule type to use with each security object.</source>
          <target state="translated">當您使用陣列或包含多個類型的安全性物件的集合時，使用這個屬性來判斷用於每個安全性物件的正確的存取規則類型。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>The access control rule to add.</source>
          <target state="translated">要加入的存取控制規則。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>Searches for a matching access control rule with which the new rule can be merged.</source>
          <target state="translated">搜尋可合併新規則的相符存取控制規則。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>If none are found, adds the new rule.</source>
          <target state="translated">如果找不到，就加入新規則。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>The <ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule%2A&gt;</ph> method searches for rules with the same user or group and the same <ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType&gt;</ph> as <ph id="ph3">`rule`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule%2A&gt;</ph>方法會搜尋具有相同的使用者或群組及相同的規則<ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType&gt;</ph>為<ph id="ph3">`rule`</ph>。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>If none are found, <ph id="ph1">`rule`</ph> is added.</source>
          <target state="translated">如果找不到，<ph id="ph1">`rule`</ph>加入。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>If a matching rule is found, the rights in <ph id="ph1">`rule`</ph> are merged with the existing rule.</source>
          <target state="translated">如果找到相符的規則是中的權限<ph id="ph1">`rule`</ph>會合併與現有的規則。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>The following code example demonstrates the separation between <ph id="ph1">&lt;xref:System.Security.AccessControl.AccessControlType.Allow&gt;</ph> rules and <ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType.Deny&gt;</ph> rules, and shows the combination of rights in compatible rules.</source>
          <target state="translated">下列程式碼範例示範之間的分離<ph id="ph1">&lt;xref:System.Security.AccessControl.AccessControlType.Allow&gt;</ph>規則和<ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType.Deny&gt;</ph>規則，並顯示相容的規則中的權限的組合。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>The example creates an <ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules.</source>
          <target state="translated">此範例會建立<ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph>物件、 將規則，允許和拒絕各種權限目前的使用者，並顯示規則的結果組。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <ph id="ph1">&lt;xref:System.Security.AccessControl.AccessControlType.Allow&gt;</ph> rule.</source>
          <target state="translated">此範例會允許新的權限為目前的使用者，並顯示結果，顯示新的權限，系統會合併與現有<ph id="ph1">&lt;xref:System.Security.AccessControl.AccessControlType.Allow&gt;</ph>規則。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>This example does not attach the security object to a <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> object.</source>
          <target state="translated">此範例不會附加安全性物件至<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>Examples that attach security objects can be found in <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">中可以找到附加安全性物件的範例<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph>和<ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.AddAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)">
          <source>The audit rule to add.</source>
          <target state="translated">要加入的稽核規則。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.AddAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)">
          <source>The user specified by this rule determines the search.</source>
          <target state="translated">這個規則指定的使用者會決定搜尋方式。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.AddAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)">
          <source>Searches for an audit rule with which the new rule can be merged.</source>
          <target state="translated">搜尋可合併新規則的稽核規則。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.AddAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)">
          <source>If none are found, adds the new rule.</source>
          <target state="translated">如果找不到，就加入新規則。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.AddAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)">
          <source>The <ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity.AddAuditRule%2A&gt;</ph> method searches for rules with the same user or group as <ph id="ph2">`rule`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity.AddAuditRule%2A&gt;</ph>方法具有相同的使用者或群組做為規則會搜尋<ph id="ph2">`rule`</ph>。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.AddAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)">
          <source>If none are found, <ph id="ph1">`rule`</ph> is added.</source>
          <target state="translated">如果找不到，<ph id="ph1">`rule`</ph>加入。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.AddAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)">
          <source>If a matching rule is found, the flags in <ph id="ph1">`rule`</ph> are merged into the existing rule.</source>
          <target state="translated">如果找到相符的規則是中的旗標<ph id="ph1">`rule`</ph>會合併到現有的規則。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.AddAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)">
          <source><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Security.Principal.IdentityReference" /&gt;</ph> that identifies the user or group the rule applies to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.Principal.IdentityReference" /&gt;</ph>，可識別套用這個規則的使用者或群組。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source>A bitwise combination of <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.EventWaitHandleRights" /&gt;</ph> values specifying the access rights to audit, cast to an integer.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.AccessControl.EventWaitHandleRights" /&gt;</ph> 值的位元組合，指定要稽核的存取權限 (轉型成整數)。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source>Meaningless for named wait handles, because they have no hierarchy.</source>
          <target state="translated">命名為等候控制代碼是沒有意義的，因為它們並未具有階層架構。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source>Meaningless for named wait handles, because they have no hierarchy.</source>
          <target state="translated">命名為等候控制代碼是沒有意義的，因為它們並未具有階層架構。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source>Meaningless for named wait handles, because they have no hierarchy.</source>
          <target state="translated">命名為等候控制代碼是沒有意義的，因為它們並未具有階層架構。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source>A bitwise combination of <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AuditFlags" /&gt;</ph> values specifying whether to audit successful access, failed access, or both.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AuditFlags" /&gt;</ph> 值的位元組合，指定是否要稽核成功存取、失敗存取或兩者皆稽核。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source>Creates a new audit rule, specifying the user the rule applies to, the access rights to audit, and the outcome that triggers the audit rule.</source>
          <target state="translated">以指定要套用規則的使用者的方式，建立新的稽核規則、要稽核的存取權限以及觸發該稽核規則的結果。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.EventWaitHandleAuditRule" /&gt;</ph> object representing the specified audit rule for the specified user.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.AccessControl.EventWaitHandleAuditRule" /&gt;</ph> 物件，表示指定之使用者的指定稽核規則。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source>The return type of the method is the base class, <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AuditRule" /&gt;</ph>, but the return value can be cast safely to the derived class.</source>
          <target state="translated">此方法的傳回型別為基底類別 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AuditRule" /&gt;</ph>，但是傳回值可以安全地轉型為衍生類別。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source>The recommended way to create audit rules is to use the constructors of the <ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleAuditRule&gt;</ph> class.</source>
          <target state="translated">若要建立的稽核規則的建議的方式是使用的建構函式<ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleAuditRule&gt;</ph>類別。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source>Although inheritance and propagation flags are meaningless for named events, it is still possible to specify them.</source>
          <target state="translated">雖然繼承和傳播旗標是無意義的具名事件，就仍然可以指定它們。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source>This is not recommended, because it needlessly complicates the maintenance of rules, for example by interfering with the combination of rules that would otherwise be compatible.</source>
          <target state="translated">這不是建議，因為它不必要地變得非常複雜的維護的規則，例如藉由干擾原本是相容的規則的組合。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source><ph id="ph1">&lt;paramref name="accessMask" /&gt;</ph>, <ph id="ph2">&lt;paramref name="inheritanceFlags" /&gt;</ph>, <ph id="ph3">&lt;paramref name="propagationFlags" /&gt;</ph>, or <ph id="ph4">&lt;paramref name="flags" /&gt;</ph> specifies an invalid value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="accessMask" /&gt;</ph>、<ph id="ph2">&lt;paramref name="inheritanceFlags" /&gt;</ph>、<ph id="ph3">&lt;paramref name="propagationFlags" /&gt;</ph> 或 <ph id="ph4">&lt;paramref name="flags" /&gt;</ph> 會指定無效的值。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source><ph id="ph1">&lt;paramref name="identityReference" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="identityReference" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source><ph id="ph1">&lt;paramref name="accessMask" /&gt;</ph> is zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="accessMask" /&gt;</ph> 為零。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source><ph id="ph1">&lt;paramref name="identityReference" /&gt;</ph> is neither of type <ph id="ph2">&lt;see cref="T:System.Security.Principal.SecurityIdentifier" /&gt;</ph>, nor of a type such as <ph id="ph3">&lt;see cref="T:System.Security.Principal.NTAccount" /&gt;</ph> that can be converted to type <ph id="ph4">&lt;see cref="T:System.Security.Principal.SecurityIdentifier" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="identityReference" /&gt;</ph> 既不是 <ph id="ph2">&lt;see cref="T:System.Security.Principal.SecurityIdentifier" /&gt;</ph> 型別，也不是可以轉換成 <ph id="ph3">&lt;see cref="T:System.Security.Principal.NTAccount" /&gt;</ph> 型別的型別 (例如 <ph id="ph4">&lt;see cref="T:System.Security.Principal.SecurityIdentifier" /&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="P:System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleType">
          <source>Gets the type that the <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.EventWaitHandleSecurity" /&gt;</ph> class uses to represent audit rules.</source>
          <target state="translated">取得 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.EventWaitHandleSecurity" /&gt;</ph> 類別用來表示稽核規則的類型。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object representing the <ph id="ph2">&lt;see cref="T:System.Security.AccessControl.EventWaitHandleAuditRule" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 物件，表示 <ph id="ph2">&lt;see cref="T:System.Security.AccessControl.EventWaitHandleAuditRule" /&gt;</ph> 類別。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleType">
          <source>Classes that derive from the <ph id="ph1">&lt;xref:System.Security.AccessControl.ObjectSecurity&gt;</ph> class override the <ph id="ph2">&lt;xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A&gt;</ph> property and return the type they use to represent audit rights.</source>
          <target state="translated">類別衍生自<ph id="ph1">&lt;xref:System.Security.AccessControl.ObjectSecurity&gt;</ph>類別覆寫<ph id="ph2">&lt;xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A&gt;</ph>屬性和傳回類型，用以代表稽核權限。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleType">
          <source>When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct audit rule type to use with each security object.</source>
          <target state="translated">當您使用陣列或包含多個類型的安全性物件的集合時，使用這個屬性來判斷用於每個安全性物件的正確的稽核規則類型。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.EventWaitHandleAccessRule" /&gt;</ph> that specifies the user and <ph id="ph2">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph> to search for, and a set of inheritance and propagation flags that a matching rule, if found, must be compatible with.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.AccessControl.EventWaitHandleAccessRule" /&gt;</ph>，其會指定要搜尋的使用者和 <ph id="ph2">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph>，以及必須與相符的規則 (如果找到的話) 相容的繼承和傳用旗標集合。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>Specifies the rights to remove from the compatible rule, if found.</source>
          <target state="translated">如果找到的話，指定從相容的規則中移除此權限。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>Searches for an access control rule with the same user and <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph> (allow or deny) as the specified access rule, and with compatible inheritance and propagation flags; if such a rule is found, the rights contained in the specified access rule are removed from it.</source>
          <target state="translated">搜尋具有與指定之存取規則相同的使用者和 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph> (允許或拒絕) 以及具有相容的繼承和傳用旗標的存取控制規則。如果找到這樣的規則，則會移除指定之存取規則中所包含的權限。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a compatible rule is found; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果找到相容的規則，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>The current <ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph> is searched for a rule that has the same user and the same <ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType&gt;</ph> value as <ph id="ph3">`rule`</ph>.</source>
          <target state="translated">目前<ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph>擁有相同的使用者和相同的規則會搜尋<ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType&gt;</ph>視為<ph id="ph3">`rule`</ph>。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>If no such rule is found, no action is taken, and the method returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">如果找到任何這類規則，會採取任何動作，而且方法會傳回<ph id="ph1">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>If matching rules are found, their inheritance and compatibility flags are checked for compatibility with the flags specified in <ph id="ph1">`rule`</ph>.</source>
          <target state="translated">如果找到比對規則，其繼承和相容性旗標會檢查在指定的旗標與相容性的<ph id="ph1">`rule`</ph>。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>If no compatible rule is found, no action is taken, and the method returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">如果找到不相容的規則，會採取任何動作，而且方法會傳回<ph id="ph1">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>If a rule with compatible flags is found, the rights specified in <ph id="ph1">`rule`</ph> are removed from the compatible rule, and the method returns <ph id="ph2">`true`</ph>.</source>
          <target state="translated">如果找到具有相容的旗標的規則，在指定的權限<ph id="ph1">`rule`</ph>移除了相容的規則，而且方法會傳回<ph id="ph2">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>If <ph id="ph1">`rule`</ph> specifies rights not contained in the compatible rule, no action is taken with respect to those rights.</source>
          <target state="translated">如果<ph id="ph1">`rule`</ph>指定不相容的規則中包含的權限，就會採取任何動作，與這些權限。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>If all rights are removed from the compatible rule, the entire rule is removed from the current <ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph> object.</source>
          <target state="translated">如果從相容的規則會移除所有的權限，整個規則會移除從目前<ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>Although you can specify inheritance and propagation flags for event access rules, by creating them with the <ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory%2A&gt;</ph> method, this is not recommended.</source>
          <target state="translated">雖然您可以藉由建立它們與指定之事件的存取規則、 繼承和傳播旗標<ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory%2A&gt;</ph>，這不建議使用方法。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>Inheritance and propagation have no meaning for named events, and they make the maintenance of access rules more complicated.</source>
          <target state="translated">繼承和傳播具名事件，無意義，請存取規則的維護更為複雜。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule%2A&gt;</ph> method to remove rights from an <ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType.Allow&gt;</ph> rule in an <ph id="ph3">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph> object.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule%2A&gt;</ph>方法中移除的權限從<ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType.Allow&gt;</ph>規則中<ph id="ph3">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>It also shows that other rights in <ph id="ph1">`rule`</ph> are ignored.</source>
          <target state="translated">它也會顯示中的其他權限<ph id="ph1">`rule`</ph>都會被忽略。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>The example creates an <ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph> object and adds rules that allow and deny various rights for the current user.</source>
          <target state="translated">此範例會建立<ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph>物件並將加入規則，允許和拒絕目前使用者的各種權限。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>The rights allowed include <ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleRights.Modify&gt;</ph>, <ph id="ph2">&lt;xref:System.Security.AccessControl.EventWaitHandleRights.ReadPermissions&gt;</ph>, and <ph id="ph3">&lt;xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize&gt;</ph>.</source>
          <target state="translated">權限允許包含<ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleRights.Modify&gt;</ph>， <ph id="ph2">&lt;xref:System.Security.AccessControl.EventWaitHandleRights.ReadPermissions&gt;</ph>，和<ph id="ph3">&lt;xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>The example then creates a new rule for the current user, including <ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleRights.ReadPermissions&gt;</ph> and <ph id="ph2">&lt;xref:System.Security.AccessControl.EventWaitHandleRights.TakeOwnership&gt;</ph> rights, and uses that rule with the <ph id="ph3">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule%2A&gt;</ph> method to remove <ph id="ph4">&lt;xref:System.Security.AccessControl.EventWaitHandleRights.ReadPermissions&gt;</ph> from the <ph id="ph5">&lt;xref:System.Security.AccessControl.AccessControlType.Allow&gt;</ph> rule in the <ph id="ph6">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph> object.</source>
          <target state="translated">這個範例會建立新的規則，目前的使用者，包括<ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleRights.ReadPermissions&gt;</ph>和<ph id="ph2">&lt;xref:System.Security.AccessControl.EventWaitHandleRights.TakeOwnership&gt;</ph>權限，並使用與該規則<ph id="ph3">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule%2A&gt;</ph>方法移除<ph id="ph4">&lt;xref:System.Security.AccessControl.EventWaitHandleRights.ReadPermissions&gt;</ph>從<ph id="ph5">&lt;xref:System.Security.AccessControl.AccessControlType.Allow&gt;</ph>規則中<ph id="ph6">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>The <ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleRights.TakeOwnership&gt;</ph> right in <ph id="ph2">`rule`</ph> is ignored.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleRights.TakeOwnership&gt;</ph>中由左至右<ph id="ph2">`rule`</ph>會被忽略。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>This example does not attach the security object to a <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> object.</source>
          <target state="translated">此範例不會附加安全性物件至<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>Examples that attach security objects can be found in <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">中可以找到附加安全性物件的範例<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph>和<ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.EventWaitHandleAccessRule" /&gt;</ph> that specifies the user and <ph id="ph2">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph> to search for.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.AccessControl.EventWaitHandleAccessRule" /&gt;</ph>，指定要搜尋的使用者和 <ph id="ph2">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>Any rights specified by this rule are ignored.</source>
          <target state="translated">忽略根據此規則指定的任何權限。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>Searches for all access control rules with the same user and <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph> (allow or deny) as the specified rule and, if found, removes them.</source>
          <target state="translated">搜尋與指定規則具有相同使用者和 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph> (允許或拒絕) 的所有存取控制規則，如果找到的話，便加以移除。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>The current <ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph> is searched for rules that have the same user and the same <ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType&gt;</ph> value as <ph id="ph3">`rule`</ph>.</source>
          <target state="translated">目前<ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph>具備相同的使用者和相同的規則會搜尋<ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType&gt;</ph>視為<ph id="ph3">`rule`</ph>。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>Any rights specified by <ph id="ph1">`rule`</ph> are ignored when performing this search.</source>
          <target state="translated">指定的任何權限<ph id="ph1">`rule`</ph>時執行這項搜尋將會被忽略。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>All matching rules are removed.</source>
          <target state="translated">會移除所有比對規則。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>If no matching rules are found, no action is taken.</source>
          <target state="translated">如果找不到任何對應的規則，會不採取任何動作。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>The following code example shows that the <ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll%2A&gt;</ph> method removes all rules that match user and <ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType&gt;</ph>, ignoring rights.</source>
          <target state="translated">下列程式碼範例顯示<ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll%2A&gt;</ph>方法移除符合使用者的所有規則和<ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType&gt;</ph>，略過權限。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>The example creates an <ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph> object, adds rules that allow and deny various rights for the current user, and then merges additional rights into the <ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType.Allow&gt;</ph> rule.</source>
          <target state="translated">此範例會建立<ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph>物件、 將規則，允許和拒絕各種權限目前的使用者，並接著將合併到其他的權限<ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType.Allow&gt;</ph>規則。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>The example then creates a new rule that allows the current user to take ownership, and uses that rule to remove the <ph id="ph1">&lt;xref:System.Security.AccessControl.AccessControlType.Allow&gt;</ph> rule from the <ph id="ph2">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph> object.</source>
          <target state="translated">這個範例會建立新的規則，可讓目前的使用者取得擁有權，並使用該規則，移除<ph id="ph1">&lt;xref:System.Security.AccessControl.AccessControlType.Allow&gt;</ph>規則從<ph id="ph2">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>This example does not attach the security object to a <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> object.</source>
          <target state="translated">此範例不會附加安全性物件至<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>Examples that attach security objects can be found in <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">中可以找到附加安全性物件的範例<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph>和<ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.EventWaitHandleAccessRule" /&gt;</ph> to remove.</source>
          <target state="translated">要移除的 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.EventWaitHandleAccessRule" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>Searches for an access control rule that exactly matches the specified rule and, if found, removes it.</source>
          <target state="translated">搜尋與指定規則完全相符的存取控制規則，如果找到的話，便加以移除。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>The rule is removed only if it exactly matches <ph id="ph1">`rule`</ph> in all details, including flags.</source>
          <target state="translated">此規則會移除它完全符合時，才<ph id="ph1">`rule`</ph>中所有詳細資料，包括旗標。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>Other rules with the same user and <ph id="ph1">&lt;xref:System.Security.AccessControl.AccessControlType&gt;</ph> are not affected.</source>
          <target state="translated">其他規則具有相同的使用者和<ph id="ph1">&lt;xref:System.Security.AccessControl.AccessControlType&gt;</ph>不會受到影響。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>A rule represents one or more underlying access control entries (ACE), and these entries are split or combined as necessary when you modify the access security rules for a user.</source>
          <target state="translated">規則表示一或多個基礎存取控制項目 (ACE)，而且這些項目分割或修改使用者存取安全性規則時，視需要結合。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>Thus, a rule might no longer exist in the specific form it had when it was added, and in that case the <ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific%2A&gt;</ph> method cannot remove it.</source>
          <target state="translated">因此，規則不再存在於在特定的表單時加入，然後在此情況下<ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific%2A&gt;</ph>方法無法將其移除。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>The following code example shows that the <ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific%2A&gt;</ph> method requires an exact match in order to remove a rule, and that rules to allow and deny rights are independent of each other.</source>
          <target state="translated">下列程式碼範例顯示<ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific%2A&gt;</ph>方法需要完全相符，才能移除規則，與規則，以允許和拒絕權限會彼此獨立。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>The example creates an <ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph> object, adds rules that allow and deny various rights for the current user, and then merges additional rights into the <ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType.Allow&gt;</ph> access rule.</source>
          <target state="translated">此範例會建立<ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph>物件、 將規則，允許和拒絕各種權限目前的使用者，並接著將合併到其他的權限<ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType.Allow&gt;</ph>存取規則。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>The example then passes the original <ph id="ph1">&lt;xref:System.Security.AccessControl.AccessControlType.Allow&gt;</ph> rule to the <ph id="ph2">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific%2A&gt;</ph> method, and displays the results, showing that nothing is deleted.</source>
          <target state="translated">此範例接著會將傳遞的原始<ph id="ph1">&lt;xref:System.Security.AccessControl.AccessControlType.Allow&gt;</ph>規則<ph id="ph2">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific%2A&gt;</ph>方法，並顯示結果，並顯示不會刪除。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>The example then constructs a rule that matches the <ph id="ph1">&lt;xref:System.Security.AccessControl.AccessControlType.Allow&gt;</ph> rule in the <ph id="ph2">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph> object, and successfully uses the <ph id="ph3">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific%2A&gt;</ph> method to remove the rule.</source>
          <target state="translated">此範例接著會建構規則符合<ph id="ph1">&lt;xref:System.Security.AccessControl.AccessControlType.Allow&gt;</ph>規則中<ph id="ph2">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph>物件，並已成功使用<ph id="ph3">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific%2A&gt;</ph>方法來移除規則。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>This example does not attach the security object to a <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> object.</source>
          <target state="translated">此範例不會附加安全性物件至<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>Examples that attach security objects can be found in <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">中可以找到附加安全性物件的範例<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph>和<ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.EventWaitHandleAuditRule" /&gt;</ph> that specifies the user to search for and a set of inheritance and propagation flags that a matching rule, if found, must be compatible with.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.AccessControl.EventWaitHandleAuditRule" /&gt;</ph>，其會指定要搜尋的使用者，以及必須與相符的規則 (如果找到的話) 相容的繼承和傳用旗標集合。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)">
          <source>Specifies the rights to remove from the compatible rule, if found.</source>
          <target state="translated">如果找到的話，指定從相容的規則中移除此權限。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)">
          <source>Searches for an audit rule with the same user as the specified rule, and with compatible inheritance and propagation flags; if a compatible rule is found, the rights contained in the specified rule are removed from it.</source>
          <target state="translated">搜尋具有與指定之規則相同的使用者以及具有相容的繼承和傳用旗標的稽核規則。如果找到了相容的規則，則會移除指定之規則中所包含的權限。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a compatible rule is found; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果找到相容的規則，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)">
          <source>The current <ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph> is searched for an audit rule that has the same user as <ph id="ph2">`rule`</ph>.</source>
          <target state="translated">目前<ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph>搜尋具有相同的使用者的稽核規則<ph id="ph2">`rule`</ph>。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)">
          <source>If no such rule is found, no action is taken, and the method returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">如果找到任何這類規則，會採取任何動作，而且方法會傳回<ph id="ph1">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)">
          <source>If matching rules are found, their inheritance and compatibility flags are checked for compatibility with the flags specified in <ph id="ph1">`rule`</ph>.</source>
          <target state="translated">如果找到比對規則，其繼承和相容性旗標會檢查在指定的旗標與相容性的<ph id="ph1">`rule`</ph>。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)">
          <source>If no compatible rule is found, no action is taken, and the method returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">如果找到不相容的規則，會採取任何動作，而且方法會傳回<ph id="ph1">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)">
          <source>If a rule with compatible flags is found, the rights specified in <ph id="ph1">`rule`</ph> are removed from the compatible rule, and the method returns <ph id="ph2">`true`</ph>.</source>
          <target state="translated">如果找到具有相容的旗標的規則，在指定的權限<ph id="ph1">`rule`</ph>移除了相容的規則，而且方法會傳回<ph id="ph2">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)">
          <source>If <ph id="ph1">`rule`</ph> specifies rights not contained in the compatible rule, no action is taken with respect to those rights.</source>
          <target state="translated">如果<ph id="ph1">`rule`</ph>指定不相容的規則中包含的權限，就會採取任何動作，與這些權限。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)">
          <source>If all rights are removed from the compatible rule, the entire rule is removed from the current <ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph> object.</source>
          <target state="translated">如果從相容的規則會移除所有的權限，整個規則會移除從目前<ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)">
          <source>Although you can specify inheritance and propagation flags for event audit rules, by creating them with the <ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory%2A&gt;</ph> method, this is not recommended.</source>
          <target state="translated">雖然您可以藉由建立它們與指定之事件的稽核規則、 繼承和傳播旗標<ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory%2A&gt;</ph>，這不建議使用方法。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)">
          <source>Inheritance and propagation have no meaning for named events, and they make the maintenance of audit rules more complicated.</source>
          <target state="translated">繼承和傳播具名事件，無意義，請稽核規則的維護更為複雜。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)">
          <source><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleAll(System.Security.AccessControl.EventWaitHandleAuditRule)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.EventWaitHandleAuditRule" /&gt;</ph> that specifies the user to search for.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.AccessControl.EventWaitHandleAuditRule" /&gt;</ph>，指定要搜尋的使用者。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleAll(System.Security.AccessControl.EventWaitHandleAuditRule)">
          <source>Any rights specified by this rule are ignored.</source>
          <target state="translated">忽略根據此規則指定的任何權限。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleAll(System.Security.AccessControl.EventWaitHandleAuditRule)">
          <source>Searches for all audit rules with the same user as the specified rule and, if found, removes them.</source>
          <target state="translated">搜尋與所指定規則有相同使用者的所有稽核規則，找到以後將其移除。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleAll(System.Security.AccessControl.EventWaitHandleAuditRule)">
          <source>The current <ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph> is searched for audit rules that have the same user as <ph id="ph2">`rule`</ph>.</source>
          <target state="translated">目前<ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph>搜尋中是否有具有相同的使用者的稽核規則<ph id="ph2">`rule`</ph>。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleAll(System.Security.AccessControl.EventWaitHandleAuditRule)">
          <source>Any rights specified by <ph id="ph1">`rule`</ph> are ignored when performing this search.</source>
          <target state="translated">指定的任何權限<ph id="ph1">`rule`</ph>時執行這項搜尋將會被忽略。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleAll(System.Security.AccessControl.EventWaitHandleAuditRule)">
          <source>All matching rules are removed.</source>
          <target state="translated">會移除所有比對規則。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleAll(System.Security.AccessControl.EventWaitHandleAuditRule)">
          <source>If no matching rules are found, no action is taken.</source>
          <target state="translated">如果找不到任何對應的規則，會不採取任何動作。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleAll(System.Security.AccessControl.EventWaitHandleAuditRule)">
          <source><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.EventWaitHandleAuditRule)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.EventWaitHandleAuditRule" /&gt;</ph> to remove.</source>
          <target state="translated">要移除的 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.EventWaitHandleAuditRule" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.EventWaitHandleAuditRule)">
          <source>Searches for an audit rule that exactly matches the specified rule and, if found, removes it.</source>
          <target state="translated">搜尋與指定規則完全相符的稽核規則，如果找到的話，便加以移除。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.EventWaitHandleAuditRule)">
          <source>The rule is removed only if it exactly matches <ph id="ph1">`rule`</ph> in all details, including flags.</source>
          <target state="translated">此規則會移除它完全符合時，才<ph id="ph1">`rule`</ph>中所有詳細資料，包括旗標。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.EventWaitHandleAuditRule)">
          <source>Other audit rules for the same user are not affected.</source>
          <target state="translated">不會影響同一個使用者的其他稽核規則。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.EventWaitHandleAuditRule)">
          <source>A rule represents one or more underlying access control entries (ACE), and these entries are split or combined as necessary when you modify the audit security rules for a user.</source>
          <target state="translated">規則表示一或多個基礎存取控制項目 (ACE)，而且這些項目分割或修改使用者的安全性稽核規則時，視需要結合。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.EventWaitHandleAuditRule)">
          <source>Thus, a rule might no longer exist in the specific form it had when it was added, and in that case the <ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleSpecific%2A&gt;</ph> method cannot remove it.</source>
          <target state="translated">因此，規則不再存在於在特定的表單時加入，然後在此情況下<ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleSpecific%2A&gt;</ph>方法無法將其移除。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.EventWaitHandleAuditRule)">
          <source><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.EventWaitHandleAccessRule" /&gt;</ph> to add.</source>
          <target state="translated">要加入的 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.EventWaitHandleAccessRule" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>The user specified by this rule determines the rules to remove before this rule is added.</source>
          <target state="translated">這個規則指定的使用者會決定在加入這項規則之前要移除的規則。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>Removes all access control rules with the same user as the specified rule, regardless of <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph>, and then adds the specified rule.</source>
          <target state="translated">移除與指定規則具有相同使用者的所有存取控制規則 (不論 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph> 為何)，然後加入指定規則。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>If there are no access rules whose user matches the specified rule, <ph id="ph1">`rule`</ph> is added.</source>
          <target state="translated">如果沒有使用者符合指定之規則的存取規則<ph id="ph1">`rule`</ph>加入。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>The following code example shows how the <ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule%2A&gt;</ph> method replaces all rules for the matching user with the rule specified for the match.</source>
          <target state="translated">下列程式碼範例示範如何<ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule%2A&gt;</ph>方法會取代為指定的比對的規則比對使用者的所有規則。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>The example creates an <ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph> object and adds rules that allow and deny various rights for the current user.</source>
          <target state="translated">此範例會建立<ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph>物件並將加入規則，允許和拒絕目前使用者的各種權限。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>The example then creates a new rule that allows the current user full control, and uses the <ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule%2A&gt;</ph> method to replace both of the existing rules with the new rule.</source>
          <target state="translated">這個範例會建立新的規則，可讓您目前的使用者完整控制，並使用<ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule%2A&gt;</ph>方法，以使用新的規則來取代這兩個現有的規則。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>This example does not attach the security object to a <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> object.</source>
          <target state="translated">此範例不會附加安全性物件至<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>Examples that attach security objects can be found in <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">中可以找到附加安全性物件的範例<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph>和<ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.EventWaitHandleAccessRule" /&gt;</ph> to add.</source>
          <target state="translated">要加入的 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.EventWaitHandleAccessRule" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>The user and <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph> of this rule determine the rules to remove before this rule is added.</source>
          <target state="translated">這個規則的使用者和 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph> 會決定在加入這項規則之前要移除的規則。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>Removes all access control rules with the same user and <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph> (allow or deny) as the specified rule, and then adds the specified rule.</source>
          <target state="translated">移除與指定規則具有相同使用者和 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph> (允許或拒絕) 的所有存取控制規則，然後加入指定規則。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>If the specified rule has <ph id="ph1">&lt;xref:System.Security.AccessControl.AccessControlType.Allow&gt;</ph>, the effect of this method is to remove all <ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType.Allow&gt;</ph> rules for the specified user, replacing them with the specified rule.</source>
          <target state="translated">如果指定的規則有<ph id="ph1">&lt;xref:System.Security.AccessControl.AccessControlType.Allow&gt;</ph>，這個方法的效果是要移除所有<ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType.Allow&gt;</ph>規則所指定的使用者，將其取代為指定的規則。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>If the specified rule has <ph id="ph1">&lt;xref:System.Security.AccessControl.AccessControlType.Deny&gt;</ph>, all <ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType.Deny&gt;</ph> rules for the specified user are replaced with the specified rule.</source>
          <target state="translated">如果指定的規則有<ph id="ph1">&lt;xref:System.Security.AccessControl.AccessControlType.Deny&gt;</ph>，則所有<ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType.Deny&gt;</ph>規則指定的使用者都取代成指定的規則。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>If there are no rules whose user and <ph id="ph1">&lt;xref:System.Security.AccessControl.AccessControlType&gt;</ph> match the specified rule, <ph id="ph2">`rule`</ph> is added.</source>
          <target state="translated">如果沒有規則的使用者和<ph id="ph1">&lt;xref:System.Security.AccessControl.AccessControlType&gt;</ph>符合指定之規則<ph id="ph2">`rule`</ph>加入。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>The following code example shows how the <ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule%2A&gt;</ph> method removes all rules that match both the user and the <ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType&gt;</ph> of <ph id="ph3">`rule`</ph>, replacing them with <ph id="ph4">`rule`</ph>.</source>
          <target state="translated">下列程式碼範例示範如何<ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule%2A&gt;</ph>方法移除符合這兩個使用者的所有規則和<ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType&gt;</ph>的<ph id="ph3">`rule`</ph>，取代它們與<ph id="ph4">`rule`</ph>。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>The example creates an <ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph> object and adds rules that allow and deny various rights for the current user.</source>
          <target state="translated">此範例會建立<ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph>物件並將加入規則，允許和拒絕目前使用者的各種權限。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>The example then creates a new rule that allows the current user full control, and uses the <ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule%2A&gt;</ph> method to replace the existing <ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType.Allow&gt;</ph> rule with the new rule.</source>
          <target state="translated">這個範例會建立新的規則，可讓您目前的使用者完整控制，並使用<ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule%2A&gt;</ph>方法來取代現有<ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType.Allow&gt;</ph>使用新的規則的規則。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>The rule that denies access is not affected.</source>
          <target state="translated">不受影響的規則，拒絕存取。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>This example does not attach the security object to a <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> object.</source>
          <target state="translated">此範例不會附加安全性物件至<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source>Examples that attach security objects can be found in <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">中可以找到附加安全性物件的範例<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph>和<ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)">
          <source><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.SetAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.EventWaitHandleAuditRule" /&gt;</ph> to add.</source>
          <target state="translated">要加入的 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.EventWaitHandleAuditRule" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.SetAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)">
          <source>The user specified by this rule determines the rules to remove before this rule is added.</source>
          <target state="translated">這個規則指定的使用者會決定在加入這項規則之前要移除的規則。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.SetAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)">
          <source>Removes all audit rules with the same user as the specified rule, regardless of the <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AuditFlags" /&gt;</ph> value, and then adds the specified rule.</source>
          <target state="translated">移除與指定規則具有相同使用者的所有稽核規則 (不論 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AuditFlags" /&gt;</ph> 值為何)，然後加入指定規則。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.SetAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)">
          <source>If there are no audit rules whose user matches the specified rule, <ph id="ph1">`rule`</ph> is added.</source>
          <target state="translated">如果沒有使用者符合指定之規則的稽核規則<ph id="ph1">`rule`</ph>加入。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.EventWaitHandleSecurity.SetAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)">
          <source><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>