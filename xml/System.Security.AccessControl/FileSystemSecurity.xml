<Type Name="FileSystemSecurity" FullName="System.Security.AccessControl.FileSystemSecurity">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3ed70231f637f02824c4e79226b8f2d17770a738" />
    <Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="09/22/2018" />
    <Meta Name="ms.locfileid" Value="46680806" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class FileSystemSecurity : System.Security.AccessControl.NativeObjectSecurity" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit FileSystemSecurity extends System.Security.AccessControl.NativeObjectSecurity" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.FileSystemSecurity" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class FileSystemSecurity&#xA;Inherits NativeObjectSecurity" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileSystemSecurity abstract : System::Security::AccessControl::NativeObjectSecurity" />
  <TypeSignature Language="F#" Value="type FileSystemSecurity = class&#xA;    inherit NativeObjectSecurity" />
  <AssemblyInfo>
    <AssemblyName>System.IO.FileSystem.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.AccessControl.NativeObjectSecurity</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示檔案或目錄的存取控制 (Access Control) 和稽核安全性。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.FileSystemSecurity>類別是基底類別<xref:System.Security.AccessControl.FileSecurity>和<xref:System.Security.AccessControl.DirectorySecurity>類別。  這些類別代表所有的系統檔案或目錄的存取權限，並且定義如何稽核存取嘗試。  
  
 <xref:System.Security.AccessControl.FileSystemSecurity>類別表示為一組規則的存取和稽核的權限。 每個存取規則由<xref:System.Security.AccessControl.FileSystemAccessRule>物件，而每個稽核規則由<xref:System.Security.AccessControl.FileSystemAuditRule>物件。  
  
 <xref:System.Security.AccessControl.FileSystemSecurity>類別為基礎的 Microsoft Windows 檔案安全性系統的抽象概念。 在此系統中，每個檔案或目錄有判別存取控制清單 (DACL)，以便控制存取的檔案或目錄和系統存取控制清單 (SACL)，其指定要稽核的存取控制嘗試。  <xref:System.Security.AccessControl.FileSystemAccessRule>和<xref:System.Security.AccessControl.FileSystemAuditRule>類別是包含 Dacl 和 Sacl 的存取控制項目 (Ace) 的抽象概念。  
  
 <xref:System.Security.AccessControl.FileSystemSecurity>類別會隱藏許多 Dacl 和 Sacl 的詳細資料，您不需擔心 ACE 排序或 null DACL。  
  
 若要保存至檔案的新增或變更的存取控制清單 (ACL) 資訊，請使用<xref:System.IO.File.SetAccessControl%2A>或<xref:System.IO.FileInfo.SetAccessControl%2A>方法。  若要新增或變更 ACL 將資訊保存到目錄，使用<xref:System.IO.Directory.SetAccessControl%2A>或<xref:System.IO.FileInfo.SetAccessControl%2A>方法。  
  
 若要從檔案擷取 ACL 資訊，請使用<xref:System.IO.File.GetAccessControl%2A>或<xref:System.IO.FileInfo.GetAccessControl%2A>方法。  若要從目錄擷取 ACL 資訊，請使用<xref:System.IO.Directory.GetAccessControl%2A>或<xref:System.IO.DirectoryInfo.GetAccessControl%2A>方法。  
  
   
  
## Examples  
 下列程式碼範例使用<xref:System.Security.AccessControl.FileSecurity>類別來新增，然後從檔案移除存取控制清單 (ACL) 項目。  您必須提供有效的使用者或群組帳戶，才能執行這個範例。  
  
 [!code-cpp[IO.File.GetAccessControl-SetAccessControl#1](~/samples/snippets/cpp/VS_Snippets_CLR/IO.File.GetAccessControl-SetAccessControl/cpp/sample.cpp#1)]
 [!code-csharp[IO.File.GetAccessControl-SetAccessControl#1](~/samples/snippets/csharp/VS_Snippets_CLR/IO.File.GetAccessControl-SetAccessControl/CS/sample.cs#1)]
 [!code-vb[IO.File.GetAccessControl-SetAccessControl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IO.File.GetAccessControl-SetAccessControl/VB/sample.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AccessRightType">
      <MemberSignature Language="C#" Value="public override Type AccessRightType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AccessRightType" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.FileSystemSecurity.AccessRightType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AccessRightType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ AccessRightType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AccessRightType : Type" Usage="System.Security.AccessControl.FileSystemSecurity.AccessRightType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.Security.AccessControl.FileSystemSecurity" /> 類別用來表示存取權限的列舉型別 (Enumeration)。</summary>
        <value>
          <see cref="T:System.Type" /> 物件，表示 <see cref="T:System.Security.AccessControl.FileSystemRights" /> 列舉型別。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 衍生自類別<xref:System.Security.AccessControl.FileSystemSecurity>類別覆寫<xref:System.Security.AccessControl.FileSystemSecurity.AccessRightType%2A>屬性，並傳回它們用來表示存取權限類型。 當您使用陣列或包含多個類型的安全性物件的集合時，使用這個屬性來判斷要使用每個安全性物件的正確的列舉類型。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessRuleFactory">
      <MemberSignature Language="C#" Value="public override sealed System.Security.AccessControl.AccessRule AccessRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.AccessControl.AccessRule AccessRuleFactory(class System.Security.Principal.IdentityReference identityReference, int32 accessMask, bool isInherited, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.FileSystemSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::AccessControl::AccessRule ^ AccessRuleFactory(System::Security::Principal::IdentityReference ^ identityReference, int accessMask, bool isInherited, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="override this.AccessRuleFactory : System.Security.Principal.IdentityReference * int * bool * System.Security.AccessControl.InheritanceFlags * System.Security.AccessControl.PropagationFlags * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.AccessRule" Usage="fileSystemSecurity.AccessRuleFactory (identityReference, accessMask, isInherited, inheritanceFlags, propagationFlags, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.AccessRule</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identityReference" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="accessMask" Type="System.Int32" />
        <Parameter Name="isInherited" Type="System.Boolean" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identityReference">
          <see cref="T:System.Security.Principal.IdentityReference" /> 物件，表示使用者帳戶。</param>
        <param name="accessMask">整數，指定存取類型。</param>
        <param name="isInherited">如果繼承存取規則，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
        <param name="inheritanceFlags">其中一個 <see cref="T:System.Security.AccessControl.InheritanceFlags" /> 值，指定存取遮罩要如何散佈到子物件。</param>
        <param name="propagationFlags">其中一個 <see cref="T:System.Security.AccessControl.PropagationFlags" /> 值，指定存取控制項目 (ACE) 要如何散佈到子物件。</param>
        <param name="type">其中一個 <see cref="T:System.Security.AccessControl.AccessControlType" /> 值，指定允許還是拒絕存取。</param>
        <summary>以指定的存取權限、存取控制和旗標，初始化 <see cref="T:System.Security.AccessControl.FileSystemAccessRule" /> 類別 (用於表示指定使用者的新存取控制規則) 的新執行個體。</summary>
        <returns>新的 <see cref="T:System.Security.AccessControl.FileSystemAccessRule" /> 物件，以指定的存取權限、存取控制和旗標表示指定之使用者的新存取控制規則。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要建立存取控制規則的建議的方式是使用的建構函式<xref:System.Security.AccessControl.FileSystemAccessRule>類別。  
  
 傳回型別<xref:System.Security.AccessControl.FileSystemSecurity.AccessRuleFactory%2A>方法是基底類別， <xref:System.Security.AccessControl.AccessRule>，但傳回的值可以安全地轉換成衍生的類別。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="accessMask" />、<paramref name="inheritanceFlags" />、<paramref name="propagationFlags" /> 或 <paramref name="type" /> 參數會指定無效值。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="identityReference" /> 參數為 <see langword="null" />。  
  
-或- 
<paramref name="accessMask" /> 參數為零。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identityReference" /> 參數既不是 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 型別，也不是可以轉換成 <see cref="T:System.Security.Principal.NTAccount" /> 型別的型別 (例如 <see cref="T:System.Security.Principal.SecurityIdentifier" />)。</exception>
      </Docs>
    </Member>
    <Member MemberName="AccessRuleType">
      <MemberSignature Language="C#" Value="public override Type AccessRuleType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AccessRuleType" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.FileSystemSecurity.AccessRuleType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AccessRuleType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ AccessRuleType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AccessRuleType : Type" Usage="System.Security.AccessControl.FileSystemSecurity.AccessRuleType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.Security.AccessControl.FileSystemSecurity" /> 類別用來表示存取規則的列舉型別。</summary>
        <value>
          <see cref="T:System.Type" /> 物件，表示 <see cref="T:System.Security.AccessControl.FileSystemAccessRule" /> 類別。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 衍生自類別<xref:System.Security.AccessControl.FileSystemSecurity>類別覆寫<xref:System.Security.AccessControl.FileSystemSecurity.AccessRuleType%2A>屬性，並傳回它們用來表示存取規則類型。 當您使用陣列或包含多個類型的安全性物件的集合時，使用這個屬性來判斷正確的存取規則型別，若要使用每個安全性物件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAccessRule">
      <MemberSignature Language="C#" Value="public void AddAccessRule (System.Security.AccessControl.FileSystemAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAccessRule(class System.Security.AccessControl.FileSystemAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.FileSystemSecurity.AddAccessRule(System.Security.AccessControl.FileSystemAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAccessRule (rule As FileSystemAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAccessRule(System::Security::AccessControl::FileSystemAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.AddAccessRule : System.Security.AccessControl.FileSystemAccessRule -&gt; unit" Usage="fileSystemSecurity.AddAccessRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.FileSystemAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">
          <see cref="T:System.Security.AccessControl.FileSystemAccessRule" /> 物件，表示要加入至檔案或目錄的存取控制清單 (ACL) 使用權限。</param>
        <summary>將指定的存取控制清單 (ACL) 使用權限加入至目前的檔案或目錄。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.FileSystemSecurity.AddAccessRule%2A>方法會將新規則加入內含的規則清單<xref:System.Security.AccessControl.FileSystemSecurity>物件。  
  
 如果指定之規則的存取控制清單 (ACL) 已存在<xref:System.Security.AccessControl.FileSystemSecurity.AddAccessRule%2A>方法仍然會新增規則，但有一個例外：<xref:System.Security.AccessControl.FileSystemAccessRule>使用所建立的物件<xref:System.Security.AccessControl.AccessControlType.Deny>列舉值會取代使用所建立的物件<xref:System.Security.AccessControl.AccessControlType.Allow>列舉值。  
  
 若要保存至檔案的新增或變更 ACL 資訊，請使用<xref:System.IO.File.SetAccessControl%2A>或<xref:System.IO.FileInfo.SetAccessControl%2A>方法。  若要新增或變更 ACL 將資訊保存到目錄，使用<xref:System.IO.Directory.SetAccessControl%2A>或<xref:System.IO.FileInfo.SetAccessControl%2A>方法。  
  
 若要從檔案擷取 ACL 資訊，請使用<xref:System.IO.File.GetAccessControl%2A>或<xref:System.IO.FileInfo.GetAccessControl%2A>方法。  若要從目錄擷取 ACL 資訊，請使用<xref:System.IO.Directory.GetAccessControl%2A>或<xref:System.IO.DirectoryInfo.GetAccessControl%2A>方法。  
  
 當您新增未設定存取規則<xref:System.Security.AccessControl.FileSystemRights.Synchronize>旗標，<xref:System.Security.AccessControl.FileSystemRights.Synchronize>旗標將會自動加入至您的規則。  如果您移除規則之後未指定<xref:System.Security.AccessControl.FileSystemRights.Synchronize>旗標，此旗標將會自動移除。  
  
   
  
## Examples  
 下列程式碼範例使用<xref:System.Security.AccessControl.FileSecurity>類別來新增，然後從檔案移除存取控制清單 (ACL) 項目。  您必須提供有效的使用者或群組帳戶，才能執行這個範例。  
  
 [!code-cpp[IO.File.GetAccessControl-SetAccessControl#1](~/samples/snippets/cpp/VS_Snippets_CLR/IO.File.GetAccessControl-SetAccessControl/cpp/sample.cpp#1)]
 [!code-csharp[IO.File.GetAccessControl-SetAccessControl#1](~/samples/snippets/csharp/VS_Snippets_CLR/IO.File.GetAccessControl-SetAccessControl/CS/sample.cs#1)]
 [!code-vb[IO.File.GetAccessControl-SetAccessControl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IO.File.GetAccessControl-SetAccessControl/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> 參數為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddAuditRule">
      <MemberSignature Language="C#" Value="public void AddAuditRule (System.Security.AccessControl.FileSystemAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAuditRule(class System.Security.AccessControl.FileSystemAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.FileSystemSecurity.AddAuditRule(System.Security.AccessControl.FileSystemAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAuditRule (rule As FileSystemAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAuditRule(System::Security::AccessControl::FileSystemAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.AddAuditRule : System.Security.AccessControl.FileSystemAuditRule -&gt; unit" Usage="fileSystemSecurity.AddAuditRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.FileSystemAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">
          <see cref="T:System.Security.AccessControl.FileSystemAuditRule" /> 物件，表示要新增至檔案或目錄的稽核規則。</param>
        <summary>將指定的稽核規則加入至目前的檔案或目錄。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.FileSystemSecurity.AddAuditRule%2A>方法會將新的稽核規則加入內含的規則清單<xref:System.Security.AccessControl.FileSystemSecurity>物件。  
  
 如果已經有指定之規則的稽核規則<xref:System.Security.AccessControl.FileSystemSecurity.AddAuditRule%2A>方法仍會新增規則。  
  
   
  
## Examples  
 下列程式碼範例會使用<xref:System.Security.AccessControl.FileSystemSecurity.AddAuditRule%2A>方法將稽核規則加入至檔案，並使用<xref:System.Security.AccessControl.FileSystemSecurity.RemoveAuditRule%2A>方法，以從檔案移除稽核規則。  您必須提供有效的使用者或群組帳戶，才能執行這個範例。  
  
 [!code-csharp[AccessControl.FileSystemAuditRule#1](~/samples/snippets/csharp/VS_Snippets_CLR/AccessControl.FileSystemAuditRule/cs/sample.cs#1)]
 [!code-vb[AccessControl.FileSystemAuditRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AccessControl.FileSystemAuditRule/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> 參數為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="AuditRuleFactory">
      <MemberSignature Language="C#" Value="public override sealed System.Security.AccessControl.AuditRule AuditRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.AccessControl.AuditRule AuditRuleFactory(class System.Security.Principal.IdentityReference identityReference, int32 accessMask, bool isInherited, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AuditFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.FileSystemSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::AccessControl::AuditRule ^ AuditRuleFactory(System::Security::Principal::IdentityReference ^ identityReference, int accessMask, bool isInherited, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AuditFlags flags);" />
      <MemberSignature Language="F#" Value="override this.AuditRuleFactory : System.Security.Principal.IdentityReference * int * bool * System.Security.AccessControl.InheritanceFlags * System.Security.AccessControl.PropagationFlags * System.Security.AccessControl.AuditFlags -&gt; System.Security.AccessControl.AuditRule" Usage="fileSystemSecurity.AuditRuleFactory (identityReference, accessMask, isInherited, inheritanceFlags, propagationFlags, flags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.AuditRule</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identityReference" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="accessMask" Type="System.Int32" />
        <Parameter Name="isInherited" Type="System.Boolean" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="flags" Type="System.Security.AccessControl.AuditFlags" />
      </Parameters>
      <Docs>
        <param name="identityReference">
          <see cref="T:System.Security.Principal.IdentityReference" /> 物件，表示使用者帳戶。</param>
        <param name="accessMask">整數，指定存取類型。</param>
        <param name="isInherited">如果繼承存取規則，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
        <param name="inheritanceFlags">其中一個 <see cref="T:System.Security.AccessControl.InheritanceFlags" /> 值，指定存取遮罩要如何散佈到子物件。</param>
        <param name="propagationFlags">其中一個 <see cref="T:System.Security.AccessControl.PropagationFlags" /> 值，指定存取控制項目 (ACE) 要如何散佈到子物件。</param>
        <param name="flags">其中一個 <see cref="T:System.Security.AccessControl.AuditFlags" /> 值，指定要執行之稽核的類型。</param>
        <summary>初始化 <see cref="T:System.Security.AccessControl.FileSystemAuditRule" /> 類別 (表示指定之使用者的指定稽核規則) 的新執行個體。</summary>
        <returns>新的 <see cref="T:System.Security.AccessControl.FileSystemAuditRule" /> 物件，表示指定之使用者的指定稽核規則。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要建立的稽核規則的建議的方式是使用的建構函式<xref:System.Security.AccessControl.FileSystemAuditRule>類別。  
  
 傳回型別<xref:System.Security.AccessControl.FileSystemSecurity.AuditRuleFactory%2A>方法是基底類別， <xref:System.Security.AccessControl.AuditRule>，但傳回的值可以安全地轉換成衍生的類別。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="accessMask" />、<paramref name="inheritanceFlags" />、<paramref name="propagationFlags" /> 或 <paramref name="flags" /> 屬性指定了無效值。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="identityReference" /> 屬性為 <see langword="null" />。  
  
-或- 
<paramref name="accessMask" /> 屬性為零。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identityReference" /> 屬性既不是 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 型別，也不是可以轉換成 <see cref="T:System.Security.Principal.NTAccount" /> 型別的型別 (例如 <see cref="T:System.Security.Principal.SecurityIdentifier" />)。</exception>
      </Docs>
    </Member>
    <Member MemberName="AuditRuleType">
      <MemberSignature Language="C#" Value="public override Type AuditRuleType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AuditRuleType" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.FileSystemSecurity.AuditRuleType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AuditRuleType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ AuditRuleType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AuditRuleType : Type" Usage="System.Security.AccessControl.FileSystemSecurity.AuditRuleType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.Security.AccessControl.FileSystemSecurity" /> 類別用來表示稽核規則的類型。</summary>
        <value>
          <see cref="T:System.Type" /> 物件，表示 <see cref="T:System.Security.AccessControl.FileSystemAuditRule" /> 類別。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 衍生自類別<xref:System.Security.AccessControl.FileSystemSecurity>類別覆寫<xref:System.Security.AccessControl.FileSystemSecurity.AuditRuleType%2A>屬性，並傳回它們用來表示稽核權限類型。 當您使用陣列或包含多個類型的安全性物件的集合時，使用這個屬性來判斷正確的稽核規則型別，將每個安全性物件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRule">
      <MemberSignature Language="C#" Value="public bool RemoveAccessRule (System.Security.AccessControl.FileSystemAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveAccessRule(class System.Security.AccessControl.FileSystemAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.FileSystemSecurity.RemoveAccessRule(System.Security.AccessControl.FileSystemAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAccessRule (rule As FileSystemAccessRule) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RemoveAccessRule(System::Security::AccessControl::FileSystemAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAccessRule : System.Security.AccessControl.FileSystemAccessRule -&gt; bool" Usage="fileSystemSecurity.RemoveAccessRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.FileSystemAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">
          <see cref="T:System.Security.AccessControl.FileSystemAccessRule" /> 物件，表示要從檔案或目錄中移除的存取控制清單 (ACL) 使用權限。</param>
        <summary>從目前的檔案或目錄中，移除所有相符的允許或拒絕存取控制清單 (ACL) 使用權限。</summary>
        <returns>如果移除了存取規則，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.FileSystemSecurity.RemoveAccessRule%2A>方法會移除所有符合<xref:System.Security.AccessControl.AccessControlType.Deny>存取規則或所有比對<xref:System.Security.AccessControl.AccessControlType.Allow>存取規則，從目前<xref:System.Security.AccessControl.FileSystemSecurity>物件。  例如，您可以使用這個方法，移除所有<xref:System.Security.AccessControl.AccessControlType.Deny>存取使用者的規則，藉由傳遞<xref:System.Security.AccessControl.FileSystemAccessRule>使用所建立的物件<xref:System.Security.AccessControl.AccessControlType.Deny>的值，<xref:System.Security.AccessControl.FileSystemRights.Read>值和使用者帳戶。  當您這樣做時，請<xref:System.Security.AccessControl.FileSystemSecurity.RemoveAccessRule%2A>方法會移除任何指定的拒絕規則<xref:System.Security.AccessControl.FileSystemRights.Read>的值或<xref:System.Security.AccessControl.FileSystemRights.Write>值。  
  
 若要保存至檔案的新增或變更的存取控制清單 (ACL) 資訊，請使用<xref:System.IO.File.SetAccessControl%2A>或<xref:System.IO.FileInfo.SetAccessControl%2A>方法。  若要新增或變更 ACL 將資訊保存到目錄，使用<xref:System.IO.Directory.SetAccessControl%2A>或<xref:System.IO.FileInfo.SetAccessControl%2A>方法。  
  
 若要從檔案擷取 ACL 資訊，請使用<xref:System.IO.File.GetAccessControl%2A>或<xref:System.IO.FileInfo.GetAccessControl%2A>方法。  若要從目錄擷取 ACL 資訊，請使用<xref:System.IO.Directory.GetAccessControl%2A>或<xref:System.IO.DirectoryInfo.GetAccessControl%2A>方法。  
  
 當您新增未設定存取規則<xref:System.Security.AccessControl.FileSystemRights.Synchronize>旗標，<xref:System.Security.AccessControl.FileSystemRights.Synchronize>旗標將會自動加入至您的規則。  如果您移除規則之後未指定<xref:System.Security.AccessControl.FileSystemRights.Synchronize>旗標，此旗標將會自動移除。  
  
   
  
## Examples  
 下列程式碼範例使用<xref:System.Security.AccessControl.FileSecurity>類別來新增，然後從檔案移除存取控制清單 (ACL) 項目。  您必須提供有效的使用者或群組帳戶，才能執行這個範例。  
  
 [!code-cpp[IO.File.GetAccessControl-SetAccessControl#1](~/samples/snippets/cpp/VS_Snippets_CLR/IO.File.GetAccessControl-SetAccessControl/cpp/sample.cpp#1)]
 [!code-csharp[IO.File.GetAccessControl-SetAccessControl#1](~/samples/snippets/csharp/VS_Snippets_CLR/IO.File.GetAccessControl-SetAccessControl/CS/sample.cs#1)]
 [!code-vb[IO.File.GetAccessControl-SetAccessControl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IO.File.GetAccessControl-SetAccessControl/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> 參數為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRuleAll">
      <MemberSignature Language="C#" Value="public void RemoveAccessRuleAll (System.Security.AccessControl.FileSystemAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAccessRuleAll(class System.Security.AccessControl.FileSystemAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.FileSystemSecurity.RemoveAccessRuleAll(System.Security.AccessControl.FileSystemAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAccessRuleAll (rule As FileSystemAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAccessRuleAll(System::Security::AccessControl::FileSystemAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAccessRuleAll : System.Security.AccessControl.FileSystemAccessRule -&gt; unit" Usage="fileSystemSecurity.RemoveAccessRuleAll rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.FileSystemAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">
          <see cref="T:System.Security.AccessControl.FileSystemAccessRule" /> 物件，指定應該從檔案或目錄中移除其存取控制清單 (ACL) 使用權限的使用者。</param>
        <summary>從目前的檔案或目錄中，移除指定之使用者的所有存取控制清單 (ACL) 使用權限。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.FileSystemSecurity.RemoveAccessRuleAll%2A>方法會移除所有存取控制清單 (ACL) 權限指定的使用者。  這個方法會忽略中的所有值<xref:System.Security.AccessControl.FileSystemAccessRule>以外的使用者帳戶的物件。  
  
 若要保存至檔案的新增或變更 ACL 資訊，請使用<xref:System.IO.File.SetAccessControl%2A>或<xref:System.IO.FileInfo.SetAccessControl%2A>方法。  若要新增或變更 ACL 將資訊保存到目錄，使用<xref:System.IO.Directory.SetAccessControl%2A>或<xref:System.IO.FileInfo.SetAccessControl%2A>方法。  
  
 若要從檔案擷取 ACL 資訊，請使用<xref:System.IO.File.GetAccessControl%2A>或<xref:System.IO.FileInfo.GetAccessControl%2A>方法。  若要從目錄擷取 ACL 資訊，請使用<xref:System.IO.Directory.GetAccessControl%2A>或<xref:System.IO.DirectoryInfo.GetAccessControl%2A>方法。  
  
 當您新增未設定存取規則<xref:System.Security.AccessControl.FileSystemRights.Synchronize>旗標，<xref:System.Security.AccessControl.FileSystemRights.Synchronize>旗標將會自動加入至您的規則。  如果您移除規則之後未指定<xref:System.Security.AccessControl.FileSystemRights.Synchronize>旗標，此旗標將會自動移除。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> 參數為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRuleSpecific">
      <MemberSignature Language="C#" Value="public void RemoveAccessRuleSpecific (System.Security.AccessControl.FileSystemAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAccessRuleSpecific(class System.Security.AccessControl.FileSystemAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.FileSystemSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.FileSystemAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAccessRuleSpecific (rule As FileSystemAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAccessRuleSpecific(System::Security::AccessControl::FileSystemAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAccessRuleSpecific : System.Security.AccessControl.FileSystemAccessRule -&gt; unit" Usage="fileSystemSecurity.RemoveAccessRuleSpecific rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.FileSystemAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">
          <see cref="T:System.Security.AccessControl.FileSystemAccessRule" /> 物件，指定應該從檔案或目錄中移除其存取控制清單 (ACL) 使用權限的使用者。</param>
        <summary>從目前的檔案或目錄中，移除相符的單一允許或拒絕存取控制清單 (ACL) 使用權限。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.FileSystemSecurity.RemoveAccessRuleSpecific%2A>方法移除指定<xref:System.Security.AccessControl.AccessControlType.Deny>存取規則，或指定的比對<xref:System.Security.AccessControl.AccessControlType.Allow>從目前的存取規則<xref:System.Security.AccessControl.FileSystemSecurity>物件。  例如，您可以使用這個方法，移除指定<xref:System.Security.AccessControl.AccessControlType.Deny>藉由傳遞使用者的存取規則<xref:System.Security.AccessControl.FileSystemAccessRule>使用所建立的物件<xref:System.Security.AccessControl.AccessControlType.Deny>的值，<xref:System.Security.AccessControl.FileSystemRights.Read>值和使用者帳戶。  當您這樣做時，請<xref:System.Security.AccessControl.FileSystemSecurity.RemoveAccessRuleSpecific%2A>方法會移除只有指定的拒絕規則<xref:System.Security.AccessControl.FileSystemRights.Read>值。  它不會移除任何指定的拒絕規則<xref:System.Security.AccessControl.FileSystemRights.Write>值。  
  
 若要保存至檔案的新增或變更的存取控制清單 (ACL) 資訊，請使用<xref:System.IO.File.SetAccessControl%2A>或<xref:System.IO.FileInfo.SetAccessControl%2A>方法。  若要新增或變更 ACL 將資訊保存到目錄，使用<xref:System.IO.Directory.SetAccessControl%2A>或<xref:System.IO.FileInfo.SetAccessControl%2A>方法。  
  
 若要從檔案擷取 ACL 資訊，請使用<xref:System.IO.File.GetAccessControl%2A>或<xref:System.IO.FileInfo.GetAccessControl%2A>方法。  若要從目錄擷取 ACL 資訊，請使用<xref:System.IO.Directory.GetAccessControl%2A>或<xref:System.IO.DirectoryInfo.GetAccessControl%2A>方法。  
  
 當您新增未設定存取規則<xref:System.Security.AccessControl.FileSystemRights.Synchronize>旗標，<xref:System.Security.AccessControl.FileSystemRights.Synchronize>旗標將會自動加入至您的規則。  如果您移除規則之後未指定<xref:System.Security.AccessControl.FileSystemRights.Synchronize>旗標，此旗標將會自動移除。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> 參數為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRule">
      <MemberSignature Language="C#" Value="public bool RemoveAuditRule (System.Security.AccessControl.FileSystemAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveAuditRule(class System.Security.AccessControl.FileSystemAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.FileSystemSecurity.RemoveAuditRule(System.Security.AccessControl.FileSystemAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAuditRule (rule As FileSystemAuditRule) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RemoveAuditRule(System::Security::AccessControl::FileSystemAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAuditRule : System.Security.AccessControl.FileSystemAuditRule -&gt; bool" Usage="fileSystemSecurity.RemoveAuditRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.FileSystemAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">
          <see cref="T:System.Security.AccessControl.FileSystemAuditRule" /> 物件，表示要從檔案或目錄中移除的稽核規則。</param>
        <summary>從目前的檔案或目錄中，移除所有相符的允許或拒絕稽核規則。</summary>
        <returns>
          <see langword="true" /> 表示已移除稽核規則；否則為 <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.FileSystemSecurity.RemoveAuditRule%2A>方法會移除所有符合<xref:System.Security.AccessControl.AccessControlType.Deny>稽核規則，或所有比對<xref:System.Security.AccessControl.AccessControlType.Allow>稽核規則，從目前<xref:System.Security.AccessControl.FileSystemSecurity>物件。  例如，您可以使用這個方法，移除所有<xref:System.Security.AccessControl.AccessControlType.Deny>稽核使用者的規則，藉由傳遞<xref:System.Security.AccessControl.FileSystemAuditRule>使用所建立的物件<xref:System.Security.AccessControl.AccessControlType.Deny>的值，<xref:System.Security.AccessControl.AuditFlags.Failure>值和使用者帳戶。  當您這樣做時，請<xref:System.Security.AccessControl.FileSystemSecurity.RemoveAuditRule%2A>方法會移除任何指定的拒絕規則<xref:System.Security.AccessControl.AuditFlags.Failure>的值或<xref:System.Security.AccessControl.AuditFlags.Success>值。  
  
   
  
## Examples  
 下列程式碼範例會使用<xref:System.Security.AccessControl.FileSystemSecurity.AddAuditRule%2A>方法將稽核規則加入至檔案，並使用<xref:System.Security.AccessControl.FileSystemSecurity.RemoveAuditRule%2A>方法，以從檔案移除稽核規則。  您必須提供有效的使用者或群組帳戶，才能執行這個範例。  
  
 [!code-csharp[AccessControl.FileSystemAuditRule#1](~/samples/snippets/csharp/VS_Snippets_CLR/AccessControl.FileSystemAuditRule/cs/sample.cs#1)]
 [!code-vb[AccessControl.FileSystemAuditRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AccessControl.FileSystemAuditRule/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> 參數為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRuleAll">
      <MemberSignature Language="C#" Value="public void RemoveAuditRuleAll (System.Security.AccessControl.FileSystemAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAuditRuleAll(class System.Security.AccessControl.FileSystemAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.FileSystemSecurity.RemoveAuditRuleAll(System.Security.AccessControl.FileSystemAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAuditRuleAll (rule As FileSystemAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAuditRuleAll(System::Security::AccessControl::FileSystemAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAuditRuleAll : System.Security.AccessControl.FileSystemAuditRule -&gt; unit" Usage="fileSystemSecurity.RemoveAuditRuleAll rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.FileSystemAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">
          <see cref="T:System.Security.AccessControl.FileSystemAuditRule" /> 物件，指定應該從檔案或目錄中移除其稽核規則的使用者。</param>
        <summary>從目前的檔案或目錄中，移除指定之使用者的所有稽核規則。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.FileSystemSecurity.RemoveAuditRuleAll%2A>方法移除指定之使用者的所有稽核規則。  它會忽略中的所有值<xref:System.Security.AccessControl.FileSystemAuditRule>以外的使用者帳戶的物件。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> 參數為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRuleSpecific">
      <MemberSignature Language="C#" Value="public void RemoveAuditRuleSpecific (System.Security.AccessControl.FileSystemAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAuditRuleSpecific(class System.Security.AccessControl.FileSystemAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.FileSystemSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.FileSystemAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAuditRuleSpecific (rule As FileSystemAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAuditRuleSpecific(System::Security::AccessControl::FileSystemAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAuditRuleSpecific : System.Security.AccessControl.FileSystemAuditRule -&gt; unit" Usage="fileSystemSecurity.RemoveAuditRuleSpecific rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.FileSystemAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">
          <see cref="T:System.Security.AccessControl.FileSystemAuditRule" /> 物件，表示要從檔案或目錄中移除的稽核規則。</param>
        <summary>從目前的檔案或目錄中，移除相符的單一允許或拒絕稽核規則。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.FileSystemSecurity.RemoveAuditRuleSpecific%2A>方法會移除指定的比對<xref:System.Security.AccessControl.AccessControlType.Deny>稽核規則，或指定的比對<xref:System.Security.AccessControl.AccessControlType.Allow>從目前的稽核規則<xref:System.Security.AccessControl.FileSystemSecurity>物件。  例如，您可以使用這個方法，移除指定<xref:System.Security.AccessControl.AccessControlType.Deny>藉由傳遞使用者的稽核規則<xref:System.Security.AccessControl.FileSystemAuditRule>使用所建立的物件<xref:System.Security.AccessControl.AccessControlType.Deny>的值，<xref:System.Security.AccessControl.AuditFlags.Failure>值和使用者帳戶。  當您這樣做時，請<xref:System.Security.AccessControl.FileSystemSecurity.RemoveAuditRuleSpecific%2A>方法會移除的僅拒絕規則，指定<xref:System.Security.AccessControl.AuditFlags.Failure>值。  它不會移除任何指定的拒絕規則<xref:System.Security.AccessControl.AuditFlags.Success>值。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> 參數為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="ResetAccessRule">
      <MemberSignature Language="C#" Value="public void ResetAccessRule (System.Security.AccessControl.FileSystemAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetAccessRule(class System.Security.AccessControl.FileSystemAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.FileSystemSecurity.ResetAccessRule(System.Security.AccessControl.FileSystemAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetAccessRule (rule As FileSystemAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetAccessRule(System::Security::AccessControl::FileSystemAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.ResetAccessRule : System.Security.AccessControl.FileSystemAccessRule -&gt; unit" Usage="fileSystemSecurity.ResetAccessRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.FileSystemAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">
          <see cref="T:System.Security.AccessControl.FileSystemAccessRule" /> 物件，表示要加入至檔案或目錄的存取控制清單 (ACL) 使用權限。</param>
        <summary>將指定的存取控制清單 (ACL) 使用權限加入至目前的檔案或目錄，並移除所有相符的 ACL 使用權限。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.FileSystemSecurity.ResetAccessRule%2A>方法加入指定的存取控制清單 (ACL) 規則或覆寫的比對任何相同 ACL 規則`rule`參數。  比方說，如果`rule`參數指定<xref:System.Security.AccessControl.FileSystemRights.Read>值並<xref:System.Security.AccessControl.FileSystemSecurity.ResetAccessRule%2A>方法會尋找指定的相同 ACL 規則<xref:System.Security.AccessControl.FileSystemRights.Read>值完全相同的規則將會覆寫。  如果<xref:System.Security.AccessControl.FileSystemSecurity.ResetAccessRule%2A>方法會尋找指定的相同 ACL 規則<xref:System.Security.AccessControl.FileSystemRights.Write>值完全相同的規則也會覆寫。  
  
 若要保存至檔案的新增或變更 ACL 資訊，請使用<xref:System.IO.File.SetAccessControl%2A>或<xref:System.IO.FileInfo.SetAccessControl%2A>方法。  若要新增或變更 ACL 將資訊保存到目錄，使用<xref:System.IO.Directory.SetAccessControl%2A>或<xref:System.IO.FileInfo.SetAccessControl%2A>方法。  
  
 若要從檔案擷取 ACL 資訊，請使用<xref:System.IO.File.GetAccessControl%2A>或<xref:System.IO.FileInfo.GetAccessControl%2A>方法。  若要從目錄擷取 ACL 資訊，請使用<xref:System.IO.Directory.GetAccessControl%2A>或<xref:System.IO.DirectoryInfo.GetAccessControl%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> 參數為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetAccessRule">
      <MemberSignature Language="C#" Value="public void SetAccessRule (System.Security.AccessControl.FileSystemAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAccessRule(class System.Security.AccessControl.FileSystemAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.FileSystemSecurity.SetAccessRule(System.Security.AccessControl.FileSystemAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAccessRule (rule As FileSystemAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAccessRule(System::Security::AccessControl::FileSystemAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.SetAccessRule : System.Security.AccessControl.FileSystemAccessRule -&gt; unit" Usage="fileSystemSecurity.SetAccessRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.FileSystemAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">
          <see cref="T:System.Security.AccessControl.FileSystemAccessRule" /> 物件，表示要為檔案或目錄設定的存取控制清單 (ACL) 使用權限。</param>
        <summary>設定目前檔案或目錄之指定的存取控制清單 (ACL) 使用權限。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.FileSystemSecurity.SetAccessRule%2A>方法加入指定的存取控制清單 (ACL) 規則或覆寫的比對任何相同 ACL 規則<xref:System.Security.AccessControl.FileSystemRights>的值`rule`參數。  比方說，如果`rule`參數指定<xref:System.Security.AccessControl.FileSystemRights.Read>值並<xref:System.Security.AccessControl.FileSystemSecurity.SetAccessRule%2A>方法會尋找指定的相同 ACL 規則<xref:System.Security.AccessControl.FileSystemRights.Read>值完全相同的規則將會覆寫。  如果<xref:System.Security.AccessControl.FileSystemSecurity.SetAccessRule%2A>方法會尋找指定的相同 ACL 規則<xref:System.Security.AccessControl.FileSystemRights.Write>值完全相同的規則將不會覆寫。  
  
 若要保存至檔案的新增或變更 ACL 資訊，請使用<xref:System.IO.File.SetAccessControl%2A>或<xref:System.IO.FileInfo.SetAccessControl%2A>方法。  若要新增或變更 ACL 將資訊保存到目錄，使用<xref:System.IO.Directory.SetAccessControl%2A>或<xref:System.IO.FileInfo.SetAccessControl%2A>方法。  
  
 若要從檔案擷取 ACL 資訊，請使用<xref:System.IO.File.GetAccessControl%2A>或<xref:System.IO.FileInfo.GetAccessControl%2A>方法。  若要從目錄擷取 ACL 資訊，請使用<xref:System.IO.Directory.GetAccessControl%2A>或<xref:System.IO.DirectoryInfo.GetAccessControl%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> 參數為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetAuditRule">
      <MemberSignature Language="C#" Value="public void SetAuditRule (System.Security.AccessControl.FileSystemAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAuditRule(class System.Security.AccessControl.FileSystemAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.FileSystemSecurity.SetAuditRule(System.Security.AccessControl.FileSystemAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAuditRule (rule As FileSystemAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAuditRule(System::Security::AccessControl::FileSystemAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.SetAuditRule : System.Security.AccessControl.FileSystemAuditRule -&gt; unit" Usage="fileSystemSecurity.SetAuditRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.FileSystemAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">
          <see cref="T:System.Security.AccessControl.FileSystemAuditRule" /> 物件，表示要為檔案或目錄設定的稽核規則。</param>
        <summary>設定目前檔案或目錄的指定稽核規則。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.FileSystemSecurity.SetAuditRule%2A>方法新增的指定的稽核規則，或覆寫比對任何相同的稽核規則<xref:System.Security.AccessControl.FileSystemRights>的值`rule`參數。  比方說，如果`rule`參數指定<xref:System.Security.AccessControl.FileSystemRights.Read>值並<xref:System.Security.AccessControl.FileSystemSecurity.SetAuditRule%2A>方法會尋找指定的完全相同的稽核規則<xref:System.Security.AccessControl.FileSystemRights.Read>值完全相同的規則將會覆寫。  如果<xref:System.Security.AccessControl.FileSystemSecurity.SetAuditRule%2A>方法會尋找指定的完全相同的稽核規則<xref:System.Security.AccessControl.FileSystemRights.Write>值完全相同的規則將不會覆寫。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> 參數為 <see langword="null" />。</exception>
      </Docs>
    </Member>
  </Members>
</Type>