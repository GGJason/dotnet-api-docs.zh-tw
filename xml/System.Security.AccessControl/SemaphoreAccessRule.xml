<Type Name="SemaphoreAccessRule" FullName="System.Security.AccessControl.SemaphoreAccessRule">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="be3d483583d4ae681e5f740d9163189a2cb26d16" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48603241" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SemaphoreAccessRule : System.Security.AccessControl.AccessRule" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SemaphoreAccessRule extends System.Security.AccessControl.AccessRule" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.SemaphoreAccessRule" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SemaphoreAccessRule&#xA;Inherits AccessRule" />
  <TypeSignature Language="C++ CLI" Value="public ref class SemaphoreAccessRule sealed : System::Security::AccessControl::AccessRule" />
  <TypeSignature Language="F#" Value="type SemaphoreAccessRule = class&#xA;    inherit AccessRule" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.AccessControl.AccessRule</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示允許或拒絕使用者或群組的一組存取權限。 這個類別無法被繼承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.SemaphoreAccessRule>類別是其中一個的一組.NET Framework 提供了管理上的具名的系統號誌的 Windows 存取控制安全性的類別。 如需這些類別和其基礎的 Windows 存取控制結構與關聯性的概觀，請參閱<xref:System.Security.AccessControl.SemaphoreSecurity>。  
  
> [!NOTE]
>  Windows 存取控制安全性是有意義，只會針對具名的系統號誌。 如果<xref:System.Threading.Semaphore>物件都代表本機號誌、 存取控制是不相關。  
  
 若要取得目前套用至具名號誌的規則清單，請使用<xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType>方法來取得<xref:System.Security.AccessControl.SemaphoreSecurity>物件，然後使用其<xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A>方法，以取得的集合<xref:System.Security.AccessControl.SemaphoreAccessRule>物件。  
  
 <xref:System.Security.AccessControl.SemaphoreAccessRule> 物件不會對應一對一與基礎的判別存取控制清單 (DACL) 中存取控制項目。 當您為號誌取得的所有存取規則的集合時，該集合會包含規則目前表示所有存取控制項目所需的最小數目。  
  
> [!NOTE]
>  當您套用和移除規則，就會變更基礎的存取控制項目。 在規則中的資訊可能的話，合併到維護存取控制項目最小數目。 因此，當您讀取目前的規則清單時，它看起來可能不完全您新增的所有規則的清單。  
  
 使用<xref:System.Security.AccessControl.SemaphoreAccessRule>物件，以指定允許或拒絕使用者或群組的存取權限。 A<xref:System.Security.AccessControl.SemaphoreAccessRule>物件一律代表允許存取，或拒絕存取，永遠不會。  
  
 若要將規則套用到具名的系統號誌，使用<xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType>方法來取得<xref:System.Security.AccessControl.SemaphoreSecurity>物件。 修改<xref:System.Security.AccessControl.SemaphoreSecurity>物件使用其方法來新增規則，然後使用<xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType>重新附加安全性物件的方法。  
  
> [!IMPORTANT]
>  您所做的變更<xref:System.Security.AccessControl.SemaphoreSecurity>物件不會影響具名號誌的存取層級直到您呼叫<xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType>更改的安全性物件指派給具名號誌的方法。  
  
 <xref:System.Security.AccessControl.SemaphoreAccessRule> 物件是不可變的。 為號誌的安全性使用的方法來修改<xref:System.Security.AccessControl.SemaphoreSecurity>類別來新增或移除規則; 當您這麼做時，會修改基礎的存取控制項目。  
  
> [!NOTE]
>  Windows 98 或 Windows Millennium Edition 不支援同步處理物件的安全性。  
  
   
  
## Examples  
 下列程式碼範例示範之間的區隔<xref:System.Security.AccessControl.AccessControlType.Allow>規則和<xref:System.Security.AccessControl.AccessControlType.Deny>規則，並在相容的規則會顯示權限的組合。 此範例會建立<xref:System.Security.AccessControl.SemaphoreSecurity>物件、 將規則，允許和拒絕目前使用者的各種權限，並顯示規則的結果組。 此範例會允許目前使用者的新權限，並顯示結果，顯示新的權限會與現有合併<xref:System.Security.AccessControl.AccessControlType.Allow>規則。  
  
> [!NOTE]
>  此範例不會附加至安全性物件<xref:System.Threading.Semaphore>物件。 附加安全性物件的範例可在<xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType>和<xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType>。  
  
 [!code-csharp[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Security.AccessControl.SemaphoreSecurity" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemaphoreAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.SemaphoreRights eventRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Principal.IdentityReference identity, valuetype System.Security.AccessControl.SemaphoreRights eventRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.SemaphoreRights,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (identity As IdentityReference, eventRights As SemaphoreRights, type As AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemaphoreAccessRule(System::Security::Principal::IdentityReference ^ identity, System::Security::AccessControl::SemaphoreRights eventRights, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.SemaphoreAccessRule : System.Security.Principal.IdentityReference * System.Security.AccessControl.SemaphoreRights * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.SemaphoreAccessRule" Usage="new System.Security.AccessControl.SemaphoreAccessRule (identity, eventRights, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="identity" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="eventRights" Type="System.Security.AccessControl.SemaphoreRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">適用這項規則的使用者或群組。 必須是型別 <see cref="T:System.Security.Principal.SecurityIdentifier" />，或是像是可以轉換成型別 <see cref="T:System.Security.Principal.NTAccount" /> 的 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 的型別。</param>
        <param name="eventRights">
          <see cref="T:System.Security.AccessControl.SemaphoreRights" /> 值的位元組合，指定允許或拒絕的權限。</param>
        <param name="type">其中一個 <see cref="T:System.Security.AccessControl.AccessControlType" /> 值，指定允許還是拒絕權限。</param>
        <summary>初始化 <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" /> 類別的新執行個體，指定套用此規則的使用者或群組、存取權限，以及允許還是拒絕指定的存取權限。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要輸入<xref:System.Threading.Semaphore>，例如藉由呼叫<xref:System.Threading.WaitHandle.WaitOne%2A>方法，使用者必須具備<xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType>存取。 若要結束號誌，藉由呼叫<xref:System.Threading.Semaphore.Release%2A>方法，使用者必須擁有<xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType>存取。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="eventRights" /> 指定了無效的值。  
  
-或- 
 <paramref name="type" /> 指定了無效的值。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="identity" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="eventRights" /> 為零。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identity" /> 既不是 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 型別，也不是可以轉換成 <see cref="T:System.Security.Principal.NTAccount" /> 型別的型別 (例如 <see cref="T:System.Security.Principal.SecurityIdentifier" />)。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemaphoreAccessRule (string identity, System.Security.AccessControl.SemaphoreRights eventRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string identity, valuetype System.Security.AccessControl.SemaphoreRights eventRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreAccessRule.#ctor(System.String,System.Security.AccessControl.SemaphoreRights,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (identity As String, eventRights As SemaphoreRights, type As AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemaphoreAccessRule(System::String ^ identity, System::Security::AccessControl::SemaphoreRights eventRights, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.SemaphoreAccessRule : string * System.Security.AccessControl.SemaphoreRights * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.SemaphoreAccessRule" Usage="new System.Security.AccessControl.SemaphoreAccessRule (identity, eventRights, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.String" />
        <Parameter Name="eventRights" Type="System.Security.AccessControl.SemaphoreRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">套用這個規則的使用者或群組名稱。</param>
        <param name="eventRights">
          <see cref="T:System.Security.AccessControl.SemaphoreRights" /> 值的位元組合，指定允許或拒絕的權限。</param>
        <param name="type">其中一個 <see cref="T:System.Security.AccessControl.AccessControlType" /> 值，指定允許還是拒絕權限。</param>
        <summary>初始化 <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" /> 類別的新執行個體，指定套用此規則的使用者或群組名稱、存取權限，以及允許還是拒絕指定的存取權限。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要輸入<xref:System.Threading.Semaphore>，例如藉由呼叫<xref:System.Threading.WaitHandle.WaitOne%2A>方法，使用者必須具備<xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType>存取。 若要結束號誌，藉由呼叫<xref:System.Threading.Semaphore.Release%2A>方法，使用者必須擁有<xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType>存取。  
  
 這個建構函式相當於建立<xref:System.Security.Principal.NTAccount>物件，傳遞`identity`要<xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=nameWithType>建構函式，並傳遞新建立<xref:System.Security.Principal.NTAccount>物件<xref:System.Security.AccessControl.SemaphoreAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.SemaphoreRights%2CSystem.Security.AccessControl.AccessControlType%29>建構函式。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用這個建構函式來建立<xref:System.Security.AccessControl.SemaphoreAccessRule>物件。 此範例會建立<xref:System.Security.AccessControl.SemaphoreSecurity>物件、 將規則，允許和拒絕目前使用者的各種權限，並顯示規則的結果組。 此範例會允許目前使用者的新權限，並顯示結果，顯示新的權限會與現有合併<xref:System.Security.AccessControl.AccessControlType.Allow>規則。  
  
> [!NOTE]
>  此範例不會附加至安全性物件<xref:System.Threading.Semaphore>物件。 附加安全性物件的範例可在<xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType>和<xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType>。  
  
 [!code-csharp[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="eventRights" /> 指定了無效的值。  
  
-或- 
 <paramref name="type" /> 指定了無效的值。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="eventRights" /> 為零。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identity" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="identity" /> 是零長度字串。  
  
-或- 
 <paramref name="identity" /> 的長度超過 512 個字元。</exception>
      </Docs>
    </Member>
    <Member MemberName="SemaphoreRights">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.SemaphoreRights SemaphoreRights { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.AccessControl.SemaphoreRights SemaphoreRights" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.SemaphoreAccessRule.SemaphoreRights" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SemaphoreRights As SemaphoreRights" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::AccessControl::SemaphoreRights SemaphoreRights { System::Security::AccessControl::SemaphoreRights get(); };" />
      <MemberSignature Language="F#" Value="member this.SemaphoreRights : System.Security.AccessControl.SemaphoreRights" Usage="System.Security.AccessControl.SemaphoreAccessRule.SemaphoreRights" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.SemaphoreRights</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得存取規則所允許或拒絕的權限。</summary>
        <value>
          <see cref="T:System.Security.AccessControl.SemaphoreRights" /> 值的位元組合，表示存取規則所允許或拒絕的權限。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.SemaphoreAccessRule> 物件是不可變的。 您可以建立代表不同的使用者、 不同的權限，或不同的新存取規則<xref:System.Security.AccessControl.AccessControlType>，但您不能修改現有的存取規則。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Security.AccessControl.SemaphoreAccessRule.SemaphoreRights%2A>屬性來顯示權限，在規則中包含一組<xref:System.Security.AccessControl.SemaphoreSecurity>物件。 此範例會建立<xref:System.Security.AccessControl.SemaphoreSecurity>物件、 將規則，允許和拒絕目前使用者的各種權限，並顯示規則的結果組。 此範例會允許目前使用者的新權限，並顯示結果，顯示新的權限會與現有合併<xref:System.Security.AccessControl.AccessControlType.Allow>規則。  
  
> [!NOTE]
>  此範例不會附加至安全性物件<xref:System.Threading.Semaphore>物件。 附加安全性物件的範例可在<xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType>和<xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType>。  
  
 [!code-csharp[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>