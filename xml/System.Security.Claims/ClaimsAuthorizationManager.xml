<Type Name="ClaimsAuthorizationManager" FullName="System.Security.Claims.ClaimsAuthorizationManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fa77fc99c06460c962f41c33b11554f448051d19" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="36531906" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ClaimsAuthorizationManager : System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ClaimsAuthorizationManager extends System.Object implements class System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="DocId" Value="T:System.Security.Claims.ClaimsAuthorizationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class ClaimsAuthorizationManager&#xA;Implements ICustomIdentityConfiguration" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClaimsAuthorizationManager : System::IdentityModel::Configuration::ICustomIdentityConfiguration" />
  <TypeSignature Language="F#" Value="type ClaimsAuthorizationManager = class&#xA;    interface ICustomIdentityConfiguration" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IdentityModel.Configuration.ICustomIdentityConfiguration</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>定義宣告授權管理員的基底實作。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Claims.ClaimsAuthorizationManager>類別提供基底實作宣告授權管理員。 宣告授權管理員可以使用下列兩個案例中：  
  
-   在 web 應用程式和服務，宣告授權管理員可以新增至處理管線，以提供擴充性點，您可以從中授權的應用程式程式碼之前的連入宣告值根據資源的存取權實際實作所要求的資源會呼叫。  
  
-   當您使用<xref:System.IdentityModel.Services.ClaimsPrincipalPermission>類別或<xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute>執行命令式或宣告式的宣告型存取的類別會在您的程式碼中，檢查已針對您的應用程式的宣告授權管理員由執行系統呼叫核取。 在 web 應用程式和桌面應用程式，可以執行宣告型存取檢查。  
  
 所提供的預設實作<xref:System.Security.Claims.ClaimsAuthorizationManager>類別會顯示每個宣告的存取權授與; 不過，您可以從這個類別衍生並覆寫<xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A>方法，以提供您自己的授權邏輯。  
  
 宣告授權管理員的使用是選擇性的。 您可以設定您的應用程式使用宣告授權管理員，以程式設計的方式是藉由使用<xref:System.IdentityModel.Configuration.IdentityConfiguration>類別，或以宣告方式，藉由指定[ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md)項目，這是子元素的[ &lt;identityConfiguration&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/identityconfiguration.md)應用程式組態檔中的項目。 如果您的應用程式是網站或 web 應用程式裝載在網際網路資訊服務 (IIS) 中，您也必須新增<xref:System.IdentityModel.Services.ClaimsAuthorizationModule>ASP.NET HTTP 模組集合中。  
  
> [!IMPORTANT]
>  當您使用<xref:System.IdentityModel.Services.ClaimsPrincipalPermission>類別或<xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute>類別，用來執行存取檢查的宣告授權管理員是在身分識別組態中所指定的一個<xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration%2A?displayProperty=nameWithType>屬性。 在組態檔中，很`<identityConfiguration>`區段，參考從預設`<federationConfiguration>`項目。 這是也適用於 Windows Communication Foundation (WCF) 服務與桌面應用程式。  
  
 <xref:System.Security.Claims.ClaimsAuthorizationManager>基底類別不接受任何額外的設定; 不過，您可以覆寫<xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A>衍生類別，以提供從子項目的宣告授權管理員的初始化中`<claimsAuthorizationElement>`。 典型的案例是使用這些子元素，來指定授權原則會決定哪些宣告類型和值，才能存取哪些資源。 這不是硬性需求，但您可以自由定義任何使用方式和語法適合您的實作。  
  
   
  
## Examples  
 中所使用的程式碼範例<xref:System.Security.Claims.ClaimsAuthorizationManager>取自主題`Claims Based Authorization`範例。 此範例提供自訂宣告授權管理員可授權主體根據組態中所指定的原則。 自訂宣告授權管理員是由三個基本元件所組成： 類別衍生自<xref:System.Security.Claims.ClaimsAuthorizationManager>實作管理員，`ResourceAction`類別，其中會有成對資源和動作，以及原則的讀取器讀取並編譯原則指定組態檔中。 此編譯原則可能則由宣告授權管理員來評估來授與對資源的存取權的主體。 並非所有的項目會顯示為了保持簡潔。 如需此範例，並提供其他範例的 WIF 以及其下載位置，請參閱[WIF 程式碼範例索引](~/docs/framework/security/wif-code-sample-index.md)。  
  
 下列程式碼會示範自訂宣告授權管理員的實作。 <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A>方法會讀取並編譯組態的原則，藉由使用原則讀取器協助程式類別 （未顯示） 和<xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A>方法授與或拒絕此原則為基礎的存取。  
  
 [!code-csharp[WifClaimsBasedAuthorization#2](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#2)]  
  
 下列程式碼示範`ResourceAction`自訂宣告管理員所使用的類別。  
  
 [!code-csharp[WifClaimsBasedAuthorization#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/resourceaction.cs#1)]  
  
 下列 XML 程式碼顯示如何設定宣告授權管理員 web 應用程式裝載在 IIS 7.5 中，如上所示。 只有當項目特有的宣告授權管理員的組態會顯示。 請注意，參考<xref:System.IdentityModel.Services.ClaimsAuthorizationModule>類別必須加入至在管線`<system.Webserver>`項目。 站台和應用程式裝載在 IIS 7 之前的 IIS 版本的模組新增至在管線`<system.Web>`項目。 此設定時顯示，但是標記為註解。  
  
 使用宣告授權管理員的原則由自訂`<policy>`下的項目[ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md)項目。 在第一個原則中，主體必須擁有指定的宣告，以便在指定的資源上執行指定的動作的其中一個。 在第二個原則中，主體必須擁有這兩個宣告，若要能夠在指定的資源上執行指定的動作。 在所有其他主體自動授與存取權，不論它擁有的宣告。  
  
```  
<configuration>  
  <configSections>  
    <!--WIF 4.5 sections -->  
    <section name="system.identityModel" type="System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
    ...  
  
  </configSections>  
  
  ...  
  
  <system.web>  
    <httpModules>  
      <!--WIF 4.5 modules -->  
      <!--Not needed here for IIS >= 7 -->  
      <!--<add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>-->  
    </httpModules>  
  </system.web>  
  
  ...  
  
  <system.webServer>  
    <modules>  
      <!--WIF 4.5 modules -->  
      <add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>  
    </modules>  
  </system.webServer>  
  
  ...  
  
  <!-- WIF 4.5 s.im section-->  
  <system.identityModel>  
    <identityConfiguration>  
      <claimsAuthorizationManager type="ClaimsAuthorizationLibrary.MyClaimsAuthorizationManager, ClaimsAuthorizationLibrary">  
        <policy resource="http://localhost:28491/Developers.aspx" action="GET">  
          <or>  
            <claim claimType="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" claimValue="developer" />  
            <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
          </or>  
        </policy>  
        <policy resource="http://localhost:28491/Administrators.aspx" action="GET">  
          <and>  
            <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
            <claim claimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country" claimValue="USA" />  
          </and>  
        </policy>  
        <policy resource="http://localhost:28491/Default.aspx" action="GET">  
        </policy>  
        <policy resource="http://localhost:28491/" action="GET">  
        </policy>  
        <policy resource="http://localhost:28491/Claims.aspx" action="GET">  
        </policy>  
      </claimsAuthorizationManager>  
  
      ...  
  
    </identityConfiguration>  
  </system.identityModel>  
  ...  
  
</configuration><configuration>  
  <configSections>  
    <!--WIF 4.5 sections -->  
    <section name="system.identityModel" type="System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
    ...  
  
  </configSections>  
  
  ...  
  
  <system.web>  
    <httpModules>  
      <!--WIF 4.5 modules -->  
      <!--Not needed here for IIS >= 7 -->  
      <!--<add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>-->  
    </httpModules>  
  </system.web>  
  
  ...  
  
  <system.webServer>  
    <modules>  
      <!--WIF 4.5 modules -->  
      <add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>  
    </modules>  
  </system.webServer>  
  
  ...  
  
  <!-- WIF 4.5 s.im section-->  
  <system.identityModel>  
    <identityConfiguration>  
      <claimsAuthorizationManager type="MyClaimsAuthorizationManager.SimpleClaimsAuthoirzationManager, MyClaimsAuthorizationManager" />  
      ...  
  
  </system.identityModel>  
  ...  
  
</configuration>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClaimsAuthorizationManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthorizationManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ClaimsAuthorizationManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public virtual bool CheckAccess (System.Security.Claims.AuthorizationContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CheckAccess(class System.Security.Claims.AuthorizationContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess(System.Security.Claims.AuthorizationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CheckAccess (context As AuthorizationContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CheckAccess(System::Security::Claims::AuthorizationContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member CheckAccess : System.Security.Claims.AuthorizationContext -&gt; bool&#xA;override this.CheckAccess : System.Security.Claims.AuthorizationContext -&gt; bool" Usage="claimsAuthorizationManager.CheckAccess context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Security.Claims.AuthorizationContext" />
      </Parameters>
      <Docs>
        <param name="context">授權內容，其中包含授權要檢查的主旨、資源及動作。</param>
        <summary>在衍生類別中實作時，檢查指定之內容中主題的授權，才能對指定的資源上執行指定的動作。</summary>
        <returns>如果主體獲得授權，可以對指定的資源執行指定的動作，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 基底實作一定會傳回`true`，這會授權存取。 您可以覆寫這個方法來授權存取您的 RP 應用程式的需求為基礎的衍生類別中。 如果此方法傳回`false`，Windows Identity Foundation (WIF) 傳回呼叫端未經授權的錯誤; 否則執行會傳遞至 RP 應用程式。  
  
   
  
## Examples  
 中所使用的程式碼範例<xref:System.Security.Claims.ClaimsAuthorizationManager>取自主題`Claims Based Authorization`範例。 此範例提供自訂宣告授權管理員可授權主體根據組態中所指定的原則。 自訂宣告授權管理員是由三個基本元件所組成： 類別衍生自<xref:System.Security.Claims.ClaimsAuthorizationManager>實作管理員，`ResourceAction`類別，其中會有成對資源和動作，以及原則的讀取器讀取並編譯原則指定組態檔中。 此編譯原則可能則由宣告授權管理員來評估來授與對資源的存取權的主體。 並非所有的項目會顯示為了保持簡潔。 如需此範例，並提供其他範例的 WIF 以及其下載位置，請參閱[WIF 程式碼範例索引](~/docs/framework/security/wif-code-sample-index.md)。  
  
 下列程式碼顯示的覆寫<xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A>方法。 這個方法會授與或拒絕讀取，並從組態檔所編譯的原則為依據的存取。  
  
 [!code-csharp[WifClaimsBasedAuthorization#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#3)]  
[!code-csharp[WifClaimsBasedAuthorization#5](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#5)]  
  
 下列程式碼示範`ResourceAction`自訂宣告管理員所使用的類別。  
  
 [!code-csharp[WifClaimsBasedAuthorization#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/resourceaction.cs#1)]  
  
 使用宣告授權管理員的原則由自訂`<policy>`下的項目[ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md)項目。 這項原則會讀取並編譯<xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A>方法。 在第一個原則中，主體必須擁有指定的宣告，以便在指定的資源上執行指定的動作的其中一個。 在第二個原則中，主體必須擁有這兩個宣告，若要能夠在指定的資源上執行指定的動作。 在所有其他主體自動授與存取權，不論它擁有的宣告。  
  
```  
<system.identityModel>  
  <identityConfiguration>  
    <claimsAuthorizationManager type="ClaimsAuthorizationLibrary.MyClaimsAuthorizationManager, ClaimsAuthorizationLibrary">  
      <policy resource="http://localhost:28491/Developers.aspx" action="GET">  
        <or>  
          <claim claimType="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" claimValue="developer" />  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
        </or>  
      </policy>  
      <policy resource="http://localhost:28491/Administrators.aspx" action="GET">  
        <and>  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
          <claim claimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country" claimValue="USA" />  
        </and>  
      </policy>  
      <policy resource="http://localhost:28491/Default.aspx" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/Claims.aspx" action="GET">  
      </policy>  
    </claimsAuthorizationManager>  
  
    ...  
  
  </identityConfiguration>  
</system.identityModel>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadCustomConfiguration">
      <MemberSignature Language="C#" Value="public virtual void LoadCustomConfiguration (System.Xml.XmlNodeList nodelist);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadCustomConfiguration(class System.Xml.XmlNodeList nodelist) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration(System.Xml.XmlNodeList)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub LoadCustomConfiguration (nodelist As XmlNodeList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void LoadCustomConfiguration(System::Xml::XmlNodeList ^ nodelist);" />
      <MemberSignature Language="F#" Value="abstract member LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit&#xA;override this.LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit" Usage="claimsAuthorizationManager.LoadCustomConfiguration nodelist" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IdentityModel.Configuration.ICustomIdentityConfiguration.LoadCustomConfiguration(System.Xml.XmlNodeList)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodelist" Type="System.Xml.XmlNodeList" />
      </Parameters>
      <Docs>
        <param name="nodelist">自訂組態項目。 清單中的每個節點的型別為 <see cref="T:System.Xml.XmlElement" />。</param>
        <summary>在衍生類別中覆寫時，從 XML 載入自訂組態。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration%2A>設定基礎結構會呼叫方法。 呼叫這個方法時，`nodelist`會包含最上層子項目的[ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md)從組態檔的項目。 每個這些項目可能會包含屬性或子項目，根據您為您的衍生類別定義組態結構描述。 如果任何子項目不出現在`<claimsAuthorizationManager>`組態檔中的項目，這個方法不會呼叫。  
  
 預設實作會擲回<xref:System.NotImplementedException>。 覆寫此方法，以啟用從組態檔宣告授權管理員的初始化衍生類別中。 通常，將組態項目用來表示授權原則;不過，您可以定義項目，並根據您的應用程式的需求有意義的任何方式使用它們。  
  
   
  
## Examples  
 中所使用的程式碼範例<xref:System.Security.Claims.ClaimsAuthorizationManager>取自主題`Claims Based Authorization`範例。 此範例提供自訂宣告授權管理員可授權主體根據組態中所指定的原則。 自訂宣告授權管理員是由三個基本元件所組成： 類別衍生自<xref:System.Security.Claims.ClaimsAuthorizationManager>實作管理員，`ResourceAction`類別，其中會有成對資源和動作，以及原則的讀取器讀取並編譯原則指定組態檔中。 此編譯原則可能則由宣告授權管理員來評估來授與對資源的存取權的主體。 並非所有的項目會顯示為了保持簡潔。 如需此範例，並提供其他範例的 WIF 以及其下載位置，請參閱[WIF 程式碼範例索引](~/docs/framework/security/wif-code-sample-index.md)。  
  
 下列程式碼顯示的覆寫<xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A>方法。 這個方法會使用協助程式原則讀取器類別 （未顯示） 來讀取和編譯組態檔中指定的授權原則。 原則加入至字典中，供`ResourceAction`從資源和動作的項目，它們能為其建立的索引鍵物件。  
  
 [!code-csharp[WifClaimsBasedAuthorization#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#3)]  
[!code-csharp[WifClaimsBasedAuthorization#4](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#4)]  
  
 下列程式碼示範`ResourceAction`自訂宣告管理員所使用的類別。  
  
 [!code-csharp[WifClaimsBasedAuthorization#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/resourceaction.cs#1)]  
  
 使用宣告授權管理員的原則由自訂`<policy>`下的項目[ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md)項目。 這項原則會讀取並編譯<xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A>方法。 在第一個原則中，主體必須擁有指定的宣告，以便在指定的資源上執行指定的動作的其中一個。 在第二個原則中，主體必須擁有這兩個宣告，若要能夠在指定的資源上執行指定的動作。 在所有其他主體自動授與存取權，不論它擁有的宣告。  
  
```  
<system.identityModel>  
  <identityConfiguration>  
    <claimsAuthorizationManager type="ClaimsAuthorizationLibrary.MyClaimsAuthorizationManager, ClaimsAuthorizationLibrary">  
      <policy resource="http://localhost:28491/Developers.aspx" action="GET">  
        <or>  
          <claim claimType="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" claimValue="developer" />  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
        </or>  
      </policy>  
      <policy resource="http://localhost:28491/Administrators.aspx" action="GET">  
        <and>  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
          <claim claimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country" claimValue="USA" />  
        </and>  
      </policy>  
      <policy resource="http://localhost:28491/Default.aspx" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/Claims.aspx" action="GET">  
      </policy>  
    </claimsAuthorizationManager>  
  
    ...  
  
  </identityConfiguration>  
</system.identityModel>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>