<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="GenericTypeParameterBuilder.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5235896b9ddecdf929b635c0069551c988b47b79a.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">235896b9ddecdf929b635c0069551c988b47b79a</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.GenericTypeParameterBuilder">
          <source>Defines and creates generic type parameters for dynamically defined generic types and methods.</source>
          <target state="translated">定義和建立動態定義泛型類型和方法的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.GenericTypeParameterBuilder">
          <source>This class cannot be inherited.</source>
          <target state="translated">這個類別無法被繼承。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.GenericTypeParameterBuilder">
          <source>You can get an array of <ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder&gt;</ph> objects by using the <ph id="ph2">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A?displayProperty=nameWithType&gt;</ph> method to add type parameters to a dynamic type, thus making it a generic type, or by using the <ph id="ph3">&lt;xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A?displayProperty=nameWithType&gt;</ph> method to add type parameters to a dynamic method.</source>
          <target state="translated">您可以取得的陣列<ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder&gt;</ph>物件使用<ph id="ph2">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A?displayProperty=nameWithType&gt;</ph>方法，將型別參數，為動態類型，因此讓它成為泛型型別，或使用<ph id="ph3">&lt;xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A?displayProperty=nameWithType&gt;</ph>方法，將動態方法的型別參數。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.GenericTypeParameterBuilder">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder&gt;</ph> objects to add constraints to the type parameters.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder&gt;</ph>條件約束加入型別參數的物件。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.GenericTypeParameterBuilder">
          <source>Constraints are of three kinds:</source>
          <target state="translated">條件約束有三種：</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.GenericTypeParameterBuilder">
          <source>The base type constraint specifies that any type assigned to the generic type parameter must derive from a particular base type.</source>
          <target state="translated">基底類型條件約束會指定任何指派給泛型類型參數的類型必須衍生自特定的基底類型。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.GenericTypeParameterBuilder">
          <source>Set this constraint by using the <ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint%2A&gt;</ph> method.</source>
          <target state="translated">設定此條件約束使用<ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.GenericTypeParameterBuilder">
          <source>An interface constraint specifies that any type assigned to the generic type parameter must implement a particular interface.</source>
          <target state="translated">介面條件約束會指定任何指派給泛型類型參數的類型必須實作特定介面。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.GenericTypeParameterBuilder">
          <source>Set the interface constraints by using the <ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints%2A&gt;</ph> method.</source>
          <target state="translated">使用設定的介面條件約束<ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.GenericTypeParameterBuilder">
          <source>Special constraints specify that any type assigned to the generic type parameter must have a default constructor, must be a reference type, or must be a value type.</source>
          <target state="translated">特殊條件約束會指定任何指派給泛型類型參數的型別必須具有預設建構函式，必須是參考類型，或是必須是實值類型。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.GenericTypeParameterBuilder">
          <source>Set the special constraints for a type parameter by using the <ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes%2A&gt;</ph> method.</source>
          <target state="translated">設定使用的型別參數特殊條件約束<ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.GenericTypeParameterBuilder">
          <source>Interface constraints and special constraints cannot be retrieved using methods of the <ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder&gt;</ph> class.</source>
          <target state="translated">介面條件約束和特殊條件約束無法擷取使用的方法<ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder&gt;</ph>類別。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.GenericTypeParameterBuilder">
          <source>Once you have created the generic type that contains the type parameters, you can use its <ph id="ph1">&lt;xref:System.Type&gt;</ph> object to reflect the constraints.</source>
          <target state="translated">當您建立包含的型別參數的泛型型別之後時，您可以使用其<ph id="ph1">&lt;xref:System.Type&gt;</ph>物件以反映這些條件約束。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.GenericTypeParameterBuilder">
          <source>Use the <ph id="ph1">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method to get the type parameters, and for each type parameter use the <ph id="ph2">&lt;xref:System.Type.GetGenericParameterConstraints%2A?displayProperty=nameWithType&gt;</ph> method to get the base type constraint and interface constraints, and the <ph id="ph3">&lt;xref:System.Type.GenericParameterAttributes%2A?displayProperty=nameWithType&gt;</ph> property to get the special constraints.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph>方法來取得的型別參數，每個類型參數使用<ph id="ph2">&lt;xref:System.Type.GetGenericParameterConstraints%2A?displayProperty=nameWithType&gt;</ph>方法來取得基底類型條件約束和介面條件約束，而<ph id="ph3">&lt;xref:System.Type.GenericParameterAttributes%2A?displayProperty=nameWithType&gt;</ph>屬性，即可取得的特殊條件約束。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.GenericTypeParameterBuilder">
          <source>The following code example creates a generic type with two type parameters, and saves them in the assembly GenericEmitExample1.dll.</source>
          <target state="translated">下列程式碼範例會建立具有兩個型別參數，泛型型別，並將它們儲存在組件 GenericEmitExample1.dll。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.GenericTypeParameterBuilder">
          <source>You can use the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> to view the generated types.</source>
          <target state="translated">您可以使用<bpt id="p1">[</bpt>Ildasm.exe （IL 解譯器）<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>若要檢視產生的型別。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.GenericTypeParameterBuilder">
          <source>For a more detailed explanation of the steps involved in defining a dynamic generic type, see <bpt id="p1">[</bpt>How to: Define a Generic Type with Reflection Emit<ept id="p1">](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-type-with-reflection-emit.md)</ept>.</source>
          <target state="translated">如需定義動態的泛型類型所需的步驟的更詳細說明，請參閱<bpt id="p1">[</bpt>如何： 定義泛型類型使用反映發出<ept id="p1">](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-type-with-reflection-emit.md)</ept>。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.Assembly">
          <source>Gets an <ph id="ph1">&lt;see cref="T:System.Reflection.Assembly" /&gt;</ph> object representing the dynamic assembly that contains the generic type definition the current type parameter belongs to.</source>
          <target state="translated">取得 <ph id="ph1">&lt;see cref="T:System.Reflection.Assembly" /&gt;</ph> 所屬的物件，代表包含泛型型別定義目前的型別參數的動態組件。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.Assembly">
          <source>An <ph id="ph1">&lt;see cref="T:System.Reflection.Assembly" /&gt;</ph> object representing the dynamic assembly that contains the generic type definition the current type parameter belongs to.</source>
          <target state="translated">取得 <ph id="ph1">&lt;see cref="T:System.Reflection.Assembly" /&gt;</ph> 所屬的物件，代表包含泛型型別定義目前的型別參數的動態組件。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.AssemblyQualifiedName">
          <source>Gets <ph id="ph1">&lt;see langword="null" /&gt;</ph> in all cases.</source>
          <target state="translated">取得所有情況下的 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.AssemblyQualifiedName">
          <source>A null reference (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic) in all cases.</source>
          <target state="translated">所有情況下的 null 參考 (在 Visual Basic 中為 <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.AssemblyQualifiedName">
          <source>There is no assembly-qualified name for type parameters because their scope is limited to the generic type that declares them.</source>
          <target state="translated">因為其範圍僅限於其宣告的泛型類型，沒有組件限定型別參數名稱。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.BaseType">
          <source>Gets the base type constraint of the current generic type parameter.</source>
          <target state="translated">取得目前泛型型別參數的基底類型條件約束。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.BaseType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that represents the base type constraint of the generic type parameter, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the type parameter has no base type constraint.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 物件，代表泛型型別參數的基底類型條件約束，或如果此類型參數沒有基底類型條件約束，則為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.BaseType">
          <source>To set the base type constraint, use the <ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint%2A&gt;</ph> method.</source>
          <target state="translated">若要設定的基底類型條件約束，請使用<ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.ContainsGenericParameters">
          <source>Gets <ph id="ph1">&lt;see langword="true" /&gt;</ph> in all cases.</source>
          <target state="translated">取得所有情況下的 <ph id="ph1">&lt;see langword="true" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.ContainsGenericParameters">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> in all cases.</source>
          <target state="translated">所有情況下都是 <ph id="ph1">&lt;see langword="true" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.ContainsGenericParameters">
          <source>A <ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder&gt;</ph> object always represents a generic type parameter.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder&gt;</ph>物件一律代表泛型型別參數。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.ContainsGenericParameters">
          <source>The value of the <ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder.ContainsGenericParameters%2A&gt;</ph> property reflects that fact and does not imply anything about any generic type argument that might be assigned to the type parameter.</source>
          <target state="translated">值<ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder.ContainsGenericParameters%2A&gt;</ph>屬性會反映該事實，並不代表任何可能會指派給型別參數的泛型型別引數相關的任何項目。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringMethod">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> that represents the declaring method, if the current <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /&gt;</ph> represents a type parameter of a generic method.</source>
          <target state="translated">如果目前的 <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> 表示泛型方法的類型參數，則取得表示宣告方法的 <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringMethod">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> that represents the declaring method, if the current <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /&gt;</ph> represents a type parameter of a generic method; otherwise, <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">如果目前的 <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /&gt;</ph> 表示泛型方法的類型參數，則為代表宣告方法的 <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph>；否則為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringMethod">
          <source>If the <ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringMethod%2A&gt;</ph> property is not <ph id="ph2">`null`</ph>, then the declaring method is a generic method definition and <ph id="ph3">`DeclaringMethod.IsGenericMethodDefinition`</ph> is <ph id="ph4">`true`</ph>.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringMethod%2A&gt;</ph>屬性不是<ph id="ph2">`null`</ph>，則宣告的方法是泛型方法定義和<ph id="ph3">`DeclaringMethod.IsGenericMethodDefinition`</ph>是<ph id="ph4">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringType">
          <source>Gets the generic type definition or generic method definition to which the generic type parameter belongs.</source>
          <target state="translated">取得泛型類型參數所屬的泛型類型定義或泛型方法定義。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringType">
          <source>If the type parameter belongs to a generic type, a <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object representing that generic type; if the type parameter belongs to a generic method, a <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> object representing that type that declared that generic method.</source>
          <target state="translated">如果類型參數屬於泛型類型，則 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 物件代表該泛型類型；如果類型參數屬於泛型方法，則 <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> 物件表示宣告該泛型方法的該類型。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringType">
          <source>The declaring type is not necessarily a generic type.</source>
          <target state="translated">宣告的型別不一定是泛型型別。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringType">
          <source>If the current type parameter belongs to a generic method, the type in which the method is declared might not be generic.</source>
          <target state="translated">如果目前的型別參數屬於泛型方法時，可能無法泛型宣告方法的型別。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.Equals(System.Object)">
          <source>The object to be compared with the current instance.</source>
          <target state="translated">要與目前執行個體比較的物件。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.Equals(System.Object)">
          <source>Tests whether the given object is an instance of <ph id="ph1">&lt;see langword="EventToken" /&gt;</ph> and is equal to the current instance.</source>
          <target state="translated">測試指定物件是否為 <ph id="ph1">&lt;see langword="EventToken" /&gt;</ph> 的執行個體，且是否等於目前的執行個體。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.Equals(System.Object)">
          <source>Returns <ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="o" /&gt;</ph> is an instance of <ph id="ph3">&lt;see langword="EventToken" /&gt;</ph> and equals the current instance; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph2">&lt;paramref name="o" /&gt;</ph> 是 <ph id="ph3">&lt;see langword="EventToken" /&gt;</ph> 的執行個體，並且等於目前的執行個體，則傳回 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否則為 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.FullName">
          <source>Gets <ph id="ph1">&lt;see langword="null" /&gt;</ph> in all cases.</source>
          <target state="translated">取得所有情況下的 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.FullName">
          <source>A null reference (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic) in all cases.</source>
          <target state="translated">所有情況下的 null 參考 (在 Visual Basic 中為 <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.FullName">
          <source>A generic type parameter does not have a full name, because its scope is limited to the generic type that declares it.</source>
          <target state="translated">泛型類型參數沒有完整的名稱，因為其範圍僅限於宣告它的泛型型別。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterAttributes">
          <source>Gets a combination of <ph id="ph1">&lt;see cref="T:System.Reflection.GenericParameterAttributes" /&gt;</ph> flags that describe the covariance and special constraints of the current generic type parameter.</source>
          <target state="translated">取得一組 <ph id="ph1">&lt;see cref="T:System.Reflection.GenericParameterAttributes" /&gt;</ph> 旗標，敘述目前泛型類型參數的共變數與特殊條件約束。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterAttributes">
          <source>A bitwise combination of values that describes the covariance and special constraints of the current generic type parameter.</source>
          <target state="translated">值的位元組合，描述目前泛型類型參數的共變數和特殊條件約束。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterPosition">
          <source>Gets the position of the type parameter in the type parameter list of the generic type or method that declared the parameter.</source>
          <target state="translated">取得類型參數在宣告參數的泛型類型或方法之類型參數清單中的位置。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterPosition">
          <source>The position of the type parameter in the type parameter list of the generic type or method that declared the parameter.</source>
          <target state="translated">類型參數在宣告參數的泛型類型或方法之類型參數清單中的位置。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructors(System.Reflection.BindingFlags)">
          <source>Not supported.</source>
          <target state="translated">不支援。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructors(System.Reflection.BindingFlags)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructors(System.Reflection.BindingFlags)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructors(System.Reflection.BindingFlags)">
          <source>This method is not supported for incomplete generic type parameters.</source>
          <target state="translated">這個方法不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructors(System.Reflection.BindingFlags)">
          <source>Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</source>
          <target state="translated">擷取已完成的泛型類型定義的型別參數，然後使用反映上擷取的類型。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructors(System.Reflection.BindingFlags)">
          <source>In all cases.</source>
          <target state="translated">在所有情況下。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.GenericTypeParameterBuilder">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Boolean)">
          <source>Specifies whether to search this member's inheritance chain to find the attributes.</source>
          <target state="translated">指定是否要搜尋這個成員的繼承鏈結以尋找屬性。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Boolean)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Boolean)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Boolean)">
          <source>This method is not supported for incomplete generic type parameters.</source>
          <target state="translated">這個方法不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Boolean)">
          <source>Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</source>
          <target state="translated">擷取已完成的泛型類型定義的型別參數，然後使用反映上擷取的類型。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Boolean)">
          <source>In all cases.</source>
          <target state="translated">在所有情況下。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>The type of attribute to search for.</source>
          <target state="translated">要搜尋的屬性類型。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Only attributes that are assignable to this type are returned.</source>
          <target state="translated">只會傳回可指派給這種類型的屬性。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Specifies whether to search this member's inheritance chain to find the attributes.</source>
          <target state="translated">指定是否要搜尋這個成員的繼承鏈結以尋找屬性。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>This method is not supported for incomplete generic type parameters.</source>
          <target state="translated">這個方法不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</source>
          <target state="translated">擷取已完成的泛型類型定義的型別參數，然後使用反映上擷取的類型。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>In all cases.</source>
          <target state="translated">在所有情況下。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetElementType">
          <source>Throws a <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> in all cases.</source>
          <target state="translated">在所有情況下都擲回 <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetElementType">
          <source>The type referred to by the current array type, pointer type, or <ph id="ph1">&lt;see langword="ByRef" /&gt;</ph> type; or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the current type is not an array type, is not a pointer type, and is not passed by reference.</source>
          <target state="translated">目前陣列類型、指標類型或 <ph id="ph1">&lt;see langword="ByRef" /&gt;</ph> 類型所參考的類型；如果目前類型不是陣列類型和指標類型，而且不是以傳址方式傳遞，則為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetElementType">
          <source>A generic type parameter is a placeholder for a type.</source>
          <target state="translated">泛型型別參數是類型的預留位置。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetElementType">
          <source>Because that type cannot be known in advance, there is no way to know whether it has an element type or what that element type might be.</source>
          <target state="translated">因為該類型無法事先知道，所以無法知道是否有項目類型或元素型別可能會。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetElementType">
          <source>Any return value would be misleading, so the method throws a <ph id="ph1">&lt;xref:System.NotSupportedException&gt;</ph>.</source>
          <target state="translated">任何傳回值就會產生誤導，所以此方法會擲回<ph id="ph1">&lt;xref:System.NotSupportedException&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetElementType">
          <source>In all cases.</source>
          <target state="translated">在所有情況下。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
          <source>Not supported.</source>
          <target state="translated">不支援。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
          <source>Not supported.</source>
          <target state="translated">不支援。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
          <source>This method is not supported for incomplete generic type parameters.</source>
          <target state="translated">這個方法不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
          <source>Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</source>
          <target state="translated">擷取已完成的泛型類型定義的型別參數，然後使用反映上擷取的類型。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
          <source>In all cases.</source>
          <target state="translated">在所有情況下。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.GenericTypeParameterBuilder">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents">
          <source>This method is not supported for incomplete generic type parameters.</source>
          <target state="translated">這個方法不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents">
          <source>Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</source>
          <target state="translated">擷取已完成的泛型類型定義的型別參數，然後使用反映上擷取的類型。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents">
          <source>In all cases.</source>
          <target state="translated">在所有情況下。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents(System.Reflection.BindingFlags)">
          <source>Not supported.</source>
          <target state="translated">不支援。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents(System.Reflection.BindingFlags)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents(System.Reflection.BindingFlags)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents(System.Reflection.BindingFlags)">
          <source>This method is not supported for incomplete generic type parameters.</source>
          <target state="translated">這個方法不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents(System.Reflection.BindingFlags)">
          <source>Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</source>
          <target state="translated">擷取已完成的泛型類型定義的型別參數，然後使用反映上擷取的類型。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents(System.Reflection.BindingFlags)">
          <source>In all cases.</source>
          <target state="translated">在所有情況下。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetField(System.String,System.Reflection.BindingFlags)">
          <source>Not supported.</source>
          <target state="translated">不支援。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetField(System.String,System.Reflection.BindingFlags)">
          <source>Not supported.</source>
          <target state="translated">不支援。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetField(System.String,System.Reflection.BindingFlags)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetField(System.String,System.Reflection.BindingFlags)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetField(System.String,System.Reflection.BindingFlags)">
          <source>This method is not supported for incomplete generic type parameters.</source>
          <target state="translated">這個方法不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetField(System.String,System.Reflection.BindingFlags)">
          <source>Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</source>
          <target state="translated">擷取已完成的泛型類型定義的型別參數，然後使用反映上擷取的類型。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetField(System.String,System.Reflection.BindingFlags)">
          <source>In all cases.</source>
          <target state="translated">在所有情況下。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetFields(System.Reflection.BindingFlags)">
          <source>Not supported.</source>
          <target state="translated">不支援。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetFields(System.Reflection.BindingFlags)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetFields(System.Reflection.BindingFlags)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetFields(System.Reflection.BindingFlags)">
          <source>This method is not supported for incomplete generic type parameters.</source>
          <target state="translated">這個方法不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetFields(System.Reflection.BindingFlags)">
          <source>Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</source>
          <target state="translated">擷取已完成的泛型類型定義的型別參數，然後使用反映上擷取的類型。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetFields(System.Reflection.BindingFlags)">
          <source>In all cases.</source>
          <target state="translated">在所有情況下。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericArguments">
          <source>Not valid for generic type parameters.</source>
          <target state="translated">對泛型類型參數無效。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericArguments">
          <source>Not valid for generic type parameters.</source>
          <target state="translated">對泛型類型參數無效。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericArguments">
          <source>In a constructed type, the type that is assigned to a generic type parameter can be a generic type, but the type parameter itself is not generic.</source>
          <target state="translated">在建構的型別，指派給泛型類型參數的型別可以是泛型類型，但本身的型別參數不是泛型。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericArguments">
          <source>In all cases.</source>
          <target state="translated">在所有情況下。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericTypeDefinition">
          <source>Not valid for generic type parameters.</source>
          <target state="translated">對泛型類型參數無效。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericTypeDefinition">
          <source>Not valid for generic type parameters.</source>
          <target state="translated">對泛型類型參數無效。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericTypeDefinition">
          <source>In a constructed type, the type that is assigned to a generic type parameter can be a generic type, but the type parameter itself is not generic.</source>
          <target state="translated">在建構的型別，指派給泛型類型參數的型別可以是泛型類型，但本身的型別參數不是泛型。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericTypeDefinition">
          <source>In all cases.</source>
          <target state="translated">在所有情況下。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetHashCode">
          <source>Returns a 32-bit integer hash code for the current instance.</source>
          <target state="translated">傳回目前執行個體的 32 位元整數雜湊碼。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetHashCode">
          <source>A 32-bit integer hash code.</source>
          <target state="translated">32 位元整數雜湊碼。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterface(System.String,System.Boolean)">
          <source>The name of the interface.</source>
          <target state="translated">介面的名稱。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterface(System.String,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to search without regard for case; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to make a case-sensitive search.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> 表示搜尋時忽略大小寫，而 <ph id="ph2">&lt;see langword="false" /&gt;</ph> 則表示執行區分大小寫的搜尋。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterface(System.String,System.Boolean)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterface(System.String,System.Boolean)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterface(System.String,System.Boolean)">
          <source>This method is not supported for incomplete generic type parameters.</source>
          <target state="translated">這個方法不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterface(System.String,System.Boolean)">
          <source>Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</source>
          <target state="translated">擷取已完成的泛型類型定義的型別參數，然後使用反映上擷取的類型。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterface(System.String,System.Boolean)">
          <source>In all cases.</source>
          <target state="translated">在所有情況下。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaceMap(System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that represents the interface type for which the mapping is to be retrieved.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 物件，表示要為其擷取對應的介面型別 (Interface Type)。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaceMap(System.Type)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaceMap(System.Type)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaceMap(System.Type)">
          <source>This method is not supported for incomplete generic type parameters.</source>
          <target state="translated">這個方法不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaceMap(System.Type)">
          <source>Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</source>
          <target state="translated">擷取已完成的泛型類型定義的型別參數，然後使用反映上擷取的類型。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaceMap(System.Type)">
          <source>In all cases.</source>
          <target state="translated">在所有情況下。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaces">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaces">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaces">
          <source>This method is not supported for incomplete generic type parameters.</source>
          <target state="translated">這個方法不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaces">
          <source>Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</source>
          <target state="translated">擷取已完成的泛型類型定義的型別參數，然後使用反映上擷取的類型。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaces">
          <source>In all cases.</source>
          <target state="translated">在所有情況下。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
          <source>Not supported.</source>
          <target state="translated">不支援。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
          <source>Not supported.</source>
          <target state="translated">不支援。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
          <source>Not supported.</source>
          <target state="translated">不支援。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
          <source>This method is not supported for incomplete generic type parameters.</source>
          <target state="translated">這個方法不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
          <source>Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</source>
          <target state="translated">擷取已完成的泛型類型定義的型別參數，然後使用反映上擷取的類型。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
          <source>In all cases.</source>
          <target state="translated">在所有情況下。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMembers(System.Reflection.BindingFlags)">
          <source>Not supported.</source>
          <target state="translated">不支援。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMembers(System.Reflection.BindingFlags)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMembers(System.Reflection.BindingFlags)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMembers(System.Reflection.BindingFlags)">
          <source>This method is not supported for incomplete generic type parameters.</source>
          <target state="translated">這個方法不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMembers(System.Reflection.BindingFlags)">
          <source>Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</source>
          <target state="translated">擷取已完成的泛型類型定義的型別參數，然後使用反映上擷取的類型。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMembers(System.Reflection.BindingFlags)">
          <source>In all cases.</source>
          <target state="translated">在所有情況下。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMethods(System.Reflection.BindingFlags)">
          <source>Not supported.</source>
          <target state="translated">不支援。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMethods(System.Reflection.BindingFlags)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMethods(System.Reflection.BindingFlags)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMethods(System.Reflection.BindingFlags)">
          <source>This method is not supported for incomplete generic type parameters.</source>
          <target state="translated">這個方法不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMethods(System.Reflection.BindingFlags)">
          <source>Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</source>
          <target state="translated">擷取已完成的泛型類型定義的型別參數，然後使用反映上擷取的類型。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMethods(System.Reflection.BindingFlags)">
          <source>In all cases.</source>
          <target state="translated">在所有情況下。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
          <source>Not supported.</source>
          <target state="translated">不支援。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
          <source>Not supported.</source>
          <target state="translated">不支援。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
          <source>This method is not supported for incomplete generic type parameters.</source>
          <target state="translated">這個方法不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
          <source>Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</source>
          <target state="translated">擷取已完成的泛型類型定義的型別參數，然後使用反映上擷取的類型。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
          <source>In all cases.</source>
          <target state="translated">在所有情況下。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
          <source>Not supported.</source>
          <target state="translated">不支援。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
          <source>This method is not supported for incomplete generic type parameters.</source>
          <target state="translated">這個方法不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
          <source>Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</source>
          <target state="translated">擷取已完成的泛型類型定義的型別參數，然後使用反映上擷取的類型。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
          <source>In all cases.</source>
          <target state="translated">在所有情況下。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetProperties(System.Reflection.BindingFlags)">
          <source>Not supported.</source>
          <target state="translated">不支援。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetProperties(System.Reflection.BindingFlags)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetProperties(System.Reflection.BindingFlags)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetProperties(System.Reflection.BindingFlags)">
          <source>This method is not supported for incomplete generic type parameters.</source>
          <target state="translated">這個方法不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetProperties(System.Reflection.BindingFlags)">
          <source>Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</source>
          <target state="translated">擷取已完成的泛型類型定義的型別參數，然後使用反映上擷取的類型。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetProperties(System.Reflection.BindingFlags)">
          <source>In all cases.</source>
          <target state="translated">在所有情況下。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.GUID">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.GUID">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.GUID">
          <source>This property is not supported for incomplete generic type parameters.</source>
          <target state="translated">這個屬性不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.GUID">
          <source>Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</source>
          <target state="translated">擷取已完成的泛型類型定義的型別參數，然後使用反映上擷取的類型。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.GUID">
          <source>In all cases.</source>
          <target state="translated">在所有情況下。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>Not supported.</source>
          <target state="translated">不支援。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>Not supported.</source>
          <target state="translated">不支援。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>Not supported.</source>
          <target state="translated">不支援。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>Not supported.</source>
          <target state="translated">不支援。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>Not supported.</source>
          <target state="translated">不支援。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>Not supported.</source>
          <target state="translated">不支援。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>Not supported.</source>
          <target state="translated">不支援。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>Not supported.</source>
          <target state="translated">不支援。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>This method is not supported for incomplete generic type parameters.</source>
          <target state="translated">這個方法不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</source>
          <target state="translated">擷取已完成的泛型類型定義的型別參數，然後使用反映上擷取的類型。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>In all cases.</source>
          <target state="translated">在所有情況下。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.GenericTypeParameterBuilder">
          <source>Throws a <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> exception in all cases.</source>
          <target state="translated">在所有情況下都會擲回 <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> 例外狀況。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Reflection.TypeInfo)">
          <source>The object to test.</source>
          <target state="translated">要測試的物件。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Reflection.TypeInfo)">
          <source>Throws a <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> exception in all cases.</source>
          <target state="translated">在所有情況下都會擲回 <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> 例外狀況。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Reflection.TypeInfo)">
          <source>Throws a <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> exception in all cases.</source>
          <target state="translated">在所有情況下都會擲回 <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> 例外狀況。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Reflection.TypeInfo)">
          <source>This method is not supported for incomplete generic type parameters.</source>
          <target state="translated">這個方法不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Reflection.TypeInfo)">
          <source>Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</source>
          <target state="translated">擷取已完成的泛型類型定義的型別參數，然後使用反映上擷取的類型。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Reflection.TypeInfo)">
          <source>In all cases.</source>
          <target state="translated">在所有情況下。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Type)">
          <source>The object to test.</source>
          <target state="translated">要測試的物件。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Type)">
          <source>Throws a <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> exception in all cases.</source>
          <target state="translated">在所有情況下都會擲回 <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> 例外狀況。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Type)">
          <source>Throws a <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> exception in all cases.</source>
          <target state="translated">在所有情況下都會擲回 <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> 例外狀況。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Type)">
          <source>This method is not supported for incomplete generic type parameters.</source>
          <target state="translated">這個方法不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Type)">
          <source>Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</source>
          <target state="translated">擷取已完成的泛型類型定義的型別參數，然後使用反映上擷取的類型。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Type)">
          <source>In all cases.</source>
          <target state="translated">在所有情況下。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsConstructedGenericType">
          <source>Gets a value that indicates whether this object represents a constructed generic type.</source>
          <target state="translated">取得值，指出這個物件是否表示建構的泛型類型。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsConstructedGenericType">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this object represents a constructed generic type; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果這個物件代表建構的泛型類型，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsDefined(System.Type,System.Boolean)">
          <source>Not supported.</source>
          <target state="translated">不支援。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsDefined(System.Type,System.Boolean)">
          <source>Not supported.</source>
          <target state="translated">不支援。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsDefined(System.Type,System.Boolean)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsDefined(System.Type,System.Boolean)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsDefined(System.Type,System.Boolean)">
          <source>This method is not supported for incomplete generic type parameters.</source>
          <target state="translated">這個方法不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsDefined(System.Type,System.Boolean)">
          <source>Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</source>
          <target state="translated">擷取已完成的泛型類型定義的型別參數，然後使用反映上擷取的類型。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsDefined(System.Type,System.Boolean)">
          <source>In all cases.</source>
          <target state="translated">在所有情況下。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericParameter">
          <source>Gets <ph id="ph1">&lt;see langword="true" /&gt;</ph> in all cases.</source>
          <target state="translated">取得所有情況下的 <ph id="ph1">&lt;see langword="true" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericParameter">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> in all cases.</source>
          <target state="translated">所有情況下都是 <ph id="ph1">&lt;see langword="true" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericType">
          <source>Returns <ph id="ph1">&lt;see langword="false" /&gt;</ph> in all cases.</source>
          <target state="translated">在所有情況下都會傳回 <ph id="ph1">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericType">
          <source><ph id="ph1">&lt;see langword="false" /&gt;</ph> in all cases.</source>
          <target state="translated">所有情況下都是 <ph id="ph1">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericType">
          <source>In a constructed type, the type that is assigned to a generic type parameter can be a generic type, but the type parameter itself is not generic.</source>
          <target state="translated">在建構的型別，指派給泛型類型參數的型別可以是泛型類型，但本身的型別參數不是泛型。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericTypeDefinition">
          <source>Gets <ph id="ph1">&lt;see langword="false" /&gt;</ph> in all cases.</source>
          <target state="translated">取得所有情況下的 <ph id="ph1">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericTypeDefinition">
          <source><ph id="ph1">&lt;see langword="false" /&gt;</ph> in all cases.</source>
          <target state="translated">所有情況下都是 <ph id="ph1">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericTypeDefinition">
          <source>In a constructed type, the type that is assigned to a generic type parameter can be a generic type, but the type parameter itself is not generic.</source>
          <target state="translated">在建構的型別，指派給泛型類型參數的型別可以是泛型類型，但本身的型別參數不是泛型。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsSubclassOf(System.Type)">
          <source>Not supported.</source>
          <target state="translated">不支援。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsSubclassOf(System.Type)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsSubclassOf(System.Type)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsSubclassOf(System.Type)">
          <source>This method is not supported for incomplete generic type parameters.</source>
          <target state="translated">這個方法不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsSubclassOf(System.Type)">
          <source>Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</source>
          <target state="translated">擷取已完成的泛型類型定義的型別參數，然後使用反映上擷取的類型。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsSubclassOf(System.Type)">
          <source>In all cases.</source>
          <target state="translated">在所有情況下。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.GenericTypeParameterBuilder">
          <source>Returns the type of an array whose element type is the generic type parameter.</source>
          <target state="translated">傳回陣列的類型，其項目類型是泛型型別參數。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType">
          <source>Returns the type of a one-dimensional array whose element type is the generic type parameter.</source>
          <target state="translated">傳回一維陣列型別，其元素型別為泛型型別參數。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that represents the type of a one-dimensional array whose element type is the generic type parameter.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 物件，表示其元素型別為泛型型別參數的一維陣列型別。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType">
          <source>The <ph id="ph1">&lt;xref:System.Type.MakeArrayType%2A&gt;</ph> method provides a way to generate array types for parameter lists.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Type.MakeArrayType%2A&gt;</ph>方法可用來產生參數清單的陣列型別。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType">
          <source>The following code example creates a dynamic module, an abstract generic type named <ph id="ph1">`Sample`</ph> with one type parameter, <ph id="ph2">`T`</ph>, and an abstract method named <ph id="ph3">`TestMethod`</ph>.</source>
          <target state="translated">下列程式碼範例會建立動態模組，也就是抽象的泛型型別，以名為<ph id="ph1">`Sample`</ph>一個型別參數與<ph id="ph2">`T`</ph>，和名為的抽象方法<ph id="ph3">`TestMethod`</ph>。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType">
          <source><ph id="ph1">`TestMethod`</ph> takes a <ph id="ph2">`ref`</ph> parameter (<ph id="ph3">`ByRef`</ph> in Visual Basic) of type <ph id="ph4">`T`</ph>, a pointer to type <ph id="ph5">`T`</ph>, and an array of <ph id="ph6">`T`</ph>.</source>
          <target state="translated"><ph id="ph1">`TestMethod`</ph> 會採用<ph id="ph2">`ref`</ph>參數 (<ph id="ph3">`ByRef`</ph>在 Visual Basic 中) 的型別<ph id="ph4">`T`</ph>，類型的指標<ph id="ph5">`T`</ph>，以及陣列<ph id="ph6">`T`</ph>。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType">
          <source>This method returns a two-dimensional array of <ph id="ph1">`T`</ph>.</source>
          <target state="translated">這個方法會傳回的二維陣列<ph id="ph1">`T`</ph>。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType">
          <source>The code example saves the dynamic module to disk, so you can examine it using the MSIL Disassembler (Ildasm.exe).</source>
          <target state="translated">程式碼範例，將動態模組儲存至磁碟，因此您可以檢查它使用 MSIL 組譯工具 (Ildasm.exe)。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType(System.Int32)">
          <source>The number of dimensions for the array.</source>
          <target state="translated">陣列的維度數目。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType(System.Int32)">
          <source>Returns the type of an array whose element type is the generic type parameter, with the specified number of dimensions.</source>
          <target state="translated">傳回陣列的類型，其項目類型是以維度數目指定的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType(System.Int32)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that represents the type of an array whose element type is the generic type parameter, with the specified number of dimensions.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 物件，代表陣列的類型，其項目類型是以維度數目指定的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Type.MakeArrayType%2A&gt;</ph> method provides a way to generate array types for parameter lists.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Type.MakeArrayType%2A&gt;</ph>方法可用來產生參數清單的陣列型別。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType(System.Int32)">
          <source>The following code example creates a dynamic module, an abstract generic type named <ph id="ph1">`Sample`</ph> with one type parameter, <ph id="ph2">`T`</ph>, and an abstract method named <ph id="ph3">`TestMethod`</ph>.</source>
          <target state="translated">下列程式碼範例會建立動態模組，也就是抽象的泛型型別，以名為<ph id="ph1">`Sample`</ph>一個型別參數與<ph id="ph2">`T`</ph>，和名為的抽象方法<ph id="ph3">`TestMethod`</ph>。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType(System.Int32)">
          <source><ph id="ph1">`TestMethod`</ph> takes a <ph id="ph2">`ref`</ph> parameter (<ph id="ph3">`ByRef`</ph> in Visual Basic) of type <ph id="ph4">`T`</ph>, a pointer to type <ph id="ph5">`T`</ph>, and an array of <ph id="ph6">`T`</ph>.</source>
          <target state="translated"><ph id="ph1">`TestMethod`</ph> 會採用<ph id="ph2">`ref`</ph>參數 (<ph id="ph3">`ByRef`</ph>在 Visual Basic 中) 的型別<ph id="ph4">`T`</ph>，類型的指標<ph id="ph5">`T`</ph>，以及陣列<ph id="ph6">`T`</ph>。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType(System.Int32)">
          <source>This method returns a two-dimensional array of <ph id="ph1">`T`</ph>.</source>
          <target state="translated">這個方法會傳回的二維陣列<ph id="ph1">`T`</ph>。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType(System.Int32)">
          <source>The code example saves the dynamic module to disk, so you can examine it using the MSIL Disassembler (Ildasm.exe).</source>
          <target state="translated">程式碼範例，將動態模組儲存至磁碟，因此您可以檢查它使用 MSIL 組譯工具 (Ildasm.exe)。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="rank" /&gt;</ph> is not a valid number of dimensions.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="rank" /&gt;</ph> 不是有效的維度數目。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType(System.Int32)">
          <source>For example, its value is less than 1.</source>
          <target state="translated">例如，其值為小於 1。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that represents the current generic type parameter when passed as a reference parameter.</source>
          <target state="translated">傳回 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 物件，在做為參考參數傳遞時代表目前的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that represents the current generic type parameter when passed as a reference parameter.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 物件，在做為參考參數傳遞時代表目前的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType%2A&gt;</ph> method provides a way to generate <ph id="ph2">`ref`</ph> types (<ph id="ph3">`ByRef`</ph> in Visual Basic) for parameter lists.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType%2A&gt;</ph>方法可用來產生<ph id="ph2">`ref`</ph>類型 (<ph id="ph3">`ByRef`</ph>在 Visual Basic 中) 的參數清單。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType">
          <source>The following code example creates a dynamic module, an abstract generic type named <ph id="ph1">`Sample`</ph> with one type parameter, <ph id="ph2">`T`</ph>, and an abstract method named <ph id="ph3">`TestMethod`</ph>.</source>
          <target state="translated">下列程式碼範例會建立動態模組，也就是抽象的泛型型別，以名為<ph id="ph1">`Sample`</ph>一個型別參數與<ph id="ph2">`T`</ph>，和名為的抽象方法<ph id="ph3">`TestMethod`</ph>。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType">
          <source><ph id="ph1">`TestMethod`</ph> takes a <ph id="ph2">`ref`</ph> parameter (<ph id="ph3">`ByRef`</ph> in Visual Basic) of type <ph id="ph4">`T`</ph>, a pointer to type <ph id="ph5">`T`</ph>, and an array of <ph id="ph6">`T`</ph>.</source>
          <target state="translated"><ph id="ph1">`TestMethod`</ph> 會採用<ph id="ph2">`ref`</ph>參數 (<ph id="ph3">`ByRef`</ph>在 Visual Basic 中) 的型別<ph id="ph4">`T`</ph>，類型的指標<ph id="ph5">`T`</ph>，以及陣列<ph id="ph6">`T`</ph>。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType">
          <source>This method returns a two-dimensional array of <ph id="ph1">`T`</ph>.</source>
          <target state="translated">這個方法會傳回的二維陣列<ph id="ph1">`T`</ph>。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType">
          <source>The code example saves the dynamic module to disk, so you can examine it using the MSIL Disassembler (Ildasm.exe).</source>
          <target state="translated">程式碼範例，將動態模組儲存至磁碟，因此您可以檢查它使用 MSIL 組譯工具 (Ildasm.exe)。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeGenericType(System.Type[])">
          <source>An array of type arguments.</source>
          <target state="translated">類型引數的陣列。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeGenericType(System.Type[])">
          <source>Not valid for incomplete generic type parameters.</source>
          <target state="translated">不完整的泛型類型參數無效。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeGenericType(System.Type[])">
          <source>This method is invalid for incomplete generic type parameters.</source>
          <target state="translated">這個方法對不完整的泛型類型參數無效。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeGenericType(System.Type[])">
          <source>In all cases.</source>
          <target state="translated">在所有情況下。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that represents a pointer to the current generic type parameter.</source>
          <target state="translated">傳回 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 物件，代表指向目前泛型型別參數的指標。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that represents a pointer to the current generic type parameter.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 物件，代表指向目前泛型型別參數的指標。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType%2A&gt;</ph> method provides a way to generate pointer types for parameter lists.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType%2A&gt;</ph>方法可用來產生參數清單的指標類型。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType">
          <source>The following code example creates a dynamic module, an abstract generic type named <ph id="ph1">`Sample`</ph> with one type parameter, <ph id="ph2">`T`</ph>, and an abstract method named <ph id="ph3">`TestMethod`</ph>.</source>
          <target state="translated">下列程式碼範例會建立動態模組，也就是抽象的泛型型別，以名為<ph id="ph1">`Sample`</ph>一個型別參數與<ph id="ph2">`T`</ph>，和名為的抽象方法<ph id="ph3">`TestMethod`</ph>。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType">
          <source><ph id="ph1">`TestMethod`</ph> takes a <ph id="ph2">`ref`</ph> parameter (<ph id="ph3">`ByRef`</ph> in Visual Basic) of type <ph id="ph4">`T`</ph>, a pointer to type <ph id="ph5">`T`</ph>, and an array of <ph id="ph6">`T`</ph>.</source>
          <target state="translated"><ph id="ph1">`TestMethod`</ph> 會採用<ph id="ph2">`ref`</ph>參數 (<ph id="ph3">`ByRef`</ph>在 Visual Basic 中) 的型別<ph id="ph4">`T`</ph>，類型的指標<ph id="ph5">`T`</ph>，以及陣列<ph id="ph6">`T`</ph>。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType">
          <source>This method returns a two-dimensional array of <ph id="ph1">`T`</ph>.</source>
          <target state="translated">這個方法會傳回的二維陣列<ph id="ph1">`T`</ph>。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType">
          <source>The code example saves the dynamic module to disk, so you can examine it using the MSIL Disassembler (Ildasm.exe).</source>
          <target state="translated">程式碼範例，將動態模組儲存至磁碟，因此您可以檢查它使用 MSIL 組譯工具 (Ildasm.exe)。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.Module">
          <source>Gets the dynamic module that contains the generic type parameter.</source>
          <target state="translated">取得包含泛型類型參數的動態模組。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.Module">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.Module" /&gt;</ph> object that represents the dynamic module that contains the generic type parameter.</source>
          <target state="translated">表示包含泛型類型參數之動態模組的 <ph id="ph1">&lt;see cref="T:System.Reflection.Module" /&gt;</ph> 物件。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.Name">
          <source>Gets the name of the generic type parameter.</source>
          <target state="translated">取得泛型類型參數的名稱。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.Name">
          <source>The name of the generic type parameter.</source>
          <target state="translated">泛型類型參數的名稱。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.Namespace">
          <source>Gets <ph id="ph1">&lt;see langword="null" /&gt;</ph> in all cases.</source>
          <target state="translated">取得所有情況下的 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.Namespace">
          <source>A null reference (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic) in all cases.</source>
          <target state="translated">所有情況下的 null 參考 (在 Visual Basic 中為 <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.ReflectedType">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that was used to obtain the <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /&gt;</ph>.</source>
          <target state="translated">取得用於取得 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 的 <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /&gt;</ph> 物件。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.ReflectedType">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that was used to obtain the <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /&gt;</ph>.</source>
          <target state="translated">用於取得 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 的 <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /&gt;</ph> 物件。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint(System.Type)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that must be inherited by any type that is to be substituted for the type parameter.</source>
          <target state="translated">所有類型必須繼承才能取代成類型參數的 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint(System.Type)">
          <source>Sets the base type that a type must inherit in order to be substituted for the type parameter.</source>
          <target state="translated">設定基底類型必須繼承才能取代成類型參數的類型。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint(System.Type)">
          <source>To retrieve the base type constraint use the <ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder.BaseType%2A&gt;</ph> property.</source>
          <target state="translated">若要擷取的基底類型條件約束使用<ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder.BaseType%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint(System.Type)">
          <source>Once you have created the generic type that contains the type parameter, you can use its <ph id="ph1">&lt;xref:System.Type&gt;</ph> object to reflect the type parameter and their constraints.</source>
          <target state="translated">當您建立包含型別參數的泛型型別之後時，您可以使用其<ph id="ph1">&lt;xref:System.Type&gt;</ph>物件以反映型別參數和其條件約束。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint(System.Type)">
          <source>To get the type parameters of a completed generic type, use the <ph id="ph1">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">若要取得完整的泛型類型的型別參數，請使用<ph id="ph1">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint(System.Type)">
          <source>For each type parameter, get the base type constraint and interface constraints by using the <ph id="ph1">&lt;xref:System.Type.GetGenericParameterConstraints%2A?displayProperty=nameWithType&gt;</ph> method, and get the special constraints by using the <ph id="ph2">&lt;xref:System.Type.GenericParameterAttributes%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">每個類型參數，取得基底類型條件約束和介面條件約束使用<ph id="ph1">&lt;xref:System.Type.GetGenericParameterConstraints%2A?displayProperty=nameWithType&gt;</ph>方法，這個方法，以取得特殊條件約束使用<ph id="ph2">&lt;xref:System.Type.GenericParameterAttributes%2A?displayProperty=nameWithType&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint(System.Type)">
          <source>The following code example creates a generic type with two type parameters, the second of which has a base type constraint, and saves them in the assembly GenericEmitExample1.dll.</source>
          <target state="translated">下列程式碼範例會建立具有兩個型別參數，第二個具有基底類型條件約束，並將其儲存在組件 GenericEmitExample1.dll 泛型型別。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint(System.Type)">
          <source>You can use the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> to view the generated types.</source>
          <target state="translated">您可以使用<bpt id="p1">[</bpt>Ildasm.exe （IL 解譯器）<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>若要檢視產生的型別。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint(System.Type)">
          <source>For a more detailed explanation of the steps involved in defining a dynamic generic type, see <bpt id="p1">[</bpt>How to: Define a Generic Type with Reflection Emit<ept id="p1">](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-type-with-reflection-emit.md)</ept>.</source>
          <target state="translated">如需定義動態的泛型類型所需的步驟的更詳細說明，請參閱<bpt id="p1">[</bpt>如何： 定義泛型類型使用反映發出<ept id="p1">](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-type-with-reflection-emit.md)</ept>。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.GenericTypeParameterBuilder">
          <source>Sets a custom attribute.</source>
          <target state="translated">設定自訂屬性。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
          <source>An instance of a helper class that defines the custom attribute.</source>
          <target state="translated">定義自訂屬性之協助程式類別的執行個體。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
          <source>Set a custom attribute using a custom attribute builder.</source>
          <target state="translated">使用自訂屬性產生器來設定自訂屬性。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
          <source><ph id="ph1">&lt;paramref name="customBuilder" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="customBuilder" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source>The constructor for the custom attribute.</source>
          <target state="translated">自訂屬性的建構函式。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source>A byte blob representing the attribute.</source>
          <target state="translated">代表屬性的位元組 Blob。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source>Sets a custom attribute using a specified custom attribute blob.</source>
          <target state="translated">使用指定的自訂屬性 Blob 來設定自訂屬性。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source>For details on how to format <ph id="ph1">`binaryAttribute`</ph>, see the documentation for Partition II: Metadata Definition and Semantics.</source>
          <target state="translated">如需詳細資訊，如何格式化<ph id="ph1">`binaryAttribute`</ph>，請參閱第二篇文件： 中繼資料定義和語意。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">您可以線上取得這份文件；請參閱 MSDN 上的 <bpt id="p1">[</bpt>ECMA C# 和通用語言基礎結構標準<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept>，以及 Ecma International 網站上的<bpt id="p2">[</bpt>標準 ECMA-335 - 通用語言基礎結構 (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept>。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source><ph id="ph1">&lt;paramref name="con" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="con" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source><ph id="ph1">&lt;paramref name="binaryAttribute" /&gt;</ph> is a null reference.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="binaryAttribute" /&gt;</ph> 為 null 參考。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)">
          <source>A bitwise combination of <ph id="ph1">&lt;see cref="T:System.Reflection.GenericParameterAttributes" /&gt;</ph> values that represent the variance characteristics and special constraints of the generic type parameter.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.GenericParameterAttributes" /&gt;</ph> 值的位元組合，代表泛型類型參數的變異數特性和特殊條件約束。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)">
          <source>Sets the variance characteristics and special constraints of the generic parameter, such as the parameterless constructor constraint.</source>
          <target state="translated">設定泛型參數的變異數特性和特殊條件約束，例如無參數建構函式條件約束。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)">
          <source>Special constraints can specify that any type assigned to the generic type parameter must have a default constructor, must be a reference type, or must be a value type.</source>
          <target state="translated">特殊條件約束可以指定任何指派給泛型類型參數的型別必須具有預設建構函式，必須是參考類型，或是必須是實值類型。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)">
          <source>Special constraints cannot be retrieved using methods of the <ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder&gt;</ph> class.</source>
          <target state="translated">特殊條件約束不能使用的方法擷取<ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder&gt;</ph>類別。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)">
          <source>Once you have created the generic type that contains the type parameter, you can use its <ph id="ph1">&lt;xref:System.Type&gt;</ph> object to reflect the type parameters and their constraints.</source>
          <target state="translated">當您建立包含型別參數的泛型型別之後時，您可以使用其<ph id="ph1">&lt;xref:System.Type&gt;</ph>物件以反映型別參數和其條件約束。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)">
          <source>To get the type parameters of a completed generic type, use the <ph id="ph1">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">若要取得完整的泛型類型的型別參數，請使用<ph id="ph1">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)">
          <source>To get the special constraints for each type parameter, use the <ph id="ph1">&lt;xref:System.Type.GenericParameterAttributes%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">若要取得每個類型參數特殊條件約束，請使用<ph id="ph1">&lt;xref:System.Type.GenericParameterAttributes%2A?displayProperty=nameWithType&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.GenericParameterAttributes&gt;</ph> enumeration values that refer to the variance characteristics of a type parameter are relevant only in languages that support covariance and contravariance, such as Microsoft intermediate language (MSIL).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.GenericParameterAttributes&gt;</ph>參考型別參數的變異數特性的列舉值是僅適用於支援共變數和反變數，例如 Microsoft intermediate language (MSIL) 的語言。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)">
          <source>Visual Basic and C# currently do not support covariance and contravariance.</source>
          <target state="translated">Visual Basic 和 C# 目前不支援共變數和反變數。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)">
          <source>The following code example creates a generic type with two type parameters, the first of which is constrained to have a default constructor and to be a reference type, and saves them in the assembly GenericEmitExample1.dll.</source>
          <target state="translated">下列程式碼範例會建立具有兩個型別參數，其中的第一個有預設建構函式，而且必須是參考類型，受限於，並將其儲存在組件 GenericEmitExample1.dll 泛型型別。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)">
          <source>You can use the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> to view the generated types.</source>
          <target state="translated">您可以使用<bpt id="p1">[</bpt>Ildasm.exe （IL 解譯器）<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>若要檢視產生的型別。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)">
          <source>For a more detailed explanation of the steps involved in defining a dynamic generic type, see <bpt id="p1">[</bpt>How to: Define a Generic Type with Reflection Emit<ept id="p1">](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-type-with-reflection-emit.md)</ept>.</source>
          <target state="translated">如需定義動態的泛型類型所需的步驟的更詳細說明，請參閱<bpt id="p1">[</bpt>如何： 定義泛型類型使用反映發出<ept id="p1">](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-type-with-reflection-emit.md)</ept>。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints(System.Type[])">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects that represent the interfaces a type must implement in order to be substituted for the type parameter.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 物件的陣列，代表類型必須實作才能取代成類型參數的介面。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints(System.Type[])">
          <source>Sets the interfaces a type must implement in order to be substituted for the type parameter.</source>
          <target state="translated">設定類型必須實作才能取代成類型參數的介面。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints(System.Type[])">
          <source>Interface constraints cannot be retrieved using methods of the <ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder&gt;</ph> class.</source>
          <target state="translated">無法使用的方法來擷取介面條件約束<ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder&gt;</ph>類別。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints(System.Type[])">
          <source>Once you have created the generic type that contains the type parameter, you can use its <ph id="ph1">&lt;xref:System.Type&gt;</ph> object to reflect the type parameters and their constraints.</source>
          <target state="translated">當您建立包含型別參數的泛型型別之後時，您可以使用其<ph id="ph1">&lt;xref:System.Type&gt;</ph>物件以反映型別參數和其條件約束。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints(System.Type[])">
          <source>To get the type parameters of a completed generic type, use the <ph id="ph1">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">若要取得完整的泛型類型的型別參數，請使用<ph id="ph1">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints(System.Type[])">
          <source>For each type parameter, get the base type constraint and interface constraints by using the <ph id="ph1">&lt;xref:System.Type.GetGenericParameterConstraints%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">每個類型參數，取得基底類型條件約束和介面條件約束使用<ph id="ph1">&lt;xref:System.Type.GetGenericParameterConstraints%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints(System.Type[])">
          <source>The following code example creates a generic type with two type parameters, the second of which has two interface constraints, and saves them in the assembly GenericEmitExample1.dll.</source>
          <target state="translated">下列程式碼範例會建立具有兩個型別參數，第二個具有兩個介面條件約束，並將其儲存在組件 GenericEmitExample1.dll 泛型型別。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints(System.Type[])">
          <source>You can use the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> to view the generated types.</source>
          <target state="translated">您可以使用<bpt id="p1">[</bpt>Ildasm.exe （IL 解譯器）<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>若要檢視產生的型別。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints(System.Type[])">
          <source>For a more detailed explanation of the steps involved in defining a dynamic generic type, see <bpt id="p1">[</bpt>How to: Define a Generic Type with Reflection Emit<ept id="p1">](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-type-with-reflection-emit.md)</ept>.</source>
          <target state="translated">如需定義動態的泛型類型所需的步驟的更詳細說明，請參閱<bpt id="p1">[</bpt>如何： 定義泛型類型使用反映發出<ept id="p1">](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-type-with-reflection-emit.md)</ept>。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.ToString">
          <source>Returns a string representation of the current generic type parameter.</source>
          <target state="translated">傳回目前泛型類型參數的字串表示。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.ToString">
          <source>A string that contains the name of the generic type parameter.</source>
          <target state="translated">包含泛型類型參數名稱的字串。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.TypeHandle">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.TypeHandle">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.TypeHandle">
          <source>This property is not supported for incomplete generic type parameters.</source>
          <target state="translated">這個屬性不支援不完整的泛型類型參數。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.TypeHandle">
          <source>Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</source>
          <target state="translated">擷取已完成的泛型類型定義的型別參數，然後使用反映上擷取的類型。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.TypeHandle">
          <source>In all cases.</source>
          <target state="translated">在所有情況下。</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.UnderlyingSystemType">
          <source>Gets the current generic type parameter.</source>
          <target state="translated">取得目前的泛型型別參數。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.UnderlyingSystemType">
          <source>The current <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /&gt;</ph> object.</source>
          <target state="translated">目前的 <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /&gt;</ph> 物件。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>