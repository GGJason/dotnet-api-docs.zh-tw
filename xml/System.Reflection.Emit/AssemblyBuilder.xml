<Type Name="AssemblyBuilder" FullName="System.Reflection.Emit.AssemblyBuilder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ab13cffd2dfedd7d1791c80a61b1c35d8f51723e" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51889484" /></Metadata><TypeSignature Language="C#" Value="public sealed class AssemblyBuilder : System.Reflection.Assembly, System.Runtime.InteropServices._AssemblyBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit AssemblyBuilder extends System.Reflection.Assembly implements class System.Runtime.InteropServices._AssemblyBuilder" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Emit.AssemblyBuilder" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AssemblyBuilder&#xA;Inherits Assembly&#xA;Implements _AssemblyBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class AssemblyBuilder sealed : System::Reflection::Assembly, System::Runtime::InteropServices::_AssemblyBuilder" />
  <TypeSignature Language="F#" Value="type AssemblyBuilder = class&#xA;    inherit Assembly&#xA;    interface _AssemblyBuilder" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Emit</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Reflection.Assembly</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._AssemblyBuilder</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._AssemblyBuilder))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="f7fd8-101">定義及表示動態組件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-101">Defines and represents a dynamic assembly.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f7fd8-102">動態組件是使用反映發出 Api 建立的組件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-102">A dynamic assembly is an assembly that is created using the Reflection Emit APIs.</span></span> <span data-ttu-id="f7fd8-103">使用儲存動態組件時，系統會儲存在組件中的動態模組<xref:System.Reflection.Emit.AssemblyBuilder.Save%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-103">The dynamic modules in the assembly are saved when the dynamic assembly is saved using the <xref:System.Reflection.Emit.AssemblyBuilder.Save%2A> method.</span></span> <span data-ttu-id="f7fd8-104">若要產生可執行檔，<xref:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint%2A>必須呼叫方法，來識別組件的進入點的方法。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-104">To generate an executable, the <xref:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint%2A> method must be called to identify the method that is the entry point to the assembly.</span></span> <span data-ttu-id="f7fd8-105">組件會儲存為 Dll 根據預設，除非<xref:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint%2A>方法會要求產生的主控台應用程式或 Windows 為基礎的應用程式。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-105">Assemblies are saved as DLLs by default, unless the <xref:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint%2A> method requests the generation of a console application or a Windows-based application.</span></span>  
  
 <span data-ttu-id="f7fd8-106">如果在動態組件包含一個以上的動態模組，組件的資訊清單檔案名稱應該符合模組的名稱指定為第一個引數<xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-106">If a dynamic assembly contains more than one dynamic module, the assembly's manifest file name should match the module's name that is specified as the first argument to the <xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A> method.</span></span>  
  
 <span data-ttu-id="f7fd8-107">基底上的某些方法<xref:System.Reflection.Assembly>類別，例如`GetModules`並`GetLoadedModules`，將無法正常運作時從呼叫<xref:System.Reflection.Emit.AssemblyBuilder>物件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-107">Some methods on the base <xref:System.Reflection.Assembly> class, such as `GetModules` and `GetLoadedModules`, will not work correctly when called from <xref:System.Reflection.Emit.AssemblyBuilder> objects.</span></span> <span data-ttu-id="f7fd8-108">您可以定義動態組件載入，並載入的組件上呼叫的方法。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-108">You can load the defined dynamic assembly and call the methods on the loaded assembly.</span></span> <span data-ttu-id="f7fd8-109">例如，若要確保資源模組都包含在傳回的模組清單中，呼叫`GetModules`上載入<xref:System.Reflection.Assembly>物件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-109">For example, to ensure that resource modules are included in the returned module list, call `GetModules` on the loaded <xref:System.Reflection.Assembly> object.</span></span>  
  
 <span data-ttu-id="f7fd8-110">使用動態組件簽署<xref:System.Reflection.AssemblyName.KeyPair%2A>之前，沒有有效的組件會儲存到磁碟。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-110">The signing of a dynamic assembly using <xref:System.Reflection.AssemblyName.KeyPair%2A> is not effective until the assembly is saved to disk.</span></span> <span data-ttu-id="f7fd8-111">因此，強式名稱不適用於暫時性動態組件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-111">So, strong names will not work with transient dynamic assemblies.</span></span>  
  
 <span data-ttu-id="f7fd8-112">若要取得<xref:System.Reflection.Emit.AssemblyBuilder>物件，請使用<xref:System.AppDomain.DefineDynamicAssembly%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-112">To get an <xref:System.Reflection.Emit.AssemblyBuilder> object, use the <xref:System.AppDomain.DefineDynamicAssembly%2A?displayProperty=nameWithType> method.</span></span>  
  
## <a name="reflection-emit-dynamic-assembly-scenarios"></a><span data-ttu-id="f7fd8-113">反映發出動態組件案例</span><span class="sxs-lookup"><span data-stu-id="f7fd8-113">Reflection emit dynamic assembly scenarios</span></span>  
 <span data-ttu-id="f7fd8-114">以下是一些使用時要考慮的事項<xref:System.Reflection.Emit.AssemblyBuilder>類別來建立動態組件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-114">The following are some things to consider when using the <xref:System.Reflection.Emit.AssemblyBuilder> class to create dynamic assemblies.</span></span>  
  
### <a name="dynamic-modules"></a><span data-ttu-id="f7fd8-115">動態模組</span><span class="sxs-lookup"><span data-stu-id="f7fd8-115">Dynamic modules</span></span>  
 <span data-ttu-id="f7fd8-116">反映發出支援建立動態組件中定義的動態模組。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-116">Reflection emit supports the creation of dynamic modules defined in dynamic assemblies.</span></span> <span data-ttu-id="f7fd8-117">建立動態組件中的動態模組可以是暫時性或永久性。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-117">A dynamic module created in a dynamic assembly can be transient or persistable.</span></span>  
  
### <a name="restrictions-on-type-references"></a><span data-ttu-id="f7fd8-118">型別參考的限制</span><span class="sxs-lookup"><span data-stu-id="f7fd8-118">Restrictions on type references</span></span>  
 <span data-ttu-id="f7fd8-119">組件可以參考另一個組件中定義的型別。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-119">Assemblies can reference types defined in another assembly.</span></span> <span data-ttu-id="f7fd8-120">暫時性動態組件可以安全地參考另一部的暫時性動態組件，是永久性的動態組件或靜態組件中定義的型別。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-120">A transient dynamic assembly can safely reference types defined in another transient dynamic assembly, a persistable dynamic assembly, or a static assembly.</span></span> <span data-ttu-id="f7fd8-121">不過，common language runtime 不允許參考類型的暫時性動態模組中定義永久性動態模組。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-121">However, the common language runtime does not allow a persistable dynamic module to reference a type defined in a transient dynamic module.</span></span> <span data-ttu-id="f7fd8-122">這是因為在儲存到磁碟中，執行階段之後載入保存的動態模組時無法解析的暫時性動態模組中定義的型別參考。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-122">This is because when the persisted dynamic module is loaded after being saved to disk, the runtime cannot resolve the references to types defined in the transient dynamic module.</span></span>  
  
### <a name="restrictions-on-emitting-to-remote-application-domains"></a><span data-ttu-id="f7fd8-123">發出遠端應用程式定義域的限制</span><span class="sxs-lookup"><span data-stu-id="f7fd8-123">Restrictions on emitting to remote application domains</span></span>  
 <span data-ttu-id="f7fd8-124">某些情況下會需要建立及執行遠端應用程式定義域中的動態組件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-124">Some scenarios require a dynamic assembly to be created and executed in a remote application domain.</span></span> <span data-ttu-id="f7fd8-125">反映發出不允許直接與遠端應用程式定義域，就會發出動態組件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-125">Reflection emit does not allow a dynamic assembly to be emitted directly to a remote application domain.</span></span> <span data-ttu-id="f7fd8-126">解決方法是發出動態組件，目前的應用程式定義域中，將發出動態組件儲存至磁碟，然後載入遠端應用程式定義域中的動態組件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-126">The solution is to emit the dynamic assembly in the current application domain, save the emitted dynamic assembly to disk, and then load the dynamic assembly into the remote application domain.</span></span>  
  
### <a name="dynamic-assembly-access-modes"></a><span data-ttu-id="f7fd8-127">動態組件的存取模式</span><span class="sxs-lookup"><span data-stu-id="f7fd8-127">Dynamic assembly access modes</span></span>  
 <span data-ttu-id="f7fd8-128">可以使用下列的存取模式的其中一個來建立動態組件：</span><span class="sxs-lookup"><span data-stu-id="f7fd8-128">Dynamic assemblies can be created using one of the following access modes:</span></span>  
  
-   <xref:System.Reflection.Emit.AssemblyBuilderAccess.Run?displayProperty=nameWithType>  
  
     <span data-ttu-id="f7fd8-129">所表示的動態組件<xref:System.Reflection.Emit.AssemblyBuilder>物件是暫時性。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-129">The dynamic assembly represented by an <xref:System.Reflection.Emit.AssemblyBuilder> object is transient.</span></span> <span data-ttu-id="f7fd8-130">動態組件可以只用來執行發出的程式碼。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-130">The dynamic assembly can only be used to execute the emitted code.</span></span>  
  
-   <xref:System.Reflection.Emit.AssemblyBuilderAccess.Save?displayProperty=nameWithType>  
  
     <span data-ttu-id="f7fd8-131">所表示的動態組件<xref:System.Reflection.Emit.AssemblyBuilder>物件是否為永久性的但無法執行，直到已經從磁碟載入已儲存的可攜式執行檔 (PE)。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-131">The dynamic assembly represented by an <xref:System.Reflection.Emit.AssemblyBuilder> object is persistable but cannot be executed until the saved portable executable (PE) file has been loaded from disk.</span></span>  
  
-   <xref:System.Reflection.Emit.AssemblyBuilderAccess.RunAndSave?displayProperty=nameWithType>  
  
     <span data-ttu-id="f7fd8-132">所表示的動態組件<xref:System.Reflection.Emit.AssemblyBuilder>物件是永久性的但也可以在執行之前和/或組件會儲存到磁碟。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-132">The dynamic assembly represented by an <xref:System.Reflection.Emit.AssemblyBuilder> object is persistable, but can also be executed before and/or after the assembly is saved to disk.</span></span>  
  
 <span data-ttu-id="f7fd8-133">必須指定的存取模式，藉由提供適當<xref:System.Reflection.Emit.AssemblyBuilderAccess>的呼叫中的值<xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly%2A?displayProperty=nameWithType>方法定義動態組件，並稍後無法變更時。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-133">The access mode must be specified by providing the appropriate <xref:System.Reflection.Emit.AssemblyBuilderAccess> value in the call to the <xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly%2A?displayProperty=nameWithType> method when the dynamic assembly is defined and cannot be changed later.</span></span> <span data-ttu-id="f7fd8-134">執行階段會使用動態組件的存取模式，來最佳化組件的內部表示法。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-134">The runtime uses the access mode of a dynamic assembly to optimize the assembly's internal representation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f7fd8-135">下列程式碼範例示範如何定義具有一個模組的動態組件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-135">The following code example shows how to define a dynamic assembly with one module.</span></span> <span data-ttu-id="f7fd8-136">範例組件中的模組包含一種類型， `MyDynamicType`，其具有私用欄位、 取得和設定私用欄位的屬性、 建構函式會初始化私用欄位及將使用者提供的點數的私用欄位的方法值，並傳回結果。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-136">The module in the example assembly contains one type, `MyDynamicType`, which has a private field, a property that gets and sets the private field, constructors that initialize the private field, and a method that multiplies a user-supplied number by the private field value and returns the result.</span></span>  
  
 <span data-ttu-id="f7fd8-137"><xref:System.Reflection.Emit.AssemblyBuilderAccess.RunAndSave?displayProperty=nameWithType> 建立組件時指定的。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-137"><xref:System.Reflection.Emit.AssemblyBuilderAccess.RunAndSave?displayProperty=nameWithType> is specified when the assembly is created.</span></span> <span data-ttu-id="f7fd8-138">立即使用的組件程式碼及組件也會儲存至磁碟，以便它可以與檢查[Ildasm.exe （IL 反組譯工具）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)或用於另一個程式。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-138">The assembly code is used immediately, and the assembly is also saved to disk so that it can be examined with [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) or used in another program.</span></span>  
  
 [!code-cpp[AssemblyBuilderClass#1](~/samples/snippets/cpp/VS_Snippets_CLR/AssemblyBuilderClass/cpp/24895.cpp#1)]
 [!code-csharp[AssemblyBuilderClass#1](~/samples/snippets/csharp/VS_Snippets_CLR/AssemblyBuilderClass/cs/24895.cs#1)]
 [!code-vb[AssemblyBuilderClass#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AssemblyBuilderClass/vb/24895.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="f7fd8-139">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-139">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="f7fd8-140">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-140">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
    <altmember cref="Overload:System.AppDomain.DefineDynamicAssembly" />
    <related type="Article" href="https://msdn.microsoft.com/library/8e8e2631-62fd-40e7-a8ee-0039b06749bc"><span data-ttu-id="f7fd8-141">發出動態方法和組件</span><span class="sxs-lookup"><span data-stu-id="f7fd8-141">Emitting Dynamic Methods and Assemblies</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AssemblyBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AssemblyBuilder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddResourceFile">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f7fd8-142">將現有的資源檔加入這個組件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-142">Adds an existing resource file to this assembly.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddResourceFile">
      <MemberSignature Language="C#" Value="public void AddResourceFile (string name, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddResourceFile(string name, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.AddResourceFile(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddResourceFile (name As String, fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddResourceFile(System::String ^ name, System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.AddResourceFile : string * string -&gt; unit" Usage="assemblyBuilder.AddResourceFile (name, fileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="f7fd8-143">資源的邏輯名稱。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-143">The logical name of the resource.</span></span></param>
        <param name="fileName"><span data-ttu-id="f7fd8-144">邏輯名稱對應到實體檔案名稱 (.resources 檔案)。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-144">The physical file name (.resources file) to which the logical name is mapped.</span></span> <span data-ttu-id="f7fd8-145">這不應該包含路徑；該檔案必須與要加入該檔案的組件位於相同目錄中。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-145">This should not include a path; the file must be in the same directory as the assembly to which it is added.</span></span></param>
        <summary><span data-ttu-id="f7fd8-146">將現有的資源檔加入這個組件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-146">Adds an existing resource file to this assembly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f7fd8-147">`fileName` 不能與任何其他永久性的模組、 獨立受管理資源或獨立資訊清單檔案的相同。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-147">`fileName` should not be the same as that of any other persistable module, standalone managed resource, or the standalone manifest file.</span></span>  
  
 <span data-ttu-id="f7fd8-148">Managed 的資源檔中會假設為公用。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-148">The managed resources in the file are assumed to be public.</span></span>  
  
 <span data-ttu-id="f7fd8-149">指定的資源檔必須位於儲存組件的目錄。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-149">The specified resource file must be in the directory where the assembly will be saved.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f7fd8-150">開頭[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，這個成員已不再需要<xref:System.Security.Permissions.ReflectionPermission>使用<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType>旗標。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-150">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="f7fd8-151">(請參閱[反映發出中的安全性問題](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)。)若要使用這項功能，您的應用程式應將目標設為 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] (含) 以後版本。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-151">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f7fd8-152">下列程式碼範例示範如何將資源檔連結至使用動態建立組件`AddResourceFile`。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-152">The following code sample demonstrates how to attach a resource file to a dynamically created assembly, using `AddResourceFile`.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.AssemblyBuilder.AddResourceFile Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.AddResourceFile Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.AssemblyBuilder.AddResourceFile Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.AddResourceFile Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.AssemblyBuilder.AddResourceFile Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.AddResourceFile Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f7fd8-153">之前已定義過 <paramref name="name" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-153"><paramref name="name" /> has been previously defined.</span></span>  
  
<span data-ttu-id="f7fd8-154">-或-</span><span class="sxs-lookup"><span data-stu-id="f7fd8-154">-or-</span></span> 
<span data-ttu-id="f7fd8-155">組件中另有一個檔案名為 <paramref name="fileName" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-155">There is another file in the assembly named <paramref name="fileName" />.</span></span>  
  
<span data-ttu-id="f7fd8-156">-或-</span><span class="sxs-lookup"><span data-stu-id="f7fd8-156">-or-</span></span> 
<span data-ttu-id="f7fd8-157"><paramref name="name" /> 的長度為零。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-157">The length of <paramref name="name" /> is zero.</span></span>  
  
<span data-ttu-id="f7fd8-158">-或-</span><span class="sxs-lookup"><span data-stu-id="f7fd8-158">-or-</span></span> 
<span data-ttu-id="f7fd8-159"><paramref name="fileName" /> 的長度為零，或如果 <paramref name="fileName" /> 包含路徑。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-159">The length of <paramref name="fileName" /> is zero, or if <paramref name="fileName" /> includes a path.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f7fd8-160"><paramref name="name" /> 或 <paramref name="fileName" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-160"><paramref name="name" /> or <paramref name="fileName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="f7fd8-161">找不到檔案 <paramref name="fileName" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-161">The file <paramref name="fileName" /> is not found.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="f7fd8-162">呼叫端沒有必要的權限。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-162">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="f7fd8-163">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-163">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="f7fd8-164">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-164">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="f7fd8-165">FileIOPermissionAccess.Read 權限才能存取的資源檔<paramref name="resourceFileName" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-165">The FileIOPermissionAccess.Read permission is needed to access the resource file <paramref name="resourceFileName" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AddResourceFile">
      <MemberSignature Language="C#" Value="public void AddResourceFile (string name, string fileName, System.Reflection.ResourceAttributes attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddResourceFile(string name, string fileName, valuetype System.Reflection.ResourceAttributes attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.AddResourceFile(System.String,System.String,System.Reflection.ResourceAttributes)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddResourceFile (name As String, fileName As String, attribute As ResourceAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddResourceFile(System::String ^ name, System::String ^ fileName, System::Reflection::ResourceAttributes attribute);" />
      <MemberSignature Language="F#" Value="member this.AddResourceFile : string * string * System.Reflection.ResourceAttributes -&gt; unit" Usage="assemblyBuilder.AddResourceFile (name, fileName, attribute)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="attribute" Type="System.Reflection.ResourceAttributes" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="f7fd8-166">資源的邏輯名稱。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-166">The logical name of the resource.</span></span></param>
        <param name="fileName"><span data-ttu-id="f7fd8-167">邏輯名稱對應到實體檔案名稱 (.resources 檔案)。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-167">The physical file name (.resources file) to which the logical name is mapped.</span></span> <span data-ttu-id="f7fd8-168">這不應該包含路徑；該檔案必須與要加入該檔案的組件位於相同目錄中。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-168">This should not include a path; the file must be in the same directory as the assembly to which it is added.</span></span></param>
        <param name="attribute"><span data-ttu-id="f7fd8-169">資源屬性。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-169">The resource attributes.</span></span></param>
        <summary><span data-ttu-id="f7fd8-170">將現有的資源檔加入這個組件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-170">Adds an existing resource file to this assembly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f7fd8-171">`fileName` 不能與任何其他永久性的模組、 獨立受管理資源或獨立資訊清單檔案的相同。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-171">`fileName` should not be the same as that of any other persistable module, standalone managed resource, or the standalone manifest file.</span></span>  
  
 <span data-ttu-id="f7fd8-172">Managed 資源可指定屬性。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-172">Attributes can be specified for the managed resource.</span></span>  
  
 <span data-ttu-id="f7fd8-173">指定的資源檔必須位於儲存組件的目錄。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-173">The specified resource file must be in the directory where the assembly will be saved.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f7fd8-174">開頭[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，這個成員已不再需要<xref:System.Security.Permissions.ReflectionPermission>使用<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType>旗標。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-174">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="f7fd8-175">(請參閱[反映發出中的安全性問題](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)。)若要使用這項功能，您的應用程式應將目標設為 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] (含) 以後版本。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-175">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f7fd8-176">下列程式碼範例示範如何將資源檔連結至使用動態建立組件`AddResourceFile`。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-176">The following code sample demonstrates how to attach a resource file to a dynamically created assembly, using `AddResourceFile`.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.AssemblyBuilder.AddResourceFile Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.AddResourceFile Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.AssemblyBuilder.AddResourceFile Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.AddResourceFile Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.AssemblyBuilder.AddResourceFile Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.AddResourceFile Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f7fd8-177">之前已定義過 <paramref name="name" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-177"><paramref name="name" /> has been previously defined.</span></span>  
  
<span data-ttu-id="f7fd8-178">-或-</span><span class="sxs-lookup"><span data-stu-id="f7fd8-178">-or-</span></span> 
<span data-ttu-id="f7fd8-179">組件中另有一個檔案名為 <paramref name="fileName" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-179">There is another file in the assembly named <paramref name="fileName" />.</span></span>  
  
<span data-ttu-id="f7fd8-180">-或-</span><span class="sxs-lookup"><span data-stu-id="f7fd8-180">-or-</span></span> 
<span data-ttu-id="f7fd8-181"><paramref name="name" /> 長度為零，或如果 <paramref name="fileName" /> 長度為零。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-181">The length of <paramref name="name" /> is zero or if the length of <paramref name="fileName" /> is zero.</span></span>  
  
<span data-ttu-id="f7fd8-182">-或-</span><span class="sxs-lookup"><span data-stu-id="f7fd8-182">-or-</span></span> 
 <span data-ttu-id="f7fd8-183"><paramref name="fileName" /> 包含路徑。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-183"><paramref name="fileName" /> includes a path.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f7fd8-184"><paramref name="name" /> 或 <paramref name="fileName" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-184"><paramref name="name" /> or <paramref name="fileName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="f7fd8-185">找不到 <paramref name="fileName" /> 檔案。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-185">If the file <paramref name="fileName" /> is not found.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="f7fd8-186">呼叫端沒有必要的權限。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-186">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="f7fd8-187">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-187">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="f7fd8-188">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-188">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="f7fd8-189">FileIOPermissionAccess.Read 權限才能存取的資源檔<paramref name="resourceFileName" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-189">The FileIOPermissionAccess.Read permission is needed to access the resource file <paramref name="resourceFileName" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CodeBase">
      <MemberSignature Language="C#" Value="public override string CodeBase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CodeBase" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.AssemblyBuilder.CodeBase" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CodeBase As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CodeBase { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CodeBase : string" Usage="System.Reflection.Emit.AssemblyBuilder.CodeBase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f7fd8-190">取得原先指定的組件位置 (例如在 <see cref="T:System.Reflection.AssemblyName" /> 物件中指定的位置)。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-190">Gets the location of the assembly, as specified originally (such as in an <see cref="T:System.Reflection.AssemblyName" /> object).</span></span></summary>
        <value><span data-ttu-id="f7fd8-191">原先指定的組件位置。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-191">The location of the assembly, as specified originally.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f7fd8-192">若要取得載入的資訊清單包含檔案的絕對路徑，請使用<xref:System.Reflection.Assembly.Location%2A?displayProperty=nameWithType>屬性。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-192">To get the absolute path to the loaded manifest-containing file, use the <xref:System.Reflection.Assembly.Location%2A?displayProperty=nameWithType> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="f7fd8-193">目前不支援這個方法。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-193">This method is not currently supported.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="f7fd8-194">呼叫端沒有必要的權限。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-194">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="f7fd8-195">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-195">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="f7fd8-196">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-196">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="DefinedTypes">
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.IEnumerable&lt;System.Reflection.TypeInfo&gt; DefinedTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.TypeInfo&gt; DefinedTypes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.AssemblyBuilder.DefinedTypes" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DefinedTypes As IEnumerable(Of TypeInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::Generic::IEnumerable&lt;System::Reflection::TypeInfo ^&gt; ^ DefinedTypes { System::Collections::Generic::IEnumerable&lt;System::Reflection::TypeInfo ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefinedTypes : seq&lt;System.Reflection.TypeInfo&gt;" Usage="System.Reflection.Emit.AssemblyBuilder.DefinedTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Reflection.TypeInfo&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DefineDynamicAssembly">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f7fd8-197">定義動態組件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-197">Defines a dynamic assembly.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DefineDynamicAssembly">
      <MemberSignature Language="C#" Value="public static System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DefineDynamicAssembly (name As AssemblyName, access As AssemblyBuilderAccess) As AssemblyBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Emit::AssemblyBuilder ^ DefineDynamicAssembly(System::Reflection::AssemblyName ^ name, System::Reflection::Emit::AssemblyBuilderAccess access);" />
      <MemberSignature Language="F#" Value="static member DefineDynamicAssembly : System.Reflection.AssemblyName * System.Reflection.Emit.AssemblyBuilderAccess -&gt; System.Reflection.Emit.AssemblyBuilder" Usage="System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly (name, access)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.AssemblyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Reflection.AssemblyName" />
        <Parameter Name="access" Type="System.Reflection.Emit.AssemblyBuilderAccess" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="f7fd8-198">組件的名稱。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-198">The name of the assembly.</span></span></param>
        <param name="access"><span data-ttu-id="f7fd8-199">組件的存取權限。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-199">The access rights of the assembly.</span></span></param>
        <summary><span data-ttu-id="f7fd8-200">定義具有指定名稱和存取模式的動態組件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-200">Defines a dynamic assembly that has the specified name and access rights.</span></span></summary>
        <returns><span data-ttu-id="f7fd8-201">代表新組件的物件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-201">An object that represents the new assembly.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefineDynamicAssembly">
      <MemberSignature Language="C#" Value="public static System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, System.Collections.Generic.IEnumerable&lt;System.Reflection.Emit.CustomAttributeBuilder&gt; assemblyAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access, class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.Emit.CustomAttributeBuilder&gt; assemblyAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DefineDynamicAssembly (name As AssemblyName, access As AssemblyBuilderAccess, assemblyAttributes As IEnumerable(Of CustomAttributeBuilder)) As AssemblyBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Emit::AssemblyBuilder ^ DefineDynamicAssembly(System::Reflection::AssemblyName ^ name, System::Reflection::Emit::AssemblyBuilderAccess access, System::Collections::Generic::IEnumerable&lt;System::Reflection::Emit::CustomAttributeBuilder ^&gt; ^ assemblyAttributes);" />
      <MemberSignature Language="F#" Value="static member DefineDynamicAssembly : System.Reflection.AssemblyName * System.Reflection.Emit.AssemblyBuilderAccess * seq&lt;System.Reflection.Emit.CustomAttributeBuilder&gt; -&gt; System.Reflection.Emit.AssemblyBuilder" Usage="System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly (name, access, assemblyAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.AssemblyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Reflection.AssemblyName" />
        <Parameter Name="access" Type="System.Reflection.Emit.AssemblyBuilderAccess" />
        <Parameter Name="assemblyAttributes" Type="System.Collections.Generic.IEnumerable&lt;System.Reflection.Emit.CustomAttributeBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="f7fd8-202">組件的名稱。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-202">The name of the assembly.</span></span></param>
        <param name="access"><span data-ttu-id="f7fd8-203">組件的存取權限。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-203">The access rights of the assembly.</span></span></param>
        <param name="assemblyAttributes"><span data-ttu-id="f7fd8-204">包含此組件屬性的集合。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-204">A collection that contains the attributes of the assembly.</span></span></param>
        <summary><span data-ttu-id="f7fd8-205">定義具有指定名稱、存取權和屬性的新組件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-205">Defines a new assembly that has the specified name, access rights, and attributes.</span></span></summary>
        <returns><span data-ttu-id="f7fd8-206">代表新組件的物件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-206">An object that represents the new assembly.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DefineDynamicModule">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f7fd8-207">在此組件中定義動態模組。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-207">Defines a dynamic module in this assembly.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DefineDynamicModule">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ModuleBuilder DefineDynamicModule (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ModuleBuilder DefineDynamicModule(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineDynamicModule (name As String) As ModuleBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ModuleBuilder ^ DefineDynamicModule(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.DefineDynamicModule : string -&gt; System.Reflection.Emit.ModuleBuilder" Usage="assemblyBuilder.DefineDynamicModule name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ModuleBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="f7fd8-208">動態模組的名稱。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-208">The name of the dynamic module.</span></span></param>
        <summary><span data-ttu-id="f7fd8-209">在此組件中定義具名的暫時性動態模組。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-209">Defines a named transient dynamic module in this assembly.</span></span></summary>
        <returns><span data-ttu-id="f7fd8-210"><see cref="T:System.Reflection.Emit.ModuleBuilder" />，代表定義的動態模組。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-210">A <see cref="T:System.Reflection.Emit.ModuleBuilder" /> representing the defined dynamic module.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f7fd8-211">它是錯誤的組件中定義多個具有相同名稱的動態模組。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-211">It is an error to define multiple dynamic modules with the same name in an assembly.</span></span>  
  
 <span data-ttu-id="f7fd8-212">定義動態模組是暫時性的。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-212">The defined dynamic module is transient.</span></span> <span data-ttu-id="f7fd8-213">無法儲存動態模組，即使父動態組件經由<xref:System.Reflection.Emit.AssemblyBuilderAccess.RunAndSave>。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-213">The dynamic module is not saved, even if the parent dynamic assembly was created with <xref:System.Reflection.Emit.AssemblyBuilderAccess.RunAndSave>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f7fd8-214">若要偵錯動態模組時，請隱藏最佳化，套用<xref:System.Diagnostics.DebuggableAttribute>屬性設定為動態組件，然後再呼叫<xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A>。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-214">To suppress optimizations when debugging dynamic modules, apply the <xref:System.Diagnostics.DebuggableAttribute> attribute to the dynamic assembly before calling <xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A>.</span></span> <span data-ttu-id="f7fd8-215">建立的執行個體<xref:System.Diagnostics.DebuggableAttribute>具有<xref:System.Diagnostics.DebuggableAttribute.DebuggingModes.DisableOptimizations>旗標，並將它使用套用<xref:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-215">Create an instance of <xref:System.Diagnostics.DebuggableAttribute> with the <xref:System.Diagnostics.DebuggableAttribute.DebuggingModes.DisableOptimizations> flag and apply it using the <xref:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute%2A> method.</span></span> <span data-ttu-id="f7fd8-216">屬性必須套用至動態組件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-216">The attribute must be applied to the dynamic assembly.</span></span> <span data-ttu-id="f7fd8-217">如果套用至模組，它就會有任何作用。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-217">It has no effect if applied to the module.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f7fd8-218">開頭[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，這個成員已不再需要<xref:System.Security.Permissions.ReflectionPermission>使用<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType>旗標。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-218">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="f7fd8-219">(請參閱[反映發出中的安全性問題](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)。)若要使用這項功能，您的應用程式應將目標設為 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] (含) 以後版本。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-219">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f7fd8-220">[Visual Basic 中， C#]</span><span class="sxs-lookup"><span data-stu-id="f7fd8-220">[Visual Basic, C#]</span></span>  
  
 <span data-ttu-id="f7fd8-221">下列程式碼範例示範如何建立暫時性動態模組，使用`DefineDynamicModule`。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-221">The code example below demonstrates how to create a transient dynamic module using `DefineDynamicModule`.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f7fd8-222"><paramref name="name" /> 的開頭為空白字元。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-222"><paramref name="name" /> begins with white space.</span></span>  
  
<span data-ttu-id="f7fd8-223">-或-</span><span class="sxs-lookup"><span data-stu-id="f7fd8-223">-or-</span></span> 
<span data-ttu-id="f7fd8-224"><paramref name="name" /> 的長度為零。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-224">The length of <paramref name="name" /> is zero.</span></span>  
  
<span data-ttu-id="f7fd8-225">-或-</span><span class="sxs-lookup"><span data-stu-id="f7fd8-225">-or-</span></span> 
<span data-ttu-id="f7fd8-226"><paramref name="name" /> 的長度大於系統定義的長度上限。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-226">The length of <paramref name="name" /> is greater than the system-defined maximum length.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f7fd8-227"><paramref name="name" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-227"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="f7fd8-228">呼叫端沒有必要的權限。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-228">The caller does not have the required permission.</span></span></exception>
        <exception cref="T:System.ExecutionEngineException"><span data-ttu-id="f7fd8-229">無法載入預設符號寫入器的組件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-229">The assembly for default symbol writer cannot be loaded.</span></span>  
  
<span data-ttu-id="f7fd8-230">-或-</span><span class="sxs-lookup"><span data-stu-id="f7fd8-230">-or-</span></span> 
<span data-ttu-id="f7fd8-231">找不到實作預設符號寫入器介面的類型。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-231">The type that implements the default symbol writer interface cannot be found.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="f7fd8-232">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-232">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="f7fd8-233">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-233">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="DefineDynamicModule">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ModuleBuilder DefineDynamicModule (string name, bool emitSymbolInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ModuleBuilder DefineDynamicModule(string name, bool emitSymbolInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineDynamicModule (name As String, emitSymbolInfo As Boolean) As ModuleBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ModuleBuilder ^ DefineDynamicModule(System::String ^ name, bool emitSymbolInfo);" />
      <MemberSignature Language="F#" Value="member this.DefineDynamicModule : string * bool -&gt; System.Reflection.Emit.ModuleBuilder" Usage="assemblyBuilder.DefineDynamicModule (name, emitSymbolInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ModuleBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="emitSymbolInfo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="f7fd8-234">動態模組的名稱。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-234">The name of the dynamic module.</span></span></param>
        <param name="emitSymbolInfo"><span data-ttu-id="f7fd8-235">如果要發出符號資訊，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-235"><see langword="true" /> if symbol information is to be emitted; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="f7fd8-236">定義這個組件中的具名暫時性動態模組，並指定是否應該發出符號資訊。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-236">Defines a named transient dynamic module in this assembly and specifies whether symbol information should be emitted.</span></span></summary>
        <returns><span data-ttu-id="f7fd8-237"><see cref="T:System.Reflection.Emit.ModuleBuilder" />，代表定義的動態模組。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-237">A <see cref="T:System.Reflection.Emit.ModuleBuilder" /> representing the defined dynamic module.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f7fd8-238">它是錯誤的組件中定義多個具有相同名稱的動態模組。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-238">It is an error to define multiple dynamic modules with the same name in an assembly.</span></span>  
  
 <span data-ttu-id="f7fd8-239">無法儲存動態模組，即使父動態組件經由<xref:System.Reflection.Emit.AssemblyBuilderAccess.RunAndSave>。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-239">The dynamic module is not saved, even if the parent dynamic assembly was created with <xref:System.Reflection.Emit.AssemblyBuilderAccess.RunAndSave>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f7fd8-240">若要偵錯動態模組時，請隱藏最佳化，套用<xref:System.Diagnostics.DebuggableAttribute>屬性設定為動態組件，然後再呼叫<xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A>。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-240">To suppress optimizations when debugging dynamic modules, apply the <xref:System.Diagnostics.DebuggableAttribute> attribute to the dynamic assembly before calling <xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A>.</span></span> <span data-ttu-id="f7fd8-241">建立的執行個體<xref:System.Diagnostics.DebuggableAttribute>具有<xref:System.Diagnostics.DebuggableAttribute.DebuggingModes.DisableOptimizations>旗標，並將它使用套用<xref:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-241">Create an instance of <xref:System.Diagnostics.DebuggableAttribute> with the <xref:System.Diagnostics.DebuggableAttribute.DebuggingModes.DisableOptimizations> flag and apply it using the <xref:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute%2A> method.</span></span> <span data-ttu-id="f7fd8-242">屬性必須套用至動態組件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-242">The attribute must be applied to the dynamic assembly.</span></span> <span data-ttu-id="f7fd8-243">如果套用至模組，它就會有任何作用。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-243">It has no effect if applied to the module.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f7fd8-244">開頭[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，這個成員已不再需要<xref:System.Security.Permissions.ReflectionPermission>使用<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType>旗標。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-244">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="f7fd8-245">(請參閱[反映發出中的安全性問題](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)。)若要使用這項功能，您的應用程式應將目標設為 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] (含) 以後版本。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-245">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f7fd8-246">[Visual Basic 中， C#]</span><span class="sxs-lookup"><span data-stu-id="f7fd8-246">[Visual Basic, C#]</span></span>  
  
 <span data-ttu-id="f7fd8-247">下列程式碼範例示範如何建立暫時性動態模組，使用`DefineDynamicModule`，隱藏符號資訊。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-247">The code example below demonstrates how to create a transient dynamic module using `DefineDynamicModule`, suppressing symbol information.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example/CPP/source.cpp#2)]
 [!code-csharp[System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example/CS/source.cs#2)]
 [!code-vb[System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f7fd8-248"><paramref name="name" /> 的開頭為空白字元。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-248"><paramref name="name" /> begins with white space.</span></span>  
  
<span data-ttu-id="f7fd8-249">-或-</span><span class="sxs-lookup"><span data-stu-id="f7fd8-249">-or-</span></span> 
<span data-ttu-id="f7fd8-250"><paramref name="name" /> 的長度為零。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-250">The length of <paramref name="name" /> is zero.</span></span>  
  
<span data-ttu-id="f7fd8-251">-或-</span><span class="sxs-lookup"><span data-stu-id="f7fd8-251">-or-</span></span> 
<span data-ttu-id="f7fd8-252"><paramref name="name" /> 的長度大於系統定義的長度上限。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-252">The length of <paramref name="name" /> is greater than the system-defined maximum length.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f7fd8-253"><paramref name="name" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-253"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ExecutionEngineException"><span data-ttu-id="f7fd8-254">無法載入預設符號寫入器的組件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-254">The assembly for default symbol writer cannot be loaded.</span></span>  
  
<span data-ttu-id="f7fd8-255">-或-</span><span class="sxs-lookup"><span data-stu-id="f7fd8-255">-or-</span></span> 
<span data-ttu-id="f7fd8-256">找不到實作預設符號寫入器介面的類型。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-256">The type that implements the default symbol writer interface cannot be found.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="f7fd8-257">呼叫端沒有必要的權限。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-257">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="f7fd8-258">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-258">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="f7fd8-259">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-259">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="DefineDynamicModule">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ModuleBuilder DefineDynamicModule (string name, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ModuleBuilder DefineDynamicModule(string name, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineDynamicModule (name As String, fileName As String) As ModuleBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ModuleBuilder ^ DefineDynamicModule(System::String ^ name, System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.DefineDynamicModule : string * string -&gt; System.Reflection.Emit.ModuleBuilder" Usage="assemblyBuilder.DefineDynamicModule (name, fileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ModuleBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="f7fd8-260">動態模組的名稱。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-260">The name of the dynamic module.</span></span></param>
        <param name="fileName"><span data-ttu-id="f7fd8-261">應該儲存動態模組的檔案名稱。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-261">The name of the file to which the dynamic module should be saved.</span></span></param>
        <summary><span data-ttu-id="f7fd8-262">以會儲存在指定檔案的指定名稱定義永久性動態模組。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-262">Defines a persistable dynamic module with the given name that will be saved to the specified file.</span></span> <span data-ttu-id="f7fd8-263">沒有發出任何符號資訊。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-263">No symbol information is emitted.</span></span></summary>
        <returns><span data-ttu-id="f7fd8-264"><see cref="T:System.Reflection.Emit.ModuleBuilder" /> 物件代表定義的動態模組。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-264">A <see cref="T:System.Reflection.Emit.ModuleBuilder" /> object representing the defined dynamic module.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f7fd8-265">若要定義永久性動態模組，這個組件必須先建立與<xref:System.Reflection.Emit.AssemblyBuilderAccess.Save>或<xref:System.Reflection.Emit.AssemblyBuilderAccess.RunAndSave>屬性。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-265">To define a persistable dynamic module, this assembly needs to be created with the <xref:System.Reflection.Emit.AssemblyBuilderAccess.Save> or the <xref:System.Reflection.Emit.AssemblyBuilderAccess.RunAndSave> attribute.</span></span>  
  
 <span data-ttu-id="f7fd8-266">如果您想要包含的組件資訊清單的模組`name`應該是相同的組件名稱 (亦即<xref:System.Reflection.AssemblyName.Name%2A?displayProperty=nameWithType>屬性<xref:System.Reflection.AssemblyName>用來建立動態組件) 和`fileName`應該相同您指定當您儲存組件的檔名。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-266">If you want the module to contain the assembly manifest, `name` should be the same as the name of the assembly (that is, the <xref:System.Reflection.AssemblyName.Name%2A?displayProperty=nameWithType> property of the <xref:System.Reflection.AssemblyName> used to create the dynamic assembly) and `fileName` should be the same as the filename you specify when you save the assembly.</span></span>  
  
 <span data-ttu-id="f7fd8-267">在 組件中只有一個模組，該模組應該包含組件資訊清單。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-267">In an assembly with only one module, that module should contain the assembly manifest.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f7fd8-268">若要偵錯動態模組時，請隱藏最佳化，套用<xref:System.Diagnostics.DebuggableAttribute>屬性設定為動態組件，然後再呼叫<xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A>。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-268">To suppress optimizations when debugging dynamic modules, apply the <xref:System.Diagnostics.DebuggableAttribute> attribute to the dynamic assembly before calling <xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A>.</span></span> <span data-ttu-id="f7fd8-269">建立的執行個體<xref:System.Diagnostics.DebuggableAttribute>具有<xref:System.Diagnostics.DebuggableAttribute.DebuggingModes.DisableOptimizations>旗標，並將它使用套用<xref:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-269">Create an instance of <xref:System.Diagnostics.DebuggableAttribute> with the <xref:System.Diagnostics.DebuggableAttribute.DebuggingModes.DisableOptimizations> flag and apply it using the <xref:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute%2A> method.</span></span> <span data-ttu-id="f7fd8-270">屬性必須套用至動態組件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-270">The attribute must be applied to the dynamic assembly.</span></span> <span data-ttu-id="f7fd8-271">如果套用至模組，它就會有任何作用。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-271">It has no effect if applied to the module.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f7fd8-272">開頭[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，這個成員已不再需要<xref:System.Security.Permissions.ReflectionPermission>使用<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType>旗標。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-272">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="f7fd8-273">(請參閱[反映發出中的安全性問題](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)。)若要使用這項功能，您的應用程式應將目標設為 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] (含) 以後版本。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-273">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f7fd8-274">[Visual Basic 中， C#]</span><span class="sxs-lookup"><span data-stu-id="f7fd8-274">[Visual Basic, C#]</span></span>  
  
 <span data-ttu-id="f7fd8-275">下列程式碼範例示範如何建立持續性的動態模組，使用`DefineDynamicModule`。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-275">The code example below demonstrates how to create a persistent dynamic module using `DefineDynamicModule`.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example/CPP/source.cpp#3)]
 [!code-csharp[System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example/CS/source.cs#3)]
 [!code-vb[System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f7fd8-276"><paramref name="name" /> 或 <paramref name="fileName" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-276"><paramref name="name" /> or <paramref name="fileName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f7fd8-277"><paramref name="name" /> 或 <paramref name="fileName" /> 的長度為零。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-277">The length of <paramref name="name" /> or <paramref name="fileName" /> is zero.</span></span>  
  
<span data-ttu-id="f7fd8-278">-或-</span><span class="sxs-lookup"><span data-stu-id="f7fd8-278">-or-</span></span> 
<span data-ttu-id="f7fd8-279"><paramref name="name" /> 的長度大於系統定義的長度上限。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-279">The length of <paramref name="name" /> is greater than the system-defined maximum length.</span></span>  
  
<span data-ttu-id="f7fd8-280">-或-</span><span class="sxs-lookup"><span data-stu-id="f7fd8-280">-or-</span></span> 
 <span data-ttu-id="f7fd8-281"><paramref name="fileName" /> 包含路徑規格 (例如目錄元件)。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-281"><paramref name="fileName" /> contains a path specification (a directory component, for example).</span></span>  
  
<span data-ttu-id="f7fd8-282">-或-</span><span class="sxs-lookup"><span data-stu-id="f7fd8-282">-or-</span></span> 
<span data-ttu-id="f7fd8-283">和屬於這個組件的另一個檔案名稱發生衝突。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-283">There is a conflict with the name of another file that belongs to this assembly.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f7fd8-284">這個組件之前已儲存過。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-284">This assembly has been previously saved.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="f7fd8-285">這個組件在具有 <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Run" /> 屬性的動態組件上呼叫過。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-285">This assembly was called on a dynamic assembly with <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Run" /> attribute.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="f7fd8-286">呼叫端沒有必要的權限。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-286">The caller does not have the required permission.</span></span></exception>
        <exception cref="T:System.ExecutionEngineException"><span data-ttu-id="f7fd8-287">無法載入預設符號寫入器的組件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-287">The assembly for default symbol writer cannot be loaded.</span></span>  
  
<span data-ttu-id="f7fd8-288">-或-</span><span class="sxs-lookup"><span data-stu-id="f7fd8-288">-or-</span></span> 
<span data-ttu-id="f7fd8-289">找不到實作預設符號寫入器介面的類型。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-289">The type that implements the default symbol writer interface cannot be found.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="f7fd8-290">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-290">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="f7fd8-291">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-291">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="f7fd8-292">撰寫 = true] 或 [附加 = true，才能儲存模組</span><span class="sxs-lookup"><span data-stu-id="f7fd8-292">Write=true or Append=true is needed to save the module</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="DefineDynamicModule">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ModuleBuilder DefineDynamicModule (string name, string fileName, bool emitSymbolInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ModuleBuilder DefineDynamicModule(string name, string fileName, bool emitSymbolInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineDynamicModule (name As String, fileName As String, emitSymbolInfo As Boolean) As ModuleBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ModuleBuilder ^ DefineDynamicModule(System::String ^ name, System::String ^ fileName, bool emitSymbolInfo);" />
      <MemberSignature Language="F#" Value="member this.DefineDynamicModule : string * string * bool -&gt; System.Reflection.Emit.ModuleBuilder" Usage="assemblyBuilder.DefineDynamicModule (name, fileName, emitSymbolInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ModuleBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="emitSymbolInfo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="f7fd8-293">動態模組的名稱。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-293">The name of the dynamic module.</span></span></param>
        <param name="fileName"><span data-ttu-id="f7fd8-294">應該儲存動態模組的檔案名稱。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-294">The name of the file to which the dynamic module should be saved.</span></span></param>
        <param name="emitSymbolInfo"><span data-ttu-id="f7fd8-295">若為 <see langword="true" />，符號資訊會使用預設符號寫入器寫入。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-295">If <see langword="true" />, symbolic information is written using the default symbol writer.</span></span></param>
        <summary><span data-ttu-id="f7fd8-296">定義永久性動態模組，指定模組名稱、要儲存該模組的檔案名稱，以及是否應使用預設符號寫入器發出符號資訊。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-296">Defines a persistable dynamic module, specifying the module name, the name of the file to which the module will be saved, and whether symbol information should be emitted using the default symbol writer.</span></span></summary>
        <returns><span data-ttu-id="f7fd8-297"><see cref="T:System.Reflection.Emit.ModuleBuilder" /> 物件代表定義的動態模組。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-297">A <see cref="T:System.Reflection.Emit.ModuleBuilder" /> object representing the defined dynamic module.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f7fd8-298">若要定義永久性動態模組，這個組件必須先建立與<xref:System.Reflection.Emit.AssemblyBuilderAccess.Save>或<xref:System.Reflection.Emit.AssemblyBuilderAccess.RunAndSave>屬性。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-298">To define a persistable dynamic module, this assembly needs to be created with the <xref:System.Reflection.Emit.AssemblyBuilderAccess.Save> or the <xref:System.Reflection.Emit.AssemblyBuilderAccess.RunAndSave> attribute.</span></span>  
  
 <span data-ttu-id="f7fd8-299">如果您想要包含的組件資訊清單的模組`name`應該是相同的組件名稱 (亦即<xref:System.Reflection.AssemblyName.Name%2A?displayProperty=nameWithType>屬性<xref:System.Reflection.AssemblyName>用來建立動態組件) 和`fileName`應該相同您指定當您儲存組件的檔名。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-299">If you want the module to contain the assembly manifest, `name` should be the same as the name of the assembly (that is, the <xref:System.Reflection.AssemblyName.Name%2A?displayProperty=nameWithType> property of the <xref:System.Reflection.AssemblyName> used to create the dynamic assembly) and `fileName` should be the same as the filename you specify when you save the assembly.</span></span>  
  
 <span data-ttu-id="f7fd8-300">在 組件中只有一個模組，該模組應該包含組件資訊清單。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-300">In an assembly with only one module, that module should contain the assembly manifest.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f7fd8-301">若要偵錯動態模組時，請隱藏最佳化，套用<xref:System.Diagnostics.DebuggableAttribute>屬性設定為動態組件，然後再呼叫<xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A>。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-301">To suppress optimizations when debugging dynamic modules, apply the <xref:System.Diagnostics.DebuggableAttribute> attribute to the dynamic assembly before calling <xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A>.</span></span> <span data-ttu-id="f7fd8-302">建立的執行個體<xref:System.Diagnostics.DebuggableAttribute>具有<xref:System.Diagnostics.DebuggableAttribute.DebuggingModes.DisableOptimizations>旗標，並將它使用套用<xref:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-302">Create an instance of <xref:System.Diagnostics.DebuggableAttribute> with the <xref:System.Diagnostics.DebuggableAttribute.DebuggingModes.DisableOptimizations> flag and apply it using the <xref:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute%2A> method.</span></span> <span data-ttu-id="f7fd8-303">屬性必須套用至動態組件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-303">The attribute must be applied to the dynamic assembly.</span></span> <span data-ttu-id="f7fd8-304">如果套用至模組，它就會有任何作用。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-304">It has no effect if applied to the module.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f7fd8-305">開頭[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，這個成員已不再需要<xref:System.Security.Permissions.ReflectionPermission>使用<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType>旗標。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-305">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="f7fd8-306">(請參閱[反映發出中的安全性問題](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)。)若要使用這項功能，您的應用程式應將目標設為 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] (含) 以後版本。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-306">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f7fd8-307">[Visual Basic 中， C#]</span><span class="sxs-lookup"><span data-stu-id="f7fd8-307">[Visual Basic, C#]</span></span>  
  
 <span data-ttu-id="f7fd8-308">下列程式碼範例示範如何使用符號發出使用建立持續性的動態模組`DefineDynamicModule`。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-308">The code example below demonstrates how to create a persistent dynamic module with symbol emission using `DefineDynamicModule`.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example/CPP/source.cpp#4)]
 [!code-csharp[System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example/CS/source.cs#4)]
 [!code-vb[System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f7fd8-309"><paramref name="name" /> 或 <paramref name="fileName" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-309"><paramref name="name" /> or <paramref name="fileName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f7fd8-310"><paramref name="name" /> 或 <paramref name="fileName" /> 的長度為零。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-310">The length of <paramref name="name" /> or <paramref name="fileName" /> is zero.</span></span>  
  
<span data-ttu-id="f7fd8-311">-或-</span><span class="sxs-lookup"><span data-stu-id="f7fd8-311">-or-</span></span> 
<span data-ttu-id="f7fd8-312"><paramref name="name" /> 的長度大於系統定義的長度上限。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-312">The length of <paramref name="name" /> is greater than the system-defined maximum length.</span></span>  
  
<span data-ttu-id="f7fd8-313">-或-</span><span class="sxs-lookup"><span data-stu-id="f7fd8-313">-or-</span></span> 
 <span data-ttu-id="f7fd8-314"><paramref name="fileName" /> 包含路徑規格 (例如目錄元件)。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-314"><paramref name="fileName" /> contains a path specification (a directory component, for example).</span></span>  
  
<span data-ttu-id="f7fd8-315">-或-</span><span class="sxs-lookup"><span data-stu-id="f7fd8-315">-or-</span></span> 
<span data-ttu-id="f7fd8-316">和屬於這個組件的另一個檔案名稱發生衝突。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-316">There is a conflict with the name of another file that belongs to this assembly.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f7fd8-317">這個組件之前已儲存過。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-317">This assembly has been previously saved.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="f7fd8-318">這個組件在具有 <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Run" /> 屬性的動態組件上呼叫過。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-318">This assembly was called on a dynamic assembly with the <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Run" /> attribute.</span></span></exception>
        <exception cref="T:System.ExecutionEngineException"><span data-ttu-id="f7fd8-319">無法載入預設符號寫入器的組件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-319">The assembly for default symbol writer cannot be loaded.</span></span>  
  
<span data-ttu-id="f7fd8-320">-或-</span><span class="sxs-lookup"><span data-stu-id="f7fd8-320">-or-</span></span> 
<span data-ttu-id="f7fd8-321">找不到實作預設符號寫入器介面的類型。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-321">The type that implements the default symbol writer interface cannot be found.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="f7fd8-322">呼叫端沒有必要的權限。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-322">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="f7fd8-323">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-323">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="f7fd8-324">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-324">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="f7fd8-325">撰寫 = true] 或 [附加 = true，才能儲存此模組</span><span class="sxs-lookup"><span data-stu-id="f7fd8-325">Write=true or Append=true is needed to save this module</span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="DefineResource">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f7fd8-326">定義這個組件的獨立受管理資源。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-326">Defines a standalone managed resource for this assembly.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DefineResource">
      <MemberSignature Language="C#" Value="public System.Resources.IResourceWriter DefineResource (string name, string description, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Resources.IResourceWriter DefineResource(string name, string description, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.DefineResource(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineResource (name As String, description As String, fileName As String) As IResourceWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Resources::IResourceWriter ^ DefineResource(System::String ^ name, System::String ^ description, System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.DefineResource : string * string * string -&gt; System.Resources.IResourceWriter" Usage="assemblyBuilder.DefineResource (name, description, fileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Resources.IResourceWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="description" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="f7fd8-327">資源的邏輯名稱。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-327">The logical name of the resource.</span></span></param>
        <param name="description"><span data-ttu-id="f7fd8-328">資源的文字描述。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-328">A textual description of the resource.</span></span></param>
        <param name="fileName"><span data-ttu-id="f7fd8-329">邏輯名稱對應到實體檔案名稱 (.resources 檔案)。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-329">The physical file name (.resources file) to which the logical name is mapped.</span></span> <span data-ttu-id="f7fd8-330">這應該不包含路徑。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-330">This should not include a path.</span></span></param>
        <summary><span data-ttu-id="f7fd8-331">使用預設公用資源屬性定義這個組件的獨立受管理資源。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-331">Defines a standalone managed resource for this assembly with the default public resource attribute.</span></span></summary>
        <returns><span data-ttu-id="f7fd8-332">所指定資源的 <see cref="T:System.Resources.ResourceWriter" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-332">A <see cref="T:System.Resources.ResourceWriter" /> object for the specified resource.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f7fd8-333">可以新增微調資源並傳回<xref:System.Resources.ResourceWriter>藉由呼叫<xref:System.Resources.ResourceWriter.AddResource%2A>。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-333">Fine grain resources can be added with the returned <xref:System.Resources.ResourceWriter> by calling <xref:System.Resources.ResourceWriter.AddResource%2A>.</span></span>  
  
 <span data-ttu-id="f7fd8-334">`fileName` 不能與任何其他永久性的模組、 獨立受管理的資源或獨立的資訊清單檔案的相同。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-334">`fileName` should not be the same as that of any other persistable module, stand-alone managed resource, or the stand-alone manifest file.</span></span>  
  
 <span data-ttu-id="f7fd8-335">執行階段呼叫<xref:System.Resources.ResourceWriter.Close%2A>儲存動態組件時的方法。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-335">The runtime calls the <xref:System.Resources.ResourceWriter.Close%2A> method when the dynamic assembly is saved.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f7fd8-336">開頭[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，這個成員已不再需要<xref:System.Security.Permissions.ReflectionPermission>使用<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType>旗標。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-336">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="f7fd8-337">(請參閱[反映發出中的安全性問題](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)。)若要使用這項功能，您的應用程式應將目標設為 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] (含) 以後版本。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-337">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f7fd8-338">下列範例會使用<xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A>方法來取得資源寫入器。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-338">The following example uses the <xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A> method to get a resource writer.</span></span> <span data-ttu-id="f7fd8-339">此範例會加入三個資源字串使用的資源寫入器。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-339">The example uses the resource writer to add three resource strings.</span></span>  
  
 [!code-cpp[AssemblyBuilder.DefineResource Example 2#1](~/samples/snippets/cpp/VS_Snippets_CLR/AssemblyBuilder.DefineResource Example 2/CPP/assemblybuilder_defineresource.cpp#1)]
 [!code-csharp[AssemblyBuilder.DefineResource Example 2#1](~/samples/snippets/csharp/VS_Snippets_CLR/AssemblyBuilder.DefineResource Example 2/CS/assemblybuilder_defineresource.cs#1)]
 [!code-vb[AssemblyBuilder.DefineResource Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AssemblyBuilder.DefineResource Example 2/VB/assemblybuilder_defineresource.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f7fd8-340">之前已定義過 <paramref name="name" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-340"><paramref name="name" /> has been previously defined.</span></span>  
  
<span data-ttu-id="f7fd8-341">-或-</span><span class="sxs-lookup"><span data-stu-id="f7fd8-341">-or-</span></span> 
<span data-ttu-id="f7fd8-342">組件中另有一個檔案名為 <paramref name="fileName" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-342">There is another file in the assembly named <paramref name="fileName" />.</span></span>  
  
<span data-ttu-id="f7fd8-343">-或-</span><span class="sxs-lookup"><span data-stu-id="f7fd8-343">-or-</span></span> 
<span data-ttu-id="f7fd8-344"><paramref name="name" /> 的長度為零。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-344">The length of <paramref name="name" /> is zero.</span></span>  
  
<span data-ttu-id="f7fd8-345">-或-</span><span class="sxs-lookup"><span data-stu-id="f7fd8-345">-or-</span></span> 
<span data-ttu-id="f7fd8-346"><paramref name="fileName" /> 的長度為零。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-346">The length of <paramref name="fileName" /> is zero.</span></span>  
  
<span data-ttu-id="f7fd8-347">-或-</span><span class="sxs-lookup"><span data-stu-id="f7fd8-347">-or-</span></span> 
 <span data-ttu-id="f7fd8-348"><paramref name="fileName" /> 包含路徑。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-348"><paramref name="fileName" /> includes a path.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f7fd8-349"><paramref name="name" /> 或 <paramref name="fileName" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-349"><paramref name="name" /> or <paramref name="fileName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="f7fd8-350">呼叫端沒有必要的權限。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-350">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="f7fd8-351">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-351">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="f7fd8-352">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-352">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="f7fd8-353">撰寫 = true] 或 [附加 = true</span><span class="sxs-lookup"><span data-stu-id="f7fd8-353">Write=true or Append=true</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="DefineResource">
      <MemberSignature Language="C#" Value="public System.Resources.IResourceWriter DefineResource (string name, string description, string fileName, System.Reflection.ResourceAttributes attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Resources.IResourceWriter DefineResource(string name, string description, string fileName, valuetype System.Reflection.ResourceAttributes attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.DefineResource(System.String,System.String,System.String,System.Reflection.ResourceAttributes)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineResource (name As String, description As String, fileName As String, attribute As ResourceAttributes) As IResourceWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Resources::IResourceWriter ^ DefineResource(System::String ^ name, System::String ^ description, System::String ^ fileName, System::Reflection::ResourceAttributes attribute);" />
      <MemberSignature Language="F#" Value="member this.DefineResource : string * string * string * System.Reflection.ResourceAttributes -&gt; System.Resources.IResourceWriter" Usage="assemblyBuilder.DefineResource (name, description, fileName, attribute)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Resources.IResourceWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="description" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="attribute" Type="System.Reflection.ResourceAttributes" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="f7fd8-354">資源的邏輯名稱。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-354">The logical name of the resource.</span></span></param>
        <param name="description"><span data-ttu-id="f7fd8-355">資源的文字描述。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-355">A textual description of the resource.</span></span></param>
        <param name="fileName"><span data-ttu-id="f7fd8-356">邏輯名稱對應到實體檔案名稱 (.resources 檔案)。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-356">The physical file name (.resources file) to which the logical name is mapped.</span></span> <span data-ttu-id="f7fd8-357">這應該不包含路徑。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-357">This should not include a path.</span></span></param>
        <param name="attribute"><span data-ttu-id="f7fd8-358">資源屬性。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-358">The resource attributes.</span></span></param>
        <summary><span data-ttu-id="f7fd8-359">定義這個組件的獨立受管理資源。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-359">Defines a standalone managed resource for this assembly.</span></span> <span data-ttu-id="f7fd8-360">Managed 資源可指定屬性。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-360">Attributes can be specified for the managed resource.</span></span></summary>
        <returns><span data-ttu-id="f7fd8-361">所指定資源的 <see cref="T:System.Resources.ResourceWriter" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-361">A <see cref="T:System.Resources.ResourceWriter" /> object for the specified resource.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f7fd8-362">可以新增細微的資源並傳回<xref:System.Resources.ResourceWriter>藉由呼叫<xref:System.Resources.ResourceWriter.AddResource%2A>。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-362">Fine-grain resources can be added with the returned <xref:System.Resources.ResourceWriter> by calling <xref:System.Resources.ResourceWriter.AddResource%2A>.</span></span>  
  
 <span data-ttu-id="f7fd8-363">`fileName` 不能與任何其他永久性的模組、 獨立受管理資源或獨立資訊清單檔案的相同。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-363">`fileName` should not be the same as that of any other persistable module, standalone managed resource, or the standalone manifest file.</span></span>  
  
 <span data-ttu-id="f7fd8-364">執行階段呼叫<xref:System.Resources.ResourceWriter.Close%2A>儲存動態組件時的方法。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-364">The runtime calls the <xref:System.Resources.ResourceWriter.Close%2A> method when the dynamic assembly is saved.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f7fd8-365">開頭[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，這個成員已不再需要<xref:System.Security.Permissions.ReflectionPermission>使用<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType>旗標。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-365">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="f7fd8-366">(請參閱[反映發出中的安全性問題](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)。)若要使用這項功能，您的應用程式應將目標設為 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] (含) 以後版本。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-366">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f7fd8-367">先前已定義過 <paramref name="name" />，或組件中是否另有一個檔案名為 <paramref name="fileName" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-367"><paramref name="name" /> has been previously defined or if there is another file in the assembly named <paramref name="fileName" />.</span></span>  
  
<span data-ttu-id="f7fd8-368">-或-</span><span class="sxs-lookup"><span data-stu-id="f7fd8-368">-or-</span></span> 
<span data-ttu-id="f7fd8-369"><paramref name="name" /> 的長度為零。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-369">The length of <paramref name="name" /> is zero.</span></span>  
  
<span data-ttu-id="f7fd8-370">-或-</span><span class="sxs-lookup"><span data-stu-id="f7fd8-370">-or-</span></span> 
<span data-ttu-id="f7fd8-371"><paramref name="fileName" /> 的長度為零。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-371">The length of <paramref name="fileName" /> is zero.</span></span>  
  
<span data-ttu-id="f7fd8-372">-或-</span><span class="sxs-lookup"><span data-stu-id="f7fd8-372">-or-</span></span> 
 <span data-ttu-id="f7fd8-373"><paramref name="fileName" /> 包含路徑。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-373"><paramref name="fileName" /> includes a path.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f7fd8-374"><paramref name="name" /> 或 <paramref name="fileName" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-374"><paramref name="name" /> or <paramref name="fileName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="f7fd8-375">呼叫端沒有必要的權限。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-375">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="f7fd8-376">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-376">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="f7fd8-377">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-377">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="f7fd8-378">撰寫 = true] 或 [附加 = true</span><span class="sxs-lookup"><span data-stu-id="f7fd8-378">Write=true or Append=true</span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="DefineUnmanagedResource">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f7fd8-379">定義這個組件的 Unmanaged 資源。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-379">Defines an unmanaged resource for this assembly.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DefineUnmanagedResource">
      <MemberSignature Language="C#" Value="public void DefineUnmanagedResource (byte[] resource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DefineUnmanagedResource(unsigned int8[] resource) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.DefineUnmanagedResource(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub DefineUnmanagedResource (resource As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DefineUnmanagedResource(cli::array &lt;System::Byte&gt; ^ resource);" />
      <MemberSignature Language="F#" Value="member this.DefineUnmanagedResource : byte[] -&gt; unit" Usage="assemblyBuilder.DefineUnmanagedResource resource" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resource" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="resource"><span data-ttu-id="f7fd8-380">表示 Unmanaged 資源的不透明 Blob (位元組)。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-380">The opaque blob of bytes representing the unmanaged resource.</span></span></param>
        <summary><span data-ttu-id="f7fd8-381">將這個組件的 Unmanaged 資源定義為不透明的 Blob (位元組)。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-381">Defines an unmanaged resource for this assembly as an opaque blob of bytes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f7fd8-382">您可以只有一個的 unmanaged 資源相關聯的組件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-382">An assembly can be associated with only one unmanaged resource.</span></span> <span data-ttu-id="f7fd8-383">這表示，呼叫<xref:System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource%2A>或<xref:System.Reflection.Emit.AssemblyBuilder.DefineUnmanagedResource%2A>其中一個方法之後呼叫先前會擲回所擲回 System.ArgumentException。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-383">This means that calling <xref:System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource%2A> or <xref:System.Reflection.Emit.AssemblyBuilder.DefineUnmanagedResource%2A> after either one of the methods was called previously will throw the System.ArgumentException being throw.</span></span> <span data-ttu-id="f7fd8-384">需要 Microsoft ResMerge 公用程式 （通用語言執行平台不提供） 之類的工具與合併多個未受管理的資源。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-384">Multiple unmanaged resources need to be merged with a tool such as the Microsoft ResMerge utility (not supplied with the common language runtime).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f7fd8-385">下列程式碼範例會建立並附加至動態組件，使用代表 unmanaged 的資源的位元組陣列`DefineUnmanagedResource`。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-385">The following code sample creates and attaches an array of bytes representing an unmanaged resource to a dynamic assembly, using `DefineUnmanagedResource`.</span></span>  
  
 [!code-cpp[AssemblyBuilder_DefineUnmanagedResource2#1](~/samples/snippets/cpp/VS_Snippets_CLR/AssemblyBuilder_DefineUnmanagedResource2/CPP/assemblybuilder_defineunmanagedresource2.cpp#1)]
 [!code-csharp[AssemblyBuilder_DefineUnmanagedResource2#1](~/samples/snippets/csharp/VS_Snippets_CLR/AssemblyBuilder_DefineUnmanagedResource2/CS/assemblybuilder_defineunmanagedresource2.cs#1)]
 [!code-vb[AssemblyBuilder_DefineUnmanagedResource2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AssemblyBuilder_DefineUnmanagedResource2/VB/assemblybuilder_defineunmanagedresource2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f7fd8-386">先前定義的 Unmanaged 資源。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-386">An unmanaged resource was previously defined.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f7fd8-387"><paramref name="resource" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-387"><paramref name="resource" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="f7fd8-388">呼叫端沒有必要的權限。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-388">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="f7fd8-389">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-389">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="f7fd8-390">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-390">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="DefineUnmanagedResource">
      <MemberSignature Language="C#" Value="public void DefineUnmanagedResource (string resourceFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DefineUnmanagedResource(string resourceFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.DefineUnmanagedResource(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DefineUnmanagedResource (resourceFileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DefineUnmanagedResource(System::String ^ resourceFileName);" />
      <MemberSignature Language="F#" Value="member this.DefineUnmanagedResource : string -&gt; unit" Usage="assemblyBuilder.DefineUnmanagedResource resourceFileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resourceFileName"><span data-ttu-id="f7fd8-391">資源檔名稱。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-391">The name of the resource file.</span></span></param>
        <summary><span data-ttu-id="f7fd8-392">定義指定資源檔名稱的這個組件之 Unmanaged 資源檔。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-392">Defines an unmanaged resource file for this assembly given the name of the resource file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f7fd8-393">您可以只有一個的 unmanaged 資源相關聯的組件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-393">An assembly can be associated with only one unmanaged resource.</span></span> <span data-ttu-id="f7fd8-394">這表示，呼叫<xref:System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource%2A>或<xref:System.Reflection.Emit.AssemblyBuilder.DefineUnmanagedResource%2A>其中一個方法之後呼叫先前會擲回 System.ArgumentException。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-394">This means that calling <xref:System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource%2A> or <xref:System.Reflection.Emit.AssemblyBuilder.DefineUnmanagedResource%2A> after either one of the methods was called previously will throw the System.ArgumentException.</span></span> <span data-ttu-id="f7fd8-395">需要 Microsoft ResMerge 公用程式 （通用語言執行平台不提供） 之類的工具與合併多個未受管理的資源。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-395">Multiple unmanaged resources need to be merged with a tool such as the Microsoft ResMerge utility (not supplied with the common language runtime).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f7fd8-396">開頭[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，這個成員已不再需要<xref:System.Security.Permissions.ReflectionPermission>使用<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType>旗標。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-396">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="f7fd8-397">(請參閱[反映發出中的安全性問題](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)。)若要使用這項功能，您的應用程式應將目標設為 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] (含) 以後版本。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-397">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f7fd8-398">下列範例示範呼叫`DefineUnmanagedResource`，傳遞外部的資源檔案。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-398">The example below demonstrates a call to `DefineUnmanagedResource`, passing an external resource file.</span></span>  
  
 [!code-cpp[AssemblyBuilder_DefineUnmanagedResource#3](~/samples/snippets/cpp/VS_Snippets_CLR/AssemblyBuilder_DefineUnmanagedResource/CPP/assemblybuilder_defineunmanagedresource.cpp#3)]
 [!code-csharp[AssemblyBuilder_DefineUnmanagedResource#3](~/samples/snippets/csharp/VS_Snippets_CLR/AssemblyBuilder_DefineUnmanagedResource/CS/assemblybuilder_defineunmanagedresource.cs#3)]
 [!code-vb[AssemblyBuilder_DefineUnmanagedResource#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AssemblyBuilder_DefineUnmanagedResource/VB/assemblybuilder_defineunmanagedresource.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f7fd8-399">先前定義的 Unmanaged 資源。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-399">An unmanaged resource was previously defined.</span></span>  
  
<span data-ttu-id="f7fd8-400">-或-</span><span class="sxs-lookup"><span data-stu-id="f7fd8-400">-or-</span></span> 
<span data-ttu-id="f7fd8-401">檔案 <paramref name="resourceFileName" /> 不可讀取。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-401">The file <paramref name="resourceFileName" /> is not readable.</span></span>  
  
<span data-ttu-id="f7fd8-402">-或-</span><span class="sxs-lookup"><span data-stu-id="f7fd8-402">-or-</span></span> 
 <span data-ttu-id="f7fd8-403"><paramref name="resourceFileName" /> 為空字串 ("")。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-403"><paramref name="resourceFileName" /> is the empty string ("").</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f7fd8-404"><paramref name="resourceFileName" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-404"><paramref name="resourceFileName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="f7fd8-405">找不到 <paramref name="resourceFileName" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-405"><paramref name="resourceFileName" /> is not found.</span></span>  
  
<span data-ttu-id="f7fd8-406">-或-</span><span class="sxs-lookup"><span data-stu-id="f7fd8-406">-or-</span></span> 
 <span data-ttu-id="f7fd8-407"><paramref name="resourceFileName" /> 是目錄。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-407"><paramref name="resourceFileName" /> is a directory.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="f7fd8-408">呼叫端沒有必要的權限。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-408">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="f7fd8-409">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-409">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="f7fd8-410">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-410">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="f7fd8-411">FileIOPermissionAccess.Read 權限才能存取的資源檔<paramref name="resourceFileName" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-411">The FileIOPermissionAccess.Read permission is needed to access the resource file <paramref name="resourceFileName" />.</span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="DefineVersionInfoResource">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f7fd8-412">定義這個組件的 Unmanaged Version 資訊資源。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-412">Defines an unmanaged version information resource for this assembly.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DefineVersionInfoResource">
      <MemberSignature Language="C#" Value="public void DefineVersionInfoResource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DefineVersionInfoResource() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource" />
      <MemberSignature Language="VB.NET" Value="Public Sub DefineVersionInfoResource ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DefineVersionInfoResource();" />
      <MemberSignature Language="F#" Value="member this.DefineVersionInfoResource : unit -&gt; unit" Usage="assemblyBuilder.DefineVersionInfoResource " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f7fd8-413">使用組件 AssemblyName 物件和組件自訂屬性中指定的資訊，定義 Unmanaged Version 資訊資源。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-413">Defines an unmanaged version information resource using the information specified in the assembly's AssemblyName object and the assembly's custom attributes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f7fd8-414">您可以只有一個的 unmanaged 資源相關聯的組件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-414">An assembly can be associated with only one unmanaged resource.</span></span> <span data-ttu-id="f7fd8-415">這表示，呼叫<xref:System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource%2A>或<xref:System.Reflection.Emit.AssemblyBuilder.DefineUnmanagedResource%2A>其中一個方法之後呼叫先前會擲回 System.ArgumentException。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-415">This means that calling <xref:System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource%2A> or <xref:System.Reflection.Emit.AssemblyBuilder.DefineUnmanagedResource%2A> after either one of the methods was called previously will throw the System.ArgumentException.</span></span> <span data-ttu-id="f7fd8-416">需要 Microsoft ResMerge 公用程式 （通用語言執行平台 SDK 不提供） 之類的工具與合併多個未受管理的資源。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-416">Multiple unmanaged resources need to be merged with a tool such as the Microsoft ResMerge utility (not supplied with the common language runtime SDK).</span></span>  
  
 <span data-ttu-id="f7fd8-417">空白的引數字串寫入為單一空格。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-417">Empty argument strings get written as a single space.</span></span> <span data-ttu-id="f7fd8-418">引數字串中的 null 字元取代空格。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-418">Spaces are substituted for null characters in the argument strings.</span></span>  
  
 <span data-ttu-id="f7fd8-419">資訊會從推斷`AssemblyName`用來定義這個動態組件的物件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-419">The information is inferred from the `AssemblyName` object used to define this dynamic assembly.</span></span> <span data-ttu-id="f7fd8-420">這個組件的自訂屬性覆寫中指定的資訊`AssemblyName`物件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-420">This assembly's custom attributes override information specified in the `AssemblyName` object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f7fd8-421">開頭[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，這個成員已不再需要<xref:System.Security.Permissions.ReflectionPermission>使用<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType>旗標。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-421">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="f7fd8-422">(請參閱[反映發出中的安全性問題](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)。)若要使用這項功能，您的應用程式應將目標設為 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] (含) 以後版本。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-422">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f7fd8-423">下列範例所示的使用方式`DefineVersionInfoResource`。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-423">The example below illustrates the usage of `DefineVersionInfoResource`.</span></span>  
  
 [!code-cpp[AssemblyBuilder_DefineVersionInfoResource#1](~/samples/snippets/cpp/VS_Snippets_CLR/AssemblyBuilder_DefineVersionInfoResource/CPP/assemblybuilder_defineversioninforesource.cpp#1)]
 [!code-csharp[AssemblyBuilder_DefineVersionInfoResource#1](~/samples/snippets/csharp/VS_Snippets_CLR/AssemblyBuilder_DefineVersionInfoResource/CS/assemblybuilder_defineversioninforesource.cs#1)]
 [!code-vb[AssemblyBuilder_DefineVersionInfoResource#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AssemblyBuilder_DefineVersionInfoResource/VB/assemblybuilder_defineversioninforesource.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f7fd8-424">Unmanaged Version 資訊資源之前已定義過。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-424">An unmanaged version information resource was previously defined.</span></span>  
  
<span data-ttu-id="f7fd8-425">-或-</span><span class="sxs-lookup"><span data-stu-id="f7fd8-425">-or-</span></span> 
<span data-ttu-id="f7fd8-426">Unmanaged Version 資訊太大以致於無法保存。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-426">The unmanaged version information is too large to persist.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="f7fd8-427">呼叫端沒有必要的權限。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-427">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="f7fd8-428">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-428">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="f7fd8-429">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-429">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="DefineVersionInfoResource">
      <MemberSignature Language="C#" Value="public void DefineVersionInfoResource (string product, string productVersion, string company, string copyright, string trademark);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DefineVersionInfoResource(string product, string productVersion, string company, string copyright, string trademark) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource(System.String,System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DefineVersionInfoResource (product As String, productVersion As String, company As String, copyright As String, trademark As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DefineVersionInfoResource(System::String ^ product, System::String ^ productVersion, System::String ^ company, System::String ^ copyright, System::String ^ trademark);" />
      <MemberSignature Language="F#" Value="member this.DefineVersionInfoResource : string * string * string * string * string -&gt; unit" Usage="assemblyBuilder.DefineVersionInfoResource (product, productVersion, company, copyright, trademark)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="product" Type="System.String" />
        <Parameter Name="productVersion" Type="System.String" />
        <Parameter Name="company" Type="System.String" />
        <Parameter Name="copyright" Type="System.String" />
        <Parameter Name="trademark" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="product"><span data-ttu-id="f7fd8-430">散發這個組件的產品名稱。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-430">The name of the product with which this assembly is distributed.</span></span></param>
        <param name="productVersion"><span data-ttu-id="f7fd8-431">散發這個組件的產品版本。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-431">The version of the product with which this assembly is distributed.</span></span></param>
        <param name="company"><span data-ttu-id="f7fd8-432">生產這個組件的公司名稱。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-432">The name of the company that produced this assembly.</span></span></param>
        <param name="copyright"><span data-ttu-id="f7fd8-433">描述所有適用這個組件的著作權標示、商標及註冊商標。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-433">Describes all copyright notices, trademarks, and registered trademarks that apply to this assembly.</span></span> <span data-ttu-id="f7fd8-434">這應包括所有注意事項全文、法律符號、版權日期、商標登錄編號等等。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-434">This should include the full text of all notices, legal symbols, copyright dates, trademark numbers, and so on.</span></span> <span data-ttu-id="f7fd8-435">此段文字的英文格式應為 "Copyright Microsoft Corp.1990-2001".</span><span class="sxs-lookup"><span data-stu-id="f7fd8-435">In English, this string should be in the format "Copyright Microsoft Corp. 1990-2001".</span></span></param>
        <param name="trademark"><span data-ttu-id="f7fd8-436">描述所有適用這個組件的商標及註冊商標。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-436">Describes all trademarks and registered trademarks that apply to this assembly.</span></span> <span data-ttu-id="f7fd8-437">這應包括所有注意事項全文、法律符號、商標登錄編號等等。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-437">This should include the full text of all notices, legal symbols, trademark numbers, and so on.</span></span> <span data-ttu-id="f7fd8-438">此段文字的英文格式應為 "Windows is a trademark of Microsoft Corporation"。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-438">In English, this string should be in the format "Windows is a trademark of Microsoft Corporation".</span></span></param>
        <summary><span data-ttu-id="f7fd8-439">請使用指定的規格定義這個組件的 Unmanaged Version 資訊資源。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-439">Defines an unmanaged version information resource for this assembly with the given specifications.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f7fd8-440">您可以只有一個的 unmanaged 資源相關聯的組件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-440">An assembly can be associated with only one unmanaged resource.</span></span> <span data-ttu-id="f7fd8-441">這表示，呼叫<xref:System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource%2A>或<xref:System.Reflection.Emit.AssemblyBuilder.DefineUnmanagedResource%2A>其中一個方法之後呼叫先前會擲回 System.ArgumentException。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-441">This means that calling <xref:System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource%2A> or <xref:System.Reflection.Emit.AssemblyBuilder.DefineUnmanagedResource%2A> after either one of the methods was called previously will throw the System.ArgumentException.</span></span> <span data-ttu-id="f7fd8-442">多個未受管理的資源需要 Microsoft 之類的工具與合併`ResMerge`公用程式 （通用語言執行平台 SDK 不提供）。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-442">Multiple unmanaged resources need to be merged with a tool such as the Microsoft `ResMerge` utility (not supplied with the common language runtime SDK).</span></span>  
  
 <span data-ttu-id="f7fd8-443">空白的引數字串寫入為單一空格。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-443">Empty argument strings get written as a single space.</span></span> <span data-ttu-id="f7fd8-444">引數字串中的 null 字元取代空格。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-444">Spaces are substituted for null characters in the argument strings.</span></span>  
  
 <span data-ttu-id="f7fd8-445">版本資源的結構包含可識別版本、 語言和檔案的發佈的資料。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-445">The structure of the version resource includes data that identifies the version, language, and distribution of the file.</span></span> <span data-ttu-id="f7fd8-446">安裝程式檔案安裝文件庫 （版本中使用函式DLL) 來擷取檔案的版本資訊資源，並從資源中擷取版本資訊區塊。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-446">Installation programs use the functions in the file installation library (VER.DLL) to retrieve the version information resource from a file and to extract the version information blocks from the resource.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f7fd8-447">開頭[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，這個成員已不再需要<xref:System.Security.Permissions.ReflectionPermission>使用<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType>旗標。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-447">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="f7fd8-448">(請參閱[反映發出中的安全性問題](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)。)若要使用這項功能，您的應用程式應將目標設為 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] (含) 以後版本。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-448">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f7fd8-449">下列範例所示的使用方式`DefineVersionInfoResource`。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-449">The example below illustrates the usage of `DefineVersionInfoResource`.</span></span>  
  
 [!code-cpp[AssemblyBuilder_DefineVersionInfoResource#1](~/samples/snippets/cpp/VS_Snippets_CLR/AssemblyBuilder_DefineVersionInfoResource/CPP/assemblybuilder_defineversioninforesource.cpp#1)]
 [!code-csharp[AssemblyBuilder_DefineVersionInfoResource#1](~/samples/snippets/csharp/VS_Snippets_CLR/AssemblyBuilder_DefineVersionInfoResource/CS/assemblybuilder_defineversioninforesource.cs#1)]
 [!code-vb[AssemblyBuilder_DefineVersionInfoResource#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AssemblyBuilder_DefineVersionInfoResource/VB/assemblybuilder_defineversioninforesource.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f7fd8-450">Unmanaged Version 資訊資源之前已定義過。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-450">An unmanaged version information resource was previously defined.</span></span>  
  
<span data-ttu-id="f7fd8-451">-或-</span><span class="sxs-lookup"><span data-stu-id="f7fd8-451">-or-</span></span> 
<span data-ttu-id="f7fd8-452">Unmanaged Version 資訊太大以致於無法保存。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-452">The unmanaged version information is too large to persist.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="f7fd8-453">呼叫端沒有必要的權限。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-453">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="f7fd8-454">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-454">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="f7fd8-455">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-455">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="EntryPoint">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodInfo EntryPoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo EntryPoint" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.AssemblyBuilder.EntryPoint" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property EntryPoint As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodInfo ^ EntryPoint { System::Reflection::MethodInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EntryPoint : System.Reflection.MethodInfo" Usage="System.Reflection.Emit.AssemblyBuilder.EntryPoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f7fd8-456">傳回這個組件的進入點。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-456">Returns the entry point of this assembly.</span></span></summary>
        <value><span data-ttu-id="f7fd8-457">這個組件的進入點。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-457">The entry point of this assembly.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="f7fd8-458">呼叫端沒有必要的權限。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-458">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="f7fd8-459">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-459">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="f7fd8-460">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-460">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="assemblyBuilder.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="f7fd8-461">與這個執行個體相比較的物件，或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-461">An object to compare with this instance, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="f7fd8-462">傳回值，這個值表示這個執行個體是否等於指定的物件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-462">Returns a value that indicates whether this instance is equal to the specified object.</span></span></summary>
        <returns><span data-ttu-id="f7fd8-463">如果 <see langword="true" /> 和這個執行個體具有相同的類型和值，則為 <paramref name="obj" />否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-463"><see langword="true" /> if <paramref name="obj" /> equals the type and value of this instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Evidence">
      <MemberSignature Language="C#" Value="public override System.Security.Policy.Evidence Evidence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Policy.Evidence Evidence" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.AssemblyBuilder.Evidence" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Evidence As Evidence" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::Policy::Evidence ^ Evidence { System::Security::Policy::Evidence ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Evidence : System.Security.Policy.Evidence" Usage="System.Reflection.Emit.AssemblyBuilder.Evidence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Policy.Evidence</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f7fd8-464">取得這個組件的辨識碼。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-464">Gets the evidence for this assembly.</span></span></summary>
        <value><span data-ttu-id="f7fd8-465">這個組件的辨識項。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-465">The evidence for this assembly.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FullName">
      <MemberSignature Language="C#" Value="public override string FullName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullName" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.AssemblyBuilder.FullName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property FullName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ FullName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FullName : string" Usage="System.Reflection.Emit.AssemblyBuilder.FullName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f7fd8-466">取得目前動態組件的顯示名稱。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-466">Gets the display name of the current dynamic assembly.</span></span></summary>
        <value><span data-ttu-id="f7fd8-467">目前動態組件的顯示名稱。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-467">The display name of the dynamic assembly.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f7fd8-468">請參閱<xref:System.Reflection.AssemblyName>的組件的顯示名稱格式的說明。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-468">See <xref:System.Reflection.AssemblyName> for a description of the format of the display name of an assembly.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCustomAttributes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f7fd8-469">傳回已套用至目前 <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> 的自訂屬性。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-469">Returns custom attributes that have been applied to the current <see cref="T:System.Reflection.Emit.AssemblyBuilder" /></span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetCustomAttributes(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(bool inherit);" />
      <MemberSignature Language="F#" Value="override this.GetCustomAttributes : bool -&gt; obj[]" Usage="assemblyBuilder.GetCustomAttributes inherit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="inherit"><span data-ttu-id="f7fd8-470">這個類型的物件會忽略這個引數。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-470">This argument is ignored for objects of this type.</span></span></param>
        <summary><span data-ttu-id="f7fd8-471">傳回已套用至目前 <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> 的所有自訂屬性。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-471">Returns all the custom attributes that have been applied to the current <see cref="T:System.Reflection.Emit.AssemblyBuilder" />.</span></span></summary>
        <returns><span data-ttu-id="f7fd8-472">陣列，其中包含自訂屬性；如果沒有屬性，則陣列是空的。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-472">An array that contains the custom attributes; the array is empty if there are no attributes.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetCustomAttributes(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (attributeType As Type, inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(Type ^ attributeType, bool inherit);" />
      <MemberSignature Language="F#" Value="override this.GetCustomAttributes : Type * bool -&gt; obj[]" Usage="assemblyBuilder.GetCustomAttributes (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType"><span data-ttu-id="f7fd8-473">從中衍生屬性的基底類型。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-473">The base type from which attributes derive.</span></span></param>
        <param name="inherit"><span data-ttu-id="f7fd8-474">這個類型的物件會忽略這個引數。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-474">This argument is ignored for objects of this type.</span></span></param>
        <summary><span data-ttu-id="f7fd8-475">傳回已套用至目前 <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> 的所有自訂屬性，以及衍生自指定屬性類型的所有自訂屬性。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-475">Returns all the custom attributes that have been applied to the current <see cref="T:System.Reflection.Emit.AssemblyBuilder" />, and that derive from a specified attribute type.</span></span></summary>
        <returns><span data-ttu-id="f7fd8-476">陣列，其中包含在任何層級衍生自 <paramref name="attributeType" /> 的自訂屬性；如果沒有這類屬性，則陣列是空的。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-476">An array that contains the custom attributes that are derived at any level from <paramref name="attributeType" />; the array is empty if there are no such attributes.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f7fd8-477"><paramref name="attributeType" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-477"><paramref name="attributeType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f7fd8-478"><paramref name="attributeType" /> 不是執行階段所提供的 <see cref="T:System.Type" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-478"><paramref name="attributeType" /> is not a <see cref="T:System.Type" /> object supplied by the runtime.</span></span> <span data-ttu-id="f7fd8-479">例如，<paramref name="attributeType" /> 是 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-479">For example, <paramref name="attributeType" /> is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> object.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributesData">
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt; GetCustomAttributesData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Collections.Generic.IList`1&lt;class System.Reflection.CustomAttributeData&gt; GetCustomAttributesData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetCustomAttributesData" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributesData () As IList(Of CustomAttributeData)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Collections::Generic::IList&lt;System::Reflection::CustomAttributeData ^&gt; ^ GetCustomAttributesData();" />
      <MemberSignature Language="F#" Value="override this.GetCustomAttributesData : unit -&gt; System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt;" Usage="assemblyBuilder.GetCustomAttributesData " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f7fd8-480">傳回 <see cref="T:System.Reflection.CustomAttributeData" /> 物件，其中包含已套用至目前 <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> 的屬性之相關資訊。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-480">Returns <see cref="T:System.Reflection.CustomAttributeData" /> objects that contain information about the attributes that have been applied to the current <see cref="T:System.Reflection.Emit.AssemblyBuilder" />.</span></span></summary>
        <returns><span data-ttu-id="f7fd8-481"><see cref="T:System.Reflection.CustomAttributeData" /> 物件的泛型清單，表示已套用至目前模組之屬性的資料。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-481">A generic list of <see cref="T:System.Reflection.CustomAttributeData" /> objects representing data about the attributes that have been applied to the current module.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f7fd8-482">若要檢查的自訂屬性中僅限反映的內容，在其中已載入至僅限反映內容的程式碼中定義的自訂屬性本身的情況下的程式碼中使用這個方法。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-482">Use this method to examine the custom attributes of code in the reflection-only context, in cases where the custom attributes themselves are defined in code that is loaded into the reflection-only context.</span></span> <span data-ttu-id="f7fd8-483">這類方法<xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType>和<xref:System.Reflection.Assembly.GetCustomAttributes%2A?displayProperty=nameWithType>不能在這種情況下，因為它們會產生屬性的執行個體。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-483">Methods such as <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType> and <xref:System.Reflection.Assembly.GetCustomAttributes%2A?displayProperty=nameWithType> cannot be used in such cases, because they create instances of the attributes.</span></span> <span data-ttu-id="f7fd8-484">無法執行僅限反映內容中的程式碼。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-484">Code in the reflection-only context cannot be executed.</span></span> <span data-ttu-id="f7fd8-485">如需詳細資訊和例如程式碼，請參閱<xref:System.Reflection.CustomAttributeData>類別。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-485">For more information and for example code, see the <xref:System.Reflection.CustomAttributeData> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDynamicModule">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ModuleBuilder GetDynamicModule (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ModuleBuilder GetDynamicModule(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDynamicModule (name As String) As ModuleBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ModuleBuilder ^ GetDynamicModule(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.GetDynamicModule : string -&gt; System.Reflection.Emit.ModuleBuilder" Usage="assemblyBuilder.GetDynamicModule name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ModuleBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="f7fd8-486">要求之動態模組的名稱。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-486">The name of the requested dynamic module.</span></span></param>
        <summary><span data-ttu-id="f7fd8-487">傳回具有指定名稱的動態模組。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-487">Returns the dynamic module with the specified name.</span></span></summary>
        <returns><span data-ttu-id="f7fd8-488">代表要求之動態模組的 ModuleBuilder 物件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-488">A ModuleBuilder object representing the requested dynamic module.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f7fd8-489"><paramref name="name" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-489"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f7fd8-490"><paramref name="name" /> 的長度為零。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-490">The length of <paramref name="name" /> is zero.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="f7fd8-491">呼叫端沒有必要的權限。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-491">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="f7fd8-492">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-492">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="f7fd8-493">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-493">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetExportedTypes">
      <MemberSignature Language="C#" Value="public override Type[] GetExportedTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type[] GetExportedTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetExportedTypes" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetExportedTypes () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;Type ^&gt; ^ GetExportedTypes();" />
      <MemberSignature Language="F#" Value="override this.GetExportedTypes : unit -&gt; Type[]" Usage="assemblyBuilder.GetExportedTypes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f7fd8-494">取得這個組件中定義的匯出類型。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-494">Gets the exported types defined in this assembly.</span></span></summary>
        <returns><span data-ttu-id="f7fd8-495"><see cref="T:System.Type" /> 陣列，其中包含這個組件中定義的匯出類型。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-495">An array of <see cref="T:System.Type" /> containing the exported types defined in this assembly.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="f7fd8-496">這個方法尚未實作。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-496">This method is not implemented.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="f7fd8-497">呼叫端沒有必要的權限。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-497">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="f7fd8-498">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-498">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="f7fd8-499">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-499">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetFile">
      <MemberSignature Language="C#" Value="public override System.IO.FileStream GetFile (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IO.FileStream GetFile(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetFile (name As String) As FileStream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::IO::FileStream ^ GetFile(System::String ^ name);" />
      <MemberSignature Language="F#" Value="override this.GetFile : string -&gt; System.IO.FileStream" Usage="assemblyBuilder.GetFile name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.FileStream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="f7fd8-500">指定檔案的名稱。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-500">The name of the specified file.</span></span></param>
        <summary><span data-ttu-id="f7fd8-501">取得指定之檔案的 <see cref="T:System.IO.FileStream" />，這個指定之檔案位於這個組件的資訊清單檔案表中。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-501">Gets a <see cref="T:System.IO.FileStream" /> for the specified file in the file table of the manifest of this assembly.</span></span></summary>
        <returns><span data-ttu-id="f7fd8-502">若為指定的檔案，則為 <see cref="T:System.IO.FileStream" />，或者如果找不到此檔案，則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-502">A <see cref="T:System.IO.FileStream" /> for the specified file, or <see langword="null" />, if the file is not found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f7fd8-503">`name` 不應該包含檔案的路徑。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-503">`name` should not include the path to the file.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="f7fd8-504">目前不支援這個方法。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-504">This method is not currently supported.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="f7fd8-505">呼叫端沒有必要的權限。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-505">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="f7fd8-506">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-506">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="f7fd8-507">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-507">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetFiles">
      <MemberSignature Language="C#" Value="public override System.IO.FileStream[] GetFiles (bool getResourceModules);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IO.FileStream[] GetFiles(bool getResourceModules) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetFiles(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetFiles (getResourceModules As Boolean) As FileStream()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::IO::FileStream ^&gt; ^ GetFiles(bool getResourceModules);" />
      <MemberSignature Language="F#" Value="override this.GetFiles : bool -&gt; System.IO.FileStream[]" Usage="assemblyBuilder.GetFiles getResourceModules" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.FileStream[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="getResourceModules" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="getResourceModules"><span data-ttu-id="f7fd8-508">若要包含資源模組，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-508"><see langword="true" /> to include resource modules; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="f7fd8-509">取得組件資訊清單檔案表中的檔案，指定是否要包含資源模組。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-509">Gets the files in the file table of an assembly manifest, specifying whether to include resource modules.</span></span></summary>
        <returns><span data-ttu-id="f7fd8-510"><see cref="T:System.IO.FileStream" /> 物件的陣列。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-510">An array of <see cref="T:System.IO.FileStream" /> objects.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="f7fd8-511">目前不支援這個方法。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-511">This method is not currently supported.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="f7fd8-512">呼叫端沒有必要的權限。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-512">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="f7fd8-513">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-513">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="f7fd8-514">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-514">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="assemblyBuilder.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f7fd8-515">傳回這個執行個體的雜湊碼。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-515">Returns the hash code for this instance.</span></span></summary>
        <returns><span data-ttu-id="f7fd8-516">32 位元帶正負號的整數雜湊碼。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-516">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLoadedModules">
      <MemberSignature Language="C#" Value="public override System.Reflection.Module[] GetLoadedModules (bool getResourceModules);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.Module[] GetLoadedModules(bool getResourceModules) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetLoadedModules(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetLoadedModules (getResourceModules As Boolean) As Module()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::Module ^&gt; ^ GetLoadedModules(bool getResourceModules);" />
      <MemberSignature Language="F#" Value="override this.GetLoadedModules : bool -&gt; System.Reflection.Module[]" Usage="assemblyBuilder.GetLoadedModules getResourceModules" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="getResourceModules" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="getResourceModules"><span data-ttu-id="f7fd8-517">若要包含資源模組，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-517"><see langword="true" /> to include resource modules; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="f7fd8-518">傳回所有屬於這個組件的載入模組，並選擇性地包含資源模組。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-518">Returns all the loaded modules that are part of this assembly, and optionally includes resource modules.</span></span></summary>
        <returns><span data-ttu-id="f7fd8-519">屬於這個組件的載入模組。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-519">The loaded modules that are part of this assembly.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetManifestResourceInfo">
      <MemberSignature Language="C#" Value="public override System.Reflection.ManifestResourceInfo GetManifestResourceInfo (string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.ManifestResourceInfo GetManifestResourceInfo(string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetManifestResourceInfo (resourceName As String) As ManifestResourceInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::ManifestResourceInfo ^ GetManifestResourceInfo(System::String ^ resourceName);" />
      <MemberSignature Language="F#" Value="override this.GetManifestResourceInfo : string -&gt; System.Reflection.ManifestResourceInfo" Usage="assemblyBuilder.GetManifestResourceInfo resourceName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ManifestResourceInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resourceName"><span data-ttu-id="f7fd8-520">資源名稱。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-520">The name of the resource.</span></span></param>
        <summary><span data-ttu-id="f7fd8-521">傳回指定資源已保存方式的資訊。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-521">Returns information about how the given resource has been persisted.</span></span></summary>
        <returns><span data-ttu-id="f7fd8-522">填入此資源拓撲相關資訊的 <see cref="T:System.Reflection.ManifestResourceInfo" />，如果找不到資源，則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-522"><see cref="T:System.Reflection.ManifestResourceInfo" /> populated with information about the resource's topology, or <see langword="null" /> if the resource is not found.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="f7fd8-523">目前不支援這個方法。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-523">This method is not currently supported.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="f7fd8-524">呼叫端沒有必要的權限。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-524">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="f7fd8-525">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-525">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="f7fd8-526">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-526">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetManifestResourceNames">
      <MemberSignature Language="C#" Value="public override string[] GetManifestResourceNames ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string[] GetManifestResourceNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceNames" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetManifestResourceNames () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::String ^&gt; ^ GetManifestResourceNames();" />
      <MemberSignature Language="F#" Value="override this.GetManifestResourceNames : unit -&gt; string[]" Usage="assemblyBuilder.GetManifestResourceNames " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f7fd8-527">載入來自這個組件的指定資訊清單資源。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-527">Loads the specified manifest resource from this assembly.</span></span></summary>
        <returns><span data-ttu-id="f7fd8-528">類型 <see langword="String" /> 的陣列，包含所有資源的名稱。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-528">An array of type <see langword="String" /> containing the names of all the resources.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="f7fd8-529">動態組件不支援這個方法。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-529">This method is not supported on a dynamic assembly.</span></span> <span data-ttu-id="f7fd8-530">若要取得資訊清單資源名稱，請使用 <see cref="M:System.Reflection.Assembly.GetManifestResourceNames" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-530">To get the manifest resource names, use <see cref="M:System.Reflection.Assembly.GetManifestResourceNames" />.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="f7fd8-531">呼叫端沒有必要的權限。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-531">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="f7fd8-532">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-532">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="f7fd8-533">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-533">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetManifestResourceStream">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f7fd8-534">載入來自這個組件的指定資訊清單資源。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-534">Loads the specified manifest resource from this assembly.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetManifestResourceStream">
      <MemberSignature Language="C#" Value="public override System.IO.Stream GetManifestResourceStream (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IO.Stream GetManifestResourceStream(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetManifestResourceStream (name As String) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::IO::Stream ^ GetManifestResourceStream(System::String ^ name);" />
      <MemberSignature Language="F#" Value="override this.GetManifestResourceStream : string -&gt; System.IO.Stream" Usage="assemblyBuilder.GetManifestResourceStream name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="f7fd8-535">所要求的資訊清單資源名稱。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-535">The name of the manifest resource being requested.</span></span></param>
        <summary><span data-ttu-id="f7fd8-536">載入來自這個組件的指定資訊清單資源。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-536">Loads the specified manifest resource from this assembly.</span></span></summary>
        <returns><span data-ttu-id="f7fd8-537"><see cref="T:System.IO.Stream" /> 代表這個資訊清單資源。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-537">A <see cref="T:System.IO.Stream" /> representing this manifest resource.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="f7fd8-538">目前不支援這個方法。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-538">This method is not currently supported.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="f7fd8-539">呼叫端沒有必要的權限。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-539">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="f7fd8-540">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-540">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="f7fd8-541">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-541">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetManifestResourceStream">
      <MemberSignature Language="C#" Value="public override System.IO.Stream GetManifestResourceStream (Type type, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IO.Stream GetManifestResourceStream(class System.Type type, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::IO::Stream ^ GetManifestResourceStream(Type ^ type, System::String ^ name);" />
      <MemberSignature Language="F#" Value="override this.GetManifestResourceStream : Type * string -&gt; System.IO.Stream" Usage="assemblyBuilder.GetManifestResourceStream (type, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="f7fd8-542">類型，其命名空間是用來限定資訊清單資源名稱的範圍。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-542">The type whose namespace is used to scope the manifest resource name.</span></span></param>
        <param name="name"><span data-ttu-id="f7fd8-543">所要求的資訊清單資源名稱。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-543">The name of the manifest resource being requested.</span></span></param>
        <summary><span data-ttu-id="f7fd8-544">從這個組件載入指定資訊清單資源，由指定類型的命名空間限定範圍。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-544">Loads the specified manifest resource, scoped by the namespace of the specified type, from this assembly.</span></span></summary>
        <returns><span data-ttu-id="f7fd8-545"><see cref="T:System.IO.Stream" /> 代表這個資訊清單資源。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-545">A <see cref="T:System.IO.Stream" /> representing this manifest resource.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f7fd8-546">傳回<xref:System.IO.Stream>具有其設定為在資源開頭的檔案指標。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-546">The returned <xref:System.IO.Stream> has its file pointer set to the beginning of the resource.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f7fd8-547">如果的全名`type`是 「 MyNameSpace.MyClasses 」 和`name`是 「 點 」，`GetManifestResourceStream`會搜尋名為 MyNameSpace.Dot 的資源。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-547">If the full name of `type` is "MyNameSpace.MyClasses" and `name` is "Dot", `GetManifestResourceStream` will search for a resource named MyNameSpace.Dot.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="f7fd8-548">目前不支援這個方法。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-548">This method is not currently supported.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="f7fd8-549">呼叫端沒有必要的權限。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-549">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="f7fd8-550">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-550">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="f7fd8-551">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-551">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <related type="Article" href="~/docs/framework/app-domains/assembly-manifest.md"><span data-ttu-id="f7fd8-552">組件資訊清單</span><span class="sxs-lookup"><span data-stu-id="f7fd8-552">Assembly Manifest</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetModule">
      <MemberSignature Language="C#" Value="public override System.Reflection.Module GetModule (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.Module GetModule(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetModule(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetModule (name As String) As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::Module ^ GetModule(System::String ^ name);" />
      <MemberSignature Language="F#" Value="override this.GetModule : string -&gt; System.Reflection.Module" Usage="assemblyBuilder.GetModule name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="f7fd8-553">要求模組的名稱。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-553">The name of the requested module.</span></span></param>
        <summary><span data-ttu-id="f7fd8-554">取得這個組件中的指定模組。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-554">Gets the specified module in this assembly.</span></span></summary>
        <returns><span data-ttu-id="f7fd8-555">正在接受要求的模組，如果找不到模組，則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-555">The module being requested, or <see langword="null" /> if the module is not found.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetModules">
      <MemberSignature Language="C#" Value="public override System.Reflection.Module[] GetModules (bool getResourceModules);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.Module[] GetModules(bool getResourceModules) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetModules(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetModules (getResourceModules As Boolean) As Module()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::Module ^&gt; ^ GetModules(bool getResourceModules);" />
      <MemberSignature Language="F#" Value="override this.GetModules : bool -&gt; System.Reflection.Module[]" Usage="assemblyBuilder.GetModules getResourceModules" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="getResourceModules" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="getResourceModules"><span data-ttu-id="f7fd8-556">若要包含資源模組，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-556"><see langword="true" /> to include resource modules; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="f7fd8-557">取得所有屬於這個組件的模組，並選擇性地包含資源模組。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-557">Gets all the modules that are part of this assembly, and optionally includes resource modules.</span></span></summary>
        <returns><span data-ttu-id="f7fd8-558">屬於這個組件的模組。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-558">The modules that are part of this assembly.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetName">
      <MemberSignature Language="C#" Value="public override System.Reflection.AssemblyName GetName (bool copiedName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.AssemblyName GetName(bool copiedName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetName(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetName (copiedName As Boolean) As AssemblyName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::AssemblyName ^ GetName(bool copiedName);" />
      <MemberSignature Language="F#" Value="override this.GetName : bool -&gt; System.Reflection.AssemblyName" Usage="assemblyBuilder.GetName copiedName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.AssemblyName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="copiedName" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="copiedName"><span data-ttu-id="f7fd8-559">若為 <see langword="true" /> 則將程式碼基底設定為組件陰影複製以後的位置，如為 <see langword="false" />則將程式碼基底設定為原始位置。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-559"><see langword="true" /> to set the code base to the location of the assembly after it is shadow-copied; <see langword="false" /> to set the code base to the original location.</span></span></param>
        <summary><span data-ttu-id="f7fd8-560">取得目前動態組件建立時指定的 <see cref="T:System.Reflection.AssemblyName" />，且依指定方式設定程式碼基底。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-560">Gets the <see cref="T:System.Reflection.AssemblyName" /> that was specified when the current dynamic assembly was created, and sets the code base as specified.</span></span></summary>
        <returns><span data-ttu-id="f7fd8-561">動態組件的名稱。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-561">The name of the dynamic assembly.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetReferencedAssemblies">
      <MemberSignature Language="C#" Value="public override System.Reflection.AssemblyName[] GetReferencedAssemblies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.AssemblyName[] GetReferencedAssemblies() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetReferencedAssemblies" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetReferencedAssemblies () As AssemblyName()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::AssemblyName ^&gt; ^ GetReferencedAssemblies();" />
      <MemberSignature Language="F#" Value="override this.GetReferencedAssemblies : unit -&gt; System.Reflection.AssemblyName[]" Usage="assemblyBuilder.GetReferencedAssemblies " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.AssemblyName[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f7fd8-562">取得這個 <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> 所參考組件之 <see cref="T:System.Reflection.AssemblyName" /> 物件的不完整清單。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-562">Gets an incomplete list of <see cref="T:System.Reflection.AssemblyName" /> objects for the assemblies that are referenced by this <see cref="T:System.Reflection.Emit.AssemblyBuilder" />.</span></span></summary>
        <returns><span data-ttu-id="f7fd8-563">受參考組件的組件名稱陣列。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-563">An array of assembly names for the referenced assemblies.</span></span> <span data-ttu-id="f7fd8-564">這個陣列不是完整的清單。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-564">This array is not a complete list.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f7fd8-565">這個方法不會傳回參考組件的完整清單。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-565">This method does not return a complete list of referenced assemblies.</span></span> <span data-ttu-id="f7fd8-566">例如，如果您套用自訂屬性以<xref:System.Reflection.Emit.AssemblyBuilder>，定義屬性的組件包含在這個方法所傳回的清單。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-566">For example, if you apply a custom attribute to the <xref:System.Reflection.Emit.AssemblyBuilder>, the assembly in which the attribute was defined is included in the list returned by this method.</span></span> <span data-ttu-id="f7fd8-567">不過，如果您使用<xref:System.Type>物件來指定方法參數，類型不是包含的型別。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-567">However, if you use a <xref:System.Type> object to specify the type of a method parameter, that type is not included.</span></span>  
  
 <span data-ttu-id="f7fd8-568">若要取得參考的組件的完整清單，請儲存組件，請將其載入至另一個應用程式定義域，並呼叫<xref:System.Reflection.Assembly.GetReferencedAssemblies%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-568">To get a complete list of referenced assemblies, save the assembly, load it into another application domain, and call the <xref:System.Reflection.Assembly.GetReferencedAssemblies%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetSatelliteAssembly">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f7fd8-569">取得指定的附屬組件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-569">Gets a specified satellite assembly.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetSatelliteAssembly">
      <MemberSignature Language="C#" Value="public override System.Reflection.Assembly GetSatelliteAssembly (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.Assembly GetSatelliteAssembly(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetSatelliteAssembly(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetSatelliteAssembly (culture As CultureInfo) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::Assembly ^ GetSatelliteAssembly(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="override this.GetSatelliteAssembly : System.Globalization.CultureInfo -&gt; System.Reflection.Assembly" Usage="assemblyBuilder.GetSatelliteAssembly culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture"><span data-ttu-id="f7fd8-570">指定的文化特性。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-570">The specified culture.</span></span></param>
        <summary><span data-ttu-id="f7fd8-571">取得指定文化特性的附屬組件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-571">Gets the satellite assembly for the specified culture.</span></span></summary>
        <returns><span data-ttu-id="f7fd8-572">指定的附屬組件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-572">The specified satellite assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f7fd8-573">附屬組件包含不同主要應用程式組件，其中包含不可當地語系化的可執行程式碼和做為預設或中性文化特性之單一文化特性資源的當地語系化的資源。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-573">Satellite assemblies contain localized resources, as distinct from main application assemblies, which contain non-localizable executable code and resources for a single culture that serve as the default or neutral culture.</span></span>  
  
 <span data-ttu-id="f7fd8-574">呼叫這個方法，以使用您目前的組件版本。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-574">Call this method to use your current assembly version.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f7fd8-575"><paramref name="culture" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-575"><paramref name="culture" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="f7fd8-576">找不到組件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-576">The assembly cannot be found.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="f7fd8-577">找不到具有相符檔案名稱的附屬組件，但 <see langword="CultureInfo" /> 不符合所指定者。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-577">The satellite assembly with a matching file name was found, but the <see langword="CultureInfo" /> did not match the one specified.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="f7fd8-578">此附屬組件不是有效的組件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-578">The satellite assembly is not a valid assembly.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetSatelliteAssembly">
      <MemberSignature Language="C#" Value="public override System.Reflection.Assembly GetSatelliteAssembly (System.Globalization.CultureInfo culture, Version version);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.Assembly GetSatelliteAssembly(class System.Globalization.CultureInfo culture, class System.Version version) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetSatelliteAssembly(System.Globalization.CultureInfo,System.Version)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::Assembly ^ GetSatelliteAssembly(System::Globalization::CultureInfo ^ culture, Version ^ version);" />
      <MemberSignature Language="F#" Value="override this.GetSatelliteAssembly : System.Globalization.CultureInfo * Version -&gt; System.Reflection.Assembly" Usage="assemblyBuilder.GetSatelliteAssembly (culture, version)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="version" Type="System.Version" />
      </Parameters>
      <Docs>
        <param name="culture"><span data-ttu-id="f7fd8-579">指定的文化特性。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-579">The specified culture.</span></span></param>
        <param name="version"><span data-ttu-id="f7fd8-580">附屬組件的版本。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-580">The version of the satellite assembly.</span></span></param>
        <summary><span data-ttu-id="f7fd8-581">取得指定文化特性的附屬組件指定版本。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-581">Gets the specified version of the satellite assembly for the specified culture.</span></span></summary>
        <returns><span data-ttu-id="f7fd8-582">指定的附屬組件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-582">The specified satellite assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f7fd8-583">附屬組件包含不同主要應用程式組件，其中包含不可當地語系化的可執行程式碼和做為預設或中性文化特性之單一文化特性資源的當地語系化的資源。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-583">Satellite assemblies contain localized resources, as distinct from main application assemblies, which contain non-localizable executable code and resources for a single culture that serve as the default or neutral culture.</span></span>  
  
 <span data-ttu-id="f7fd8-584">呼叫<xref:System.Reflection.Assembly.GetSatelliteAssembly%28System.Globalization.CultureInfo%29>多載，以使用您目前的組件版本。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-584">Call the <xref:System.Reflection.Assembly.GetSatelliteAssembly%28System.Globalization.CultureInfo%29> overload to use your current assembly version.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f7fd8-585"><paramref name="culture" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-585"><paramref name="culture" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="f7fd8-586">已找到檔案名稱相符的附屬組件，但 <see langword="CultureInfo" /> 或版本不符合所指定者。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-586">The satellite assembly with a matching file name was found, but the <see langword="CultureInfo" /> or the version did not match the one specified.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="f7fd8-587">找不到組件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-587">The assembly cannot be found.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="f7fd8-588">此附屬組件不是有效的組件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-588">The satellite assembly is not a valid assembly.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public override Type GetType (string name, bool throwOnError, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type GetType(string name, bool throwOnError, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetType(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetType (name As String, throwOnError As Boolean, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ GetType(System::String ^ name, bool throwOnError, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="override this.GetType : string * bool * bool -&gt; Type" Usage="assemblyBuilder.GetType (name, throwOnError, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="f7fd8-589">要搜尋的類型名稱。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-589">The name of the type to search for.</span></span></param>
        <param name="throwOnError"><span data-ttu-id="f7fd8-590"><see langword="true" /> 表示找不到該類型時擲回例外狀況，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-590"><see langword="true" /> to throw an exception if the type is not found; otherwise, <see langword="false" />.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="f7fd8-591">若要在搜尋時忽略類型名稱的大小寫，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-591"><see langword="true" /> to ignore the case of the type name when searching; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="f7fd8-592">由在目前 <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> 中定義和建立的類型取得指定的類型。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-592">Gets the specified type from the types that have been defined and created in the current <see cref="T:System.Reflection.Emit.AssemblyBuilder" />.</span></span></summary>
        <returns><span data-ttu-id="f7fd8-593">如果此類型找不到或尚未建立，則為指定的類型或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-593">The specified type, or <see langword="null" /> if the type is not found or has not been created yet.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f7fd8-594">型別找不到之前建立藉由呼叫<xref:System.Reflection.Emit.TypeBuilder.CreateType%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-594">A type cannot be found until it has been created by calling the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GlobalAssemblyCache">
      <MemberSignature Language="C#" Value="public override bool GlobalAssemblyCache { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool GlobalAssemblyCache" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.AssemblyBuilder.GlobalAssemblyCache" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property GlobalAssemblyCache As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool GlobalAssemblyCache { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalAssemblyCache : bool" Usage="System.Reflection.Emit.AssemblyBuilder.GlobalAssemblyCache" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f7fd8-595">取得值，這個值表示組件是否從全域組件快取載入。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-595">Gets a value that indicates whether the assembly was loaded from the global assembly cache.</span></span></summary>
        <value><span data-ttu-id="f7fd8-596">一定是 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-596">Always <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f7fd8-597"><xref:System.Reflection.Emit.AssemblyBuilder> 物件一律代表動態組件，因此永遠不會載入從全域組件快取。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-597"><xref:System.Reflection.Emit.AssemblyBuilder> objects always represent dynamic assemblies, and therefore are never loaded from the global assembly cache.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HostContext">
      <MemberSignature Language="C#" Value="public override long HostContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 HostContext" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.AssemblyBuilder.HostContext" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property HostContext As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long HostContext { long get(); };" />
      <MemberSignature Language="F#" Value="member this.HostContext : int64" Usage="System.Reflection.Emit.AssemblyBuilder.HostContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f7fd8-598">取得建立動態組件所在的主機內容。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-598">Gets the host context where the dynamic assembly is being created.</span></span></summary>
        <value><span data-ttu-id="f7fd8-599">指出建立動態組件所在之主機內容的值。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-599">A value that indicates the host context where the dynamic assembly is being created.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImageRuntimeVersion">
      <MemberSignature Language="C#" Value="public override string ImageRuntimeVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ImageRuntimeVersion" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.AssemblyBuilder.ImageRuntimeVersion" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ImageRuntimeVersion As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ImageRuntimeVersion { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ImageRuntimeVersion : string" Usage="System.Reflection.Emit.AssemblyBuilder.ImageRuntimeVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f7fd8-600">取得將要儲存在含有資訊清單之檔案中的 Common Language Runtime 版本。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-600">Gets the version of the common language runtime that will be saved in the file containing the manifest.</span></span></summary>
        <value><span data-ttu-id="f7fd8-601">代表 Common Language Runtime 版本的字串。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-601">A string representing the common language runtime version.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="f7fd8-602">呼叫端沒有必要的權限。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-602">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="f7fd8-603">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-603">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="f7fd8-604">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-604">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public override bool IsDefined (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsDefined(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.IsDefined(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsDefined (attributeType As Type, inherit As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsDefined(Type ^ attributeType, bool inherit);" />
      <MemberSignature Language="F#" Value="override this.IsDefined : Type * bool -&gt; bool" Usage="assemblyBuilder.IsDefined (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType"><span data-ttu-id="f7fd8-605">要測試的屬性類型。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-605">The type of attribute to test for.</span></span></param>
        <param name="inherit"><span data-ttu-id="f7fd8-606">這個類型的物件會忽略這個引數。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-606">This argument is ignored for objects of this type.</span></span></param>
        <summary><span data-ttu-id="f7fd8-607">傳回值，這個值表示指定屬性類型的一或多個執行個體是否套用至這個成員。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-607">Returns a value that indicates whether one or more instances of the specified attribute type is applied to this member.</span></span></summary>
        <returns><span data-ttu-id="f7fd8-608">如果 <paramref name="attributeType" /> 的一或多個執行個體套用至這個動態組件，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-608"><see langword="true" /> if one or more instances of <paramref name="attributeType" /> is applied to this dynamic assembly; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDynamic">
      <MemberSignature Language="C#" Value="public override bool IsDynamic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDynamic" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.AssemblyBuilder.IsDynamic" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsDynamic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsDynamic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDynamic : bool" Usage="System.Reflection.Emit.AssemblyBuilder.IsDynamic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f7fd8-609">取得值，表示目前的組件是動態組件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-609">Gets a value that indicates that the current assembly is a dynamic assembly.</span></span></summary>
        <value><span data-ttu-id="f7fd8-610">一定是 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-610">Always <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f7fd8-611"><xref:System.Reflection.Emit.AssemblyBuilder>物件一律代表動態組件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-611">An <xref:System.Reflection.Emit.AssemblyBuilder> object always represents a dynamic assembly.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Location">
      <MemberSignature Language="C#" Value="public override string Location { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Location" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.AssemblyBuilder.Location" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Location As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Location { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Location : string" Usage="System.Reflection.Emit.AssemblyBuilder.Location" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f7fd8-612">如果不是陰影複製，則取得包含資訊清單之已載入檔案的位置 (程式碼基底格式)。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-612">Gets the location, in codebase format, of the loaded file that contains the manifest if it is not shadow-copied.</span></span></summary>
        <value><span data-ttu-id="f7fd8-613">包含資訊清單之載入檔的位置。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-613">The location of the loaded file that contains the manifest.</span></span> <span data-ttu-id="f7fd8-614">如果載入檔經過陰影複製，則 <see langword="Location" /> 就是陰影複製前的檔案。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-614">If the loaded file has been shadow-copied, the <see langword="Location" /> is that of the file before being shadow-copied.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="f7fd8-615">目前不支援這個方法。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-615">This method is not currently supported.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="f7fd8-616">呼叫端沒有必要的權限。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-616">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="f7fd8-617">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-617">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="f7fd8-618">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-618">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ManifestModule">
      <MemberSignature Language="C#" Value="public override System.Reflection.Module ManifestModule { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Module ManifestModule" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.AssemblyBuilder.ManifestModule" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ManifestModule As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::Module ^ ManifestModule { System::Reflection::Module ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ManifestModule : System.Reflection.Module" Usage="System.Reflection.Emit.AssemblyBuilder.ManifestModule" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f7fd8-619">在目前的 <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> 中取得模組，其中包含組件資訊清單。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-619">Gets the module in the current <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> that contains the assembly manifest.</span></span></summary>
        <value><span data-ttu-id="f7fd8-620">資訊清單模組。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-620">The manifest module.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Modules">
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.IEnumerable&lt;System.Reflection.Module&gt; Modules { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.Module&gt; Modules" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.AssemblyBuilder.Modules" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Modules As IEnumerable(Of Module)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::Generic::IEnumerable&lt;System::Reflection::Module ^&gt; ^ Modules { System::Collections::Generic::IEnumerable&lt;System::Reflection::Module ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Modules : seq&lt;System.Reflection.Module&gt;" Usage="System.Reflection.Emit.AssemblyBuilder.Modules" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Reflection.Module&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PermissionSet">
      <MemberSignature Language="C#" Value="public override System.Security.PermissionSet PermissionSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.PermissionSet PermissionSet" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.AssemblyBuilder.PermissionSet" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property PermissionSet As PermissionSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::PermissionSet ^ PermissionSet { System::Security::PermissionSet ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PermissionSet : System.Security.PermissionSet" Usage="System.Reflection.Emit.AssemblyBuilder.PermissionSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.PermissionSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f7fd8-621">取得目前動態組件的授權集。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-621">Gets the grant set of the current dynamic assembly.</span></span></summary>
        <value><span data-ttu-id="f7fd8-622">目前動態組件的授權集。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-622">The grant set of the current dynamic assembly.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f7fd8-623"><xref:System.Security.PermissionSet> 物件可以包含機密資訊，例如路徑。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-623"><xref:System.Security.PermissionSet> objects can contain sensitive information such as paths.</span></span> <span data-ttu-id="f7fd8-624">因此，完全信任，才能存取這些物件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-624">Therefore, full trust is required to access these objects.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="f7fd8-625">需要完全信任立即呼叫端。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-625">requires full trust for the immediate caller.</span></span> <span data-ttu-id="f7fd8-626">此成員不能由部分信任或不透明的程式碼。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-626">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ReflectionOnly">
      <MemberSignature Language="C#" Value="public override bool ReflectionOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReflectionOnly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.AssemblyBuilder.ReflectionOnly" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReflectionOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool ReflectionOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ReflectionOnly : bool" Usage="System.Reflection.Emit.AssemblyBuilder.ReflectionOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f7fd8-627">取得值，其會表示此動態組件是否位於僅限反射內容中。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-627">Gets a value indicating whether the dynamic assembly is in the reflection-only context.</span></span></summary>
        <value><span data-ttu-id="f7fd8-628">如果此動態組件位於僅限反映的內容，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-628"><see langword="true" /> if the dynamic assembly is in the reflection-only context; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f7fd8-629">若要發出動態組件的僅限反映的內容中，指定<xref:System.Reflection.Emit.AssemblyBuilderAccess.ReflectionOnly?displayProperty=nameWithType>當您建立<xref:System.Reflection.Emit.AssemblyBuilder>。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-629">To emit a dynamic assembly in the reflection-only context, specify <xref:System.Reflection.Emit.AssemblyBuilderAccess.ReflectionOnly?displayProperty=nameWithType> when you create the <xref:System.Reflection.Emit.AssemblyBuilder>.</span></span> <span data-ttu-id="f7fd8-630">如果僅限反映內容中，就會發出動態組件，就無法執行其程式碼。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-630">If a dynamic assembly is emitted in the reflection-only context, its code cannot be executed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f7fd8-631">動態組件儲存至磁碟之後，您可以使用<xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType>已完成的組件載入僅限反映內容的方法。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-631">After you have saved a dynamic assembly to disk, you can use the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType> method to load the completed assembly into the reflection-only context.</span></span> <span data-ttu-id="f7fd8-632">不過，無法再修改組件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-632">However, the assembly can no longer be modified.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Reflection.Emit.AssemblyBuilderAccess.ReflectionOnly" />
        <altmember cref="M:System.Reflection.Assembly.ReflectionOnlyLoad(System.String)" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md"><span data-ttu-id="f7fd8-633">如何：將組件載入僅限反映的內容</span><span class="sxs-lookup"><span data-stu-id="f7fd8-633">How to: Load Assemblies into the Reflection-Only Context</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Save">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f7fd8-634">將此動態組件儲存到磁碟。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-634">Saves this dynamic assembly to disk.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (string assemblyFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(string assemblyFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.Save(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (assemblyFileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::String ^ assemblyFileName);" />
      <MemberSignature Language="F#" Value="member this.Save : string -&gt; unit" Usage="assemblyBuilder.Save assemblyFileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyFileName"><span data-ttu-id="f7fd8-635">組件的檔案名稱。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-635">The file name of the assembly.</span></span></param>
        <summary><span data-ttu-id="f7fd8-636">將此動態組件儲存到磁碟。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-636">Saves this dynamic assembly to disk.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f7fd8-637">這個方法會儲存在這個動態組件中定義的所有非暫時性動態模組。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-637">This method saves all non-transient dynamic modules defined in this dynamic assembly.</span></span> <span data-ttu-id="f7fd8-638">不會儲存暫時性動態模組。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-638">Transient dynamic modules are not saved.</span></span> <span data-ttu-id="f7fd8-639">組件檔案名稱可以是其中一個模組的名稱相同。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-639">The assembly file name can be the same as the name of one of the modules.</span></span> <span data-ttu-id="f7fd8-640">如果是的話，則會將組件資訊清單儲存在該模組。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-640">If so, the assembly manifest is stored within that module.</span></span> <span data-ttu-id="f7fd8-641">`assemblyFileName` 可以是不同的所有組件內所包含之模組的名稱。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-641">`assemblyFileName` can be different from the names of all of the modules contained within the assembly.</span></span> <span data-ttu-id="f7fd8-642">若是如此，組件檔會包含組件資訊清單。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-642">If so, the assembly file contains only the assembly manifest.</span></span>  
  
 <span data-ttu-id="f7fd8-643">每個<xref:System.Resources.ResourceWriter>使用取得<xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A>，這個方法會寫入.resources 檔案，並在呼叫<xref:System.Resources.ResourceWriter.Close%2A>關閉資料流。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-643">For each <xref:System.Resources.ResourceWriter> obtained using <xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A>, this method writes the .resources file and calls <xref:System.Resources.ResourceWriter.Close%2A> to close the stream.</span></span>  
  
 <span data-ttu-id="f7fd8-644">`assemblyFileName`必須是簡單的檔案名稱，而不需要磁碟機或目錄的元件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-644">The `assemblyFileName` needs to be a simple file name without a drive or directory component.</span></span> <span data-ttu-id="f7fd8-645">若要建立組件的特定目錄中，使用其中一種<xref:System.AppDomain.DefineDynamicAssembly%2A>接受目標目錄引數的方法。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-645">To create an assembly in a specific directory, use one of the <xref:System.AppDomain.DefineDynamicAssembly%2A> methods that takes a target directory argument.</span></span>  
  
 <span data-ttu-id="f7fd8-646">在.NET Framework 2.0 版的這個多載<xref:System.Reflection.Emit.AssemblyBuilder.Save%2A>方法就相當於呼叫<xref:System.Reflection.Emit.AssemblyBuilder.Save%28System.String%2CSystem.Reflection.PortableExecutableKinds%2CSystem.Reflection.ImageFileMachine%29>方法多載<xref:System.Reflection.PortableExecutableKinds.ILOnly>如`portableExecutableKind`參數和<xref:System.Reflection.ImageFileMachine.I386>如`imageFileMachine`參數。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-646">In the .NET Framework version 2.0, this overload of the <xref:System.Reflection.Emit.AssemblyBuilder.Save%2A> method is equivalent to calling the <xref:System.Reflection.Emit.AssemblyBuilder.Save%28System.String%2CSystem.Reflection.PortableExecutableKinds%2CSystem.Reflection.ImageFileMachine%29> method overload with <xref:System.Reflection.PortableExecutableKinds.ILOnly> for the `portableExecutableKind` parameter and <xref:System.Reflection.ImageFileMachine.I386> for the `imageFileMachine` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f7fd8-647">下列程式碼範例會建立動態組件，並再將它保存到本機磁碟，使用`Save`。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-647">The following code sample creates a dynamic assembly and then persists it to a local disk using `Save`.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.AssemblyBuilder.Save Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.Save Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.AssemblyBuilder.Save Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.Save Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.AssemblyBuilder.Save Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.Save Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f7fd8-648"><paramref name="assemblyFileName" /> 的長度為 0。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-648">The length of <paramref name="assemblyFileName" /> is 0.</span></span>  
  
<span data-ttu-id="f7fd8-649">-或-</span><span class="sxs-lookup"><span data-stu-id="f7fd8-649">-or-</span></span> 
<span data-ttu-id="f7fd8-650">組件中有兩個或多個模組資源檔案具有相同名稱。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-650">There are two or more modules resource files in the assembly with the same name.</span></span>  
  
<span data-ttu-id="f7fd8-651">-或-</span><span class="sxs-lookup"><span data-stu-id="f7fd8-651">-or-</span></span> 
<span data-ttu-id="f7fd8-652">組件的目標目錄無效。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-652">The target directory of the assembly is invalid.</span></span>  
  
<span data-ttu-id="f7fd8-653">-或-</span><span class="sxs-lookup"><span data-stu-id="f7fd8-653">-or-</span></span> 
 <span data-ttu-id="f7fd8-654"><paramref name="assemblyFileName" /> 不是簡單的檔案名稱 (例如具有目錄或磁碟機部分)，或此組件中定義一個以上的 Unmanaged 資源，包含版本資訊資源在內。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-654"><paramref name="assemblyFileName" /> is not a simple file name (for example, has a directory or drive component), or more than one unmanaged resource, including a version information resource, was defined in this assembly.</span></span>  
  
<span data-ttu-id="f7fd8-655">-或-</span><span class="sxs-lookup"><span data-stu-id="f7fd8-655">-or-</span></span> 
<span data-ttu-id="f7fd8-656">在 <see cref="T:System.Reflection.AssemblyCultureAttribute" /> 中的 <see langword="CultureInfo" /> 字串不是有效的字串，且在呼叫這個方法之前就已呼叫了 <see cref="M:System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource(System.String,System.String,System.String,System.String,System.String)" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-656">The <see langword="CultureInfo" /> string in <see cref="T:System.Reflection.AssemblyCultureAttribute" /> is not a valid string and <see cref="M:System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource(System.String,System.String,System.String,System.String,System.String)" /> was called prior to calling this method.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f7fd8-657"><paramref name="assemblyFileName" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-657"><paramref name="assemblyFileName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f7fd8-658">之前已儲存了這個組件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-658">This assembly has been saved before.</span></span>  
  
<span data-ttu-id="f7fd8-659">-或-</span><span class="sxs-lookup"><span data-stu-id="f7fd8-659">-or-</span></span> 
<span data-ttu-id="f7fd8-660">這個組件具有存取權 <see langword="Run" /><see cref="T:System.Reflection.Emit.AssemblyBuilderAccess" /></span><span class="sxs-lookup"><span data-stu-id="f7fd8-660">This assembly has access <see langword="Run" /><see cref="T:System.Reflection.Emit.AssemblyBuilderAccess" /></span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f7fd8-661">儲存期間發生輸出錯誤。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-661">An output error occurs during the save.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="f7fd8-662">尚未針對要寫入磁碟的組件模組內的任何類型呼叫 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-662"><see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> has not been called for any of the types in the modules of the assembly to be written to disk.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="f7fd8-663">撰寫 = true] 或 [附加 = true，才能將這個組件儲存至指定的檔案名稱。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-663">Write = true or Append = true is needed to save this assembly to the specified file name.</span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="f7fd8-664">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-664">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="f7fd8-665">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-665">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (string assemblyFileName, System.Reflection.PortableExecutableKinds portableExecutableKind, System.Reflection.ImageFileMachine imageFileMachine);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(string assemblyFileName, valuetype System.Reflection.PortableExecutableKinds portableExecutableKind, valuetype System.Reflection.ImageFileMachine imageFileMachine) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.Save(System.String,System.Reflection.PortableExecutableKinds,System.Reflection.ImageFileMachine)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::String ^ assemblyFileName, System::Reflection::PortableExecutableKinds portableExecutableKind, System::Reflection::ImageFileMachine imageFileMachine);" />
      <MemberSignature Language="F#" Value="member this.Save : string * System.Reflection.PortableExecutableKinds * System.Reflection.ImageFileMachine -&gt; unit" Usage="assemblyBuilder.Save (assemblyFileName, portableExecutableKind, imageFileMachine)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFileName" Type="System.String" />
        <Parameter Name="portableExecutableKind" Type="System.Reflection.PortableExecutableKinds" />
        <Parameter Name="imageFileMachine" Type="System.Reflection.ImageFileMachine" />
      </Parameters>
      <Docs>
        <param name="assemblyFileName"><span data-ttu-id="f7fd8-666">組件的檔案名稱。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-666">The file name of the assembly.</span></span></param>
        <param name="portableExecutableKind"><span data-ttu-id="f7fd8-667"><see cref="T:System.Reflection.PortableExecutableKinds" /> 值的位元組合，指定此程式碼的本質。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-667">A bitwise combination of the <see cref="T:System.Reflection.PortableExecutableKinds" /> values that specifies the nature of the code.</span></span></param>
        <param name="imageFileMachine"><span data-ttu-id="f7fd8-668"><see cref="T:System.Reflection.ImageFileMachine" /> 值的其中一個，可指定目標平台。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-668">One of the <see cref="T:System.Reflection.ImageFileMachine" /> values that specifies the target platform.</span></span></param>
        <summary><span data-ttu-id="f7fd8-669">將這個動態組件儲存至磁碟，指定在組件的可執行檔和目標平台的程式碼本質。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-669">Saves this dynamic assembly to disk, specifying the nature of code in the assembly's executables and the target platform.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f7fd8-670">如果`imageFileMachine`並`portableExecutableKind`不相容，`imageFileMachine`優先於`portableExecutableKind`。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-670">If `imageFileMachine` and `portableExecutableKind` are incompatible, `imageFileMachine` takes precedence over `portableExecutableKind`.</span></span> <span data-ttu-id="f7fd8-671">不會有例外狀況擲回。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-671">No exception is thrown.</span></span> <span data-ttu-id="f7fd8-672">例如，如果您指定<xref:System.Reflection.ImageFileMachine.I386?displayProperty=nameWithType>具有<xref:System.Reflection.PortableExecutableKinds.PE32Plus?displayProperty=nameWithType>，<xref:System.Reflection.PortableExecutableKinds.PE32Plus?displayProperty=nameWithType>會被忽略。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-672">For example, if you specify <xref:System.Reflection.ImageFileMachine.I386?displayProperty=nameWithType> with <xref:System.Reflection.PortableExecutableKinds.PE32Plus?displayProperty=nameWithType>, <xref:System.Reflection.PortableExecutableKinds.PE32Plus?displayProperty=nameWithType> is ignored.</span></span>  
  
 <span data-ttu-id="f7fd8-673">這個方法會儲存在這個動態組件中定義的所有非暫時性動態模組。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-673">This method saves all non-transient dynamic modules defined in this dynamic assembly.</span></span> <span data-ttu-id="f7fd8-674">不會儲存暫時性動態模組。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-674">Transient dynamic modules are not saved.</span></span> <span data-ttu-id="f7fd8-675">組件檔案名稱可以是其中一個模組的名稱相同。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-675">The assembly file name can be the same as the name of one of the module.</span></span> <span data-ttu-id="f7fd8-676">如果是的話，則會將組件資訊清單儲存在該模組。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-676">If so, the assembly manifest is stored within that module.</span></span> <span data-ttu-id="f7fd8-677">`assemblyFileName` 可以是不同的所有組件內所包含之模組的名稱。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-677">`assemblyFileName` can be different from the names of all of the modules contained within the assembly.</span></span> <span data-ttu-id="f7fd8-678">若是如此，組件檔會包含組件資訊清單。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-678">If so, the assembly file contains only the assembly manifest.</span></span>  
  
 <span data-ttu-id="f7fd8-679">每個<xref:System.Resources.ResourceWriter>使用取得<xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A>，這個方法會寫入.resources 檔案，並在呼叫<xref:System.Resources.ResourceWriter.Close%2A>關閉資料流。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-679">For each <xref:System.Resources.ResourceWriter> obtained using <xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A>, this method writes the .resources file and calls <xref:System.Resources.ResourceWriter.Close%2A> to close the stream.</span></span>  
  
 <span data-ttu-id="f7fd8-680">`assemblyFileName`必須是簡單的檔案名稱，而不需要磁碟機或目錄的元件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-680">The `assemblyFileName` needs to be a simple file name without a drive or directory component.</span></span> <span data-ttu-id="f7fd8-681">若要建立組件的特定目錄中，使用其中一種<xref:System.AppDomain.DefineDynamicAssembly%2A>接受目標目錄引數的方法。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-681">To create an assembly in a specific directory, use one of the <xref:System.AppDomain.DefineDynamicAssembly%2A> methods that takes a target directory argument.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f7fd8-682"><paramref name="assemblyFileName" /> 的長度為 0。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-682">The length of <paramref name="assemblyFileName" /> is 0.</span></span>  
  
<span data-ttu-id="f7fd8-683">-或-</span><span class="sxs-lookup"><span data-stu-id="f7fd8-683">-or-</span></span> 
<span data-ttu-id="f7fd8-684">組件中有兩個或多個模組資源檔案具有相同名稱。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-684">There are two or more modules resource files in the assembly with the same name.</span></span>  
  
<span data-ttu-id="f7fd8-685">-或-</span><span class="sxs-lookup"><span data-stu-id="f7fd8-685">-or-</span></span> 
<span data-ttu-id="f7fd8-686">組件的目標目錄無效。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-686">The target directory of the assembly is invalid.</span></span>  
  
<span data-ttu-id="f7fd8-687">-或-</span><span class="sxs-lookup"><span data-stu-id="f7fd8-687">-or-</span></span> 
 <span data-ttu-id="f7fd8-688"><paramref name="assemblyFileName" /> 不是簡單的檔案名稱 (例如具有目錄或磁碟機部分)，或此組件中定義一個以上的 Unmanaged 資源，包含版本資訊資源在內。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-688"><paramref name="assemblyFileName" /> is not a simple file name (for example, has a directory or drive component), or more than one unmanaged resource, including a version information resources, was defined in this assembly.</span></span>  
  
<span data-ttu-id="f7fd8-689">-或-</span><span class="sxs-lookup"><span data-stu-id="f7fd8-689">-or-</span></span> 
<span data-ttu-id="f7fd8-690">在 <see cref="T:System.Reflection.AssemblyCultureAttribute" /> 中的 <see langword="CultureInfo" /> 字串不是有效的字串，且在呼叫這個方法之前就已呼叫了 <see cref="M:System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource(System.String,System.String,System.String,System.String,System.String)" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-690">The <see langword="CultureInfo" /> string in <see cref="T:System.Reflection.AssemblyCultureAttribute" /> is not a valid string and <see cref="M:System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource(System.String,System.String,System.String,System.String,System.String)" /> was called prior to calling this method.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f7fd8-691"><paramref name="assemblyFileName" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-691"><paramref name="assemblyFileName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f7fd8-692">之前已儲存了這個組件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-692">This assembly has been saved before.</span></span>  
  
<span data-ttu-id="f7fd8-693">-或-</span><span class="sxs-lookup"><span data-stu-id="f7fd8-693">-or-</span></span> 
<span data-ttu-id="f7fd8-694">這個組件具有存取權 <see langword="Run" /><see cref="T:System.Reflection.Emit.AssemblyBuilderAccess" /></span><span class="sxs-lookup"><span data-stu-id="f7fd8-694">This assembly has access <see langword="Run" /><see cref="T:System.Reflection.Emit.AssemblyBuilderAccess" /></span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f7fd8-695">儲存期間發生輸出錯誤。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-695">An output error occurs during the save.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="f7fd8-696">尚未針對要寫入磁碟的組件模組內的任何類型呼叫 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-696"><see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> has not been called for any of the types in the modules of the assembly to be written to disk.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="f7fd8-697">撰寫 = true] 或 [附加 = true，才能將這個組件儲存至指定的檔案名稱。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-697">Write = true or Append = true is needed to save this assembly to the specified file name.</span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="f7fd8-698">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-698">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="f7fd8-699">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-699">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="SecurityRuleSet">
      <MemberSignature Language="C#" Value="public override System.Security.SecurityRuleSet SecurityRuleSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.SecurityRuleSet SecurityRuleSet" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.AssemblyBuilder.SecurityRuleSet" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property SecurityRuleSet As SecurityRuleSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::SecurityRuleSet SecurityRuleSet { System::Security::SecurityRuleSet get(); };" />
      <MemberSignature Language="F#" Value="member this.SecurityRuleSet : System.Security.SecurityRuleSet" Usage="System.Reflection.Emit.AssemblyBuilder.SecurityRuleSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.SecurityRuleSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f7fd8-700">取得值，這個值指出應針對此組件強制執行的 Common Language Runtime (CLR) 安全性規則組合。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-700">Gets a value that indicates which set of security rules the common language runtime (CLR) enforces for this assembly.</span></span></summary>
        <value><span data-ttu-id="f7fd8-701">CLR 對這個動態組件強制執行的安全性規則組合。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-701">The security rule set that the CLR enforces for this dynamic assembly.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f7fd8-702">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]一律會強制執行層級 2 透明度 (<xref:System.Security.SecurityRuleSet.Level2?displayProperty=nameWithType>) 就會產生動態組件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-702">The [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] always enforces level 2 transparency (<xref:System.Security.SecurityRuleSet.Level2?displayProperty=nameWithType>) for the dynamic assemblies it generates.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetCustomAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f7fd8-703">設定此組件的自訂屬性。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-703">Sets a custom attribute on this assembly.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetCustomAttribute">
      <MemberSignature Language="C#" Value="public void SetCustomAttribute (System.Reflection.Emit.CustomAttributeBuilder customBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCustomAttribute(class System.Reflection.Emit.CustomAttributeBuilder customBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCustomAttribute (customBuilder As CustomAttributeBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCustomAttribute(System::Reflection::Emit::CustomAttributeBuilder ^ customBuilder);" />
      <MemberSignature Language="F#" Value="member this.SetCustomAttribute : System.Reflection.Emit.CustomAttributeBuilder -&gt; unit" Usage="assemblyBuilder.SetCustomAttribute customBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="customBuilder" Type="System.Reflection.Emit.CustomAttributeBuilder" />
      </Parameters>
      <Docs>
        <param name="customBuilder"><span data-ttu-id="f7fd8-704">定義自訂屬性的協助程式類別執行個體。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-704">An instance of a helper class to define the custom attribute.</span></span></param>
        <summary><span data-ttu-id="f7fd8-705">使用自訂屬性產生器來設定這個組件上的自訂屬性。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-705">Set a custom attribute on this assembly using a custom attribute builder.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="f7fd8-706"><xref:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute%2A> 不用來設定宣告式安全性屬性。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-706"><xref:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute%2A> cannot be used to set declarative security attributes.</span></span> <span data-ttu-id="f7fd8-707">使用其中一個多載<xref:System.AppDomain.DefineDynamicAssembly%2A>會有需要，選擇性的並拒絕權限。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-707">Use one of the overloads of <xref:System.AppDomain.DefineDynamicAssembly%2A> that takes required, optional, and refused permissions.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f7fd8-708">開頭[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，這個成員已不再需要<xref:System.Security.Permissions.ReflectionPermission>使用<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType>旗標。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-708">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="f7fd8-709">(請參閱[反映發出中的安全性問題](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)。)若要使用這項功能，您的應用程式應將目標設為 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] (含) 以後版本。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-709">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f7fd8-710">下列程式碼範例說明如何使用`SetCustomAttribute`內<xref:System.Reflection.Emit.AssemblyBuilder>，並使用<xref:System.Reflection.Emit.CustomAttributeBuilder>。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-710">The following code sample illustrates the use of `SetCustomAttribute` within <xref:System.Reflection.Emit.AssemblyBuilder>, using a <xref:System.Reflection.Emit.CustomAttributeBuilder>.</span></span>  
  
 [!code-cpp[AssemblyBuilder_SetCustomAttribute1#1](~/samples/snippets/cpp/VS_Snippets_CLR/AssemblyBuilder_SetCustomAttribute1/CPP/assemblybuilder_setcustomattribute1.cpp#1)]
 [!code-csharp[AssemblyBuilder_SetCustomAttribute1#1](~/samples/snippets/csharp/VS_Snippets_CLR/AssemblyBuilder_SetCustomAttribute1/CS/assemblybuilder_setcustomattribute1.cs#1)]
 [!code-vb[AssemblyBuilder_SetCustomAttribute1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AssemblyBuilder_SetCustomAttribute1/VB/assemblybuilder_setcustomattribute1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f7fd8-711"><paramref name="con" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-711"><paramref name="con" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="f7fd8-712">呼叫端沒有必要的權限。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-712">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="f7fd8-713">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-713">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="f7fd8-714">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-714">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="SetCustomAttribute">
      <MemberSignature Language="C#" Value="public void SetCustomAttribute (System.Reflection.ConstructorInfo con, byte[] binaryAttribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCustomAttribute(class System.Reflection.ConstructorInfo con, unsigned int8[] binaryAttribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCustomAttribute (con As ConstructorInfo, binaryAttribute As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCustomAttribute(System::Reflection::ConstructorInfo ^ con, cli::array &lt;System::Byte&gt; ^ binaryAttribute);" />
      <MemberSignature Language="F#" Value="member this.SetCustomAttribute : System.Reflection.ConstructorInfo * byte[] -&gt; unit" Usage="assemblyBuilder.SetCustomAttribute (con, binaryAttribute)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="con" Type="System.Reflection.ConstructorInfo" />
        <Parameter Name="binaryAttribute" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="con"><span data-ttu-id="f7fd8-715">自訂屬性的建構函式。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-715">The constructor for the custom attribute.</span></span></param>
        <param name="binaryAttribute"><span data-ttu-id="f7fd8-716">代表屬性的位元組 Blob。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-716">A byte blob representing the attributes.</span></span></param>
        <summary><span data-ttu-id="f7fd8-717">使用指定的自訂屬性 Blob 來設定這個組件上的自訂屬性。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-717">Set a custom attribute on this assembly using a specified custom attribute blob.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f7fd8-718">有關如何格式化，請參閱 ECMA 第二篇文件，如需詳細資料中的中繼資料規格`binaryAttribute`。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-718">See the metadata specification in the ECMA Partition II documentation for details on how to format `binaryAttribute`.</span></span> <span data-ttu-id="f7fd8-719">您可以線上取得這份文件；請參閱 MSDN 上的 [ECMA C# 和通用語言基礎結構標準](https://go.microsoft.com/fwlink/?LinkID=99212)，以及 Ecma International 網站上的[標準 ECMA-335 - 通用語言基礎結構 (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552)。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-719">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 <span data-ttu-id="f7fd8-720">`RuntimeConstructorInfo` 由系統產生的一種特殊類型。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-720">`RuntimeConstructorInfo` is a special type generated by the system.</span></span> <span data-ttu-id="f7fd8-721">它衍生自<xref:System.Reflection.ConstructorInfo>類別，以及任何<xref:System.Reflection.ConstructorInfo>您透過反映取得的物件是實際的執行個體`RuntimeConstructorInfo`。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-721">It derives from the <xref:System.Reflection.ConstructorInfo> class, and any <xref:System.Reflection.ConstructorInfo> object you obtain through reflection is actually an instance of `RuntimeConstructorInfo`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f7fd8-722"><xref:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute%2A> 不用來設定宣告式安全性屬性。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-722"><xref:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute%2A> cannot be used to set declarative security attributes.</span></span> <span data-ttu-id="f7fd8-723">使用其中一個多載<xref:System.AppDomain.DefineDynamicAssembly%2A>會有需要，選擇性的並拒絕權限。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-723">Use one of the overloads of <xref:System.AppDomain.DefineDynamicAssembly%2A> that takes required, optional, and refused permissions.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f7fd8-724">開頭[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，這個成員已不再需要<xref:System.Security.Permissions.ReflectionPermission>使用<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType>旗標。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-724">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="f7fd8-725">(請參閱[反映發出中的安全性問題](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)。)若要使用這項功能，您的應用程式應將目標設為 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] (含) 以後版本。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-725">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f7fd8-726">下列程式碼範例說明如何使用`SetCustomAttribute`將自訂屬性新增至動態產生的組件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-726">The following code sample illustrates the use of `SetCustomAttribute` to attach a custom attribute to a dynamically generated assembly.</span></span>  
  
 [!code-cpp[AssemblyBuilder_SetCustomAttribute2#1](~/samples/snippets/cpp/VS_Snippets_CLR/AssemblyBuilder_SetCustomAttribute2/CPP/assemblybuilder_setcustomattribute2.cpp#1)]
 [!code-csharp[AssemblyBuilder_SetCustomAttribute2#1](~/samples/snippets/csharp/VS_Snippets_CLR/AssemblyBuilder_SetCustomAttribute2/CS/assemblybuilder_setcustomattribute2.cs#1)]
 [!code-vb[AssemblyBuilder_SetCustomAttribute2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AssemblyBuilder_SetCustomAttribute2/VB/assemblybuilder_setcustomattribute2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f7fd8-727"><paramref name="con" /> 或 <paramref name="binaryAttribute" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-727"><paramref name="con" /> or <paramref name="binaryAttribute" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="f7fd8-728">呼叫端沒有必要的權限。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-728">The caller does not have the required permission.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f7fd8-729"><paramref name="con" /> 不是 <see langword="RuntimeConstructorInfo" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-729"><paramref name="con" /> is not a <see langword="RuntimeConstructorInfo" /> object.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="f7fd8-730">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-730">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="f7fd8-731">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-731">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetEntryPoint">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f7fd8-732">設定這個動態組件的進入點。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-732">Sets the entry point for this dynamic assembly.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetEntryPoint">
      <MemberSignature Language="C#" Value="public void SetEntryPoint (System.Reflection.MethodInfo entryMethod);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetEntryPoint(class System.Reflection.MethodInfo entryMethod) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint(System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetEntryPoint (entryMethod As MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetEntryPoint(System::Reflection::MethodInfo ^ entryMethod);" />
      <MemberSignature Language="F#" Value="member this.SetEntryPoint : System.Reflection.MethodInfo -&gt; unit" Usage="assemblyBuilder.SetEntryPoint entryMethod" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entryMethod" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="entryMethod"><span data-ttu-id="f7fd8-733">方法的參考，代表這個動態組件的進入點。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-733">A reference to the method that represents the entry point for this dynamic assembly.</span></span></param>
        <summary><span data-ttu-id="f7fd8-734">設定這個動態組件的進入點，並假設正在建立主控台應用程式。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-734">Sets the entry point for this dynamic assembly, assuming that a console application is being built.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f7fd8-735"><paramref name="entryMethod" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-735"><paramref name="entryMethod" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f7fd8-736"><paramref name="entryMethod" /> 未包含在這個組件中。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-736"><paramref name="entryMethod" /> is not contained within this assembly.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="f7fd8-737">呼叫端沒有必要的權限。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-737">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="f7fd8-738">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-738">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="f7fd8-739">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-739">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="SetEntryPoint">
      <MemberSignature Language="C#" Value="public void SetEntryPoint (System.Reflection.MethodInfo entryMethod, System.Reflection.Emit.PEFileKinds fileKind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetEntryPoint(class System.Reflection.MethodInfo entryMethod, valuetype System.Reflection.Emit.PEFileKinds fileKind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint(System.Reflection.MethodInfo,System.Reflection.Emit.PEFileKinds)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetEntryPoint (entryMethod As MethodInfo, fileKind As PEFileKinds)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetEntryPoint(System::Reflection::MethodInfo ^ entryMethod, System::Reflection::Emit::PEFileKinds fileKind);" />
      <MemberSignature Language="F#" Value="member this.SetEntryPoint : System.Reflection.MethodInfo * System.Reflection.Emit.PEFileKinds -&gt; unit" Usage="assemblyBuilder.SetEntryPoint (entryMethod, fileKind)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entryMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="fileKind" Type="System.Reflection.Emit.PEFileKinds" />
      </Parameters>
      <Docs>
        <param name="entryMethod"><span data-ttu-id="f7fd8-740">方法的參考，代表這個動態組件的進入點。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-740">A reference to the method that represents the entry point for this dynamic assembly.</span></span></param>
        <param name="fileKind"><span data-ttu-id="f7fd8-741">正在建置之組件可執行檔的類型。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-741">The type of the assembly executable being built.</span></span></param>
        <summary><span data-ttu-id="f7fd8-742">設定這個組件的進入點和定義正在建置之可攜式執行檔 (PE 檔) 的類型。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-742">Sets the entry point for this assembly and defines the type of the portable executable (PE file) being built.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="f7fd8-743">開頭[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，這個成員已不再需要<xref:System.Security.Permissions.ReflectionPermission>使用<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType>旗標。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-743">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="f7fd8-744">(請參閱[反映發出中的安全性問題](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)。)若要使用這項功能，您的應用程式應將目標設為 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] (含) 以後版本。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-744">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f7fd8-745"><paramref name="entryMethod" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-745"><paramref name="entryMethod" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f7fd8-746"><paramref name="entryMethod" /> 未包含在這個組件中。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-746"><paramref name="entryMethod" /> is not contained within this assembly.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="f7fd8-747">呼叫端沒有必要的權限。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-747">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="f7fd8-748">當叫用晚期繫結機制透過例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-748">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="f7fd8-749">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-749">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._AssemblyBuilder.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _AssemblyBuilder.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._AssemblyBuilder.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.System#Runtime#InteropServices#_AssemblyBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _AssemblyBuilder.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._AssemblyBuilder.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = System::Runtime::InteropServices::_AssemblyBuilder::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._AssemblyBuilder.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid"><span data-ttu-id="f7fd8-750">保留供未來使用。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-750">Reserved for future use.</span></span> <span data-ttu-id="f7fd8-751">必須是 IID_NULL。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-751">Must be IID_NULL.</span></span></param>
        <param name="rgszNames"><span data-ttu-id="f7fd8-752">要對應之傳入的名稱陣列。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-752">Passed-in array of names to be mapped.</span></span></param>
        <param name="cNames"><span data-ttu-id="f7fd8-753">要對應的名稱計數。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-753">Count of the names to be mapped.</span></span></param>
        <param name="lcid"><span data-ttu-id="f7fd8-754">用於解譯名稱的地區設定內容。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-754">The locale context in which to interpret the names.</span></span></param>
        <param name="rgDispId"><span data-ttu-id="f7fd8-755">呼叫端配置的陣列，用於接收對應於名稱的 ID。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-755">Caller-allocated array which receives the IDs corresponding to the names.</span></span></param>
        <summary><span data-ttu-id="f7fd8-756">將一組名稱對應至一組對應的分派識別項 (Dispatch Identifier)。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-756">Maps a set of names to a corresponding set of dispatch identifiers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f7fd8-757">這個方法會從 unmanaged 程式碼，是用於存取 managed 類別，並不會呼叫從 managed 程式碼。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-757">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="f7fd8-758">如需詳細資訊`IDispatch::GetIDsOfNames`，請參閱 MSDN Library。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-758">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="f7fd8-759">方法使用 COM <c>IDispatch</c> 介面進行晚期繫結呼叫。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-759">The method is called late-bound using the COM <c>IDispatch</c> interface.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._AssemblyBuilder.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _AssemblyBuilder.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._AssemblyBuilder.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.System#Runtime#InteropServices#_AssemblyBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _AssemblyBuilder.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._AssemblyBuilder.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = System::Runtime::InteropServices::_AssemblyBuilder::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._AssemblyBuilder.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo"><span data-ttu-id="f7fd8-760">要傳回的類型資訊。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-760">The type information to return.</span></span></param>
        <param name="lcid"><span data-ttu-id="f7fd8-761">類型資訊的地區設定識別項。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-761">The locale identifier for the type information.</span></span></param>
        <param name="ppTInfo"><span data-ttu-id="f7fd8-762">接收要求的類型資訊物件的指標。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-762">Receives a pointer to the requested type information object.</span></span></param>
        <summary><span data-ttu-id="f7fd8-763">擷取物件的類型資訊，可以用來取得介面的類型資訊。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-763">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f7fd8-764">這個方法會從 unmanaged 程式碼，是用於存取 managed 類別，並不會呼叫從 managed 程式碼。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-764">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="f7fd8-765">如需詳細資訊`IDispatch::GetTypeInfo`，請參閱 MSDN Library。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-765">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="f7fd8-766">方法使用 COM <c>IDispatch</c> 介面進行晚期繫結呼叫。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-766">The method is called late-bound using the COM <c>IDispatch</c> interface.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._AssemblyBuilder.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _AssemblyBuilder.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._AssemblyBuilder.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.System#Runtime#InteropServices#_AssemblyBuilder#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _AssemblyBuilder.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._AssemblyBuilder.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = System::Runtime::InteropServices::_AssemblyBuilder::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._AssemblyBuilder.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo"><span data-ttu-id="f7fd8-767">指向接收物件提供的類型資訊介面數目的位置。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-767">Points to a location that receives the number of type information interfaces provided by the object.</span></span></param>
        <summary><span data-ttu-id="f7fd8-768">擷取物件提供的類型資訊介面數目 (0 或 1)。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-768">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f7fd8-769">這個方法會從 unmanaged 程式碼，是用於存取 managed 類別，並不會呼叫從 managed 程式碼。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-769">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="f7fd8-770">如需詳細資訊`IDispatch::GetTypeInfoCount`，請參閱 MSDN Library。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-770">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="f7fd8-771">方法使用 COM <c>IDispatch</c> 介面進行晚期繫結呼叫。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-771">The method is called late-bound using the COM <c>IDispatch</c> interface.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._AssemblyBuilder.Invoke">
      <MemberSignature Language="C#" Value="void _AssemblyBuilder.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._AssemblyBuilder.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.System#Runtime#InteropServices#_AssemblyBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _AssemblyBuilder.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._AssemblyBuilder.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = System::Runtime::InteropServices::_AssemblyBuilder::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._AssemblyBuilder.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember"><span data-ttu-id="f7fd8-772">辨識成員。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-772">Identifies the member.</span></span></param>
        <param name="riid"><span data-ttu-id="f7fd8-773">保留供未來使用。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-773">Reserved for future use.</span></span> <span data-ttu-id="f7fd8-774">必須是 IID_NULL。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-774">Must be IID_NULL.</span></span></param>
        <param name="lcid"><span data-ttu-id="f7fd8-775">地區設定內容，用於解譯引數。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-775">The locale context in which to interpret arguments.</span></span></param>
        <param name="wFlags"><span data-ttu-id="f7fd8-776">描述呼叫之內容的旗標。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-776">Flags describing the context of the call.</span></span></param>
        <param name="pDispParams"><span data-ttu-id="f7fd8-777">結構的指標，此結構包含引數陣列、指名引數之 DISPID 引數的陣列，以及陣列中項目數目的計數。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-777">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span></span></param>
        <param name="pVarResult"><span data-ttu-id="f7fd8-778">指向用於儲存結果之位置的指標。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-778">Pointer to the location where the result is to be stored.</span></span></param>
        <param name="pExcepInfo"><span data-ttu-id="f7fd8-779">包含例外狀況資訊的結構指標。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-779">Pointer to a structure that contains exception information.</span></span></param>
        <param name="puArgErr"><span data-ttu-id="f7fd8-780">第一個有錯誤的引數索引。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-780">The index of the first argument that has an error.</span></span></param>
        <summary><span data-ttu-id="f7fd8-781">提供物件所公開的屬性和方法的存取權。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-781">Provides access to properties and methods exposed by an object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f7fd8-782">這個方法會從 unmanaged 程式碼，是用於存取 managed 類別，並不會呼叫從 managed 程式碼。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-782">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="f7fd8-783">如需詳細資訊`IDispatch::Invoke`，請參閱 MSDN Library。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-783">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="f7fd8-784">方法使用 COM <c>IDispatch</c> 介面進行晚期繫結呼叫。</span><span class="sxs-lookup"><span data-stu-id="f7fd8-784">The method is called late-bound using the COM <c>IDispatch</c> interface.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>